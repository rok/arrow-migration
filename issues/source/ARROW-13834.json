{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13398677",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398677",
    "key": "ARROW-13834",
    "fields": {
        "parent": {
            "id": "13390911",
            "key": "ARROW-13407",
            "self": "https://issues.apache.org/jira/rest/api/2/issue/13390911",
            "fields": {
                "summary": "[Documentation] Documentation Improvements",
                "status": {
                    "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                    "description": "The issue is open and ready for the assignee to start work on it.",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                    "name": "Open",
                    "id": "1",
                    "statusCategory": {
                        "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                        "id": 2,
                        "key": "new",
                        "colorName": "blue-gray",
                        "name": "To Do"
                    }
                },
                "priority": {
                    "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                    "name": "Major",
                    "id": "3"
                },
                "issuetype": {
                    "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                    "id": "4",
                    "description": "An improvement or enhancement to an existing feature or task.",
                    "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                    "name": "Improvement",
                    "subtask": false,
                    "avatarId": 21140
                }
            }
        },
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12350591",
                "id": "12350591",
                "description": "",
                "name": "7.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-02-03"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12629104",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12629104",
                "type": {
                    "id": "12310660",
                    "name": "Completes",
                    "inward": "is fixed by",
                    "outward": "fixes",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310660"
                },
                "outwardIssue": {
                    "id": "13410202",
                    "key": "ARROW-14603",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13410202",
                    "fields": {
                        "summary": "[Doc] Tutorial - R bindings",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
                            "id": "7",
                            "description": "The sub-task of the issue",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
                            "name": "Sub-task",
                            "subtask": true,
                            "avatarId": 21146
                        }
                    }
                }
            },
            {
                "id": "12629103",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12629103",
                "type": {
                    "id": "12310660",
                    "name": "Completes",
                    "inward": "is fixed by",
                    "outward": "fixes",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310660"
                },
                "outwardIssue": {
                    "id": "13412501",
                    "key": "ARROW-14757",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13412501",
                    "fields": {
                        "summary": "[Doc] Steps in making your first PR - R bindings",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
                            "id": "7",
                            "description": "The sub-task of the issue",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
                            "name": "Sub-task",
                            "subtask": true,
                            "avatarId": 21146
                        }
                    }
                }
            },
            {
                "id": "12629205",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12629205",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13419067",
                    "key": "ARROW-15193",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13419067",
                    "fields": {
                        "summary": "[R][Documentation] Update R binding documentation",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=thisisnic",
            "name": "thisisnic",
            "key": "thisisnic",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=39937",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=39937",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=39937",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=39937"
            },
            "displayName": "Nicola Crane",
            "active": true,
            "timeZone": "Africa/Casablanca"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12332532",
                "id": "12332532",
                "name": "Documentation"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333008",
                "id": "12333008",
                "name": "R"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=thisisnic",
            "name": "thisisnic",
            "key": "thisisnic",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=39937",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=39937",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=39937",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=39937"
            },
            "displayName": "Nicola Crane",
            "active": true,
            "timeZone": "Africa/Casablanca"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=thisisnic",
            "name": "thisisnic",
            "key": "thisisnic",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=39937",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=39937",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=39937",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=39937"
            },
            "displayName": "Nicola Crane",
            "active": true,
            "timeZone": "Africa/Casablanca"
        },
        "aggregateprogress": {
            "progress": 16200,
            "total": 16200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 16200,
            "total": 16200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-13834/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 27,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398677/worklog/693257",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #11915:\nURL: https://github.com/apache/arrow/pull/11915#issuecomment-989875024\n\n\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-09T13:56:14.592+0000",
                    "updated": "2021-12-09T13:56:14.592+0000",
                    "started": "2021-12-09T13:56:14.592+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "693257",
                    "issueId": "13398677"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398677/worklog/693954",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "dragosmg commented on a change in pull request #11915:\nURL: https://github.com/apache/arrow/pull/11915#discussion_r766687872\n\n\n\n##########\nFile path: r/vignettes/developers/bindings.Rmd\n##########\n@@ -0,0 +1,189 @@\n+When writing bindings between C++ compute functions and R functions, the aim is \n+to expose the C++ functionality via existing R functions.  The syntax and \n+functionality should (usually) exactly match that of the existing R functions \n+(though with some exceptions) so that users are able to use existing tidyverse \n+or base R syntax, or call existing S3 methods on objects, whilst taking \n+advantage of the speed and functionality of the underlying arrow package.\n+\n+# Implementing bindings for S3 generics\n+\n+# Implementing bindings to work within dplyr pipelines\n+\n+One of main ways in which users interact with arrow is via dplyr syntax called \n+on Arrow objects.  For example, when a user calls `dplyr::mutate()` on an Arrow Tabular, \n+Dataset, or arrow data query object, the Arrow implementation of `mutate()` is \n+used and under the hood, translates the dplyr code into Arrow C++ code.\n+\n+When using `dplyr::mutate()` or `dplyr::filter()`, you may want to use functions\n+from other packages, e.g. \n+\n+```{r}\n+library(dplyr)\n+library(stringr)\n+starwars %>%\n+  filter(str_detect(name, \"Darth\"))\n+```\n+This functionality has also been implemented in Arrow, e.g.:\n+\n+```{r}\n+library(arrow)\n+arrow_table(starwars) %>%\n+  filter(str_detect(name, \"Darth\")) %>%\n+  collect()\n+```\n+\n+This is possible as a **binding** has been created between the stringr function\n+`str_detect()` and the Arrow C++ function `match_substring_regex`.  You can see \n+this for yourself by inspecting the arrow data query object without retrieving the \n+results via `collect()`.\n+\n+```{r}\n+arrow_table(starwars) %>%\n+  filter(str_detect(name, \"Darth\")) \n+```\n+\n+In the following sections, we'll walk through how to create a binding between an \n+R function and an Arrow C++ function.\n+\n+## Walkthrough\n+\n+Imagine you are writing the bindings for the C++ function \n+[`starts_with()`](https://arrow.apache.org/docs/cpp/compute.html#containment-tests) \n+and want to bind it to the (base) R function `startsWith()`.\n+\n+First, let's take a look at the docs for both of those functions.\n+\n+First, here\u2019s the docs for R\u2019s `startsWith()` (also available at https://stat.ethz.ch/R-manual/R-devel/library/base/html/startsWith.html)\n+\n+```{r, echo=FALSE, out.width=\"50%\"}\n+knitr::include_graphics(\"./startswithdocs.png\")\n+```\n+\n+It takes 2 parameters; `x` - the input, and `prefix` - the characters to check \n+if `x` starts with.\n+\n+Now, let\u2019s go to \n+[the compute function documentation](https://arrow.apache.org/docs/cpp/compute.html#containment-tests)\n+and look for the Arrow C++ library\u2019s `starts_with()` function:\n+\n+```{r, echo=FALSE, out.width=\"50%\"}\n+knitr::include_graphics(\"./starts_with_docs.png\")\n+```\n+We can see that `starts_with()` is a unary function, which means that it takes a\n+single data input. The data input must be a string-like class, and the returned \n+value is boolean, both of which match up to R\u2019s `startsWith()`.\n+\n+There is an options class associated with `starts_with()` - called [`MatchSubstringOptions`](https://arrow.apache.org/docs/cpp/api/compute.html#_CPPv4N5arrow7compute21MatchSubstringOptionsE)\n+- so let\u2019s take a look at that.\n+\n+```{r, echo=FALSE, out.width=\"50%\"}\n+knitr::include_graphics(\"./matchsubstringoptions.png\")\n+```\n+\n+Options classes allow the user to control the behaviour of the function.  In \n+this case, there are two possible options which can be supplied - `pattern` and \n+`ignore_case`, which are described in the docs shown above.\n+\n+What conclusions can be drawn from what we\u2019ve seen so far?\n+\n+Base R\u2019s `startsWith()` and Arrow\u2019s `starts_with()` operate on equivalent data \n+types, return equivalent data types, and as there are no options implemented in \n+R that Arrow doesn\u2019t have, this should be fairly simple to map without a great \n+deal of extra work.  \n+\n+As `starts_with()` has an options class associated with it, we\u2019ll need to make \n+sure that it\u2019s linked up with this in the R code.\n+\n+So let's get started.\n+\n+### Step 1 - add unit tests\n+\n+Look up the R function that you want to bind the compute kernel to, and write a \n+set of unit tests that use a dplyr pipeline and `compare_dplyr_binding()` (and \n+perhaps even `compare_dplyr_error()` if necessary.  These functions compare the \n+output of the original function with the dplyr bindings and make sure they match.\n+\n+Make sure you\u2019re testing all parameters of the R function.\n+\n+Below is a possible example test for `startsWith()`.\n+\n+```{r, eval = FALSE}\n+test_that(\"startsWith\", {\n+  df <- tibble(x = c(\"Foo\", \"bar\", \"baz\", \"qux\"))\n+ \n+  compare_dplyr_binding(\n+    .input %>%\n+        filter(startsWith(x, \"b\")) %>%\n+        collect(),\n+    df\n+  )\n+\n+}\n\nReview comment:\n       I think you are missing a closing bracket `)` here. The closing for `test_that(`\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-10T13:43:36.945+0000",
                    "updated": "2021-12-10T13:43:36.945+0000",
                    "started": "2021-12-10T13:43:36.945+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "693954",
                    "issueId": "13398677"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398677/worklog/693966",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "dragosmg commented on a change in pull request #11915:\nURL: https://github.com/apache/arrow/pull/11915#discussion_r766703443\n\n\n\n##########\nFile path: r/vignettes/developers/bindings.Rmd\n##########\n@@ -0,0 +1,189 @@\n+When writing bindings between C++ compute functions and R functions, the aim is \n+to expose the C++ functionality via existing R functions.  The syntax and \n+functionality should (usually) exactly match that of the existing R functions \n+(though with some exceptions) so that users are able to use existing tidyverse \n+or base R syntax, or call existing S3 methods on objects, whilst taking \n+advantage of the speed and functionality of the underlying arrow package.\n+\n+# Implementing bindings for S3 generics\n+\n+# Implementing bindings to work within dplyr pipelines\n+\n+One of main ways in which users interact with arrow is via dplyr syntax called \n+on Arrow objects.  For example, when a user calls `dplyr::mutate()` on an Arrow Tabular, \n+Dataset, or arrow data query object, the Arrow implementation of `mutate()` is \n+used and under the hood, translates the dplyr code into Arrow C++ code.\n+\n+When using `dplyr::mutate()` or `dplyr::filter()`, you may want to use functions\n+from other packages, e.g. \n+\n+```{r}\n+library(dplyr)\n+library(stringr)\n+starwars %>%\n+  filter(str_detect(name, \"Darth\"))\n+```\n+This functionality has also been implemented in Arrow, e.g.:\n+\n+```{r}\n+library(arrow)\n+arrow_table(starwars) %>%\n+  filter(str_detect(name, \"Darth\")) %>%\n+  collect()\n+```\n+\n+This is possible as a **binding** has been created between the stringr function\n+`str_detect()` and the Arrow C++ function `match_substring_regex`.  You can see \n+this for yourself by inspecting the arrow data query object without retrieving the \n+results via `collect()`.\n+\n+```{r}\n+arrow_table(starwars) %>%\n+  filter(str_detect(name, \"Darth\")) \n+```\n+\n+In the following sections, we'll walk through how to create a binding between an \n+R function and an Arrow C++ function.\n+\n+## Walkthrough\n+\n+Imagine you are writing the bindings for the C++ function \n+[`starts_with()`](https://arrow.apache.org/docs/cpp/compute.html#containment-tests) \n+and want to bind it to the (base) R function `startsWith()`.\n+\n+First, let's take a look at the docs for both of those functions.\n+\n+First, here\u2019s the docs for R\u2019s `startsWith()` (also available at https://stat.ethz.ch/R-manual/R-devel/library/base/html/startsWith.html)\n+\n+```{r, echo=FALSE, out.width=\"50%\"}\n+knitr::include_graphics(\"./startswithdocs.png\")\n+```\n+\n+It takes 2 parameters; `x` - the input, and `prefix` - the characters to check \n+if `x` starts with.\n+\n+Now, let\u2019s go to \n+[the compute function documentation](https://arrow.apache.org/docs/cpp/compute.html#containment-tests)\n+and look for the Arrow C++ library\u2019s `starts_with()` function:\n+\n+```{r, echo=FALSE, out.width=\"50%\"}\n+knitr::include_graphics(\"./starts_with_docs.png\")\n+```\n+We can see that `starts_with()` is a unary function, which means that it takes a\n+single data input. The data input must be a string-like class, and the returned \n+value is boolean, both of which match up to R\u2019s `startsWith()`.\n+\n+There is an options class associated with `starts_with()` - called [`MatchSubstringOptions`](https://arrow.apache.org/docs/cpp/api/compute.html#_CPPv4N5arrow7compute21MatchSubstringOptionsE)\n+- so let\u2019s take a look at that.\n+\n+```{r, echo=FALSE, out.width=\"50%\"}\n+knitr::include_graphics(\"./matchsubstringoptions.png\")\n+```\n+\n+Options classes allow the user to control the behaviour of the function.  In \n+this case, there are two possible options which can be supplied - `pattern` and \n+`ignore_case`, which are described in the docs shown above.\n+\n+What conclusions can be drawn from what we\u2019ve seen so far?\n+\n+Base R\u2019s `startsWith()` and Arrow\u2019s `starts_with()` operate on equivalent data \n+types, return equivalent data types, and as there are no options implemented in \n\nReview comment:\n       _Options_ are the _arguments_ in R speak?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-10T14:05:16.606+0000",
                    "updated": "2021-12-10T14:05:16.606+0000",
                    "started": "2021-12-10T14:05:16.605+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "693966",
                    "issueId": "13398677"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398677/worklog/694427",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "thisisnic commented on a change in pull request #11915:\nURL: https://github.com/apache/arrow/pull/11915#discussion_r767164146\n\n\n\n##########\nFile path: r/vignettes/developers/bindings.Rmd\n##########\n@@ -0,0 +1,189 @@\n+When writing bindings between C++ compute functions and R functions, the aim is \n+to expose the C++ functionality via existing R functions.  The syntax and \n+functionality should (usually) exactly match that of the existing R functions \n+(though with some exceptions) so that users are able to use existing tidyverse \n+or base R syntax, or call existing S3 methods on objects, whilst taking \n+advantage of the speed and functionality of the underlying arrow package.\n+\n+# Implementing bindings for S3 generics\n+\n+# Implementing bindings to work within dplyr pipelines\n+\n+One of main ways in which users interact with arrow is via dplyr syntax called \n+on Arrow objects.  For example, when a user calls `dplyr::mutate()` on an Arrow Tabular, \n+Dataset, or arrow data query object, the Arrow implementation of `mutate()` is \n+used and under the hood, translates the dplyr code into Arrow C++ code.\n+\n+When using `dplyr::mutate()` or `dplyr::filter()`, you may want to use functions\n+from other packages, e.g. \n+\n+```{r}\n+library(dplyr)\n+library(stringr)\n+starwars %>%\n+  filter(str_detect(name, \"Darth\"))\n+```\n+This functionality has also been implemented in Arrow, e.g.:\n+\n+```{r}\n+library(arrow)\n+arrow_table(starwars) %>%\n+  filter(str_detect(name, \"Darth\")) %>%\n+  collect()\n+```\n+\n+This is possible as a **binding** has been created between the stringr function\n+`str_detect()` and the Arrow C++ function `match_substring_regex`.  You can see \n+this for yourself by inspecting the arrow data query object without retrieving the \n+results via `collect()`.\n+\n+```{r}\n+arrow_table(starwars) %>%\n+  filter(str_detect(name, \"Darth\")) \n+```\n+\n+In the following sections, we'll walk through how to create a binding between an \n+R function and an Arrow C++ function.\n+\n+## Walkthrough\n+\n+Imagine you are writing the bindings for the C++ function \n+[`starts_with()`](https://arrow.apache.org/docs/cpp/compute.html#containment-tests) \n+and want to bind it to the (base) R function `startsWith()`.\n+\n+First, let's take a look at the docs for both of those functions.\n+\n+First, here\u2019s the docs for R\u2019s `startsWith()` (also available at https://stat.ethz.ch/R-manual/R-devel/library/base/html/startsWith.html)\n+\n+```{r, echo=FALSE, out.width=\"50%\"}\n+knitr::include_graphics(\"./startswithdocs.png\")\n+```\n+\n+It takes 2 parameters; `x` - the input, and `prefix` - the characters to check \n+if `x` starts with.\n+\n+Now, let\u2019s go to \n+[the compute function documentation](https://arrow.apache.org/docs/cpp/compute.html#containment-tests)\n+and look for the Arrow C++ library\u2019s `starts_with()` function:\n+\n+```{r, echo=FALSE, out.width=\"50%\"}\n+knitr::include_graphics(\"./starts_with_docs.png\")\n+```\n+We can see that `starts_with()` is a unary function, which means that it takes a\n+single data input. The data input must be a string-like class, and the returned \n+value is boolean, both of which match up to R\u2019s `startsWith()`.\n+\n+There is an options class associated with `starts_with()` - called [`MatchSubstringOptions`](https://arrow.apache.org/docs/cpp/api/compute.html#_CPPv4N5arrow7compute21MatchSubstringOptionsE)\n+- so let\u2019s take a look at that.\n+\n+```{r, echo=FALSE, out.width=\"50%\"}\n+knitr::include_graphics(\"./matchsubstringoptions.png\")\n+```\n+\n+Options classes allow the user to control the behaviour of the function.  In \n+this case, there are two possible options which can be supplied - `pattern` and \n+`ignore_case`, which are described in the docs shown above.\n+\n+What conclusions can be drawn from what we\u2019ve seen so far?\n+\n+Base R\u2019s `startsWith()` and Arrow\u2019s `starts_with()` operate on equivalent data \n+types, return equivalent data types, and as there are no options implemented in \n\nReview comment:\n       Kind of but it's not a perfect direct mapping - in R, arguments can include the actual data to be analysed, whereas in the C++ compute functions, the arguments are the data to be analysed and the options are for specifying how exactly it works.  I will add something about this to the text - thanks for bringing this up!\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-11T15:17:32.084+0000",
                    "updated": "2021-12-11T15:17:32.084+0000",
                    "started": "2021-12-11T15:17:32.084+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "694427",
                    "issueId": "13398677"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398677/worklog/694545",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "thisisnic commented on a change in pull request #11915:\nURL: https://github.com/apache/arrow/pull/11915#discussion_r767164146\n\n\n\n##########\nFile path: r/vignettes/developers/bindings.Rmd\n##########\n@@ -0,0 +1,189 @@\n+When writing bindings between C++ compute functions and R functions, the aim is \n+to expose the C++ functionality via existing R functions.  The syntax and \n+functionality should (usually) exactly match that of the existing R functions \n+(though with some exceptions) so that users are able to use existing tidyverse \n+or base R syntax, or call existing S3 methods on objects, whilst taking \n+advantage of the speed and functionality of the underlying arrow package.\n+\n+# Implementing bindings for S3 generics\n+\n+# Implementing bindings to work within dplyr pipelines\n+\n+One of main ways in which users interact with arrow is via dplyr syntax called \n+on Arrow objects.  For example, when a user calls `dplyr::mutate()` on an Arrow Tabular, \n+Dataset, or arrow data query object, the Arrow implementation of `mutate()` is \n+used and under the hood, translates the dplyr code into Arrow C++ code.\n+\n+When using `dplyr::mutate()` or `dplyr::filter()`, you may want to use functions\n+from other packages, e.g. \n+\n+```{r}\n+library(dplyr)\n+library(stringr)\n+starwars %>%\n+  filter(str_detect(name, \"Darth\"))\n+```\n+This functionality has also been implemented in Arrow, e.g.:\n+\n+```{r}\n+library(arrow)\n+arrow_table(starwars) %>%\n+  filter(str_detect(name, \"Darth\")) %>%\n+  collect()\n+```\n+\n+This is possible as a **binding** has been created between the stringr function\n+`str_detect()` and the Arrow C++ function `match_substring_regex`.  You can see \n+this for yourself by inspecting the arrow data query object without retrieving the \n+results via `collect()`.\n+\n+```{r}\n+arrow_table(starwars) %>%\n+  filter(str_detect(name, \"Darth\")) \n+```\n+\n+In the following sections, we'll walk through how to create a binding between an \n+R function and an Arrow C++ function.\n+\n+## Walkthrough\n+\n+Imagine you are writing the bindings for the C++ function \n+[`starts_with()`](https://arrow.apache.org/docs/cpp/compute.html#containment-tests) \n+and want to bind it to the (base) R function `startsWith()`.\n+\n+First, let's take a look at the docs for both of those functions.\n+\n+First, here\u2019s the docs for R\u2019s `startsWith()` (also available at https://stat.ethz.ch/R-manual/R-devel/library/base/html/startsWith.html)\n+\n+```{r, echo=FALSE, out.width=\"50%\"}\n+knitr::include_graphics(\"./startswithdocs.png\")\n+```\n+\n+It takes 2 parameters; `x` - the input, and `prefix` - the characters to check \n+if `x` starts with.\n+\n+Now, let\u2019s go to \n+[the compute function documentation](https://arrow.apache.org/docs/cpp/compute.html#containment-tests)\n+and look for the Arrow C++ library\u2019s `starts_with()` function:\n+\n+```{r, echo=FALSE, out.width=\"50%\"}\n+knitr::include_graphics(\"./starts_with_docs.png\")\n+```\n+We can see that `starts_with()` is a unary function, which means that it takes a\n+single data input. The data input must be a string-like class, and the returned \n+value is boolean, both of which match up to R\u2019s `startsWith()`.\n+\n+There is an options class associated with `starts_with()` - called [`MatchSubstringOptions`](https://arrow.apache.org/docs/cpp/api/compute.html#_CPPv4N5arrow7compute21MatchSubstringOptionsE)\n+- so let\u2019s take a look at that.\n+\n+```{r, echo=FALSE, out.width=\"50%\"}\n+knitr::include_graphics(\"./matchsubstringoptions.png\")\n+```\n+\n+Options classes allow the user to control the behaviour of the function.  In \n+this case, there are two possible options which can be supplied - `pattern` and \n+`ignore_case`, which are described in the docs shown above.\n+\n+What conclusions can be drawn from what we\u2019ve seen so far?\n+\n+Base R\u2019s `startsWith()` and Arrow\u2019s `starts_with()` operate on equivalent data \n+types, return equivalent data types, and as there are no options implemented in \n\nReview comment:\n       Kind of but it's not a perfect direct mapping - in R, arguments can include the actual data to be analysed, whereas in the C++ compute functions, the arguments are the data to be analysed and the options are for specifying how exactly it works.  I will add something about this to the text - thanks for bringing this up!\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-12T05:57:29.330+0000",
                    "updated": "2021-12-12T05:57:29.330+0000",
                    "started": "2021-12-12T05:57:29.330+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "694545",
                    "issueId": "13398677"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398677/worklog/696705",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "thisisnic commented on a change in pull request #11915:\nURL: https://github.com/apache/arrow/pull/11915#discussion_r769758171\n\n\n\n##########\nFile path: r/vignettes/developers/bindings.Rmd\n##########\n@@ -0,0 +1,189 @@\n+When writing bindings between C++ compute functions and R functions, the aim is \n+to expose the C++ functionality via existing R functions.  The syntax and \n+functionality should (usually) exactly match that of the existing R functions \n+(though with some exceptions) so that users are able to use existing tidyverse \n+or base R syntax, or call existing S3 methods on objects, whilst taking \n+advantage of the speed and functionality of the underlying arrow package.\n+\n+# Implementing bindings for S3 generics\n+\n+# Implementing bindings to work within dplyr pipelines\n+\n+One of main ways in which users interact with arrow is via dplyr syntax called \n+on Arrow objects.  For example, when a user calls `dplyr::mutate()` on an Arrow Tabular, \n+Dataset, or arrow data query object, the Arrow implementation of `mutate()` is \n+used and under the hood, translates the dplyr code into Arrow C++ code.\n+\n+When using `dplyr::mutate()` or `dplyr::filter()`, you may want to use functions\n+from other packages, e.g. \n+\n+```{r}\n+library(dplyr)\n+library(stringr)\n+starwars %>%\n+  filter(str_detect(name, \"Darth\"))\n+```\n+This functionality has also been implemented in Arrow, e.g.:\n+\n+```{r}\n+library(arrow)\n+arrow_table(starwars) %>%\n+  filter(str_detect(name, \"Darth\")) %>%\n+  collect()\n+```\n+\n+This is possible as a **binding** has been created between the stringr function\n+`str_detect()` and the Arrow C++ function `match_substring_regex`.  You can see \n+this for yourself by inspecting the arrow data query object without retrieving the \n+results via `collect()`.\n+\n+```{r}\n+arrow_table(starwars) %>%\n+  filter(str_detect(name, \"Darth\")) \n+```\n+\n+In the following sections, we'll walk through how to create a binding between an \n+R function and an Arrow C++ function.\n+\n+## Walkthrough\n+\n+Imagine you are writing the bindings for the C++ function \n+[`starts_with()`](https://arrow.apache.org/docs/cpp/compute.html#containment-tests) \n+and want to bind it to the (base) R function `startsWith()`.\n+\n+First, let's take a look at the docs for both of those functions.\n+\n+First, here\u2019s the docs for R\u2019s `startsWith()` (also available at https://stat.ethz.ch/R-manual/R-devel/library/base/html/startsWith.html)\n+\n+```{r, echo=FALSE, out.width=\"50%\"}\n+knitr::include_graphics(\"./startswithdocs.png\")\n+```\n+\n+It takes 2 parameters; `x` - the input, and `prefix` - the characters to check \n+if `x` starts with.\n+\n+Now, let\u2019s go to \n+[the compute function documentation](https://arrow.apache.org/docs/cpp/compute.html#containment-tests)\n+and look for the Arrow C++ library\u2019s `starts_with()` function:\n+\n+```{r, echo=FALSE, out.width=\"50%\"}\n+knitr::include_graphics(\"./starts_with_docs.png\")\n+```\n+We can see that `starts_with()` is a unary function, which means that it takes a\n+single data input. The data input must be a string-like class, and the returned \n+value is boolean, both of which match up to R\u2019s `startsWith()`.\n+\n+There is an options class associated with `starts_with()` - called [`MatchSubstringOptions`](https://arrow.apache.org/docs/cpp/api/compute.html#_CPPv4N5arrow7compute21MatchSubstringOptionsE)\n+- so let\u2019s take a look at that.\n+\n+```{r, echo=FALSE, out.width=\"50%\"}\n+knitr::include_graphics(\"./matchsubstringoptions.png\")\n+```\n+\n+Options classes allow the user to control the behaviour of the function.  In \n+this case, there are two possible options which can be supplied - `pattern` and \n+`ignore_case`, which are described in the docs shown above.\n+\n+What conclusions can be drawn from what we\u2019ve seen so far?\n+\n+Base R\u2019s `startsWith()` and Arrow\u2019s `starts_with()` operate on equivalent data \n+types, return equivalent data types, and as there are no options implemented in \n+R that Arrow doesn\u2019t have, this should be fairly simple to map without a great \n+deal of extra work.  \n+\n+As `starts_with()` has an options class associated with it, we\u2019ll need to make \n+sure that it\u2019s linked up with this in the R code.\n+\n+So let's get started.\n+\n+### Step 1 - add unit tests\n+\n+Look up the R function that you want to bind the compute kernel to, and write a \n+set of unit tests that use a dplyr pipeline and `compare_dplyr_binding()` (and \n+perhaps even `compare_dplyr_error()` if necessary.  These functions compare the \n+output of the original function with the dplyr bindings and make sure they match.\n+\n+Make sure you\u2019re testing all parameters of the R function.\n+\n+Below is a possible example test for `startsWith()`.\n+\n+```{r, eval = FALSE}\n+test_that(\"startsWith\", {\n+  df <- tibble(x = c(\"Foo\", \"bar\", \"baz\", \"qux\"))\n+ \n+  compare_dplyr_binding(\n+    .input %>%\n+        filter(startsWith(x, \"b\")) %>%\n+        collect(),\n+    df\n+  )\n+\n+}\n\nReview comment:\n       Good spot, thank you!\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-15T15:53:08.609+0000",
                    "updated": "2021-12-15T15:53:08.609+0000",
                    "started": "2021-12-15T15:53:08.608+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "696705",
                    "issueId": "13398677"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398677/worklog/696742",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "thisisnic commented on pull request #11915:\nURL: https://github.com/apache/arrow/pull/11915#issuecomment-994974709\n\n\n   This will need to be updated once https://github.com/apache/arrow/pull/11904 is merged\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-15T16:50:40.971+0000",
                    "updated": "2021-12-15T16:50:40.971+0000",
                    "started": "2021-12-15T16:50:40.971+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "696742",
                    "issueId": "13398677"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398677/worklog/697136",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "AlenkaF commented on a change in pull request #11915:\nURL: https://github.com/apache/arrow/pull/11915#discussion_r770319868\n\n\n\n##########\nFile path: r/vignettes/developers/bindings.Rmd\n##########\n@@ -0,0 +1,238 @@\n+---\n+title: \"Writing Bindings\"\n+---\n+\n+```{r, include=FALSE}\n+library(arrow, warn.conflicts = FALSE)\n+library(dplyr, warn.conflicts = FALSE)\n+```\n+\n+\n+When writing bindings between C++ compute functions and R functions, the aim is \n+to expose the C++ functionality via existing R functions.  The syntax and \n+functionality should (usually) exactly match that of the existing R functions \n+(though with some exceptions) so that users are able to use existing tidyverse \n+or base R syntax, or call existing S3 methods on objects, whilst taking \n+advantage of the speed and functionality of the underlying arrow package.\n+\n+# Implementing bindings for S3 generics\n+\n+If a function is an S3 generic method, you may be able to define a version of it for \n+Arrow objects.  There are two base classes which have been defined in the\n+R package so that S3 methods don't have to be defined repeatedly for objects with\n+similar behaviour:\n+\n+* ArrowTabular - for RecordBatch and Table objects\n+* ArrowDatum - for Scalar, Array, and ChunkedArray objects\n+\n+What this means is that any function defined for the base class will work with \n+the child class.  For example, the function `dim()` may be defined as:\n+\n+```{r, eval = FALSE}\n+dim.ArrowTabular <- function(x) c(x$num_rows, x$num_columns)\n+```\n+\n+This implements `dim()` for both RecordBatch and Table objects.\n+\n+```{r}\n+arrow_table(x = c(1, 2, 3), y = c(4, 5, 6)) %>%\n+  dim()\n+```\n+\n+# Implementing bindings to work within dplyr pipelines\n+\n+One of main ways in which users interact with arrow is via dplyr syntax called \n+on Arrow objects.  For example, when a user calls `dplyr::mutate()` on an Arrow Tabular, \n+Dataset, or arrow data query object, the Arrow implementation of `mutate()` is \n+used and under the hood, translates the dplyr code into Arrow C++ code.\n+\n+When using `dplyr::mutate()` or `dplyr::filter()`, you may want to use functions\n+from other packages.  The example below uses `stringr::str_detect()`.\n+\n+```{r}\n+library(dplyr)\n+library(stringr)\n+starwars %>%\n+  filter(str_detect(name, \"Darth\"))\n+```\n+This functionality has also been implemented in Arrow, e.g.:\n+\n+```{r}\n+library(arrow)\n+arrow_table(starwars) %>%\n+  filter(str_detect(name, \"Darth\")) %>%\n+  collect()\n+```\n\nReview comment:\n       Love this comparison plus the starwars!\r\n   \r\n   The comparison helps me understand how the binding works and I can use the same syntax which is great! Starwars adds a fun element to the learning and with it I will remember this example much easier.\n\n##########\nFile path: r/vignettes/developers/bindings.Rmd\n##########\n@@ -0,0 +1,238 @@\n+---\n+title: \"Writing Bindings\"\n+---\n+\n+```{r, include=FALSE}\n+library(arrow, warn.conflicts = FALSE)\n+library(dplyr, warn.conflicts = FALSE)\n+```\n+\n+\n+When writing bindings between C++ compute functions and R functions, the aim is \n+to expose the C++ functionality via existing R functions.  The syntax and \n+functionality should (usually) exactly match that of the existing R functions \n+(though with some exceptions) so that users are able to use existing tidyverse \n+or base R syntax, or call existing S3 methods on objects, whilst taking \n+advantage of the speed and functionality of the underlying arrow package.\n\nReview comment:\n       ```suggestion\r\n   When writing bindings between C++ compute functions and R functions, the aim is \r\n   to expose the C++ functionality via existing R functions. The syntax and \r\n   functionality should match that of the existing R functions \r\n   (though with some exceptions) so that users are able to use existing tidyverse \r\n   or base R syntax, or call existing S3 methods on objects, whilst taking \r\n   advantage of the speed and functionality of the underlying arrow package.\r\n   ```\r\n   This intro is concise, I like it!\r\n   I would suggest to remove \"(usually) exactly\" as it is slightly confusing (should or shouldn't then) and for me \"match\" together with the second part \"(though with some exceptions)\" makes it clear.\n\n##########\nFile path: r/vignettes/developers/bindings.Rmd\n##########\n@@ -0,0 +1,238 @@\n+---\n+title: \"Writing Bindings\"\n+---\n+\n+```{r, include=FALSE}\n+library(arrow, warn.conflicts = FALSE)\n+library(dplyr, warn.conflicts = FALSE)\n+```\n+\n+\n+When writing bindings between C++ compute functions and R functions, the aim is \n+to expose the C++ functionality via existing R functions.  The syntax and \n+functionality should (usually) exactly match that of the existing R functions \n+(though with some exceptions) so that users are able to use existing tidyverse \n+or base R syntax, or call existing S3 methods on objects, whilst taking \n+advantage of the speed and functionality of the underlying arrow package.\n+\n+# Implementing bindings for S3 generics\n+\n+If a function is an S3 generic method, you may be able to define a version of it for \n+Arrow objects.  There are two base classes which have been defined in the\n+R package so that S3 methods don't have to be defined repeatedly for objects with\n+similar behaviour:\n+\n+* ArrowTabular - for RecordBatch and Table objects\n+* ArrowDatum - for Scalar, Array, and ChunkedArray objects\n+\n+What this means is that any function defined for the base class will work with \n+the child class.  For example, the function `dim()` may be defined as:\n+\n+```{r, eval = FALSE}\n+dim.ArrowTabular <- function(x) c(x$num_rows, x$num_columns)\n+```\n+\n+This implements `dim()` for both RecordBatch and Table objects.\n+\n+```{r}\n+arrow_table(x = c(1, 2, 3), y = c(4, 5, 6)) %>%\n+  dim()\n+```\n+\n+# Implementing bindings to work within dplyr pipelines\n+\n+One of main ways in which users interact with arrow is via dplyr syntax called \n+on Arrow objects.  For example, when a user calls `dplyr::mutate()` on an Arrow Tabular, \n+Dataset, or arrow data query object, the Arrow implementation of `mutate()` is \n+used and under the hood, translates the dplyr code into Arrow C++ code.\n+\n+When using `dplyr::mutate()` or `dplyr::filter()`, you may want to use functions\n+from other packages.  The example below uses `stringr::str_detect()`.\n+\n+```{r}\n+library(dplyr)\n+library(stringr)\n+starwars %>%\n+  filter(str_detect(name, \"Darth\"))\n+```\n+This functionality has also been implemented in Arrow, e.g.:\n+\n+```{r}\n+library(arrow)\n+arrow_table(starwars) %>%\n+  filter(str_detect(name, \"Darth\")) %>%\n+  collect()\n+```\n+\n+This is possible as a **binding** has been created between the stringr function\n+`str_detect()` and the Arrow C++ function `match_substring_regex`.  You can see \n+this for yourself by inspecting the arrow data query object without retrieving the \n+results via `collect()`.\n+\n+```{r}\n+arrow_table(starwars) %>%\n+  filter(str_detect(name, \"Darth\")) \n+```\n+\n+In the following sections, we'll walk through how to create a binding between an \n+R function and an Arrow C++ function.\n+\n+## Walkthrough\n+\n+Imagine you are writing the bindings for the C++ function \n+[`starts_with()`](https://arrow.apache.org/docs/cpp/compute.html#containment-tests) \n+and want to bind it to the (base) R function `startsWith()`.\n+\n+First, take a look at the docs for both of those functions.\n+\n+### Examining the R function\n+\n+Here are the docs for R's `startsWith()` (also available at https://stat.ethz.ch/R-manual/R-devel/library/base/html/startsWith.html)\n+\n+```{r, echo=FALSE, out.width=\"50%\"}\n+knitr::include_graphics(\"./startswithdocs.png\")\n+```\n+\n+It takes 2 parameters; `x` - the input, and `prefix` - the characters to check \n+if `x` starts with.\n+\n+### Examining the C++ function\n+\n+Now, go to \n+[the compute function documentation](https://arrow.apache.org/docs/cpp/compute.html#containment-tests)\n+and look for the Arrow C++ library's `starts_with()` function:\n+\n+```{r, echo=FALSE, out.width=\"50%\"}\n+knitr::include_graphics(\"./starts_with_docs.png\")\n+```\n+\n+The docs show that `starts_with()` is a unary function, which means that it takes a\n+single data input. The data input must be a string-like class, and the returned \n+value is boolean, both of which match up to R's `startsWith()`.\n+\n+There is an options class associated with `starts_with()` - called [`MatchSubstringOptions`](https://arrow.apache.org/docs/cpp/api/compute.html#_CPPv4N5arrow7compute21MatchSubstringOptionsE)\n+- so let's take a look at that.\n+\n+```{r, echo=FALSE, out.width=\"50%\"}\n+knitr::include_graphics(\"./matchsubstringoptions.png\")\n+```\n+\n+Options classes allow the user to control the behaviour of the function.  In \n+this case, there are two possible options which can be supplied - `pattern` and \n+`ignore_case`, which are described in the docs shown above.\n+\n+### Comparing the R and C++ functions\n+\n+What conclusions can be drawn from what you've seen so far?\n+\n+Base R's `startsWith()` and Arrow's `starts_with()` operate on equivalent data \n+types, return equivalent data types, and as there are no options implemented in \n+R that Arrow doesn't have, this should be fairly simple to map without a great \n+deal of extra work.  \n+\n+As `starts_with()` has an options class associated with it, we'll need to make \n+sure that it's linked up with this in the R code.\n+\n+In case you're wondering about the difference between arguments in R and options\n+in Arrow, in R, arguments to functions can include the actual data to be \n+analysed as well as options governing how the function works, whereas in the \n+C++ compute functions, the arguments are the data to be analysed and the \n+options are for specifying how exactly the function works.\n+\n+So let's get started.\n+\n+### Step 1 - add unit tests\n+\n+Look up the R function that you want to bind the compute kernel to, and write a \n+set of unit tests that use a dplyr pipeline and `compare_dplyr_binding()` (and \n+perhaps even `compare_dplyr_error()` if necessary.  These functions compare the \n+output of the original function with the dplyr bindings and make sure they match.\n+\n+Make sure you're testing all parameters of the R function.\n+\n+Below is a possible example test for `startsWith()`.\n\nReview comment:\n       I just want to make sure I understand the workflow:\r\n   \r\n   We start with a test where we call the base R's `startsWith()`, right? And then, when we connect the options and add a direct or modified mapping, this test is ready and it then calls the binding in the Arrow R package? (So there is no need to change it)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-16T08:45:20.908+0000",
                    "updated": "2021-12-16T08:45:20.908+0000",
                    "started": "2021-12-16T08:45:20.908+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "697136",
                    "issueId": "13398677"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398677/worklog/697141",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "thisisnic commented on a change in pull request #11915:\nURL: https://github.com/apache/arrow/pull/11915#discussion_r770342775\n\n\n\n##########\nFile path: r/vignettes/developers/bindings.Rmd\n##########\n@@ -0,0 +1,238 @@\n+---\n+title: \"Writing Bindings\"\n+---\n+\n+```{r, include=FALSE}\n+library(arrow, warn.conflicts = FALSE)\n+library(dplyr, warn.conflicts = FALSE)\n+```\n+\n+\n+When writing bindings between C++ compute functions and R functions, the aim is \n+to expose the C++ functionality via existing R functions.  The syntax and \n+functionality should (usually) exactly match that of the existing R functions \n+(though with some exceptions) so that users are able to use existing tidyverse \n+or base R syntax, or call existing S3 methods on objects, whilst taking \n+advantage of the speed and functionality of the underlying arrow package.\n\nReview comment:\n       Excellent point!\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-16T09:04:06.317+0000",
                    "updated": "2021-12-16T09:04:06.317+0000",
                    "started": "2021-12-16T09:04:06.317+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "697141",
                    "issueId": "13398677"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398677/worklog/697142",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "thisisnic commented on a change in pull request #11915:\nURL: https://github.com/apache/arrow/pull/11915#discussion_r770343776\n\n\n\n##########\nFile path: r/vignettes/developers/bindings.Rmd\n##########\n@@ -0,0 +1,238 @@\n+---\n+title: \"Writing Bindings\"\n+---\n+\n+```{r, include=FALSE}\n+library(arrow, warn.conflicts = FALSE)\n+library(dplyr, warn.conflicts = FALSE)\n+```\n+\n+\n+When writing bindings between C++ compute functions and R functions, the aim is \n+to expose the C++ functionality via existing R functions.  The syntax and \n+functionality should (usually) exactly match that of the existing R functions \n+(though with some exceptions) so that users are able to use existing tidyverse \n+or base R syntax, or call existing S3 methods on objects, whilst taking \n+advantage of the speed and functionality of the underlying arrow package.\n+\n+# Implementing bindings for S3 generics\n+\n+If a function is an S3 generic method, you may be able to define a version of it for \n+Arrow objects.  There are two base classes which have been defined in the\n+R package so that S3 methods don't have to be defined repeatedly for objects with\n+similar behaviour:\n+\n+* ArrowTabular - for RecordBatch and Table objects\n+* ArrowDatum - for Scalar, Array, and ChunkedArray objects\n+\n+What this means is that any function defined for the base class will work with \n+the child class.  For example, the function `dim()` may be defined as:\n+\n+```{r, eval = FALSE}\n+dim.ArrowTabular <- function(x) c(x$num_rows, x$num_columns)\n+```\n+\n+This implements `dim()` for both RecordBatch and Table objects.\n+\n+```{r}\n+arrow_table(x = c(1, 2, 3), y = c(4, 5, 6)) %>%\n+  dim()\n+```\n+\n+# Implementing bindings to work within dplyr pipelines\n+\n+One of main ways in which users interact with arrow is via dplyr syntax called \n+on Arrow objects.  For example, when a user calls `dplyr::mutate()` on an Arrow Tabular, \n+Dataset, or arrow data query object, the Arrow implementation of `mutate()` is \n+used and under the hood, translates the dplyr code into Arrow C++ code.\n+\n+When using `dplyr::mutate()` or `dplyr::filter()`, you may want to use functions\n+from other packages.  The example below uses `stringr::str_detect()`.\n+\n+```{r}\n+library(dplyr)\n+library(stringr)\n+starwars %>%\n+  filter(str_detect(name, \"Darth\"))\n+```\n+This functionality has also been implemented in Arrow, e.g.:\n+\n+```{r}\n+library(arrow)\n+arrow_table(starwars) %>%\n+  filter(str_detect(name, \"Darth\")) %>%\n+  collect()\n+```\n+\n+This is possible as a **binding** has been created between the stringr function\n+`str_detect()` and the Arrow C++ function `match_substring_regex`.  You can see \n+this for yourself by inspecting the arrow data query object without retrieving the \n+results via `collect()`.\n+\n+```{r}\n+arrow_table(starwars) %>%\n+  filter(str_detect(name, \"Darth\")) \n+```\n+\n+In the following sections, we'll walk through how to create a binding between an \n+R function and an Arrow C++ function.\n+\n+## Walkthrough\n+\n+Imagine you are writing the bindings for the C++ function \n+[`starts_with()`](https://arrow.apache.org/docs/cpp/compute.html#containment-tests) \n+and want to bind it to the (base) R function `startsWith()`.\n+\n+First, take a look at the docs for both of those functions.\n+\n+### Examining the R function\n+\n+Here are the docs for R's `startsWith()` (also available at https://stat.ethz.ch/R-manual/R-devel/library/base/html/startsWith.html)\n+\n+```{r, echo=FALSE, out.width=\"50%\"}\n+knitr::include_graphics(\"./startswithdocs.png\")\n+```\n+\n+It takes 2 parameters; `x` - the input, and `prefix` - the characters to check \n+if `x` starts with.\n+\n+### Examining the C++ function\n+\n+Now, go to \n+[the compute function documentation](https://arrow.apache.org/docs/cpp/compute.html#containment-tests)\n+and look for the Arrow C++ library's `starts_with()` function:\n+\n+```{r, echo=FALSE, out.width=\"50%\"}\n+knitr::include_graphics(\"./starts_with_docs.png\")\n+```\n+\n+The docs show that `starts_with()` is a unary function, which means that it takes a\n+single data input. The data input must be a string-like class, and the returned \n+value is boolean, both of which match up to R's `startsWith()`.\n+\n+There is an options class associated with `starts_with()` - called [`MatchSubstringOptions`](https://arrow.apache.org/docs/cpp/api/compute.html#_CPPv4N5arrow7compute21MatchSubstringOptionsE)\n+- so let's take a look at that.\n+\n+```{r, echo=FALSE, out.width=\"50%\"}\n+knitr::include_graphics(\"./matchsubstringoptions.png\")\n+```\n+\n+Options classes allow the user to control the behaviour of the function.  In \n+this case, there are two possible options which can be supplied - `pattern` and \n+`ignore_case`, which are described in the docs shown above.\n+\n+### Comparing the R and C++ functions\n+\n+What conclusions can be drawn from what you've seen so far?\n+\n+Base R's `startsWith()` and Arrow's `starts_with()` operate on equivalent data \n+types, return equivalent data types, and as there are no options implemented in \n+R that Arrow doesn't have, this should be fairly simple to map without a great \n+deal of extra work.  \n+\n+As `starts_with()` has an options class associated with it, we'll need to make \n+sure that it's linked up with this in the R code.\n+\n+In case you're wondering about the difference between arguments in R and options\n+in Arrow, in R, arguments to functions can include the actual data to be \n+analysed as well as options governing how the function works, whereas in the \n+C++ compute functions, the arguments are the data to be analysed and the \n+options are for specifying how exactly the function works.\n+\n+So let's get started.\n+\n+### Step 1 - add unit tests\n+\n+Look up the R function that you want to bind the compute kernel to, and write a \n+set of unit tests that use a dplyr pipeline and `compare_dplyr_binding()` (and \n+perhaps even `compare_dplyr_error()` if necessary.  These functions compare the \n+output of the original function with the dplyr bindings and make sure they match.\n+\n+Make sure you're testing all parameters of the R function.\n+\n+Below is a possible example test for `startsWith()`.\n\nReview comment:\n       Yes  - exactly!  Though you make a good point; I need to add some extra explainer text about what `compare_dplyr_binding()` is doing.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-16T09:05:35.046+0000",
                    "updated": "2021-12-16T09:05:35.046+0000",
                    "started": "2021-12-16T09:05:35.046+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "697142",
                    "issueId": "13398677"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398677/worklog/697145",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "thisisnic commented on pull request #11915:\nURL: https://github.com/apache/arrow/pull/11915#issuecomment-995575783\n\n\n   > Also this PR fits nicely with the guide content. I would link to this document from two parts of the guide (bindings and the tutorial). What do you think?\r\n   \r\n   Sounds good to me!\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-16T09:07:21.567+0000",
                    "updated": "2021-12-16T09:07:21.567+0000",
                    "started": "2021-12-16T09:07:21.567+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "697145",
                    "issueId": "13398677"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398677/worklog/697190",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "AlenkaF commented on a change in pull request #11915:\nURL: https://github.com/apache/arrow/pull/11915#discussion_r770414076\n\n\n\n##########\nFile path: r/vignettes/developers/bindings.Rmd\n##########\n@@ -0,0 +1,238 @@\n+---\n+title: \"Writing Bindings\"\n+---\n+\n+```{r, include=FALSE}\n+library(arrow, warn.conflicts = FALSE)\n+library(dplyr, warn.conflicts = FALSE)\n+```\n+\n+\n+When writing bindings between C++ compute functions and R functions, the aim is \n+to expose the C++ functionality via existing R functions.  The syntax and \n+functionality should (usually) exactly match that of the existing R functions \n+(though with some exceptions) so that users are able to use existing tidyverse \n+or base R syntax, or call existing S3 methods on objects, whilst taking \n+advantage of the speed and functionality of the underlying arrow package.\n+\n+# Implementing bindings for S3 generics\n+\n+If a function is an S3 generic method, you may be able to define a version of it for \n+Arrow objects.  There are two base classes which have been defined in the\n+R package so that S3 methods don't have to be defined repeatedly for objects with\n+similar behaviour:\n+\n+* ArrowTabular - for RecordBatch and Table objects\n+* ArrowDatum - for Scalar, Array, and ChunkedArray objects\n+\n+What this means is that any function defined for the base class will work with \n+the child class.  For example, the function `dim()` may be defined as:\n+\n+```{r, eval = FALSE}\n+dim.ArrowTabular <- function(x) c(x$num_rows, x$num_columns)\n+```\n+\n+This implements `dim()` for both RecordBatch and Table objects.\n+\n+```{r}\n+arrow_table(x = c(1, 2, 3), y = c(4, 5, 6)) %>%\n+  dim()\n+```\n+\n+# Implementing bindings to work within dplyr pipelines\n+\n+One of main ways in which users interact with arrow is via dplyr syntax called \n+on Arrow objects.  For example, when a user calls `dplyr::mutate()` on an Arrow Tabular, \n+Dataset, or arrow data query object, the Arrow implementation of `mutate()` is \n+used and under the hood, translates the dplyr code into Arrow C++ code.\n+\n+When using `dplyr::mutate()` or `dplyr::filter()`, you may want to use functions\n+from other packages.  The example below uses `stringr::str_detect()`.\n+\n+```{r}\n+library(dplyr)\n+library(stringr)\n+starwars %>%\n+  filter(str_detect(name, \"Darth\"))\n+```\n+This functionality has also been implemented in Arrow, e.g.:\n+\n+```{r}\n+library(arrow)\n+arrow_table(starwars) %>%\n+  filter(str_detect(name, \"Darth\")) %>%\n+  collect()\n+```\n+\n+This is possible as a **binding** has been created between the stringr function\n+`str_detect()` and the Arrow C++ function `match_substring_regex`.  You can see \n+this for yourself by inspecting the arrow data query object without retrieving the \n+results via `collect()`.\n+\n+```{r}\n+arrow_table(starwars) %>%\n+  filter(str_detect(name, \"Darth\")) \n+```\n+\n+In the following sections, we'll walk through how to create a binding between an \n+R function and an Arrow C++ function.\n+\n+## Walkthrough\n+\n+Imagine you are writing the bindings for the C++ function \n+[`starts_with()`](https://arrow.apache.org/docs/cpp/compute.html#containment-tests) \n+and want to bind it to the (base) R function `startsWith()`.\n+\n+First, take a look at the docs for both of those functions.\n+\n+### Examining the R function\n+\n+Here are the docs for R's `startsWith()` (also available at https://stat.ethz.ch/R-manual/R-devel/library/base/html/startsWith.html)\n+\n+```{r, echo=FALSE, out.width=\"50%\"}\n+knitr::include_graphics(\"./startswithdocs.png\")\n+```\n+\n+It takes 2 parameters; `x` - the input, and `prefix` - the characters to check \n+if `x` starts with.\n+\n+### Examining the C++ function\n+\n+Now, go to \n+[the compute function documentation](https://arrow.apache.org/docs/cpp/compute.html#containment-tests)\n+and look for the Arrow C++ library's `starts_with()` function:\n+\n+```{r, echo=FALSE, out.width=\"50%\"}\n+knitr::include_graphics(\"./starts_with_docs.png\")\n+```\n+\n+The docs show that `starts_with()` is a unary function, which means that it takes a\n+single data input. The data input must be a string-like class, and the returned \n+value is boolean, both of which match up to R's `startsWith()`.\n+\n+There is an options class associated with `starts_with()` - called [`MatchSubstringOptions`](https://arrow.apache.org/docs/cpp/api/compute.html#_CPPv4N5arrow7compute21MatchSubstringOptionsE)\n+- so let's take a look at that.\n+\n+```{r, echo=FALSE, out.width=\"50%\"}\n+knitr::include_graphics(\"./matchsubstringoptions.png\")\n+```\n+\n+Options classes allow the user to control the behaviour of the function.  In \n+this case, there are two possible options which can be supplied - `pattern` and \n+`ignore_case`, which are described in the docs shown above.\n+\n+### Comparing the R and C++ functions\n+\n+What conclusions can be drawn from what you've seen so far?\n+\n+Base R's `startsWith()` and Arrow's `starts_with()` operate on equivalent data \n+types, return equivalent data types, and as there are no options implemented in \n+R that Arrow doesn't have, this should be fairly simple to map without a great \n+deal of extra work.  \n+\n+As `starts_with()` has an options class associated with it, we'll need to make \n+sure that it's linked up with this in the R code.\n+\n+In case you're wondering about the difference between arguments in R and options\n+in Arrow, in R, arguments to functions can include the actual data to be \n+analysed as well as options governing how the function works, whereas in the \n+C++ compute functions, the arguments are the data to be analysed and the \n+options are for specifying how exactly the function works.\n+\n+So let's get started.\n+\n+### Step 1 - add unit tests\n+\n+Look up the R function that you want to bind the compute kernel to, and write a \n+set of unit tests that use a dplyr pipeline and `compare_dplyr_binding()` (and \n+perhaps even `compare_dplyr_error()` if necessary.  These functions compare the \n+output of the original function with the dplyr bindings and make sure they match.\n+\n+Make sure you're testing all parameters of the R function.\n+\n+Below is a possible example test for `startsWith()`.\n\nReview comment:\n       And I would add some info why starting with a test (as I normally end with it) - in this case it is a great way to start, to research and it will be ready for the end version also.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-16T10:33:44.992+0000",
                    "updated": "2021-12-16T10:33:44.992+0000",
                    "started": "2021-12-16T10:33:44.992+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "697190",
                    "issueId": "13398677"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398677/worklog/697326",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paleolimbot commented on a change in pull request #11915:\nURL: https://github.com/apache/arrow/pull/11915#discussion_r770666092\n\n\n\n##########\nFile path: r/vignettes/developers/bindings.Rmd\n##########\n@@ -0,0 +1,238 @@\n+---\n+title: \"Writing Bindings\"\n+---\n+\n+```{r, include=FALSE}\n+library(arrow, warn.conflicts = FALSE)\n+library(dplyr, warn.conflicts = FALSE)\n+```\n+\n+\n+When writing bindings between C++ compute functions and R functions, the aim is \n+to expose the C++ functionality via existing R functions. The syntax and \n+functionality should match that of the existing R functions \n+(though with some exceptions) so that users are able to use existing tidyverse \n+or base R syntax, or call existing S3 methods on objects, whilst taking \n+advantage of the speed and functionality of the underlying arrow package.\n+\n+# Implementing bindings for S3 generics\n+\n+If a function is an S3 generic method, you may be able to define a version of it for \n\nReview comment:\n       I think the around S3 is \"if a function is an S3 generic\" and \"you may be able to define an S3 method for...\" (but check with `?UseMethod`).\n\n##########\nFile path: r/vignettes/developers/bindings.Rmd\n##########\n@@ -0,0 +1,238 @@\n+---\n+title: \"Writing Bindings\"\n+---\n+\n+```{r, include=FALSE}\n+library(arrow, warn.conflicts = FALSE)\n+library(dplyr, warn.conflicts = FALSE)\n+```\n+\n+\n+When writing bindings between C++ compute functions and R functions, the aim is \n+to expose the C++ functionality via existing R functions. The syntax and \n+functionality should match that of the existing R functions \n+(though with some exceptions) so that users are able to use existing tidyverse \n+or base R syntax, or call existing S3 methods on objects, whilst taking \n+advantage of the speed and functionality of the underlying arrow package.\n+\n+# Implementing bindings for S3 generics\n+\n+If a function is an S3 generic method, you may be able to define a version of it for \n+Arrow objects.  There are two base classes which have been defined in the\n+R package so that S3 methods don't have to be defined repeatedly for objects with\n+similar behaviour:\n+\n+* ArrowTabular - for RecordBatch and Table objects\n+* ArrowDatum - for Scalar, Array, and ChunkedArray objects\n+\n+What this means is that any function defined for the base class will work with \n+the child class.  For example, the function `dim()` may be defined as:\n+\n+```{r, eval = FALSE}\n+dim.ArrowTabular <- function(x) c(x$num_rows, x$num_columns)\n+```\n+\n+This implements `dim()` for both RecordBatch and Table objects.\n+\n+```{r}\n+arrow_table(x = c(1, 2, 3), y = c(4, 5, 6)) %>%\n+  dim()\n+```\n+\n+# Implementing bindings to work within dplyr pipelines\n+\n+One of main ways in which users interact with arrow is via dplyr syntax called \n+on Arrow objects.  For example, when a user calls `dplyr::mutate()` on an Arrow Tabular, \n+Dataset, or arrow data query object, the Arrow implementation of `mutate()` is \n+used and under the hood, translates the dplyr code into Arrow C++ code.\n+\n+When using `dplyr::mutate()` or `dplyr::filter()`, you may want to use functions\n+from other packages.  The example below uses `stringr::str_detect()`.\n+\n+```{r}\n+library(dplyr)\n+library(stringr)\n+starwars %>%\n+  filter(str_detect(name, \"Darth\"))\n+```\n+This functionality has also been implemented in Arrow, e.g.:\n+\n+```{r}\n+library(arrow)\n+arrow_table(starwars) %>%\n+  filter(str_detect(name, \"Darth\")) %>%\n+  collect()\n+```\n+\n+This is possible as a **binding** has been created between the stringr function\n\nReview comment:\n       This bit has me questioning the term \"binding\"...whereas `str_detect()` and `match_substring_regex` is a 1:1 link, many \"bindings\" implement a few Arrow compute functions linked together. I'm not sure that either terminology \"we created an Arrow binding for str_detect()` or \"we created an R binding for match_substring_regex\" are correct.\n\n##########\nFile path: r/vignettes/developers/bindings.Rmd\n##########\n@@ -0,0 +1,238 @@\n+---\n+title: \"Writing Bindings\"\n+---\n+\n+```{r, include=FALSE}\n+library(arrow, warn.conflicts = FALSE)\n+library(dplyr, warn.conflicts = FALSE)\n+```\n+\n+\n+When writing bindings between C++ compute functions and R functions, the aim is \n+to expose the C++ functionality via existing R functions. The syntax and \n+functionality should match that of the existing R functions \n+(though with some exceptions) so that users are able to use existing tidyverse \n+or base R syntax, or call existing S3 methods on objects, whilst taking \n+advantage of the speed and functionality of the underlying arrow package.\n+\n+# Implementing bindings for S3 generics\n\nReview comment:\n       I'm not sure this bit is related to the section below and I was surprised to see them both in this tutorial. Defining S3 methods is also a bit spurious for many Arrow types, since they're R6 objects and in most cases shouldn't be treated like data frames/matrices/base R objects.\n\n##########\nFile path: r/vignettes/developers/bindings.Rmd\n##########\n@@ -0,0 +1,238 @@\n+---\n+title: \"Writing Bindings\"\n+---\n+\n+```{r, include=FALSE}\n+library(arrow, warn.conflicts = FALSE)\n+library(dplyr, warn.conflicts = FALSE)\n+```\n+\n+\n+When writing bindings between C++ compute functions and R functions, the aim is \n+to expose the C++ functionality via existing R functions. The syntax and \n+functionality should match that of the existing R functions \n+(though with some exceptions) so that users are able to use existing tidyverse \n+or base R syntax, or call existing S3 methods on objects, whilst taking \n+advantage of the speed and functionality of the underlying arrow package.\n+\n+# Implementing bindings for S3 generics\n+\n+If a function is an S3 generic method, you may be able to define a version of it for \n+Arrow objects.  There are two base classes which have been defined in the\n+R package so that S3 methods don't have to be defined repeatedly for objects with\n+similar behaviour:\n+\n+* ArrowTabular - for RecordBatch and Table objects\n+* ArrowDatum - for Scalar, Array, and ChunkedArray objects\n+\n+What this means is that any function defined for the base class will work with \n+the child class.  For example, the function `dim()` may be defined as:\n+\n+```{r, eval = FALSE}\n+dim.ArrowTabular <- function(x) c(x$num_rows, x$num_columns)\n+```\n+\n+This implements `dim()` for both RecordBatch and Table objects.\n+\n+```{r}\n+arrow_table(x = c(1, 2, 3), y = c(4, 5, 6)) %>%\n+  dim()\n+```\n+\n+# Implementing bindings to work within dplyr pipelines\n+\n+One of main ways in which users interact with arrow is via dplyr syntax called \n+on Arrow objects.  For example, when a user calls `dplyr::mutate()` on an Arrow Tabular, \n+Dataset, or arrow data query object, the Arrow implementation of `mutate()` is \n+used and under the hood, translates the dplyr code into Arrow C++ code.\n+\n+When using `dplyr::mutate()` or `dplyr::filter()`, you may want to use functions\n+from other packages.  The example below uses `stringr::str_detect()`.\n+\n+```{r}\n+library(dplyr)\n+library(stringr)\n+starwars %>%\n+  filter(str_detect(name, \"Darth\"))\n+```\n+This functionality has also been implemented in Arrow, e.g.:\n+\n+```{r}\n+library(arrow)\n+arrow_table(starwars) %>%\n+  filter(str_detect(name, \"Darth\")) %>%\n+  collect()\n+```\n+\n+This is possible as a **binding** has been created between the stringr function\n+`str_detect()` and the Arrow C++ function `match_substring_regex`.  You can see \n+this for yourself by inspecting the arrow data query object without retrieving the \n+results via `collect()`.\n+\n+```{r}\n+arrow_table(starwars) %>%\n+  filter(str_detect(name, \"Darth\")) \n+```\n+\n+In the following sections, we'll walk through how to create a binding between an \n+R function and an Arrow C++ function.\n+\n+## Walkthrough\n+\n+Imagine you are writing the bindings for the C++ function \n+[`starts_with()`](https://arrow.apache.org/docs/cpp/compute.html#containment-tests) \n+and want to bind it to the (base) R function `startsWith()`.\n+\n+First, take a look at the docs for both of those functions.\n+\n+### Examining the R function\n+\n+Here are the docs for R's `startsWith()` (also available at https://stat.ethz.ch/R-manual/R-devel/library/base/html/startsWith.html)\n+\n+```{r, echo=FALSE, out.width=\"50%\"}\n+knitr::include_graphics(\"./startswithdocs.png\")\n+```\n+\n+It takes 2 parameters; `x` - the input, and `prefix` - the characters to check \n+if `x` starts with.\n+\n+### Examining the C++ function\n+\n+Now, go to \n+[the compute function documentation](https://arrow.apache.org/docs/cpp/compute.html#containment-tests)\n+and look for the Arrow C++ library's `starts_with()` function:\n+\n+```{r, echo=FALSE, out.width=\"50%\"}\n+knitr::include_graphics(\"./starts_with_docs.png\")\n+```\n+\n+The docs show that `starts_with()` is a unary function, which means that it takes a\n+single data input. The data input must be a string-like class, and the returned \n+value is boolean, both of which match up to R's `startsWith()`.\n+\n+There is an options class associated with `starts_with()` - called [`MatchSubstringOptions`](https://arrow.apache.org/docs/cpp/api/compute.html#_CPPv4N5arrow7compute21MatchSubstringOptionsE)\n+- so let's take a look at that.\n+\n+```{r, echo=FALSE, out.width=\"50%\"}\n+knitr::include_graphics(\"./matchsubstringoptions.png\")\n+```\n+\n+Options classes allow the user to control the behaviour of the function.  In \n+this case, there are two possible options which can be supplied - `pattern` and \n+`ignore_case`, which are described in the docs shown above.\n+\n+### Comparing the R and C++ functions\n+\n+What conclusions can be drawn from what you've seen so far?\n+\n+Base R's `startsWith()` and Arrow's `starts_with()` operate on equivalent data \n+types, return equivalent data types, and as there are no options implemented in \n+R that Arrow doesn't have, this should be fairly simple to map without a great \n+deal of extra work.  \n+\n+As `starts_with()` has an options class associated with it, we'll need to make \n+sure that it's linked up with this in the R code.\n+\n+In case you're wondering about the difference between arguments in R and options\n+in Arrow, in R, arguments to functions can include the actual data to be \n+analysed as well as options governing how the function works, whereas in the \n+C++ compute functions, the arguments are the data to be analysed and the \n+options are for specifying how exactly the function works.\n+\n+So let's get started.\n+\n+### Step 1 - add unit tests\n+\n+Look up the R function that you want to bind the compute kernel to, and write a \n+set of unit tests that use a dplyr pipeline and `compare_dplyr_binding()` (and \n+perhaps even `compare_dplyr_error()` if necessary.  These functions compare the \n+output of the original function with the dplyr bindings and make sure they match.\n+\n+Make sure you're testing all parameters of the R function.\n+\n+Below is a possible example test for `startsWith()`.\n+\n+```{r, eval = FALSE}\n+test_that(\"startsWith\", {\n\nReview comment:\n       I know that many of our tests have this as the label, but as an example for future test writers it might be better as `\"test_that(\"startsWith behaves identically in dplyr and Arrow\"`.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-16T16:16:19.734+0000",
                    "updated": "2021-12-16T16:16:19.734+0000",
                    "started": "2021-12-16T16:16:19.733+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "697326",
                    "issueId": "13398677"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398677/worklog/697868",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "thisisnic commented on a change in pull request #11915:\nURL: https://github.com/apache/arrow/pull/11915#discussion_r771356957\n\n\n\n##########\nFile path: r/vignettes/developers/bindings.Rmd\n##########\n@@ -0,0 +1,238 @@\n+---\n+title: \"Writing Bindings\"\n+---\n+\n+```{r, include=FALSE}\n+library(arrow, warn.conflicts = FALSE)\n+library(dplyr, warn.conflicts = FALSE)\n+```\n+\n+\n+When writing bindings between C++ compute functions and R functions, the aim is \n+to expose the C++ functionality via existing R functions. The syntax and \n+functionality should match that of the existing R functions \n+(though with some exceptions) so that users are able to use existing tidyverse \n+or base R syntax, or call existing S3 methods on objects, whilst taking \n+advantage of the speed and functionality of the underlying arrow package.\n+\n+# Implementing bindings for S3 generics\n+\n+If a function is an S3 generic method, you may be able to define a version of it for \n+Arrow objects.  There are two base classes which have been defined in the\n+R package so that S3 methods don't have to be defined repeatedly for objects with\n+similar behaviour:\n+\n+* ArrowTabular - for RecordBatch and Table objects\n+* ArrowDatum - for Scalar, Array, and ChunkedArray objects\n+\n+What this means is that any function defined for the base class will work with \n+the child class.  For example, the function `dim()` may be defined as:\n+\n+```{r, eval = FALSE}\n+dim.ArrowTabular <- function(x) c(x$num_rows, x$num_columns)\n+```\n+\n+This implements `dim()` for both RecordBatch and Table objects.\n+\n+```{r}\n+arrow_table(x = c(1, 2, 3), y = c(4, 5, 6)) %>%\n+  dim()\n+```\n+\n+# Implementing bindings to work within dplyr pipelines\n+\n+One of main ways in which users interact with arrow is via dplyr syntax called \n+on Arrow objects.  For example, when a user calls `dplyr::mutate()` on an Arrow Tabular, \n+Dataset, or arrow data query object, the Arrow implementation of `mutate()` is \n+used and under the hood, translates the dplyr code into Arrow C++ code.\n+\n+When using `dplyr::mutate()` or `dplyr::filter()`, you may want to use functions\n+from other packages.  The example below uses `stringr::str_detect()`.\n+\n+```{r}\n+library(dplyr)\n+library(stringr)\n+starwars %>%\n+  filter(str_detect(name, \"Darth\"))\n+```\n+This functionality has also been implemented in Arrow, e.g.:\n+\n+```{r}\n+library(arrow)\n+arrow_table(starwars) %>%\n+  filter(str_detect(name, \"Darth\")) %>%\n+  collect()\n+```\n+\n+This is possible as a **binding** has been created between the stringr function\n+`str_detect()` and the Arrow C++ function `match_substring_regex`.  You can see \n+this for yourself by inspecting the arrow data query object without retrieving the \n+results via `collect()`.\n+\n+```{r}\n+arrow_table(starwars) %>%\n+  filter(str_detect(name, \"Darth\")) \n+```\n+\n+In the following sections, we'll walk through how to create a binding between an \n+R function and an Arrow C++ function.\n+\n+## Walkthrough\n+\n+Imagine you are writing the bindings for the C++ function \n+[`starts_with()`](https://arrow.apache.org/docs/cpp/compute.html#containment-tests) \n+and want to bind it to the (base) R function `startsWith()`.\n+\n+First, take a look at the docs for both of those functions.\n+\n+### Examining the R function\n+\n+Here are the docs for R's `startsWith()` (also available at https://stat.ethz.ch/R-manual/R-devel/library/base/html/startsWith.html)\n+\n+```{r, echo=FALSE, out.width=\"50%\"}\n+knitr::include_graphics(\"./startswithdocs.png\")\n+```\n+\n+It takes 2 parameters; `x` - the input, and `prefix` - the characters to check \n+if `x` starts with.\n+\n+### Examining the C++ function\n+\n+Now, go to \n+[the compute function documentation](https://arrow.apache.org/docs/cpp/compute.html#containment-tests)\n+and look for the Arrow C++ library's `starts_with()` function:\n+\n+```{r, echo=FALSE, out.width=\"50%\"}\n+knitr::include_graphics(\"./starts_with_docs.png\")\n+```\n+\n+The docs show that `starts_with()` is a unary function, which means that it takes a\n+single data input. The data input must be a string-like class, and the returned \n+value is boolean, both of which match up to R's `startsWith()`.\n+\n+There is an options class associated with `starts_with()` - called [`MatchSubstringOptions`](https://arrow.apache.org/docs/cpp/api/compute.html#_CPPv4N5arrow7compute21MatchSubstringOptionsE)\n+- so let's take a look at that.\n+\n+```{r, echo=FALSE, out.width=\"50%\"}\n+knitr::include_graphics(\"./matchsubstringoptions.png\")\n+```\n+\n+Options classes allow the user to control the behaviour of the function.  In \n+this case, there are two possible options which can be supplied - `pattern` and \n+`ignore_case`, which are described in the docs shown above.\n+\n+### Comparing the R and C++ functions\n+\n+What conclusions can be drawn from what you've seen so far?\n+\n+Base R's `startsWith()` and Arrow's `starts_with()` operate on equivalent data \n+types, return equivalent data types, and as there are no options implemented in \n+R that Arrow doesn't have, this should be fairly simple to map without a great \n+deal of extra work.  \n+\n+As `starts_with()` has an options class associated with it, we'll need to make \n+sure that it's linked up with this in the R code.\n+\n+In case you're wondering about the difference between arguments in R and options\n+in Arrow, in R, arguments to functions can include the actual data to be \n+analysed as well as options governing how the function works, whereas in the \n+C++ compute functions, the arguments are the data to be analysed and the \n+options are for specifying how exactly the function works.\n+\n+So let's get started.\n+\n+### Step 1 - add unit tests\n+\n+Look up the R function that you want to bind the compute kernel to, and write a \n+set of unit tests that use a dplyr pipeline and `compare_dplyr_binding()` (and \n+perhaps even `compare_dplyr_error()` if necessary.  These functions compare the \n+output of the original function with the dplyr bindings and make sure they match.\n+\n+Make sure you're testing all parameters of the R function.\n+\n+Below is a possible example test for `startsWith()`.\n+\n+```{r, eval = FALSE}\n+test_that(\"startsWith\", {\n\nReview comment:\n       Very good point!\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-17T12:27:32.143+0000",
                    "updated": "2021-12-17T12:27:32.143+0000",
                    "started": "2021-12-17T12:27:32.142+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "697868",
                    "issueId": "13398677"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398677/worklog/697870",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "thisisnic commented on a change in pull request #11915:\nURL: https://github.com/apache/arrow/pull/11915#discussion_r771361872\n\n\n\n##########\nFile path: r/vignettes/developers/bindings.Rmd\n##########\n@@ -0,0 +1,238 @@\n+---\n+title: \"Writing Bindings\"\n+---\n+\n+```{r, include=FALSE}\n+library(arrow, warn.conflicts = FALSE)\n+library(dplyr, warn.conflicts = FALSE)\n+```\n+\n+\n+When writing bindings between C++ compute functions and R functions, the aim is \n+to expose the C++ functionality via existing R functions. The syntax and \n+functionality should match that of the existing R functions \n+(though with some exceptions) so that users are able to use existing tidyverse \n+or base R syntax, or call existing S3 methods on objects, whilst taking \n+advantage of the speed and functionality of the underlying arrow package.\n+\n+# Implementing bindings for S3 generics\n\nReview comment:\n       Good point - I think I'd put this in here as I'd mentioned it in the opening paragraph, but actually, it's better left out given it's not a common task\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-17T12:36:08.068+0000",
                    "updated": "2021-12-17T12:36:08.068+0000",
                    "started": "2021-12-17T12:36:08.068+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "697870",
                    "issueId": "13398677"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398677/worklog/697871",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "thisisnic commented on a change in pull request #11915:\nURL: https://github.com/apache/arrow/pull/11915#discussion_r771365295\n\n\n\n##########\nFile path: r/vignettes/developers/bindings.Rmd\n##########\n@@ -0,0 +1,238 @@\n+---\n+title: \"Writing Bindings\"\n+---\n+\n+```{r, include=FALSE}\n+library(arrow, warn.conflicts = FALSE)\n+library(dplyr, warn.conflicts = FALSE)\n+```\n+\n+\n+When writing bindings between C++ compute functions and R functions, the aim is \n+to expose the C++ functionality via existing R functions. The syntax and \n+functionality should match that of the existing R functions \n+(though with some exceptions) so that users are able to use existing tidyverse \n+or base R syntax, or call existing S3 methods on objects, whilst taking \n+advantage of the speed and functionality of the underlying arrow package.\n+\n+# Implementing bindings for S3 generics\n+\n+If a function is an S3 generic method, you may be able to define a version of it for \n+Arrow objects.  There are two base classes which have been defined in the\n+R package so that S3 methods don't have to be defined repeatedly for objects with\n+similar behaviour:\n+\n+* ArrowTabular - for RecordBatch and Table objects\n+* ArrowDatum - for Scalar, Array, and ChunkedArray objects\n+\n+What this means is that any function defined for the base class will work with \n+the child class.  For example, the function `dim()` may be defined as:\n+\n+```{r, eval = FALSE}\n+dim.ArrowTabular <- function(x) c(x$num_rows, x$num_columns)\n+```\n+\n+This implements `dim()` for both RecordBatch and Table objects.\n+\n+```{r}\n+arrow_table(x = c(1, 2, 3), y = c(4, 5, 6)) %>%\n+  dim()\n+```\n+\n+# Implementing bindings to work within dplyr pipelines\n+\n+One of main ways in which users interact with arrow is via dplyr syntax called \n+on Arrow objects.  For example, when a user calls `dplyr::mutate()` on an Arrow Tabular, \n+Dataset, or arrow data query object, the Arrow implementation of `mutate()` is \n+used and under the hood, translates the dplyr code into Arrow C++ code.\n+\n+When using `dplyr::mutate()` or `dplyr::filter()`, you may want to use functions\n+from other packages.  The example below uses `stringr::str_detect()`.\n+\n+```{r}\n+library(dplyr)\n+library(stringr)\n+starwars %>%\n+  filter(str_detect(name, \"Darth\"))\n+```\n+This functionality has also been implemented in Arrow, e.g.:\n+\n+```{r}\n+library(arrow)\n+arrow_table(starwars) %>%\n+  filter(str_detect(name, \"Darth\")) %>%\n+  collect()\n+```\n+\n+This is possible as a **binding** has been created between the stringr function\n\nReview comment:\n       I love this point, yeah, I see what you mean; this could cause confusion.  What about now that I've rephrased it?\r\n   \r\n   > This is possible as a **binding** has been created between the call to the \r\n   stringr function `str_detect()` and the Arrow C++ code, here as a direct mapping\r\n   to `match_substring_regex`.  You can see this for yourself by inspecting the \r\n   arrow data query object without retrieving the results via `collect()`.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-17T12:42:07.148+0000",
                    "updated": "2021-12-17T12:42:07.148+0000",
                    "started": "2021-12-17T12:42:07.148+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "697871",
                    "issueId": "13398677"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398677/worklog/698012",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jonkeane commented on a change in pull request #11915:\nURL: https://github.com/apache/arrow/pull/11915#discussion_r771540190\n\n\n\n##########\nFile path: r/vignettes/developers/bindings.Rmd\n##########\n@@ -0,0 +1,227 @@\n+---\n+title: \"Writing Bindings\"\n+---\n+\n+```{r, include=FALSE}\n+library(arrow, warn.conflicts = FALSE)\n+library(dplyr, warn.conflicts = FALSE)\n+```\n+\n+When writing bindings between C++ compute functions and R functions, the aim is \n+to expose the C++ functionality via existing R functions. The syntax and \n+functionality should match that of the existing R functions \n+(though with some exceptions) so that users are able to use existing tidyverse \n\nReview comment:\n       ```suggestion\r\n   (though there are some exceptions) so that users are able to use existing tidyverse \r\n   ```\n\n##########\nFile path: r/vignettes/developers/bindings.Rmd\n##########\n@@ -0,0 +1,227 @@\n+---\n+title: \"Writing Bindings\"\n+---\n+\n+```{r, include=FALSE}\n+library(arrow, warn.conflicts = FALSE)\n+library(dplyr, warn.conflicts = FALSE)\n+```\n+\n+When writing bindings between C++ compute functions and R functions, the aim is \n+to expose the C++ functionality via existing R functions. The syntax and \n\nReview comment:\n       This is super pedantic, but it's slightly more accurate to say: \"via the same interface as existing R functions\" since we are actually writing new R functions (in Arrow) \u2014 that have the same call + args as the existing functions \u2014 which then call into C++.\r\n   \r\n   Then again, being this pedantic might be too much for an intro and would be more of a distraction than a help here.\n\n##########\nFile path: r/vignettes/developers/bindings.Rmd\n##########\n@@ -0,0 +1,238 @@\n+---\n+title: \"Writing Bindings\"\n+---\n+\n+```{r, include=FALSE}\n+library(arrow, warn.conflicts = FALSE)\n+library(dplyr, warn.conflicts = FALSE)\n+```\n+\n+\n+When writing bindings between C++ compute functions and R functions, the aim is \n+to expose the C++ functionality via existing R functions.  The syntax and \n+functionality should (usually) exactly match that of the existing R functions \n+(though with some exceptions) so that users are able to use existing tidyverse \n+or base R syntax, or call existing S3 methods on objects, whilst taking \n+advantage of the speed and functionality of the underlying arrow package.\n+\n+# Implementing bindings for S3 generics\n+\n+If a function is an S3 generic method, you may be able to define a version of it for \n+Arrow objects.  There are two base classes which have been defined in the\n+R package so that S3 methods don't have to be defined repeatedly for objects with\n+similar behaviour:\n+\n+* ArrowTabular - for RecordBatch and Table objects\n+* ArrowDatum - for Scalar, Array, and ChunkedArray objects\n+\n+What this means is that any function defined for the base class will work with \n+the child class.  For example, the function `dim()` may be defined as:\n+\n+```{r, eval = FALSE}\n+dim.ArrowTabular <- function(x) c(x$num_rows, x$num_columns)\n+```\n+\n+This implements `dim()` for both RecordBatch and Table objects.\n+\n+```{r}\n+arrow_table(x = c(1, 2, 3), y = c(4, 5, 6)) %>%\n+  dim()\n+```\n+\n+# Implementing bindings to work within dplyr pipelines\n+\n+One of main ways in which users interact with arrow is via dplyr syntax called \n+on Arrow objects.  For example, when a user calls `dplyr::mutate()` on an Arrow Tabular, \n+Dataset, or arrow data query object, the Arrow implementation of `mutate()` is \n+used and under the hood, translates the dplyr code into Arrow C++ code.\n+\n+When using `dplyr::mutate()` or `dplyr::filter()`, you may want to use functions\n+from other packages.  The example below uses `stringr::str_detect()`.\n+\n+```{r}\n+library(dplyr)\n+library(stringr)\n+starwars %>%\n+  filter(str_detect(name, \"Darth\"))\n+```\n+This functionality has also been implemented in Arrow, e.g.:\n+\n+```{r}\n+library(arrow)\n+arrow_table(starwars) %>%\n+  filter(str_detect(name, \"Darth\")) %>%\n+  collect()\n+```\n+\n+This is possible as a **binding** has been created between the stringr function\n+`str_detect()` and the Arrow C++ function `match_substring_regex`.  You can see \n+this for yourself by inspecting the arrow data query object without retrieving the \n+results via `collect()`.\n+\n+```{r}\n+arrow_table(starwars) %>%\n+  filter(str_detect(name, \"Darth\")) \n+```\n+\n+In the following sections, we'll walk through how to create a binding between an \n+R function and an Arrow C++ function.\n+\n+## Walkthrough\n+\n+Imagine you are writing the bindings for the C++ function \n+[`starts_with()`](https://arrow.apache.org/docs/cpp/compute.html#containment-tests) \n+and want to bind it to the (base) R function `startsWith()`.\n+\n+First, take a look at the docs for both of those functions.\n+\n+### Examining the R function\n+\n+Here are the docs for R's `startsWith()` (also available at https://stat.ethz.ch/R-manual/R-devel/library/base/html/startsWith.html)\n+\n+```{r, echo=FALSE, out.width=\"50%\"}\n+knitr::include_graphics(\"./startswithdocs.png\")\n+```\n+\n+It takes 2 parameters; `x` - the input, and `prefix` - the characters to check \n+if `x` starts with.\n+\n+### Examining the C++ function\n+\n+Now, go to \n+[the compute function documentation](https://arrow.apache.org/docs/cpp/compute.html#containment-tests)\n+and look for the Arrow C++ library's `starts_with()` function:\n+\n+```{r, echo=FALSE, out.width=\"50%\"}\n+knitr::include_graphics(\"./starts_with_docs.png\")\n+```\n+\n+The docs show that `starts_with()` is a unary function, which means that it takes a\n+single data input. The data input must be a string-like class, and the returned \n+value is boolean, both of which match up to R's `startsWith()`.\n+\n+There is an options class associated with `starts_with()` - called [`MatchSubstringOptions`](https://arrow.apache.org/docs/cpp/api/compute.html#_CPPv4N5arrow7compute21MatchSubstringOptionsE)\n+- so let's take a look at that.\n+\n+```{r, echo=FALSE, out.width=\"50%\"}\n+knitr::include_graphics(\"./matchsubstringoptions.png\")\n+```\n+\n+Options classes allow the user to control the behaviour of the function.  In \n+this case, there are two possible options which can be supplied - `pattern` and \n+`ignore_case`, which are described in the docs shown above.\n+\n+### Comparing the R and C++ functions\n+\n+What conclusions can be drawn from what you've seen so far?\n+\n+Base R's `startsWith()` and Arrow's `starts_with()` operate on equivalent data \n+types, return equivalent data types, and as there are no options implemented in \n+R that Arrow doesn't have, this should be fairly simple to map without a great \n+deal of extra work.  \n+\n+As `starts_with()` has an options class associated with it, we'll need to make \n+sure that it's linked up with this in the R code.\n+\n+In case you're wondering about the difference between arguments in R and options\n+in Arrow, in R, arguments to functions can include the actual data to be \n+analysed as well as options governing how the function works, whereas in the \n+C++ compute functions, the arguments are the data to be analysed and the \n+options are for specifying how exactly the function works.\n+\n+So let's get started.\n+\n+### Step 1 - add unit tests\n+\n+Look up the R function that you want to bind the compute kernel to, and write a \n+set of unit tests that use a dplyr pipeline and `compare_dplyr_binding()` (and \n+perhaps even `compare_dplyr_error()` if necessary.  These functions compare the \n+output of the original function with the dplyr bindings and make sure they match.\n+\n+Make sure you're testing all parameters of the R function.\n+\n+Below is a possible example test for `startsWith()`.\n\nReview comment:\n       We also might want to mention in step 4 / a new step 5 that it's _very_ common to add more tests at the end, cause you know more edge cases / things you need to make sure behave in certain ways (as well as adding tests for edge cases as you iterate).\n\n##########\nFile path: r/vignettes/developers/bindings.Rmd\n##########\n@@ -0,0 +1,227 @@\n+---\n+title: \"Writing Bindings\"\n+---\n+\n+```{r, include=FALSE}\n+library(arrow, warn.conflicts = FALSE)\n+library(dplyr, warn.conflicts = FALSE)\n+```\n+\n+When writing bindings between C++ compute functions and R functions, the aim is \n+to expose the C++ functionality via existing R functions. The syntax and \n+functionality should match that of the existing R functions \n+(though with some exceptions) so that users are able to use existing tidyverse \n+or base R syntax, whilst taking advantage of the speed and functionality of the \n+underlying arrow package.\n+\n+# Implementing bindings to work within dplyr pipelines\n+\n+One of main ways in which users interact with arrow is via \n+[dplyr](https://dplyr.tidyverse.org/) syntax called on Arrow objects.  For \n+example, when a user calls `dplyr::mutate()` on an Arrow Tabular, \n+Dataset, or arrow data query object, the Arrow implementation of `mutate()` is \n+used and under the hood, translates the dplyr code into Arrow C++ code.\n+\n+When using `dplyr::mutate()` or `dplyr::filter()`, you may want to use functions\n+from other packages.  The example below uses `stringr::str_detect()`.\n+\n+```{r}\n+library(dplyr)\n+library(stringr)\n+starwars %>%\n+  filter(str_detect(name, \"Darth\"))\n+```\n+This functionality has also been implemented in Arrow, e.g.:\n+\n+```{r}\n+library(arrow)\n+arrow_table(starwars) %>%\n+  filter(str_detect(name, \"Darth\")) %>%\n+  collect()\n+```\n+\n+This is possible as a **binding** has been created between the call to the \n+stringr function `str_detect()` and the Arrow C++ code, here as a direct mapping\n+to `match_substring_regex`.  You can see this for yourself by inspecting the \n+arrow data query object without retrieving the results via `collect()`.\n+\n+\n+```{r}\n+arrow_table(starwars) %>%\n+  filter(str_detect(name, \"Darth\")) \n+```\n+\n+In the following sections, we'll walk through how to create a binding between an \n+R function and an Arrow C++ function.\n+\n+## Walkthrough\n+\n+Imagine you are writing the bindings for the C++ function \n+[`starts_with()`](https://arrow.apache.org/docs/cpp/compute.html#containment-tests) \n+and want to bind it to the (base) R function `startsWith()`.\n+\n+First, take a look at the docs for both of those functions.\n+\n+### Examining the R function\n+\n+Here are the docs for R's `startsWith()` (also available at https://stat.ethz.ch/R-manual/R-devel/library/base/html/startsWith.html)\n+\n+```{r, echo=FALSE, out.width=\"50%\"}\n+knitr::include_graphics(\"./startswithdocs.png\")\n+```\n+\n+It takes 2 parameters; `x` - the input, and `prefix` - the characters to check \n+if `x` starts with.\n+\n+### Examining the C++ function\n+\n+Now, go to \n+[the compute function documentation](https://arrow.apache.org/docs/cpp/compute.html#containment-tests)\n+and look for the Arrow C++ library's `starts_with()` function:\n+\n+```{r, echo=FALSE, out.width=\"50%\"}\n+knitr::include_graphics(\"./starts_with_docs.png\")\n+```\n+\n+The docs show that `starts_with()` is a unary function, which means that it takes a\n+single data input. The data input must be a string-like class, and the returned \n+value is boolean, both of which match up to R's `startsWith()`.\n+\n+There is an options class associated with `starts_with()` - called [`MatchSubstringOptions`](https://arrow.apache.org/docs/cpp/api/compute.html#_CPPv4N5arrow7compute21MatchSubstringOptionsE)\n+- so let's take a look at that.\n+\n+```{r, echo=FALSE, out.width=\"50%\"}\n+knitr::include_graphics(\"./matchsubstringoptions.png\")\n+```\n+\n+Options classes allow the user to control the behaviour of the function.  In \n+this case, there are two possible options which can be supplied - `pattern` and \n+`ignore_case`, which are described in the docs shown above.\n+\n+### Comparing the R and C++ functions\n+\n+What conclusions can be drawn from what you've seen so far?\n+\n+Base R's `startsWith()` and Arrow's `starts_with()` operate on equivalent data \n+types, return equivalent data types, and as there are no options implemented in \n+R that Arrow doesn't have, this should be fairly simple to map without a great \n+deal of extra work.  \n+\n+As `starts_with()` has an options class associated with it, we'll need to make \n+sure that it's linked up with this in the R code.\n+\n+In case you're wondering about the difference between arguments in R and options\n+in Arrow, in R, arguments to functions can include the actual data to be \n+analysed as well as options governing how the function works, whereas in the \n+C++ compute functions, the arguments are the data to be analysed and the \n+options are for specifying how exactly the function works.\n+\n+So let's get started.\n+\n+### Step 1 - add unit tests\n+\n+We recommend a test-driven-development approach - write failing tests first, \n+then check that they fail, and then write the code needed to make them pass.  \n+Thinking up-front about the behavior which needs testing can make it easier to \n+reason about the code which needs writing later.\n+\n+Look up the R function that you want to bind the compute kernel to, and write a \n+set of unit tests that use a dplyr pipeline and `compare_dplyr_binding()` (and \n+perhaps even `compare_dplyr_error()` if necessary.  These functions compare the \n+output of the original function with the dplyr bindings and make sure they match.  \n+We recommend looking at the documentation next to the source code for these \n+functions to get a better understanding of how they work.\n+\n+You should make sure you're testing all parameters of the R function in your \n+tests.\n+\n+Below is a possible example test for `startsWith()`.\n+\n+```{r, eval = FALSE}\n+test_that(\"startsWith behaves identically in dplyr and Arrow\", {\n+  df <- tibble(x = c(\"Foo\", \"bar\", \"baz\", \"qux\"))\n+ \n\nReview comment:\n       ```suggestion\r\n   \r\n   ```\n\n##########\nFile path: r/vignettes/developers/bindings.Rmd\n##########\n@@ -0,0 +1,227 @@\n+---\n+title: \"Writing Bindings\"\n+---\n+\n+```{r, include=FALSE}\n+library(arrow, warn.conflicts = FALSE)\n+library(dplyr, warn.conflicts = FALSE)\n+```\n+\n+When writing bindings between C++ compute functions and R functions, the aim is \n+to expose the C++ functionality via existing R functions. The syntax and \n+functionality should match that of the existing R functions \n+(though with some exceptions) so that users are able to use existing tidyverse \n+or base R syntax, whilst taking advantage of the speed and functionality of the \n+underlying arrow package.\n+\n+# Implementing bindings to work within dplyr pipelines\n+\n+One of main ways in which users interact with arrow is via \n+[dplyr](https://dplyr.tidyverse.org/) syntax called on Arrow objects.  For \n+example, when a user calls `dplyr::mutate()` on an Arrow Tabular, \n+Dataset, or arrow data query object, the Arrow implementation of `mutate()` is \n+used and under the hood, translates the dplyr code into Arrow C++ code.\n+\n+When using `dplyr::mutate()` or `dplyr::filter()`, you may want to use functions\n+from other packages.  The example below uses `stringr::str_detect()`.\n+\n+```{r}\n+library(dplyr)\n+library(stringr)\n+starwars %>%\n+  filter(str_detect(name, \"Darth\"))\n+```\n+This functionality has also been implemented in Arrow, e.g.:\n+\n+```{r}\n+library(arrow)\n+arrow_table(starwars) %>%\n+  filter(str_detect(name, \"Darth\")) %>%\n+  collect()\n+```\n+\n+This is possible as a **binding** has been created between the call to the \n+stringr function `str_detect()` and the Arrow C++ code, here as a direct mapping\n+to `match_substring_regex`.  You can see this for yourself by inspecting the \n+arrow data query object without retrieving the results via `collect()`.\n+\n+\n+```{r}\n+arrow_table(starwars) %>%\n+  filter(str_detect(name, \"Darth\")) \n\nReview comment:\n       ```suggestion\r\n     filter(str_detect(name, \"Darth\"))\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-17T17:14:09.851+0000",
                    "updated": "2021-12-17T17:14:09.851+0000",
                    "started": "2021-12-17T17:14:09.850+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "698012",
                    "issueId": "13398677"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398677/worklog/698590",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "thisisnic commented on a change in pull request #11915:\nURL: https://github.com/apache/arrow/pull/11915#discussion_r772284856\n\n\n\n##########\nFile path: r/vignettes/developers/bindings.Rmd\n##########\n@@ -0,0 +1,227 @@\n+---\n+title: \"Writing Bindings\"\n+---\n+\n+```{r, include=FALSE}\n+library(arrow, warn.conflicts = FALSE)\n+library(dplyr, warn.conflicts = FALSE)\n+```\n+\n+When writing bindings between C++ compute functions and R functions, the aim is \n+to expose the C++ functionality via existing R functions. The syntax and \n\nReview comment:\n       Not pedantic at all, I like it!\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-20T11:22:44.584+0000",
                    "updated": "2021-12-20T11:22:44.584+0000",
                    "started": "2021-12-20T11:22:44.584+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "698590",
                    "issueId": "13398677"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398677/worklog/698613",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paleolimbot commented on a change in pull request #11915:\nURL: https://github.com/apache/arrow/pull/11915#discussion_r772307168\n\n\n\n##########\nFile path: r/vignettes/developers/bindings.Rmd\n##########\n@@ -0,0 +1,238 @@\n+---\n+title: \"Writing Bindings\"\n+---\n+\n+```{r, include=FALSE}\n+library(arrow, warn.conflicts = FALSE)\n+library(dplyr, warn.conflicts = FALSE)\n+```\n+\n+\n+When writing bindings between C++ compute functions and R functions, the aim is \n+to expose the C++ functionality via existing R functions. The syntax and \n+functionality should match that of the existing R functions \n+(though with some exceptions) so that users are able to use existing tidyverse \n+or base R syntax, or call existing S3 methods on objects, whilst taking \n+advantage of the speed and functionality of the underlying arrow package.\n+\n+# Implementing bindings for S3 generics\n+\n+If a function is an S3 generic method, you may be able to define a version of it for \n+Arrow objects.  There are two base classes which have been defined in the\n+R package so that S3 methods don't have to be defined repeatedly for objects with\n+similar behaviour:\n+\n+* ArrowTabular - for RecordBatch and Table objects\n+* ArrowDatum - for Scalar, Array, and ChunkedArray objects\n+\n+What this means is that any function defined for the base class will work with \n+the child class.  For example, the function `dim()` may be defined as:\n+\n+```{r, eval = FALSE}\n+dim.ArrowTabular <- function(x) c(x$num_rows, x$num_columns)\n+```\n+\n+This implements `dim()` for both RecordBatch and Table objects.\n+\n+```{r}\n+arrow_table(x = c(1, 2, 3), y = c(4, 5, 6)) %>%\n+  dim()\n+```\n+\n+# Implementing bindings to work within dplyr pipelines\n+\n+One of main ways in which users interact with arrow is via dplyr syntax called \n+on Arrow objects.  For example, when a user calls `dplyr::mutate()` on an Arrow Tabular, \n+Dataset, or arrow data query object, the Arrow implementation of `mutate()` is \n+used and under the hood, translates the dplyr code into Arrow C++ code.\n+\n+When using `dplyr::mutate()` or `dplyr::filter()`, you may want to use functions\n+from other packages.  The example below uses `stringr::str_detect()`.\n+\n+```{r}\n+library(dplyr)\n+library(stringr)\n+starwars %>%\n+  filter(str_detect(name, \"Darth\"))\n+```\n+This functionality has also been implemented in Arrow, e.g.:\n+\n+```{r}\n+library(arrow)\n+arrow_table(starwars) %>%\n+  filter(str_detect(name, \"Darth\")) %>%\n+  collect()\n+```\n+\n+This is possible as a **binding** has been created between the stringr function\n\nReview comment:\n       Sorry I missed this last week! I like how you've rephrased it.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-20T11:59:08.863+0000",
                    "updated": "2021-12-20T11:59:08.863+0000",
                    "started": "2021-12-20T11:59:08.863+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "698613",
                    "issueId": "13398677"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398677/worklog/699402",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jonkeane commented on a change in pull request #11915:\nURL: https://github.com/apache/arrow/pull/11915#discussion_r773187227\n\n\n\n##########\nFile path: r/vignettes/developers/bindings.Rmd\n##########\n@@ -0,0 +1,225 @@\n+# Writing Bindings\n+\n+```{r, include=FALSE}\n+library(arrow, warn.conflicts = FALSE)\n+library(dplyr, warn.conflicts = FALSE)\n+```\n+\n+When writing bindings between C++ compute functions and R functions, the aim is \n+to expose the C++ functionality via the same interface as existing R functions. The syntax and \n+functionality should match that of the existing R functions \n+(though there are some exceptions) so that users are able to use existing tidyverse \n+or base R syntax, whilst taking advantage of the speed and functionality of the \n+underlying arrow package.\n+\n+One of main ways in which users interact with arrow is via \n+[dplyr](https://dplyr.tidyverse.org/) syntax called on Arrow objects.  For \n+example, when a user calls `dplyr::mutate()` on an Arrow Tabular, \n+Dataset, or arrow data query object, the Arrow implementation of `mutate()` is \n+used and under the hood, translates the dplyr code into Arrow C++ code.\n+\n+When using `dplyr::mutate()` or `dplyr::filter()`, you may want to use functions\n+from other packages.  The example below uses `stringr::str_detect()`.\n+\n+```{r}\n+library(dplyr)\n+library(stringr)\n+starwars %>%\n+  filter(str_detect(name, \"Darth\"))\n+```\n+This functionality has also been implemented in Arrow, e.g.:\n+\n+```{r}\n+library(arrow)\n+arrow_table(starwars) %>%\n+  filter(str_detect(name, \"Darth\")) %>%\n+  collect()\n+```\n+\n+This is possible as a **binding** has been created between the call to the \n+stringr function `str_detect()` and the Arrow C++ code, here as a direct mapping\n+to `match_substring_regex`.  You can see this for yourself by inspecting the \n+arrow data query object without retrieving the results via `collect()`.\n+\n+\n+```{r}\n+arrow_table(starwars) %>%\n+  filter(str_detect(name, \"Darth\"))\n+```\n+\n+In the following sections, we'll walk through how to create a binding between an \n+R function and an Arrow C++ function.\n+\n+# Walkthrough\n+\n+Imagine you are writing the bindings for the C++ function \n+[`starts_with()`](https://arrow.apache.org/docs/cpp/compute.html#containment-tests) \n+and want to bind it to the (base) R function `startsWith()`.\n+\n+First, take a look at the docs for both of those functions.\n+\n+## Examining the R function\n+\n+Here are the docs for R's `startsWith()` (also available at https://stat.ethz.ch/R-manual/R-devel/library/base/html/startsWith.html)\n+\n+```{r, echo=FALSE, out.width=\"50%\"}\n+knitr::include_graphics(\"./startswithdocs.png\")\n+```\n\nReview comment:\n       I think this is probably the least bad approach, and startsWith should be relatively stable, but having a png here is something we will need to update over time. That also might be fine since likely we will want or need to change the text too, but I wanted to acknowledge that trade off here. \n\n##########\nFile path: r/vignettes/developers/bindings.Rmd\n##########\n@@ -0,0 +1,225 @@\n+# Writing Bindings\n+\n+```{r, include=FALSE}\n+library(arrow, warn.conflicts = FALSE)\n+library(dplyr, warn.conflicts = FALSE)\n+```\n+\n+When writing bindings between C++ compute functions and R functions, the aim is \n+to expose the C++ functionality via the same interface as existing R functions. The syntax and \n+functionality should match that of the existing R functions \n+(though there are some exceptions) so that users are able to use existing tidyverse \n+or base R syntax, whilst taking advantage of the speed and functionality of the \n+underlying arrow package.\n+\n+One of main ways in which users interact with arrow is via \n+[dplyr](https://dplyr.tidyverse.org/) syntax called on Arrow objects.  For \n+example, when a user calls `dplyr::mutate()` on an Arrow Tabular, \n+Dataset, or arrow data query object, the Arrow implementation of `mutate()` is \n+used and under the hood, translates the dplyr code into Arrow C++ code.\n+\n+When using `dplyr::mutate()` or `dplyr::filter()`, you may want to use functions\n+from other packages.  The example below uses `stringr::str_detect()`.\n+\n+```{r}\n+library(dplyr)\n+library(stringr)\n+starwars %>%\n+  filter(str_detect(name, \"Darth\"))\n+```\n+This functionality has also been implemented in Arrow, e.g.:\n+\n+```{r}\n+library(arrow)\n+arrow_table(starwars) %>%\n+  filter(str_detect(name, \"Darth\")) %>%\n+  collect()\n+```\n+\n+This is possible as a **binding** has been created between the call to the \n+stringr function `str_detect()` and the Arrow C++ code, here as a direct mapping\n+to `match_substring_regex`.  You can see this for yourself by inspecting the \n+arrow data query object without retrieving the results via `collect()`.\n+\n+\n+```{r}\n+arrow_table(starwars) %>%\n+  filter(str_detect(name, \"Darth\"))\n+```\n+\n+In the following sections, we'll walk through how to create a binding between an \n+R function and an Arrow C++ function.\n+\n+# Walkthrough\n+\n+Imagine you are writing the bindings for the C++ function \n+[`starts_with()`](https://arrow.apache.org/docs/cpp/compute.html#containment-tests) \n+and want to bind it to the (base) R function `startsWith()`.\n+\n+First, take a look at the docs for both of those functions.\n+\n+## Examining the R function\n+\n+Here are the docs for R's `startsWith()` (also available at https://stat.ethz.ch/R-manual/R-devel/library/base/html/startsWith.html)\n+\n+```{r, echo=FALSE, out.width=\"50%\"}\n+knitr::include_graphics(\"./startswithdocs.png\")\n+```\n+\n+It takes 2 parameters; `x` - the input, and `prefix` - the characters to check \n+if `x` starts with.\n+\n+## Examining the C++ function\n+\n+Now, go to \n+[the compute function documentation](https://arrow.apache.org/docs/cpp/compute.html#containment-tests)\n+and look for the Arrow C++ library's `starts_with()` function:\n+\n+```{r, echo=FALSE, out.width=\"100%\"}\n+knitr::include_graphics(\"./starts_with_docs.png\")\n+```\n+\n+The docs show that `starts_with()` is a unary function, which means that it takes a\n+single data input. The data input must be a string-like class, and the returned \n+value is boolean, both of which match up to R's `startsWith()`.\n+\n+There is an options class associated with `starts_with()` - called [`MatchSubstringOptions`](https://arrow.apache.org/docs/cpp/api/compute.html#_CPPv4N5arrow7compute21MatchSubstringOptionsE)\n+- so let's take a look at that.\n+\n+```{r, echo=FALSE, out.width=\"100%\"}\n+knitr::include_graphics(\"./matchsubstringoptions.png\")\n+```\n+\n+Options classes allow the user to control the behaviour of the function.  In \n+this case, there are two possible options which can be supplied - `pattern` and \n+`ignore_case`, which are described in the docs shown above.\n+\n+## Comparing the R and C++ functions\n+\n+What conclusions can be drawn from what you've seen so far?\n+\n+Base R's `startsWith()` and Arrow's `starts_with()` operate on equivalent data \n+types, return equivalent data types, and as there are no options implemented in \n+R that Arrow doesn't have, this should be fairly simple to map without a great \n+deal of extra work.  \n+\n+As `starts_with()` has an options class associated with it, we'll need to make \n+sure that it's linked up with this in the R code.\n+\n+In case you're wondering about the difference between arguments in R and options\n+in Arrow, in R, arguments to functions can include the actual data to be \n+analysed as well as options governing how the function works, whereas in the \n+C++ compute functions, the arguments are the data to be analysed and the \n+options are for specifying how exactly the function works.\n\nReview comment:\n       I wonder if this might be better in a footnote? It\u2019s a bit of a side step from the main content (though it is nice that we are including it). I\u2019m fine keeping it in the main text too, up to you\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-21T14:41:13.949+0000",
                    "updated": "2021-12-21T14:41:13.949+0000",
                    "started": "2021-12-21T14:41:13.948+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "699402",
                    "issueId": "13398677"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
            "id": "7",
            "description": "The sub-task of the issue",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
            "name": "Sub-task",
            "subtask": true,
            "avatarId": 21146
        },
        "timespent": 16200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@7f799f26[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@52caf80e[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7a1991f5[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@7f960c30[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7b55c9c8[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@67d92984[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@51798ab3[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@1e41fb20[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4b8f7aa9[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@65b4ef55[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7805cd42[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@690ca199[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 16200,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Dec 21 15:20:49 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-12-21T15:20:49.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-13834/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2021-09-01T13:27:52.000+0000",
        "updated": "2021-12-22T19:41:34.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "4.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 16200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[R][Documentation] Document the process of creating R bindings for compute kernels and rationale behind conventions",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398677/comment/17463309",
                    "id": "17463309",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=thisisnic",
                        "name": "thisisnic",
                        "key": "thisisnic",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=39937",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=39937",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=39937",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=39937"
                        },
                        "displayName": "Nicola Crane",
                        "active": true,
                        "timeZone": "Africa/Casablanca"
                    },
                    "body": "Issue resolved by pull request 11915\n[https://github.com/apache/arrow/pull/11915]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=thisisnic",
                        "name": "thisisnic",
                        "key": "thisisnic",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=39937",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=39937",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=39937",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=39937"
                        },
                        "displayName": "Nicola Crane",
                        "active": true,
                        "timeZone": "Africa/Casablanca"
                    },
                    "created": "2021-12-21T15:20:49.861+0000",
                    "updated": "2021-12-21T15:20:49.861+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0uhu0:",
        "customfield_12314139": null
    }
}