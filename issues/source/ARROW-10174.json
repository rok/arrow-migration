{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13333723",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13333723",
    "key": "ARROW-10174",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12348823",
                "id": "12348823",
                "description": "",
                "name": "3.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-01-25"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12348647",
                "id": "12348647",
                "name": "1.0.1",
                "archived": false,
                "released": true,
                "releaseDate": "2020-08-21"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": null,
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328933",
                "id": "12328933",
                "name": "Java"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=benjamin.wilhelm%40knime.com",
            "name": "benjamin.wilhelm@knime.com",
            "key": "benjamin.wilhelm@knime.com",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Benjamin Wilhelm",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=benjamin.wilhelm%40knime.com",
            "name": "benjamin.wilhelm@knime.com",
            "key": "benjamin.wilhelm@knime.com",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Benjamin Wilhelm",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 14400,
            "total": 14400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 14400,
            "total": 14400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10174/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 24,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13333723/worklog/495957",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "HedgehogCode opened a new pull request #8363:\nURL: https://github.com/apache/arrow/pull/8363\n\n\n   When translating between the memory FieldType and message FieldType for\r\n   dictionary encoded vectors the children of the dictionary field were not\r\n   handled correctly.\r\n   * When going from memory format to message format the Field must have the\r\n     children of the dictionary field.\r\n   * When going from message format to memory format the Field must have no\r\n     children but the dictionary must have the mapped children\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-06T15:37:41.485+0000",
                    "updated": "2020-10-06T15:37:41.485+0000",
                    "started": "2020-10-06T15:37:41.485+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "495957",
                    "issueId": "13333723"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13333723/worklog/495959",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #8363:\nURL: https://github.com/apache/arrow/pull/8363#issuecomment-704359506\n\n\n   https://issues.apache.org/jira/browse/ARROW-10174\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-06T15:40:27.946+0000",
                    "updated": "2020-10-06T15:40:27.946+0000",
                    "started": "2020-10-06T15:40:27.945+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "495959",
                    "issueId": "13333723"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13333723/worklog/496361",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #8363:\nURL: https://github.com/apache/arrow/pull/8363#issuecomment-704767430\n\n\n   @liyafan82 do you have time to review?\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-07T08:03:39.303+0000",
                    "updated": "2020-10-07T08:03:39.303+0000",
                    "started": "2020-10-07T08:03:39.302+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "496361",
                    "issueId": "13333723"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13333723/worklog/497713",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #8363:\nURL: https://github.com/apache/arrow/pull/8363#issuecomment-705928888\n\n\n   > @liyafan82 do you have time to review?\r\n   \r\n   @emkornfield Sure. I will take a look in one or two days. \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-09T02:24:04.263+0000",
                    "updated": "2020-10-09T02:24:04.263+0000",
                    "started": "2020-10-09T02:24:04.263+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "497713",
                    "issueId": "13333723"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13333723/worklog/497897",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on a change in pull request #8363:\nURL: https://github.com/apache/arrow/pull/8363#discussion_r502369246\n\n\n\n##########\nFile path: java/vector/src/main/java/org/apache/arrow/vector/util/DictionaryUtility.java\n##########\n@@ -115,25 +118,28 @@ public static Field toMemoryFormat(Field field, BufferAllocator allocator, Map<L\n     }\n \n     ArrowType type;\n+    List<Field> fieldChildren;\n     if (encoding == null) {\n       type = field.getType();\n+      fieldChildren = updatedChildren;\n     } else {\n       // re-type the field for in-memory format\n       type = encoding.getIndexType();\n+      fieldChildren = null;\n\nReview comment:\n       This seems not necessary?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-09T11:41:11.235+0000",
                    "updated": "2020-10-09T11:41:11.235+0000",
                    "started": "2020-10-09T11:41:11.235+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "497897",
                    "issueId": "13333723"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13333723/worklog/497901",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on a change in pull request #8363:\nURL: https://github.com/apache/arrow/pull/8363#discussion_r502370575\n\n\n\n##########\nFile path: java/vector/src/test/java/org/apache/arrow/vector/ipc/TestArrowReaderWriter.java\n##########\n@@ -305,6 +321,64 @@ public void testWriteReadWithDictionaries() throws IOException {\n     }\n   }\n \n+  @Test\n+  public void testWriteReadWithStructDictionaries() throws IOException {\n+    DictionaryProvider.MapDictionaryProvider provider = new DictionaryProvider.MapDictionaryProvider();\n+    provider.put(dictionary4);\n+\n+    final StructVector vector = newVector(StructVector.class, \"D4\", MinorType.STRUCT, allocator);\n+    final Map<String, List<Integer>> values = new HashMap<>();\n+    // Index:                     0, 2, 1, 2, 1, 0, 0\n+    values.put(\"a\", Arrays.asList(1, 3, 2, 3, 2, 1, 1));\n+    values.put(\"b\", Arrays.asList(4, 6, 5, 6, 5, 4, 4));\n+    setVector(vector, values);\n+    FieldVector encodedVector = (FieldVector) DictionaryEncoder.encode(vector, dictionary4);\n\nReview comment:\n       Maybe we need to verify the encoded vector?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-09T11:44:06.026+0000",
                    "updated": "2020-10-09T11:44:06.026+0000",
                    "started": "2020-10-09T11:44:06.026+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "497901",
                    "issueId": "13333723"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13333723/worklog/497906",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on a change in pull request #8363:\nURL: https://github.com/apache/arrow/pull/8363#discussion_r502371916\n\n\n\n##########\nFile path: java/vector/src/test/java/org/apache/arrow/vector/ipc/TestArrowReaderWriter.java\n##########\n@@ -305,6 +321,64 @@ public void testWriteReadWithDictionaries() throws IOException {\n     }\n   }\n \n+  @Test\n+  public void testWriteReadWithStructDictionaries() throws IOException {\n+    DictionaryProvider.MapDictionaryProvider provider = new DictionaryProvider.MapDictionaryProvider();\n+    provider.put(dictionary4);\n+\n+    final StructVector vector = newVector(StructVector.class, \"D4\", MinorType.STRUCT, allocator);\n+    final Map<String, List<Integer>> values = new HashMap<>();\n+    // Index:                     0, 2, 1, 2, 1, 0, 0\n+    values.put(\"a\", Arrays.asList(1, 3, 2, 3, 2, 1, 1));\n+    values.put(\"b\", Arrays.asList(4, 6, 5, 6, 5, 4, 4));\n+    setVector(vector, values);\n+    FieldVector encodedVector = (FieldVector) DictionaryEncoder.encode(vector, dictionary4);\n+\n+    List<Field> fields = Arrays.asList(encodedVector.getField());\n+    List<FieldVector> vectors = Collections2.asImmutableList(encodedVector);\n+    try (VectorSchemaRoot root = new VectorSchemaRoot(fields, vectors, encodedVector.getValueCount());\n+         ByteArrayOutputStream out = new ByteArrayOutputStream();\n+         ArrowFileWriter writer = new ArrowFileWriter(root, provider, newChannel(out));) {\n+\n+      writer.start();\n+      writer.writeBatch();\n+      writer.end();\n+\n+      try (SeekableReadChannel channel = new SeekableReadChannel(\n+          new ByteArrayReadableSeekableByteChannel(out.toByteArray()));\n+          ArrowFileReader reader = new ArrowFileReader(channel, allocator)) {\n+        final VectorSchemaRoot readRoot = reader.getVectorSchemaRoot();\n+        final Schema readSchema = readRoot.getSchema();\n+        assertEquals(root.getSchema(), readSchema);\n+        assertEquals(1, reader.getDictionaryBlocks().size());\n+        assertEquals(1, reader.getRecordBlocks().size());\n+\n+        reader.loadNextBatch();\n+        assertEquals(1, readRoot.getFieldVectors().size());\n+        assertEquals(1, reader.getDictionaryVectors().size());\n+        \n+        final FieldVector readEncoded = readRoot.getVector(0);\n+        assertTrue(readEncoded instanceof IntVector);\n\nReview comment:\n       should we validate `readEncoded`?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-09T11:46:52.859+0000",
                    "updated": "2020-10-09T11:46:52.859+0000",
                    "started": "2020-10-09T11:46:52.859+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "497906",
                    "issueId": "13333723"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13333723/worklog/497909",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on a change in pull request #8363:\nURL: https://github.com/apache/arrow/pull/8363#discussion_r502372509\n\n\n\n##########\nFile path: java/vector/src/test/java/org/apache/arrow/vector/ipc/TestArrowReaderWriter.java\n##########\n@@ -305,6 +321,64 @@ public void testWriteReadWithDictionaries() throws IOException {\n     }\n   }\n \n+  @Test\n+  public void testWriteReadWithStructDictionaries() throws IOException {\n+    DictionaryProvider.MapDictionaryProvider provider = new DictionaryProvider.MapDictionaryProvider();\n+    provider.put(dictionary4);\n+\n+    final StructVector vector = newVector(StructVector.class, \"D4\", MinorType.STRUCT, allocator);\n+    final Map<String, List<Integer>> values = new HashMap<>();\n+    // Index:                     0, 2, 1, 2, 1, 0, 0\n+    values.put(\"a\", Arrays.asList(1, 3, 2, 3, 2, 1, 1));\n+    values.put(\"b\", Arrays.asList(4, 6, 5, 6, 5, 4, 4));\n+    setVector(vector, values);\n+    FieldVector encodedVector = (FieldVector) DictionaryEncoder.encode(vector, dictionary4);\n+\n+    List<Field> fields = Arrays.asList(encodedVector.getField());\n+    List<FieldVector> vectors = Collections2.asImmutableList(encodedVector);\n+    try (VectorSchemaRoot root = new VectorSchemaRoot(fields, vectors, encodedVector.getValueCount());\n+         ByteArrayOutputStream out = new ByteArrayOutputStream();\n+         ArrowFileWriter writer = new ArrowFileWriter(root, provider, newChannel(out));) {\n+\n+      writer.start();\n+      writer.writeBatch();\n+      writer.end();\n+\n+      try (SeekableReadChannel channel = new SeekableReadChannel(\n+          new ByteArrayReadableSeekableByteChannel(out.toByteArray()));\n+          ArrowFileReader reader = new ArrowFileReader(channel, allocator)) {\n+        final VectorSchemaRoot readRoot = reader.getVectorSchemaRoot();\n+        final Schema readSchema = readRoot.getSchema();\n+        assertEquals(root.getSchema(), readSchema);\n+        assertEquals(1, reader.getDictionaryBlocks().size());\n+        assertEquals(1, reader.getRecordBlocks().size());\n+\n+        reader.loadNextBatch();\n+        assertEquals(1, readRoot.getFieldVectors().size());\n+        assertEquals(1, reader.getDictionaryVectors().size());\n+        \n+        final FieldVector readEncoded = readRoot.getVector(0);\n+        assertTrue(readEncoded instanceof IntVector);\n+        assertEquals(new FieldType(true, MinorType.INT.getType(), dictionary4.getEncoding()),\n+            readEncoded.getField().getFieldType());\n+\n+        final Map<Long, Dictionary> readDictionaryMap = reader.getDictionaryVectors();\n+        final Dictionary readDictionary =\n+            readDictionaryMap.get(readEncoded.getField().getDictionary().getId());\n+        assertNotNull(readDictionary);\n\nReview comment:\n       should we validate the read dictionary vector?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-09T11:48:07.074+0000",
                    "updated": "2020-10-09T11:48:07.074+0000",
                    "started": "2020-10-09T11:48:07.074+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "497909",
                    "issueId": "13333723"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13333723/worklog/497910",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on a change in pull request #8363:\nURL: https://github.com/apache/arrow/pull/8363#discussion_r502373097\n\n\n\n##########\nFile path: java/vector/src/test/java/org/apache/arrow/vector/ipc/TestArrowReaderWriter.java\n##########\n@@ -305,6 +321,64 @@ public void testWriteReadWithDictionaries() throws IOException {\n     }\n   }\n \n+  @Test\n+  public void testWriteReadWithStructDictionaries() throws IOException {\n+    DictionaryProvider.MapDictionaryProvider provider = new DictionaryProvider.MapDictionaryProvider();\n+    provider.put(dictionary4);\n+\n+    final StructVector vector = newVector(StructVector.class, \"D4\", MinorType.STRUCT, allocator);\n+    final Map<String, List<Integer>> values = new HashMap<>();\n+    // Index:                     0, 2, 1, 2, 1, 0, 0\n+    values.put(\"a\", Arrays.asList(1, 3, 2, 3, 2, 1, 1));\n+    values.put(\"b\", Arrays.asList(4, 6, 5, 6, 5, 4, 4));\n+    setVector(vector, values);\n+    FieldVector encodedVector = (FieldVector) DictionaryEncoder.encode(vector, dictionary4);\n+\n+    List<Field> fields = Arrays.asList(encodedVector.getField());\n+    List<FieldVector> vectors = Collections2.asImmutableList(encodedVector);\n+    try (VectorSchemaRoot root = new VectorSchemaRoot(fields, vectors, encodedVector.getValueCount());\n+         ByteArrayOutputStream out = new ByteArrayOutputStream();\n+         ArrowFileWriter writer = new ArrowFileWriter(root, provider, newChannel(out));) {\n+\n+      writer.start();\n+      writer.writeBatch();\n+      writer.end();\n+\n+      try (SeekableReadChannel channel = new SeekableReadChannel(\n+          new ByteArrayReadableSeekableByteChannel(out.toByteArray()));\n+          ArrowFileReader reader = new ArrowFileReader(channel, allocator)) {\n+        final VectorSchemaRoot readRoot = reader.getVectorSchemaRoot();\n+        final Schema readSchema = readRoot.getSchema();\n+        assertEquals(root.getSchema(), readSchema);\n+        assertEquals(1, reader.getDictionaryBlocks().size());\n+        assertEquals(1, reader.getRecordBlocks().size());\n+\n+        reader.loadNextBatch();\n+        assertEquals(1, readRoot.getFieldVectors().size());\n+        assertEquals(1, reader.getDictionaryVectors().size());\n+        \n+        final FieldVector readEncoded = readRoot.getVector(0);\n+        assertTrue(readEncoded instanceof IntVector);\n+        assertEquals(new FieldType(true, MinorType.INT.getType(), dictionary4.getEncoding()),\n+            readEncoded.getField().getFieldType());\n+\n+        final Map<Long, Dictionary> readDictionaryMap = reader.getDictionaryVectors();\n+        final Dictionary readDictionary =\n+            readDictionaryMap.get(readEncoded.getField().getDictionary().getId());\n+        assertNotNull(readDictionary);\n+\n+        final ValueVector readVector = DictionaryEncoder.decode(readEncoded, readDictionary);\n+        assertTrue(readVector instanceof StructVector);\n+        assertEquals(vector.getValueCount(), readVector.getValueCount());\n+        for (int i = 0; i < vector.getValueCount(); i++) {\n+          assertEquals(vector.getObject(i), readVector.getObject(i));\n+        }\n\nReview comment:\n       Maybe we can compare the two vectors through a `RangeEqualsVisitor` object?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-09T11:49:27.918+0000",
                    "updated": "2020-10-09T11:49:27.918+0000",
                    "started": "2020-10-09T11:49:27.918+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "497910",
                    "issueId": "13333723"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13333723/worklog/497911",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on a change in pull request #8363:\nURL: https://github.com/apache/arrow/pull/8363#discussion_r502373348\n\n\n\n##########\nFile path: java/vector/src/test/java/org/apache/arrow/vector/testing/ValueVectorDataPopulator.java\n##########\n@@ -673,4 +677,28 @@ public static void setVector(FixedSizeListVector vector, List<Integer>... values\n     dataVector.setValueCount(curPos);\n     vector.setValueCount(values.length);\n   }\n+\n+  /**\n+   * Populate values for {@link StructVector}.\n+   */\n+  public static void setVector(StructVector vector, Map<String, List<Integer>> values) {\n+    vector.allocateNewSafe();\n+\n+    int valueCount = 0;\n+    for (final Entry<String, List<Integer>> entry : values.entrySet()) {\n+      // Add the child\n+      final IntVector child = vector.addOrGet(entry.getKey(),\n+          FieldType.nullable(MinorType.INT.getType()), IntVector.class);\n+\n+      // Write the values to the child\n+      child.allocateNew();\n+      final List<Integer> v = entry.getValue();\n+      for (int i = 0; i < v.size(); i++) {\n+        child.set(i, v.get(i));\n\nReview comment:\n       We need to consider the null values in v?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-09T11:50:00.961+0000",
                    "updated": "2020-10-09T11:50:00.961+0000",
                    "started": "2020-10-09T11:50:00.961+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "497911",
                    "issueId": "13333723"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13333723/worklog/497912",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on a change in pull request #8363:\nURL: https://github.com/apache/arrow/pull/8363#discussion_r502373894\n\n\n\n##########\nFile path: java/vector/src/test/java/org/apache/arrow/vector/testing/ValueVectorDataPopulator.java\n##########\n@@ -673,4 +677,28 @@ public static void setVector(FixedSizeListVector vector, List<Integer>... values\n     dataVector.setValueCount(curPos);\n     vector.setValueCount(values.length);\n   }\n+\n+  /**\n+   * Populate values for {@link StructVector}.\n+   */\n+  public static void setVector(StructVector vector, Map<String, List<Integer>> values) {\n+    vector.allocateNewSafe();\n+\n+    int valueCount = 0;\n+    for (final Entry<String, List<Integer>> entry : values.entrySet()) {\n+      // Add the child\n+      final IntVector child = vector.addOrGet(entry.getKey(),\n+          FieldType.nullable(MinorType.INT.getType()), IntVector.class);\n+\n+      // Write the values to the child\n+      child.allocateNew();\n+      final List<Integer> v = entry.getValue();\n+      for (int i = 0; i < v.size(); i++) {\n+        child.set(i, v.get(i));\n+        vector.setIndexDefined(i);\n+      }\n\nReview comment:\n       Maybe we also need to set the value count for the child vector\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-09T11:51:07.314+0000",
                    "updated": "2020-10-09T11:51:07.314+0000",
                    "started": "2020-10-09T11:51:07.314+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "497912",
                    "issueId": "13333723"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13333723/worklog/498012",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #8363:\nURL: https://github.com/apache/arrow/pull/8363#issuecomment-705928888\n\n\n   > @liyafan82 do you have time to review?\r\n   \r\n   @emkornfield Sure. I will take a look in one or two days. \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-09T13:26:59.651+0000",
                    "updated": "2020-10-09T13:26:59.651+0000",
                    "started": "2020-10-09T13:26:59.651+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "498012",
                    "issueId": "13333723"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13333723/worklog/498046",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on a change in pull request #8363:\nURL: https://github.com/apache/arrow/pull/8363#discussion_r502369246\n\n\n\n##########\nFile path: java/vector/src/main/java/org/apache/arrow/vector/util/DictionaryUtility.java\n##########\n@@ -115,25 +118,28 @@ public static Field toMemoryFormat(Field field, BufferAllocator allocator, Map<L\n     }\n \n     ArrowType type;\n+    List<Field> fieldChildren;\n     if (encoding == null) {\n       type = field.getType();\n+      fieldChildren = updatedChildren;\n     } else {\n       // re-type the field for in-memory format\n       type = encoding.getIndexType();\n+      fieldChildren = null;\n\nReview comment:\n       This seems not necessary?\n\n##########\nFile path: java/vector/src/test/java/org/apache/arrow/vector/ipc/TestArrowReaderWriter.java\n##########\n@@ -305,6 +321,64 @@ public void testWriteReadWithDictionaries() throws IOException {\n     }\n   }\n \n+  @Test\n+  public void testWriteReadWithStructDictionaries() throws IOException {\n+    DictionaryProvider.MapDictionaryProvider provider = new DictionaryProvider.MapDictionaryProvider();\n+    provider.put(dictionary4);\n+\n+    final StructVector vector = newVector(StructVector.class, \"D4\", MinorType.STRUCT, allocator);\n+    final Map<String, List<Integer>> values = new HashMap<>();\n+    // Index:                     0, 2, 1, 2, 1, 0, 0\n+    values.put(\"a\", Arrays.asList(1, 3, 2, 3, 2, 1, 1));\n+    values.put(\"b\", Arrays.asList(4, 6, 5, 6, 5, 4, 4));\n+    setVector(vector, values);\n+    FieldVector encodedVector = (FieldVector) DictionaryEncoder.encode(vector, dictionary4);\n\nReview comment:\n       Maybe we need to verify the encoded vector?\n\n##########\nFile path: java/vector/src/test/java/org/apache/arrow/vector/ipc/TestArrowReaderWriter.java\n##########\n@@ -305,6 +321,64 @@ public void testWriteReadWithDictionaries() throws IOException {\n     }\n   }\n \n+  @Test\n+  public void testWriteReadWithStructDictionaries() throws IOException {\n+    DictionaryProvider.MapDictionaryProvider provider = new DictionaryProvider.MapDictionaryProvider();\n+    provider.put(dictionary4);\n+\n+    final StructVector vector = newVector(StructVector.class, \"D4\", MinorType.STRUCT, allocator);\n+    final Map<String, List<Integer>> values = new HashMap<>();\n+    // Index:                     0, 2, 1, 2, 1, 0, 0\n+    values.put(\"a\", Arrays.asList(1, 3, 2, 3, 2, 1, 1));\n+    values.put(\"b\", Arrays.asList(4, 6, 5, 6, 5, 4, 4));\n+    setVector(vector, values);\n+    FieldVector encodedVector = (FieldVector) DictionaryEncoder.encode(vector, dictionary4);\n+\n+    List<Field> fields = Arrays.asList(encodedVector.getField());\n+    List<FieldVector> vectors = Collections2.asImmutableList(encodedVector);\n+    try (VectorSchemaRoot root = new VectorSchemaRoot(fields, vectors, encodedVector.getValueCount());\n+         ByteArrayOutputStream out = new ByteArrayOutputStream();\n+         ArrowFileWriter writer = new ArrowFileWriter(root, provider, newChannel(out));) {\n+\n+      writer.start();\n+      writer.writeBatch();\n+      writer.end();\n+\n+      try (SeekableReadChannel channel = new SeekableReadChannel(\n+          new ByteArrayReadableSeekableByteChannel(out.toByteArray()));\n+          ArrowFileReader reader = new ArrowFileReader(channel, allocator)) {\n+        final VectorSchemaRoot readRoot = reader.getVectorSchemaRoot();\n+        final Schema readSchema = readRoot.getSchema();\n+        assertEquals(root.getSchema(), readSchema);\n+        assertEquals(1, reader.getDictionaryBlocks().size());\n+        assertEquals(1, reader.getRecordBlocks().size());\n+\n+        reader.loadNextBatch();\n+        assertEquals(1, readRoot.getFieldVectors().size());\n+        assertEquals(1, reader.getDictionaryVectors().size());\n+        \n+        final FieldVector readEncoded = readRoot.getVector(0);\n+        assertTrue(readEncoded instanceof IntVector);\n\nReview comment:\n       should we validate `readEncoded`?\n\n##########\nFile path: java/vector/src/test/java/org/apache/arrow/vector/ipc/TestArrowReaderWriter.java\n##########\n@@ -305,6 +321,64 @@ public void testWriteReadWithDictionaries() throws IOException {\n     }\n   }\n \n+  @Test\n+  public void testWriteReadWithStructDictionaries() throws IOException {\n+    DictionaryProvider.MapDictionaryProvider provider = new DictionaryProvider.MapDictionaryProvider();\n+    provider.put(dictionary4);\n+\n+    final StructVector vector = newVector(StructVector.class, \"D4\", MinorType.STRUCT, allocator);\n+    final Map<String, List<Integer>> values = new HashMap<>();\n+    // Index:                     0, 2, 1, 2, 1, 0, 0\n+    values.put(\"a\", Arrays.asList(1, 3, 2, 3, 2, 1, 1));\n+    values.put(\"b\", Arrays.asList(4, 6, 5, 6, 5, 4, 4));\n+    setVector(vector, values);\n+    FieldVector encodedVector = (FieldVector) DictionaryEncoder.encode(vector, dictionary4);\n+\n+    List<Field> fields = Arrays.asList(encodedVector.getField());\n+    List<FieldVector> vectors = Collections2.asImmutableList(encodedVector);\n+    try (VectorSchemaRoot root = new VectorSchemaRoot(fields, vectors, encodedVector.getValueCount());\n+         ByteArrayOutputStream out = new ByteArrayOutputStream();\n+         ArrowFileWriter writer = new ArrowFileWriter(root, provider, newChannel(out));) {\n+\n+      writer.start();\n+      writer.writeBatch();\n+      writer.end();\n+\n+      try (SeekableReadChannel channel = new SeekableReadChannel(\n+          new ByteArrayReadableSeekableByteChannel(out.toByteArray()));\n+          ArrowFileReader reader = new ArrowFileReader(channel, allocator)) {\n+        final VectorSchemaRoot readRoot = reader.getVectorSchemaRoot();\n+        final Schema readSchema = readRoot.getSchema();\n+        assertEquals(root.getSchema(), readSchema);\n+        assertEquals(1, reader.getDictionaryBlocks().size());\n+        assertEquals(1, reader.getRecordBlocks().size());\n+\n+        reader.loadNextBatch();\n+        assertEquals(1, readRoot.getFieldVectors().size());\n+        assertEquals(1, reader.getDictionaryVectors().size());\n+        \n+        final FieldVector readEncoded = readRoot.getVector(0);\n+        assertTrue(readEncoded instanceof IntVector);\n+        assertEquals(new FieldType(true, MinorType.INT.getType(), dictionary4.getEncoding()),\n+            readEncoded.getField().getFieldType());\n+\n+        final Map<Long, Dictionary> readDictionaryMap = reader.getDictionaryVectors();\n+        final Dictionary readDictionary =\n+            readDictionaryMap.get(readEncoded.getField().getDictionary().getId());\n+        assertNotNull(readDictionary);\n\nReview comment:\n       should we validate the read dictionary vector?\n\n##########\nFile path: java/vector/src/test/java/org/apache/arrow/vector/ipc/TestArrowReaderWriter.java\n##########\n@@ -305,6 +321,64 @@ public void testWriteReadWithDictionaries() throws IOException {\n     }\n   }\n \n+  @Test\n+  public void testWriteReadWithStructDictionaries() throws IOException {\n+    DictionaryProvider.MapDictionaryProvider provider = new DictionaryProvider.MapDictionaryProvider();\n+    provider.put(dictionary4);\n+\n+    final StructVector vector = newVector(StructVector.class, \"D4\", MinorType.STRUCT, allocator);\n+    final Map<String, List<Integer>> values = new HashMap<>();\n+    // Index:                     0, 2, 1, 2, 1, 0, 0\n+    values.put(\"a\", Arrays.asList(1, 3, 2, 3, 2, 1, 1));\n+    values.put(\"b\", Arrays.asList(4, 6, 5, 6, 5, 4, 4));\n+    setVector(vector, values);\n+    FieldVector encodedVector = (FieldVector) DictionaryEncoder.encode(vector, dictionary4);\n+\n+    List<Field> fields = Arrays.asList(encodedVector.getField());\n+    List<FieldVector> vectors = Collections2.asImmutableList(encodedVector);\n+    try (VectorSchemaRoot root = new VectorSchemaRoot(fields, vectors, encodedVector.getValueCount());\n+         ByteArrayOutputStream out = new ByteArrayOutputStream();\n+         ArrowFileWriter writer = new ArrowFileWriter(root, provider, newChannel(out));) {\n+\n+      writer.start();\n+      writer.writeBatch();\n+      writer.end();\n+\n+      try (SeekableReadChannel channel = new SeekableReadChannel(\n+          new ByteArrayReadableSeekableByteChannel(out.toByteArray()));\n+          ArrowFileReader reader = new ArrowFileReader(channel, allocator)) {\n+        final VectorSchemaRoot readRoot = reader.getVectorSchemaRoot();\n+        final Schema readSchema = readRoot.getSchema();\n+        assertEquals(root.getSchema(), readSchema);\n+        assertEquals(1, reader.getDictionaryBlocks().size());\n+        assertEquals(1, reader.getRecordBlocks().size());\n+\n+        reader.loadNextBatch();\n+        assertEquals(1, readRoot.getFieldVectors().size());\n+        assertEquals(1, reader.getDictionaryVectors().size());\n+        \n+        final FieldVector readEncoded = readRoot.getVector(0);\n+        assertTrue(readEncoded instanceof IntVector);\n+        assertEquals(new FieldType(true, MinorType.INT.getType(), dictionary4.getEncoding()),\n+            readEncoded.getField().getFieldType());\n+\n+        final Map<Long, Dictionary> readDictionaryMap = reader.getDictionaryVectors();\n+        final Dictionary readDictionary =\n+            readDictionaryMap.get(readEncoded.getField().getDictionary().getId());\n+        assertNotNull(readDictionary);\n+\n+        final ValueVector readVector = DictionaryEncoder.decode(readEncoded, readDictionary);\n+        assertTrue(readVector instanceof StructVector);\n+        assertEquals(vector.getValueCount(), readVector.getValueCount());\n+        for (int i = 0; i < vector.getValueCount(); i++) {\n+          assertEquals(vector.getObject(i), readVector.getObject(i));\n+        }\n\nReview comment:\n       Maybe we can compare the two vectors through a `RangeEqualsVisitor` object?\n\n##########\nFile path: java/vector/src/test/java/org/apache/arrow/vector/testing/ValueVectorDataPopulator.java\n##########\n@@ -673,4 +677,28 @@ public static void setVector(FixedSizeListVector vector, List<Integer>... values\n     dataVector.setValueCount(curPos);\n     vector.setValueCount(values.length);\n   }\n+\n+  /**\n+   * Populate values for {@link StructVector}.\n+   */\n+  public static void setVector(StructVector vector, Map<String, List<Integer>> values) {\n+    vector.allocateNewSafe();\n+\n+    int valueCount = 0;\n+    for (final Entry<String, List<Integer>> entry : values.entrySet()) {\n+      // Add the child\n+      final IntVector child = vector.addOrGet(entry.getKey(),\n+          FieldType.nullable(MinorType.INT.getType()), IntVector.class);\n+\n+      // Write the values to the child\n+      child.allocateNew();\n+      final List<Integer> v = entry.getValue();\n+      for (int i = 0; i < v.size(); i++) {\n+        child.set(i, v.get(i));\n\nReview comment:\n       We need to consider the null values in v?\n\n##########\nFile path: java/vector/src/test/java/org/apache/arrow/vector/testing/ValueVectorDataPopulator.java\n##########\n@@ -673,4 +677,28 @@ public static void setVector(FixedSizeListVector vector, List<Integer>... values\n     dataVector.setValueCount(curPos);\n     vector.setValueCount(values.length);\n   }\n+\n+  /**\n+   * Populate values for {@link StructVector}.\n+   */\n+  public static void setVector(StructVector vector, Map<String, List<Integer>> values) {\n+    vector.allocateNewSafe();\n+\n+    int valueCount = 0;\n+    for (final Entry<String, List<Integer>> entry : values.entrySet()) {\n+      // Add the child\n+      final IntVector child = vector.addOrGet(entry.getKey(),\n+          FieldType.nullable(MinorType.INT.getType()), IntVector.class);\n+\n+      // Write the values to the child\n+      child.allocateNew();\n+      final List<Integer> v = entry.getValue();\n+      for (int i = 0; i < v.size(); i++) {\n+        child.set(i, v.get(i));\n+        vector.setIndexDefined(i);\n+      }\n\nReview comment:\n       Maybe we also need to set the value count for the child vector\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-09T13:30:29.243+0000",
                    "updated": "2020-10-09T13:30:29.243+0000",
                    "started": "2020-10-09T13:30:29.242+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "498046",
                    "issueId": "13333723"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13333723/worklog/498569",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "HedgehogCode commented on pull request #8363:\nURL: https://github.com/apache/arrow/pull/8363#issuecomment-706193122\n\n\n   I implemented the changes and force pushed them.\r\n   \r\n   Thank you for the advice with the `RangeEqualsVisitor`. Using it I discovered another bug in `DictionaryUtility`. The field for the Dictionary was always created with `nullable=false` but this is incorrect because dictionaries can be nullable. Therefore, I replaced this with the nullability read from the schema.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-09T14:18:15.348+0000",
                    "updated": "2020-10-09T14:18:15.348+0000",
                    "started": "2020-10-09T14:18:15.348+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "498569",
                    "issueId": "13333723"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13333723/worklog/498574",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "HedgehogCode commented on a change in pull request #8363:\nURL: https://github.com/apache/arrow/pull/8363#discussion_r502432327\n\n\n\n##########\nFile path: java/vector/src/main/java/org/apache/arrow/vector/util/DictionaryUtility.java\n##########\n@@ -115,25 +118,28 @@ public static Field toMemoryFormat(Field field, BufferAllocator allocator, Map<L\n     }\n \n     ArrowType type;\n+    List<Field> fieldChildren;\n     if (encoding == null) {\n       type = field.getType();\n+      fieldChildren = updatedChildren;\n     } else {\n       // re-type the field for in-memory format\n       type = encoding.getIndexType();\n+      fieldChildren = null;\n\nReview comment:\n       Correct. I moved the `= null` to the declaration of `fieldChildren`. (Usually I would make `fieldChildren` final and then this would be necessary. However, this seems not to be in line with the general code style in the repository).\n\n##########\nFile path: java/vector/src/test/java/org/apache/arrow/vector/ipc/TestArrowReaderWriter.java\n##########\n@@ -305,6 +321,64 @@ public void testWriteReadWithDictionaries() throws IOException {\n     }\n   }\n \n+  @Test\n+  public void testWriteReadWithStructDictionaries() throws IOException {\n+    DictionaryProvider.MapDictionaryProvider provider = new DictionaryProvider.MapDictionaryProvider();\n+    provider.put(dictionary4);\n+\n+    final StructVector vector = newVector(StructVector.class, \"D4\", MinorType.STRUCT, allocator);\n+    final Map<String, List<Integer>> values = new HashMap<>();\n+    // Index:                     0, 2, 1, 2, 1, 0, 0\n+    values.put(\"a\", Arrays.asList(1, 3, 2, 3, 2, 1, 1));\n+    values.put(\"b\", Arrays.asList(4, 6, 5, 6, 5, 4, 4));\n+    setVector(vector, values);\n+    FieldVector encodedVector = (FieldVector) DictionaryEncoder.encode(vector, dictionary4);\n\nReview comment:\n       No. Encoding of struct vectors is tested in `TestDictionaryVector#testEncodeStruct`. The encoded vector should be fine.\n\n##########\nFile path: java/vector/src/test/java/org/apache/arrow/vector/ipc/TestArrowReaderWriter.java\n##########\n@@ -305,6 +321,64 @@ public void testWriteReadWithDictionaries() throws IOException {\n     }\n   }\n \n+  @Test\n+  public void testWriteReadWithStructDictionaries() throws IOException {\n+    DictionaryProvider.MapDictionaryProvider provider = new DictionaryProvider.MapDictionaryProvider();\n+    provider.put(dictionary4);\n+\n+    final StructVector vector = newVector(StructVector.class, \"D4\", MinorType.STRUCT, allocator);\n+    final Map<String, List<Integer>> values = new HashMap<>();\n+    // Index:                     0, 2, 1, 2, 1, 0, 0\n+    values.put(\"a\", Arrays.asList(1, 3, 2, 3, 2, 1, 1));\n+    values.put(\"b\", Arrays.asList(4, 6, 5, 6, 5, 4, 4));\n+    setVector(vector, values);\n+    FieldVector encodedVector = (FieldVector) DictionaryEncoder.encode(vector, dictionary4);\n+\n+    List<Field> fields = Arrays.asList(encodedVector.getField());\n+    List<FieldVector> vectors = Collections2.asImmutableList(encodedVector);\n+    try (VectorSchemaRoot root = new VectorSchemaRoot(fields, vectors, encodedVector.getValueCount());\n+         ByteArrayOutputStream out = new ByteArrayOutputStream();\n+         ArrowFileWriter writer = new ArrowFileWriter(root, provider, newChannel(out));) {\n+\n+      writer.start();\n+      writer.writeBatch();\n+      writer.end();\n+\n+      try (SeekableReadChannel channel = new SeekableReadChannel(\n+          new ByteArrayReadableSeekableByteChannel(out.toByteArray()));\n+          ArrowFileReader reader = new ArrowFileReader(channel, allocator)) {\n+        final VectorSchemaRoot readRoot = reader.getVectorSchemaRoot();\n+        final Schema readSchema = readRoot.getSchema();\n+        assertEquals(root.getSchema(), readSchema);\n+        assertEquals(1, reader.getDictionaryBlocks().size());\n+        assertEquals(1, reader.getRecordBlocks().size());\n+\n+        reader.loadNextBatch();\n+        assertEquals(1, readRoot.getFieldVectors().size());\n+        assertEquals(1, reader.getDictionaryVectors().size());\n+        \n+        final FieldVector readEncoded = readRoot.getVector(0);\n+        assertTrue(readEncoded instanceof IntVector);\n\nReview comment:\n       Yes. It is interesting to check the `Field`. However, using the `RangeEqualsVisitor` we can check both without any more code. So I did it.\n\n##########\nFile path: java/vector/src/test/java/org/apache/arrow/vector/ipc/TestArrowReaderWriter.java\n##########\n@@ -305,6 +321,64 @@ public void testWriteReadWithDictionaries() throws IOException {\n     }\n   }\n \n+  @Test\n+  public void testWriteReadWithStructDictionaries() throws IOException {\n+    DictionaryProvider.MapDictionaryProvider provider = new DictionaryProvider.MapDictionaryProvider();\n+    provider.put(dictionary4);\n+\n+    final StructVector vector = newVector(StructVector.class, \"D4\", MinorType.STRUCT, allocator);\n+    final Map<String, List<Integer>> values = new HashMap<>();\n+    // Index:                     0, 2, 1, 2, 1, 0, 0\n+    values.put(\"a\", Arrays.asList(1, 3, 2, 3, 2, 1, 1));\n+    values.put(\"b\", Arrays.asList(4, 6, 5, 6, 5, 4, 4));\n+    setVector(vector, values);\n+    FieldVector encodedVector = (FieldVector) DictionaryEncoder.encode(vector, dictionary4);\n+\n+    List<Field> fields = Arrays.asList(encodedVector.getField());\n+    List<FieldVector> vectors = Collections2.asImmutableList(encodedVector);\n+    try (VectorSchemaRoot root = new VectorSchemaRoot(fields, vectors, encodedVector.getValueCount());\n+         ByteArrayOutputStream out = new ByteArrayOutputStream();\n+         ArrowFileWriter writer = new ArrowFileWriter(root, provider, newChannel(out));) {\n+\n+      writer.start();\n+      writer.writeBatch();\n+      writer.end();\n+\n+      try (SeekableReadChannel channel = new SeekableReadChannel(\n+          new ByteArrayReadableSeekableByteChannel(out.toByteArray()));\n+          ArrowFileReader reader = new ArrowFileReader(channel, allocator)) {\n+        final VectorSchemaRoot readRoot = reader.getVectorSchemaRoot();\n+        final Schema readSchema = readRoot.getSchema();\n+        assertEquals(root.getSchema(), readSchema);\n+        assertEquals(1, reader.getDictionaryBlocks().size());\n+        assertEquals(1, reader.getRecordBlocks().size());\n+\n+        reader.loadNextBatch();\n+        assertEquals(1, readRoot.getFieldVectors().size());\n+        assertEquals(1, reader.getDictionaryVectors().size());\n+        \n+        final FieldVector readEncoded = readRoot.getVector(0);\n+        assertTrue(readEncoded instanceof IntVector);\n+        assertEquals(new FieldType(true, MinorType.INT.getType(), dictionary4.getEncoding()),\n+            readEncoded.getField().getFieldType());\n+\n+        final Map<Long, Dictionary> readDictionaryMap = reader.getDictionaryVectors();\n+        final Dictionary readDictionary =\n+            readDictionaryMap.get(readEncoded.getField().getDictionary().getId());\n+        assertNotNull(readDictionary);\n\nReview comment:\n       Yes. I added a check.\n\n##########\nFile path: java/vector/src/test/java/org/apache/arrow/vector/ipc/TestArrowReaderWriter.java\n##########\n@@ -305,6 +321,64 @@ public void testWriteReadWithDictionaries() throws IOException {\n     }\n   }\n \n+  @Test\n+  public void testWriteReadWithStructDictionaries() throws IOException {\n+    DictionaryProvider.MapDictionaryProvider provider = new DictionaryProvider.MapDictionaryProvider();\n+    provider.put(dictionary4);\n+\n+    final StructVector vector = newVector(StructVector.class, \"D4\", MinorType.STRUCT, allocator);\n+    final Map<String, List<Integer>> values = new HashMap<>();\n+    // Index:                     0, 2, 1, 2, 1, 0, 0\n+    values.put(\"a\", Arrays.asList(1, 3, 2, 3, 2, 1, 1));\n+    values.put(\"b\", Arrays.asList(4, 6, 5, 6, 5, 4, 4));\n+    setVector(vector, values);\n+    FieldVector encodedVector = (FieldVector) DictionaryEncoder.encode(vector, dictionary4);\n+\n+    List<Field> fields = Arrays.asList(encodedVector.getField());\n+    List<FieldVector> vectors = Collections2.asImmutableList(encodedVector);\n+    try (VectorSchemaRoot root = new VectorSchemaRoot(fields, vectors, encodedVector.getValueCount());\n+         ByteArrayOutputStream out = new ByteArrayOutputStream();\n+         ArrowFileWriter writer = new ArrowFileWriter(root, provider, newChannel(out));) {\n+\n+      writer.start();\n+      writer.writeBatch();\n+      writer.end();\n+\n+      try (SeekableReadChannel channel = new SeekableReadChannel(\n+          new ByteArrayReadableSeekableByteChannel(out.toByteArray()));\n+          ArrowFileReader reader = new ArrowFileReader(channel, allocator)) {\n+        final VectorSchemaRoot readRoot = reader.getVectorSchemaRoot();\n+        final Schema readSchema = readRoot.getSchema();\n+        assertEquals(root.getSchema(), readSchema);\n+        assertEquals(1, reader.getDictionaryBlocks().size());\n+        assertEquals(1, reader.getRecordBlocks().size());\n+\n+        reader.loadNextBatch();\n+        assertEquals(1, readRoot.getFieldVectors().size());\n+        assertEquals(1, reader.getDictionaryVectors().size());\n+        \n+        final FieldVector readEncoded = readRoot.getVector(0);\n+        assertTrue(readEncoded instanceof IntVector);\n+        assertEquals(new FieldType(true, MinorType.INT.getType(), dictionary4.getEncoding()),\n+            readEncoded.getField().getFieldType());\n+\n+        final Map<Long, Dictionary> readDictionaryMap = reader.getDictionaryVectors();\n+        final Dictionary readDictionary =\n+            readDictionaryMap.get(readEncoded.getField().getDictionary().getId());\n+        assertNotNull(readDictionary);\n+\n+        final ValueVector readVector = DictionaryEncoder.decode(readEncoded, readDictionary);\n+        assertTrue(readVector instanceof StructVector);\n+        assertEquals(vector.getValueCount(), readVector.getValueCount());\n+        for (int i = 0; i < vector.getValueCount(); i++) {\n+          assertEquals(vector.getObject(i), readVector.getObject(i));\n+        }\n\nReview comment:\n       Good advice! The `RangeEqualsVisitor` does some checks on the `Field` that were missing before.\n\n##########\nFile path: java/vector/src/test/java/org/apache/arrow/vector/testing/ValueVectorDataPopulator.java\n##########\n@@ -673,4 +677,28 @@ public static void setVector(FixedSizeListVector vector, List<Integer>... values\n     dataVector.setValueCount(curPos);\n     vector.setValueCount(values.length);\n   }\n+\n+  /**\n+   * Populate values for {@link StructVector}.\n+   */\n+  public static void setVector(StructVector vector, Map<String, List<Integer>> values) {\n+    vector.allocateNewSafe();\n+\n+    int valueCount = 0;\n+    for (final Entry<String, List<Integer>> entry : values.entrySet()) {\n+      // Add the child\n+      final IntVector child = vector.addOrGet(entry.getKey(),\n+          FieldType.nullable(MinorType.INT.getType()), IntVector.class);\n+\n+      // Write the values to the child\n+      child.allocateNew();\n+      final List<Integer> v = entry.getValue();\n+      for (int i = 0; i < v.size(); i++) {\n+        child.set(i, v.get(i));\n\nReview comment:\n       Yes, why not. I added an `if` switch for them.\n\n##########\nFile path: java/vector/src/test/java/org/apache/arrow/vector/testing/ValueVectorDataPopulator.java\n##########\n@@ -673,4 +677,28 @@ public static void setVector(FixedSizeListVector vector, List<Integer>... values\n     dataVector.setValueCount(curPos);\n     vector.setValueCount(values.length);\n   }\n+\n+  /**\n+   * Populate values for {@link StructVector}.\n+   */\n+  public static void setVector(StructVector vector, Map<String, List<Integer>> values) {\n+    vector.allocateNewSafe();\n+\n+    int valueCount = 0;\n+    for (final Entry<String, List<Integer>> entry : values.entrySet()) {\n+      // Add the child\n+      final IntVector child = vector.addOrGet(entry.getKey(),\n+          FieldType.nullable(MinorType.INT.getType()), IntVector.class);\n+\n+      // Write the values to the child\n+      child.allocateNew();\n+      final List<Integer> v = entry.getValue();\n+      for (int i = 0; i < v.size(); i++) {\n+        child.set(i, v.get(i));\n+        vector.setIndexDefined(i);\n+      }\n\nReview comment:\n       No. The struct vector sets the value count of its children in `#setValueCount`.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-09T14:18:54.231+0000",
                    "updated": "2020-10-09T14:18:54.231+0000",
                    "started": "2020-10-09T14:18:54.230+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "498574",
                    "issueId": "13333723"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13333723/worklog/498864",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on a change in pull request #8363:\nURL: https://github.com/apache/arrow/pull/8363#discussion_r502761624\n\n\n\n##########\nFile path: java/vector/src/test/java/org/apache/arrow/vector/testing/ValueVectorDataPopulator.java\n##########\n@@ -673,4 +677,32 @@ public static void setVector(FixedSizeListVector vector, List<Integer>... values\n     dataVector.setValueCount(curPos);\n     vector.setValueCount(values.length);\n   }\n+\n+  /**\n+   * Populate values for {@link StructVector}.\n+   */\n+  public static void setVector(StructVector vector, Map<String, List<Integer>> values) {\n+    vector.allocateNewSafe();\n+\n+    int valueCount = 0;\n+    for (final Entry<String, List<Integer>> entry : values.entrySet()) {\n+      // Add the child\n+      final IntVector child = vector.addOrGet(entry.getKey(),\n+          FieldType.nullable(MinorType.INT.getType()), IntVector.class);\n+\n+      // Write the values to the child\n+      child.allocateNew();\n+      final List<Integer> v = entry.getValue();\n+      for (int i = 0; i < v.size(); i++) {\n+        if (v.get(i) != null) {\n+          child.set(i, v.get(i));\n+        } else {\n+          child.setNull(i);\n+        }\n+        vector.setIndexDefined(i);\n\nReview comment:\n       we should call `setIndexDefined` only if `v.get(i) != null`?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-10T08:01:30.297+0000",
                    "updated": "2020-10-10T08:01:30.297+0000",
                    "started": "2020-10-10T08:01:30.297+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "498864",
                    "issueId": "13333723"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13333723/worklog/498865",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on a change in pull request #8363:\nURL: https://github.com/apache/arrow/pull/8363#discussion_r502761722\n\n\n\n##########\nFile path: java/vector/src/test/java/org/apache/arrow/vector/ipc/TestArrowReaderWriter.java\n##########\n@@ -305,6 +325,77 @@ public void testWriteReadWithDictionaries() throws IOException {\n     }\n   }\n \n+  @Test\n+  public void testWriteReadWithStructDictionaries() throws IOException {\n+    DictionaryProvider.MapDictionaryProvider provider = new DictionaryProvider.MapDictionaryProvider();\n+    provider.put(dictionary4);\n+\n+    final StructVector vector = newVector(StructVector.class, \"D4\", MinorType.STRUCT, allocator);\n+    final Map<String, List<Integer>> values = new HashMap<>();\n+    // Index:                     0, 2, 1, 2, 1, 0, 0\n+    values.put(\"a\", Arrays.asList(1, 3, 2, 3, 2, 1, 1));\n+    values.put(\"b\", Arrays.asList(4, 6, 5, 6, 5, 4, 4));\n+    setVector(vector, values);\n+    FieldVector encodedVector = (FieldVector) DictionaryEncoder.encode(vector, dictionary4);\n+\n+    List<Field> fields = Arrays.asList(encodedVector.getField());\n+    List<FieldVector> vectors = Collections2.asImmutableList(encodedVector);\n+    try (VectorSchemaRoot root = new VectorSchemaRoot(fields, vectors, encodedVector.getValueCount());\n+         ByteArrayOutputStream out = new ByteArrayOutputStream();\n+         ArrowFileWriter writer = new ArrowFileWriter(root, provider, newChannel(out));) {\n+\n+      writer.start();\n+      writer.writeBatch();\n+      writer.end();\n+\n+      try (SeekableReadChannel channel = new SeekableReadChannel(\n+          new ByteArrayReadableSeekableByteChannel(out.toByteArray()));\n+          ArrowFileReader reader = new ArrowFileReader(channel, allocator)) {\n+        final VectorSchemaRoot readRoot = reader.getVectorSchemaRoot();\n+        final Schema readSchema = readRoot.getSchema();\n+        assertEquals(root.getSchema(), readSchema);\n+        assertEquals(1, reader.getDictionaryBlocks().size());\n+        assertEquals(1, reader.getRecordBlocks().size());\n+\n+        reader.loadNextBatch();\n+        assertEquals(1, readRoot.getFieldVectors().size());\n+        assertEquals(1, reader.getDictionaryVectors().size());\n+        \n+        // Read the encoded vector and check it\n+        final FieldVector readEncoded = readRoot.getVector(0);\n+        assertEquals(encodedVector.getValueCount(), readEncoded.getValueCount());\n+        assertTrue(new RangeEqualsVisitor(encodedVector, readEncoded)\n+            .rangeEquals(new Range(0, 0, encodedVector.getValueCount())));\n+\n+        // Read the dictionary\n+        final Map<Long, Dictionary> readDictionaryMap = reader.getDictionaryVectors();\n+        final Dictionary readDictionary =\n+            readDictionaryMap.get(readEncoded.getField().getDictionary().getId());\n+        assertNotNull(readDictionary);\n+\n+        // Assert the dictionary vector is correct\n+        final FieldVector readDictionaryVector = readDictionary.getVector();\n+        assertEquals(dictionaryVector4.getValueCount(), readDictionaryVector.getValueCount());\n+        final BiFunction<ValueVector, ValueVector, Boolean> typeComparatorIgnoreName =\n+            (v1, v2) -> new TypeEqualsVisitor(v1, false, true).equals(v2);\n+        assertTrue(\"Dictionary vectors are not equal\",\n+            new RangeEqualsVisitor(dictionaryVector4, readDictionaryVector,\n+                typeComparatorIgnoreName)\n+                    .rangeEquals(new Range(0, 0, dictionaryVector4.getValueCount())));\n+\n+        // Assert the decoded vector is correct\n+        final ValueVector readVector = DictionaryEncoder.decode(readEncoded, readDictionary);\n+        assertEquals(vector.getValueCount(), readVector.getValueCount());\n+        assertTrue(\"Decoded vectors are not equal\",\n+            new RangeEqualsVisitor(vector, readVector, typeComparatorIgnoreName)\n+                .rangeEquals(new Range(0, 0, vector.getValueCount())));\n+\n+        vector.close();\n+        readVector.close();\n\nReview comment:\n       it would be beneficial to close them through a try-with-resource clause to avoid resource leak?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-10T08:05:44.502+0000",
                    "updated": "2020-10-10T08:05:44.502+0000",
                    "started": "2020-10-10T08:05:44.502+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "498865",
                    "issueId": "13333723"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13333723/worklog/499262",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "HedgehogCode commented on a change in pull request #8363:\nURL: https://github.com/apache/arrow/pull/8363#discussion_r503126829\n\n\n\n##########\nFile path: java/vector/src/test/java/org/apache/arrow/vector/testing/ValueVectorDataPopulator.java\n##########\n@@ -673,4 +677,32 @@ public static void setVector(FixedSizeListVector vector, List<Integer>... values\n     dataVector.setValueCount(curPos);\n     vector.setValueCount(values.length);\n   }\n+\n+  /**\n+   * Populate values for {@link StructVector}.\n+   */\n+  public static void setVector(StructVector vector, Map<String, List<Integer>> values) {\n+    vector.allocateNewSafe();\n+\n+    int valueCount = 0;\n+    for (final Entry<String, List<Integer>> entry : values.entrySet()) {\n+      // Add the child\n+      final IntVector child = vector.addOrGet(entry.getKey(),\n+          FieldType.nullable(MinorType.INT.getType()), IntVector.class);\n+\n+      // Write the values to the child\n+      child.allocateNew();\n+      final List<Integer> v = entry.getValue();\n+      for (int i = 0; i < v.size(); i++) {\n+        if (v.get(i) != null) {\n+          child.set(i, v.get(i));\n+        } else {\n+          child.setNull(i);\n+        }\n+        vector.setIndexDefined(i);\n\nReview comment:\n       I am not sure.\r\n   The current implementation does not allow setting any struct element to `null`. If we only call `#setIndexDefined` if the child element is not `null` the implementation would not allow (non null) structs with all child values beeing `null`. I am okay with both but I think we should keep the API simple because this method is just there to make tests shorter.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-12T08:32:52.351+0000",
                    "updated": "2020-10-12T08:32:52.351+0000",
                    "started": "2020-10-12T08:32:52.351+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "499262",
                    "issueId": "13333723"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13333723/worklog/499272",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "HedgehogCode commented on a change in pull request #8363:\nURL: https://github.com/apache/arrow/pull/8363#discussion_r503140409\n\n\n\n##########\nFile path: java/vector/src/test/java/org/apache/arrow/vector/ipc/TestArrowReaderWriter.java\n##########\n@@ -305,6 +325,77 @@ public void testWriteReadWithDictionaries() throws IOException {\n     }\n   }\n \n+  @Test\n+  public void testWriteReadWithStructDictionaries() throws IOException {\n+    DictionaryProvider.MapDictionaryProvider provider = new DictionaryProvider.MapDictionaryProvider();\n+    provider.put(dictionary4);\n+\n+    final StructVector vector = newVector(StructVector.class, \"D4\", MinorType.STRUCT, allocator);\n+    final Map<String, List<Integer>> values = new HashMap<>();\n+    // Index:                     0, 2, 1, 2, 1, 0, 0\n+    values.put(\"a\", Arrays.asList(1, 3, 2, 3, 2, 1, 1));\n+    values.put(\"b\", Arrays.asList(4, 6, 5, 6, 5, 4, 4));\n+    setVector(vector, values);\n+    FieldVector encodedVector = (FieldVector) DictionaryEncoder.encode(vector, dictionary4);\n+\n+    List<Field> fields = Arrays.asList(encodedVector.getField());\n+    List<FieldVector> vectors = Collections2.asImmutableList(encodedVector);\n+    try (VectorSchemaRoot root = new VectorSchemaRoot(fields, vectors, encodedVector.getValueCount());\n+         ByteArrayOutputStream out = new ByteArrayOutputStream();\n+         ArrowFileWriter writer = new ArrowFileWriter(root, provider, newChannel(out));) {\n+\n+      writer.start();\n+      writer.writeBatch();\n+      writer.end();\n+\n+      try (SeekableReadChannel channel = new SeekableReadChannel(\n+          new ByteArrayReadableSeekableByteChannel(out.toByteArray()));\n+          ArrowFileReader reader = new ArrowFileReader(channel, allocator)) {\n+        final VectorSchemaRoot readRoot = reader.getVectorSchemaRoot();\n+        final Schema readSchema = readRoot.getSchema();\n+        assertEquals(root.getSchema(), readSchema);\n+        assertEquals(1, reader.getDictionaryBlocks().size());\n+        assertEquals(1, reader.getRecordBlocks().size());\n+\n+        reader.loadNextBatch();\n+        assertEquals(1, readRoot.getFieldVectors().size());\n+        assertEquals(1, reader.getDictionaryVectors().size());\n+        \n+        // Read the encoded vector and check it\n+        final FieldVector readEncoded = readRoot.getVector(0);\n+        assertEquals(encodedVector.getValueCount(), readEncoded.getValueCount());\n+        assertTrue(new RangeEqualsVisitor(encodedVector, readEncoded)\n+            .rangeEquals(new Range(0, 0, encodedVector.getValueCount())));\n+\n+        // Read the dictionary\n+        final Map<Long, Dictionary> readDictionaryMap = reader.getDictionaryVectors();\n+        final Dictionary readDictionary =\n+            readDictionaryMap.get(readEncoded.getField().getDictionary().getId());\n+        assertNotNull(readDictionary);\n+\n+        // Assert the dictionary vector is correct\n+        final FieldVector readDictionaryVector = readDictionary.getVector();\n+        assertEquals(dictionaryVector4.getValueCount(), readDictionaryVector.getValueCount());\n+        final BiFunction<ValueVector, ValueVector, Boolean> typeComparatorIgnoreName =\n+            (v1, v2) -> new TypeEqualsVisitor(v1, false, true).equals(v2);\n+        assertTrue(\"Dictionary vectors are not equal\",\n+            new RangeEqualsVisitor(dictionaryVector4, readDictionaryVector,\n+                typeComparatorIgnoreName)\n+                    .rangeEquals(new Range(0, 0, dictionaryVector4.getValueCount())));\n+\n+        // Assert the decoded vector is correct\n+        final ValueVector readVector = DictionaryEncoder.decode(readEncoded, readDictionary);\n+        assertEquals(vector.getValueCount(), readVector.getValueCount());\n+        assertTrue(\"Decoded vectors are not equal\",\n+            new RangeEqualsVisitor(vector, readVector, typeComparatorIgnoreName)\n+                .rangeEquals(new Range(0, 0, vector.getValueCount())));\n+\n+        vector.close();\n+        readVector.close();\n\nReview comment:\n       Yes, I changed it. I did not do it before because I did not want the deep nesting.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-12T08:54:23.209+0000",
                    "updated": "2020-10-12T08:54:23.209+0000",
                    "started": "2020-10-12T08:54:23.209+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "499272",
                    "issueId": "13333723"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13333723/worklog/499304",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on a change in pull request #8363:\nURL: https://github.com/apache/arrow/pull/8363#discussion_r503176421\n\n\n\n##########\nFile path: java/vector/src/test/java/org/apache/arrow/vector/ipc/TestArrowReaderWriter.java\n##########\n@@ -305,6 +325,77 @@ public void testWriteReadWithDictionaries() throws IOException {\n     }\n   }\n \n+  @Test\n+  public void testWriteReadWithStructDictionaries() throws IOException {\n+    DictionaryProvider.MapDictionaryProvider provider = new DictionaryProvider.MapDictionaryProvider();\n+    provider.put(dictionary4);\n+\n+    final StructVector vector = newVector(StructVector.class, \"D4\", MinorType.STRUCT, allocator);\n+    final Map<String, List<Integer>> values = new HashMap<>();\n+    // Index:                     0, 2, 1, 2, 1, 0, 0\n+    values.put(\"a\", Arrays.asList(1, 3, 2, 3, 2, 1, 1));\n+    values.put(\"b\", Arrays.asList(4, 6, 5, 6, 5, 4, 4));\n+    setVector(vector, values);\n+    FieldVector encodedVector = (FieldVector) DictionaryEncoder.encode(vector, dictionary4);\n+\n+    List<Field> fields = Arrays.asList(encodedVector.getField());\n+    List<FieldVector> vectors = Collections2.asImmutableList(encodedVector);\n+    try (VectorSchemaRoot root = new VectorSchemaRoot(fields, vectors, encodedVector.getValueCount());\n+         ByteArrayOutputStream out = new ByteArrayOutputStream();\n+         ArrowFileWriter writer = new ArrowFileWriter(root, provider, newChannel(out));) {\n+\n+      writer.start();\n+      writer.writeBatch();\n+      writer.end();\n+\n+      try (SeekableReadChannel channel = new SeekableReadChannel(\n+          new ByteArrayReadableSeekableByteChannel(out.toByteArray()));\n+          ArrowFileReader reader = new ArrowFileReader(channel, allocator)) {\n+        final VectorSchemaRoot readRoot = reader.getVectorSchemaRoot();\n+        final Schema readSchema = readRoot.getSchema();\n+        assertEquals(root.getSchema(), readSchema);\n+        assertEquals(1, reader.getDictionaryBlocks().size());\n+        assertEquals(1, reader.getRecordBlocks().size());\n+\n+        reader.loadNextBatch();\n+        assertEquals(1, readRoot.getFieldVectors().size());\n+        assertEquals(1, reader.getDictionaryVectors().size());\n+        \n+        // Read the encoded vector and check it\n+        final FieldVector readEncoded = readRoot.getVector(0);\n+        assertEquals(encodedVector.getValueCount(), readEncoded.getValueCount());\n+        assertTrue(new RangeEqualsVisitor(encodedVector, readEncoded)\n+            .rangeEquals(new Range(0, 0, encodedVector.getValueCount())));\n+\n+        // Read the dictionary\n+        final Map<Long, Dictionary> readDictionaryMap = reader.getDictionaryVectors();\n+        final Dictionary readDictionary =\n+            readDictionaryMap.get(readEncoded.getField().getDictionary().getId());\n+        assertNotNull(readDictionary);\n+\n+        // Assert the dictionary vector is correct\n+        final FieldVector readDictionaryVector = readDictionary.getVector();\n+        assertEquals(dictionaryVector4.getValueCount(), readDictionaryVector.getValueCount());\n+        final BiFunction<ValueVector, ValueVector, Boolean> typeComparatorIgnoreName =\n+            (v1, v2) -> new TypeEqualsVisitor(v1, false, true).equals(v2);\n+        assertTrue(\"Dictionary vectors are not equal\",\n+            new RangeEqualsVisitor(dictionaryVector4, readDictionaryVector,\n+                typeComparatorIgnoreName)\n+                    .rangeEquals(new Range(0, 0, dictionaryVector4.getValueCount())));\n+\n+        // Assert the decoded vector is correct\n+        final ValueVector readVector = DictionaryEncoder.decode(readEncoded, readDictionary);\n+        assertEquals(vector.getValueCount(), readVector.getValueCount());\n+        assertTrue(\"Decoded vectors are not equal\",\n+            new RangeEqualsVisitor(vector, readVector, typeComparatorIgnoreName)\n+                .rangeEquals(new Range(0, 0, vector.getValueCount())));\n+\n+        vector.close();\n+        readVector.close();\n\nReview comment:\n       I see. Deep nesting is not good-looking. \n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-12T09:50:46.586+0000",
                    "updated": "2020-10-12T09:50:46.586+0000",
                    "started": "2020-10-12T09:50:46.586+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "499304",
                    "issueId": "13333723"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
            "id": "1",
            "description": "A problem which impairs or prevents the functions of the product.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
            "name": "Bug",
            "subtask": false,
            "avatarId": 21133
        },
        "timespent": 14400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@594a378a[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4829195b[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@78cb4ea7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@78a86324[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@791d61a8[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@277c6076[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5e0bc48[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@3eea5e93[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2c6868c7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@6853d2ec[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@68d13152[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@4a3e41d[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 14400,
        "customfield_12312520": null,
        "customfield_12312521": "Fri Oct 16 02:24:34 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-10-16T02:24:34.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10174/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2020-10-05T13:16:22.000+0000",
        "updated": "2021-01-16T21:38:31.000+0000",
        "timeoriginalestimate": null,
        "description": "Write an index vector and a dictionary with a dictionary vector of the type {{Struct}} using an {{ArrowStreamWriter}}. Reading this again fails with an exception.\r\n\r\nCode to reproduce:\r\n\r\n{code:java}\r\nfinal RootAllocator allocator = new RootAllocator();\r\n\r\n// Create the dictionary\r\nfinal StructVector dict = StructVector.empty(\"Dict\", allocator);\r\nfinal NullableStructWriter dictWriter = dict.getWriter();\r\nfinal IntWriter dictA = dictWriter.integer(\"a\");\r\nfinal IntWriter dictB = dictWriter.integer(\"b\");\r\nfor (int i = 0; i < 3; i++) {\r\n\tdictWriter.start();\r\n\tdictA.writeInt(i);\r\n\tdictB.writeInt(i);\r\n\tdictWriter.end();\r\n}\r\ndict.setValueCount(3);\r\nfinal Dictionary dictionary = new Dictionary(dict, new DictionaryEncoding(1, false, null));\r\n\r\n// Create the vector\r\nfinal Random random = new Random();\r\nfinal StructVector vector = StructVector.empty(\"Dict\", allocator);\r\nfinal NullableStructWriter vectorWriter = vector.getWriter();\r\nfinal IntWriter vectorA = vectorWriter.integer(\"a\");\r\nfinal IntWriter vectorB = vectorWriter.integer(\"b\");\r\nfor (int i = 0; i < 10; i++) {\r\n\tint v = random.nextInt(3);\r\n\tvectorWriter.start();\r\n\tvectorA.writeInt(v);\r\n\tvectorB.writeInt(v);\r\n\tvectorWriter.end();\r\n}\r\nvector.setValueCount(10);\r\n\r\n// Encode the vector using the dictionary\r\nfinal IntVector indexVector = (IntVector) DictionaryEncoder.encode(vector, dictionary);\r\n\r\n// Write the vector to out\r\nfinal ByteArrayOutputStream out = new ByteArrayOutputStream();\r\nfinal VectorSchemaRoot root = new VectorSchemaRoot(Collections.singletonList(indexVector.getField()),\r\n\t\tCollections.singletonList(indexVector));\r\nfinal ArrowStreamWriter writer = new ArrowStreamWriter(root, new MapDictionaryProvider(dictionary),\r\n\t\tChannels.newChannel(out));\r\nwriter.start();\r\nwriter.writeBatch();\r\nwriter.end();\r\n\r\n// Read the vector from out\r\ntry (final ArrowStreamReader reader = new ArrowStreamReader(new ByteArrayInputStream(out.toByteArray()),\r\n\t\tallocator)) {\r\n\treader.loadNextBatch();\r\n\tfinal VectorSchemaRoot readRoot = reader.getVectorSchemaRoot();\r\n\tfinal FieldVector readIndexVector = readRoot.getVector(0);\r\n\r\n\t// Get the dictionary and decode\r\n\tfinal Map<Long, Dictionary> readDictionaryMap = reader.getDictionaryVectors();\r\n\tfinal Dictionary readDictionary = readDictionaryMap.get(readIndexVector.getField().getDictionary().getId());\r\n\tfinal ValueVector readVector = DictionaryEncoder.decode(readIndexVector, readDictionary);\r\n}\r\n{code}\r\n\r\nException:\r\n{code}\r\njava.lang.IllegalArgumentException: not all nodes and buffers were consumed. nodes: [ArrowFieldNode [length=3, nullCount=0], ArrowFieldNode [length=3, nullCount=0]] buffers: [ArrowBuf[21], address:140118352739688, length:1, ArrowBuf[22], address:140118352739696, length:12, ArrowBuf[23], address:140118352739712, length:1, ArrowBuf[24], address:140118352739720, length:12]\r\n\tat org.apache.arrow.vector.VectorLoader.load(VectorLoader.java:63)\r\n\tat org.apache.arrow.vector.ipc.ArrowReader.load(ArrowReader.java:241)\r\n\tat org.apache.arrow.vector.ipc.ArrowReader.loadDictionary(ArrowReader.java:232)\r\n\tat org.apache.arrow.vector.ipc.ArrowStreamReader.loadNextBatch(ArrowStreamReader.java:129)\r\n\tat com.knime.AppTest.testDictionaryStruct(AppTest.java:83)\r\n{code}\r\n\r\nIf I see it corretly the error happens in {{DictionaryUtilities#toMessageFormat}}. If a dictionary encoded vector is encountered still the children of the memory format field are used (none because this is Int). However, the children of the field of the dictionary vector should be mapped to the message format and set as children.\r\n\r\nI can create a fix and open a pull request.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "4h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 14400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Java] Reading of Dictionary encoded struct vector fails ",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13333723/comment/17215121",
                    "id": "17215121",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=fan_li_ya",
                        "name": "fan_li_ya",
                        "key": "fan_li_ya",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Liya Fan",
                        "active": true,
                        "timeZone": "Asia/Shanghai"
                    },
                    "body": "Issue resolved by pull request 8363\n[https://github.com/apache/arrow/pull/8363]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=fan_li_ya",
                        "name": "fan_li_ya",
                        "key": "fan_li_ya",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Liya Fan",
                        "active": true,
                        "timeZone": "Asia/Shanghai"
                    },
                    "created": "2020-10-16T02:24:34.822+0000",
                    "updated": "2020-10-16T02:24:34.822+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0jf60:",
        "customfield_12314139": null
    }
}