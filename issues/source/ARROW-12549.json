{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13375140",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13375140",
    "key": "ARROW-12549",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12350591",
                "id": "12350591",
                "description": "",
                "name": "7.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-02-03"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/2",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/critical.svg",
            "name": "Critical",
            "id": "2"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=paul.e.taylor",
            "name": "paul.e.taylor",
            "key": "paul.e.taylor",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Paul Taylor",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
            "name": "Closed",
            "id": "6",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12332552",
                "id": "12332552",
                "name": "JavaScript"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=domoritz",
            "name": "domoritz",
            "key": "domoritz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=domoritz&avatarId=46688",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=domoritz&avatarId=46688",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=domoritz&avatarId=46688",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=domoritz&avatarId=46688"
            },
            "displayName": "Dominik Moritz",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=domoritz",
            "name": "domoritz",
            "key": "domoritz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=domoritz&avatarId=46688",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=domoritz&avatarId=46688",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=domoritz&avatarId=46688",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=domoritz&avatarId=46688"
            },
            "displayName": "Dominik Moritz",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "aggregateprogress": {
            "progress": 17400,
            "total": 17400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 17400,
            "total": 17400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-12549/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 29,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13375140/worklog/600123",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "trxcllnt opened a new pull request #10371:\nURL: https://github.com/apache/arrow/pull/10371\n\n\n   This is going to be a big refactor, so opening this as a draft PR to track progress.\r\n   \r\n   This PR's goals are:\r\n   1. Eliminate cruft by dropping support for outdated browsers/environments.\r\n   2. Reduce total surface area by eliminating unnecessary `Vector`, `Chunked`, and `Column` classes.\r\n   3. Reduce the amount of the library pulled in when Table, RecordBatch, or Vector classes are imported.\r\n   \r\n   Also addresses:\r\n   * [ARROW-10255](https://issues.apache.org/jira/browse/ARROW-10255)\r\n   * [ARROW-11347](https://issues.apache.org/jira/browse/ARROW-11347)\r\n   * [ARROW-12548](https://issues.apache.org/jira/browse/ARROW-12548)\r\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-21T00:50:52.292+0000",
                    "updated": "2021-05-21T00:50:52.292+0000",
                    "started": "2021-05-21T00:50:52.292+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "600123",
                    "issueId": "13375140"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13375140/worklog/600132",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "domoritz commented on a change in pull request #10371:\nURL: https://github.com/apache/arrow/pull/10371#discussion_r636570839\n\n\n\n##########\nFile path: js/src/row/map.ts\n##########\n@@ -0,0 +1,134 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import { Data } from '../data';\n+import { DataType, Struct } from '../type';\n+import { valueToString } from '../util/pretty';\n+import { instance as getVisitor } from '../visitor/get';\n+import { instance as setVisitor } from '../visitor/set';\n+import { instance as indexOfVisitor } from '../visitor/indexof';\n+import { instance as iteratorVisitor } from '../visitor/iterator';\n+\n+/** @ignore */ const kKeys = Symbol.for('keys');\n+/** @ignore */ const kVals = Symbol.for('vals');\n+\n+export class MapRow<K extends DataType = any, V extends DataType = any> {\n+    private [kKeys]: Data<K>;\n+    private [kVals]: Data<V>;\n+    constructor(slice: Data<Struct<{ key: K; value: V }>>) {\n+        this[kKeys] = slice.children[0] as Data<K>;\n+        this[kVals] = slice.children[1] as Data<V>;\n+    }\n+    [Symbol.iterator]() {\n+        return new MapRowIterator(this[kKeys], this[kVals]);\n+    }\n+    public toArray() { return Object.values(this.toJSON()); }\n\nReview comment:\n       Wouldn't it be more efficient not to go through `toJSON` here?\n\n##########\nFile path: js/src/schema.ts\n##########\n@@ -23,7 +23,7 @@ export class Schema<T extends { [key: string]: DataType } = any> {\n     public readonly metadata: Map<string, string>;\n     public readonly dictionaries: Map<number, DataType>;\n \n-    constructor(fields: Field[] = [],\n+    constructor(fields: Field<T[keyof T]>[] = [],\n\nReview comment:\n       \ud83d\udc4d\n\n##########\nFile path: js/src/table.ts\n##########\n@@ -16,280 +16,226 @@\n // under the License.\n \n import { Data } from './data';\n-import { Column } from './column';\n-import { Schema, Field } from './schema';\n+import { Type } from './enum';\n+import { Vector } from './vector';\n+import { Schema } from './schema';\n+import { DataType, Struct } from './type';\n+import { compareSchemas } from './visitor/typecomparator';\n+\n+import {\n+    ChunkedIterator,\n+    isChunkedValid,\n+    computeChunkOffsets,\n+    computeChunkNullCounts,\n+    wrapChunkedGet,\n+    wrapChunkedCall1,\n+    wrapChunkedCall2,\n+    wrapChunkedSet,\n+    wrapChunkedIndexOf,\n+} from './util/chunk';\n+\n+import { IndexingProxyHandlerMixin } from './util/proxy';\n+\n+import { instance as getVisitor } from './visitor/get';\n+import { instance as setVisitor } from './visitor/set';\n+import { instance as indexOfVisitor } from './visitor/indexof';\n+import { instance as toArrayVisitor } from './visitor/toarray';\n+import { instance as byteLengthVisitor } from './visitor/bytelength';\n+\n import { RecordBatch, _InternalEmptyPlaceholderRecordBatch } from './recordbatch';\n-import { DataFrame } from './compute/dataframe';\n-import { RecordBatchReader } from './ipc/reader';\n-import { DataType, RowLike, Struct } from './type';\n-import { selectColumnArgs, selectArgs } from './util/args';\n-import { Clonable, Sliceable, Applicative } from './vector';\n-import { isPromise, isIterable, isAsyncIterable } from './util/compat';\n-import { RecordBatchFileWriter, RecordBatchStreamWriter } from './ipc/writer';\n-import { distributeColumnsIntoRecordBatches, distributeVectorsIntoRecordBatches } from './util/recordbatch';\n-import { Vector, Chunked, StructVector, VectorBuilderOptions, VectorBuilderOptionsAsync } from './vector/index';\n-import { TypedArray, TypedArrayDataType } from './interfaces';\n-\n-type VectorMap = { [key: string]: Vector | Exclude<TypedArray, Uint8ClampedArray> };\n-type Fields<T extends { [key: string]: DataType }> = (keyof T)[] | Field<T[keyof T]>[];\n-type ChildData<T extends { [key: string]: DataType }> = Data<T[keyof T]>[] | Vector<T[keyof T]>[];\n-type Columns<T extends { [key: string]: DataType }> = Column<T[keyof T]>[] | Column<T[keyof T]>[][];\n \n+/** @ignore */\n export interface Table<T extends { [key: string]: DataType } = any> {\n\nReview comment:\n       Do we want to support `table.map(...)`?\n\n##########\nFile path: js/src/vector.ts\n##########\n@@ -16,58 +16,253 @@\n // under the License.\n \n import { Data } from './data';\n-import { DataType } from './type';\n-import { Chunked } from './vector/chunked';\n+import { Type } from './enum';\n+import { DataType, strideForType } from './type';\n \n-/** @ignore */\n-export interface Clonable<R extends AbstractVector> {\n-    clone(...args: any[]): R;\n-}\n-\n-/** @ignore */\n-export interface Sliceable<R extends AbstractVector> {\n-    slice(begin?: number, end?: number): R;\n-}\n+import {\n+    ChunkedIterator,\n+    isChunkedValid,\n+    computeChunkOffsets,\n+    computeChunkNullCounts,\n+    wrapChunkedGet,\n+    wrapChunkedCall1,\n+    wrapChunkedCall2,\n+    wrapChunkedSet,\n+    wrapChunkedIndexOf,\n+} from './util/chunk';\n \n-/** @ignore */\n-export interface Applicative<T extends DataType, R extends Chunked> {\n-    concat(...others: Vector<T>[]): R;\n-    readonly [Symbol.isConcatSpreadable]: boolean;\n-}\n+import { IndexingProxyHandlerMixin } from './util/proxy';\n \n-export interface AbstractVector<T extends DataType = any>\n-    extends Clonable<AbstractVector<T>>,\n-            Sliceable<AbstractVector<T>>,\n-            Applicative<T, Chunked<T>> {\n+import { instance as getVisitor } from './visitor/get';\n+import { instance as setVisitor } from './visitor/set';\n+import { instance as indexOfVisitor } from './visitor/indexof';\n+import { instance as toArrayVisitor } from './visitor/toarray';\n+import { instance as byteLengthVisitor } from './visitor/bytelength';\n \n+export interface Vector<T extends DataType = any> {\n+    ///\n+    // Virtual properties for the TypeScript compiler.\n+    // These do not exist at runtime.\n+    ///\n     readonly TType: T['TType'];\n     readonly TArray: T['TArray'];\n     readonly TValue: T['TValue'];\n+\n+    /**\n+     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/isConcatSpreadable\n+     */\n+    [Symbol.isConcatSpreadable]: true;\n\nReview comment:\n       \u2764\ufe0f\n\n##########\nFile path: js/src/util/recordbatch.ts\n##########\n@@ -96,26 +70,26 @@ function uniformlyDistributeChunksAcrossRecordBatches<T extends { [key: string]:\n }\n \n /** @ignore */\n-function distributeChildData<T extends { [key: string]: DataType } = any>(fields: Field<T[keyof T]>[], batchLength: number, childData: Data<T[keyof T]>[], columns: Data<T[keyof T]>[][], memo: { numBatches: number }) {\n+function distributechildren<T extends { [key: string]: DataType } = any>(fields: Field<T[keyof T]>[], batchLength: number, children: Data<T[keyof T]>[], columns: Data<T[keyof T]>[][], memo: { numBatches: number }) {\n\nReview comment:\n       ```suggestion\r\n   function distributeChildren<T extends { [key: string]: DataType } = any>(fields: Field<T[keyof T]>[], batchLength: number, children: Data<T[keyof T]>[], columns: Data<T[keyof T]>[][], memo: { numBatches: number }) {\r\n   ```\n\n##########\nFile path: js/src/table.ts\n##########\n@@ -16,280 +16,226 @@\n // under the License.\n \n import { Data } from './data';\n-import { Column } from './column';\n-import { Schema, Field } from './schema';\n+import { Type } from './enum';\n+import { Vector } from './vector';\n+import { Schema } from './schema';\n+import { DataType, Struct } from './type';\n+import { compareSchemas } from './visitor/typecomparator';\n+\n+import {\n+    ChunkedIterator,\n+    isChunkedValid,\n+    computeChunkOffsets,\n+    computeChunkNullCounts,\n+    wrapChunkedGet,\n+    wrapChunkedCall1,\n+    wrapChunkedCall2,\n+    wrapChunkedSet,\n+    wrapChunkedIndexOf,\n+} from './util/chunk';\n+\n+import { IndexingProxyHandlerMixin } from './util/proxy';\n+\n+import { instance as getVisitor } from './visitor/get';\n+import { instance as setVisitor } from './visitor/set';\n+import { instance as indexOfVisitor } from './visitor/indexof';\n+import { instance as toArrayVisitor } from './visitor/toarray';\n+import { instance as byteLengthVisitor } from './visitor/bytelength';\n+\n import { RecordBatch, _InternalEmptyPlaceholderRecordBatch } from './recordbatch';\n-import { DataFrame } from './compute/dataframe';\n-import { RecordBatchReader } from './ipc/reader';\n-import { DataType, RowLike, Struct } from './type';\n-import { selectColumnArgs, selectArgs } from './util/args';\n-import { Clonable, Sliceable, Applicative } from './vector';\n-import { isPromise, isIterable, isAsyncIterable } from './util/compat';\n-import { RecordBatchFileWriter, RecordBatchStreamWriter } from './ipc/writer';\n-import { distributeColumnsIntoRecordBatches, distributeVectorsIntoRecordBatches } from './util/recordbatch';\n-import { Vector, Chunked, StructVector, VectorBuilderOptions, VectorBuilderOptionsAsync } from './vector/index';\n-import { TypedArray, TypedArrayDataType } from './interfaces';\n-\n-type VectorMap = { [key: string]: Vector | Exclude<TypedArray, Uint8ClampedArray> };\n-type Fields<T extends { [key: string]: DataType }> = (keyof T)[] | Field<T[keyof T]>[];\n-type ChildData<T extends { [key: string]: DataType }> = Data<T[keyof T]>[] | Vector<T[keyof T]>[];\n-type Columns<T extends { [key: string]: DataType }> = Column<T[keyof T]>[] | Column<T[keyof T]>[][];\n \n+/** @ignore */\n export interface Table<T extends { [key: string]: DataType } = any> {\n+    ///\n+    // Virtual properties for the TypeScript compiler.\n+    // These do not exist at runtime.\n+    ///\n+    readonly TType: Struct<T>;\n+    readonly TArray: Struct<T>['TArray'];\n+    readonly TValue: Struct<T>['TValue'];\n \n-    get(index: number): Struct<T>['TValue'];\n-    [Symbol.iterator](): IterableIterator<RowLike<T>>;\n+    /**\n+     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/isConcatSpreadable\n+     */\n+    [Symbol.isConcatSpreadable]: true;\n+}\n \n-    slice(begin?: number, end?: number): Table<T>;\n-    concat(...others: Vector<Struct<T>>[]): Table<T>;\n-    clone(chunks?: RecordBatch<T>[], offsets?: Uint32Array): Table<T>;\n+export class Table<T extends { [key: string]: DataType } = any> {\n \n-    scan(next: import('./compute/dataframe').NextFunc, bind?: import('./compute/dataframe').BindFunc): void;\n\nReview comment:\n       We should merge https://github.com/apache/arrow/pull/10277 soon so this code is gone\n\n##########\nFile path: js/src/util/chunk.ts\n##########\n@@ -0,0 +1,162 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import { Data } from '../data';\n+import { DataType } from '../type';\n+import { instance as iteratorVisitor } from '../visitor/iterator';\n+\n+/** @ignore */\n+export class ChunkedIterator<T extends DataType> implements IterableIterator<T['TValue'] | null> {\n+    private chunkIndex = 0;\n+    private chunkIterator: IterableIterator<T['TValue'] | null>;\n+\n+    constructor(\n+        private chunks: ReadonlyArray<Data<T>>,\n+    ) {\n+        this.chunkIterator = this.getChunkIterator();\n+    }\n+\n+    next(): IteratorResult<T['TValue'] | null> {\n+        while (this.chunkIndex < this.chunks.length) {\n+            const next = this.chunkIterator.next();\n+\n+            if (!next.done) {\n+                return next;\n+            }\n+\n+            if (++this.chunkIndex < this.chunks.length) {\n+                this.chunkIterator = this.getChunkIterator();\n+            }\n+        }\n+\n+        return {done: true, value: null};\n+    }\n+\n+    getChunkIterator() {\n+        return iteratorVisitor.visit(this.chunks[this.chunkIndex]);\n+    }\n+\n+    [Symbol.iterator]() {\n+        return this;\n+    }\n+}\n+\n+/** @ignore */\n+export function computeChunkNullCounts<T extends DataType>(chunks: ReadonlyArray<Data<T>>) {\n+    return chunks.reduce((nullCount, chunk) => {\n+        return nullCount + chunk.nullCount;\n+    }, 0);\n+}\n+\n+/** @ignore */\n+export function computeChunkOffsets<T extends DataType>(chunks: ReadonlyArray<Data<T>>) {\n+    return chunks.reduce((offsets, chunk, index) => {\n+        offsets[index + 1] = offsets[index] + chunk.length;\n+        return offsets;\n+    }, new Uint32Array(chunks.length + 1));\n+}\n+\n+/** @ignore */\n+export function binarySearch<\n+    T extends DataType,\n+    F extends (chunks: ReadonlyArray<Data<T>>, _1: number, _2: number) => any\n+>(chunks: ReadonlyArray<Data<T>>, offsets: Uint32Array, idx: number, fn: F) {\n+    let lhs = 0, mid = 0, rhs = offsets.length - 1;\n+    do {\n+        if (lhs >= rhs - 1) {\n+            return (idx < offsets[rhs]) ? fn(chunks, lhs, idx - offsets[lhs]) : null;\n+        }\n+        mid = lhs + (((rhs - lhs) * .5) | 0);\n+        idx < offsets[mid] ? (rhs = mid) : (lhs = mid);\n+    } while (lhs < rhs);\n+}\n+\n+/** @ignore */\n+export function isChunkedValid<T extends DataType>(data: Data<T>, index: number): boolean {\n+    return data.getValid(index);\n+}\n+\n+/** @ignore */\n+export function wrapChunkedGet<T extends DataType>(fn: (data: Data<T>, _1: any) => any) {\n+    return (data: Data<T>, _1: any) => data.getValid(_1) ? fn(data, _1) : null;\n+}\n+\n+/** @ignore */\n+export function wrapChunkedSet<T extends DataType>(fn: (data: Data<T>, _1: any, _2: any) => void) {\n+    return (data: Data<T>, _1: any, _2: any) => {\n+        if (data.setValid(_1, !(_2 === null || _2 === undefined))) {\n+            return fn(data, _1, _2);\n+        }\n+    };\n+}\n+\n+/** @ignore */\n+export function wrapChunkedCall1<T extends DataType>(fn: (c: Data<T>, _1: number) => any) {\n\nReview comment:\n       What is 1 vs 2? Add a comment. \n\n##########\nFile path: js/src/table.ts\n##########\n@@ -16,280 +16,226 @@\n // under the License.\n \n import { Data } from './data';\n-import { Column } from './column';\n-import { Schema, Field } from './schema';\n+import { Type } from './enum';\n+import { Vector } from './vector';\n+import { Schema } from './schema';\n+import { DataType, Struct } from './type';\n+import { compareSchemas } from './visitor/typecomparator';\n+\n+import {\n+    ChunkedIterator,\n+    isChunkedValid,\n+    computeChunkOffsets,\n+    computeChunkNullCounts,\n+    wrapChunkedGet,\n+    wrapChunkedCall1,\n+    wrapChunkedCall2,\n+    wrapChunkedSet,\n+    wrapChunkedIndexOf,\n+} from './util/chunk';\n+\n+import { IndexingProxyHandlerMixin } from './util/proxy';\n+\n+import { instance as getVisitor } from './visitor/get';\n+import { instance as setVisitor } from './visitor/set';\n+import { instance as indexOfVisitor } from './visitor/indexof';\n+import { instance as toArrayVisitor } from './visitor/toarray';\n+import { instance as byteLengthVisitor } from './visitor/bytelength';\n+\n import { RecordBatch, _InternalEmptyPlaceholderRecordBatch } from './recordbatch';\n-import { DataFrame } from './compute/dataframe';\n-import { RecordBatchReader } from './ipc/reader';\n-import { DataType, RowLike, Struct } from './type';\n-import { selectColumnArgs, selectArgs } from './util/args';\n-import { Clonable, Sliceable, Applicative } from './vector';\n-import { isPromise, isIterable, isAsyncIterable } from './util/compat';\n-import { RecordBatchFileWriter, RecordBatchStreamWriter } from './ipc/writer';\n-import { distributeColumnsIntoRecordBatches, distributeVectorsIntoRecordBatches } from './util/recordbatch';\n-import { Vector, Chunked, StructVector, VectorBuilderOptions, VectorBuilderOptionsAsync } from './vector/index';\n-import { TypedArray, TypedArrayDataType } from './interfaces';\n-\n-type VectorMap = { [key: string]: Vector | Exclude<TypedArray, Uint8ClampedArray> };\n-type Fields<T extends { [key: string]: DataType }> = (keyof T)[] | Field<T[keyof T]>[];\n-type ChildData<T extends { [key: string]: DataType }> = Data<T[keyof T]>[] | Vector<T[keyof T]>[];\n-type Columns<T extends { [key: string]: DataType }> = Column<T[keyof T]>[] | Column<T[keyof T]>[][];\n \n+/** @ignore */\n export interface Table<T extends { [key: string]: DataType } = any> {\n+    ///\n+    // Virtual properties for the TypeScript compiler.\n+    // These do not exist at runtime.\n+    ///\n+    readonly TType: Struct<T>;\n+    readonly TArray: Struct<T>['TArray'];\n+    readonly TValue: Struct<T>['TValue'];\n \n-    get(index: number): Struct<T>['TValue'];\n-    [Symbol.iterator](): IterableIterator<RowLike<T>>;\n+    /**\n+     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/isConcatSpreadable\n+     */\n+    [Symbol.isConcatSpreadable]: true;\n+}\n \n-    slice(begin?: number, end?: number): Table<T>;\n-    concat(...others: Vector<Struct<T>>[]): Table<T>;\n-    clone(chunks?: RecordBatch<T>[], offsets?: Uint32Array): Table<T>;\n+export class Table<T extends { [key: string]: DataType } = any> {\n \n-    scan(next: import('./compute/dataframe').NextFunc, bind?: import('./compute/dataframe').BindFunc): void;\n-    scanReverse(next: import('./compute/dataframe').NextFunc, bind?: import('./compute/dataframe').BindFunc): void;\n-    countBy(name: import('./compute/predicate').Col | string): import('./compute/dataframe').CountByResult;\n-    filter(predicate: import('./compute/predicate').Predicate): import('./compute/dataframe').FilteredDataFrame<T>;\n-}\n+    constructor(columns: { [P in keyof T]: Vector<T[P]> });\n+    constructor(schema: Schema<T>, data?: RecordBatch<T> | RecordBatch<T>[]);\n+    constructor(schema: Schema<T>, data?: RecordBatch<T> | RecordBatch<T>[], offsets?: Uint32Array);\n+    constructor(...args: any[]) {\n \n-export class Table<T extends { [key: string]: DataType } = any>\n-    extends Chunked<Struct<T>>\n-    implements DataFrame<T>,\n-               Clonable<Table<T>>,\n-               Sliceable<Table<T>>,\n-               Applicative<Struct<T>, Table<T>> {\n-\n-    /** @nocollapse */\n-    public static empty<T extends { [key: string]: DataType } = Record<string, never>>(schema = new Schema<T>([])) { return new Table<T>(schema, []); }\n-\n-    public static from(): Table<Record<string, never>>;\n-    public static from<T extends { [key: string]: DataType } = any>(source: RecordBatchReader<T>): Table<T>;\n-    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg0): Table<T>;\n-    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg2): Table<T>;\n-    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg1): Promise<Table<T>>;\n-    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg3): Promise<Table<T>>;\n-    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg4): Promise<Table<T>>;\n-    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg5): Promise<Table<T>>;\n-    public static from<T extends { [key: string]: DataType } = any>(source: PromiseLike<RecordBatchReader<T>>): Promise<Table<T>>;\n-    public static from<T extends { [key: string]: DataType } = any, TNull = any>(options: VectorBuilderOptions<Struct<T>, TNull>): Table<T>;\n-    public static from<T extends { [key: string]: DataType } = any, TNull = any>(options: VectorBuilderOptionsAsync<Struct<T>, TNull>): Promise<Table<T>>;\n-    /** @nocollapse */\n-    public static from<T extends { [key: string]: DataType } = any, TNull = any>(input?: any) {\n-\n-        if (!input) { return Table.empty(); }\n-\n-        if (typeof input === 'object') {\n-            const table = isIterable(input['values']) ? tableFromIterable<T, TNull>(input)\n-                 : isAsyncIterable(input['values']) ? tableFromAsyncIterable<T, TNull>(input)\n-                                                    : null;\n-            if (table !== null) { return table; }\n+        if (args.length === 0) {\n+            args = [new Schema([])];\n         }\n \n-        let reader = RecordBatchReader.from<T>(input) as RecordBatchReader<T> | Promise<RecordBatchReader<T>>;\n-\n-        if (isPromise<RecordBatchReader<T>>(reader)) {\n-            return (async () => await Table.from(await reader))();\n+        if (args.length === 1 && !(args[0] instanceof Schema)) {\n+            const [obj] = args as [{ [P in keyof T]: Vector<T[P]> }];\n+            const batches = Object.keys(obj).reduce((batches, name: keyof T) => {\n+                obj[name].data.forEach((data, row) => {\n+                    (batches[row] || (\n+                        batches[row] = {} as { [P in keyof T]: Data<T[P]> })\n+                    )[name] = data;\n+                });\n+                return batches;\n+            }, new Array<{ [P in keyof T]: Data<T[P]> }>())\n+            .map((data) => new RecordBatch<T>(data));\n+\n+            args = [batches[0].schema, batches];\n         }\n-        if (reader.isSync() && (reader = reader.open())) {\n-            return !reader.schema ? Table.empty() : new Table<T>(reader.schema, [...reader]);\n+\n+        let [schema, data, offsets] = args;\n+\n+        if (!(schema instanceof Schema)) {\n+            throw new TypeError('Table constructor expects a [Schema, RecordBatch[]] pair.');\n         }\n-        return (async (opening) => {\n-            const reader = await opening;\n-            const schema = reader.schema;\n-            const batches: RecordBatch[] = [];\n-            if (schema) {\n-                for await (const batch of reader) {\n-                    batches.push(batch);\n-                }\n-                return new Table<T>(schema, batches);\n+\n+        this.schema = schema;\n+\n+        [, data = [new _InternalEmptyPlaceholderRecordBatch(schema)]] = args;\n+\n+        const batches: RecordBatch<T>[] = Array.isArray(data) ? data : [data];\n+\n+        batches.forEach((batch: RecordBatch<T>) => {\n+            if (!(batch instanceof RecordBatch)) {\n+                throw new TypeError('Table constructor expects a [Schema, RecordBatch[]] pair.');\n             }\n-            return Table.empty();\n-        })(reader.open());\n-    }\n+            if (!compareSchemas(this.schema, batch.schema)) {\n+                throw new TypeError('Table and all RecordBatch schemas must be equivalent.');\n+            }\n+        }, new Struct(schema.fields));\n \n-    /** @nocollapse */\n-    public static async fromAsync<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArgs): Promise<Table<T>> {\n-        return await Table.from<T>(source as any);\n+        this.data = batches.map(({ data }) => data);\n+        this._offsets = offsets ?? computeChunkOffsets(this.data);\n     }\n \n-    /** @nocollapse */\n-    public static fromStruct<T extends { [key: string]: DataType } = any>(vector: Vector<Struct<T>>) {\n-        return Table.new<T>(vector.data.childData as Data<T[keyof T]>[], vector.type.children);\n-    }\n+    protected _offsets!: Uint32Array;\n+    protected _nullCount!: number;\n+    protected _children?: Vector[];\n \n     /**\n-     * @summary Create a new Table from a collection of Columns or Vectors,\n-     * with an optional list of names or Fields.\n-     *\n-     *\n-     * `Table.new` accepts an Object of\n-     * Columns or Vectors, where the keys will be used as the field names\n-     * for the Schema:\n-     * ```ts\n-     * const i32s = Int32Vector.from([1, 2, 3]);\n-     * const f32s = Float32Vector.from([.1, .2, .3]);\n-     * const table = Table.new({ i32: i32s, f32: f32s });\n-     * assert(table.schema.fields[0].name === 'i32');\n-     * ```\n-     *\n-     * It also accepts a a list of Vectors with an optional list of names or\n-     * Fields for the resulting Schema. If the list is omitted or a name is\n-     * missing, the numeric index of each Vector will be used as the name:\n-     * ```ts\n-     * const i32s = Int32Vector.from([1, 2, 3]);\n-     * const f32s = Float32Vector.from([.1, .2, .3]);\n-     * const table = Table.new([i32s, f32s], ['i32']);\n-     * assert(table.schema.fields[0].name === 'i32');\n-     * assert(table.schema.fields[1].name === '1');\n-     * ```\n-     *\n-     * If the supplied arguments are Columns, `Table.new` will infer the Schema\n-     * from the Columns:\n-     * ```ts\n-     * const i32s = Column.new('i32', Int32Vector.from([1, 2, 3]));\n-     * const f32s = Column.new('f32', Float32Vector.from([.1, .2, .3]));\n-     * const table = Table.new(i32s, f32s);\n-     * assert(table.schema.fields[0].name === 'i32');\n-     * assert(table.schema.fields[1].name === 'f32');\n-     * ```\n-     *\n-     * If the supplied Vector or Column lengths are unequal, `Table.new` will\n-     * extend the lengths of the shorter Columns, allocating additional bytes\n-     * to represent the additional null slots. The memory required to allocate\n-     * these additional bitmaps can be computed as:\n-     * ```ts\n-     * let additionalBytes = 0;\n-     * for (let vec in shorter_vectors) {\n-     *     additionalBytes += (((longestLength - vec.length) + 63) & ~63) >> 3;\n-     * }\n-     * ```\n-     *\n-     * For example, an additional null bitmap for one million null values would require\n-     * 125,000 bytes (`((1e6 + 63) & ~63) >> 3`), or approx. `0.11MiB`\n+     * @summary Get and set elements by index.\n      */\n-    public static new<T extends { [key: string]: DataType } = any>(...columns: Columns<T>): Table<T>;\n-    public static new<T extends VectorMap = any>(children: T): Table<{ [P in keyof T]: T[P] extends Vector ? T[P]['type'] : T[P] extends Exclude<TypedArray, Uint8ClampedArray> ? TypedArrayDataType<T[P]> : never}>;\n-    public static new<T extends { [key: string]: DataType } = any>(children: ChildData<T>, fields?: Fields<T>): Table<T>;\n-    /** @nocollapse */\n-    public static new(...cols: any[]) {\n-        return new Table(...distributeColumnsIntoRecordBatches(selectColumnArgs(cols)));\n-    }\n+    [index: number]: Struct<T>['TValue'] | null;\n \n-    constructor(batches: RecordBatch<T>[]);\n-    constructor(...batches: RecordBatch<T>[]);\n-    constructor(schema: Schema<T>, batches: RecordBatch<T>[]);\n-    constructor(schema: Schema<T>, ...batches: RecordBatch<T>[]);\n-    constructor(...args: any[]) {\n-\n-        let schema: Schema<T> = null!;\n-\n-        if (args[0] instanceof Schema) { schema = args.shift(); }\n+    public readonly schema!: Schema<T>;\n \n-        const chunks = selectArgs<RecordBatch<T>>(RecordBatch, args);\n+    /**\n+     * @summary The contiguous {@link RecordBatch `RecordBatch`} chunks of the Table rows.\n+     */\n+    public readonly data!: ReadonlyArray<Data<Struct<T>>>;\n \n-        if (!schema && !(schema = chunks[0]?.schema)) {\n-            throw new TypeError('Table must be initialized with a Schema or at least one RecordBatch');\n+    /**\n+     * @summary The number of null rows in this RecordBatch.\n+     */\n+     public get nullCount() {\n+        if (this._nullCount === -1) {\n+            this._nullCount = computeChunkNullCounts(this.data);\n         }\n+        return this._nullCount;\n+    }\n \n-        chunks[0] || (chunks[0] = new _InternalEmptyPlaceholderRecordBatch(schema));\n+    /**\n+     * @summary Check whether an element is null.\n+     * @param index The index at which to read the validity bitmap.\n+     */\n+    // @ts-ignore\n+    public isValid(index: number): boolean { return false; }\n \n-        super(new Struct(schema.fields), chunks);\n+    /**\n+     * @summary Get an element value by position.\n+     * @param index The index of the element to read.\n+     */\n+    // @ts-ignore\n+    public get(index: number): T['TValue'] | null { return null; }\n \n-        this._schema = schema;\n-        this._chunks = chunks;\n-    }\n+    /**\n+     * @summary Set an element value by position.\n+     * @param index The index of the element to write.\n+     * @param value The value to set.\n+     */\n+    // @ts-ignore\n+    public set(index: number, value: T['TValue'] | null): void { return; }\n \n-    protected _schema: Schema<T>;\n-    // List of inner RecordBatches\n-    protected _chunks: RecordBatch<T>[];\n-    protected _children?: Column<T[keyof T]>[];\n+    /**\n+     * @summary Retrieve the index of the first occurrence of a value in an Vector.\n+     * @param element The value to locate in the Vector.\n+     * @param offset The index at which to begin the search. If offset is omitted, the search starts at index 0.\n+     */\n+    // @ts-ignore\n+    public indexOf(element: T['TValue'], offset?: number): number { return -1; }\n \n-    public get schema() { return this._schema; }\n-    public get length() { return this._length; }\n-    public get chunks() { return this._chunks; }\n-    public get numCols() { return this._numChildren; }\n+    /**\n+     * @summary Get the size in bytes of an element by index.\n+     * @param index The index at which to get the byteLength.\n+     */\n+    // @ts-ignore\n+    public getByteLength(index: number): number { return 0; }\n \n-    public clone(chunks = this._chunks) {\n-        return new Table<T>(this._schema, chunks);\n+    /**\n+     * @summary Iterator for rows in this Table.\n+     */\n+    public [Symbol.iterator]() {\n+        return new ChunkedIterator(this.data);\n     }\n \n-    public getColumn<R extends keyof T>(name: R): Column<T[R]> {\n-        return this.getColumnAt(this.getColumnIndex(name)) as Column<T[R]>;\n-    }\n-    public getColumnAt<R extends DataType = any>(index: number): Column<R> | null {\n-        return this.getChildAt(index);\n-    }\n-    public getColumnIndex<R extends keyof T>(name: R) {\n-        return this._schema.fields.findIndex((f) => f.name === name);\n-    }\n-    public getChildAt<R extends DataType = any>(index: number): Column<R> | null {\n-        if (index < 0 || index >= this.numChildren) { return null; }\n-        let field: Field<R>, child: Column<R>;\n-        const fields = (this._schema as Schema<any>).fields;\n-        const columns = this._children || (this._children = []) as Column[];\n-        if (child = columns[index]) { return child as Column<R>; }\n-        if (field = fields[index]) {\n-            const chunks = this._chunks\n-                .map((chunk) => chunk.getChildAt<R>(index))\n-                .filter((vec): vec is Vector<R> => vec != null);\n-            if (chunks.length > 0) {\n-                return (columns[index] = new Column<R>(field, chunks));\n-            }\n-        }\n-        return null;\n+    /**\n+     * @summary Return a JavaScript Array of the Table rows.\n+     * @returns An Array of Table rows.\n+     */\n+    public toArray() {\n+        return this.data.reduce((ary, data) =>\n+            ary.concat(toArrayVisitor.visit(data)),\n+            new Array<Struct<T>['TValue']>()\n+        );\n\nReview comment:\n       How does this perform compared to `return [...this]`?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-21T01:26:07.265+0000",
                    "updated": "2021-05-21T01:26:07.265+0000",
                    "started": "2021-05-21T01:26:07.265+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "600132",
                    "issueId": "13375140"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13375140/worklog/600136",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #10371:\nURL: https://github.com/apache/arrow/pull/10371#issuecomment-845598492\n\n\n   https://issues.apache.org/jira/browse/ARROW-12549\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-21T02:04:09.983+0000",
                    "updated": "2021-05-21T02:04:09.983+0000",
                    "started": "2021-05-21T02:04:09.983+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "600136",
                    "issueId": "13375140"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13375140/worklog/600466",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "trxcllnt commented on a change in pull request #10371:\nURL: https://github.com/apache/arrow/pull/10371#discussion_r637038934\n\n\n\n##########\nFile path: js/src/table.ts\n##########\n@@ -16,280 +16,226 @@\n // under the License.\n \n import { Data } from './data';\n-import { Column } from './column';\n-import { Schema, Field } from './schema';\n+import { Type } from './enum';\n+import { Vector } from './vector';\n+import { Schema } from './schema';\n+import { DataType, Struct } from './type';\n+import { compareSchemas } from './visitor/typecomparator';\n+\n+import {\n+    ChunkedIterator,\n+    isChunkedValid,\n+    computeChunkOffsets,\n+    computeChunkNullCounts,\n+    wrapChunkedGet,\n+    wrapChunkedCall1,\n+    wrapChunkedCall2,\n+    wrapChunkedSet,\n+    wrapChunkedIndexOf,\n+} from './util/chunk';\n+\n+import { IndexingProxyHandlerMixin } from './util/proxy';\n+\n+import { instance as getVisitor } from './visitor/get';\n+import { instance as setVisitor } from './visitor/set';\n+import { instance as indexOfVisitor } from './visitor/indexof';\n+import { instance as toArrayVisitor } from './visitor/toarray';\n+import { instance as byteLengthVisitor } from './visitor/bytelength';\n+\n import { RecordBatch, _InternalEmptyPlaceholderRecordBatch } from './recordbatch';\n-import { DataFrame } from './compute/dataframe';\n-import { RecordBatchReader } from './ipc/reader';\n-import { DataType, RowLike, Struct } from './type';\n-import { selectColumnArgs, selectArgs } from './util/args';\n-import { Clonable, Sliceable, Applicative } from './vector';\n-import { isPromise, isIterable, isAsyncIterable } from './util/compat';\n-import { RecordBatchFileWriter, RecordBatchStreamWriter } from './ipc/writer';\n-import { distributeColumnsIntoRecordBatches, distributeVectorsIntoRecordBatches } from './util/recordbatch';\n-import { Vector, Chunked, StructVector, VectorBuilderOptions, VectorBuilderOptionsAsync } from './vector/index';\n-import { TypedArray, TypedArrayDataType } from './interfaces';\n-\n-type VectorMap = { [key: string]: Vector | Exclude<TypedArray, Uint8ClampedArray> };\n-type Fields<T extends { [key: string]: DataType }> = (keyof T)[] | Field<T[keyof T]>[];\n-type ChildData<T extends { [key: string]: DataType }> = Data<T[keyof T]>[] | Vector<T[keyof T]>[];\n-type Columns<T extends { [key: string]: DataType }> = Column<T[keyof T]>[] | Column<T[keyof T]>[][];\n \n+/** @ignore */\n export interface Table<T extends { [key: string]: DataType } = any> {\n+    ///\n+    // Virtual properties for the TypeScript compiler.\n+    // These do not exist at runtime.\n+    ///\n+    readonly TType: Struct<T>;\n+    readonly TArray: Struct<T>['TArray'];\n+    readonly TValue: Struct<T>['TValue'];\n \n-    get(index: number): Struct<T>['TValue'];\n-    [Symbol.iterator](): IterableIterator<RowLike<T>>;\n+    /**\n+     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/isConcatSpreadable\n+     */\n+    [Symbol.isConcatSpreadable]: true;\n+}\n \n-    slice(begin?: number, end?: number): Table<T>;\n-    concat(...others: Vector<Struct<T>>[]): Table<T>;\n-    clone(chunks?: RecordBatch<T>[], offsets?: Uint32Array): Table<T>;\n+export class Table<T extends { [key: string]: DataType } = any> {\n \n-    scan(next: import('./compute/dataframe').NextFunc, bind?: import('./compute/dataframe').BindFunc): void;\n-    scanReverse(next: import('./compute/dataframe').NextFunc, bind?: import('./compute/dataframe').BindFunc): void;\n-    countBy(name: import('./compute/predicate').Col | string): import('./compute/dataframe').CountByResult;\n-    filter(predicate: import('./compute/predicate').Predicate): import('./compute/dataframe').FilteredDataFrame<T>;\n-}\n+    constructor(columns: { [P in keyof T]: Vector<T[P]> });\n+    constructor(schema: Schema<T>, data?: RecordBatch<T> | RecordBatch<T>[]);\n+    constructor(schema: Schema<T>, data?: RecordBatch<T> | RecordBatch<T>[], offsets?: Uint32Array);\n+    constructor(...args: any[]) {\n \n-export class Table<T extends { [key: string]: DataType } = any>\n-    extends Chunked<Struct<T>>\n-    implements DataFrame<T>,\n-               Clonable<Table<T>>,\n-               Sliceable<Table<T>>,\n-               Applicative<Struct<T>, Table<T>> {\n-\n-    /** @nocollapse */\n-    public static empty<T extends { [key: string]: DataType } = Record<string, never>>(schema = new Schema<T>([])) { return new Table<T>(schema, []); }\n-\n-    public static from(): Table<Record<string, never>>;\n-    public static from<T extends { [key: string]: DataType } = any>(source: RecordBatchReader<T>): Table<T>;\n-    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg0): Table<T>;\n-    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg2): Table<T>;\n-    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg1): Promise<Table<T>>;\n-    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg3): Promise<Table<T>>;\n-    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg4): Promise<Table<T>>;\n-    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg5): Promise<Table<T>>;\n-    public static from<T extends { [key: string]: DataType } = any>(source: PromiseLike<RecordBatchReader<T>>): Promise<Table<T>>;\n-    public static from<T extends { [key: string]: DataType } = any, TNull = any>(options: VectorBuilderOptions<Struct<T>, TNull>): Table<T>;\n-    public static from<T extends { [key: string]: DataType } = any, TNull = any>(options: VectorBuilderOptionsAsync<Struct<T>, TNull>): Promise<Table<T>>;\n-    /** @nocollapse */\n-    public static from<T extends { [key: string]: DataType } = any, TNull = any>(input?: any) {\n-\n-        if (!input) { return Table.empty(); }\n-\n-        if (typeof input === 'object') {\n-            const table = isIterable(input['values']) ? tableFromIterable<T, TNull>(input)\n-                 : isAsyncIterable(input['values']) ? tableFromAsyncIterable<T, TNull>(input)\n-                                                    : null;\n-            if (table !== null) { return table; }\n+        if (args.length === 0) {\n+            args = [new Schema([])];\n         }\n \n-        let reader = RecordBatchReader.from<T>(input) as RecordBatchReader<T> | Promise<RecordBatchReader<T>>;\n-\n-        if (isPromise<RecordBatchReader<T>>(reader)) {\n-            return (async () => await Table.from(await reader))();\n+        if (args.length === 1 && !(args[0] instanceof Schema)) {\n+            const [obj] = args as [{ [P in keyof T]: Vector<T[P]> }];\n+            const batches = Object.keys(obj).reduce((batches, name: keyof T) => {\n+                obj[name].data.forEach((data, row) => {\n+                    (batches[row] || (\n+                        batches[row] = {} as { [P in keyof T]: Data<T[P]> })\n+                    )[name] = data;\n+                });\n+                return batches;\n+            }, new Array<{ [P in keyof T]: Data<T[P]> }>())\n+            .map((data) => new RecordBatch<T>(data));\n+\n+            args = [batches[0].schema, batches];\n         }\n-        if (reader.isSync() && (reader = reader.open())) {\n-            return !reader.schema ? Table.empty() : new Table<T>(reader.schema, [...reader]);\n+\n+        let [schema, data, offsets] = args;\n+\n+        if (!(schema instanceof Schema)) {\n+            throw new TypeError('Table constructor expects a [Schema, RecordBatch[]] pair.');\n         }\n-        return (async (opening) => {\n-            const reader = await opening;\n-            const schema = reader.schema;\n-            const batches: RecordBatch[] = [];\n-            if (schema) {\n-                for await (const batch of reader) {\n-                    batches.push(batch);\n-                }\n-                return new Table<T>(schema, batches);\n+\n+        this.schema = schema;\n+\n+        [, data = [new _InternalEmptyPlaceholderRecordBatch(schema)]] = args;\n+\n+        const batches: RecordBatch<T>[] = Array.isArray(data) ? data : [data];\n+\n+        batches.forEach((batch: RecordBatch<T>) => {\n+            if (!(batch instanceof RecordBatch)) {\n+                throw new TypeError('Table constructor expects a [Schema, RecordBatch[]] pair.');\n             }\n-            return Table.empty();\n-        })(reader.open());\n-    }\n+            if (!compareSchemas(this.schema, batch.schema)) {\n+                throw new TypeError('Table and all RecordBatch schemas must be equivalent.');\n+            }\n+        }, new Struct(schema.fields));\n \n-    /** @nocollapse */\n-    public static async fromAsync<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArgs): Promise<Table<T>> {\n-        return await Table.from<T>(source as any);\n+        this.data = batches.map(({ data }) => data);\n+        this._offsets = offsets ?? computeChunkOffsets(this.data);\n     }\n \n-    /** @nocollapse */\n-    public static fromStruct<T extends { [key: string]: DataType } = any>(vector: Vector<Struct<T>>) {\n-        return Table.new<T>(vector.data.childData as Data<T[keyof T]>[], vector.type.children);\n-    }\n+    protected _offsets!: Uint32Array;\n+    protected _nullCount!: number;\n+    protected _children?: Vector[];\n \n     /**\n-     * @summary Create a new Table from a collection of Columns or Vectors,\n-     * with an optional list of names or Fields.\n-     *\n-     *\n-     * `Table.new` accepts an Object of\n-     * Columns or Vectors, where the keys will be used as the field names\n-     * for the Schema:\n-     * ```ts\n-     * const i32s = Int32Vector.from([1, 2, 3]);\n-     * const f32s = Float32Vector.from([.1, .2, .3]);\n-     * const table = Table.new({ i32: i32s, f32: f32s });\n-     * assert(table.schema.fields[0].name === 'i32');\n-     * ```\n-     *\n-     * It also accepts a a list of Vectors with an optional list of names or\n-     * Fields for the resulting Schema. If the list is omitted or a name is\n-     * missing, the numeric index of each Vector will be used as the name:\n-     * ```ts\n-     * const i32s = Int32Vector.from([1, 2, 3]);\n-     * const f32s = Float32Vector.from([.1, .2, .3]);\n-     * const table = Table.new([i32s, f32s], ['i32']);\n-     * assert(table.schema.fields[0].name === 'i32');\n-     * assert(table.schema.fields[1].name === '1');\n-     * ```\n-     *\n-     * If the supplied arguments are Columns, `Table.new` will infer the Schema\n-     * from the Columns:\n-     * ```ts\n-     * const i32s = Column.new('i32', Int32Vector.from([1, 2, 3]));\n-     * const f32s = Column.new('f32', Float32Vector.from([.1, .2, .3]));\n-     * const table = Table.new(i32s, f32s);\n-     * assert(table.schema.fields[0].name === 'i32');\n-     * assert(table.schema.fields[1].name === 'f32');\n-     * ```\n-     *\n-     * If the supplied Vector or Column lengths are unequal, `Table.new` will\n-     * extend the lengths of the shorter Columns, allocating additional bytes\n-     * to represent the additional null slots. The memory required to allocate\n-     * these additional bitmaps can be computed as:\n-     * ```ts\n-     * let additionalBytes = 0;\n-     * for (let vec in shorter_vectors) {\n-     *     additionalBytes += (((longestLength - vec.length) + 63) & ~63) >> 3;\n-     * }\n-     * ```\n-     *\n-     * For example, an additional null bitmap for one million null values would require\n-     * 125,000 bytes (`((1e6 + 63) & ~63) >> 3`), or approx. `0.11MiB`\n+     * @summary Get and set elements by index.\n      */\n-    public static new<T extends { [key: string]: DataType } = any>(...columns: Columns<T>): Table<T>;\n-    public static new<T extends VectorMap = any>(children: T): Table<{ [P in keyof T]: T[P] extends Vector ? T[P]['type'] : T[P] extends Exclude<TypedArray, Uint8ClampedArray> ? TypedArrayDataType<T[P]> : never}>;\n-    public static new<T extends { [key: string]: DataType } = any>(children: ChildData<T>, fields?: Fields<T>): Table<T>;\n-    /** @nocollapse */\n-    public static new(...cols: any[]) {\n-        return new Table(...distributeColumnsIntoRecordBatches(selectColumnArgs(cols)));\n-    }\n+    [index: number]: Struct<T>['TValue'] | null;\n \n-    constructor(batches: RecordBatch<T>[]);\n-    constructor(...batches: RecordBatch<T>[]);\n-    constructor(schema: Schema<T>, batches: RecordBatch<T>[]);\n-    constructor(schema: Schema<T>, ...batches: RecordBatch<T>[]);\n-    constructor(...args: any[]) {\n-\n-        let schema: Schema<T> = null!;\n-\n-        if (args[0] instanceof Schema) { schema = args.shift(); }\n+    public readonly schema!: Schema<T>;\n \n-        const chunks = selectArgs<RecordBatch<T>>(RecordBatch, args);\n+    /**\n+     * @summary The contiguous {@link RecordBatch `RecordBatch`} chunks of the Table rows.\n+     */\n+    public readonly data!: ReadonlyArray<Data<Struct<T>>>;\n \n-        if (!schema && !(schema = chunks[0]?.schema)) {\n-            throw new TypeError('Table must be initialized with a Schema or at least one RecordBatch');\n+    /**\n+     * @summary The number of null rows in this RecordBatch.\n+     */\n+     public get nullCount() {\n+        if (this._nullCount === -1) {\n+            this._nullCount = computeChunkNullCounts(this.data);\n         }\n+        return this._nullCount;\n+    }\n \n-        chunks[0] || (chunks[0] = new _InternalEmptyPlaceholderRecordBatch(schema));\n+    /**\n+     * @summary Check whether an element is null.\n+     * @param index The index at which to read the validity bitmap.\n+     */\n+    // @ts-ignore\n+    public isValid(index: number): boolean { return false; }\n \n-        super(new Struct(schema.fields), chunks);\n+    /**\n+     * @summary Get an element value by position.\n+     * @param index The index of the element to read.\n+     */\n+    // @ts-ignore\n+    public get(index: number): T['TValue'] | null { return null; }\n \n-        this._schema = schema;\n-        this._chunks = chunks;\n-    }\n+    /**\n+     * @summary Set an element value by position.\n+     * @param index The index of the element to write.\n+     * @param value The value to set.\n+     */\n+    // @ts-ignore\n+    public set(index: number, value: T['TValue'] | null): void { return; }\n \n-    protected _schema: Schema<T>;\n-    // List of inner RecordBatches\n-    protected _chunks: RecordBatch<T>[];\n-    protected _children?: Column<T[keyof T]>[];\n+    /**\n+     * @summary Retrieve the index of the first occurrence of a value in an Vector.\n+     * @param element The value to locate in the Vector.\n+     * @param offset The index at which to begin the search. If offset is omitted, the search starts at index 0.\n+     */\n+    // @ts-ignore\n+    public indexOf(element: T['TValue'], offset?: number): number { return -1; }\n \n-    public get schema() { return this._schema; }\n-    public get length() { return this._length; }\n-    public get chunks() { return this._chunks; }\n-    public get numCols() { return this._numChildren; }\n+    /**\n+     * @summary Get the size in bytes of an element by index.\n+     * @param index The index at which to get the byteLength.\n+     */\n+    // @ts-ignore\n+    public getByteLength(index: number): number { return 0; }\n \n-    public clone(chunks = this._chunks) {\n-        return new Table<T>(this._schema, chunks);\n+    /**\n+     * @summary Iterator for rows in this Table.\n+     */\n+    public [Symbol.iterator]() {\n+        return new ChunkedIterator(this.data);\n     }\n \n-    public getColumn<R extends keyof T>(name: R): Column<T[R]> {\n-        return this.getColumnAt(this.getColumnIndex(name)) as Column<T[R]>;\n-    }\n-    public getColumnAt<R extends DataType = any>(index: number): Column<R> | null {\n-        return this.getChildAt(index);\n-    }\n-    public getColumnIndex<R extends keyof T>(name: R) {\n-        return this._schema.fields.findIndex((f) => f.name === name);\n-    }\n-    public getChildAt<R extends DataType = any>(index: number): Column<R> | null {\n-        if (index < 0 || index >= this.numChildren) { return null; }\n-        let field: Field<R>, child: Column<R>;\n-        const fields = (this._schema as Schema<any>).fields;\n-        const columns = this._children || (this._children = []) as Column[];\n-        if (child = columns[index]) { return child as Column<R>; }\n-        if (field = fields[index]) {\n-            const chunks = this._chunks\n-                .map((chunk) => chunk.getChildAt<R>(index))\n-                .filter((vec): vec is Vector<R> => vec != null);\n-            if (chunks.length > 0) {\n-                return (columns[index] = new Column<R>(field, chunks));\n-            }\n-        }\n-        return null;\n+    /**\n+     * @summary Return a JavaScript Array of the Table rows.\n+     * @returns An Array of Table rows.\n+     */\n+    public toArray() {\n+        return this.data.reduce((ary, data) =>\n+            ary.concat(toArrayVisitor.visit(data)),\n+            new Array<Struct<T>['TValue']>()\n+        );\n\nReview comment:\n       dunno, can't run benchmarks yet :stuck_out_tongue: \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-21T16:05:42.948+0000",
                    "updated": "2021-05-21T16:05:42.948+0000",
                    "started": "2021-05-21T16:05:42.948+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "600466",
                    "issueId": "13375140"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13375140/worklog/600469",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "trxcllnt commented on a change in pull request #10371:\nURL: https://github.com/apache/arrow/pull/10371#discussion_r637039533\n\n\n\n##########\nFile path: js/src/util/recordbatch.ts\n##########\n@@ -96,26 +70,26 @@ function uniformlyDistributeChunksAcrossRecordBatches<T extends { [key: string]:\n }\n \n /** @ignore */\n-function distributeChildData<T extends { [key: string]: DataType } = any>(fields: Field<T[keyof T]>[], batchLength: number, childData: Data<T[keyof T]>[], columns: Data<T[keyof T]>[][], memo: { numBatches: number }) {\n+function distributechildren<T extends { [key: string]: DataType } = any>(fields: Field<T[keyof T]>[], batchLength: number, children: Data<T[keyof T]>[], columns: Data<T[keyof T]>[][], memo: { numBatches: number }) {\n\nReview comment:\n       artifact from bad find-replace\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-21T16:06:41.011+0000",
                    "updated": "2021-05-21T16:06:41.011+0000",
                    "started": "2021-05-21T16:06:41.010+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "600469",
                    "issueId": "13375140"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13375140/worklog/601435",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "domoritz commented on pull request #10371:\nURL: https://github.com/apache/arrow/pull/10371#issuecomment-847380562\n\n\n   This fixes https://issues.apache.org/jira/browse/ARROW-10794 as well, right?\r\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-24T22:06:54.500+0000",
                    "updated": "2021-05-24T22:06:54.500+0000",
                    "started": "2021-05-24T22:06:54.499+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "601435",
                    "issueId": "13375140"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13375140/worklog/602021",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "trxcllnt commented on pull request #10371:\nURL: https://github.com/apache/arrow/pull/10371#issuecomment-848336984\n\n\n   @domoritz yep, looks like it\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-25T23:30:55.985+0000",
                    "updated": "2021-05-25T23:30:55.985+0000",
                    "started": "2021-05-25T23:30:55.985+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "602021",
                    "issueId": "13375140"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13375140/worklog/602022",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "trxcllnt commented on a change in pull request #10371:\nURL: https://github.com/apache/arrow/pull/10371#discussion_r639279466\n\n\n\n##########\nFile path: js/src/row/map.ts\n##########\n@@ -0,0 +1,134 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import { Data } from '../data';\n+import { DataType, Struct } from '../type';\n+import { valueToString } from '../util/pretty';\n+import { instance as getVisitor } from '../visitor/get';\n+import { instance as setVisitor } from '../visitor/set';\n+import { instance as indexOfVisitor } from '../visitor/indexof';\n+import { instance as iteratorVisitor } from '../visitor/iterator';\n+\n+/** @ignore */ const kKeys = Symbol.for('keys');\n+/** @ignore */ const kVals = Symbol.for('vals');\n+\n+export class MapRow<K extends DataType = any, V extends DataType = any> {\n+    private [kKeys]: Data<K>;\n+    private [kVals]: Data<V>;\n+    constructor(slice: Data<Struct<{ key: K; value: V }>>) {\n+        this[kKeys] = slice.children[0] as Data<K>;\n+        this[kVals] = slice.children[1] as Data<V>;\n+    }\n+    [Symbol.iterator]() {\n+        return new MapRowIterator(this[kKeys], this[kVals]);\n+    }\n+    public toArray() { return Object.values(this.toJSON()); }\n\nReview comment:\n       Absolutely would, yeah :smile: \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-25T23:32:09.222+0000",
                    "updated": "2021-05-25T23:32:09.222+0000",
                    "started": "2021-05-25T23:32:09.221+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "602022",
                    "issueId": "13375140"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13375140/worklog/612211",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "domoritz commented on a change in pull request #10371:\nURL: https://github.com/apache/arrow/pull/10371#discussion_r654717662\n\n\n\n##########\nFile path: js/package.json\n##########\n@@ -96,10 +96,9 @@\n     \"ts-jest\": \"27.0.0\",\n     \"ts-node\": \"10.0.0\",\n     \"typedoc\": \"0.20.36\",\n-    \"typescript\": \"4.0.2\",\n+    \"typescript\": \"4.3.3\",\n     \"web-stream-tools\": \"0.0.1\",\n     \"web-streams-polyfill\": \"3.0.3\",\n-    \"webpack\": \"5.37.1\",\n\nReview comment:\n       Can we remove web pack?\n\n##########\nFile path: js/package.json\n##########\n@@ -96,10 +96,9 @@\n     \"ts-jest\": \"27.0.0\",\n     \"ts-node\": \"10.0.0\",\n     \"typedoc\": \"0.20.36\",\n-    \"typescript\": \"4.0.2\",\n+    \"typescript\": \"4.3.3\",\n     \"web-stream-tools\": \"0.0.1\",\n     \"web-streams-polyfill\": \"3.0.3\",\n-    \"webpack\": \"5.37.1\",\n\nReview comment:\n       Can we remove webpack?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-18T23:48:57.604+0000",
                    "updated": "2021-06-18T23:48:57.604+0000",
                    "started": "2021-06-18T23:48:57.603+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "612211",
                    "issueId": "13375140"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13375140/worklog/612212",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "domoritz commented on a change in pull request #10371:\nURL: https://github.com/apache/arrow/pull/10371#discussion_r654717704\n\n\n\n##########\nFile path: js/package.json\n##########\n@@ -96,10 +96,9 @@\n     \"ts-jest\": \"27.0.0\",\n     \"ts-node\": \"10.0.0\",\n     \"typedoc\": \"0.20.36\",\n-    \"typescript\": \"4.0.2\",\n+    \"typescript\": \"4.3.3\",\n\nReview comment:\n       \ud83c\udf89\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-18T23:49:10.749+0000",
                    "updated": "2021-06-18T23:49:10.749+0000",
                    "started": "2021-06-18T23:49:10.748+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "612212",
                    "issueId": "13375140"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13375140/worklog/612711",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "trxcllnt commented on a change in pull request #10371:\nURL: https://github.com/apache/arrow/pull/10371#discussion_r655466014\n\n\n\n##########\nFile path: js/package.json\n##########\n@@ -96,10 +96,9 @@\n     \"ts-jest\": \"27.0.0\",\n     \"ts-node\": \"10.0.0\",\n     \"typedoc\": \"0.20.36\",\n-    \"typescript\": \"4.0.2\",\n+    \"typescript\": \"4.3.3\",\n\nReview comment:\n       Will need to figure out a solution to this before proceeding: https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/890#issuecomment-862866183\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-21T15:12:26.629+0000",
                    "updated": "2021-06-21T15:12:26.629+0000",
                    "started": "2021-06-21T15:12:26.628+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "612711",
                    "issueId": "13375140"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13375140/worklog/613284",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "trxcllnt commented on a change in pull request #10371:\nURL: https://github.com/apache/arrow/pull/10371#discussion_r655466014\n\n\n\n##########\nFile path: js/package.json\n##########\n@@ -96,10 +96,9 @@\n     \"ts-jest\": \"27.0.0\",\n     \"ts-node\": \"10.0.0\",\n     \"typedoc\": \"0.20.36\",\n-    \"typescript\": \"4.0.2\",\n+    \"typescript\": \"4.3.3\",\n\nReview comment:\n       Will need to figure out a solution to this before proceeding: https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/890#issuecomment-862866183\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-22T08:11:32.012+0000",
                    "updated": "2021-06-22T08:11:32.012+0000",
                    "started": "2021-06-22T08:11:32.012+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "613284",
                    "issueId": "13375140"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13375140/worklog/657617",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "domoritz commented on a change in pull request #10371:\nURL: https://github.com/apache/arrow/pull/10371#discussion_r718957469\n\n\n\n##########\nFile path: js/src/util/chunk.ts\n##########\n@@ -0,0 +1,162 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import { Data } from '../data';\n+import { DataType } from '../type';\n+import { instance as iteratorVisitor } from '../visitor/iterator';\n+\n+/** @ignore */\n+export class ChunkedIterator<T extends DataType> implements IterableIterator<T['TValue'] | null> {\n+    private chunkIndex = 0;\n+    private chunkIterator: IterableIterator<T['TValue'] | null>;\n+\n+    constructor(\n+        private chunks: ReadonlyArray<Data<T>>,\n+    ) {\n+        this.chunkIterator = this.getChunkIterator();\n+    }\n+\n+    next(): IteratorResult<T['TValue'] | null> {\n+        while (this.chunkIndex < this.chunks.length) {\n+            const next = this.chunkIterator.next();\n+\n+            if (!next.done) {\n+                return next;\n+            }\n+\n+            if (++this.chunkIndex < this.chunks.length) {\n+                this.chunkIterator = this.getChunkIterator();\n+            }\n+        }\n+\n+        return {done: true, value: null};\n+    }\n+\n+    getChunkIterator() {\n+        return iteratorVisitor.visit(this.chunks[this.chunkIndex]);\n+    }\n+\n+    [Symbol.iterator]() {\n+        return this;\n+    }\n+}\n+\n+/** @ignore */\n+export function computeChunkNullCounts<T extends DataType>(chunks: ReadonlyArray<Data<T>>) {\n+    return chunks.reduce((nullCount, chunk) => {\n+        return nullCount + chunk.nullCount;\n+    }, 0);\n+}\n+\n+/** @ignore */\n+export function computeChunkOffsets<T extends DataType>(chunks: ReadonlyArray<Data<T>>) {\n+    return chunks.reduce((offsets, chunk, index) => {\n+        offsets[index + 1] = offsets[index] + chunk.length;\n+        return offsets;\n+    }, new Uint32Array(chunks.length + 1));\n+}\n+\n+/** @ignore */\n+export function binarySearch<\n+    T extends DataType,\n+    F extends (chunks: ReadonlyArray<Data<T>>, _1: number, _2: number) => any\n+>(chunks: ReadonlyArray<Data<T>>, offsets: Uint32Array, idx: number, fn: F) {\n+    let lhs = 0, mid = 0, rhs = offsets.length - 1;\n+    do {\n+        if (lhs >= rhs - 1) {\n+            return (idx < offsets[rhs]) ? fn(chunks, lhs, idx - offsets[lhs]) : null;\n+        }\n+        mid = lhs + (((rhs - lhs) * .5) | 0);\n+        idx < offsets[mid] ? (rhs = mid) : (lhs = mid);\n+    } while (lhs < rhs);\n+}\n+\n+/** @ignore */\n+export function isChunkedValid<T extends DataType>(data: Data<T>, index: number): boolean {\n+    return data.getValid(index);\n+}\n+\n+/** @ignore */\n+export function wrapChunkedGet<T extends DataType>(fn: (data: Data<T>, _1: any) => any) {\n+    return (data: Data<T>, _1: any) => data.getValid(_1) ? fn(data, _1) : null;\n+}\n+\n+/** @ignore */\n+export function wrapChunkedSet<T extends DataType>(fn: (data: Data<T>, _1: any, _2: any) => void) {\n+    return (data: Data<T>, _1: any, _2: any) => {\n+        if (data.setValid(_1, !(_2 === null || _2 === undefined))) {\n+            return fn(data, _1, _2);\n+        }\n+    };\n+}\n+\n+/** @ignore */\n+export function wrapChunkedCall1<T extends DataType>(fn: (c: Data<T>, _1: number) => any) {\n\nReview comment:\n       I guess it's for one and two arguments. \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-29T23:43:01.248+0000",
                    "updated": "2021-09-29T23:43:01.248+0000",
                    "started": "2021-09-29T23:43:01.247+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "657617",
                    "issueId": "13375140"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13375140/worklog/657620",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "dianaclarke commented on pull request #10371:\nURL: https://github.com/apache/arrow/pull/10371#issuecomment-930629257\n\n\n   @ursabot benchmark help\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-29T23:53:32.484+0000",
                    "updated": "2021-09-29T23:53:32.484+0000",
                    "started": "2021-09-29T23:53:32.483+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "657620",
                    "issueId": "13375140"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13375140/worklog/657621",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot commented on pull request #10371:\nURL: https://github.com/apache/arrow/pull/10371#issuecomment-930629265\n\n\n   \n   Supported benchmark command examples:\n   \n   `@ursabot benchmark help`\n   \n   To run all benchmarks:\n   `@ursabot please benchmark`\n   \n   To filter benchmarks by language:\n   `@ursabot please benchmark lang=Python`\n   `@ursabot please benchmark lang=C++`\n   `@ursabot please benchmark lang=R`\n   `@ursabot please benchmark lang=Java`\n   `@ursabot please benchmark lang=JavaScript`\n   \n   To filter Python and R benchmarks by name:\n   `@ursabot please benchmark name=file-write`\n   `@ursabot please benchmark name=file-write lang=Python`\n   `@ursabot please benchmark name=file-.*`\n   \n   To filter C++ benchmarks by archery --suite-filter and --benchmark-filter:\n   `@ursabot please benchmark command=cpp-micro --suite-filter=arrow-compute-vector-selection-benchmark --benchmark-filter=TakeStringRandomIndicesWithNulls/262144/2 --iterations=3`\n   \n   For other `command=cpp-micro` options, please see https://github.com/ursacomputing/benchmarks/blob/main/benchmarks/cpp_micro_benchmarks.py\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-29T23:53:35.663+0000",
                    "updated": "2021-09-29T23:53:35.663+0000",
                    "started": "2021-09-29T23:53:35.663+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "657621",
                    "issueId": "13375140"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13375140/worklog/657683",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "dianaclarke commented on pull request #10371:\nURL: https://github.com/apache/arrow/pull/10371#issuecomment-930629257\n\n\n   @ursabot benchmark help\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-30T00:15:14.515+0000",
                    "updated": "2021-09-30T00:15:14.515+0000",
                    "started": "2021-09-30T00:15:14.515+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "657683",
                    "issueId": "13375140"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13375140/worklog/658003",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot commented on pull request #10371:\nURL: https://github.com/apache/arrow/pull/10371#issuecomment-930629265\n\n\n   \n   Supported benchmark command examples:\n   \n   `@ursabot benchmark help`\n   \n   To run all benchmarks:\n   `@ursabot please benchmark`\n   \n   To filter benchmarks by language:\n   `@ursabot please benchmark lang=Python`\n   `@ursabot please benchmark lang=C++`\n   `@ursabot please benchmark lang=R`\n   `@ursabot please benchmark lang=Java`\n   `@ursabot please benchmark lang=JavaScript`\n   \n   To filter Python and R benchmarks by name:\n   `@ursabot please benchmark name=file-write`\n   `@ursabot please benchmark name=file-write lang=Python`\n   `@ursabot please benchmark name=file-.*`\n   \n   To filter C++ benchmarks by archery --suite-filter and --benchmark-filter:\n   `@ursabot please benchmark command=cpp-micro --suite-filter=arrow-compute-vector-selection-benchmark --benchmark-filter=TakeStringRandomIndicesWithNulls/262144/2 --iterations=3`\n   \n   For other `command=cpp-micro` options, please see https://github.com/ursacomputing/benchmarks/blob/main/benchmarks/cpp_micro_benchmarks.py\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-30T00:44:42.561+0000",
                    "updated": "2021-09-30T00:44:42.561+0000",
                    "started": "2021-09-30T00:44:42.561+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "658003",
                    "issueId": "13375140"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13375140/worklog/658013",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "domoritz commented on a change in pull request #10371:\nURL: https://github.com/apache/arrow/pull/10371#discussion_r718957469\n\n\n\n##########\nFile path: js/src/util/chunk.ts\n##########\n@@ -0,0 +1,162 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import { Data } from '../data';\n+import { DataType } from '../type';\n+import { instance as iteratorVisitor } from '../visitor/iterator';\n+\n+/** @ignore */\n+export class ChunkedIterator<T extends DataType> implements IterableIterator<T['TValue'] | null> {\n+    private chunkIndex = 0;\n+    private chunkIterator: IterableIterator<T['TValue'] | null>;\n+\n+    constructor(\n+        private chunks: ReadonlyArray<Data<T>>,\n+    ) {\n+        this.chunkIterator = this.getChunkIterator();\n+    }\n+\n+    next(): IteratorResult<T['TValue'] | null> {\n+        while (this.chunkIndex < this.chunks.length) {\n+            const next = this.chunkIterator.next();\n+\n+            if (!next.done) {\n+                return next;\n+            }\n+\n+            if (++this.chunkIndex < this.chunks.length) {\n+                this.chunkIterator = this.getChunkIterator();\n+            }\n+        }\n+\n+        return {done: true, value: null};\n+    }\n+\n+    getChunkIterator() {\n+        return iteratorVisitor.visit(this.chunks[this.chunkIndex]);\n+    }\n+\n+    [Symbol.iterator]() {\n+        return this;\n+    }\n+}\n+\n+/** @ignore */\n+export function computeChunkNullCounts<T extends DataType>(chunks: ReadonlyArray<Data<T>>) {\n+    return chunks.reduce((nullCount, chunk) => {\n+        return nullCount + chunk.nullCount;\n+    }, 0);\n+}\n+\n+/** @ignore */\n+export function computeChunkOffsets<T extends DataType>(chunks: ReadonlyArray<Data<T>>) {\n+    return chunks.reduce((offsets, chunk, index) => {\n+        offsets[index + 1] = offsets[index] + chunk.length;\n+        return offsets;\n+    }, new Uint32Array(chunks.length + 1));\n+}\n+\n+/** @ignore */\n+export function binarySearch<\n+    T extends DataType,\n+    F extends (chunks: ReadonlyArray<Data<T>>, _1: number, _2: number) => any\n+>(chunks: ReadonlyArray<Data<T>>, offsets: Uint32Array, idx: number, fn: F) {\n+    let lhs = 0, mid = 0, rhs = offsets.length - 1;\n+    do {\n+        if (lhs >= rhs - 1) {\n+            return (idx < offsets[rhs]) ? fn(chunks, lhs, idx - offsets[lhs]) : null;\n+        }\n+        mid = lhs + (((rhs - lhs) * .5) | 0);\n+        idx < offsets[mid] ? (rhs = mid) : (lhs = mid);\n+    } while (lhs < rhs);\n+}\n+\n+/** @ignore */\n+export function isChunkedValid<T extends DataType>(data: Data<T>, index: number): boolean {\n+    return data.getValid(index);\n+}\n+\n+/** @ignore */\n+export function wrapChunkedGet<T extends DataType>(fn: (data: Data<T>, _1: any) => any) {\n+    return (data: Data<T>, _1: any) => data.getValid(_1) ? fn(data, _1) : null;\n+}\n+\n+/** @ignore */\n+export function wrapChunkedSet<T extends DataType>(fn: (data: Data<T>, _1: any, _2: any) => void) {\n+    return (data: Data<T>, _1: any, _2: any) => {\n+        if (data.setValid(_1, !(_2 === null || _2 === undefined))) {\n+            return fn(data, _1, _2);\n+        }\n+    };\n+}\n+\n+/** @ignore */\n+export function wrapChunkedCall1<T extends DataType>(fn: (c: Data<T>, _1: number) => any) {\n\nReview comment:\n       I guess it's for one and two arguments. \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-30T00:45:36.221+0000",
                    "updated": "2021-09-30T00:45:36.221+0000",
                    "started": "2021-09-30T00:45:36.221+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "658013",
                    "issueId": "13375140"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13375140/worklog/658055",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "domoritz commented on a change in pull request #10371:\nURL: https://github.com/apache/arrow/pull/10371#discussion_r718988056\n\n\n\n##########\nFile path: js/src/vector.ts\n##########\n@@ -15,59 +15,328 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-import { Data } from './data';\n-import { DataType } from './type';\n-import { Chunked } from './vector/chunked';\n+import { Type } from './enum';\n+import { clampRange } from './util/vector';\n+import { DataType, strideForType } from './type';\n+import { Data, makeData, DataProps } from './data';\n \n-/** @ignore */\n-export interface Clonable<R extends AbstractVector> {\n-    clone(...args: any[]): R;\n-}\n-\n-/** @ignore */\n-export interface Sliceable<R extends AbstractVector> {\n-    slice(begin?: number, end?: number): R;\n-}\n+import {\n+    ChunkedIterator,\n+    isChunkedValid,\n+    computeChunkOffsets,\n+    computeChunkNullCounts,\n+    sliceChunks,\n+    wrapChunkedCall1,\n+    wrapChunkedCall2,\n+    wrapChunkedIndexOf,\n+} from './util/chunk';\n \n-/** @ignore */\n-export interface Applicative<T extends DataType, R extends Chunked> {\n-    concat(...others: Vector<T>[]): R;\n-    readonly [Symbol.isConcatSpreadable]: boolean;\n-}\n+import { NumericIndexingProxyHandlerMixin } from './util/proxy';\n \n-export interface AbstractVector<T extends DataType = any>\n-    extends Clonable<AbstractVector<T>>,\n-            Sliceable<AbstractVector<T>>,\n-            Applicative<T, Chunked<T>> {\n+import { instance as getVisitor } from './visitor/get';\n+import { instance as setVisitor } from './visitor/set';\n+import { instance as indexOfVisitor } from './visitor/indexof';\n+import { instance as toArrayVisitor } from './visitor/toarray';\n+import { instance as byteLengthVisitor } from './visitor/bytelength';\n \n+export interface Vector<T extends DataType = any> {\n+    ///\n+    // Virtual properties for the TypeScript compiler.\n+    // These do not exist at runtime.\n+    ///\n     readonly TType: T['TType'];\n     readonly TArray: T['TArray'];\n     readonly TValue: T['TValue'];\n+\n+    /**\n+     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/isConcatSpreadable\n+     */\n+    [Symbol.isConcatSpreadable]: true;\n }\n \n-export abstract class AbstractVector<T extends DataType = any> implements Iterable<T['TValue'] | null> {\n+const vectorPrototypesByTypeId = {} as { [typeId: number]: any };\n+\n+export class Vector<T extends DataType = any> {\n+\n+    constructor(...args: Data<T>[]);\n+    constructor(...args: Vector<T>[]);\n+    constructor(...args: (readonly (Data<T> | Vector<T>)[])[]);\n+    constructor(...args: any[]) {\n+        const data = args.flat().flatMap((x) => {\n+            return x instanceof Data ? [x]\n+                : x instanceof Vector ? x.data\n+                    : makeVector(x as Vector<T>).data;\n+        });\n+        if (data.some((x) => !(x instanceof Data))) {\n+            throw new TypeError('Vector constructor expects an Array of Data instances.');\n+        }\n+        this.data = data;\n+        this.type = data[0].type;\n+        switch (data.length) {\n+            case 0: this._offsets = new Uint32Array([0]); break;\n+            case 1: this._offsets = new Uint32Array([0, data[0].length]); break;\n+            default: this._offsets = computeChunkOffsets(data); break;\n+        }\n+        this.stride = strideForType(this.type);\n+        this.numChildren = this.type.children?.length ?? 0;\n+        this.length = this._offsets[this._offsets.length - 1];\n+        Object.setPrototypeOf(this, vectorPrototypesByTypeId[this.type.typeId]);\n+    }\n+\n+    declare protected _offsets: Uint32Array;\n+    declare protected _nullCount: number;\n+    declare protected _byteLength: number;\n+\n+    /**\n+     * @summary Get and set elements by index.\n+     */\n+    [index: number]: T['TValue'] | null;\n+\n+    /**\n+     * @summary The {@link DataType `DataType`} of this Vector.\n+     */\n+    public readonly type: T;\n+\n+    /**\n+     * @summary The primitive {@link Data `Data`} instances for this Vector's elements.\n+     */\n+    public readonly data: ReadonlyArray<Data<T>>;\n+\n+    /**\n+     * @summary The number of elements in this Vector.\n+     */\n+    public readonly length: number;\n+\n+    /**\n+     * @summary The number of primitive values per Vector element.\n+     */\n+    public readonly stride: number;\n+\n+    /**\n+     * @summary The number of child Vectors if this Vector is a nested dtype.\n+     */\n+    public readonly numChildren: number;\n+\n+    /**\n+     * @summary The aggregate size (in bytes) of this Vector's buffers and/or child Vectors.\n+     */\n+    public get byteLength() {\n+        if (this._byteLength === -1) {\n+            this._byteLength = this.data.reduce((byteLength, data) => byteLength + data.byteLength, 0);\n+        }\n+        return this._byteLength;\n+    }\n+\n+    /**\n+     * @summary The number of null elements in this Vector.\n+     */\n+    public get nullCount() {\n+        if (this._nullCount === -1) {\n+            this._nullCount = computeChunkNullCounts(this.data);\n+        }\n+        return this._nullCount;\n+    }\n \n-    public abstract readonly data: Data<T>;\n-    public abstract readonly type: T;\n-    public abstract readonly typeId: T['TType'];\n-    public abstract readonly length: number;\n-    public abstract readonly stride: number;\n-    public abstract readonly nullCount: number;\n-    public abstract readonly byteLength: number;\n-    public abstract readonly numChildren: number;\n+    /**\n+     * @summary The Array or TypedAray constructor used for the JS representation\n+     *  of the element's values in {@link Vector.prototype.toArray `toArray()`}.\n+     */\n+    public get ArrayType(): T['ArrayType'] { return this.type.ArrayType; }\n \n-    public abstract readonly ArrayType: T['ArrayType'];\n+    /**\n+     * @summary The name that should be printed when the Vector is logged in a message.\n+     */\n+    public get [Symbol.toStringTag]() {\n+        return `${this.VectorName}<${this.type[Symbol.toStringTag]}>`;\n+    }\n \n-    public abstract isValid(index: number): boolean;\n-    public abstract get(index: number): T['TValue'] | null;\n-    public abstract set(index: number, value: T['TValue'] | null): void;\n-    public abstract indexOf(value: T['TValue'] | null, fromIndex?: number): number;\n-    public abstract [Symbol.iterator](): IterableIterator<T['TValue'] | null>;\n+    /**\n+     * @summary The name of this Vector.\n+     */\n+    public get VectorName() { return `${Type[this.type.typeId]}Vector`; }\n \n-    public abstract toArray(): T['TArray'];\n-    public abstract getChildAt<R extends DataType = any>(index: number): Vector<R> | null;\n+    /**\n+     * @summary Check whether an element is null.\n+     * @param index The index at which to read the validity bitmap.\n+     */\n+    // @ts-ignore\n+    public isValid(index: number): boolean { return false; }\n+\n+    /**\n+     * @summary Get an element value by position.\n+     * @param index The index of the element to read.\n+     */\n+    // @ts-ignore\n+    public get(index: number): T['TValue'] | null { return null; }\n+\n+    /**\n+     * @summary Set an element value by position.\n+     * @param index The index of the element to write.\n+     * @param value The value to set.\n+     */\n+    // @ts-ignore\n+    public set(index: number, value: T['TValue'] | null): void { return; }\n+\n+    /**\n+     * @summary Retrieve the index of the first occurrence of a value in an Vector.\n+     * @param element The value to locate in the Vector.\n+     * @param offset The index at which to begin the search. If offset is omitted, the search starts at index 0.\n+     */\n+    // @ts-ignore\n+    public indexOf(element: T['TValue'], offset?: number): number { return -1; }\n+\n+    /**\n+     * @summary Get the size in bytes of an element by index.\n+     * @param index The index at which to get the byteLength.\n+     */\n+    // @ts-ignore\n+    public getByteLength(index: number): number { return 0; }\n+\n+    /**\n+     * @summary Iterator for the Vector's elements.\n+     */\n+    public [Symbol.iterator](): IterableIterator<T['TValue'] | null> {\n+        return new ChunkedIterator(this.data);\n+    }\n+\n+    /**\n+     * @summary Combines two or more Vectors of the same type.\n+     * @param others Additional Vectors to add to the end of this Vector.\n+     */\n+    public concat(...others: Vector<T>[]): Vector<T> {\n+        return new Vector(this.data.concat(others.map((x) => x.data).flat()));\n+    }\n+\n+    /**\n+     * Return a zero-copy sub-section of this Vector.\n+     * @param start The beginning of the specified portion of the Vector.\n+     * @param end The end of the specified portion of the Vector. This is exclusive of the element at the index 'end'.\n+     */\n+    public slice(begin?: number, end?: number): Vector<T> {\n+        return new Vector(clampRange(this, begin, end, ({ data, _offsets }, begin, end) => {\n+            return sliceChunks(data, _offsets, begin, end);\n+        }));\n+    }\n+\n+    /**\n+     * @summary Return a JavaScript Array or TypedArray of the Vector's elements.\n+     *\n+     * @note If this Vector contains a single Data chunk and the Vector's type is a\n+     *  primitive numeric type corresponding to one of the JavaScript TypedArrays, this\n+     *  method returns a zero-copy slice of the underlying TypedArray values. If there's\n+     *  more than one chunk, the resulting TypedArray will be a copy of the data from each\n+     *  chunk's underlying TypedArray values.\n+     *\n+     * @returns An Array or TypedArray of the Vector's elements, based on the Vector's DataType.\n+     */\n+    public toArray() {\n+        const data = this.data;\n+        const toArray = toArrayVisitor.getVisitFn(this.type.typeId);\n+        switch (data.length) {\n+            case 1: return toArray(data[0]);\n+            case 0: return new this.ArrayType();\n+        }\n+        let { ArrayType } = this;\n+        const arrays = data.map(toArray);\n+        if (ArrayType !== arrays[0].constructor) {\n+            ArrayType = arrays[0].constructor;\n+        }\n+        return ArrayType === Array ? arrays.flat(1) : arrays.reduce((memo, array) => {\n+            memo.array.set(array, memo.offset);\n+            memo.offset += array.length;\n+            return memo;\n+        }, { array: new ArrayType(this.length * this.stride), offset: 0 });\n+    }\n+\n+    /**\n+     * @summary Returns a child Vector by name, or null if this Vector has no child with the given name.\n+     * @param name The name of the child to retrieve.\n+     */\n+    public getChild<R extends keyof T['TChildren']>(name: R) {\n+        return this.getChildAt(this.type.children?.findIndex((f) => f.name === name));\n+    }\n+\n+    /**\n+     * @summary Returns a child Vector by index, or null if this Vector has no child at the supplied index.\n+     * @param index The index of the child to retrieve.\n+     */\n+    public getChildAt<R extends DataType = any>(index: number): Vector<R> | null {\n+        if (index > -1 && index < this.numChildren) {\n+            return new Vector(this.data.map(({ children }) => children[index] as Data<R>));\n+        }\n+        return null;\n+    }\n+\n+    // Initialize this static property via an IIFE so bundlers don't tree-shake\n+    // out this logic, but also so we're still compliant with `\"sideEffects\": false`\n+    protected static [Symbol.toStringTag] = ((proto: Vector) => {\n+        (proto as any)._nullCount = -1;\n+        (proto as any)._byteLength = -1;\n+        (proto as any)[Symbol.isConcatSpreadable] = true;\n+        Object.setPrototypeOf(proto, new Proxy({}, new NumericIndexingProxyHandlerMixin(\n+            (inst, key) => inst.get(key),\n+            (inst, key, val) => inst.set(key, val)\n+        )));\n+\n+        Object.assign(vectorPrototypesByTypeId, Object\n+            .keys(Type).map((T: any) => Type[T] as any)\n+            .filter((T: any) => typeof T === 'number' && T !== Type.NONE)\n+            .reduce((prototypes, typeId) => ({\n+                ...prototypes,\n+                [typeId]: Object.create(proto, {\n+                    ['isValid']: { value: wrapChunkedCall1(isChunkedValid) },\n+                    ['get']: { value: wrapChunkedCall1(getVisitor.getVisitFnByTypeId(typeId)) },\n+                    ['set']: { value: wrapChunkedCall2(setVisitor.getVisitFnByTypeId(typeId)) },\n+                    ['indexOf']: { value: wrapChunkedIndexOf(indexOfVisitor.getVisitFnByTypeId(typeId)) },\n+                    ['getByteLength']: { value: wrapChunkedCall1(byteLengthVisitor.getVisitFnByTypeId(typeId)) },\n+                })\n+            }), {}));\n+\n+        return 'Vector';\n+    })(Vector.prototype);\n }\n \n-(AbstractVector.prototype as any).data = null;\n+import * as dtypes from './type';\n+\n+export function makeVector(data: Int8Array | readonly Int8Array[]):/*      */Vector<dtypes.Int8>;\n\nReview comment:\n       Are you trying to make these aligned with the comments?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-30T01:16:07.634+0000",
                    "updated": "2021-09-30T01:16:07.634+0000",
                    "started": "2021-09-30T01:16:07.633+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "658055",
                    "issueId": "13375140"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13375140/worklog/658056",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "domoritz commented on a change in pull request #10371:\nURL: https://github.com/apache/arrow/pull/10371#discussion_r718989105\n\n\n\n##########\nFile path: js/src/vector.ts\n##########\n@@ -15,59 +15,328 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-import { Data } from './data';\n-import { DataType } from './type';\n-import { Chunked } from './vector/chunked';\n+import { Type } from './enum';\n+import { clampRange } from './util/vector';\n+import { DataType, strideForType } from './type';\n+import { Data, makeData, DataProps } from './data';\n \n-/** @ignore */\n-export interface Clonable<R extends AbstractVector> {\n-    clone(...args: any[]): R;\n-}\n-\n-/** @ignore */\n-export interface Sliceable<R extends AbstractVector> {\n-    slice(begin?: number, end?: number): R;\n-}\n+import {\n+    ChunkedIterator,\n+    isChunkedValid,\n+    computeChunkOffsets,\n+    computeChunkNullCounts,\n+    sliceChunks,\n+    wrapChunkedCall1,\n+    wrapChunkedCall2,\n+    wrapChunkedIndexOf,\n+} from './util/chunk';\n \n-/** @ignore */\n-export interface Applicative<T extends DataType, R extends Chunked> {\n-    concat(...others: Vector<T>[]): R;\n-    readonly [Symbol.isConcatSpreadable]: boolean;\n-}\n+import { NumericIndexingProxyHandlerMixin } from './util/proxy';\n \n-export interface AbstractVector<T extends DataType = any>\n-    extends Clonable<AbstractVector<T>>,\n-            Sliceable<AbstractVector<T>>,\n-            Applicative<T, Chunked<T>> {\n+import { instance as getVisitor } from './visitor/get';\n+import { instance as setVisitor } from './visitor/set';\n+import { instance as indexOfVisitor } from './visitor/indexof';\n+import { instance as toArrayVisitor } from './visitor/toarray';\n+import { instance as byteLengthVisitor } from './visitor/bytelength';\n \n+export interface Vector<T extends DataType = any> {\n+    ///\n+    // Virtual properties for the TypeScript compiler.\n+    // These do not exist at runtime.\n+    ///\n     readonly TType: T['TType'];\n     readonly TArray: T['TArray'];\n     readonly TValue: T['TValue'];\n+\n+    /**\n+     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/isConcatSpreadable\n+     */\n+    [Symbol.isConcatSpreadable]: true;\n }\n \n-export abstract class AbstractVector<T extends DataType = any> implements Iterable<T['TValue'] | null> {\n+const vectorPrototypesByTypeId = {} as { [typeId: number]: any };\n+\n+export class Vector<T extends DataType = any> {\n+\n+    constructor(...args: Data<T>[]);\n+    constructor(...args: Vector<T>[]);\n+    constructor(...args: (readonly (Data<T> | Vector<T>)[])[]);\n+    constructor(...args: any[]) {\n+        const data = args.flat().flatMap((x) => {\n+            return x instanceof Data ? [x]\n+                : x instanceof Vector ? x.data\n+                    : makeVector(x as Vector<T>).data;\n+        });\n+        if (data.some((x) => !(x instanceof Data))) {\n+            throw new TypeError('Vector constructor expects an Array of Data instances.');\n+        }\n+        this.data = data;\n+        this.type = data[0].type;\n+        switch (data.length) {\n+            case 0: this._offsets = new Uint32Array([0]); break;\n+            case 1: this._offsets = new Uint32Array([0, data[0].length]); break;\n+            default: this._offsets = computeChunkOffsets(data); break;\n+        }\n+        this.stride = strideForType(this.type);\n+        this.numChildren = this.type.children?.length ?? 0;\n+        this.length = this._offsets[this._offsets.length - 1];\n+        Object.setPrototypeOf(this, vectorPrototypesByTypeId[this.type.typeId]);\n+    }\n+\n+    declare protected _offsets: Uint32Array;\n+    declare protected _nullCount: number;\n+    declare protected _byteLength: number;\n+\n+    /**\n+     * @summary Get and set elements by index.\n+     */\n+    [index: number]: T['TValue'] | null;\n+\n+    /**\n+     * @summary The {@link DataType `DataType`} of this Vector.\n+     */\n+    public readonly type: T;\n+\n+    /**\n+     * @summary The primitive {@link Data `Data`} instances for this Vector's elements.\n+     */\n+    public readonly data: ReadonlyArray<Data<T>>;\n+\n+    /**\n+     * @summary The number of elements in this Vector.\n+     */\n+    public readonly length: number;\n+\n+    /**\n+     * @summary The number of primitive values per Vector element.\n+     */\n+    public readonly stride: number;\n+\n+    /**\n+     * @summary The number of child Vectors if this Vector is a nested dtype.\n+     */\n+    public readonly numChildren: number;\n+\n+    /**\n+     * @summary The aggregate size (in bytes) of this Vector's buffers and/or child Vectors.\n+     */\n+    public get byteLength() {\n+        if (this._byteLength === -1) {\n+            this._byteLength = this.data.reduce((byteLength, data) => byteLength + data.byteLength, 0);\n+        }\n+        return this._byteLength;\n+    }\n+\n+    /**\n+     * @summary The number of null elements in this Vector.\n+     */\n+    public get nullCount() {\n+        if (this._nullCount === -1) {\n+            this._nullCount = computeChunkNullCounts(this.data);\n+        }\n+        return this._nullCount;\n+    }\n \n-    public abstract readonly data: Data<T>;\n-    public abstract readonly type: T;\n-    public abstract readonly typeId: T['TType'];\n-    public abstract readonly length: number;\n-    public abstract readonly stride: number;\n-    public abstract readonly nullCount: number;\n-    public abstract readonly byteLength: number;\n-    public abstract readonly numChildren: number;\n+    /**\n+     * @summary The Array or TypedAray constructor used for the JS representation\n+     *  of the element's values in {@link Vector.prototype.toArray `toArray()`}.\n+     */\n+    public get ArrayType(): T['ArrayType'] { return this.type.ArrayType; }\n \n-    public abstract readonly ArrayType: T['ArrayType'];\n+    /**\n+     * @summary The name that should be printed when the Vector is logged in a message.\n+     */\n+    public get [Symbol.toStringTag]() {\n+        return `${this.VectorName}<${this.type[Symbol.toStringTag]}>`;\n+    }\n \n-    public abstract isValid(index: number): boolean;\n-    public abstract get(index: number): T['TValue'] | null;\n-    public abstract set(index: number, value: T['TValue'] | null): void;\n-    public abstract indexOf(value: T['TValue'] | null, fromIndex?: number): number;\n-    public abstract [Symbol.iterator](): IterableIterator<T['TValue'] | null>;\n+    /**\n+     * @summary The name of this Vector.\n+     */\n+    public get VectorName() { return `${Type[this.type.typeId]}Vector`; }\n \n-    public abstract toArray(): T['TArray'];\n-    public abstract getChildAt<R extends DataType = any>(index: number): Vector<R> | null;\n+    /**\n+     * @summary Check whether an element is null.\n+     * @param index The index at which to read the validity bitmap.\n+     */\n+    // @ts-ignore\n+    public isValid(index: number): boolean { return false; }\n+\n+    /**\n+     * @summary Get an element value by position.\n+     * @param index The index of the element to read.\n+     */\n+    // @ts-ignore\n+    public get(index: number): T['TValue'] | null { return null; }\n+\n+    /**\n+     * @summary Set an element value by position.\n+     * @param index The index of the element to write.\n+     * @param value The value to set.\n+     */\n+    // @ts-ignore\n+    public set(index: number, value: T['TValue'] | null): void { return; }\n+\n+    /**\n+     * @summary Retrieve the index of the first occurrence of a value in an Vector.\n+     * @param element The value to locate in the Vector.\n+     * @param offset The index at which to begin the search. If offset is omitted, the search starts at index 0.\n+     */\n+    // @ts-ignore\n+    public indexOf(element: T['TValue'], offset?: number): number { return -1; }\n+\n+    /**\n+     * @summary Get the size in bytes of an element by index.\n+     * @param index The index at which to get the byteLength.\n+     */\n+    // @ts-ignore\n+    public getByteLength(index: number): number { return 0; }\n+\n+    /**\n+     * @summary Iterator for the Vector's elements.\n+     */\n+    public [Symbol.iterator](): IterableIterator<T['TValue'] | null> {\n+        return new ChunkedIterator(this.data);\n+    }\n+\n+    /**\n+     * @summary Combines two or more Vectors of the same type.\n+     * @param others Additional Vectors to add to the end of this Vector.\n+     */\n+    public concat(...others: Vector<T>[]): Vector<T> {\n+        return new Vector(this.data.concat(others.map((x) => x.data).flat()));\n+    }\n+\n+    /**\n+     * Return a zero-copy sub-section of this Vector.\n+     * @param start The beginning of the specified portion of the Vector.\n+     * @param end The end of the specified portion of the Vector. This is exclusive of the element at the index 'end'.\n+     */\n+    public slice(begin?: number, end?: number): Vector<T> {\n+        return new Vector(clampRange(this, begin, end, ({ data, _offsets }, begin, end) => {\n+            return sliceChunks(data, _offsets, begin, end);\n+        }));\n+    }\n+\n+    /**\n+     * @summary Return a JavaScript Array or TypedArray of the Vector's elements.\n+     *\n+     * @note If this Vector contains a single Data chunk and the Vector's type is a\n+     *  primitive numeric type corresponding to one of the JavaScript TypedArrays, this\n+     *  method returns a zero-copy slice of the underlying TypedArray values. If there's\n+     *  more than one chunk, the resulting TypedArray will be a copy of the data from each\n+     *  chunk's underlying TypedArray values.\n+     *\n+     * @returns An Array or TypedArray of the Vector's elements, based on the Vector's DataType.\n+     */\n+    public toArray() {\n+        const data = this.data;\n+        const toArray = toArrayVisitor.getVisitFn(this.type.typeId);\n+        switch (data.length) {\n+            case 1: return toArray(data[0]);\n+            case 0: return new this.ArrayType();\n+        }\n+        let { ArrayType } = this;\n+        const arrays = data.map(toArray);\n+        if (ArrayType !== arrays[0].constructor) {\n+            ArrayType = arrays[0].constructor;\n+        }\n+        return ArrayType === Array ? arrays.flat(1) : arrays.reduce((memo, array) => {\n+            memo.array.set(array, memo.offset);\n+            memo.offset += array.length;\n+            return memo;\n+        }, { array: new ArrayType(this.length * this.stride), offset: 0 });\n+    }\n+\n+    /**\n+     * @summary Returns a child Vector by name, or null if this Vector has no child with the given name.\n+     * @param name The name of the child to retrieve.\n+     */\n+    public getChild<R extends keyof T['TChildren']>(name: R) {\n+        return this.getChildAt(this.type.children?.findIndex((f) => f.name === name));\n+    }\n+\n+    /**\n+     * @summary Returns a child Vector by index, or null if this Vector has no child at the supplied index.\n+     * @param index The index of the child to retrieve.\n+     */\n+    public getChildAt<R extends DataType = any>(index: number): Vector<R> | null {\n+        if (index > -1 && index < this.numChildren) {\n+            return new Vector(this.data.map(({ children }) => children[index] as Data<R>));\n+        }\n+        return null;\n+    }\n+\n+    // Initialize this static property via an IIFE so bundlers don't tree-shake\n+    // out this logic, but also so we're still compliant with `\"sideEffects\": false`\n+    protected static [Symbol.toStringTag] = ((proto: Vector) => {\n+        (proto as any)._nullCount = -1;\n+        (proto as any)._byteLength = -1;\n+        (proto as any)[Symbol.isConcatSpreadable] = true;\n+        Object.setPrototypeOf(proto, new Proxy({}, new NumericIndexingProxyHandlerMixin(\n+            (inst, key) => inst.get(key),\n+            (inst, key, val) => inst.set(key, val)\n+        )));\n+\n+        Object.assign(vectorPrototypesByTypeId, Object\n+            .keys(Type).map((T: any) => Type[T] as any)\n+            .filter((T: any) => typeof T === 'number' && T !== Type.NONE)\n+            .reduce((prototypes, typeId) => ({\n+                ...prototypes,\n+                [typeId]: Object.create(proto, {\n+                    ['isValid']: { value: wrapChunkedCall1(isChunkedValid) },\n+                    ['get']: { value: wrapChunkedCall1(getVisitor.getVisitFnByTypeId(typeId)) },\n+                    ['set']: { value: wrapChunkedCall2(setVisitor.getVisitFnByTypeId(typeId)) },\n+                    ['indexOf']: { value: wrapChunkedIndexOf(indexOfVisitor.getVisitFnByTypeId(typeId)) },\n+                    ['getByteLength']: { value: wrapChunkedCall1(byteLengthVisitor.getVisitFnByTypeId(typeId)) },\n+                })\n+            }), {}));\n+\n+        return 'Vector';\n+    })(Vector.prototype);\n }\n \n-(AbstractVector.prototype as any).data = null;\n+import * as dtypes from './type';\n+\n+export function makeVector(data: Int8Array | readonly Int8Array[]):/*      */Vector<dtypes.Int8>;\n\nReview comment:\n       Fixed in https://github.com/trxcllnt/arrow/pull/12\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-30T01:19:34.035+0000",
                    "updated": "2021-09-30T01:19:34.035+0000",
                    "started": "2021-09-30T01:19:34.035+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "658056",
                    "issueId": "13375140"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 17400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@115b4bd2[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@73a844d2[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7ce02425[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@4ddf61bf[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6ee6212f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@2eeed00e[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@53d218fa[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@65b649a6[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3a86f366[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@62b02a98[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@21e6ebfc[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@76ca7d1f[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 17400,
        "customfield_12312520": null,
        "customfield_12312521": "Sun Jan 16 17:29:34 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-01-16T17:23:43.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-12549/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2021-04-26T18:40:33.000+0000",
        "updated": "2022-01-16T17:29:34.000+0000",
        "timeoriginalestimate": null,
        "description": "Right now, Table  are chunked vectors and Record Batches are struct vectors which means the classes are linked deeply. We should not extend and instead copy the binary search to Table and copy BaseVector.prototype.get etc to record batch. ",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "4h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 17400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[JS] Table and RecordBatch should not extend Vector",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13375140/comment/17476840",
                    "id": "17476840",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=domoritz",
                        "name": "domoritz",
                        "key": "domoritz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=domoritz&avatarId=46688",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=domoritz&avatarId=46688",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=domoritz&avatarId=46688",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=domoritz&avatarId=46688"
                        },
                        "displayName": "Dominik Moritz",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "Issue resolved by pull request 10371\n[https://github.com/apache/arrow/pull/10371]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=domoritz",
                        "name": "domoritz",
                        "key": "domoritz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=domoritz&avatarId=46688",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=domoritz&avatarId=46688",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=domoritz&avatarId=46688",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=domoritz&avatarId=46688"
                        },
                        "displayName": "Dominik Moritz",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2022-01-16T17:23:43.296+0000",
                    "updated": "2022-01-16T17:23:43.296+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13375140/comment/17476848",
                    "id": "17476848",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=domoritz",
                        "name": "domoritz",
                        "key": "domoritz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=domoritz&avatarId=46688",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=domoritz&avatarId=46688",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=domoritz&avatarId=46688",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=domoritz&avatarId=46688"
                        },
                        "displayName": "Dominik Moritz",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "Done in https://github.com/apache/arrow/pull/10371",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=domoritz",
                        "name": "domoritz",
                        "key": "domoritz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=domoritz&avatarId=46688",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=domoritz&avatarId=46688",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=domoritz&avatarId=46688",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=domoritz&avatarId=46688"
                        },
                        "displayName": "Dominik Moritz",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2022-01-16T17:29:34.027+0000",
                    "updated": "2022-01-16T17:29:34.027+0000"
                }
            ],
            "maxResults": 2,
            "total": 2,
            "startAt": 0
        },
        "customfield_12311820": "0|z0qgsw:",
        "customfield_12314139": null
    }
}