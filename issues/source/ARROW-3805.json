{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13198849",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13198849",
    "key": "ARROW-3805",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343858",
                "id": "12343858",
                "description": "",
                "name": "0.12.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-01-20"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=pravindra",
            "name": "pravindra",
            "key": "pravindra",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34055",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34055",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34055",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34055"
            },
            "displayName": "Pindikura Ravindra",
            "active": true,
            "timeZone": "Asia/Kolkata"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12334626",
                "id": "12334626",
                "name": "C++ - Gandiva"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=pravindra",
            "name": "pravindra",
            "key": "pravindra",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34055",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34055",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34055",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34055"
            },
            "displayName": "Pindikura Ravindra",
            "active": true,
            "timeZone": "Asia/Kolkata"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=pravindra",
            "name": "pravindra",
            "key": "pravindra",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34055",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34055",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34055",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34055"
            },
            "displayName": "Pindikura Ravindra",
            "active": true,
            "timeZone": "Asia/Kolkata"
        },
        "aggregateprogress": {
            "progress": 1800,
            "total": 1800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 1800,
            "total": 1800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3805/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 3,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13198849/worklog/166826",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pravindra opened a new pull request #2980: ARROW-3805: handle null validity bit-map in if-else\nURL: https://github.com/apache/arrow/pull/2980\n \n \n   - added a bitmap fn that returns true if there is no bitmap\r\n   - added more tests\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-16T10:13:02.773+0000",
                    "updated": "2018-11-16T10:13:02.773+0000",
                    "started": "2018-11-16T10:13:02.773+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "166826",
                    "issueId": "13198849"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13198849/worklog/166840",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #2980: ARROW-3805: handle null validity bit-map in if-else\nURL: https://github.com/apache/arrow/pull/2980#issuecomment-439359378\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/2980?src=pr&el=h1) Report\n   > Merging [#2980](https://codecov.io/gh/apache/arrow/pull/2980?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/f83454ca64c5b90598ccd88e004275bcbae39e75?src=pr&el=desc) will **increase** coverage by `1.02%`.\n   > The diff coverage is `100%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/2980/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/2980?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #2980      +/-   ##\n   ==========================================\n   + Coverage   86.64%   87.67%   +1.02%     \n   ==========================================\n     Files         491      423      -68     \n     Lines       69393    63974    -5419     \n   ==========================================\n   - Hits        60124    56087    -4037     \n   + Misses       9177     7887    -1290     \n   + Partials       92        0      -92\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/2980?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [cpp/src/gandiva/llvm\\_generator.h](https://codecov.io/gh/apache/arrow/pull/2980/diff?src=pr&el=tree#diff-Y3BwL3NyYy9nYW5kaXZhL2xsdm1fZ2VuZXJhdG9yLmg=) | `100% <\u00f8> (\u00f8)` | :arrow_up: |\n   | [cpp/src/gandiva/annotator.cc](https://codecov.io/gh/apache/arrow/pull/2980/diff?src=pr&el=tree#diff-Y3BwL3NyYy9nYW5kaXZhL2Fubm90YXRvci5jYw==) | `97.95% <\u00f8> (\u00f8)` | :arrow_up: |\n   | [cpp/src/gandiva/llvm\\_generator.cc](https://codecov.io/gh/apache/arrow/pull/2980/diff?src=pr&el=tree#diff-Y3BwL3NyYy9nYW5kaXZhL2xsdm1fZ2VuZXJhdG9yLmNj) | `76.41% <100%> (+0.16%)` | :arrow_up: |\n   | [cpp/src/plasma/thirdparty/ae/ae.c](https://codecov.io/gh/apache/arrow/pull/2980/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wbGFzbWEvdGhpcmRwYXJ0eS9hZS9hZS5j) | `72.03% <0%> (-0.95%)` | :arrow_down: |\n   | [rust/src/record\\_batch.rs](https://codecov.io/gh/apache/arrow/pull/2980/diff?src=pr&el=tree#diff-cnVzdC9zcmMvcmVjb3JkX2JhdGNoLnJz) | | |\n   | [go/arrow/array/table.go](https://codecov.io/gh/apache/arrow/pull/2980/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvdGFibGUuZ28=) | | |\n   | [rust/src/array.rs](https://codecov.io/gh/apache/arrow/pull/2980/diff?src=pr&el=tree#diff-cnVzdC9zcmMvYXJyYXkucnM=) | | |\n   | [go/arrow/math/uint64\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2980/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC91aW50NjRfYW1kNjQuZ28=) | | |\n   | [go/arrow/internal/testing/tools/bool.go](https://codecov.io/gh/apache/arrow/pull/2980/diff?src=pr&el=tree#diff-Z28vYXJyb3cvaW50ZXJuYWwvdGVzdGluZy90b29scy9ib29sLmdv) | | |\n   | [go/arrow/array/bufferbuilder.go](https://codecov.io/gh/apache/arrow/pull/2980/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvYnVmZmVyYnVpbGRlci5nbw==) | | |\n   | ... and [62 more](https://codecov.io/gh/apache/arrow/pull/2980/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/2980?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/2980?src=pr&el=footer). Last update [f83454c...2138f73](https://codecov.io/gh/apache/arrow/pull/2980?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-16T11:01:40.986+0000",
                    "updated": "2018-11-16T11:01:40.986+0000",
                    "started": "2018-11-16T11:01:40.985+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "166840",
                    "issueId": "13198849"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13198849/worklog/167199",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "xhochy closed pull request #2980: ARROW-3805: [Gandiva] Handle null validity bit-map in if-else\nURL: https://github.com/apache/arrow/pull/2980\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/cpp/src/gandiva/annotator.cc b/cpp/src/gandiva/annotator.cc\nindex 3c8585c910..754d70e0e0 100644\n--- a/cpp/src/gandiva/annotator.cc\n+++ b/cpp/src/gandiva/annotator.cc\n@@ -43,8 +43,6 @@ FieldDescriptorPtr Annotator::AddOutputFieldDescriptor(FieldPtr field) {\n }\n \n FieldDescriptorPtr Annotator::MakeDesc(FieldPtr field) {\n-  // TODO:\n-  // - validity is optional\n   int data_idx = buffer_count_++;\n   int validity_idx = buffer_count_++;\n   int offsets_idx = FieldDescriptor::kInvalidIdx;\ndiff --git a/cpp/src/gandiva/llvm_generator.cc b/cpp/src/gandiva/llvm_generator.cc\nindex 44ff21a9d8..82d0386cfb 100644\n--- a/cpp/src/gandiva/llvm_generator.cc\n+++ b/cpp/src/gandiva/llvm_generator.cc\n@@ -333,6 +333,16 @@ void LLVMGenerator::SetPackedBitValue(llvm::Value* bitmap, llvm::Value* position\n   AddFunctionCall(\"bitMapSetBit\", types()->void_type(), {bitmap8, position, value});\n }\n \n+/// Return value of a bit in validity bitMap (handles null bitmaps too).\n+llvm::Value* LLVMGenerator::GetPackedValidityBitValue(llvm::Value* bitmap,\n+                                                      llvm::Value* position) {\n+  ADD_TRACE(\"fetch validity bit at position %T\", position);\n+\n+  llvm::Value* bitmap8 = ir_builder()->CreateBitCast(\n+      bitmap, types()->ptr_type(types()->i8_type()), \"bitMapCast\");\n+  return AddFunctionCall(\"bitMapValidityGetBit\", types()->i1_type(), {bitmap8, position});\n+}\n+\n /// Clear the bit in bitMap if value = false.\n void LLVMGenerator::ClearPackedBitValueIfFalse(llvm::Value* bitmap, llvm::Value* position,\n                                                llvm::Value* value) {\n@@ -462,7 +472,7 @@ void LLVMGenerator::Visitor::Visit(const VectorReadVarLenValueDex& dex) {\n void LLVMGenerator::Visitor::Visit(const VectorReadValidityDex& dex) {\n   llvm::Value* slot_ref =\n       GetBufferReference(dex.ValidityIdx(), kBufferTypeValidity, dex.Field());\n-  llvm::Value* validity = generator_->GetPackedBitValue(slot_ref, loop_var_);\n+  llvm::Value* validity = generator_->GetPackedValidityBitValue(slot_ref, loop_var_);\n \n   ADD_VISITOR_TRACE(\"visit validity vector \" + dex.FieldName() + \" value %T\", validity);\n   result_.reset(new LValue(validity));\ndiff --git a/cpp/src/gandiva/llvm_generator.h b/cpp/src/gandiva/llvm_generator.h\nindex 255f8456b0..11a21dbce4 100644\n--- a/cpp/src/gandiva/llvm_generator.h\n+++ b/cpp/src/gandiva/llvm_generator.h\n@@ -175,6 +175,9 @@ class LLVMGenerator {\n   /// Generate code to get the bit value at 'position' in the bitmap.\n   llvm::Value* GetPackedBitValue(llvm::Value* bitmap, llvm::Value* position);\n \n+  /// Generate code to get the bit value at 'position' in the validity bitmap.\n+  llvm::Value* GetPackedValidityBitValue(llvm::Value* bitmap, llvm::Value* position);\n+\n   /// Generate code to set the bit value at 'position' in the bitmap to 'value'.\n   void SetPackedBitValue(llvm::Value* bitmap, llvm::Value* position, llvm::Value* value);\n \ndiff --git a/cpp/src/gandiva/precompiled/bitmap.cc b/cpp/src/gandiva/precompiled/bitmap.cc\nindex f3be00e431..b910cee0b1 100644\n--- a/cpp/src/gandiva/precompiled/bitmap.cc\n+++ b/cpp/src/gandiva/precompiled/bitmap.cc\n@@ -34,6 +34,16 @@ bool bitMapGetBit(const uint8_t* bmap, int64_t position) {\n   return arrow::BitUtil::GetBit(bmap, position);\n }\n \n+FORCE_INLINE\n+bool bitMapValidityGetBit(const uint8_t* bmap, int64_t position) {\n+  if (bmap == nullptr) {\n+    // if validity bitmap is null, all entries are valid.\n+    return true;\n+  } else {\n+    return bitMapGetBit(bmap, position);\n+  }\n+}\n+\n FORCE_INLINE\n void bitMapSetBit(uint8_t* bmap, int64_t position, bool value) {\n   arrow::BitUtil::SetBitTo(bmap, position, value);\ndiff --git a/cpp/src/gandiva/tests/CMakeLists.txt b/cpp/src/gandiva/tests/CMakeLists.txt\nindex 5efe1321be..3bef5cf45f 100644\n--- a/cpp/src/gandiva/tests/CMakeLists.txt\n+++ b/cpp/src/gandiva/tests/CMakeLists.txt\n@@ -31,4 +31,5 @@ foreach(lib_type \"shared\" \"static\")\n   add_gandiva_integ_test(to_string_test.cc gandiva_${lib_type})\n   add_gandiva_integ_test(hash_test.cc gandiva_${lib_type})\n   add_gandiva_integ_test(in_expr_test.cc gandiva_${lib_type})\n+  add_gandiva_integ_test(null_validity_test.cc gandiva_${lib_type})\n endforeach(lib_type)\ndiff --git a/cpp/src/gandiva/tests/filter_test.cc b/cpp/src/gandiva/tests/filter_test.cc\nindex f63899ac62..f95cdcc3fe 100644\n--- a/cpp/src/gandiva/tests/filter_test.cc\n+++ b/cpp/src/gandiva/tests/filter_test.cc\n@@ -290,50 +290,4 @@ TEST_F(TestFilter, TestSimpleSVInt32) {\n   EXPECT_ARROW_ARRAY_EQUALS(exp, selection_vector->ToArray());\n }\n \n-TEST_F(TestFilter, TestNullValidityBuffer) {\n-  // schema for input fields\n-  auto field0 = field(\"f0\", int32());\n-  auto field1 = field(\"f1\", int32());\n-  auto schema = arrow::schema({field0, field1});\n-\n-  // Build condition f0 + f1 < 10\n-  auto node_f0 = TreeExprBuilder::MakeField(field0);\n-  auto node_f1 = TreeExprBuilder::MakeField(field1);\n-  auto sum_func =\n-      TreeExprBuilder::MakeFunction(\"add\", {node_f0, node_f1}, arrow::int32());\n-  auto literal_10 = TreeExprBuilder::MakeLiteral((int32_t)10);\n-  auto less_than_10 = TreeExprBuilder::MakeFunction(\"less_than\", {sum_func, literal_10},\n-                                                    arrow::boolean());\n-  auto condition = TreeExprBuilder::MakeCondition(less_than_10);\n-\n-  std::shared_ptr<Filter> filter;\n-  Status status = Filter::Make(schema, condition, &filter);\n-  EXPECT_TRUE(status.ok());\n-\n-  // Create a row-batch with some sample data\n-  int num_records = 5;\n-\n-  auto array_ = MakeArrowArrayInt32({1, 2, 3, 4, 6}, {true, true, true, false, true});\n-  // Create an array without a validity buffer.\n-  auto array0 =\n-      std::make_shared<arrow::Int32Array>(5, array_->data()->buffers[1], nullptr, 0);\n-  auto array1 = MakeArrowArrayInt32({5, 9, 6, 17, 3}, {true, true, false, true, true});\n-  // expected output (indices for which condition matches)\n-  auto exp = MakeArrowArrayUint16({0, 4});\n-\n-  // prepare input record batch\n-  auto in_batch = arrow::RecordBatch::Make(schema, num_records, {array0, array1});\n-\n-  std::shared_ptr<SelectionVector> selection_vector;\n-  status = SelectionVector::MakeInt16(num_records, pool_, &selection_vector);\n-  EXPECT_TRUE(status.ok());\n-\n-  // Evaluate expression\n-  status = filter->Evaluate(*in_batch, selection_vector);\n-  EXPECT_TRUE(status.ok());\n-\n-  // Validate results\n-  EXPECT_ARROW_ARRAY_EQUALS(exp, selection_vector->ToArray());\n-}\n-\n }  // namespace gandiva\ndiff --git a/cpp/src/gandiva/tests/null_validity_test.cc b/cpp/src/gandiva/tests/null_validity_test.cc\nnew file mode 100644\nindex 0000000000..06cfdc08ba\n--- /dev/null\n+++ b/cpp/src/gandiva/tests/null_validity_test.cc\n@@ -0,0 +1,175 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <gtest/gtest.h>\n+#include \"arrow/memory_pool.h\"\n+#include \"gandiva/filter.h\"\n+#include \"gandiva/projector.h\"\n+#include \"gandiva/tests/test_util.h\"\n+#include \"gandiva/tree_expr_builder.h\"\n+\n+namespace gandiva {\n+\n+using arrow::boolean;\n+using arrow::int32;\n+using arrow::utf8;\n+\n+class TestNullValidity : public ::testing::Test {\n+ public:\n+  void SetUp() { pool_ = arrow::default_memory_pool(); }\n+\n+ protected:\n+  arrow::MemoryPool* pool_;\n+};\n+\n+// Create an array without a validity buffer.\n+ArrayPtr MakeArrowArrayInt32WithNullValidity(std::vector<int32_t> in_data) {\n+  auto array = MakeArrowArrayInt32(in_data);\n+  return std::make_shared<arrow::Int32Array>(in_data.size(), array->data()->buffers[1],\n+                                             nullptr, 0);\n+}\n+\n+TEST_F(TestNullValidity, TestFunc) {\n+  // schema for input fields\n+  auto field0 = field(\"f0\", int32());\n+  auto field1 = field(\"f1\", int32());\n+  auto schema = arrow::schema({field0, field1});\n+\n+  // Build condition f0 + f1 < 10\n+  auto node_f0 = TreeExprBuilder::MakeField(field0);\n+  auto node_f1 = TreeExprBuilder::MakeField(field1);\n+  auto sum_func =\n+      TreeExprBuilder::MakeFunction(\"add\", {node_f0, node_f1}, arrow::int32());\n+  auto literal_10 = TreeExprBuilder::MakeLiteral((int32_t)10);\n+  auto less_than_10 = TreeExprBuilder::MakeFunction(\"less_than\", {sum_func, literal_10},\n+                                                    arrow::boolean());\n+  auto condition = TreeExprBuilder::MakeCondition(less_than_10);\n+\n+  std::shared_ptr<Filter> filter;\n+  Status status = Filter::Make(schema, condition, &filter);\n+  EXPECT_TRUE(status.ok());\n+\n+  // Create a row-batch with some sample data\n+  int num_records = 5;\n+\n+  // Create an array without a validity buffer.\n+  auto array0 = MakeArrowArrayInt32WithNullValidity({1, 2, 3, 4, 6});\n+  auto array1 = MakeArrowArrayInt32({5, 9, 6, 17, 3}, {true, true, false, true, true});\n+  // expected output (indices for which condition matches)\n+  auto exp = MakeArrowArrayUint16({0, 4});\n+\n+  // prepare input record batch\n+  auto in_batch = arrow::RecordBatch::Make(schema, num_records, {array0, array1});\n+\n+  std::shared_ptr<SelectionVector> selection_vector;\n+  status = SelectionVector::MakeInt16(num_records, pool_, &selection_vector);\n+  EXPECT_TRUE(status.ok());\n+\n+  // Evaluate expression\n+  status = filter->Evaluate(*in_batch, selection_vector);\n+  EXPECT_TRUE(status.ok());\n+\n+  // Validate results\n+  EXPECT_ARROW_ARRAY_EQUALS(exp, selection_vector->ToArray());\n+}\n+\n+TEST_F(TestNullValidity, TestIfElse) {\n+  // schema for input fields\n+  auto fielda = field(\"a\", int32());\n+  auto fieldb = field(\"b\", int32());\n+  auto schema = arrow::schema({fielda, fieldb});\n+\n+  // output fields\n+  auto field_result = field(\"res\", int32());\n+\n+  // build expression.\n+  // if (a > b)\n+  //   a\n+  // else\n+  //   b\n+  auto node_a = TreeExprBuilder::MakeField(fielda);\n+  auto node_b = TreeExprBuilder::MakeField(fieldb);\n+  auto condition =\n+      TreeExprBuilder::MakeFunction(\"greater_than\", {node_a, node_b}, boolean());\n+  auto if_node = TreeExprBuilder::MakeIf(condition, node_a, node_b, int32());\n+\n+  auto expr = TreeExprBuilder::MakeExpression(if_node, field_result);\n+\n+  // Build a projector for the expressions.\n+  std::shared_ptr<Projector> projector;\n+  Status status = Projector::Make(schema, {expr}, &projector);\n+  EXPECT_TRUE(status.ok());\n+\n+  // Create a row-batch with some sample data\n+  int num_records = 4;\n+  auto array0 = MakeArrowArrayInt32WithNullValidity({10, 12, -20, 5});\n+  auto array1 = MakeArrowArrayInt32({5, 15, 15, 17});\n+\n+  // expected output\n+  auto exp = MakeArrowArrayInt32({10, 15, 15, 17}, {true, true, true, true});\n+\n+  // prepare input record batch\n+  auto in_batch = arrow::RecordBatch::Make(schema, num_records, {array0, array1});\n+\n+  // Evaluate expression\n+  arrow::ArrayVector outputs;\n+  status = projector->Evaluate(*in_batch, pool_, &outputs);\n+  EXPECT_TRUE(status.ok());\n+\n+  // Validate results\n+  EXPECT_ARROW_ARRAY_EQUALS(exp, outputs.at(0));\n+}\n+\n+TEST_F(TestNullValidity, TestUtf8) {\n+  // schema for input fields\n+  auto field_a = field(\"a\", utf8());\n+  auto schema = arrow::schema({field_a});\n+\n+  // output fields\n+  auto res = field(\"res1\", int32());\n+\n+  // build expressions.\n+  // length(a)\n+  auto expr = TreeExprBuilder::MakeExpression(\"length\", {field_a}, res);\n+\n+  // Build a projector for the expressions.\n+  std::shared_ptr<Projector> projector;\n+  Status status = Projector::Make(schema, {expr}, &projector);\n+  EXPECT_TRUE(status.ok()) << status.message();\n+\n+  // Create a row-batch with some sample data\n+  int num_records = 5;\n+  auto array_v = MakeArrowArrayUtf8({\"foo\", \"hello\", \"bye\", \"hi\", \"\u092e\u0926\u0928\"});\n+  auto array_a = std::make_shared<arrow::StringArray>(\n+      num_records, array_v->data()->buffers[1], array_v->data()->buffers[2]);\n+\n+  // expected output\n+  auto exp = MakeArrowArrayInt32({3, 5, 3, 2, 3}, {true, true, true, true, true});\n+\n+  // prepare input record batch\n+  auto in_batch = arrow::RecordBatch::Make(schema, num_records, {array_a});\n+\n+  // Evaluate expression\n+  arrow::ArrayVector outputs;\n+  status = projector->Evaluate(*in_batch, pool_, &outputs);\n+  EXPECT_TRUE(status.ok());\n+\n+  // Validate results\n+  EXPECT_ARROW_ARRAY_EQUALS(exp, outputs.at(0));\n+}\n+\n+}  // namespace gandiva\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-17T18:11:36.552+0000",
                    "updated": "2018-11-17T18:11:36.552+0000",
                    "started": "2018-11-17T18:11:36.551+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "167199",
                    "issueId": "13198849"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
            "id": "1",
            "description": "A problem which impairs or prevents the functions of the product.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
            "name": "Bug",
            "subtask": false,
            "avatarId": 21133
        },
        "timespent": 1800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@46ecae50[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@78acf649[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@19e9ee5f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@6684d95[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6a50e2c9[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@72d7f169[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@241a627a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@60da9789[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@df177f1[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@40e0939f[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@379e204b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@34c9fee[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 1800,
        "customfield_12312520": null,
        "customfield_12312521": "Sat Nov 17 18:11:49 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-11-17T18:11:49.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3805/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2018-11-16T09:05:23.000+0000",
        "updated": "2018-11-17T18:11:49.000+0000",
        "timeoriginalestimate": null,
        "description": "This is a follow-up to the changes in ARROW-3765\r\n\r\n[~suquark] [~pcmoritz] [~praveenbingo]",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "0.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 1800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Gandiva] handle null validity bitmap in if-else expressions",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13198849/comment/16689300",
                    "id": "16689300",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=pravindra",
                        "name": "pravindra",
                        "key": "pravindra",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34055",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34055",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34055",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34055"
                        },
                        "displayName": "Pindikura Ravindra",
                        "active": true,
                        "timeZone": "Asia/Kolkata"
                    },
                    "body": "[~praveenbingo]\u00a0[~suquark] can you pls review ?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=pravindra",
                        "name": "pravindra",
                        "key": "pravindra",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34055",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34055",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34055",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34055"
                        },
                        "displayName": "Pindikura Ravindra",
                        "active": true,
                        "timeZone": "Asia/Kolkata"
                    },
                    "created": "2018-11-16T11:19:05.099+0000",
                    "updated": "2018-11-16T11:19:05.099+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13198849/comment/16690651",
                    "id": "16690651",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "body": "Issue resolved by pull request 2980\n[https://github.com/apache/arrow/pull/2980]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "created": "2018-11-17T18:11:49.427+0000",
                    "updated": "2018-11-17T18:11:49.427+0000"
                }
            ],
            "maxResults": 2,
            "total": 2,
            "startAt": 0
        },
        "customfield_12311820": "0|s00kk8:",
        "customfield_12314139": null
    }
}