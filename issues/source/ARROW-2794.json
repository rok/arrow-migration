{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13170146",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13170146",
    "key": "ARROW-2794",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12342562",
                "id": "12342562",
                "description": "",
                "name": "0.10.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-08-06"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=guoyuhong85",
            "name": "guoyuhong85",
            "key": "guoyuhong85",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=guoyuhong85&avatarId=36251",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=guoyuhong85&avatarId=36251",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=guoyuhong85&avatarId=36251",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=guoyuhong85&avatarId=36251"
            },
            "displayName": "Yuhong Guo",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12332956",
                "id": "12332956",
                "name": "C++ - Plasma"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=pcmoritz",
            "name": "pcmoritz",
            "key": "pcmoritz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Philipp Moritz",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=pcmoritz",
            "name": "pcmoritz",
            "key": "pcmoritz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Philipp Moritz",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 600,
            "total": 600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 600,
            "total": 600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2794/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 1,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13170146/worklog/119173",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pcmoritz closed pull request #2174: ARROW-2794: [Plasma] Add the RPC of a list of Delete Objects in Plasma\nURL: https://github.com/apache/arrow/pull/2174\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/cpp/src/plasma/client.cc b/cpp/src/plasma/client.cc\nindex 8e66cf463c..95da0893c7 100644\n--- a/cpp/src/plasma/client.cc\n+++ b/cpp/src/plasma/client.cc\n@@ -182,7 +182,7 @@ class PlasmaClient::Impl : public std::enable_shared_from_this<PlasmaClient::Imp\n \n   Status Seal(const ObjectID& object_id);\n \n-  Status Delete(const ObjectID& object_id);\n+  Status Delete(const std::vector<ObjectID>& object_ids);\n \n   Status Evict(int64_t num_bytes, int64_t& num_bytes_evicted);\n \n@@ -808,21 +808,26 @@ Status PlasmaClient::Impl::Abort(const ObjectID& object_id) {\n   return ReadAbortReply(buffer.data(), buffer.size(), &id);\n }\n \n-Status PlasmaClient::Impl::Delete(const ObjectID& object_id) {\n+Status PlasmaClient::Impl::Delete(const std::vector<ObjectID>& object_ids) {\n   RETURN_NOT_OK(FlushReleaseHistory());\n-  // If the object is in used, client can't send the remove message.\n-  if (objects_in_use_.count(object_id) > 0) {\n-    return Status::UnknownError(\"PlasmaClient::Object is in use.\");\n-  } else {\n-    // If we don't already have a reference to the object, we can try to remove the object\n-    RETURN_NOT_OK(SendDeleteRequest(store_conn_, object_id));\n+  std::vector<ObjectID> not_in_use_ids;\n+  for (auto& object_id : object_ids) {\n+    // If the object is in used, skip it.\n+    if (objects_in_use_.count(object_id) == 0) {\n+      not_in_use_ids.push_back(object_id);\n+    }\n+  }\n+  if (not_in_use_ids.size() > 0) {\n+    RETURN_NOT_OK(SendDeleteRequest(store_conn_, not_in_use_ids));\n     std::vector<uint8_t> buffer;\n     RETURN_NOT_OK(PlasmaReceive(store_conn_, MessageType::PlasmaDeleteReply, &buffer));\n-    ObjectID object_id2;\n     DCHECK_GT(buffer.size(), 0);\n-    RETURN_NOT_OK(ReadDeleteReply(buffer.data(), buffer.size(), &object_id2));\n-    return Status::OK();\n+    std::vector<PlasmaError> error_codes;\n+    not_in_use_ids.clear();\n+    RETURN_NOT_OK(\n+        ReadDeleteReply(buffer.data(), buffer.size(), &not_in_use_ids, &error_codes));\n   }\n+  return Status::OK();\n }\n \n Status PlasmaClient::Impl::Evict(int64_t num_bytes, int64_t& num_bytes_evicted) {\n@@ -1036,7 +1041,11 @@ Status PlasmaClient::Abort(const ObjectID& object_id) { return impl_->Abort(obje\n Status PlasmaClient::Seal(const ObjectID& object_id) { return impl_->Seal(object_id); }\n \n Status PlasmaClient::Delete(const ObjectID& object_id) {\n-  return impl_->Delete(object_id);\n+  return impl_->Delete(std::vector<ObjectID>{object_id});\n+}\n+\n+Status PlasmaClient::Delete(const std::vector<ObjectID>& object_ids) {\n+  return impl_->Delete(object_ids);\n }\n \n Status PlasmaClient::Evict(int64_t num_bytes, int64_t& num_bytes_evicted) {\ndiff --git a/cpp/src/plasma/client.h b/cpp/src/plasma/client.h\nindex 5501488144..fe0019363e 100644\n--- a/cpp/src/plasma/client.h\n+++ b/cpp/src/plasma/client.h\n@@ -179,6 +179,14 @@ class ARROW_EXPORT PlasmaClient {\n   /// \\return The return status.\n   Status Delete(const ObjectID& object_id);\n \n+  /// Delete a list of objects from the object store. This currently assumes that the\n+  /// object is present, has been sealed and not used by another client. Otherwise,\n+  /// it is a no operation.\n+  ///\n+  /// \\param object_ids The list of IDs of the objects to delete.\n+  /// \\return The return status. If all the objects are non-existent, return OK.\n+  Status Delete(const std::vector<ObjectID>& object_ids);\n+\n   /// Delete objects until we have freed up num_bytes bytes or there are no more\n   /// released objects that can be deleted.\n   ///\ndiff --git a/cpp/src/plasma/format/plasma.fbs b/cpp/src/plasma/format/plasma.fbs\nindex 0bc7a072bf..333e7d7c20 100644\n--- a/cpp/src/plasma/format/plasma.fbs\n+++ b/cpp/src/plasma/format/plasma.fbs\n@@ -200,15 +200,19 @@ table PlasmaReleaseReply {\n }\n \n table PlasmaDeleteRequest {\n+  // The number of objects to delete.\n+  count: int;\n   // ID of the object to be deleted.\n-  object_id: string;\n+  object_ids: [string];\n }\n \n table PlasmaDeleteReply {\n+  // The number of objects to delete.\n+  count: int;\n   // ID of the object that was deleted.\n-  object_id: string;\n+  object_ids: [string];\n   // Error code.\n-  error: PlasmaError;\n+  errors: [PlasmaError];\n }\n \n table PlasmaStatusRequest {\ndiff --git a/cpp/src/plasma/protocol.cc b/cpp/src/plasma/protocol.cc\nindex 0503e10f54..0d55505aa1 100644\n--- a/cpp/src/plasma/protocol.cc\n+++ b/cpp/src/plasma/protocol.cc\n@@ -50,6 +50,18 @@ Status PlasmaReceive(int sock, MessageType message_type, std::vector<uint8_t>* b\n   return Status::OK();\n }\n \n+// Helper function to create a vector of elements from Data (Request/Reply struct).\n+// The Getter function is used to extract one element from Data.\n+template <typename T, typename Data, typename Getter>\n+void to_vector(const Data& request, std::vector<T>* out, const Getter& getter) {\n+  int count = request.count();\n+  out->clear();\n+  out->reserve(count);\n+  for (int i = 0; i < count; ++i) {\n+    out->push_back(getter(request, i));\n+  }\n+}\n+\n template <typename Message>\n Status PlasmaSend(int sock, MessageType message_type, flatbuffers::FlatBufferBuilder* fbb,\n                   const Message& message) {\n@@ -230,35 +242,52 @@ Status ReadReleaseReply(uint8_t* data, size_t size, ObjectID* object_id) {\n   return plasma_error_status(message->error());\n }\n \n-// Delete messages.\n+// Delete objects messages.\n \n-Status SendDeleteRequest(int sock, ObjectID object_id) {\n+Status SendDeleteRequest(int sock, const std::vector<ObjectID>& object_ids) {\n   flatbuffers::FlatBufferBuilder fbb;\n-  auto message = CreatePlasmaDeleteRequest(fbb, fbb.CreateString(object_id.binary()));\n+  auto message =\n+      CreatePlasmaDeleteRequest(fbb, static_cast<int32_t>(object_ids.size()),\n+                                to_flatbuffer(&fbb, &object_ids[0], object_ids.size()));\n   return PlasmaSend(sock, MessageType::PlasmaDeleteRequest, &fbb, message);\n }\n \n-Status ReadDeleteRequest(uint8_t* data, size_t size, ObjectID* object_id) {\n+Status ReadDeleteRequest(uint8_t* data, size_t size, std::vector<ObjectID>* object_ids) {\n   DCHECK(data);\n-  auto message = flatbuffers::GetRoot<PlasmaReleaseReply>(data);\n+  DCHECK(object_ids);\n+  auto message = flatbuffers::GetRoot<PlasmaDeleteRequest>(data);\n   DCHECK(verify_flatbuffer(message, data, size));\n-  *object_id = ObjectID::from_binary(message->object_id()->str());\n+  to_vector(*message, object_ids, [](const PlasmaDeleteRequest& request, int i) {\n+    return ObjectID::from_binary(request.object_ids()->Get(i)->str());\n+  });\n   return Status::OK();\n }\n \n-Status SendDeleteReply(int sock, ObjectID object_id, PlasmaError error) {\n+Status SendDeleteReply(int sock, const std::vector<ObjectID>& object_ids,\n+                       const std::vector<PlasmaError>& errors) {\n+  DCHECK(object_ids.size() == errors.size());\n   flatbuffers::FlatBufferBuilder fbb;\n-  auto message =\n-      CreatePlasmaDeleteReply(fbb, fbb.CreateString(object_id.binary()), error);\n+  auto message = CreatePlasmaDeleteReply(\n+      fbb, static_cast<int32_t>(object_ids.size()),\n+      to_flatbuffer(&fbb, &object_ids[0], object_ids.size()),\n+      fbb.CreateVector(reinterpret_cast<const int32_t*>(&errors[0]), object_ids.size()));\n   return PlasmaSend(sock, MessageType::PlasmaDeleteReply, &fbb, message);\n }\n \n-Status ReadDeleteReply(uint8_t* data, size_t size, ObjectID* object_id) {\n+Status ReadDeleteReply(uint8_t* data, size_t size, std::vector<ObjectID>* object_ids,\n+                       std::vector<PlasmaError>* errors) {\n   DCHECK(data);\n+  DCHECK(object_ids);\n+  DCHECK(errors);\n   auto message = flatbuffers::GetRoot<PlasmaDeleteReply>(data);\n   DCHECK(verify_flatbuffer(message, data, size));\n-  *object_id = ObjectID::from_binary(message->object_id()->str());\n-  return plasma_error_status(message->error());\n+  to_vector(*message, object_ids, [](const PlasmaDeleteReply& request, int i) {\n+    return ObjectID::from_binary(request.object_ids()->Get(i)->str());\n+  });\n+  to_vector(*message, errors, [](const PlasmaDeleteReply& request, int i) {\n+    return static_cast<PlasmaError>(request.errors()->data()[i]);\n+  });\n+  return Status::OK();\n }\n \n // Satus messages.\ndiff --git a/cpp/src/plasma/protocol.h b/cpp/src/plasma/protocol.h\nindex 2b477a8a3d..1e34343fa4 100644\n--- a/cpp/src/plasma/protocol.h\n+++ b/cpp/src/plasma/protocol.h\n@@ -100,15 +100,17 @@ Status SendReleaseReply(int sock, ObjectID object_id, PlasmaError error);\n \n Status ReadReleaseReply(uint8_t* data, size_t size, ObjectID* object_id);\n \n-/* Plasma Delete message functions. */\n+/* Plasma Delete objects message functions. */\n \n-Status SendDeleteRequest(int sock, ObjectID object_id);\n+Status SendDeleteRequest(int sock, const std::vector<ObjectID>& object_ids);\n \n-Status ReadDeleteRequest(uint8_t* data, size_t size, ObjectID* object_id);\n+Status ReadDeleteRequest(uint8_t* data, size_t size, std::vector<ObjectID>* object_ids);\n \n-Status SendDeleteReply(int sock, ObjectID object_id, PlasmaError error);\n+Status SendDeleteReply(int sock, const std::vector<ObjectID>& object_ids,\n+                       const std::vector<PlasmaError>& errors);\n \n-Status ReadDeleteReply(uint8_t* data, size_t size, ObjectID* object_id);\n+Status ReadDeleteReply(uint8_t* data, size_t size, std::vector<ObjectID>* object_ids,\n+                       std::vector<PlasmaError>* errors);\n \n /* Satus messages. */\n \ndiff --git a/cpp/src/plasma/store.cc b/cpp/src/plasma/store.cc\nindex e86db21dcb..c8bf466f44 100644\n--- a/cpp/src/plasma/store.cc\n+++ b/cpp/src/plasma/store.cc\n@@ -742,9 +742,14 @@ Status PlasmaStore::process_message(Client* client) {\n       release_object(object_id, client);\n     } break;\n     case MessageType::PlasmaDeleteRequest: {\n-      RETURN_NOT_OK(ReadDeleteRequest(input, input_size, &object_id));\n-      PlasmaError error_code = delete_object(object_id);\n-      HANDLE_SIGPIPE(SendDeleteReply(client->fd, object_id, error_code), client->fd);\n+      std::vector<ObjectID> object_ids;\n+      std::vector<PlasmaError> error_codes;\n+      RETURN_NOT_OK(ReadDeleteRequest(input, input_size, &object_ids));\n+      error_codes.reserve(object_ids.size());\n+      for (auto& object_id : object_ids) {\n+        error_codes.push_back(delete_object(object_id));\n+      }\n+      HANDLE_SIGPIPE(SendDeleteReply(client->fd, object_ids, error_codes), client->fd);\n     } break;\n     case MessageType::PlasmaContainsRequest: {\n       RETURN_NOT_OK(ReadContainsRequest(input, input_size, &object_id));\ndiff --git a/cpp/src/plasma/test/client_tests.cc b/cpp/src/plasma/test/client_tests.cc\nindex fa7de04799..e40f6d9491 100644\n--- a/cpp/src/plasma/test/client_tests.cc\n+++ b/cpp/src/plasma/test/client_tests.cc\n@@ -165,7 +165,7 @@ TEST_F(TestPlasmaStore, DeleteTest) {\n \n   // Test for deleting non-existance object.\n   Status result = client_.Delete(object_id);\n-  ASSERT_TRUE(result.IsPlasmaObjectNonexistent());\n+  ARROW_CHECK_OK(result);\n \n   // Test for the object being in local Plasma store.\n   // First create object.\n@@ -176,15 +176,42 @@ TEST_F(TestPlasmaStore, DeleteTest) {\n   ARROW_CHECK_OK(client_.Create(object_id, data_size, metadata, metadata_size, &data));\n   ARROW_CHECK_OK(client_.Seal(object_id));\n \n-  // Object is in use, can't be delete.\n   result = client_.Delete(object_id);\n-  ASSERT_TRUE(result.IsUnknownError());\n+  // TODO: Guarantee that the in-use object will be deleted when it is released.\n+  ARROW_CHECK_OK(result);\n \n   // Avoid race condition of Plasma Manager waiting for notification.\n   ARROW_CHECK_OK(client_.Release(object_id));\n   ARROW_CHECK_OK(client_.Delete(object_id));\n }\n \n+TEST_F(TestPlasmaStore, DeleteObjectsTest) {\n+  ObjectID object_id1 = ObjectID::from_random();\n+  ObjectID object_id2 = ObjectID::from_random();\n+\n+  // Test for deleting non-existance object.\n+  Status result = client_.Delete(std::vector<ObjectID>{object_id1, object_id2});\n+  ARROW_CHECK_OK(result);\n+  // Test for the object being in local Plasma store.\n+  // First create object.\n+  int64_t data_size = 100;\n+  uint8_t metadata[] = {5};\n+  int64_t metadata_size = sizeof(metadata);\n+  std::shared_ptr<Buffer> data;\n+  ARROW_CHECK_OK(client_.Create(object_id1, data_size, metadata, metadata_size, &data));\n+  ARROW_CHECK_OK(client_.Seal(object_id1));\n+  ARROW_CHECK_OK(client_.Create(object_id2, data_size, metadata, metadata_size, &data));\n+  ARROW_CHECK_OK(client_.Seal(object_id2));\n+  // Objects are in use.\n+  result = client_.Delete(std::vector<ObjectID>{object_id1, object_id2});\n+  // TODO: Guarantee that the in-use object will be deleted when it is released.\n+  ARROW_CHECK_OK(result);\n+  // Avoid race condition of Plasma Manager waiting for notification.\n+  ARROW_CHECK_OK(client_.Release(object_id1));\n+  ARROW_CHECK_OK(client_.Release(object_id2));\n+  ARROW_CHECK_OK(client_.Delete(std::vector<ObjectID>{object_id1, object_id2}));\n+}\n+\n TEST_F(TestPlasmaStore, ContainsTest) {\n   ObjectID object_id = ObjectID::from_random();\n \ndiff --git a/cpp/src/plasma/test/serialization_tests.cc b/cpp/src/plasma/test/serialization_tests.cc\nindex e05c1b4f62..1b445f2913 100644\n--- a/cpp/src/plasma/test/serialization_tests.cc\n+++ b/cpp/src/plasma/test/serialization_tests.cc\n@@ -223,12 +223,13 @@ TEST(PlasmaSerialization, ReleaseReply) {\n TEST(PlasmaSerialization, DeleteRequest) {\n   int fd = create_temp_file();\n   ObjectID object_id1 = ObjectID::from_random();\n-  ARROW_CHECK_OK(SendDeleteRequest(fd, object_id1));\n+  ARROW_CHECK_OK(SendDeleteRequest(fd, std::vector<ObjectID>{object_id1}));\n   std::vector<uint8_t> data =\n       read_message_from_file(fd, MessageType::PlasmaDeleteRequest);\n-  ObjectID object_id2;\n-  ARROW_CHECK_OK(ReadDeleteRequest(data.data(), data.size(), &object_id2));\n-  ASSERT_EQ(object_id1, object_id2);\n+  std::vector<ObjectID> object_vec;\n+  ARROW_CHECK_OK(ReadDeleteRequest(data.data(), data.size(), &object_vec));\n+  ASSERT_EQ(object_vec.size(), 1);\n+  ASSERT_EQ(object_id1, object_vec[0]);\n   close(fd);\n }\n \n@@ -236,12 +237,17 @@ TEST(PlasmaSerialization, DeleteReply) {\n   int fd = create_temp_file();\n   ObjectID object_id1 = ObjectID::from_random();\n   PlasmaError error1 = PlasmaError::ObjectExists;\n-  ARROW_CHECK_OK(SendDeleteReply(fd, object_id1, error1));\n+  ARROW_CHECK_OK(SendDeleteReply(fd, std::vector<ObjectID>{object_id1},\n+                                 std::vector<PlasmaError>{error1}));\n   std::vector<uint8_t> data = read_message_from_file(fd, MessageType::PlasmaDeleteReply);\n-  ObjectID object_id2;\n-  Status s = ReadDeleteReply(data.data(), data.size(), &object_id2);\n-  ASSERT_EQ(object_id1, object_id2);\n-  ASSERT_TRUE(s.IsPlasmaObjectExists());\n+  std::vector<ObjectID> object_vec;\n+  std::vector<PlasmaError> error_vec;\n+  Status s = ReadDeleteReply(data.data(), data.size(), &object_vec, &error_vec);\n+  ASSERT_EQ(object_vec.size(), 1);\n+  ASSERT_EQ(object_id1, object_vec[0]);\n+  ASSERT_EQ(error_vec.size(), 1);\n+  ASSERT_TRUE(error_vec[0] == PlasmaError::ObjectExists);\n+  ASSERT_TRUE(s.ok());\n   close(fd);\n }\n \n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-07-04T23:26:23.732+0000",
                    "updated": "2018-07-04T23:26:23.732+0000",
                    "started": "2018-07-04T23:26:23.731+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "119173",
                    "issueId": "13170146"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@39df00dc[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@31e8282e[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3a9e906[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@73700805[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4bf732cc[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@7c971e6[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4be459c0[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@38a74099[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4ab47413[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@63e7ae2[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6f7d19bc[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@6ddc2f42[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 600,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Jul 04 23:26:24 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-07-04T23:26:24.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2794/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2018-07-04T23:25:10.000+0000",
        "updated": "2018-07-27T15:32:08.000+0000",
        "timeoriginalestimate": null,
        "description": "This improves efficiency since multiple objects can be deleted with a single RPC.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Plasma] Add Delete method for multiple objects",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13170146/comment/16533125",
                    "id": "16533125",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=pcmoritz",
                        "name": "pcmoritz",
                        "key": "pcmoritz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Philipp Moritz",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Issue resolved by pull request 2174\n[https://github.com/apache/arrow/pull/2174]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=pcmoritz",
                        "name": "pcmoritz",
                        "key": "pcmoritz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Philipp Moritz",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-07-04T23:26:24.249+0000",
                    "updated": "2018-07-04T23:26:24.249+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|i3vjzz:",
        "customfield_12314139": null
    }
}