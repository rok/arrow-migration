{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13386923",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13386923",
    "key": "ARROW-13227",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12350323",
                "id": "12350323",
                "description": "",
                "name": "6.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-10-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available",
            "query-engine"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12619227",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12619227",
                "type": {
                    "id": "12310460",
                    "name": "Child-Issue",
                    "inward": "is a child of",
                    "outward": "is a parent of",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310460"
                },
                "inwardIssue": {
                    "id": "13376404",
                    "key": "ARROW-12633",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13376404",
                    "fields": {
                        "summary": "[C++] Query engine umbrella issue",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
            "name": "bkietz",
            "key": "bkietz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
            },
            "displayName": "Ben Kietzman",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
            "name": "bkietz",
            "key": "bkietz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
            },
            "displayName": "Ben Kietzman",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
            "name": "bkietz",
            "key": "bkietz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
            },
            "displayName": "Ben Kietzman",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 12000,
            "total": 12000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 12000,
            "total": 12000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-13227/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 20,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13386923/worklog/659698",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #11309:\nURL: https://github.com/apache/arrow/pull/11309#issuecomment-933656623\n\n\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-04T16:36:21.551+0000",
                    "updated": "2021-10-04T16:36:21.551+0000",
                    "started": "2021-10-04T16:36:21.551+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "659698",
                    "issueId": "13386923"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13386923/worklog/659725",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] removed a comment on pull request #11309:\nURL: https://github.com/apache/arrow/pull/11309#issuecomment-933656647\n\n\n   :warning: Ticket **has not been started in JIRA**, please click 'Start Progress'.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-04T17:17:34.630+0000",
                    "updated": "2021-10-04T17:17:34.630+0000",
                    "started": "2021-10-04T17:17:34.629+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "659725",
                    "issueId": "13386923"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13386923/worklog/661072",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #11309:\nURL: https://github.com/apache/arrow/pull/11309#discussion_r723491214\n\n\n\n##########\nFile path: docs/source/cpp/compute.rst\n##########\n@@ -50,6 +50,8 @@ both array (chunked or not) and scalar inputs, however some will mandate\n either.  For example, while ``sort_indices`` requires its first and only\n input to be an array.\n \n+.. _invoking compute functions:\n\nReview comment:\n       Not sure it's allowed to use spaces for references. We use underscores or dashes in other parts of the docs.\n\n##########\nFile path: docs/source/cpp/streaming_execution.rst\n##########\n@@ -0,0 +1,291 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+.. cpp:namespace:: arrow::compute\n+\n+==========================\n+Streaming execution engine\n+==========================\n+\n+.. warning::\n+\n+    The streaming execution engine is experimental, and a stable API\n+    is not yet guaranteed.\n+\n+Motivation\n+----------\n+\n+For many complex computations, successive direct `invocation of\n+compute functions <invoking compute functions>` is not feasible\n+in either memory or computation time. Doing so causes all intermediate\n+data to be fully materialized. To facilitate arbitrarily large inputs\n+and more efficient resource usage, arrow also provides a streaming query\n+engine with which computations can be formulated and executed.\n+\n+.. image:: simple_graph.svg\n+\n+:class:`ExecNode` is provided to reify the graph of operations in a query.\n+Batches of data (struct:`ExecBatch`) flow along edges of the graph from\n+node to node. Structuring the API around a stream of batches allows the\n+working set for each node to be tuned for optimal performance independent\n+of any other nodes in the graph. Each :class:`ExecNode` processes batches\n+as they are pushed to it along an edge of the graph by upstream nodes\n+(its inputs), and pushes batches along an edge of the graph to downstream\n+nodes (its outputs) as they are finalized.\n+\n+.. [shaikhha et al] SHAIKHHA, A., DASHTI, M., & KOCH, C. (2018). Push versus pull-based loop fusion in query engines. Journal of Functional Programming, 28. https://doi.org/10.1017/s0956796818000102\n+\n+Overview\n+--------\n+\n+:class:`ExecNode`\n+  Each node in the graph is an implementation of the :class:`ExecNode` interface.\n+\n+:class:`ExecPlan`\n+  A set of :class:`ExecNode` is contained and (to an extent) coordinated by an\n+  :class:`ExecPlan`.\n+\n+:class:`ExecFactoryRegistry`\n+  Instances of :class:`ExecNode` are constructed by factory functions held\n+  in a :class:`ExecFactoryRegistry`.\n+\n+:class:`ExecNodeOptions`\n+  Heterogenous parameters for factories of :class:`ExecNode` are bundled in an\n+  :class:`ExecNodeOptions`.\n+\n+:struct:`Declaration`\n+  ``dplyr``-inspired helper for efficient construction of an :class:`ExecPlan`.\n+\n+:struct:`ExecBatch`\n+  A lightweight container for a single chunk of arrow-formatted data. In contrast\n+  to :class:`RecordBatch`, :struct:`ExecBatch` is intended for use exclusively\n+  in a streaming execution context (for example, it will never have a corresponding\n+  Python binding). Furthermore columns which happen to have a constant value may\n+  be represented by a :class:`Scalar` instead of an :class:`Array`. In addition,\n+  :struct:`ExecBatch` may carry execution-relevant properties including a\n+  guaranteed-true-filter for :class:`Expression` simplification.\n+\n+\n+An example :class:`ExecNode` implementation which simlpy passes all input batches\n+through unchanged::\n+\n+    class PassthruNode : public ExecNode {\n+     public:\n+      // InputReceived is the main entry point for ExecNodes. It is invoked\n+      // by an input of this node to push a batch here for processing.\n+      void InputReceived(ExecNode* input, ExecBatch batch) override {\n+        // Since this is a passthru node we simply push the batch to our\n+        // only output here.\n+        outputs_[0]->InputReceived(this, batch);\n+      }\n+\n+      // ErrorRecieved is called by an input of this node to report an error.\n+      void ErrorReceived(ExecNode* input, Status error) override {\n+        outputs_[0]->ErrorReceived(this, error);\n+      }\n+\n+      // InputFinished is used to signal how many batches will ultimately arrive.\n+      // It may be called with any ordering relative to InputReceived/ErrorReceived.\n+      void InputFinished(ExecNode* input, int total_batches) override {\n+        outputs_[0]->InputFinished(this, total_batches);\n+      }\n+\n+      // ExecNodes may request that their inputs throttle production of batches\n+      // until they are ready for more, or stop production if no further batches\n+      // are required.\n+      void ResumeProducing(ExecNode* output) override { inputs_[0]->ResumeProducing(this); }\n+      void PauseProducing(ExecNode* output) override { inputs_[0]->PauseProducing(this); }\n+      void StopProducing(ExecNode* output) override { inputs_[0]->StopProducing(this); }\n+\n+      // An ExecNode has a single output schema to which all its batches conform.\n+      using ExecNode::output_schema;\n+\n+      // ExecNodes carry basic introspection for debugging purposes\n+      const char* kind_name() const override { return \"PassthruNode\"; }\n+      using ExecNode::label;\n+      using ExecNode::SetLabel;\n+      using ExecNode::ToString;\n+\n+      // An ExecNode holds references to its inputs and outputs, so it is possible\n+      // to walk the graph of execution if necessary.\n+      using ExecNode::inputs;\n+      using ExecNode::outputs;\n+\n+      // StartProducing() and StopProducing() are invoked by an ExecPlan to\n+      // coordinate the graph-wide execution state.\n+      Status StartProducing() override { return Status::OK(); }\n+      void StopProducing() override {}\n+      Future<> finished() override { return inputs_[0]->finished(); }\n+    };\n+\n+Note that each method which is associated with an edge of the graph must be invoked\n+with an ``ExecNode*`` to identify the node which invoked it. For example, in an\n+:class:`ExecNode` which implements ``JOIN`` this tagging might be used to differentiate\n+between batches from the left or right inputs.\n+``InputReceived, ErrorReceived, InputFinished`` may only be invoked by the inputs of a\n+node, while ``ResumeProducing, PauseProducing, StopProducing`` may only be invoked by\n+outputs of a node.\n+\n+:class:`ExecPlan` contains the associated instances of :class:`ExecNode` alive\n+and provides convenience methods for starting and stopping execution of all nodes\n+and for querying/awaiting their completion::\n+\n+    // construct an ExecPlan first to hold your nodes\n+    ARROW_ASSIGN_OR_RAISE(auto plan, ExecPlan::Make(default_exec_context()));\n+\n+    // ... add nodes to your ExecPlan\n+\n+    // start all nodes in the graph\n+    ARROW_RETURN_NOT_OK(plan->StartProducing());\n+\n+    if (need_stop) {\n+      // stop all nodes in the graph\n+      plan->StopProducing();\n+    }\n+\n+    // Complete will be marked finished when all nodes have run to completion\n+    // or acknowledged a StopProducing() signal. The ExecPlan should be kept\n+    // alive until this future is marked finished.\n+    Future<> complete = plan->finished();\n+\n+\n+Constructing ``ExecPlan``s\n+--------------------------\n+\n+.. warning::\n+\n+    The following will be superceded by construction from Compute IR, see ARROW-14074.\n+\n+None of the concrete implementations of :class:`ExecNode` are exposed\n+in headers, so they can't be constructed directly outside the\n+Translation Unit where they are defined. Instead, factories to\n+create them are provided in an extensible registry. This structure\n+provides a number of benefits:\n+\n+- This enforces consistent construction.\n+- It decouples implementations from consumers of the interface\n+  (for example: we have two classes for scalar and grouped aggregate,\n+   we can choose which to construct within the single factory by\n+   checking whether grouping keys are provided)\n+- This expedites integration with out-of-library extensions. For example\n+  \"scan\" nodes are implemented in the separate ``libarrow_dataset.so`` library.\n+- Since the class is not referencable outside the Translation Unit in which it\n+  is defined, compilers can optimize more aggressively.\n+\n+Factories of :class:`ExecNode` can be retrieved by name from the registry.\n+The default registry is available through\n+:func:`arrow::compute::default_exec_factory_registry()`\n+and can be queried for the built-in factories::\n+\n+    // get the factory for \"filter\" nodes:\n+    ARROW_ASSIGN_OR_RAISE(auto make_filter,\n+                          default_exec_factory_registry()->GetFactory(\"filter\"));\n+\n+    // factories take three arguments:\n+    ARROW_ASSIGN_OR_RAISE(ExecNode* filter_node, *make_filter(\n+        // the ExecPlan which should own this node\n+        plan.get(),\n+\n+        // nodes which will send batches to this node (inputs)\n+        {scan_node},\n+\n+        // parameters unique to \"filter\" nodes\n+        FilterNodeOptions{filter_expression}));\n+\n+    // alternative shorthand:\n+    ARROW_ASSIGN_OR_RAISE(filter_node, MakeExecNode(\"filter\",\n+        plan.get(), {scan_node}, FilterNodeOptions{filter_expression});\n+\n+Factories can also be added to the default registry as long as they are\n+convertible to ``std::function<Result<ExecNode*>(\n+ExecPlan*, std::vector<ExecNode*>, const ExecNodeOptions&)>``.\n+\n+To build an :class:`ExecPlan` representing a simple pipeline which\n+reads from a :class:`RecordBatchReader` then filters, projects, and\n+writes to disk::\n+\n+    std::shared_ptr<RecordBatchReader> reader = GetStreamOfBatches();\n+    ExecNode* source_node = *MakeExecNode(\"source\", plan.get(), {},\n+                                          SourceNodeOptions::FromReader(\n+                                              reader,\n+                                              GetCpuThreadPool()));\n+\n+    ExecNode* filter_node = *MakeExecNode(\"filter\", plan.get(), {source_node},\n+                                          FilterNodeOptions{\n+                                            greater(field_ref(\"score\"), literal(3))\n+                                          });\n+\n+    ExecNode* project_node = *MakeExecNode(\"project\", plan.get(), {filter_node},\n+                                           ProjectNodeOptions{\n+                                             {add(field_ref(\"score\"), literal(1))},\n+                                             {\"score + 1\"}\n+                                           });\n+\n+    MakeExecNode(\"write\", plan.get(), {project_node},\n+                 WriteNodeOptions{/*base_dir=*/\"/dat\", /*...*/});\n+\n+:struct:`Declaration` is a dplyr-inspired helper which further decreases the\n\nReview comment:\n       Perhaps add a hyperlink to dplyr, not all readers will know about it.\n\n##########\nFile path: docs/source/cpp/simple_graph.svg\n##########\n@@ -0,0 +1,139 @@\n+<!---\n\nReview comment:\n       When I view this file, it looks like the arrow between the \"join\" and \"join again\" nodes is blanked out (or missing). Perhaps that's just my machine, though.\n\n##########\nFile path: docs/source/cpp/streaming_execution.rst\n##########\n@@ -0,0 +1,291 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+.. cpp:namespace:: arrow::compute\n+\n+==========================\n+Streaming execution engine\n+==========================\n+\n+.. warning::\n+\n+    The streaming execution engine is experimental, and a stable API\n+    is not yet guaranteed.\n+\n+Motivation\n+----------\n+\n+For many complex computations, successive direct `invocation of\n+compute functions <invoking compute functions>` is not feasible\n+in either memory or computation time. Doing so causes all intermediate\n+data to be fully materialized. To facilitate arbitrarily large inputs\n+and more efficient resource usage, arrow also provides a streaming query\n+engine with which computations can be formulated and executed.\n+\n+.. image:: simple_graph.svg\n+\n+:class:`ExecNode` is provided to reify the graph of operations in a query.\n+Batches of data (struct:`ExecBatch`) flow along edges of the graph from\n+node to node. Structuring the API around a stream of batches allows the\n+working set for each node to be tuned for optimal performance independent\n+of any other nodes in the graph. Each :class:`ExecNode` processes batches\n+as they are pushed to it along an edge of the graph by upstream nodes\n+(its inputs), and pushes batches along an edge of the graph to downstream\n+nodes (its outputs) as they are finalized.\n+\n+.. [shaikhha et al] SHAIKHHA, A., DASHTI, M., & KOCH, C. (2018). Push versus pull-based loop fusion in query engines. Journal of Functional Programming, 28. https://doi.org/10.1017/s0956796818000102\n+\n+Overview\n+--------\n+\n+:class:`ExecNode`\n+  Each node in the graph is an implementation of the :class:`ExecNode` interface.\n+\n+:class:`ExecPlan`\n+  A set of :class:`ExecNode` is contained and (to an extent) coordinated by an\n+  :class:`ExecPlan`.\n+\n+:class:`ExecFactoryRegistry`\n+  Instances of :class:`ExecNode` are constructed by factory functions held\n+  in a :class:`ExecFactoryRegistry`.\n+\n+:class:`ExecNodeOptions`\n+  Heterogenous parameters for factories of :class:`ExecNode` are bundled in an\n+  :class:`ExecNodeOptions`.\n+\n+:struct:`Declaration`\n+  ``dplyr``-inspired helper for efficient construction of an :class:`ExecPlan`.\n+\n+:struct:`ExecBatch`\n+  A lightweight container for a single chunk of arrow-formatted data. In contrast\n+  to :class:`RecordBatch`, :struct:`ExecBatch` is intended for use exclusively\n+  in a streaming execution context (for example, it will never have a corresponding\n\nReview comment:\n       Let's say \"it doesn't have\" a corresponding Python binding :-)\n\n##########\nFile path: docs/source/cpp/streaming_execution.rst\n##########\n@@ -0,0 +1,291 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+.. cpp:namespace:: arrow::compute\n+\n+==========================\n+Streaming execution engine\n+==========================\n+\n+.. warning::\n+\n+    The streaming execution engine is experimental, and a stable API\n+    is not yet guaranteed.\n+\n+Motivation\n+----------\n+\n+For many complex computations, successive direct `invocation of\n+compute functions <invoking compute functions>` is not feasible\n+in either memory or computation time. Doing so causes all intermediate\n+data to be fully materialized. To facilitate arbitrarily large inputs\n+and more efficient resource usage, arrow also provides a streaming query\n+engine with which computations can be formulated and executed.\n+\n+.. image:: simple_graph.svg\n+\n+:class:`ExecNode` is provided to reify the graph of operations in a query.\n+Batches of data (struct:`ExecBatch`) flow along edges of the graph from\n+node to node. Structuring the API around a stream of batches allows the\n+working set for each node to be tuned for optimal performance independent\n+of any other nodes in the graph. Each :class:`ExecNode` processes batches\n+as they are pushed to it along an edge of the graph by upstream nodes\n+(its inputs), and pushes batches along an edge of the graph to downstream\n+nodes (its outputs) as they are finalized.\n+\n+.. [shaikhha et al] SHAIKHHA, A., DASHTI, M., & KOCH, C. (2018). Push versus pull-based loop fusion in query engines. Journal of Functional Programming, 28. https://doi.org/10.1017/s0956796818000102\n+\n+Overview\n+--------\n+\n+:class:`ExecNode`\n+  Each node in the graph is an implementation of the :class:`ExecNode` interface.\n+\n+:class:`ExecPlan`\n+  A set of :class:`ExecNode` is contained and (to an extent) coordinated by an\n+  :class:`ExecPlan`.\n+\n+:class:`ExecFactoryRegistry`\n+  Instances of :class:`ExecNode` are constructed by factory functions held\n+  in a :class:`ExecFactoryRegistry`.\n+\n+:class:`ExecNodeOptions`\n+  Heterogenous parameters for factories of :class:`ExecNode` are bundled in an\n+  :class:`ExecNodeOptions`.\n+\n+:struct:`Declaration`\n+  ``dplyr``-inspired helper for efficient construction of an :class:`ExecPlan`.\n+\n+:struct:`ExecBatch`\n+  A lightweight container for a single chunk of arrow-formatted data. In contrast\n+  to :class:`RecordBatch`, :struct:`ExecBatch` is intended for use exclusively\n+  in a streaming execution context (for example, it will never have a corresponding\n+  Python binding). Furthermore columns which happen to have a constant value may\n+  be represented by a :class:`Scalar` instead of an :class:`Array`. In addition,\n+  :struct:`ExecBatch` may carry execution-relevant properties including a\n+  guaranteed-true-filter for :class:`Expression` simplification.\n+\n+\n+An example :class:`ExecNode` implementation which simlpy passes all input batches\n\nReview comment:\n       \"simply\"\n\n##########\nFile path: docs/source/cpp/streaming_execution.rst\n##########\n@@ -0,0 +1,291 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+.. cpp:namespace:: arrow::compute\n+\n+==========================\n+Streaming execution engine\n+==========================\n+\n+.. warning::\n+\n+    The streaming execution engine is experimental, and a stable API\n+    is not yet guaranteed.\n+\n+Motivation\n+----------\n+\n+For many complex computations, successive direct `invocation of\n+compute functions <invoking compute functions>` is not feasible\n+in either memory or computation time. Doing so causes all intermediate\n+data to be fully materialized. To facilitate arbitrarily large inputs\n+and more efficient resource usage, arrow also provides a streaming query\n+engine with which computations can be formulated and executed.\n+\n+.. image:: simple_graph.svg\n+\n+:class:`ExecNode` is provided to reify the graph of operations in a query.\n+Batches of data (struct:`ExecBatch`) flow along edges of the graph from\n+node to node. Structuring the API around a stream of batches allows the\n+working set for each node to be tuned for optimal performance independent\n+of any other nodes in the graph. Each :class:`ExecNode` processes batches\n+as they are pushed to it along an edge of the graph by upstream nodes\n+(its inputs), and pushes batches along an edge of the graph to downstream\n+nodes (its outputs) as they are finalized.\n+\n+.. [shaikhha et al] SHAIKHHA, A., DASHTI, M., & KOCH, C. (2018). Push versus pull-based loop fusion in query engines. Journal of Functional Programming, 28. https://doi.org/10.1017/s0956796818000102\n+\n+Overview\n+--------\n+\n+:class:`ExecNode`\n+  Each node in the graph is an implementation of the :class:`ExecNode` interface.\n+\n+:class:`ExecPlan`\n+  A set of :class:`ExecNode` is contained and (to an extent) coordinated by an\n+  :class:`ExecPlan`.\n+\n+:class:`ExecFactoryRegistry`\n+  Instances of :class:`ExecNode` are constructed by factory functions held\n+  in a :class:`ExecFactoryRegistry`.\n+\n+:class:`ExecNodeOptions`\n+  Heterogenous parameters for factories of :class:`ExecNode` are bundled in an\n+  :class:`ExecNodeOptions`.\n+\n+:struct:`Declaration`\n+  ``dplyr``-inspired helper for efficient construction of an :class:`ExecPlan`.\n+\n+:struct:`ExecBatch`\n+  A lightweight container for a single chunk of arrow-formatted data. In contrast\n+  to :class:`RecordBatch`, :struct:`ExecBatch` is intended for use exclusively\n+  in a streaming execution context (for example, it will never have a corresponding\n+  Python binding). Furthermore columns which happen to have a constant value may\n+  be represented by a :class:`Scalar` instead of an :class:`Array`. In addition,\n+  :struct:`ExecBatch` may carry execution-relevant properties including a\n+  guaranteed-true-filter for :class:`Expression` simplification.\n+\n+\n+An example :class:`ExecNode` implementation which simlpy passes all input batches\n+through unchanged::\n+\n+    class PassthruNode : public ExecNode {\n+     public:\n+      // InputReceived is the main entry point for ExecNodes. It is invoked\n+      // by an input of this node to push a batch here for processing.\n+      void InputReceived(ExecNode* input, ExecBatch batch) override {\n+        // Since this is a passthru node we simply push the batch to our\n+        // only output here.\n+        outputs_[0]->InputReceived(this, batch);\n+      }\n+\n+      // ErrorRecieved is called by an input of this node to report an error.\n+      void ErrorReceived(ExecNode* input, Status error) override {\n+        outputs_[0]->ErrorReceived(this, error);\n+      }\n+\n+      // InputFinished is used to signal how many batches will ultimately arrive.\n+      // It may be called with any ordering relative to InputReceived/ErrorReceived.\n+      void InputFinished(ExecNode* input, int total_batches) override {\n+        outputs_[0]->InputFinished(this, total_batches);\n+      }\n+\n+      // ExecNodes may request that their inputs throttle production of batches\n+      // until they are ready for more, or stop production if no further batches\n+      // are required.\n+      void ResumeProducing(ExecNode* output) override { inputs_[0]->ResumeProducing(this); }\n+      void PauseProducing(ExecNode* output) override { inputs_[0]->PauseProducing(this); }\n+      void StopProducing(ExecNode* output) override { inputs_[0]->StopProducing(this); }\n+\n+      // An ExecNode has a single output schema to which all its batches conform.\n+      using ExecNode::output_schema;\n+\n+      // ExecNodes carry basic introspection for debugging purposes\n+      const char* kind_name() const override { return \"PassthruNode\"; }\n+      using ExecNode::label;\n+      using ExecNode::SetLabel;\n+      using ExecNode::ToString;\n+\n+      // An ExecNode holds references to its inputs and outputs, so it is possible\n+      // to walk the graph of execution if necessary.\n+      using ExecNode::inputs;\n+      using ExecNode::outputs;\n+\n+      // StartProducing() and StopProducing() are invoked by an ExecPlan to\n+      // coordinate the graph-wide execution state.\n+      Status StartProducing() override { return Status::OK(); }\n+      void StopProducing() override {}\n+      Future<> finished() override { return inputs_[0]->finished(); }\n+    };\n+\n+Note that each method which is associated with an edge of the graph must be invoked\n+with an ``ExecNode*`` to identify the node which invoked it. For example, in an\n+:class:`ExecNode` which implements ``JOIN`` this tagging might be used to differentiate\n+between batches from the left or right inputs.\n+``InputReceived, ErrorReceived, InputFinished`` may only be invoked by the inputs of a\n+node, while ``ResumeProducing, PauseProducing, StopProducing`` may only be invoked by\n+outputs of a node.\n+\n+:class:`ExecPlan` contains the associated instances of :class:`ExecNode` alive\n\nReview comment:\n       Is it me, or is \"contains alive\" a bit weird?\n\n##########\nFile path: docs/source/cpp/streaming_execution.rst\n##########\n@@ -0,0 +1,291 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+.. cpp:namespace:: arrow::compute\n+\n+==========================\n+Streaming execution engine\n+==========================\n+\n+.. warning::\n+\n+    The streaming execution engine is experimental, and a stable API\n+    is not yet guaranteed.\n+\n+Motivation\n+----------\n+\n+For many complex computations, successive direct `invocation of\n+compute functions <invoking compute functions>` is not feasible\n+in either memory or computation time. Doing so causes all intermediate\n+data to be fully materialized. To facilitate arbitrarily large inputs\n+and more efficient resource usage, arrow also provides a streaming query\n+engine with which computations can be formulated and executed.\n+\n+.. image:: simple_graph.svg\n+\n+:class:`ExecNode` is provided to reify the graph of operations in a query.\n+Batches of data (struct:`ExecBatch`) flow along edges of the graph from\n+node to node. Structuring the API around a stream of batches allows the\n+working set for each node to be tuned for optimal performance independent\n+of any other nodes in the graph. Each :class:`ExecNode` processes batches\n+as they are pushed to it along an edge of the graph by upstream nodes\n+(its inputs), and pushes batches along an edge of the graph to downstream\n+nodes (its outputs) as they are finalized.\n+\n+.. [shaikhha et al] SHAIKHHA, A., DASHTI, M., & KOCH, C. (2018). Push versus pull-based loop fusion in query engines. Journal of Functional Programming, 28. https://doi.org/10.1017/s0956796818000102\n\nReview comment:\n       This reference doesn't seem to appear anywhere in the text? I don't think it will be rendered, though I'm not sure.\n\n##########\nFile path: docs/source/cpp/streaming_execution.rst\n##########\n@@ -0,0 +1,291 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+.. cpp:namespace:: arrow::compute\n+\n+==========================\n+Streaming execution engine\n+==========================\n+\n+.. warning::\n+\n+    The streaming execution engine is experimental, and a stable API\n+    is not yet guaranteed.\n+\n+Motivation\n+----------\n+\n+For many complex computations, successive direct `invocation of\n+compute functions <invoking compute functions>` is not feasible\n\nReview comment:\n       Is \"invoking compute functions\" a valid target? I can't seem to find it in the docs sources.\n\n##########\nFile path: docs/source/cpp/streaming_execution.rst\n##########\n@@ -0,0 +1,291 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+.. cpp:namespace:: arrow::compute\n+\n+==========================\n+Streaming execution engine\n+==========================\n+\n+.. warning::\n+\n+    The streaming execution engine is experimental, and a stable API\n+    is not yet guaranteed.\n+\n+Motivation\n+----------\n+\n+For many complex computations, successive direct `invocation of\n+compute functions <invoking compute functions>` is not feasible\n+in either memory or computation time. Doing so causes all intermediate\n+data to be fully materialized. To facilitate arbitrarily large inputs\n+and more efficient resource usage, arrow also provides a streaming query\n+engine with which computations can be formulated and executed.\n+\n+.. image:: simple_graph.svg\n+\n+:class:`ExecNode` is provided to reify the graph of operations in a query.\n+Batches of data (struct:`ExecBatch`) flow along edges of the graph from\n+node to node. Structuring the API around a stream of batches allows the\n+working set for each node to be tuned for optimal performance independent\n+of any other nodes in the graph. Each :class:`ExecNode` processes batches\n+as they are pushed to it along an edge of the graph by upstream nodes\n+(its inputs), and pushes batches along an edge of the graph to downstream\n+nodes (its outputs) as they are finalized.\n+\n+.. [shaikhha et al] SHAIKHHA, A., DASHTI, M., & KOCH, C. (2018). Push versus pull-based loop fusion in query engines. Journal of Functional Programming, 28. https://doi.org/10.1017/s0956796818000102\n+\n+Overview\n+--------\n+\n+:class:`ExecNode`\n+  Each node in the graph is an implementation of the :class:`ExecNode` interface.\n+\n+:class:`ExecPlan`\n+  A set of :class:`ExecNode` is contained and (to an extent) coordinated by an\n+  :class:`ExecPlan`.\n+\n+:class:`ExecFactoryRegistry`\n+  Instances of :class:`ExecNode` are constructed by factory functions held\n+  in a :class:`ExecFactoryRegistry`.\n+\n+:class:`ExecNodeOptions`\n+  Heterogenous parameters for factories of :class:`ExecNode` are bundled in an\n+  :class:`ExecNodeOptions`.\n+\n+:struct:`Declaration`\n+  ``dplyr``-inspired helper for efficient construction of an :class:`ExecPlan`.\n+\n+:struct:`ExecBatch`\n+  A lightweight container for a single chunk of arrow-formatted data. In contrast\n+  to :class:`RecordBatch`, :struct:`ExecBatch` is intended for use exclusively\n+  in a streaming execution context (for example, it will never have a corresponding\n+  Python binding). Furthermore columns which happen to have a constant value may\n+  be represented by a :class:`Scalar` instead of an :class:`Array`. In addition,\n+  :struct:`ExecBatch` may carry execution-relevant properties including a\n+  guaranteed-true-filter for :class:`Expression` simplification.\n+\n+\n+An example :class:`ExecNode` implementation which simlpy passes all input batches\n+through unchanged::\n+\n+    class PassthruNode : public ExecNode {\n+     public:\n+      // InputReceived is the main entry point for ExecNodes. It is invoked\n+      // by an input of this node to push a batch here for processing.\n+      void InputReceived(ExecNode* input, ExecBatch batch) override {\n+        // Since this is a passthru node we simply push the batch to our\n+        // only output here.\n+        outputs_[0]->InputReceived(this, batch);\n+      }\n+\n+      // ErrorRecieved is called by an input of this node to report an error.\n+      void ErrorReceived(ExecNode* input, Status error) override {\n+        outputs_[0]->ErrorReceived(this, error);\n+      }\n+\n+      // InputFinished is used to signal how many batches will ultimately arrive.\n+      // It may be called with any ordering relative to InputReceived/ErrorReceived.\n+      void InputFinished(ExecNode* input, int total_batches) override {\n+        outputs_[0]->InputFinished(this, total_batches);\n+      }\n+\n+      // ExecNodes may request that their inputs throttle production of batches\n+      // until they are ready for more, or stop production if no further batches\n+      // are required.\n+      void ResumeProducing(ExecNode* output) override { inputs_[0]->ResumeProducing(this); }\n+      void PauseProducing(ExecNode* output) override { inputs_[0]->PauseProducing(this); }\n+      void StopProducing(ExecNode* output) override { inputs_[0]->StopProducing(this); }\n+\n+      // An ExecNode has a single output schema to which all its batches conform.\n+      using ExecNode::output_schema;\n+\n+      // ExecNodes carry basic introspection for debugging purposes\n+      const char* kind_name() const override { return \"PassthruNode\"; }\n+      using ExecNode::label;\n+      using ExecNode::SetLabel;\n+      using ExecNode::ToString;\n+\n+      // An ExecNode holds references to its inputs and outputs, so it is possible\n+      // to walk the graph of execution if necessary.\n+      using ExecNode::inputs;\n+      using ExecNode::outputs;\n+\n+      // StartProducing() and StopProducing() are invoked by an ExecPlan to\n+      // coordinate the graph-wide execution state.\n+      Status StartProducing() override { return Status::OK(); }\n+      void StopProducing() override {}\n+      Future<> finished() override { return inputs_[0]->finished(); }\n+    };\n+\n+Note that each method which is associated with an edge of the graph must be invoked\n+with an ``ExecNode*`` to identify the node which invoked it. For example, in an\n+:class:`ExecNode` which implements ``JOIN`` this tagging might be used to differentiate\n+between batches from the left or right inputs.\n+``InputReceived, ErrorReceived, InputFinished`` may only be invoked by the inputs of a\n\nReview comment:\n       Nit: quote each method name separately.\n\n##########\nFile path: docs/source/cpp/streaming_execution.rst\n##########\n@@ -0,0 +1,291 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+.. cpp:namespace:: arrow::compute\n+\n+==========================\n+Streaming execution engine\n+==========================\n+\n+.. warning::\n+\n+    The streaming execution engine is experimental, and a stable API\n+    is not yet guaranteed.\n+\n+Motivation\n+----------\n+\n+For many complex computations, successive direct `invocation of\n+compute functions <invoking compute functions>` is not feasible\n+in either memory or computation time. Doing so causes all intermediate\n+data to be fully materialized. To facilitate arbitrarily large inputs\n+and more efficient resource usage, arrow also provides a streaming query\n+engine with which computations can be formulated and executed.\n+\n+.. image:: simple_graph.svg\n+\n+:class:`ExecNode` is provided to reify the graph of operations in a query.\n+Batches of data (struct:`ExecBatch`) flow along edges of the graph from\n\nReview comment:\n       Probably ```:struct:`ExecBatch` ``` (missing colon at the beginning).\n\n##########\nFile path: docs/source/cpp/streaming_execution.rst\n##########\n@@ -0,0 +1,291 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+.. cpp:namespace:: arrow::compute\n+\n+==========================\n+Streaming execution engine\n+==========================\n+\n+.. warning::\n+\n+    The streaming execution engine is experimental, and a stable API\n+    is not yet guaranteed.\n+\n+Motivation\n+----------\n+\n+For many complex computations, successive direct `invocation of\n+compute functions <invoking compute functions>` is not feasible\n+in either memory or computation time. Doing so causes all intermediate\n+data to be fully materialized. To facilitate arbitrarily large inputs\n+and more efficient resource usage, arrow also provides a streaming query\n\nReview comment:\n       Say \"Arrow C++\" rather than \"arrow\" here?\n\n##########\nFile path: docs/source/cpp/streaming_execution.rst\n##########\n@@ -0,0 +1,291 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+.. cpp:namespace:: arrow::compute\n+\n+==========================\n+Streaming execution engine\n+==========================\n+\n+.. warning::\n+\n+    The streaming execution engine is experimental, and a stable API\n+    is not yet guaranteed.\n+\n+Motivation\n+----------\n+\n+For many complex computations, successive direct `invocation of\n+compute functions <invoking compute functions>` is not feasible\n+in either memory or computation time. Doing so causes all intermediate\n+data to be fully materialized. To facilitate arbitrarily large inputs\n+and more efficient resource usage, arrow also provides a streaming query\n+engine with which computations can be formulated and executed.\n+\n+.. image:: simple_graph.svg\n+\n+:class:`ExecNode` is provided to reify the graph of operations in a query.\n+Batches of data (struct:`ExecBatch`) flow along edges of the graph from\n+node to node. Structuring the API around a stream of batches allows the\n+working set for each node to be tuned for optimal performance independent\n+of any other nodes in the graph. Each :class:`ExecNode` processes batches\n+as they are pushed to it along an edge of the graph by upstream nodes\n+(its inputs), and pushes batches along an edge of the graph to downstream\n+nodes (its outputs) as they are finalized.\n+\n+.. [shaikhha et al] SHAIKHHA, A., DASHTI, M., & KOCH, C. (2018). Push versus pull-based loop fusion in query engines. Journal of Functional Programming, 28. https://doi.org/10.1017/s0956796818000102\n+\n+Overview\n+--------\n+\n+:class:`ExecNode`\n+  Each node in the graph is an implementation of the :class:`ExecNode` interface.\n+\n+:class:`ExecPlan`\n+  A set of :class:`ExecNode` is contained and (to an extent) coordinated by an\n+  :class:`ExecPlan`.\n+\n+:class:`ExecFactoryRegistry`\n+  Instances of :class:`ExecNode` are constructed by factory functions held\n+  in a :class:`ExecFactoryRegistry`.\n+\n+:class:`ExecNodeOptions`\n+  Heterogenous parameters for factories of :class:`ExecNode` are bundled in an\n+  :class:`ExecNodeOptions`.\n+\n+:struct:`Declaration`\n+  ``dplyr``-inspired helper for efficient construction of an :class:`ExecPlan`.\n+\n+:struct:`ExecBatch`\n+  A lightweight container for a single chunk of arrow-formatted data. In contrast\n\nReview comment:\n       \"data in Arrow format\", perhaps?\n\n##########\nFile path: docs/source/cpp/streaming_execution.rst\n##########\n@@ -0,0 +1,291 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+.. cpp:namespace:: arrow::compute\n+\n+==========================\n+Streaming execution engine\n+==========================\n+\n+.. warning::\n+\n+    The streaming execution engine is experimental, and a stable API\n+    is not yet guaranteed.\n+\n+Motivation\n+----------\n+\n+For many complex computations, successive direct `invocation of\n+compute functions <invoking compute functions>` is not feasible\n+in either memory or computation time. Doing so causes all intermediate\n+data to be fully materialized. To facilitate arbitrarily large inputs\n+and more efficient resource usage, arrow also provides a streaming query\n+engine with which computations can be formulated and executed.\n+\n+.. image:: simple_graph.svg\n+\n+:class:`ExecNode` is provided to reify the graph of operations in a query.\n+Batches of data (struct:`ExecBatch`) flow along edges of the graph from\n+node to node. Structuring the API around a stream of batches allows the\n+working set for each node to be tuned for optimal performance independent\n+of any other nodes in the graph. Each :class:`ExecNode` processes batches\n+as they are pushed to it along an edge of the graph by upstream nodes\n+(its inputs), and pushes batches along an edge of the graph to downstream\n+nodes (its outputs) as they are finalized.\n+\n+.. [shaikhha et al] SHAIKHHA, A., DASHTI, M., & KOCH, C. (2018). Push versus pull-based loop fusion in query engines. Journal of Functional Programming, 28. https://doi.org/10.1017/s0956796818000102\n+\n+Overview\n+--------\n+\n+:class:`ExecNode`\n+  Each node in the graph is an implementation of the :class:`ExecNode` interface.\n+\n+:class:`ExecPlan`\n+  A set of :class:`ExecNode` is contained and (to an extent) coordinated by an\n+  :class:`ExecPlan`.\n+\n+:class:`ExecFactoryRegistry`\n+  Instances of :class:`ExecNode` are constructed by factory functions held\n+  in a :class:`ExecFactoryRegistry`.\n+\n+:class:`ExecNodeOptions`\n+  Heterogenous parameters for factories of :class:`ExecNode` are bundled in an\n+  :class:`ExecNodeOptions`.\n+\n+:struct:`Declaration`\n+  ``dplyr``-inspired helper for efficient construction of an :class:`ExecPlan`.\n+\n+:struct:`ExecBatch`\n+  A lightweight container for a single chunk of arrow-formatted data. In contrast\n+  to :class:`RecordBatch`, :struct:`ExecBatch` is intended for use exclusively\n+  in a streaming execution context (for example, it will never have a corresponding\n+  Python binding). Furthermore columns which happen to have a constant value may\n+  be represented by a :class:`Scalar` instead of an :class:`Array`. In addition,\n+  :struct:`ExecBatch` may carry execution-relevant properties including a\n+  guaranteed-true-filter for :class:`Expression` simplification.\n+\n+\n+An example :class:`ExecNode` implementation which simlpy passes all input batches\n+through unchanged::\n+\n+    class PassthruNode : public ExecNode {\n+     public:\n+      // InputReceived is the main entry point for ExecNodes. It is invoked\n+      // by an input of this node to push a batch here for processing.\n+      void InputReceived(ExecNode* input, ExecBatch batch) override {\n+        // Since this is a passthru node we simply push the batch to our\n+        // only output here.\n+        outputs_[0]->InputReceived(this, batch);\n+      }\n+\n+      // ErrorRecieved is called by an input of this node to report an error.\n+      void ErrorReceived(ExecNode* input, Status error) override {\n+        outputs_[0]->ErrorReceived(this, error);\n+      }\n+\n+      // InputFinished is used to signal how many batches will ultimately arrive.\n+      // It may be called with any ordering relative to InputReceived/ErrorReceived.\n+      void InputFinished(ExecNode* input, int total_batches) override {\n+        outputs_[0]->InputFinished(this, total_batches);\n+      }\n+\n+      // ExecNodes may request that their inputs throttle production of batches\n+      // until they are ready for more, or stop production if no further batches\n+      // are required.\n+      void ResumeProducing(ExecNode* output) override { inputs_[0]->ResumeProducing(this); }\n+      void PauseProducing(ExecNode* output) override { inputs_[0]->PauseProducing(this); }\n+      void StopProducing(ExecNode* output) override { inputs_[0]->StopProducing(this); }\n+\n+      // An ExecNode has a single output schema to which all its batches conform.\n+      using ExecNode::output_schema;\n+\n+      // ExecNodes carry basic introspection for debugging purposes\n+      const char* kind_name() const override { return \"PassthruNode\"; }\n+      using ExecNode::label;\n+      using ExecNode::SetLabel;\n+      using ExecNode::ToString;\n+\n+      // An ExecNode holds references to its inputs and outputs, so it is possible\n+      // to walk the graph of execution if necessary.\n+      using ExecNode::inputs;\n+      using ExecNode::outputs;\n+\n+      // StartProducing() and StopProducing() are invoked by an ExecPlan to\n+      // coordinate the graph-wide execution state.\n+      Status StartProducing() override { return Status::OK(); }\n+      void StopProducing() override {}\n+      Future<> finished() override { return inputs_[0]->finished(); }\n+    };\n+\n+Note that each method which is associated with an edge of the graph must be invoked\n+with an ``ExecNode*`` to identify the node which invoked it. For example, in an\n+:class:`ExecNode` which implements ``JOIN`` this tagging might be used to differentiate\n+between batches from the left or right inputs.\n+``InputReceived, ErrorReceived, InputFinished`` may only be invoked by the inputs of a\n+node, while ``ResumeProducing, PauseProducing, StopProducing`` may only be invoked by\n+outputs of a node.\n+\n+:class:`ExecPlan` contains the associated instances of :class:`ExecNode` alive\n+and provides convenience methods for starting and stopping execution of all nodes\n+and for querying/awaiting their completion::\n+\n+    // construct an ExecPlan first to hold your nodes\n+    ARROW_ASSIGN_OR_RAISE(auto plan, ExecPlan::Make(default_exec_context()));\n+\n+    // ... add nodes to your ExecPlan\n+\n+    // start all nodes in the graph\n+    ARROW_RETURN_NOT_OK(plan->StartProducing());\n+\n+    if (need_stop) {\n+      // stop all nodes in the graph\n+      plan->StopProducing();\n+    }\n+\n+    // Complete will be marked finished when all nodes have run to completion\n+    // or acknowledged a StopProducing() signal. The ExecPlan should be kept\n+    // alive until this future is marked finished.\n+    Future<> complete = plan->finished();\n+\n+\n+Constructing ``ExecPlan``s\n+--------------------------\n+\n+.. warning::\n+\n+    The following will be superceded by construction from Compute IR, see ARROW-14074.\n+\n+None of the concrete implementations of :class:`ExecNode` are exposed\n+in headers, so they can't be constructed directly outside the\n+Translation Unit where they are defined. Instead, factories to\n+create them are provided in an extensible registry. This structure\n+provides a number of benefits:\n+\n+- This enforces consistent construction.\n+- It decouples implementations from consumers of the interface\n+  (for example: we have two classes for scalar and grouped aggregate,\n+   we can choose which to construct within the single factory by\n+   checking whether grouping keys are provided)\n+- This expedites integration with out-of-library extensions. For example\n+  \"scan\" nodes are implemented in the separate ``libarrow_dataset.so`` library.\n+- Since the class is not referencable outside the Translation Unit in which it\n+  is defined, compilers can optimize more aggressively.\n+\n+Factories of :class:`ExecNode` can be retrieved by name from the registry.\n+The default registry is available through\n+:func:`arrow::compute::default_exec_factory_registry()`\n+and can be queried for the built-in factories::\n+\n+    // get the factory for \"filter\" nodes:\n+    ARROW_ASSIGN_OR_RAISE(auto make_filter,\n+                          default_exec_factory_registry()->GetFactory(\"filter\"));\n+\n+    // factories take three arguments:\n+    ARROW_ASSIGN_OR_RAISE(ExecNode* filter_node, *make_filter(\n+        // the ExecPlan which should own this node\n+        plan.get(),\n+\n+        // nodes which will send batches to this node (inputs)\n+        {scan_node},\n+\n+        // parameters unique to \"filter\" nodes\n+        FilterNodeOptions{filter_expression}));\n+\n+    // alternative shorthand:\n+    ARROW_ASSIGN_OR_RAISE(filter_node, MakeExecNode(\"filter\",\n+        plan.get(), {scan_node}, FilterNodeOptions{filter_expression});\n+\n+Factories can also be added to the default registry as long as they are\n+convertible to ``std::function<Result<ExecNode*>(\n+ExecPlan*, std::vector<ExecNode*>, const ExecNodeOptions&)>``.\n+\n+To build an :class:`ExecPlan` representing a simple pipeline which\n+reads from a :class:`RecordBatchReader` then filters, projects, and\n+writes to disk::\n+\n+    std::shared_ptr<RecordBatchReader> reader = GetStreamOfBatches();\n+    ExecNode* source_node = *MakeExecNode(\"source\", plan.get(), {},\n+                                          SourceNodeOptions::FromReader(\n+                                              reader,\n+                                              GetCpuThreadPool()));\n+\n+    ExecNode* filter_node = *MakeExecNode(\"filter\", plan.get(), {source_node},\n+                                          FilterNodeOptions{\n+                                            greater(field_ref(\"score\"), literal(3))\n+                                          });\n+\n+    ExecNode* project_node = *MakeExecNode(\"project\", plan.get(), {filter_node},\n+                                           ProjectNodeOptions{\n+                                             {add(field_ref(\"score\"), literal(1))},\n+                                             {\"score + 1\"}\n+                                           });\n+\n+    MakeExecNode(\"write\", plan.get(), {project_node},\n+                 WriteNodeOptions{/*base_dir=*/\"/dat\", /*...*/});\n+\n+:struct:`Declaration` is a dplyr-inspired helper which further decreases the\n+boilerplate associated with populating an :class:`ExecPlan` from C++::\n+\n+    std::shared_ptr<RecordBatchReader> reader = GetStreamOfBatches();\n+    ASSERT_OK(Declaration::Sequence(\n+                  {\n+                      {\"source\", SourceNodeOptions::FromReader(\n+                           reader,\n+                           GetCpuThreadPool())},\n+                      {\"filter\", FilterNodeOptions{\n+                           greater(field_ref(\"score\"), literal(3))}},\n+                      {\"project\", ProjectNodeOptions{\n+                           {add(field_ref(\"score\"), literal(1))},\n+                           {\"score + 1\"}}},\n+                      {\"write\", WriteNodeOptions{/*base_dir=*/\"/dat\", /*...*/}},\n+                  })\n+                  .AddToPlan(plan.get()));\n+\n+Note that a source node can wrap anything which resembles a stream of batches.\n+For example, https://github.com/apache/arrow/pull/11032 adds support for use\n+of a DuckDB query as a source node. Similarly, a sink node can wrap anything\n\nReview comment:\n       Add a hyperlink to DuckDB?\n\n##########\nFile path: docs/source/cpp/streaming_execution.rst\n##########\n@@ -0,0 +1,291 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+.. cpp:namespace:: arrow::compute\n+\n+==========================\n+Streaming execution engine\n+==========================\n+\n+.. warning::\n+\n+    The streaming execution engine is experimental, and a stable API\n+    is not yet guaranteed.\n+\n+Motivation\n+----------\n+\n+For many complex computations, successive direct `invocation of\n+compute functions <invoking compute functions>` is not feasible\n+in either memory or computation time. Doing so causes all intermediate\n+data to be fully materialized. To facilitate arbitrarily large inputs\n+and more efficient resource usage, arrow also provides a streaming query\n+engine with which computations can be formulated and executed.\n+\n+.. image:: simple_graph.svg\n+\n+:class:`ExecNode` is provided to reify the graph of operations in a query.\n+Batches of data (struct:`ExecBatch`) flow along edges of the graph from\n+node to node. Structuring the API around a stream of batches allows the\n+working set for each node to be tuned for optimal performance independent\n+of any other nodes in the graph. Each :class:`ExecNode` processes batches\n+as they are pushed to it along an edge of the graph by upstream nodes\n+(its inputs), and pushes batches along an edge of the graph to downstream\n+nodes (its outputs) as they are finalized.\n+\n+.. [shaikhha et al] SHAIKHHA, A., DASHTI, M., & KOCH, C. (2018). Push versus pull-based loop fusion in query engines. Journal of Functional Programming, 28. https://doi.org/10.1017/s0956796818000102\n+\n+Overview\n+--------\n+\n+:class:`ExecNode`\n+  Each node in the graph is an implementation of the :class:`ExecNode` interface.\n+\n+:class:`ExecPlan`\n+  A set of :class:`ExecNode` is contained and (to an extent) coordinated by an\n+  :class:`ExecPlan`.\n+\n+:class:`ExecFactoryRegistry`\n+  Instances of :class:`ExecNode` are constructed by factory functions held\n+  in a :class:`ExecFactoryRegistry`.\n+\n+:class:`ExecNodeOptions`\n+  Heterogenous parameters for factories of :class:`ExecNode` are bundled in an\n+  :class:`ExecNodeOptions`.\n+\n+:struct:`Declaration`\n+  ``dplyr``-inspired helper for efficient construction of an :class:`ExecPlan`.\n+\n+:struct:`ExecBatch`\n+  A lightweight container for a single chunk of arrow-formatted data. In contrast\n+  to :class:`RecordBatch`, :struct:`ExecBatch` is intended for use exclusively\n+  in a streaming execution context (for example, it will never have a corresponding\n+  Python binding). Furthermore columns which happen to have a constant value may\n+  be represented by a :class:`Scalar` instead of an :class:`Array`. In addition,\n+  :struct:`ExecBatch` may carry execution-relevant properties including a\n+  guaranteed-true-filter for :class:`Expression` simplification.\n+\n+\n+An example :class:`ExecNode` implementation which simlpy passes all input batches\n+through unchanged::\n+\n+    class PassthruNode : public ExecNode {\n+     public:\n+      // InputReceived is the main entry point for ExecNodes. It is invoked\n+      // by an input of this node to push a batch here for processing.\n+      void InputReceived(ExecNode* input, ExecBatch batch) override {\n+        // Since this is a passthru node we simply push the batch to our\n+        // only output here.\n+        outputs_[0]->InputReceived(this, batch);\n+      }\n+\n+      // ErrorRecieved is called by an input of this node to report an error.\n\nReview comment:\n       \"ErrorReceived\"\n\n##########\nFile path: docs/source/cpp/streaming_execution.rst\n##########\n@@ -0,0 +1,291 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+.. cpp:namespace:: arrow::compute\n+\n+==========================\n+Streaming execution engine\n+==========================\n+\n+.. warning::\n+\n+    The streaming execution engine is experimental, and a stable API\n+    is not yet guaranteed.\n+\n+Motivation\n+----------\n+\n+For many complex computations, successive direct `invocation of\n+compute functions <invoking compute functions>` is not feasible\n+in either memory or computation time. Doing so causes all intermediate\n+data to be fully materialized. To facilitate arbitrarily large inputs\n+and more efficient resource usage, arrow also provides a streaming query\n+engine with which computations can be formulated and executed.\n+\n+.. image:: simple_graph.svg\n+\n+:class:`ExecNode` is provided to reify the graph of operations in a query.\n+Batches of data (struct:`ExecBatch`) flow along edges of the graph from\n+node to node. Structuring the API around a stream of batches allows the\n+working set for each node to be tuned for optimal performance independent\n+of any other nodes in the graph. Each :class:`ExecNode` processes batches\n+as they are pushed to it along an edge of the graph by upstream nodes\n+(its inputs), and pushes batches along an edge of the graph to downstream\n+nodes (its outputs) as they are finalized.\n+\n+.. [shaikhha et al] SHAIKHHA, A., DASHTI, M., & KOCH, C. (2018). Push versus pull-based loop fusion in query engines. Journal of Functional Programming, 28. https://doi.org/10.1017/s0956796818000102\n+\n+Overview\n+--------\n+\n+:class:`ExecNode`\n+  Each node in the graph is an implementation of the :class:`ExecNode` interface.\n+\n+:class:`ExecPlan`\n+  A set of :class:`ExecNode` is contained and (to an extent) coordinated by an\n+  :class:`ExecPlan`.\n+\n+:class:`ExecFactoryRegistry`\n+  Instances of :class:`ExecNode` are constructed by factory functions held\n+  in a :class:`ExecFactoryRegistry`.\n+\n+:class:`ExecNodeOptions`\n+  Heterogenous parameters for factories of :class:`ExecNode` are bundled in an\n+  :class:`ExecNodeOptions`.\n+\n+:struct:`Declaration`\n+  ``dplyr``-inspired helper for efficient construction of an :class:`ExecPlan`.\n+\n+:struct:`ExecBatch`\n+  A lightweight container for a single chunk of arrow-formatted data. In contrast\n+  to :class:`RecordBatch`, :struct:`ExecBatch` is intended for use exclusively\n+  in a streaming execution context (for example, it will never have a corresponding\n+  Python binding). Furthermore columns which happen to have a constant value may\n+  be represented by a :class:`Scalar` instead of an :class:`Array`. In addition,\n+  :struct:`ExecBatch` may carry execution-relevant properties including a\n+  guaranteed-true-filter for :class:`Expression` simplification.\n+\n+\n+An example :class:`ExecNode` implementation which simlpy passes all input batches\n+through unchanged::\n+\n+    class PassthruNode : public ExecNode {\n+     public:\n+      // InputReceived is the main entry point for ExecNodes. It is invoked\n+      // by an input of this node to push a batch here for processing.\n+      void InputReceived(ExecNode* input, ExecBatch batch) override {\n+        // Since this is a passthru node we simply push the batch to our\n+        // only output here.\n+        outputs_[0]->InputReceived(this, batch);\n+      }\n+\n+      // ErrorRecieved is called by an input of this node to report an error.\n+      void ErrorReceived(ExecNode* input, Status error) override {\n+        outputs_[0]->ErrorReceived(this, error);\n+      }\n+\n+      // InputFinished is used to signal how many batches will ultimately arrive.\n+      // It may be called with any ordering relative to InputReceived/ErrorReceived.\n+      void InputFinished(ExecNode* input, int total_batches) override {\n+        outputs_[0]->InputFinished(this, total_batches);\n+      }\n+\n+      // ExecNodes may request that their inputs throttle production of batches\n+      // until they are ready for more, or stop production if no further batches\n+      // are required.\n+      void ResumeProducing(ExecNode* output) override { inputs_[0]->ResumeProducing(this); }\n+      void PauseProducing(ExecNode* output) override { inputs_[0]->PauseProducing(this); }\n+      void StopProducing(ExecNode* output) override { inputs_[0]->StopProducing(this); }\n+\n+      // An ExecNode has a single output schema to which all its batches conform.\n+      using ExecNode::output_schema;\n+\n+      // ExecNodes carry basic introspection for debugging purposes\n+      const char* kind_name() const override { return \"PassthruNode\"; }\n+      using ExecNode::label;\n\nReview comment:\n       Are the \"using\" clauses useful here? Is it just for documenting the example?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-06T17:00:16.884+0000",
                    "updated": "2021-10-06T17:00:16.884+0000",
                    "started": "2021-10-06T17:00:16.884+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "661072",
                    "issueId": "13386923"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13386923/worklog/664276",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #11309:\nURL: https://github.com/apache/arrow/pull/11309#discussion_r727436820\n\n\n\n##########\nFile path: docs/source/cpp/streaming_execution.rst\n##########\n@@ -0,0 +1,291 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+.. cpp:namespace:: arrow::compute\n+\n+==========================\n+Streaming execution engine\n+==========================\n+\n+.. warning::\n+\n+    The streaming execution engine is experimental, and a stable API\n+    is not yet guaranteed.\n+\n+Motivation\n+----------\n+\n+For many complex computations, successive direct `invocation of\n+compute functions <invoking compute functions>` is not feasible\n+in either memory or computation time. Doing so causes all intermediate\n+data to be fully materialized. To facilitate arbitrarily large inputs\n+and more efficient resource usage, arrow also provides a streaming query\n\nReview comment:\n       If you prefer, but I think that's implicit in the declared namespace of this doc\n\n##########\nFile path: docs/source/cpp/compute.rst\n##########\n@@ -50,6 +50,8 @@ both array (chunked or not) and scalar inputs, however some will mandate\n either.  For example, while ``sort_indices`` requires its first and only\n input to be an array.\n \n+.. _invoking compute functions:\n\nReview comment:\n       I'll replace with underscores\r\n   \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-12T19:40:02.094+0000",
                    "updated": "2021-10-12T19:40:02.094+0000",
                    "started": "2021-10-12T19:40:02.094+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "664276",
                    "issueId": "13386923"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13386923/worklog/664280",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #11309:\nURL: https://github.com/apache/arrow/pull/11309#discussion_r727438719\n\n\n\n##########\nFile path: docs/source/cpp/simple_graph.svg\n##########\n@@ -0,0 +1,139 @@\n+<!---\n\nReview comment:\n       Typo in the SVG, fixed\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-12T19:43:03.926+0000",
                    "updated": "2021-10-12T19:43:03.926+0000",
                    "started": "2021-10-12T19:43:03.926+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "664280",
                    "issueId": "13386923"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13386923/worklog/664281",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #11309:\nURL: https://github.com/apache/arrow/pull/11309#discussion_r727439147\n\n\n\n##########\nFile path: docs/source/cpp/streaming_execution.rst\n##########\n@@ -0,0 +1,291 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+.. cpp:namespace:: arrow::compute\n+\n+==========================\n+Streaming execution engine\n+==========================\n+\n+.. warning::\n+\n+    The streaming execution engine is experimental, and a stable API\n+    is not yet guaranteed.\n+\n+Motivation\n+----------\n+\n+For many complex computations, successive direct `invocation of\n+compute functions <invoking compute functions>` is not feasible\n+in either memory or computation time. Doing so causes all intermediate\n+data to be fully materialized. To facilitate arbitrarily large inputs\n+and more efficient resource usage, arrow also provides a streaming query\n+engine with which computations can be formulated and executed.\n+\n+.. image:: simple_graph.svg\n+\n+:class:`ExecNode` is provided to reify the graph of operations in a query.\n+Batches of data (struct:`ExecBatch`) flow along edges of the graph from\n\nReview comment:\n       ah, thanks\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-12T19:43:47.199+0000",
                    "updated": "2021-10-12T19:43:47.199+0000",
                    "started": "2021-10-12T19:43:47.199+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "664281",
                    "issueId": "13386923"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13386923/worklog/664283",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #11309:\nURL: https://github.com/apache/arrow/pull/11309#discussion_r727439323\n\n\n\n##########\nFile path: docs/source/cpp/streaming_execution.rst\n##########\n@@ -0,0 +1,291 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+.. cpp:namespace:: arrow::compute\n+\n+==========================\n+Streaming execution engine\n+==========================\n+\n+.. warning::\n+\n+    The streaming execution engine is experimental, and a stable API\n+    is not yet guaranteed.\n+\n+Motivation\n+----------\n+\n+For many complex computations, successive direct `invocation of\n+compute functions <invoking compute functions>` is not feasible\n+in either memory or computation time. Doing so causes all intermediate\n+data to be fully materialized. To facilitate arbitrarily large inputs\n+and more efficient resource usage, arrow also provides a streaming query\n+engine with which computations can be formulated and executed.\n+\n+.. image:: simple_graph.svg\n+\n+:class:`ExecNode` is provided to reify the graph of operations in a query.\n+Batches of data (struct:`ExecBatch`) flow along edges of the graph from\n+node to node. Structuring the API around a stream of batches allows the\n+working set for each node to be tuned for optimal performance independent\n+of any other nodes in the graph. Each :class:`ExecNode` processes batches\n+as they are pushed to it along an edge of the graph by upstream nodes\n+(its inputs), and pushes batches along an edge of the graph to downstream\n+nodes (its outputs) as they are finalized.\n+\n+.. [shaikhha et al] SHAIKHHA, A., DASHTI, M., & KOCH, C. (2018). Push versus pull-based loop fusion in query engines. Journal of Functional Programming, 28. https://doi.org/10.1017/s0956796818000102\n+\n+Overview\n+--------\n+\n+:class:`ExecNode`\n+  Each node in the graph is an implementation of the :class:`ExecNode` interface.\n+\n+:class:`ExecPlan`\n+  A set of :class:`ExecNode` is contained and (to an extent) coordinated by an\n+  :class:`ExecPlan`.\n+\n+:class:`ExecFactoryRegistry`\n+  Instances of :class:`ExecNode` are constructed by factory functions held\n+  in a :class:`ExecFactoryRegistry`.\n+\n+:class:`ExecNodeOptions`\n+  Heterogenous parameters for factories of :class:`ExecNode` are bundled in an\n+  :class:`ExecNodeOptions`.\n+\n+:struct:`Declaration`\n+  ``dplyr``-inspired helper for efficient construction of an :class:`ExecPlan`.\n+\n+:struct:`ExecBatch`\n+  A lightweight container for a single chunk of arrow-formatted data. In contrast\n+  to :class:`RecordBatch`, :struct:`ExecBatch` is intended for use exclusively\n+  in a streaming execution context (for example, it will never have a corresponding\n\nReview comment:\n       very well\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-12T19:44:12.827+0000",
                    "updated": "2021-10-12T19:44:12.827+0000",
                    "started": "2021-10-12T19:44:12.827+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "664283",
                    "issueId": "13386923"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13386923/worklog/664284",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #11309:\nURL: https://github.com/apache/arrow/pull/11309#discussion_r727439755\n\n\n\n##########\nFile path: docs/source/cpp/streaming_execution.rst\n##########\n@@ -0,0 +1,291 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+.. cpp:namespace:: arrow::compute\n+\n+==========================\n+Streaming execution engine\n+==========================\n+\n+.. warning::\n+\n+    The streaming execution engine is experimental, and a stable API\n+    is not yet guaranteed.\n+\n+Motivation\n+----------\n+\n+For many complex computations, successive direct `invocation of\n+compute functions <invoking compute functions>` is not feasible\n+in either memory or computation time. Doing so causes all intermediate\n+data to be fully materialized. To facilitate arbitrarily large inputs\n+and more efficient resource usage, arrow also provides a streaming query\n+engine with which computations can be formulated and executed.\n+\n+.. image:: simple_graph.svg\n+\n+:class:`ExecNode` is provided to reify the graph of operations in a query.\n+Batches of data (struct:`ExecBatch`) flow along edges of the graph from\n+node to node. Structuring the API around a stream of batches allows the\n+working set for each node to be tuned for optimal performance independent\n+of any other nodes in the graph. Each :class:`ExecNode` processes batches\n+as they are pushed to it along an edge of the graph by upstream nodes\n+(its inputs), and pushes batches along an edge of the graph to downstream\n+nodes (its outputs) as they are finalized.\n+\n+.. [shaikhha et al] SHAIKHHA, A., DASHTI, M., & KOCH, C. (2018). Push versus pull-based loop fusion in query engines. Journal of Functional Programming, 28. https://doi.org/10.1017/s0956796818000102\n\nReview comment:\n       I wasn't sure whether to reference that citation; how much space should I use justifying a streaming execution model?\n\n##########\nFile path: docs/source/cpp/streaming_execution.rst\n##########\n@@ -0,0 +1,291 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+.. cpp:namespace:: arrow::compute\n+\n+==========================\n+Streaming execution engine\n+==========================\n+\n+.. warning::\n+\n+    The streaming execution engine is experimental, and a stable API\n+    is not yet guaranteed.\n+\n+Motivation\n+----------\n+\n+For many complex computations, successive direct `invocation of\n+compute functions <invoking compute functions>` is not feasible\n+in either memory or computation time. Doing so causes all intermediate\n+data to be fully materialized. To facilitate arbitrarily large inputs\n+and more efficient resource usage, arrow also provides a streaming query\n+engine with which computations can be formulated and executed.\n+\n+.. image:: simple_graph.svg\n+\n+:class:`ExecNode` is provided to reify the graph of operations in a query.\n+Batches of data (struct:`ExecBatch`) flow along edges of the graph from\n+node to node. Structuring the API around a stream of batches allows the\n+working set for each node to be tuned for optimal performance independent\n+of any other nodes in the graph. Each :class:`ExecNode` processes batches\n+as they are pushed to it along an edge of the graph by upstream nodes\n+(its inputs), and pushes batches along an edge of the graph to downstream\n+nodes (its outputs) as they are finalized.\n+\n+.. [shaikhha et al] SHAIKHHA, A., DASHTI, M., & KOCH, C. (2018). Push versus pull-based loop fusion in query engines. Journal of Functional Programming, 28. https://doi.org/10.1017/s0956796818000102\n+\n+Overview\n+--------\n+\n+:class:`ExecNode`\n+  Each node in the graph is an implementation of the :class:`ExecNode` interface.\n+\n+:class:`ExecPlan`\n+  A set of :class:`ExecNode` is contained and (to an extent) coordinated by an\n+  :class:`ExecPlan`.\n+\n+:class:`ExecFactoryRegistry`\n+  Instances of :class:`ExecNode` are constructed by factory functions held\n+  in a :class:`ExecFactoryRegistry`.\n+\n+:class:`ExecNodeOptions`\n+  Heterogenous parameters for factories of :class:`ExecNode` are bundled in an\n+  :class:`ExecNodeOptions`.\n+\n+:struct:`Declaration`\n+  ``dplyr``-inspired helper for efficient construction of an :class:`ExecPlan`.\n+\n+:struct:`ExecBatch`\n+  A lightweight container for a single chunk of arrow-formatted data. In contrast\n+  to :class:`RecordBatch`, :struct:`ExecBatch` is intended for use exclusively\n+  in a streaming execution context (for example, it will never have a corresponding\n+  Python binding). Furthermore columns which happen to have a constant value may\n+  be represented by a :class:`Scalar` instead of an :class:`Array`. In addition,\n+  :struct:`ExecBatch` may carry execution-relevant properties including a\n+  guaranteed-true-filter for :class:`Expression` simplification.\n+\n+\n+An example :class:`ExecNode` implementation which simlpy passes all input batches\n\nReview comment:\n       thanks\n\n##########\nFile path: docs/source/cpp/streaming_execution.rst\n##########\n@@ -0,0 +1,291 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+.. cpp:namespace:: arrow::compute\n+\n+==========================\n+Streaming execution engine\n+==========================\n+\n+.. warning::\n+\n+    The streaming execution engine is experimental, and a stable API\n+    is not yet guaranteed.\n+\n+Motivation\n+----------\n+\n+For many complex computations, successive direct `invocation of\n+compute functions <invoking compute functions>` is not feasible\n+in either memory or computation time. Doing so causes all intermediate\n+data to be fully materialized. To facilitate arbitrarily large inputs\n+and more efficient resource usage, arrow also provides a streaming query\n+engine with which computations can be formulated and executed.\n+\n+.. image:: simple_graph.svg\n+\n+:class:`ExecNode` is provided to reify the graph of operations in a query.\n+Batches of data (struct:`ExecBatch`) flow along edges of the graph from\n+node to node. Structuring the API around a stream of batches allows the\n+working set for each node to be tuned for optimal performance independent\n+of any other nodes in the graph. Each :class:`ExecNode` processes batches\n+as they are pushed to it along an edge of the graph by upstream nodes\n+(its inputs), and pushes batches along an edge of the graph to downstream\n+nodes (its outputs) as they are finalized.\n+\n+.. [shaikhha et al] SHAIKHHA, A., DASHTI, M., & KOCH, C. (2018). Push versus pull-based loop fusion in query engines. Journal of Functional Programming, 28. https://doi.org/10.1017/s0956796818000102\n+\n+Overview\n+--------\n+\n+:class:`ExecNode`\n+  Each node in the graph is an implementation of the :class:`ExecNode` interface.\n+\n+:class:`ExecPlan`\n+  A set of :class:`ExecNode` is contained and (to an extent) coordinated by an\n+  :class:`ExecPlan`.\n+\n+:class:`ExecFactoryRegistry`\n+  Instances of :class:`ExecNode` are constructed by factory functions held\n+  in a :class:`ExecFactoryRegistry`.\n+\n+:class:`ExecNodeOptions`\n+  Heterogenous parameters for factories of :class:`ExecNode` are bundled in an\n+  :class:`ExecNodeOptions`.\n+\n+:struct:`Declaration`\n+  ``dplyr``-inspired helper for efficient construction of an :class:`ExecPlan`.\n+\n+:struct:`ExecBatch`\n+  A lightweight container for a single chunk of arrow-formatted data. In contrast\n+  to :class:`RecordBatch`, :struct:`ExecBatch` is intended for use exclusively\n+  in a streaming execution context (for example, it will never have a corresponding\n+  Python binding). Furthermore columns which happen to have a constant value may\n+  be represented by a :class:`Scalar` instead of an :class:`Array`. In addition,\n+  :struct:`ExecBatch` may carry execution-relevant properties including a\n+  guaranteed-true-filter for :class:`Expression` simplification.\n+\n+\n+An example :class:`ExecNode` implementation which simlpy passes all input batches\n+through unchanged::\n+\n+    class PassthruNode : public ExecNode {\n+     public:\n+      // InputReceived is the main entry point for ExecNodes. It is invoked\n+      // by an input of this node to push a batch here for processing.\n+      void InputReceived(ExecNode* input, ExecBatch batch) override {\n+        // Since this is a passthru node we simply push the batch to our\n+        // only output here.\n+        outputs_[0]->InputReceived(this, batch);\n+      }\n+\n+      // ErrorRecieved is called by an input of this node to report an error.\n\nReview comment:\n       thanks\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-12T19:44:56.085+0000",
                    "updated": "2021-10-12T19:44:56.085+0000",
                    "started": "2021-10-12T19:44:56.084+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "664284",
                    "issueId": "13386923"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13386923/worklog/664285",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #11309:\nURL: https://github.com/apache/arrow/pull/11309#discussion_r727440073\n\n\n\n##########\nFile path: docs/source/cpp/streaming_execution.rst\n##########\n@@ -0,0 +1,291 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+.. cpp:namespace:: arrow::compute\n+\n+==========================\n+Streaming execution engine\n+==========================\n+\n+.. warning::\n+\n+    The streaming execution engine is experimental, and a stable API\n+    is not yet guaranteed.\n+\n+Motivation\n+----------\n+\n+For many complex computations, successive direct `invocation of\n+compute functions <invoking compute functions>` is not feasible\n+in either memory or computation time. Doing so causes all intermediate\n+data to be fully materialized. To facilitate arbitrarily large inputs\n+and more efficient resource usage, arrow also provides a streaming query\n+engine with which computations can be formulated and executed.\n+\n+.. image:: simple_graph.svg\n+\n+:class:`ExecNode` is provided to reify the graph of operations in a query.\n+Batches of data (struct:`ExecBatch`) flow along edges of the graph from\n+node to node. Structuring the API around a stream of batches allows the\n+working set for each node to be tuned for optimal performance independent\n+of any other nodes in the graph. Each :class:`ExecNode` processes batches\n+as they are pushed to it along an edge of the graph by upstream nodes\n+(its inputs), and pushes batches along an edge of the graph to downstream\n+nodes (its outputs) as they are finalized.\n+\n+.. [shaikhha et al] SHAIKHHA, A., DASHTI, M., & KOCH, C. (2018). Push versus pull-based loop fusion in query engines. Journal of Functional Programming, 28. https://doi.org/10.1017/s0956796818000102\n+\n+Overview\n+--------\n+\n+:class:`ExecNode`\n+  Each node in the graph is an implementation of the :class:`ExecNode` interface.\n+\n+:class:`ExecPlan`\n+  A set of :class:`ExecNode` is contained and (to an extent) coordinated by an\n+  :class:`ExecPlan`.\n+\n+:class:`ExecFactoryRegistry`\n+  Instances of :class:`ExecNode` are constructed by factory functions held\n+  in a :class:`ExecFactoryRegistry`.\n+\n+:class:`ExecNodeOptions`\n+  Heterogenous parameters for factories of :class:`ExecNode` are bundled in an\n+  :class:`ExecNodeOptions`.\n+\n+:struct:`Declaration`\n+  ``dplyr``-inspired helper for efficient construction of an :class:`ExecPlan`.\n+\n+:struct:`ExecBatch`\n+  A lightweight container for a single chunk of arrow-formatted data. In contrast\n+  to :class:`RecordBatch`, :struct:`ExecBatch` is intended for use exclusively\n+  in a streaming execution context (for example, it will never have a corresponding\n+  Python binding). Furthermore columns which happen to have a constant value may\n+  be represented by a :class:`Scalar` instead of an :class:`Array`. In addition,\n+  :struct:`ExecBatch` may carry execution-relevant properties including a\n+  guaranteed-true-filter for :class:`Expression` simplification.\n+\n+\n+An example :class:`ExecNode` implementation which simlpy passes all input batches\n+through unchanged::\n+\n+    class PassthruNode : public ExecNode {\n+     public:\n+      // InputReceived is the main entry point for ExecNodes. It is invoked\n+      // by an input of this node to push a batch here for processing.\n+      void InputReceived(ExecNode* input, ExecBatch batch) override {\n+        // Since this is a passthru node we simply push the batch to our\n+        // only output here.\n+        outputs_[0]->InputReceived(this, batch);\n+      }\n+\n+      // ErrorRecieved is called by an input of this node to report an error.\n+      void ErrorReceived(ExecNode* input, Status error) override {\n+        outputs_[0]->ErrorReceived(this, error);\n+      }\n+\n+      // InputFinished is used to signal how many batches will ultimately arrive.\n+      // It may be called with any ordering relative to InputReceived/ErrorReceived.\n+      void InputFinished(ExecNode* input, int total_batches) override {\n+        outputs_[0]->InputFinished(this, total_batches);\n+      }\n+\n+      // ExecNodes may request that their inputs throttle production of batches\n+      // until they are ready for more, or stop production if no further batches\n+      // are required.\n+      void ResumeProducing(ExecNode* output) override { inputs_[0]->ResumeProducing(this); }\n+      void PauseProducing(ExecNode* output) override { inputs_[0]->PauseProducing(this); }\n+      void StopProducing(ExecNode* output) override { inputs_[0]->StopProducing(this); }\n+\n+      // An ExecNode has a single output schema to which all its batches conform.\n+      using ExecNode::output_schema;\n+\n+      // ExecNodes carry basic introspection for debugging purposes\n+      const char* kind_name() const override { return \"PassthruNode\"; }\n+      using ExecNode::label;\n\nReview comment:\n       It's just for documenting purposes, it happens to be valid C++\n\n##########\nFile path: docs/source/cpp/streaming_execution.rst\n##########\n@@ -0,0 +1,291 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+.. cpp:namespace:: arrow::compute\n+\n+==========================\n+Streaming execution engine\n+==========================\n+\n+.. warning::\n+\n+    The streaming execution engine is experimental, and a stable API\n+    is not yet guaranteed.\n+\n+Motivation\n+----------\n+\n+For many complex computations, successive direct `invocation of\n+compute functions <invoking compute functions>` is not feasible\n+in either memory or computation time. Doing so causes all intermediate\n+data to be fully materialized. To facilitate arbitrarily large inputs\n+and more efficient resource usage, arrow also provides a streaming query\n+engine with which computations can be formulated and executed.\n+\n+.. image:: simple_graph.svg\n+\n+:class:`ExecNode` is provided to reify the graph of operations in a query.\n+Batches of data (struct:`ExecBatch`) flow along edges of the graph from\n+node to node. Structuring the API around a stream of batches allows the\n+working set for each node to be tuned for optimal performance independent\n+of any other nodes in the graph. Each :class:`ExecNode` processes batches\n+as they are pushed to it along an edge of the graph by upstream nodes\n+(its inputs), and pushes batches along an edge of the graph to downstream\n+nodes (its outputs) as they are finalized.\n+\n+.. [shaikhha et al] SHAIKHHA, A., DASHTI, M., & KOCH, C. (2018). Push versus pull-based loop fusion in query engines. Journal of Functional Programming, 28. https://doi.org/10.1017/s0956796818000102\n+\n+Overview\n+--------\n+\n+:class:`ExecNode`\n+  Each node in the graph is an implementation of the :class:`ExecNode` interface.\n+\n+:class:`ExecPlan`\n+  A set of :class:`ExecNode` is contained and (to an extent) coordinated by an\n+  :class:`ExecPlan`.\n+\n+:class:`ExecFactoryRegistry`\n+  Instances of :class:`ExecNode` are constructed by factory functions held\n+  in a :class:`ExecFactoryRegistry`.\n+\n+:class:`ExecNodeOptions`\n+  Heterogenous parameters for factories of :class:`ExecNode` are bundled in an\n+  :class:`ExecNodeOptions`.\n+\n+:struct:`Declaration`\n+  ``dplyr``-inspired helper for efficient construction of an :class:`ExecPlan`.\n+\n+:struct:`ExecBatch`\n+  A lightweight container for a single chunk of arrow-formatted data. In contrast\n+  to :class:`RecordBatch`, :struct:`ExecBatch` is intended for use exclusively\n+  in a streaming execution context (for example, it will never have a corresponding\n+  Python binding). Furthermore columns which happen to have a constant value may\n+  be represented by a :class:`Scalar` instead of an :class:`Array`. In addition,\n+  :struct:`ExecBatch` may carry execution-relevant properties including a\n+  guaranteed-true-filter for :class:`Expression` simplification.\n+\n+\n+An example :class:`ExecNode` implementation which simlpy passes all input batches\n+through unchanged::\n+\n+    class PassthruNode : public ExecNode {\n+     public:\n+      // InputReceived is the main entry point for ExecNodes. It is invoked\n+      // by an input of this node to push a batch here for processing.\n+      void InputReceived(ExecNode* input, ExecBatch batch) override {\n+        // Since this is a passthru node we simply push the batch to our\n+        // only output here.\n+        outputs_[0]->InputReceived(this, batch);\n+      }\n+\n+      // ErrorRecieved is called by an input of this node to report an error.\n+      void ErrorReceived(ExecNode* input, Status error) override {\n+        outputs_[0]->ErrorReceived(this, error);\n+      }\n+\n+      // InputFinished is used to signal how many batches will ultimately arrive.\n+      // It may be called with any ordering relative to InputReceived/ErrorReceived.\n+      void InputFinished(ExecNode* input, int total_batches) override {\n+        outputs_[0]->InputFinished(this, total_batches);\n+      }\n+\n+      // ExecNodes may request that their inputs throttle production of batches\n+      // until they are ready for more, or stop production if no further batches\n+      // are required.\n+      void ResumeProducing(ExecNode* output) override { inputs_[0]->ResumeProducing(this); }\n+      void PauseProducing(ExecNode* output) override { inputs_[0]->PauseProducing(this); }\n+      void StopProducing(ExecNode* output) override { inputs_[0]->StopProducing(this); }\n+\n+      // An ExecNode has a single output schema to which all its batches conform.\n+      using ExecNode::output_schema;\n+\n+      // ExecNodes carry basic introspection for debugging purposes\n+      const char* kind_name() const override { return \"PassthruNode\"; }\n+      using ExecNode::label;\n+      using ExecNode::SetLabel;\n+      using ExecNode::ToString;\n+\n+      // An ExecNode holds references to its inputs and outputs, so it is possible\n+      // to walk the graph of execution if necessary.\n+      using ExecNode::inputs;\n+      using ExecNode::outputs;\n+\n+      // StartProducing() and StopProducing() are invoked by an ExecPlan to\n+      // coordinate the graph-wide execution state.\n+      Status StartProducing() override { return Status::OK(); }\n+      void StopProducing() override {}\n+      Future<> finished() override { return inputs_[0]->finished(); }\n+    };\n+\n+Note that each method which is associated with an edge of the graph must be invoked\n+with an ``ExecNode*`` to identify the node which invoked it. For example, in an\n+:class:`ExecNode` which implements ``JOIN`` this tagging might be used to differentiate\n+between batches from the left or right inputs.\n+``InputReceived, ErrorReceived, InputFinished`` may only be invoked by the inputs of a\n\nReview comment:\n       will do\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-12T19:45:19.719+0000",
                    "updated": "2021-10-12T19:45:19.719+0000",
                    "started": "2021-10-12T19:45:19.719+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "664285",
                    "issueId": "13386923"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13386923/worklog/664287",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #11309:\nURL: https://github.com/apache/arrow/pull/11309#discussion_r727440417\n\n\n\n##########\nFile path: docs/source/cpp/streaming_execution.rst\n##########\n@@ -0,0 +1,291 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+.. cpp:namespace:: arrow::compute\n+\n+==========================\n+Streaming execution engine\n+==========================\n+\n+.. warning::\n+\n+    The streaming execution engine is experimental, and a stable API\n+    is not yet guaranteed.\n+\n+Motivation\n+----------\n+\n+For many complex computations, successive direct `invocation of\n+compute functions <invoking compute functions>` is not feasible\n+in either memory or computation time. Doing so causes all intermediate\n+data to be fully materialized. To facilitate arbitrarily large inputs\n+and more efficient resource usage, arrow also provides a streaming query\n+engine with which computations can be formulated and executed.\n+\n+.. image:: simple_graph.svg\n+\n+:class:`ExecNode` is provided to reify the graph of operations in a query.\n+Batches of data (struct:`ExecBatch`) flow along edges of the graph from\n+node to node. Structuring the API around a stream of batches allows the\n+working set for each node to be tuned for optimal performance independent\n+of any other nodes in the graph. Each :class:`ExecNode` processes batches\n+as they are pushed to it along an edge of the graph by upstream nodes\n+(its inputs), and pushes batches along an edge of the graph to downstream\n+nodes (its outputs) as they are finalized.\n+\n+.. [shaikhha et al] SHAIKHHA, A., DASHTI, M., & KOCH, C. (2018). Push versus pull-based loop fusion in query engines. Journal of Functional Programming, 28. https://doi.org/10.1017/s0956796818000102\n+\n+Overview\n+--------\n+\n+:class:`ExecNode`\n+  Each node in the graph is an implementation of the :class:`ExecNode` interface.\n+\n+:class:`ExecPlan`\n+  A set of :class:`ExecNode` is contained and (to an extent) coordinated by an\n+  :class:`ExecPlan`.\n+\n+:class:`ExecFactoryRegistry`\n+  Instances of :class:`ExecNode` are constructed by factory functions held\n+  in a :class:`ExecFactoryRegistry`.\n+\n+:class:`ExecNodeOptions`\n+  Heterogenous parameters for factories of :class:`ExecNode` are bundled in an\n+  :class:`ExecNodeOptions`.\n+\n+:struct:`Declaration`\n+  ``dplyr``-inspired helper for efficient construction of an :class:`ExecPlan`.\n+\n+:struct:`ExecBatch`\n+  A lightweight container for a single chunk of arrow-formatted data. In contrast\n+  to :class:`RecordBatch`, :struct:`ExecBatch` is intended for use exclusively\n+  in a streaming execution context (for example, it will never have a corresponding\n+  Python binding). Furthermore columns which happen to have a constant value may\n+  be represented by a :class:`Scalar` instead of an :class:`Array`. In addition,\n+  :struct:`ExecBatch` may carry execution-relevant properties including a\n+  guaranteed-true-filter for :class:`Expression` simplification.\n+\n+\n+An example :class:`ExecNode` implementation which simlpy passes all input batches\n+through unchanged::\n+\n+    class PassthruNode : public ExecNode {\n+     public:\n+      // InputReceived is the main entry point for ExecNodes. It is invoked\n+      // by an input of this node to push a batch here for processing.\n+      void InputReceived(ExecNode* input, ExecBatch batch) override {\n+        // Since this is a passthru node we simply push the batch to our\n+        // only output here.\n+        outputs_[0]->InputReceived(this, batch);\n+      }\n+\n+      // ErrorRecieved is called by an input of this node to report an error.\n+      void ErrorReceived(ExecNode* input, Status error) override {\n+        outputs_[0]->ErrorReceived(this, error);\n+      }\n+\n+      // InputFinished is used to signal how many batches will ultimately arrive.\n+      // It may be called with any ordering relative to InputReceived/ErrorReceived.\n+      void InputFinished(ExecNode* input, int total_batches) override {\n+        outputs_[0]->InputFinished(this, total_batches);\n+      }\n+\n+      // ExecNodes may request that their inputs throttle production of batches\n+      // until they are ready for more, or stop production if no further batches\n+      // are required.\n+      void ResumeProducing(ExecNode* output) override { inputs_[0]->ResumeProducing(this); }\n+      void PauseProducing(ExecNode* output) override { inputs_[0]->PauseProducing(this); }\n+      void StopProducing(ExecNode* output) override { inputs_[0]->StopProducing(this); }\n+\n+      // An ExecNode has a single output schema to which all its batches conform.\n+      using ExecNode::output_schema;\n+\n+      // ExecNodes carry basic introspection for debugging purposes\n+      const char* kind_name() const override { return \"PassthruNode\"; }\n+      using ExecNode::label;\n+      using ExecNode::SetLabel;\n+      using ExecNode::ToString;\n+\n+      // An ExecNode holds references to its inputs and outputs, so it is possible\n+      // to walk the graph of execution if necessary.\n+      using ExecNode::inputs;\n+      using ExecNode::outputs;\n+\n+      // StartProducing() and StopProducing() are invoked by an ExecPlan to\n+      // coordinate the graph-wide execution state.\n+      Status StartProducing() override { return Status::OK(); }\n+      void StopProducing() override {}\n+      Future<> finished() override { return inputs_[0]->finished(); }\n+    };\n+\n+Note that each method which is associated with an edge of the graph must be invoked\n+with an ``ExecNode*`` to identify the node which invoked it. For example, in an\n+:class:`ExecNode` which implements ``JOIN`` this tagging might be used to differentiate\n+between batches from the left or right inputs.\n+``InputReceived, ErrorReceived, InputFinished`` may only be invoked by the inputs of a\n+node, while ``ResumeProducing, PauseProducing, StopProducing`` may only be invoked by\n+outputs of a node.\n+\n+:class:`ExecPlan` contains the associated instances of :class:`ExecNode` alive\n\nReview comment:\n       it is incorrect, I started the sentence thinking something different from the end :D\n\n##########\nFile path: docs/source/cpp/streaming_execution.rst\n##########\n@@ -0,0 +1,291 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+.. cpp:namespace:: arrow::compute\n+\n+==========================\n+Streaming execution engine\n+==========================\n+\n+.. warning::\n+\n+    The streaming execution engine is experimental, and a stable API\n+    is not yet guaranteed.\n+\n+Motivation\n+----------\n+\n+For many complex computations, successive direct `invocation of\n+compute functions <invoking compute functions>` is not feasible\n+in either memory or computation time. Doing so causes all intermediate\n+data to be fully materialized. To facilitate arbitrarily large inputs\n+and more efficient resource usage, arrow also provides a streaming query\n+engine with which computations can be formulated and executed.\n+\n+.. image:: simple_graph.svg\n+\n+:class:`ExecNode` is provided to reify the graph of operations in a query.\n+Batches of data (struct:`ExecBatch`) flow along edges of the graph from\n+node to node. Structuring the API around a stream of batches allows the\n+working set for each node to be tuned for optimal performance independent\n+of any other nodes in the graph. Each :class:`ExecNode` processes batches\n+as they are pushed to it along an edge of the graph by upstream nodes\n+(its inputs), and pushes batches along an edge of the graph to downstream\n+nodes (its outputs) as they are finalized.\n+\n+.. [shaikhha et al] SHAIKHHA, A., DASHTI, M., & KOCH, C. (2018). Push versus pull-based loop fusion in query engines. Journal of Functional Programming, 28. https://doi.org/10.1017/s0956796818000102\n+\n+Overview\n+--------\n+\n+:class:`ExecNode`\n+  Each node in the graph is an implementation of the :class:`ExecNode` interface.\n+\n+:class:`ExecPlan`\n+  A set of :class:`ExecNode` is contained and (to an extent) coordinated by an\n+  :class:`ExecPlan`.\n+\n+:class:`ExecFactoryRegistry`\n+  Instances of :class:`ExecNode` are constructed by factory functions held\n+  in a :class:`ExecFactoryRegistry`.\n+\n+:class:`ExecNodeOptions`\n+  Heterogenous parameters for factories of :class:`ExecNode` are bundled in an\n+  :class:`ExecNodeOptions`.\n+\n+:struct:`Declaration`\n+  ``dplyr``-inspired helper for efficient construction of an :class:`ExecPlan`.\n+\n+:struct:`ExecBatch`\n+  A lightweight container for a single chunk of arrow-formatted data. In contrast\n+  to :class:`RecordBatch`, :struct:`ExecBatch` is intended for use exclusively\n+  in a streaming execution context (for example, it will never have a corresponding\n+  Python binding). Furthermore columns which happen to have a constant value may\n+  be represented by a :class:`Scalar` instead of an :class:`Array`. In addition,\n+  :struct:`ExecBatch` may carry execution-relevant properties including a\n+  guaranteed-true-filter for :class:`Expression` simplification.\n+\n+\n+An example :class:`ExecNode` implementation which simlpy passes all input batches\n+through unchanged::\n+\n+    class PassthruNode : public ExecNode {\n+     public:\n+      // InputReceived is the main entry point for ExecNodes. It is invoked\n+      // by an input of this node to push a batch here for processing.\n+      void InputReceived(ExecNode* input, ExecBatch batch) override {\n+        // Since this is a passthru node we simply push the batch to our\n+        // only output here.\n+        outputs_[0]->InputReceived(this, batch);\n+      }\n+\n+      // ErrorRecieved is called by an input of this node to report an error.\n+      void ErrorReceived(ExecNode* input, Status error) override {\n+        outputs_[0]->ErrorReceived(this, error);\n+      }\n+\n+      // InputFinished is used to signal how many batches will ultimately arrive.\n+      // It may be called with any ordering relative to InputReceived/ErrorReceived.\n+      void InputFinished(ExecNode* input, int total_batches) override {\n+        outputs_[0]->InputFinished(this, total_batches);\n+      }\n+\n+      // ExecNodes may request that their inputs throttle production of batches\n+      // until they are ready for more, or stop production if no further batches\n+      // are required.\n+      void ResumeProducing(ExecNode* output) override { inputs_[0]->ResumeProducing(this); }\n+      void PauseProducing(ExecNode* output) override { inputs_[0]->PauseProducing(this); }\n+      void StopProducing(ExecNode* output) override { inputs_[0]->StopProducing(this); }\n+\n+      // An ExecNode has a single output schema to which all its batches conform.\n+      using ExecNode::output_schema;\n+\n+      // ExecNodes carry basic introspection for debugging purposes\n+      const char* kind_name() const override { return \"PassthruNode\"; }\n+      using ExecNode::label;\n+      using ExecNode::SetLabel;\n+      using ExecNode::ToString;\n+\n+      // An ExecNode holds references to its inputs and outputs, so it is possible\n+      // to walk the graph of execution if necessary.\n+      using ExecNode::inputs;\n+      using ExecNode::outputs;\n+\n+      // StartProducing() and StopProducing() are invoked by an ExecPlan to\n+      // coordinate the graph-wide execution state.\n+      Status StartProducing() override { return Status::OK(); }\n+      void StopProducing() override {}\n+      Future<> finished() override { return inputs_[0]->finished(); }\n+    };\n+\n+Note that each method which is associated with an edge of the graph must be invoked\n+with an ``ExecNode*`` to identify the node which invoked it. For example, in an\n+:class:`ExecNode` which implements ``JOIN`` this tagging might be used to differentiate\n+between batches from the left or right inputs.\n+``InputReceived, ErrorReceived, InputFinished`` may only be invoked by the inputs of a\n+node, while ``ResumeProducing, PauseProducing, StopProducing`` may only be invoked by\n+outputs of a node.\n+\n+:class:`ExecPlan` contains the associated instances of :class:`ExecNode` alive\n+and provides convenience methods for starting and stopping execution of all nodes\n+and for querying/awaiting their completion::\n+\n+    // construct an ExecPlan first to hold your nodes\n+    ARROW_ASSIGN_OR_RAISE(auto plan, ExecPlan::Make(default_exec_context()));\n+\n+    // ... add nodes to your ExecPlan\n+\n+    // start all nodes in the graph\n+    ARROW_RETURN_NOT_OK(plan->StartProducing());\n+\n+    if (need_stop) {\n+      // stop all nodes in the graph\n+      plan->StopProducing();\n+    }\n+\n+    // Complete will be marked finished when all nodes have run to completion\n+    // or acknowledged a StopProducing() signal. The ExecPlan should be kept\n+    // alive until this future is marked finished.\n+    Future<> complete = plan->finished();\n+\n+\n+Constructing ``ExecPlan``s\n+--------------------------\n+\n+.. warning::\n+\n+    The following will be superceded by construction from Compute IR, see ARROW-14074.\n+\n+None of the concrete implementations of :class:`ExecNode` are exposed\n+in headers, so they can't be constructed directly outside the\n+Translation Unit where they are defined. Instead, factories to\n+create them are provided in an extensible registry. This structure\n+provides a number of benefits:\n+\n+- This enforces consistent construction.\n+- It decouples implementations from consumers of the interface\n+  (for example: we have two classes for scalar and grouped aggregate,\n+   we can choose which to construct within the single factory by\n+   checking whether grouping keys are provided)\n+- This expedites integration with out-of-library extensions. For example\n+  \"scan\" nodes are implemented in the separate ``libarrow_dataset.so`` library.\n+- Since the class is not referencable outside the Translation Unit in which it\n+  is defined, compilers can optimize more aggressively.\n+\n+Factories of :class:`ExecNode` can be retrieved by name from the registry.\n+The default registry is available through\n+:func:`arrow::compute::default_exec_factory_registry()`\n+and can be queried for the built-in factories::\n+\n+    // get the factory for \"filter\" nodes:\n+    ARROW_ASSIGN_OR_RAISE(auto make_filter,\n+                          default_exec_factory_registry()->GetFactory(\"filter\"));\n+\n+    // factories take three arguments:\n+    ARROW_ASSIGN_OR_RAISE(ExecNode* filter_node, *make_filter(\n+        // the ExecPlan which should own this node\n+        plan.get(),\n+\n+        // nodes which will send batches to this node (inputs)\n+        {scan_node},\n+\n+        // parameters unique to \"filter\" nodes\n+        FilterNodeOptions{filter_expression}));\n+\n+    // alternative shorthand:\n+    ARROW_ASSIGN_OR_RAISE(filter_node, MakeExecNode(\"filter\",\n+        plan.get(), {scan_node}, FilterNodeOptions{filter_expression});\n+\n+Factories can also be added to the default registry as long as they are\n+convertible to ``std::function<Result<ExecNode*>(\n+ExecPlan*, std::vector<ExecNode*>, const ExecNodeOptions&)>``.\n+\n+To build an :class:`ExecPlan` representing a simple pipeline which\n+reads from a :class:`RecordBatchReader` then filters, projects, and\n+writes to disk::\n+\n+    std::shared_ptr<RecordBatchReader> reader = GetStreamOfBatches();\n+    ExecNode* source_node = *MakeExecNode(\"source\", plan.get(), {},\n+                                          SourceNodeOptions::FromReader(\n+                                              reader,\n+                                              GetCpuThreadPool()));\n+\n+    ExecNode* filter_node = *MakeExecNode(\"filter\", plan.get(), {source_node},\n+                                          FilterNodeOptions{\n+                                            greater(field_ref(\"score\"), literal(3))\n+                                          });\n+\n+    ExecNode* project_node = *MakeExecNode(\"project\", plan.get(), {filter_node},\n+                                           ProjectNodeOptions{\n+                                             {add(field_ref(\"score\"), literal(1))},\n+                                             {\"score + 1\"}\n+                                           });\n+\n+    MakeExecNode(\"write\", plan.get(), {project_node},\n+                 WriteNodeOptions{/*base_dir=*/\"/dat\", /*...*/});\n+\n+:struct:`Declaration` is a dplyr-inspired helper which further decreases the\n\nReview comment:\n       will do\n\n##########\nFile path: docs/source/cpp/streaming_execution.rst\n##########\n@@ -0,0 +1,291 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+.. cpp:namespace:: arrow::compute\n+\n+==========================\n+Streaming execution engine\n+==========================\n+\n+.. warning::\n+\n+    The streaming execution engine is experimental, and a stable API\n+    is not yet guaranteed.\n+\n+Motivation\n+----------\n+\n+For many complex computations, successive direct `invocation of\n+compute functions <invoking compute functions>` is not feasible\n+in either memory or computation time. Doing so causes all intermediate\n+data to be fully materialized. To facilitate arbitrarily large inputs\n+and more efficient resource usage, arrow also provides a streaming query\n+engine with which computations can be formulated and executed.\n+\n+.. image:: simple_graph.svg\n+\n+:class:`ExecNode` is provided to reify the graph of operations in a query.\n+Batches of data (struct:`ExecBatch`) flow along edges of the graph from\n+node to node. Structuring the API around a stream of batches allows the\n+working set for each node to be tuned for optimal performance independent\n+of any other nodes in the graph. Each :class:`ExecNode` processes batches\n+as they are pushed to it along an edge of the graph by upstream nodes\n+(its inputs), and pushes batches along an edge of the graph to downstream\n+nodes (its outputs) as they are finalized.\n+\n+.. [shaikhha et al] SHAIKHHA, A., DASHTI, M., & KOCH, C. (2018). Push versus pull-based loop fusion in query engines. Journal of Functional Programming, 28. https://doi.org/10.1017/s0956796818000102\n+\n+Overview\n+--------\n+\n+:class:`ExecNode`\n+  Each node in the graph is an implementation of the :class:`ExecNode` interface.\n+\n+:class:`ExecPlan`\n+  A set of :class:`ExecNode` is contained and (to an extent) coordinated by an\n+  :class:`ExecPlan`.\n+\n+:class:`ExecFactoryRegistry`\n+  Instances of :class:`ExecNode` are constructed by factory functions held\n+  in a :class:`ExecFactoryRegistry`.\n+\n+:class:`ExecNodeOptions`\n+  Heterogenous parameters for factories of :class:`ExecNode` are bundled in an\n+  :class:`ExecNodeOptions`.\n+\n+:struct:`Declaration`\n+  ``dplyr``-inspired helper for efficient construction of an :class:`ExecPlan`.\n+\n+:struct:`ExecBatch`\n+  A lightweight container for a single chunk of arrow-formatted data. In contrast\n+  to :class:`RecordBatch`, :struct:`ExecBatch` is intended for use exclusively\n+  in a streaming execution context (for example, it will never have a corresponding\n+  Python binding). Furthermore columns which happen to have a constant value may\n+  be represented by a :class:`Scalar` instead of an :class:`Array`. In addition,\n+  :struct:`ExecBatch` may carry execution-relevant properties including a\n+  guaranteed-true-filter for :class:`Expression` simplification.\n+\n+\n+An example :class:`ExecNode` implementation which simlpy passes all input batches\n+through unchanged::\n+\n+    class PassthruNode : public ExecNode {\n+     public:\n+      // InputReceived is the main entry point for ExecNodes. It is invoked\n+      // by an input of this node to push a batch here for processing.\n+      void InputReceived(ExecNode* input, ExecBatch batch) override {\n+        // Since this is a passthru node we simply push the batch to our\n+        // only output here.\n+        outputs_[0]->InputReceived(this, batch);\n+      }\n+\n+      // ErrorRecieved is called by an input of this node to report an error.\n+      void ErrorReceived(ExecNode* input, Status error) override {\n+        outputs_[0]->ErrorReceived(this, error);\n+      }\n+\n+      // InputFinished is used to signal how many batches will ultimately arrive.\n+      // It may be called with any ordering relative to InputReceived/ErrorReceived.\n+      void InputFinished(ExecNode* input, int total_batches) override {\n+        outputs_[0]->InputFinished(this, total_batches);\n+      }\n+\n+      // ExecNodes may request that their inputs throttle production of batches\n+      // until they are ready for more, or stop production if no further batches\n+      // are required.\n+      void ResumeProducing(ExecNode* output) override { inputs_[0]->ResumeProducing(this); }\n+      void PauseProducing(ExecNode* output) override { inputs_[0]->PauseProducing(this); }\n+      void StopProducing(ExecNode* output) override { inputs_[0]->StopProducing(this); }\n+\n+      // An ExecNode has a single output schema to which all its batches conform.\n+      using ExecNode::output_schema;\n+\n+      // ExecNodes carry basic introspection for debugging purposes\n+      const char* kind_name() const override { return \"PassthruNode\"; }\n+      using ExecNode::label;\n+      using ExecNode::SetLabel;\n+      using ExecNode::ToString;\n+\n+      // An ExecNode holds references to its inputs and outputs, so it is possible\n+      // to walk the graph of execution if necessary.\n+      using ExecNode::inputs;\n+      using ExecNode::outputs;\n+\n+      // StartProducing() and StopProducing() are invoked by an ExecPlan to\n+      // coordinate the graph-wide execution state.\n+      Status StartProducing() override { return Status::OK(); }\n+      void StopProducing() override {}\n+      Future<> finished() override { return inputs_[0]->finished(); }\n+    };\n+\n+Note that each method which is associated with an edge of the graph must be invoked\n+with an ``ExecNode*`` to identify the node which invoked it. For example, in an\n+:class:`ExecNode` which implements ``JOIN`` this tagging might be used to differentiate\n+between batches from the left or right inputs.\n+``InputReceived, ErrorReceived, InputFinished`` may only be invoked by the inputs of a\n+node, while ``ResumeProducing, PauseProducing, StopProducing`` may only be invoked by\n+outputs of a node.\n+\n+:class:`ExecPlan` contains the associated instances of :class:`ExecNode` alive\n+and provides convenience methods for starting and stopping execution of all nodes\n+and for querying/awaiting their completion::\n+\n+    // construct an ExecPlan first to hold your nodes\n+    ARROW_ASSIGN_OR_RAISE(auto plan, ExecPlan::Make(default_exec_context()));\n+\n+    // ... add nodes to your ExecPlan\n+\n+    // start all nodes in the graph\n+    ARROW_RETURN_NOT_OK(plan->StartProducing());\n+\n+    if (need_stop) {\n+      // stop all nodes in the graph\n+      plan->StopProducing();\n+    }\n+\n+    // Complete will be marked finished when all nodes have run to completion\n+    // or acknowledged a StopProducing() signal. The ExecPlan should be kept\n+    // alive until this future is marked finished.\n+    Future<> complete = plan->finished();\n+\n+\n+Constructing ``ExecPlan``s\n+--------------------------\n+\n+.. warning::\n+\n+    The following will be superceded by construction from Compute IR, see ARROW-14074.\n+\n+None of the concrete implementations of :class:`ExecNode` are exposed\n+in headers, so they can't be constructed directly outside the\n+Translation Unit where they are defined. Instead, factories to\n+create them are provided in an extensible registry. This structure\n+provides a number of benefits:\n+\n+- This enforces consistent construction.\n+- It decouples implementations from consumers of the interface\n+  (for example: we have two classes for scalar and grouped aggregate,\n+   we can choose which to construct within the single factory by\n+   checking whether grouping keys are provided)\n+- This expedites integration with out-of-library extensions. For example\n+  \"scan\" nodes are implemented in the separate ``libarrow_dataset.so`` library.\n+- Since the class is not referencable outside the Translation Unit in which it\n+  is defined, compilers can optimize more aggressively.\n+\n+Factories of :class:`ExecNode` can be retrieved by name from the registry.\n+The default registry is available through\n+:func:`arrow::compute::default_exec_factory_registry()`\n+and can be queried for the built-in factories::\n+\n+    // get the factory for \"filter\" nodes:\n+    ARROW_ASSIGN_OR_RAISE(auto make_filter,\n+                          default_exec_factory_registry()->GetFactory(\"filter\"));\n+\n+    // factories take three arguments:\n+    ARROW_ASSIGN_OR_RAISE(ExecNode* filter_node, *make_filter(\n+        // the ExecPlan which should own this node\n+        plan.get(),\n+\n+        // nodes which will send batches to this node (inputs)\n+        {scan_node},\n+\n+        // parameters unique to \"filter\" nodes\n+        FilterNodeOptions{filter_expression}));\n+\n+    // alternative shorthand:\n+    ARROW_ASSIGN_OR_RAISE(filter_node, MakeExecNode(\"filter\",\n+        plan.get(), {scan_node}, FilterNodeOptions{filter_expression});\n+\n+Factories can also be added to the default registry as long as they are\n+convertible to ``std::function<Result<ExecNode*>(\n+ExecPlan*, std::vector<ExecNode*>, const ExecNodeOptions&)>``.\n+\n+To build an :class:`ExecPlan` representing a simple pipeline which\n+reads from a :class:`RecordBatchReader` then filters, projects, and\n+writes to disk::\n+\n+    std::shared_ptr<RecordBatchReader> reader = GetStreamOfBatches();\n+    ExecNode* source_node = *MakeExecNode(\"source\", plan.get(), {},\n+                                          SourceNodeOptions::FromReader(\n+                                              reader,\n+                                              GetCpuThreadPool()));\n+\n+    ExecNode* filter_node = *MakeExecNode(\"filter\", plan.get(), {source_node},\n+                                          FilterNodeOptions{\n+                                            greater(field_ref(\"score\"), literal(3))\n+                                          });\n+\n+    ExecNode* project_node = *MakeExecNode(\"project\", plan.get(), {filter_node},\n+                                           ProjectNodeOptions{\n+                                             {add(field_ref(\"score\"), literal(1))},\n+                                             {\"score + 1\"}\n+                                           });\n+\n+    MakeExecNode(\"write\", plan.get(), {project_node},\n+                 WriteNodeOptions{/*base_dir=*/\"/dat\", /*...*/});\n+\n+:struct:`Declaration` is a dplyr-inspired helper which further decreases the\n+boilerplate associated with populating an :class:`ExecPlan` from C++::\n+\n+    std::shared_ptr<RecordBatchReader> reader = GetStreamOfBatches();\n+    ASSERT_OK(Declaration::Sequence(\n+                  {\n+                      {\"source\", SourceNodeOptions::FromReader(\n+                           reader,\n+                           GetCpuThreadPool())},\n+                      {\"filter\", FilterNodeOptions{\n+                           greater(field_ref(\"score\"), literal(3))}},\n+                      {\"project\", ProjectNodeOptions{\n+                           {add(field_ref(\"score\"), literal(1))},\n+                           {\"score + 1\"}}},\n+                      {\"write\", WriteNodeOptions{/*base_dir=*/\"/dat\", /*...*/}},\n+                  })\n+                  .AddToPlan(plan.get()));\n+\n+Note that a source node can wrap anything which resembles a stream of batches.\n+For example, https://github.com/apache/arrow/pull/11032 adds support for use\n+of a DuckDB query as a source node. Similarly, a sink node can wrap anything\n\nReview comment:\n       will do\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-12T19:45:57.503+0000",
                    "updated": "2021-10-12T19:45:57.503+0000",
                    "started": "2021-10-12T19:45:57.503+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "664287",
                    "issueId": "13386923"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13386923/worklog/664544",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #11309:\nURL: https://github.com/apache/arrow/pull/11309#discussion_r727894094\n\n\n\n##########\nFile path: docs/source/cpp/streaming_execution.rst\n##########\n@@ -0,0 +1,291 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+.. cpp:namespace:: arrow::compute\n+\n+==========================\n+Streaming execution engine\n+==========================\n+\n+.. warning::\n+\n+    The streaming execution engine is experimental, and a stable API\n+    is not yet guaranteed.\n+\n+Motivation\n+----------\n+\n+For many complex computations, successive direct `invocation of\n+compute functions <invoking compute functions>` is not feasible\n+in either memory or computation time. Doing so causes all intermediate\n+data to be fully materialized. To facilitate arbitrarily large inputs\n+and more efficient resource usage, arrow also provides a streaming query\n+engine with which computations can be formulated and executed.\n+\n+.. image:: simple_graph.svg\n+\n+:class:`ExecNode` is provided to reify the graph of operations in a query.\n+Batches of data (struct:`ExecBatch`) flow along edges of the graph from\n+node to node. Structuring the API around a stream of batches allows the\n+working set for each node to be tuned for optimal performance independent\n+of any other nodes in the graph. Each :class:`ExecNode` processes batches\n+as they are pushed to it along an edge of the graph by upstream nodes\n+(its inputs), and pushes batches along an edge of the graph to downstream\n+nodes (its outputs) as they are finalized.\n+\n+.. [shaikhha et al] SHAIKHHA, A., DASHTI, M., & KOCH, C. (2018). Push versus pull-based loop fusion in query engines. Journal of Functional Programming, 28. https://doi.org/10.1017/s0956796818000102\n\nReview comment:\n       The current text seems ok to me. The reference can be useful for the curious (you can also make it a [`seealso`](https://www.sphinx-doc.org/en/master/usage/restructuredtext/directives.html#directive-seealso) if you want).\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-13T09:52:56.441+0000",
                    "updated": "2021-10-13T09:52:56.441+0000",
                    "started": "2021-10-13T09:52:56.440+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "664544",
                    "issueId": "13386923"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13386923/worklog/664900",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #11309:\nURL: https://github.com/apache/arrow/pull/11309#discussion_r727436820\n\n\n\n##########\nFile path: docs/source/cpp/streaming_execution.rst\n##########\n@@ -0,0 +1,291 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+.. cpp:namespace:: arrow::compute\n+\n+==========================\n+Streaming execution engine\n+==========================\n+\n+.. warning::\n+\n+    The streaming execution engine is experimental, and a stable API\n+    is not yet guaranteed.\n+\n+Motivation\n+----------\n+\n+For many complex computations, successive direct `invocation of\n+compute functions <invoking compute functions>` is not feasible\n+in either memory or computation time. Doing so causes all intermediate\n+data to be fully materialized. To facilitate arbitrarily large inputs\n+and more efficient resource usage, arrow also provides a streaming query\n\nReview comment:\n       If you prefer, but I think that's implicit in the declared namespace of this doc\n\n##########\nFile path: docs/source/cpp/compute.rst\n##########\n@@ -50,6 +50,8 @@ both array (chunked or not) and scalar inputs, however some will mandate\n either.  For example, while ``sort_indices`` requires its first and only\n input to be an array.\n \n+.. _invoking compute functions:\n\nReview comment:\n       I'll replace with underscores\r\n   \n\n##########\nFile path: docs/source/cpp/simple_graph.svg\n##########\n@@ -0,0 +1,139 @@\n+<!---\n\nReview comment:\n       Typo in the SVG, fixed\n\n##########\nFile path: docs/source/cpp/streaming_execution.rst\n##########\n@@ -0,0 +1,291 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+.. cpp:namespace:: arrow::compute\n+\n+==========================\n+Streaming execution engine\n+==========================\n+\n+.. warning::\n+\n+    The streaming execution engine is experimental, and a stable API\n+    is not yet guaranteed.\n+\n+Motivation\n+----------\n+\n+For many complex computations, successive direct `invocation of\n+compute functions <invoking compute functions>` is not feasible\n+in either memory or computation time. Doing so causes all intermediate\n+data to be fully materialized. To facilitate arbitrarily large inputs\n+and more efficient resource usage, arrow also provides a streaming query\n+engine with which computations can be formulated and executed.\n+\n+.. image:: simple_graph.svg\n+\n+:class:`ExecNode` is provided to reify the graph of operations in a query.\n+Batches of data (struct:`ExecBatch`) flow along edges of the graph from\n\nReview comment:\n       ah, thanks\n\n##########\nFile path: docs/source/cpp/streaming_execution.rst\n##########\n@@ -0,0 +1,291 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+.. cpp:namespace:: arrow::compute\n+\n+==========================\n+Streaming execution engine\n+==========================\n+\n+.. warning::\n+\n+    The streaming execution engine is experimental, and a stable API\n+    is not yet guaranteed.\n+\n+Motivation\n+----------\n+\n+For many complex computations, successive direct `invocation of\n+compute functions <invoking compute functions>` is not feasible\n+in either memory or computation time. Doing so causes all intermediate\n+data to be fully materialized. To facilitate arbitrarily large inputs\n+and more efficient resource usage, arrow also provides a streaming query\n+engine with which computations can be formulated and executed.\n+\n+.. image:: simple_graph.svg\n+\n+:class:`ExecNode` is provided to reify the graph of operations in a query.\n+Batches of data (struct:`ExecBatch`) flow along edges of the graph from\n+node to node. Structuring the API around a stream of batches allows the\n+working set for each node to be tuned for optimal performance independent\n+of any other nodes in the graph. Each :class:`ExecNode` processes batches\n+as they are pushed to it along an edge of the graph by upstream nodes\n+(its inputs), and pushes batches along an edge of the graph to downstream\n+nodes (its outputs) as they are finalized.\n+\n+.. [shaikhha et al] SHAIKHHA, A., DASHTI, M., & KOCH, C. (2018). Push versus pull-based loop fusion in query engines. Journal of Functional Programming, 28. https://doi.org/10.1017/s0956796818000102\n+\n+Overview\n+--------\n+\n+:class:`ExecNode`\n+  Each node in the graph is an implementation of the :class:`ExecNode` interface.\n+\n+:class:`ExecPlan`\n+  A set of :class:`ExecNode` is contained and (to an extent) coordinated by an\n+  :class:`ExecPlan`.\n+\n+:class:`ExecFactoryRegistry`\n+  Instances of :class:`ExecNode` are constructed by factory functions held\n+  in a :class:`ExecFactoryRegistry`.\n+\n+:class:`ExecNodeOptions`\n+  Heterogenous parameters for factories of :class:`ExecNode` are bundled in an\n+  :class:`ExecNodeOptions`.\n+\n+:struct:`Declaration`\n+  ``dplyr``-inspired helper for efficient construction of an :class:`ExecPlan`.\n+\n+:struct:`ExecBatch`\n+  A lightweight container for a single chunk of arrow-formatted data. In contrast\n+  to :class:`RecordBatch`, :struct:`ExecBatch` is intended for use exclusively\n+  in a streaming execution context (for example, it will never have a corresponding\n\nReview comment:\n       very well\n\n##########\nFile path: docs/source/cpp/streaming_execution.rst\n##########\n@@ -0,0 +1,291 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+.. cpp:namespace:: arrow::compute\n+\n+==========================\n+Streaming execution engine\n+==========================\n+\n+.. warning::\n+\n+    The streaming execution engine is experimental, and a stable API\n+    is not yet guaranteed.\n+\n+Motivation\n+----------\n+\n+For many complex computations, successive direct `invocation of\n+compute functions <invoking compute functions>` is not feasible\n+in either memory or computation time. Doing so causes all intermediate\n+data to be fully materialized. To facilitate arbitrarily large inputs\n+and more efficient resource usage, arrow also provides a streaming query\n+engine with which computations can be formulated and executed.\n+\n+.. image:: simple_graph.svg\n+\n+:class:`ExecNode` is provided to reify the graph of operations in a query.\n+Batches of data (struct:`ExecBatch`) flow along edges of the graph from\n+node to node. Structuring the API around a stream of batches allows the\n+working set for each node to be tuned for optimal performance independent\n+of any other nodes in the graph. Each :class:`ExecNode` processes batches\n+as they are pushed to it along an edge of the graph by upstream nodes\n+(its inputs), and pushes batches along an edge of the graph to downstream\n+nodes (its outputs) as they are finalized.\n+\n+.. [shaikhha et al] SHAIKHHA, A., DASHTI, M., & KOCH, C. (2018). Push versus pull-based loop fusion in query engines. Journal of Functional Programming, 28. https://doi.org/10.1017/s0956796818000102\n\nReview comment:\n       I wasn't sure whether to reference that citation; how much space should I use justifying a streaming execution model?\n\n##########\nFile path: docs/source/cpp/streaming_execution.rst\n##########\n@@ -0,0 +1,291 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+.. cpp:namespace:: arrow::compute\n+\n+==========================\n+Streaming execution engine\n+==========================\n+\n+.. warning::\n+\n+    The streaming execution engine is experimental, and a stable API\n+    is not yet guaranteed.\n+\n+Motivation\n+----------\n+\n+For many complex computations, successive direct `invocation of\n+compute functions <invoking compute functions>` is not feasible\n+in either memory or computation time. Doing so causes all intermediate\n+data to be fully materialized. To facilitate arbitrarily large inputs\n+and more efficient resource usage, arrow also provides a streaming query\n+engine with which computations can be formulated and executed.\n+\n+.. image:: simple_graph.svg\n+\n+:class:`ExecNode` is provided to reify the graph of operations in a query.\n+Batches of data (struct:`ExecBatch`) flow along edges of the graph from\n+node to node. Structuring the API around a stream of batches allows the\n+working set for each node to be tuned for optimal performance independent\n+of any other nodes in the graph. Each :class:`ExecNode` processes batches\n+as they are pushed to it along an edge of the graph by upstream nodes\n+(its inputs), and pushes batches along an edge of the graph to downstream\n+nodes (its outputs) as they are finalized.\n+\n+.. [shaikhha et al] SHAIKHHA, A., DASHTI, M., & KOCH, C. (2018). Push versus pull-based loop fusion in query engines. Journal of Functional Programming, 28. https://doi.org/10.1017/s0956796818000102\n+\n+Overview\n+--------\n+\n+:class:`ExecNode`\n+  Each node in the graph is an implementation of the :class:`ExecNode` interface.\n+\n+:class:`ExecPlan`\n+  A set of :class:`ExecNode` is contained and (to an extent) coordinated by an\n+  :class:`ExecPlan`.\n+\n+:class:`ExecFactoryRegistry`\n+  Instances of :class:`ExecNode` are constructed by factory functions held\n+  in a :class:`ExecFactoryRegistry`.\n+\n+:class:`ExecNodeOptions`\n+  Heterogenous parameters for factories of :class:`ExecNode` are bundled in an\n+  :class:`ExecNodeOptions`.\n+\n+:struct:`Declaration`\n+  ``dplyr``-inspired helper for efficient construction of an :class:`ExecPlan`.\n+\n+:struct:`ExecBatch`\n+  A lightweight container for a single chunk of arrow-formatted data. In contrast\n+  to :class:`RecordBatch`, :struct:`ExecBatch` is intended for use exclusively\n+  in a streaming execution context (for example, it will never have a corresponding\n+  Python binding). Furthermore columns which happen to have a constant value may\n+  be represented by a :class:`Scalar` instead of an :class:`Array`. In addition,\n+  :struct:`ExecBatch` may carry execution-relevant properties including a\n+  guaranteed-true-filter for :class:`Expression` simplification.\n+\n+\n+An example :class:`ExecNode` implementation which simlpy passes all input batches\n\nReview comment:\n       thanks\n\n##########\nFile path: docs/source/cpp/streaming_execution.rst\n##########\n@@ -0,0 +1,291 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+.. cpp:namespace:: arrow::compute\n+\n+==========================\n+Streaming execution engine\n+==========================\n+\n+.. warning::\n+\n+    The streaming execution engine is experimental, and a stable API\n+    is not yet guaranteed.\n+\n+Motivation\n+----------\n+\n+For many complex computations, successive direct `invocation of\n+compute functions <invoking compute functions>` is not feasible\n+in either memory or computation time. Doing so causes all intermediate\n+data to be fully materialized. To facilitate arbitrarily large inputs\n+and more efficient resource usage, arrow also provides a streaming query\n+engine with which computations can be formulated and executed.\n+\n+.. image:: simple_graph.svg\n+\n+:class:`ExecNode` is provided to reify the graph of operations in a query.\n+Batches of data (struct:`ExecBatch`) flow along edges of the graph from\n+node to node. Structuring the API around a stream of batches allows the\n+working set for each node to be tuned for optimal performance independent\n+of any other nodes in the graph. Each :class:`ExecNode` processes batches\n+as they are pushed to it along an edge of the graph by upstream nodes\n+(its inputs), and pushes batches along an edge of the graph to downstream\n+nodes (its outputs) as they are finalized.\n+\n+.. [shaikhha et al] SHAIKHHA, A., DASHTI, M., & KOCH, C. (2018). Push versus pull-based loop fusion in query engines. Journal of Functional Programming, 28. https://doi.org/10.1017/s0956796818000102\n+\n+Overview\n+--------\n+\n+:class:`ExecNode`\n+  Each node in the graph is an implementation of the :class:`ExecNode` interface.\n+\n+:class:`ExecPlan`\n+  A set of :class:`ExecNode` is contained and (to an extent) coordinated by an\n+  :class:`ExecPlan`.\n+\n+:class:`ExecFactoryRegistry`\n+  Instances of :class:`ExecNode` are constructed by factory functions held\n+  in a :class:`ExecFactoryRegistry`.\n+\n+:class:`ExecNodeOptions`\n+  Heterogenous parameters for factories of :class:`ExecNode` are bundled in an\n+  :class:`ExecNodeOptions`.\n+\n+:struct:`Declaration`\n+  ``dplyr``-inspired helper for efficient construction of an :class:`ExecPlan`.\n+\n+:struct:`ExecBatch`\n+  A lightweight container for a single chunk of arrow-formatted data. In contrast\n+  to :class:`RecordBatch`, :struct:`ExecBatch` is intended for use exclusively\n+  in a streaming execution context (for example, it will never have a corresponding\n+  Python binding). Furthermore columns which happen to have a constant value may\n+  be represented by a :class:`Scalar` instead of an :class:`Array`. In addition,\n+  :struct:`ExecBatch` may carry execution-relevant properties including a\n+  guaranteed-true-filter for :class:`Expression` simplification.\n+\n+\n+An example :class:`ExecNode` implementation which simlpy passes all input batches\n+through unchanged::\n+\n+    class PassthruNode : public ExecNode {\n+     public:\n+      // InputReceived is the main entry point for ExecNodes. It is invoked\n+      // by an input of this node to push a batch here for processing.\n+      void InputReceived(ExecNode* input, ExecBatch batch) override {\n+        // Since this is a passthru node we simply push the batch to our\n+        // only output here.\n+        outputs_[0]->InputReceived(this, batch);\n+      }\n+\n+      // ErrorRecieved is called by an input of this node to report an error.\n\nReview comment:\n       thanks\n\n##########\nFile path: docs/source/cpp/streaming_execution.rst\n##########\n@@ -0,0 +1,291 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+.. cpp:namespace:: arrow::compute\n+\n+==========================\n+Streaming execution engine\n+==========================\n+\n+.. warning::\n+\n+    The streaming execution engine is experimental, and a stable API\n+    is not yet guaranteed.\n+\n+Motivation\n+----------\n+\n+For many complex computations, successive direct `invocation of\n+compute functions <invoking compute functions>` is not feasible\n+in either memory or computation time. Doing so causes all intermediate\n+data to be fully materialized. To facilitate arbitrarily large inputs\n+and more efficient resource usage, arrow also provides a streaming query\n+engine with which computations can be formulated and executed.\n+\n+.. image:: simple_graph.svg\n+\n+:class:`ExecNode` is provided to reify the graph of operations in a query.\n+Batches of data (struct:`ExecBatch`) flow along edges of the graph from\n+node to node. Structuring the API around a stream of batches allows the\n+working set for each node to be tuned for optimal performance independent\n+of any other nodes in the graph. Each :class:`ExecNode` processes batches\n+as they are pushed to it along an edge of the graph by upstream nodes\n+(its inputs), and pushes batches along an edge of the graph to downstream\n+nodes (its outputs) as they are finalized.\n+\n+.. [shaikhha et al] SHAIKHHA, A., DASHTI, M., & KOCH, C. (2018). Push versus pull-based loop fusion in query engines. Journal of Functional Programming, 28. https://doi.org/10.1017/s0956796818000102\n+\n+Overview\n+--------\n+\n+:class:`ExecNode`\n+  Each node in the graph is an implementation of the :class:`ExecNode` interface.\n+\n+:class:`ExecPlan`\n+  A set of :class:`ExecNode` is contained and (to an extent) coordinated by an\n+  :class:`ExecPlan`.\n+\n+:class:`ExecFactoryRegistry`\n+  Instances of :class:`ExecNode` are constructed by factory functions held\n+  in a :class:`ExecFactoryRegistry`.\n+\n+:class:`ExecNodeOptions`\n+  Heterogenous parameters for factories of :class:`ExecNode` are bundled in an\n+  :class:`ExecNodeOptions`.\n+\n+:struct:`Declaration`\n+  ``dplyr``-inspired helper for efficient construction of an :class:`ExecPlan`.\n+\n+:struct:`ExecBatch`\n+  A lightweight container for a single chunk of arrow-formatted data. In contrast\n+  to :class:`RecordBatch`, :struct:`ExecBatch` is intended for use exclusively\n+  in a streaming execution context (for example, it will never have a corresponding\n+  Python binding). Furthermore columns which happen to have a constant value may\n+  be represented by a :class:`Scalar` instead of an :class:`Array`. In addition,\n+  :struct:`ExecBatch` may carry execution-relevant properties including a\n+  guaranteed-true-filter for :class:`Expression` simplification.\n+\n+\n+An example :class:`ExecNode` implementation which simlpy passes all input batches\n+through unchanged::\n+\n+    class PassthruNode : public ExecNode {\n+     public:\n+      // InputReceived is the main entry point for ExecNodes. It is invoked\n+      // by an input of this node to push a batch here for processing.\n+      void InputReceived(ExecNode* input, ExecBatch batch) override {\n+        // Since this is a passthru node we simply push the batch to our\n+        // only output here.\n+        outputs_[0]->InputReceived(this, batch);\n+      }\n+\n+      // ErrorRecieved is called by an input of this node to report an error.\n+      void ErrorReceived(ExecNode* input, Status error) override {\n+        outputs_[0]->ErrorReceived(this, error);\n+      }\n+\n+      // InputFinished is used to signal how many batches will ultimately arrive.\n+      // It may be called with any ordering relative to InputReceived/ErrorReceived.\n+      void InputFinished(ExecNode* input, int total_batches) override {\n+        outputs_[0]->InputFinished(this, total_batches);\n+      }\n+\n+      // ExecNodes may request that their inputs throttle production of batches\n+      // until they are ready for more, or stop production if no further batches\n+      // are required.\n+      void ResumeProducing(ExecNode* output) override { inputs_[0]->ResumeProducing(this); }\n+      void PauseProducing(ExecNode* output) override { inputs_[0]->PauseProducing(this); }\n+      void StopProducing(ExecNode* output) override { inputs_[0]->StopProducing(this); }\n+\n+      // An ExecNode has a single output schema to which all its batches conform.\n+      using ExecNode::output_schema;\n+\n+      // ExecNodes carry basic introspection for debugging purposes\n+      const char* kind_name() const override { return \"PassthruNode\"; }\n+      using ExecNode::label;\n\nReview comment:\n       It's just for documenting purposes, it happens to be valid C++\n\n##########\nFile path: docs/source/cpp/streaming_execution.rst\n##########\n@@ -0,0 +1,291 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+.. cpp:namespace:: arrow::compute\n+\n+==========================\n+Streaming execution engine\n+==========================\n+\n+.. warning::\n+\n+    The streaming execution engine is experimental, and a stable API\n+    is not yet guaranteed.\n+\n+Motivation\n+----------\n+\n+For many complex computations, successive direct `invocation of\n+compute functions <invoking compute functions>` is not feasible\n+in either memory or computation time. Doing so causes all intermediate\n+data to be fully materialized. To facilitate arbitrarily large inputs\n+and more efficient resource usage, arrow also provides a streaming query\n+engine with which computations can be formulated and executed.\n+\n+.. image:: simple_graph.svg\n+\n+:class:`ExecNode` is provided to reify the graph of operations in a query.\n+Batches of data (struct:`ExecBatch`) flow along edges of the graph from\n+node to node. Structuring the API around a stream of batches allows the\n+working set for each node to be tuned for optimal performance independent\n+of any other nodes in the graph. Each :class:`ExecNode` processes batches\n+as they are pushed to it along an edge of the graph by upstream nodes\n+(its inputs), and pushes batches along an edge of the graph to downstream\n+nodes (its outputs) as they are finalized.\n+\n+.. [shaikhha et al] SHAIKHHA, A., DASHTI, M., & KOCH, C. (2018). Push versus pull-based loop fusion in query engines. Journal of Functional Programming, 28. https://doi.org/10.1017/s0956796818000102\n+\n+Overview\n+--------\n+\n+:class:`ExecNode`\n+  Each node in the graph is an implementation of the :class:`ExecNode` interface.\n+\n+:class:`ExecPlan`\n+  A set of :class:`ExecNode` is contained and (to an extent) coordinated by an\n+  :class:`ExecPlan`.\n+\n+:class:`ExecFactoryRegistry`\n+  Instances of :class:`ExecNode` are constructed by factory functions held\n+  in a :class:`ExecFactoryRegistry`.\n+\n+:class:`ExecNodeOptions`\n+  Heterogenous parameters for factories of :class:`ExecNode` are bundled in an\n+  :class:`ExecNodeOptions`.\n+\n+:struct:`Declaration`\n+  ``dplyr``-inspired helper for efficient construction of an :class:`ExecPlan`.\n+\n+:struct:`ExecBatch`\n+  A lightweight container for a single chunk of arrow-formatted data. In contrast\n+  to :class:`RecordBatch`, :struct:`ExecBatch` is intended for use exclusively\n+  in a streaming execution context (for example, it will never have a corresponding\n+  Python binding). Furthermore columns which happen to have a constant value may\n+  be represented by a :class:`Scalar` instead of an :class:`Array`. In addition,\n+  :struct:`ExecBatch` may carry execution-relevant properties including a\n+  guaranteed-true-filter for :class:`Expression` simplification.\n+\n+\n+An example :class:`ExecNode` implementation which simlpy passes all input batches\n+through unchanged::\n+\n+    class PassthruNode : public ExecNode {\n+     public:\n+      // InputReceived is the main entry point for ExecNodes. It is invoked\n+      // by an input of this node to push a batch here for processing.\n+      void InputReceived(ExecNode* input, ExecBatch batch) override {\n+        // Since this is a passthru node we simply push the batch to our\n+        // only output here.\n+        outputs_[0]->InputReceived(this, batch);\n+      }\n+\n+      // ErrorRecieved is called by an input of this node to report an error.\n+      void ErrorReceived(ExecNode* input, Status error) override {\n+        outputs_[0]->ErrorReceived(this, error);\n+      }\n+\n+      // InputFinished is used to signal how many batches will ultimately arrive.\n+      // It may be called with any ordering relative to InputReceived/ErrorReceived.\n+      void InputFinished(ExecNode* input, int total_batches) override {\n+        outputs_[0]->InputFinished(this, total_batches);\n+      }\n+\n+      // ExecNodes may request that their inputs throttle production of batches\n+      // until they are ready for more, or stop production if no further batches\n+      // are required.\n+      void ResumeProducing(ExecNode* output) override { inputs_[0]->ResumeProducing(this); }\n+      void PauseProducing(ExecNode* output) override { inputs_[0]->PauseProducing(this); }\n+      void StopProducing(ExecNode* output) override { inputs_[0]->StopProducing(this); }\n+\n+      // An ExecNode has a single output schema to which all its batches conform.\n+      using ExecNode::output_schema;\n+\n+      // ExecNodes carry basic introspection for debugging purposes\n+      const char* kind_name() const override { return \"PassthruNode\"; }\n+      using ExecNode::label;\n+      using ExecNode::SetLabel;\n+      using ExecNode::ToString;\n+\n+      // An ExecNode holds references to its inputs and outputs, so it is possible\n+      // to walk the graph of execution if necessary.\n+      using ExecNode::inputs;\n+      using ExecNode::outputs;\n+\n+      // StartProducing() and StopProducing() are invoked by an ExecPlan to\n+      // coordinate the graph-wide execution state.\n+      Status StartProducing() override { return Status::OK(); }\n+      void StopProducing() override {}\n+      Future<> finished() override { return inputs_[0]->finished(); }\n+    };\n+\n+Note that each method which is associated with an edge of the graph must be invoked\n+with an ``ExecNode*`` to identify the node which invoked it. For example, in an\n+:class:`ExecNode` which implements ``JOIN`` this tagging might be used to differentiate\n+between batches from the left or right inputs.\n+``InputReceived, ErrorReceived, InputFinished`` may only be invoked by the inputs of a\n\nReview comment:\n       will do\n\n##########\nFile path: docs/source/cpp/streaming_execution.rst\n##########\n@@ -0,0 +1,291 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+.. cpp:namespace:: arrow::compute\n+\n+==========================\n+Streaming execution engine\n+==========================\n+\n+.. warning::\n+\n+    The streaming execution engine is experimental, and a stable API\n+    is not yet guaranteed.\n+\n+Motivation\n+----------\n+\n+For many complex computations, successive direct `invocation of\n+compute functions <invoking compute functions>` is not feasible\n+in either memory or computation time. Doing so causes all intermediate\n+data to be fully materialized. To facilitate arbitrarily large inputs\n+and more efficient resource usage, arrow also provides a streaming query\n+engine with which computations can be formulated and executed.\n+\n+.. image:: simple_graph.svg\n+\n+:class:`ExecNode` is provided to reify the graph of operations in a query.\n+Batches of data (struct:`ExecBatch`) flow along edges of the graph from\n+node to node. Structuring the API around a stream of batches allows the\n+working set for each node to be tuned for optimal performance independent\n+of any other nodes in the graph. Each :class:`ExecNode` processes batches\n+as they are pushed to it along an edge of the graph by upstream nodes\n+(its inputs), and pushes batches along an edge of the graph to downstream\n+nodes (its outputs) as they are finalized.\n+\n+.. [shaikhha et al] SHAIKHHA, A., DASHTI, M., & KOCH, C. (2018). Push versus pull-based loop fusion in query engines. Journal of Functional Programming, 28. https://doi.org/10.1017/s0956796818000102\n+\n+Overview\n+--------\n+\n+:class:`ExecNode`\n+  Each node in the graph is an implementation of the :class:`ExecNode` interface.\n+\n+:class:`ExecPlan`\n+  A set of :class:`ExecNode` is contained and (to an extent) coordinated by an\n+  :class:`ExecPlan`.\n+\n+:class:`ExecFactoryRegistry`\n+  Instances of :class:`ExecNode` are constructed by factory functions held\n+  in a :class:`ExecFactoryRegistry`.\n+\n+:class:`ExecNodeOptions`\n+  Heterogenous parameters for factories of :class:`ExecNode` are bundled in an\n+  :class:`ExecNodeOptions`.\n+\n+:struct:`Declaration`\n+  ``dplyr``-inspired helper for efficient construction of an :class:`ExecPlan`.\n+\n+:struct:`ExecBatch`\n+  A lightweight container for a single chunk of arrow-formatted data. In contrast\n+  to :class:`RecordBatch`, :struct:`ExecBatch` is intended for use exclusively\n+  in a streaming execution context (for example, it will never have a corresponding\n+  Python binding). Furthermore columns which happen to have a constant value may\n+  be represented by a :class:`Scalar` instead of an :class:`Array`. In addition,\n+  :struct:`ExecBatch` may carry execution-relevant properties including a\n+  guaranteed-true-filter for :class:`Expression` simplification.\n+\n+\n+An example :class:`ExecNode` implementation which simlpy passes all input batches\n+through unchanged::\n+\n+    class PassthruNode : public ExecNode {\n+     public:\n+      // InputReceived is the main entry point for ExecNodes. It is invoked\n+      // by an input of this node to push a batch here for processing.\n+      void InputReceived(ExecNode* input, ExecBatch batch) override {\n+        // Since this is a passthru node we simply push the batch to our\n+        // only output here.\n+        outputs_[0]->InputReceived(this, batch);\n+      }\n+\n+      // ErrorRecieved is called by an input of this node to report an error.\n+      void ErrorReceived(ExecNode* input, Status error) override {\n+        outputs_[0]->ErrorReceived(this, error);\n+      }\n+\n+      // InputFinished is used to signal how many batches will ultimately arrive.\n+      // It may be called with any ordering relative to InputReceived/ErrorReceived.\n+      void InputFinished(ExecNode* input, int total_batches) override {\n+        outputs_[0]->InputFinished(this, total_batches);\n+      }\n+\n+      // ExecNodes may request that their inputs throttle production of batches\n+      // until they are ready for more, or stop production if no further batches\n+      // are required.\n+      void ResumeProducing(ExecNode* output) override { inputs_[0]->ResumeProducing(this); }\n+      void PauseProducing(ExecNode* output) override { inputs_[0]->PauseProducing(this); }\n+      void StopProducing(ExecNode* output) override { inputs_[0]->StopProducing(this); }\n+\n+      // An ExecNode has a single output schema to which all its batches conform.\n+      using ExecNode::output_schema;\n+\n+      // ExecNodes carry basic introspection for debugging purposes\n+      const char* kind_name() const override { return \"PassthruNode\"; }\n+      using ExecNode::label;\n+      using ExecNode::SetLabel;\n+      using ExecNode::ToString;\n+\n+      // An ExecNode holds references to its inputs and outputs, so it is possible\n+      // to walk the graph of execution if necessary.\n+      using ExecNode::inputs;\n+      using ExecNode::outputs;\n+\n+      // StartProducing() and StopProducing() are invoked by an ExecPlan to\n+      // coordinate the graph-wide execution state.\n+      Status StartProducing() override { return Status::OK(); }\n+      void StopProducing() override {}\n+      Future<> finished() override { return inputs_[0]->finished(); }\n+    };\n+\n+Note that each method which is associated with an edge of the graph must be invoked\n+with an ``ExecNode*`` to identify the node which invoked it. For example, in an\n+:class:`ExecNode` which implements ``JOIN`` this tagging might be used to differentiate\n+between batches from the left or right inputs.\n+``InputReceived, ErrorReceived, InputFinished`` may only be invoked by the inputs of a\n+node, while ``ResumeProducing, PauseProducing, StopProducing`` may only be invoked by\n+outputs of a node.\n+\n+:class:`ExecPlan` contains the associated instances of :class:`ExecNode` alive\n\nReview comment:\n       it is incorrect, I started the sentence thinking something different from the end :D\n\n##########\nFile path: docs/source/cpp/streaming_execution.rst\n##########\n@@ -0,0 +1,291 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+.. cpp:namespace:: arrow::compute\n+\n+==========================\n+Streaming execution engine\n+==========================\n+\n+.. warning::\n+\n+    The streaming execution engine is experimental, and a stable API\n+    is not yet guaranteed.\n+\n+Motivation\n+----------\n+\n+For many complex computations, successive direct `invocation of\n+compute functions <invoking compute functions>` is not feasible\n+in either memory or computation time. Doing so causes all intermediate\n+data to be fully materialized. To facilitate arbitrarily large inputs\n+and more efficient resource usage, arrow also provides a streaming query\n+engine with which computations can be formulated and executed.\n+\n+.. image:: simple_graph.svg\n+\n+:class:`ExecNode` is provided to reify the graph of operations in a query.\n+Batches of data (struct:`ExecBatch`) flow along edges of the graph from\n+node to node. Structuring the API around a stream of batches allows the\n+working set for each node to be tuned for optimal performance independent\n+of any other nodes in the graph. Each :class:`ExecNode` processes batches\n+as they are pushed to it along an edge of the graph by upstream nodes\n+(its inputs), and pushes batches along an edge of the graph to downstream\n+nodes (its outputs) as they are finalized.\n+\n+.. [shaikhha et al] SHAIKHHA, A., DASHTI, M., & KOCH, C. (2018). Push versus pull-based loop fusion in query engines. Journal of Functional Programming, 28. https://doi.org/10.1017/s0956796818000102\n+\n+Overview\n+--------\n+\n+:class:`ExecNode`\n+  Each node in the graph is an implementation of the :class:`ExecNode` interface.\n+\n+:class:`ExecPlan`\n+  A set of :class:`ExecNode` is contained and (to an extent) coordinated by an\n+  :class:`ExecPlan`.\n+\n+:class:`ExecFactoryRegistry`\n+  Instances of :class:`ExecNode` are constructed by factory functions held\n+  in a :class:`ExecFactoryRegistry`.\n+\n+:class:`ExecNodeOptions`\n+  Heterogenous parameters for factories of :class:`ExecNode` are bundled in an\n+  :class:`ExecNodeOptions`.\n+\n+:struct:`Declaration`\n+  ``dplyr``-inspired helper for efficient construction of an :class:`ExecPlan`.\n+\n+:struct:`ExecBatch`\n+  A lightweight container for a single chunk of arrow-formatted data. In contrast\n+  to :class:`RecordBatch`, :struct:`ExecBatch` is intended for use exclusively\n+  in a streaming execution context (for example, it will never have a corresponding\n+  Python binding). Furthermore columns which happen to have a constant value may\n+  be represented by a :class:`Scalar` instead of an :class:`Array`. In addition,\n+  :struct:`ExecBatch` may carry execution-relevant properties including a\n+  guaranteed-true-filter for :class:`Expression` simplification.\n+\n+\n+An example :class:`ExecNode` implementation which simlpy passes all input batches\n+through unchanged::\n+\n+    class PassthruNode : public ExecNode {\n+     public:\n+      // InputReceived is the main entry point for ExecNodes. It is invoked\n+      // by an input of this node to push a batch here for processing.\n+      void InputReceived(ExecNode* input, ExecBatch batch) override {\n+        // Since this is a passthru node we simply push the batch to our\n+        // only output here.\n+        outputs_[0]->InputReceived(this, batch);\n+      }\n+\n+      // ErrorRecieved is called by an input of this node to report an error.\n+      void ErrorReceived(ExecNode* input, Status error) override {\n+        outputs_[0]->ErrorReceived(this, error);\n+      }\n+\n+      // InputFinished is used to signal how many batches will ultimately arrive.\n+      // It may be called with any ordering relative to InputReceived/ErrorReceived.\n+      void InputFinished(ExecNode* input, int total_batches) override {\n+        outputs_[0]->InputFinished(this, total_batches);\n+      }\n+\n+      // ExecNodes may request that their inputs throttle production of batches\n+      // until they are ready for more, or stop production if no further batches\n+      // are required.\n+      void ResumeProducing(ExecNode* output) override { inputs_[0]->ResumeProducing(this); }\n+      void PauseProducing(ExecNode* output) override { inputs_[0]->PauseProducing(this); }\n+      void StopProducing(ExecNode* output) override { inputs_[0]->StopProducing(this); }\n+\n+      // An ExecNode has a single output schema to which all its batches conform.\n+      using ExecNode::output_schema;\n+\n+      // ExecNodes carry basic introspection for debugging purposes\n+      const char* kind_name() const override { return \"PassthruNode\"; }\n+      using ExecNode::label;\n+      using ExecNode::SetLabel;\n+      using ExecNode::ToString;\n+\n+      // An ExecNode holds references to its inputs and outputs, so it is possible\n+      // to walk the graph of execution if necessary.\n+      using ExecNode::inputs;\n+      using ExecNode::outputs;\n+\n+      // StartProducing() and StopProducing() are invoked by an ExecPlan to\n+      // coordinate the graph-wide execution state.\n+      Status StartProducing() override { return Status::OK(); }\n+      void StopProducing() override {}\n+      Future<> finished() override { return inputs_[0]->finished(); }\n+    };\n+\n+Note that each method which is associated with an edge of the graph must be invoked\n+with an ``ExecNode*`` to identify the node which invoked it. For example, in an\n+:class:`ExecNode` which implements ``JOIN`` this tagging might be used to differentiate\n+between batches from the left or right inputs.\n+``InputReceived, ErrorReceived, InputFinished`` may only be invoked by the inputs of a\n+node, while ``ResumeProducing, PauseProducing, StopProducing`` may only be invoked by\n+outputs of a node.\n+\n+:class:`ExecPlan` contains the associated instances of :class:`ExecNode` alive\n+and provides convenience methods for starting and stopping execution of all nodes\n+and for querying/awaiting their completion::\n+\n+    // construct an ExecPlan first to hold your nodes\n+    ARROW_ASSIGN_OR_RAISE(auto plan, ExecPlan::Make(default_exec_context()));\n+\n+    // ... add nodes to your ExecPlan\n+\n+    // start all nodes in the graph\n+    ARROW_RETURN_NOT_OK(plan->StartProducing());\n+\n+    if (need_stop) {\n+      // stop all nodes in the graph\n+      plan->StopProducing();\n+    }\n+\n+    // Complete will be marked finished when all nodes have run to completion\n+    // or acknowledged a StopProducing() signal. The ExecPlan should be kept\n+    // alive until this future is marked finished.\n+    Future<> complete = plan->finished();\n+\n+\n+Constructing ``ExecPlan``s\n+--------------------------\n+\n+.. warning::\n+\n+    The following will be superceded by construction from Compute IR, see ARROW-14074.\n+\n+None of the concrete implementations of :class:`ExecNode` are exposed\n+in headers, so they can't be constructed directly outside the\n+Translation Unit where they are defined. Instead, factories to\n+create them are provided in an extensible registry. This structure\n+provides a number of benefits:\n+\n+- This enforces consistent construction.\n+- It decouples implementations from consumers of the interface\n+  (for example: we have two classes for scalar and grouped aggregate,\n+   we can choose which to construct within the single factory by\n+   checking whether grouping keys are provided)\n+- This expedites integration with out-of-library extensions. For example\n+  \"scan\" nodes are implemented in the separate ``libarrow_dataset.so`` library.\n+- Since the class is not referencable outside the Translation Unit in which it\n+  is defined, compilers can optimize more aggressively.\n+\n+Factories of :class:`ExecNode` can be retrieved by name from the registry.\n+The default registry is available through\n+:func:`arrow::compute::default_exec_factory_registry()`\n+and can be queried for the built-in factories::\n+\n+    // get the factory for \"filter\" nodes:\n+    ARROW_ASSIGN_OR_RAISE(auto make_filter,\n+                          default_exec_factory_registry()->GetFactory(\"filter\"));\n+\n+    // factories take three arguments:\n+    ARROW_ASSIGN_OR_RAISE(ExecNode* filter_node, *make_filter(\n+        // the ExecPlan which should own this node\n+        plan.get(),\n+\n+        // nodes which will send batches to this node (inputs)\n+        {scan_node},\n+\n+        // parameters unique to \"filter\" nodes\n+        FilterNodeOptions{filter_expression}));\n+\n+    // alternative shorthand:\n+    ARROW_ASSIGN_OR_RAISE(filter_node, MakeExecNode(\"filter\",\n+        plan.get(), {scan_node}, FilterNodeOptions{filter_expression});\n+\n+Factories can also be added to the default registry as long as they are\n+convertible to ``std::function<Result<ExecNode*>(\n+ExecPlan*, std::vector<ExecNode*>, const ExecNodeOptions&)>``.\n+\n+To build an :class:`ExecPlan` representing a simple pipeline which\n+reads from a :class:`RecordBatchReader` then filters, projects, and\n+writes to disk::\n+\n+    std::shared_ptr<RecordBatchReader> reader = GetStreamOfBatches();\n+    ExecNode* source_node = *MakeExecNode(\"source\", plan.get(), {},\n+                                          SourceNodeOptions::FromReader(\n+                                              reader,\n+                                              GetCpuThreadPool()));\n+\n+    ExecNode* filter_node = *MakeExecNode(\"filter\", plan.get(), {source_node},\n+                                          FilterNodeOptions{\n+                                            greater(field_ref(\"score\"), literal(3))\n+                                          });\n+\n+    ExecNode* project_node = *MakeExecNode(\"project\", plan.get(), {filter_node},\n+                                           ProjectNodeOptions{\n+                                             {add(field_ref(\"score\"), literal(1))},\n+                                             {\"score + 1\"}\n+                                           });\n+\n+    MakeExecNode(\"write\", plan.get(), {project_node},\n+                 WriteNodeOptions{/*base_dir=*/\"/dat\", /*...*/});\n+\n+:struct:`Declaration` is a dplyr-inspired helper which further decreases the\n\nReview comment:\n       will do\n\n##########\nFile path: docs/source/cpp/streaming_execution.rst\n##########\n@@ -0,0 +1,291 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+.. cpp:namespace:: arrow::compute\n+\n+==========================\n+Streaming execution engine\n+==========================\n+\n+.. warning::\n+\n+    The streaming execution engine is experimental, and a stable API\n+    is not yet guaranteed.\n+\n+Motivation\n+----------\n+\n+For many complex computations, successive direct `invocation of\n+compute functions <invoking compute functions>` is not feasible\n+in either memory or computation time. Doing so causes all intermediate\n+data to be fully materialized. To facilitate arbitrarily large inputs\n+and more efficient resource usage, arrow also provides a streaming query\n+engine with which computations can be formulated and executed.\n+\n+.. image:: simple_graph.svg\n+\n+:class:`ExecNode` is provided to reify the graph of operations in a query.\n+Batches of data (struct:`ExecBatch`) flow along edges of the graph from\n+node to node. Structuring the API around a stream of batches allows the\n+working set for each node to be tuned for optimal performance independent\n+of any other nodes in the graph. Each :class:`ExecNode` processes batches\n+as they are pushed to it along an edge of the graph by upstream nodes\n+(its inputs), and pushes batches along an edge of the graph to downstream\n+nodes (its outputs) as they are finalized.\n+\n+.. [shaikhha et al] SHAIKHHA, A., DASHTI, M., & KOCH, C. (2018). Push versus pull-based loop fusion in query engines. Journal of Functional Programming, 28. https://doi.org/10.1017/s0956796818000102\n+\n+Overview\n+--------\n+\n+:class:`ExecNode`\n+  Each node in the graph is an implementation of the :class:`ExecNode` interface.\n+\n+:class:`ExecPlan`\n+  A set of :class:`ExecNode` is contained and (to an extent) coordinated by an\n+  :class:`ExecPlan`.\n+\n+:class:`ExecFactoryRegistry`\n+  Instances of :class:`ExecNode` are constructed by factory functions held\n+  in a :class:`ExecFactoryRegistry`.\n+\n+:class:`ExecNodeOptions`\n+  Heterogenous parameters for factories of :class:`ExecNode` are bundled in an\n+  :class:`ExecNodeOptions`.\n+\n+:struct:`Declaration`\n+  ``dplyr``-inspired helper for efficient construction of an :class:`ExecPlan`.\n+\n+:struct:`ExecBatch`\n+  A lightweight container for a single chunk of arrow-formatted data. In contrast\n+  to :class:`RecordBatch`, :struct:`ExecBatch` is intended for use exclusively\n+  in a streaming execution context (for example, it will never have a corresponding\n+  Python binding). Furthermore columns which happen to have a constant value may\n+  be represented by a :class:`Scalar` instead of an :class:`Array`. In addition,\n+  :struct:`ExecBatch` may carry execution-relevant properties including a\n+  guaranteed-true-filter for :class:`Expression` simplification.\n+\n+\n+An example :class:`ExecNode` implementation which simlpy passes all input batches\n+through unchanged::\n+\n+    class PassthruNode : public ExecNode {\n+     public:\n+      // InputReceived is the main entry point for ExecNodes. It is invoked\n+      // by an input of this node to push a batch here for processing.\n+      void InputReceived(ExecNode* input, ExecBatch batch) override {\n+        // Since this is a passthru node we simply push the batch to our\n+        // only output here.\n+        outputs_[0]->InputReceived(this, batch);\n+      }\n+\n+      // ErrorRecieved is called by an input of this node to report an error.\n+      void ErrorReceived(ExecNode* input, Status error) override {\n+        outputs_[0]->ErrorReceived(this, error);\n+      }\n+\n+      // InputFinished is used to signal how many batches will ultimately arrive.\n+      // It may be called with any ordering relative to InputReceived/ErrorReceived.\n+      void InputFinished(ExecNode* input, int total_batches) override {\n+        outputs_[0]->InputFinished(this, total_batches);\n+      }\n+\n+      // ExecNodes may request that their inputs throttle production of batches\n+      // until they are ready for more, or stop production if no further batches\n+      // are required.\n+      void ResumeProducing(ExecNode* output) override { inputs_[0]->ResumeProducing(this); }\n+      void PauseProducing(ExecNode* output) override { inputs_[0]->PauseProducing(this); }\n+      void StopProducing(ExecNode* output) override { inputs_[0]->StopProducing(this); }\n+\n+      // An ExecNode has a single output schema to which all its batches conform.\n+      using ExecNode::output_schema;\n+\n+      // ExecNodes carry basic introspection for debugging purposes\n+      const char* kind_name() const override { return \"PassthruNode\"; }\n+      using ExecNode::label;\n+      using ExecNode::SetLabel;\n+      using ExecNode::ToString;\n+\n+      // An ExecNode holds references to its inputs and outputs, so it is possible\n+      // to walk the graph of execution if necessary.\n+      using ExecNode::inputs;\n+      using ExecNode::outputs;\n+\n+      // StartProducing() and StopProducing() are invoked by an ExecPlan to\n+      // coordinate the graph-wide execution state.\n+      Status StartProducing() override { return Status::OK(); }\n+      void StopProducing() override {}\n+      Future<> finished() override { return inputs_[0]->finished(); }\n+    };\n+\n+Note that each method which is associated with an edge of the graph must be invoked\n+with an ``ExecNode*`` to identify the node which invoked it. For example, in an\n+:class:`ExecNode` which implements ``JOIN`` this tagging might be used to differentiate\n+between batches from the left or right inputs.\n+``InputReceived, ErrorReceived, InputFinished`` may only be invoked by the inputs of a\n+node, while ``ResumeProducing, PauseProducing, StopProducing`` may only be invoked by\n+outputs of a node.\n+\n+:class:`ExecPlan` contains the associated instances of :class:`ExecNode` alive\n+and provides convenience methods for starting and stopping execution of all nodes\n+and for querying/awaiting their completion::\n+\n+    // construct an ExecPlan first to hold your nodes\n+    ARROW_ASSIGN_OR_RAISE(auto plan, ExecPlan::Make(default_exec_context()));\n+\n+    // ... add nodes to your ExecPlan\n+\n+    // start all nodes in the graph\n+    ARROW_RETURN_NOT_OK(plan->StartProducing());\n+\n+    if (need_stop) {\n+      // stop all nodes in the graph\n+      plan->StopProducing();\n+    }\n+\n+    // Complete will be marked finished when all nodes have run to completion\n+    // or acknowledged a StopProducing() signal. The ExecPlan should be kept\n+    // alive until this future is marked finished.\n+    Future<> complete = plan->finished();\n+\n+\n+Constructing ``ExecPlan``s\n+--------------------------\n+\n+.. warning::\n+\n+    The following will be superceded by construction from Compute IR, see ARROW-14074.\n+\n+None of the concrete implementations of :class:`ExecNode` are exposed\n+in headers, so they can't be constructed directly outside the\n+Translation Unit where they are defined. Instead, factories to\n+create them are provided in an extensible registry. This structure\n+provides a number of benefits:\n+\n+- This enforces consistent construction.\n+- It decouples implementations from consumers of the interface\n+  (for example: we have two classes for scalar and grouped aggregate,\n+   we can choose which to construct within the single factory by\n+   checking whether grouping keys are provided)\n+- This expedites integration with out-of-library extensions. For example\n+  \"scan\" nodes are implemented in the separate ``libarrow_dataset.so`` library.\n+- Since the class is not referencable outside the Translation Unit in which it\n+  is defined, compilers can optimize more aggressively.\n+\n+Factories of :class:`ExecNode` can be retrieved by name from the registry.\n+The default registry is available through\n+:func:`arrow::compute::default_exec_factory_registry()`\n+and can be queried for the built-in factories::\n+\n+    // get the factory for \"filter\" nodes:\n+    ARROW_ASSIGN_OR_RAISE(auto make_filter,\n+                          default_exec_factory_registry()->GetFactory(\"filter\"));\n+\n+    // factories take three arguments:\n+    ARROW_ASSIGN_OR_RAISE(ExecNode* filter_node, *make_filter(\n+        // the ExecPlan which should own this node\n+        plan.get(),\n+\n+        // nodes which will send batches to this node (inputs)\n+        {scan_node},\n+\n+        // parameters unique to \"filter\" nodes\n+        FilterNodeOptions{filter_expression}));\n+\n+    // alternative shorthand:\n+    ARROW_ASSIGN_OR_RAISE(filter_node, MakeExecNode(\"filter\",\n+        plan.get(), {scan_node}, FilterNodeOptions{filter_expression});\n+\n+Factories can also be added to the default registry as long as they are\n+convertible to ``std::function<Result<ExecNode*>(\n+ExecPlan*, std::vector<ExecNode*>, const ExecNodeOptions&)>``.\n+\n+To build an :class:`ExecPlan` representing a simple pipeline which\n+reads from a :class:`RecordBatchReader` then filters, projects, and\n+writes to disk::\n+\n+    std::shared_ptr<RecordBatchReader> reader = GetStreamOfBatches();\n+    ExecNode* source_node = *MakeExecNode(\"source\", plan.get(), {},\n+                                          SourceNodeOptions::FromReader(\n+                                              reader,\n+                                              GetCpuThreadPool()));\n+\n+    ExecNode* filter_node = *MakeExecNode(\"filter\", plan.get(), {source_node},\n+                                          FilterNodeOptions{\n+                                            greater(field_ref(\"score\"), literal(3))\n+                                          });\n+\n+    ExecNode* project_node = *MakeExecNode(\"project\", plan.get(), {filter_node},\n+                                           ProjectNodeOptions{\n+                                             {add(field_ref(\"score\"), literal(1))},\n+                                             {\"score + 1\"}\n+                                           });\n+\n+    MakeExecNode(\"write\", plan.get(), {project_node},\n+                 WriteNodeOptions{/*base_dir=*/\"/dat\", /*...*/});\n+\n+:struct:`Declaration` is a dplyr-inspired helper which further decreases the\n+boilerplate associated with populating an :class:`ExecPlan` from C++::\n+\n+    std::shared_ptr<RecordBatchReader> reader = GetStreamOfBatches();\n+    ASSERT_OK(Declaration::Sequence(\n+                  {\n+                      {\"source\", SourceNodeOptions::FromReader(\n+                           reader,\n+                           GetCpuThreadPool())},\n+                      {\"filter\", FilterNodeOptions{\n+                           greater(field_ref(\"score\"), literal(3))}},\n+                      {\"project\", ProjectNodeOptions{\n+                           {add(field_ref(\"score\"), literal(1))},\n+                           {\"score + 1\"}}},\n+                      {\"write\", WriteNodeOptions{/*base_dir=*/\"/dat\", /*...*/}},\n+                  })\n+                  .AddToPlan(plan.get()));\n+\n+Note that a source node can wrap anything which resembles a stream of batches.\n+For example, https://github.com/apache/arrow/pull/11032 adds support for use\n+of a DuckDB query as a source node. Similarly, a sink node can wrap anything\n\nReview comment:\n       will do\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-13T18:25:43.493+0000",
                    "updated": "2021-10-13T18:25:43.493+0000",
                    "started": "2021-10-13T18:25:43.492+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "664900",
                    "issueId": "13386923"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13386923/worklog/665202",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #11309:\nURL: https://github.com/apache/arrow/pull/11309#discussion_r727894094\n\n\n\n##########\nFile path: docs/source/cpp/streaming_execution.rst\n##########\n@@ -0,0 +1,291 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+.. cpp:namespace:: arrow::compute\n+\n+==========================\n+Streaming execution engine\n+==========================\n+\n+.. warning::\n+\n+    The streaming execution engine is experimental, and a stable API\n+    is not yet guaranteed.\n+\n+Motivation\n+----------\n+\n+For many complex computations, successive direct `invocation of\n+compute functions <invoking compute functions>` is not feasible\n+in either memory or computation time. Doing so causes all intermediate\n+data to be fully materialized. To facilitate arbitrarily large inputs\n+and more efficient resource usage, arrow also provides a streaming query\n+engine with which computations can be formulated and executed.\n+\n+.. image:: simple_graph.svg\n+\n+:class:`ExecNode` is provided to reify the graph of operations in a query.\n+Batches of data (struct:`ExecBatch`) flow along edges of the graph from\n+node to node. Structuring the API around a stream of batches allows the\n+working set for each node to be tuned for optimal performance independent\n+of any other nodes in the graph. Each :class:`ExecNode` processes batches\n+as they are pushed to it along an edge of the graph by upstream nodes\n+(its inputs), and pushes batches along an edge of the graph to downstream\n+nodes (its outputs) as they are finalized.\n+\n+.. [shaikhha et al] SHAIKHHA, A., DASHTI, M., & KOCH, C. (2018). Push versus pull-based loop fusion in query engines. Journal of Functional Programming, 28. https://doi.org/10.1017/s0956796818000102\n\nReview comment:\n       The current text seems ok to me. The reference can be useful for the curious (you can also make it a [`seealso`](https://www.sphinx-doc.org/en/master/usage/restructuredtext/directives.html#directive-seealso) if you want).\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-13T18:55:14.636+0000",
                    "updated": "2021-10-13T18:55:14.636+0000",
                    "started": "2021-10-13T18:55:14.636+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "665202",
                    "issueId": "13386923"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13386923/worklog/665777",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #11309:\nURL: https://github.com/apache/arrow/pull/11309#issuecomment-944517157\n\n\n   +1, merging\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-17T00:32:08.032+0000",
                    "updated": "2021-10-17T00:32:08.032+0000",
                    "started": "2021-10-17T00:32:08.032+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "665777",
                    "issueId": "13386923"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13386923/worklog/665809",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #11309:\nURL: https://github.com/apache/arrow/pull/11309#discussion_r729844559\n\n\n\n##########\nFile path: docs/source/cpp/streaming_execution.rst\n##########\n@@ -0,0 +1,291 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+.. cpp:namespace:: arrow::compute\n+\n+==========================\n+Streaming execution engine\n+==========================\n+\n+.. warning::\n+\n+    The streaming execution engine is experimental, and a stable API\n+    is not yet guaranteed.\n+\n+Motivation\n+----------\n+\n+For many complex computations, successive direct `invocation of\n+compute functions <invoking compute functions>` is not feasible\n+in either memory or computation time. Doing so causes all intermediate\n+data to be fully materialized. To facilitate arbitrarily large inputs\n+and more efficient resource usage, arrow also provides a streaming query\n+engine with which computations can be formulated and executed.\n+\n+.. image:: simple_graph.svg\n+\n+:class:`ExecNode` is provided to reify the graph of operations in a query.\n+Batches of data (struct:`ExecBatch`) flow along edges of the graph from\n+node to node. Structuring the API around a stream of batches allows the\n+working set for each node to be tuned for optimal performance independent\n+of any other nodes in the graph. Each :class:`ExecNode` processes batches\n+as they are pushed to it along an edge of the graph by upstream nodes\n+(its inputs), and pushes batches along an edge of the graph to downstream\n+nodes (its outputs) as they are finalized.\n+\n+.. [shaikhha et al] SHAIKHHA, A., DASHTI, M., & KOCH, C. (2018). Push versus pull-based loop fusion in query engines. Journal of Functional Programming, 28. https://doi.org/10.1017/s0956796818000102\n\nReview comment:\n       Thanks, I'll add a seealso\n\n##########\nFile path: docs/source/cpp/streaming_execution.rst\n##########\n@@ -0,0 +1,294 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+.. cpp:namespace:: arrow::compute\n+\n+==========================\n+Streaming execution engine\n+==========================\n+\n+.. warning::\n+\n+    The streaming execution engine is experimental, and a stable API\n+    is not yet guaranteed.\n+\n+Motivation\n+----------\n+\n+For many complex computations, successive direct `invocation of\n+compute functions <invoking-compute-functions>` is not feasible\n+in either memory or computation time. Doing so causes all intermediate\n+data to be fully materialized. To facilitate arbitrarily large inputs\n+and more efficient resource usage, Arrow also provides a streaming query\n+engine with which computations can be formulated and executed.\n+\n+.. image:: simple_graph.svg\n+\n+:class:`ExecNode` is provided to reify the graph of operations in a query.\n+Batches of data (:struct:`ExecBatch`) flow along edges of the graph from\n+node to node. Structuring the API around streams of batches allows the\n+working set for each node to be tuned for optimal performance independent\n+of any other nodes in the graph. Each :class:`ExecNode` processes batches\n+as they are pushed to it along an edge of the graph by upstream nodes\n+(its inputs), and pushes batches along an edge of the graph to downstream\n+nodes (its outputs) as they are finalized.\n+\n+.. [shaikhha et al] SHAIKHHA, A., DASHTI, M., & KOCH, C. (2018). Push versus pull-based loop fusion in query engines. Journal of Functional Programming, 28. https://doi.org/10.1017/s0956796818000102\n+\n+Overview\n+--------\n+\n+:class:`ExecNode`\n+  Each node in the graph is an implementation of the :class:`ExecNode` interface.\n+\n+:class:`ExecPlan`\n+  A set of :class:`ExecNode` is contained and (to an extent) coordinated by an\n+  :class:`ExecPlan`.\n+\n+:class:`ExecFactoryRegistry`\n+  Instances of :class:`ExecNode` are constructed by factory functions held\n+  in a :class:`ExecFactoryRegistry`.\n+\n+:class:`ExecNodeOptions`\n+  Heterogenous parameters for factories of :class:`ExecNode` are bundled in an\n+  :class:`ExecNodeOptions`.\n+\n+:struct:`Declaration`\n+  ``dplyr``-inspired helper for efficient construction of an :class:`ExecPlan`.\n+\n+:struct:`ExecBatch`\n+  A lightweight container for a single chunk of data in the Arrow format. In\n\nReview comment:\n       ExecBatch's columns *are* a contiguous chunk- if you have a float32 column with no nulls that's stored in a single buffer.\n\n##########\nFile path: docs/source/cpp/streaming_execution.rst\n##########\n@@ -0,0 +1,294 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+.. cpp:namespace:: arrow::compute\n+\n+==========================\n+Streaming execution engine\n+==========================\n+\n+.. warning::\n+\n+    The streaming execution engine is experimental, and a stable API\n+    is not yet guaranteed.\n+\n+Motivation\n+----------\n+\n+For many complex computations, successive direct `invocation of\n+compute functions <invoking-compute-functions>` is not feasible\n+in either memory or computation time. Doing so causes all intermediate\n+data to be fully materialized. To facilitate arbitrarily large inputs\n+and more efficient resource usage, Arrow also provides a streaming query\n+engine with which computations can be formulated and executed.\n+\n+.. image:: simple_graph.svg\n+\n+:class:`ExecNode` is provided to reify the graph of operations in a query.\n+Batches of data (:struct:`ExecBatch`) flow along edges of the graph from\n+node to node. Structuring the API around streams of batches allows the\n+working set for each node to be tuned for optimal performance independent\n+of any other nodes in the graph. Each :class:`ExecNode` processes batches\n+as they are pushed to it along an edge of the graph by upstream nodes\n+(its inputs), and pushes batches along an edge of the graph to downstream\n+nodes (its outputs) as they are finalized.\n+\n+.. [shaikhha et al] SHAIKHHA, A., DASHTI, M., & KOCH, C. (2018). Push versus pull-based loop fusion in query engines. Journal of Functional Programming, 28. https://doi.org/10.1017/s0956796818000102\n+\n+Overview\n+--------\n+\n+:class:`ExecNode`\n+  Each node in the graph is an implementation of the :class:`ExecNode` interface.\n+\n+:class:`ExecPlan`\n+  A set of :class:`ExecNode` is contained and (to an extent) coordinated by an\n+  :class:`ExecPlan`.\n+\n+:class:`ExecFactoryRegistry`\n+  Instances of :class:`ExecNode` are constructed by factory functions held\n+  in a :class:`ExecFactoryRegistry`.\n+\n+:class:`ExecNodeOptions`\n+  Heterogenous parameters for factories of :class:`ExecNode` are bundled in an\n+  :class:`ExecNodeOptions`.\n+\n+:struct:`Declaration`\n+  ``dplyr``-inspired helper for efficient construction of an :class:`ExecPlan`.\n+\n+:struct:`ExecBatch`\n+  A lightweight container for a single chunk of data in the Arrow format. In\n+  contrast to :class:`RecordBatch`, :struct:`ExecBatch` is intended for use\n+  exclusively in a streaming execution context (for example, it doesn't have a\n+  corresponding Python binding). Furthermore columns which happen to have a\n+  constant value may be represented by a :class:`Scalar` instead of an\n+  :class:`Array`. In addition, :struct:`ExecBatch` may carry\n+  execution-relevant properties including a guaranteed-true-filter\n+  for :class:`Expression` simplification.\n+\n+\n+An example :class:`ExecNode` implementation which simply passes all input batches\n+through unchanged::\n+\n+    class PassthruNode : public ExecNode {\n+     public:\n+      // InputReceived is the main entry point for ExecNodes. It is invoked\n+      // by an input of this node to push a batch here for processing.\n+      void InputReceived(ExecNode* input, ExecBatch batch) override {\n+        // Since this is a passthru node we simply push the batch to our\n+        // only output here.\n+        outputs_[0]->InputReceived(this, batch);\n+      }\n+\n+      // ErrorReceived is called by an input of this node to report an error.\n+      void ErrorReceived(ExecNode* input, Status error) override {\n+        outputs_[0]->ErrorReceived(this, error);\n+      }\n+\n+      // InputFinished is used to signal how many batches will ultimately arrive.\n+      // It may be called with any ordering relative to InputReceived/ErrorReceived.\n+      void InputFinished(ExecNode* input, int total_batches) override {\n+        outputs_[0]->InputFinished(this, total_batches);\n+      }\n+\n+      // ExecNodes may request that their inputs throttle production of batches\n+      // until they are ready for more, or stop production if no further batches\n+      // are required.\n+      void ResumeProducing(ExecNode* output) override { inputs_[0]->ResumeProducing(this); }\n+      void PauseProducing(ExecNode* output) override { inputs_[0]->PauseProducing(this); }\n+      void StopProducing(ExecNode* output) override { inputs_[0]->StopProducing(this); }\n+\n+      // An ExecNode has a single output schema to which all its batches conform.\n+      using ExecNode::output_schema;\n+\n+      // ExecNodes carry basic introspection for debugging purposes\n+      const char* kind_name() const override { return \"PassthruNode\"; }\n+      using ExecNode::label;\n+      using ExecNode::SetLabel;\n+      using ExecNode::ToString;\n+\n+      // An ExecNode holds references to its inputs and outputs, so it is possible\n+      // to walk the graph of execution if necessary.\n+      using ExecNode::inputs;\n+      using ExecNode::outputs;\n+\n+      // StartProducing() and StopProducing() are invoked by an ExecPlan to\n+      // coordinate the graph-wide execution state.\n+      Status StartProducing() override { return Status::OK(); }\n+      void StopProducing() override {}\n+      Future<> finished() override { return inputs_[0]->finished(); }\n+    };\n+\n+Note that each method which is associated with an edge of the graph must be invoked\n+with an ``ExecNode*`` to identify the node which invoked it. For example, in an\n+:class:`ExecNode` which implements ``JOIN`` this tagging might be used to differentiate\n+between batches from the left or right inputs.\n+``InputReceived``, ``ErrorReceived``, ``InputFinished`` may only be invoked by\n+the inputs of a node, while ``ResumeProducing``, ``PauseProducing``, ``StopProducing``\n+may only be invoked by outputs of a node.\n+\n+:class:`ExecPlan` contains the associated instances of :class:`ExecNode`\n+and provides convenience methods for starting and stopping execution of all nodes\n+and for querying/awaiting their completion::\n+\n+    // construct an ExecPlan first to hold your nodes\n+    ARROW_ASSIGN_OR_RAISE(auto plan, ExecPlan::Make(default_exec_context()));\n+\n+    // ... add nodes to your ExecPlan\n+\n+    // start all nodes in the graph\n+    ARROW_RETURN_NOT_OK(plan->StartProducing());\n+\n+    if (need_stop) {\n+      // stop all nodes in the graph\n+      plan->StopProducing();\n+    }\n\nReview comment:\n       That's fair. I'll make this a bit more clear by phrasing it as an optional callback\n\n##########\nFile path: docs/source/cpp/streaming_execution.rst\n##########\n@@ -0,0 +1,294 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+.. cpp:namespace:: arrow::compute\n+\n+==========================\n+Streaming execution engine\n+==========================\n+\n+.. warning::\n+\n+    The streaming execution engine is experimental, and a stable API\n+    is not yet guaranteed.\n+\n+Motivation\n+----------\n+\n+For many complex computations, successive direct `invocation of\n+compute functions <invoking-compute-functions>` is not feasible\n+in either memory or computation time. Doing so causes all intermediate\n+data to be fully materialized. To facilitate arbitrarily large inputs\n+and more efficient resource usage, Arrow also provides a streaming query\n+engine with which computations can be formulated and executed.\n+\n+.. image:: simple_graph.svg\n+\n+:class:`ExecNode` is provided to reify the graph of operations in a query.\n+Batches of data (:struct:`ExecBatch`) flow along edges of the graph from\n+node to node. Structuring the API around streams of batches allows the\n+working set for each node to be tuned for optimal performance independent\n+of any other nodes in the graph. Each :class:`ExecNode` processes batches\n+as they are pushed to it along an edge of the graph by upstream nodes\n+(its inputs), and pushes batches along an edge of the graph to downstream\n+nodes (its outputs) as they are finalized.\n+\n+.. [shaikhha et al] SHAIKHHA, A., DASHTI, M., & KOCH, C. (2018). Push versus pull-based loop fusion in query engines. Journal of Functional Programming, 28. https://doi.org/10.1017/s0956796818000102\n+\n+Overview\n+--------\n+\n+:class:`ExecNode`\n+  Each node in the graph is an implementation of the :class:`ExecNode` interface.\n+\n+:class:`ExecPlan`\n+  A set of :class:`ExecNode` is contained and (to an extent) coordinated by an\n+  :class:`ExecPlan`.\n+\n+:class:`ExecFactoryRegistry`\n+  Instances of :class:`ExecNode` are constructed by factory functions held\n+  in a :class:`ExecFactoryRegistry`.\n+\n+:class:`ExecNodeOptions`\n+  Heterogenous parameters for factories of :class:`ExecNode` are bundled in an\n+  :class:`ExecNodeOptions`.\n+\n+:struct:`Declaration`\n+  ``dplyr``-inspired helper for efficient construction of an :class:`ExecPlan`.\n+\n+:struct:`ExecBatch`\n+  A lightweight container for a single chunk of data in the Arrow format. In\n+  contrast to :class:`RecordBatch`, :struct:`ExecBatch` is intended for use\n+  exclusively in a streaming execution context (for example, it doesn't have a\n+  corresponding Python binding). Furthermore columns which happen to have a\n+  constant value may be represented by a :class:`Scalar` instead of an\n+  :class:`Array`. In addition, :struct:`ExecBatch` may carry\n+  execution-relevant properties including a guaranteed-true-filter\n+  for :class:`Expression` simplification.\n+\n+\n+An example :class:`ExecNode` implementation which simply passes all input batches\n+through unchanged::\n+\n+    class PassthruNode : public ExecNode {\n+     public:\n+      // InputReceived is the main entry point for ExecNodes. It is invoked\n+      // by an input of this node to push a batch here for processing.\n+      void InputReceived(ExecNode* input, ExecBatch batch) override {\n+        // Since this is a passthru node we simply push the batch to our\n+        // only output here.\n+        outputs_[0]->InputReceived(this, batch);\n+      }\n+\n+      // ErrorReceived is called by an input of this node to report an error.\n+      void ErrorReceived(ExecNode* input, Status error) override {\n+        outputs_[0]->ErrorReceived(this, error);\n+      }\n+\n+      // InputFinished is used to signal how many batches will ultimately arrive.\n+      // It may be called with any ordering relative to InputReceived/ErrorReceived.\n+      void InputFinished(ExecNode* input, int total_batches) override {\n+        outputs_[0]->InputFinished(this, total_batches);\n+      }\n+\n+      // ExecNodes may request that their inputs throttle production of batches\n+      // until they are ready for more, or stop production if no further batches\n+      // are required.\n+      void ResumeProducing(ExecNode* output) override { inputs_[0]->ResumeProducing(this); }\n+      void PauseProducing(ExecNode* output) override { inputs_[0]->PauseProducing(this); }\n+      void StopProducing(ExecNode* output) override { inputs_[0]->StopProducing(this); }\n+\n+      // An ExecNode has a single output schema to which all its batches conform.\n+      using ExecNode::output_schema;\n+\n+      // ExecNodes carry basic introspection for debugging purposes\n+      const char* kind_name() const override { return \"PassthruNode\"; }\n+      using ExecNode::label;\n+      using ExecNode::SetLabel;\n+      using ExecNode::ToString;\n+\n+      // An ExecNode holds references to its inputs and outputs, so it is possible\n+      // to walk the graph of execution if necessary.\n+      using ExecNode::inputs;\n+      using ExecNode::outputs;\n+\n+      // StartProducing() and StopProducing() are invoked by an ExecPlan to\n+      // coordinate the graph-wide execution state.\n+      Status StartProducing() override { return Status::OK(); }\n+      void StopProducing() override {}\n+      Future<> finished() override { return inputs_[0]->finished(); }\n+    };\n+\n+Note that each method which is associated with an edge of the graph must be invoked\n+with an ``ExecNode*`` to identify the node which invoked it. For example, in an\n+:class:`ExecNode` which implements ``JOIN`` this tagging might be used to differentiate\n+between batches from the left or right inputs.\n+``InputReceived``, ``ErrorReceived``, ``InputFinished`` may only be invoked by\n+the inputs of a node, while ``ResumeProducing``, ``PauseProducing``, ``StopProducing``\n+may only be invoked by outputs of a node.\n+\n+:class:`ExecPlan` contains the associated instances of :class:`ExecNode`\n+and provides convenience methods for starting and stopping execution of all nodes\n+and for querying/awaiting their completion::\n+\n+    // construct an ExecPlan first to hold your nodes\n+    ARROW_ASSIGN_OR_RAISE(auto plan, ExecPlan::Make(default_exec_context()));\n+\n+    // ... add nodes to your ExecPlan\n+\n+    // start all nodes in the graph\n+    ARROW_RETURN_NOT_OK(plan->StartProducing());\n+\n+    if (need_stop) {\n+      // stop all nodes in the graph\n+      plan->StopProducing();\n+    }\n+\n+    // Complete will be marked finished when all nodes have run to completion\n+    // or acknowledged a StopProducing() signal. The ExecPlan should be kept\n+    // alive until this future is marked finished.\n+    Future<> complete = plan->finished();\n+\n+\n+Constructing ``ExecPlan``s\n+--------------------------\n+\n+.. warning::\n+\n+    The following will be superceded by construction from Compute IR, see ARROW-14074.\n+\n+None of the concrete implementations of :class:`ExecNode` are exposed\n+in headers, so they can't be constructed directly outside the\n+Translation Unit where they are defined. Instead, factories to\n+create them are provided in an extensible registry. This structure\n+provides a number of benefits:\n+\n+- This enforces consistent construction.\n+- It decouples implementations from consumers of the interface\n+  (for example: we have two classes for scalar and grouped aggregate,\n+   we can choose which to construct within the single factory by\n+   checking whether grouping keys are provided)\n+- This expedites integration with out-of-library extensions. For example\n+  \"scan\" nodes are implemented in the separate ``libarrow_dataset.so`` library.\n+- Since the class is not referencable outside the Translation Unit in which it\n+  is defined, compilers can optimize more aggressively.\n+\n+Factories of :class:`ExecNode` can be retrieved by name from the registry.\n+The default registry is available through\n+:func:`arrow::compute::default_exec_factory_registry()`\n+and can be queried for the built-in factories::\n+\n+    // get the factory for \"filter\" nodes:\n+    ARROW_ASSIGN_OR_RAISE(auto make_filter,\n+                          default_exec_factory_registry()->GetFactory(\"filter\"));\n+\n+    // factories take three arguments:\n+    ARROW_ASSIGN_OR_RAISE(ExecNode* filter_node, *make_filter(\n+        // the ExecPlan which should own this node\n+        plan.get(),\n+\n+        // nodes which will send batches to this node (inputs)\n+        {scan_node},\n+\n+        // parameters unique to \"filter\" nodes\n+        FilterNodeOptions{filter_expression}));\n+\n+    // alternative shorthand:\n+    ARROW_ASSIGN_OR_RAISE(filter_node, MakeExecNode(\"filter\",\n+        plan.get(), {scan_node}, FilterNodeOptions{filter_expression});\n+\n+Factories can also be added to the default registry as long as they are\n+convertible to ``std::function<Result<ExecNode*>(\n+ExecPlan*, std::vector<ExecNode*>, const ExecNodeOptions&)>``.\n+\n+To build an :class:`ExecPlan` representing a simple pipeline which\n+reads from a :class:`RecordBatchReader` then filters, projects, and\n+writes to disk::\n+\n+    std::shared_ptr<RecordBatchReader> reader = GetStreamOfBatches();\n+    ExecNode* source_node = *MakeExecNode(\"source\", plan.get(), {},\n+                                          SourceNodeOptions::FromReader(\n+                                              reader,\n+                                              GetCpuThreadPool()));\n+\n+    ExecNode* filter_node = *MakeExecNode(\"filter\", plan.get(), {source_node},\n+                                          FilterNodeOptions{\n+                                            greater(field_ref(\"score\"), literal(3))\n+                                          });\n+\n+    ExecNode* project_node = *MakeExecNode(\"project\", plan.get(), {filter_node},\n+                                           ProjectNodeOptions{\n+                                             {add(field_ref(\"score\"), literal(1))},\n+                                             {\"score + 1\"}\n+                                           });\n+\n+    MakeExecNode(\"write\", plan.get(), {project_node},\n+                 WriteNodeOptions{/*base_dir=*/\"/dat\", /*...*/});\n+\n+:struct:`Declaration` is a `dplyr <https://dplyr.tidyverse.org>`-inspired\n+helper which further decreases the boilerplate associated with populating\n+an :class:`ExecPlan` from C++::\n+\n+    std::shared_ptr<RecordBatchReader> reader = GetStreamOfBatches();\n+    ASSERT_OK(Declaration::Sequence(\n+                  {\n+                      {\"source\", SourceNodeOptions::FromReader(\n+                           reader,\n+                           GetCpuThreadPool())},\n+                      {\"filter\", FilterNodeOptions{\n+                           greater(field_ref(\"score\"), literal(3))}},\n+                      {\"project\", ProjectNodeOptions{\n+                           {add(field_ref(\"score\"), literal(1))},\n+                           {\"score + 1\"}}},\n+                      {\"write\", WriteNodeOptions{/*base_dir=*/\"/dat\", /*...*/}},\n+                  })\n+                  .AddToPlan(plan.get()));\n+\n+Note that a source node can wrap anything which resembles a stream of batches.\n+For example, `PR#11032 <https://github.com/apache/arrow/pull/11032>` adds\n+support for use of a `DuckDB <https://duckdb.org>` query as a source node.\n+Similarly, a sink node can wrap anything which absorbs a stream of batches.\n+In the example above we're writing completed\n+batches to disk. However we can also collect these in memory into a :class:`Table`\n+or forward them to a :class:`RecordBatchReader` as an out-of-graph stream.\n+This flexibility allows an :class:`ExecPlan` to be used as streaming middleware\n+between any endpoints which support Arrow formatted batches.\n+\n+An :class:`arrow::dataset::Dataset` can also be wrapped as a source node which\n+pushes all the dataset's batches into an :class:`ExecPlan`. This factory is added\n+to the default registry with the name ``\"scan\"`` by calling\n+``arrow::dataset::internal::Initialize()``::\n\nReview comment:\n       I've added more calls to Initialize() so that any of these snippets should be well formed\n\n##########\nFile path: docs/source/cpp/streaming_execution.rst\n##########\n@@ -0,0 +1,294 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+.. cpp:namespace:: arrow::compute\n+\n+==========================\n+Streaming execution engine\n+==========================\n+\n+.. warning::\n+\n+    The streaming execution engine is experimental, and a stable API\n+    is not yet guaranteed.\n+\n+Motivation\n+----------\n+\n+For many complex computations, successive direct `invocation of\n+compute functions <invoking-compute-functions>` is not feasible\n+in either memory or computation time. Doing so causes all intermediate\n+data to be fully materialized. To facilitate arbitrarily large inputs\n+and more efficient resource usage, Arrow also provides a streaming query\n+engine with which computations can be formulated and executed.\n+\n+.. image:: simple_graph.svg\n+\n+:class:`ExecNode` is provided to reify the graph of operations in a query.\n+Batches of data (:struct:`ExecBatch`) flow along edges of the graph from\n+node to node. Structuring the API around streams of batches allows the\n+working set for each node to be tuned for optimal performance independent\n+of any other nodes in the graph. Each :class:`ExecNode` processes batches\n+as they are pushed to it along an edge of the graph by upstream nodes\n+(its inputs), and pushes batches along an edge of the graph to downstream\n+nodes (its outputs) as they are finalized.\n+\n+.. [shaikhha et al] SHAIKHHA, A., DASHTI, M., & KOCH, C. (2018). Push versus pull-based loop fusion in query engines. Journal of Functional Programming, 28. https://doi.org/10.1017/s0956796818000102\n+\n+Overview\n+--------\n+\n+:class:`ExecNode`\n+  Each node in the graph is an implementation of the :class:`ExecNode` interface.\n+\n+:class:`ExecPlan`\n+  A set of :class:`ExecNode` is contained and (to an extent) coordinated by an\n+  :class:`ExecPlan`.\n+\n+:class:`ExecFactoryRegistry`\n+  Instances of :class:`ExecNode` are constructed by factory functions held\n+  in a :class:`ExecFactoryRegistry`.\n+\n+:class:`ExecNodeOptions`\n+  Heterogenous parameters for factories of :class:`ExecNode` are bundled in an\n+  :class:`ExecNodeOptions`.\n+\n+:struct:`Declaration`\n+  ``dplyr``-inspired helper for efficient construction of an :class:`ExecPlan`.\n+\n+:struct:`ExecBatch`\n+  A lightweight container for a single chunk of data in the Arrow format. In\n+  contrast to :class:`RecordBatch`, :struct:`ExecBatch` is intended for use\n+  exclusively in a streaming execution context (for example, it doesn't have a\n+  corresponding Python binding). Furthermore columns which happen to have a\n+  constant value may be represented by a :class:`Scalar` instead of an\n+  :class:`Array`. In addition, :struct:`ExecBatch` may carry\n+  execution-relevant properties including a guaranteed-true-filter\n+  for :class:`Expression` simplification.\n+\n+\n+An example :class:`ExecNode` implementation which simply passes all input batches\n+through unchanged::\n+\n+    class PassthruNode : public ExecNode {\n+     public:\n+      // InputReceived is the main entry point for ExecNodes. It is invoked\n+      // by an input of this node to push a batch here for processing.\n+      void InputReceived(ExecNode* input, ExecBatch batch) override {\n+        // Since this is a passthru node we simply push the batch to our\n+        // only output here.\n+        outputs_[0]->InputReceived(this, batch);\n+      }\n+\n+      // ErrorReceived is called by an input of this node to report an error.\n+      void ErrorReceived(ExecNode* input, Status error) override {\n+        outputs_[0]->ErrorReceived(this, error);\n+      }\n+\n+      // InputFinished is used to signal how many batches will ultimately arrive.\n+      // It may be called with any ordering relative to InputReceived/ErrorReceived.\n+      void InputFinished(ExecNode* input, int total_batches) override {\n+        outputs_[0]->InputFinished(this, total_batches);\n+      }\n+\n+      // ExecNodes may request that their inputs throttle production of batches\n+      // until they are ready for more, or stop production if no further batches\n+      // are required.\n+      void ResumeProducing(ExecNode* output) override { inputs_[0]->ResumeProducing(this); }\n+      void PauseProducing(ExecNode* output) override { inputs_[0]->PauseProducing(this); }\n+      void StopProducing(ExecNode* output) override { inputs_[0]->StopProducing(this); }\n+\n+      // An ExecNode has a single output schema to which all its batches conform.\n+      using ExecNode::output_schema;\n+\n+      // ExecNodes carry basic introspection for debugging purposes\n+      const char* kind_name() const override { return \"PassthruNode\"; }\n+      using ExecNode::label;\n+      using ExecNode::SetLabel;\n+      using ExecNode::ToString;\n+\n+      // An ExecNode holds references to its inputs and outputs, so it is possible\n+      // to walk the graph of execution if necessary.\n+      using ExecNode::inputs;\n+      using ExecNode::outputs;\n+\n+      // StartProducing() and StopProducing() are invoked by an ExecPlan to\n+      // coordinate the graph-wide execution state.\n+      Status StartProducing() override { return Status::OK(); }\n+      void StopProducing() override {}\n+      Future<> finished() override { return inputs_[0]->finished(); }\n+    };\n+\n+Note that each method which is associated with an edge of the graph must be invoked\n+with an ``ExecNode*`` to identify the node which invoked it. For example, in an\n+:class:`ExecNode` which implements ``JOIN`` this tagging might be used to differentiate\n+between batches from the left or right inputs.\n+``InputReceived``, ``ErrorReceived``, ``InputFinished`` may only be invoked by\n+the inputs of a node, while ``ResumeProducing``, ``PauseProducing``, ``StopProducing``\n+may only be invoked by outputs of a node.\n+\n+:class:`ExecPlan` contains the associated instances of :class:`ExecNode`\n+and provides convenience methods for starting and stopping execution of all nodes\n+and for querying/awaiting their completion::\n+\n+    // construct an ExecPlan first to hold your nodes\n+    ARROW_ASSIGN_OR_RAISE(auto plan, ExecPlan::Make(default_exec_context()));\n+\n+    // ... add nodes to your ExecPlan\n+\n+    // start all nodes in the graph\n+    ARROW_RETURN_NOT_OK(plan->StartProducing());\n+\n+    if (need_stop) {\n+      // stop all nodes in the graph\n+      plan->StopProducing();\n+    }\n+\n+    // Complete will be marked finished when all nodes have run to completion\n+    // or acknowledged a StopProducing() signal. The ExecPlan should be kept\n+    // alive until this future is marked finished.\n+    Future<> complete = plan->finished();\n+\n+\n+Constructing ``ExecPlan``s\n+--------------------------\n+\n+.. warning::\n+\n+    The following will be superceded by construction from Compute IR, see ARROW-14074.\n+\n+None of the concrete implementations of :class:`ExecNode` are exposed\n+in headers, so they can't be constructed directly outside the\n+Translation Unit where they are defined. Instead, factories to\n+create them are provided in an extensible registry. This structure\n+provides a number of benefits:\n+\n+- This enforces consistent construction.\n+- It decouples implementations from consumers of the interface\n+  (for example: we have two classes for scalar and grouped aggregate,\n+   we can choose which to construct within the single factory by\n+   checking whether grouping keys are provided)\n+- This expedites integration with out-of-library extensions. For example\n+  \"scan\" nodes are implemented in the separate ``libarrow_dataset.so`` library.\n+- Since the class is not referencable outside the Translation Unit in which it\n+  is defined, compilers can optimize more aggressively.\n+\n+Factories of :class:`ExecNode` can be retrieved by name from the registry.\n+The default registry is available through\n+:func:`arrow::compute::default_exec_factory_registry()`\n+and can be queried for the built-in factories::\n+\n+    // get the factory for \"filter\" nodes:\n+    ARROW_ASSIGN_OR_RAISE(auto make_filter,\n+                          default_exec_factory_registry()->GetFactory(\"filter\"));\n+\n+    // factories take three arguments:\n+    ARROW_ASSIGN_OR_RAISE(ExecNode* filter_node, *make_filter(\n+        // the ExecPlan which should own this node\n+        plan.get(),\n+\n+        // nodes which will send batches to this node (inputs)\n+        {scan_node},\n+\n+        // parameters unique to \"filter\" nodes\n+        FilterNodeOptions{filter_expression}));\n+\n+    // alternative shorthand:\n+    ARROW_ASSIGN_OR_RAISE(filter_node, MakeExecNode(\"filter\",\n+        plan.get(), {scan_node}, FilterNodeOptions{filter_expression});\n+\n+Factories can also be added to the default registry as long as they are\n+convertible to ``std::function<Result<ExecNode*>(\n+ExecPlan*, std::vector<ExecNode*>, const ExecNodeOptions&)>``.\n+\n+To build an :class:`ExecPlan` representing a simple pipeline which\n+reads from a :class:`RecordBatchReader` then filters, projects, and\n+writes to disk::\n+\n+    std::shared_ptr<RecordBatchReader> reader = GetStreamOfBatches();\n+    ExecNode* source_node = *MakeExecNode(\"source\", plan.get(), {},\n+                                          SourceNodeOptions::FromReader(\n+                                              reader,\n+                                              GetCpuThreadPool()));\n+\n+    ExecNode* filter_node = *MakeExecNode(\"filter\", plan.get(), {source_node},\n+                                          FilterNodeOptions{\n+                                            greater(field_ref(\"score\"), literal(3))\n+                                          });\n+\n+    ExecNode* project_node = *MakeExecNode(\"project\", plan.get(), {filter_node},\n+                                           ProjectNodeOptions{\n+                                             {add(field_ref(\"score\"), literal(1))},\n+                                             {\"score + 1\"}\n+                                           });\n+\n+    MakeExecNode(\"write\", plan.get(), {project_node},\n+                 WriteNodeOptions{/*base_dir=*/\"/dat\", /*...*/});\n+\n+:struct:`Declaration` is a `dplyr <https://dplyr.tidyverse.org>`-inspired\n+helper which further decreases the boilerplate associated with populating\n+an :class:`ExecPlan` from C++::\n+\n+    std::shared_ptr<RecordBatchReader> reader = GetStreamOfBatches();\n+    ASSERT_OK(Declaration::Sequence(\n+                  {\n+                      {\"source\", SourceNodeOptions::FromReader(\n+                           reader,\n+                           GetCpuThreadPool())},\n+                      {\"filter\", FilterNodeOptions{\n+                           greater(field_ref(\"score\"), literal(3))}},\n+                      {\"project\", ProjectNodeOptions{\n+                           {add(field_ref(\"score\"), literal(1))},\n+                           {\"score + 1\"}}},\n+                      {\"write\", WriteNodeOptions{/*base_dir=*/\"/dat\", /*...*/}},\n+                  })\n+                  .AddToPlan(plan.get()));\n+\n+Note that a source node can wrap anything which resembles a stream of batches.\n+For example, `PR#11032 <https://github.com/apache/arrow/pull/11032>` adds\n+support for use of a `DuckDB <https://duckdb.org>` query as a source node.\n+Similarly, a sink node can wrap anything which absorbs a stream of batches.\n+In the example above we're writing completed\n+batches to disk. However we can also collect these in memory into a :class:`Table`\n+or forward them to a :class:`RecordBatchReader` as an out-of-graph stream.\n+This flexibility allows an :class:`ExecPlan` to be used as streaming middleware\n+between any endpoints which support Arrow formatted batches.\n+\n+An :class:`arrow::dataset::Dataset` can also be wrapped as a source node which\n+pushes all the dataset's batches into an :class:`ExecPlan`. This factory is added\n+to the default registry with the name ``\"scan\"`` by calling\n+``arrow::dataset::internal::Initialize()``::\n\nReview comment:\n       Ideally we can resolve ARROW-13773 and remove these :)\n\n##########\nFile path: docs/source/cpp/streaming_execution.rst\n##########\n@@ -0,0 +1,294 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+.. cpp:namespace:: arrow::compute\n+\n+==========================\n+Streaming execution engine\n+==========================\n+\n+.. warning::\n+\n+    The streaming execution engine is experimental, and a stable API\n+    is not yet guaranteed.\n+\n+Motivation\n+----------\n+\n+For many complex computations, successive direct `invocation of\n+compute functions <invoking-compute-functions>` is not feasible\n+in either memory or computation time. Doing so causes all intermediate\n+data to be fully materialized. To facilitate arbitrarily large inputs\n+and more efficient resource usage, Arrow also provides a streaming query\n+engine with which computations can be formulated and executed.\n+\n+.. image:: simple_graph.svg\n+\n+:class:`ExecNode` is provided to reify the graph of operations in a query.\n+Batches of data (:struct:`ExecBatch`) flow along edges of the graph from\n+node to node. Structuring the API around streams of batches allows the\n+working set for each node to be tuned for optimal performance independent\n+of any other nodes in the graph. Each :class:`ExecNode` processes batches\n+as they are pushed to it along an edge of the graph by upstream nodes\n+(its inputs), and pushes batches along an edge of the graph to downstream\n+nodes (its outputs) as they are finalized.\n+\n+.. [shaikhha et al] SHAIKHHA, A., DASHTI, M., & KOCH, C. (2018). Push versus pull-based loop fusion in query engines. Journal of Functional Programming, 28. https://doi.org/10.1017/s0956796818000102\n+\n+Overview\n+--------\n+\n+:class:`ExecNode`\n+  Each node in the graph is an implementation of the :class:`ExecNode` interface.\n+\n+:class:`ExecPlan`\n+  A set of :class:`ExecNode` is contained and (to an extent) coordinated by an\n+  :class:`ExecPlan`.\n+\n+:class:`ExecFactoryRegistry`\n+  Instances of :class:`ExecNode` are constructed by factory functions held\n+  in a :class:`ExecFactoryRegistry`.\n+\n+:class:`ExecNodeOptions`\n+  Heterogenous parameters for factories of :class:`ExecNode` are bundled in an\n+  :class:`ExecNodeOptions`.\n+\n+:struct:`Declaration`\n+  ``dplyr``-inspired helper for efficient construction of an :class:`ExecPlan`.\n\nReview comment:\n       I think giving something to look up is preferable; if anyone isn't familiar the worst that can happen is they read the example to see what `Declaration` can be used for\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-17T00:34:56.797+0000",
                    "updated": "2021-10-17T00:34:56.797+0000",
                    "started": "2021-10-17T00:34:56.797+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "665809",
                    "issueId": "13386923"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13386923/worklog/665813",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot edited a comment on pull request #11309:\nURL: https://github.com/apache/arrow/pull/11309#issuecomment-944520286\n\n\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-17T00:35:32.614+0000",
                    "updated": "2021-10-17T00:35:32.614+0000",
                    "started": "2021-10-17T00:35:32.613+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "665813",
                    "issueId": "13386923"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13386923/worklog/665819",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #11309:\nURL: https://github.com/apache/arrow/pull/11309#discussion_r730055202\n\n\n\n##########\nFile path: docs/source/cpp/streaming_execution.rst\n##########\n@@ -0,0 +1,294 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+.. cpp:namespace:: arrow::compute\n+\n+==========================\n+Streaming execution engine\n+==========================\n+\n+.. warning::\n+\n+    The streaming execution engine is experimental, and a stable API\n+    is not yet guaranteed.\n+\n+Motivation\n+----------\n+\n+For many complex computations, successive direct `invocation of\n+compute functions <invoking-compute-functions>` is not feasible\n+in either memory or computation time. Doing so causes all intermediate\n+data to be fully materialized. To facilitate arbitrarily large inputs\n+and more efficient resource usage, Arrow also provides a streaming query\n+engine with which computations can be formulated and executed.\n+\n+.. image:: simple_graph.svg\n+\n+:class:`ExecNode` is provided to reify the graph of operations in a query.\n+Batches of data (:struct:`ExecBatch`) flow along edges of the graph from\n+node to node. Structuring the API around streams of batches allows the\n+working set for each node to be tuned for optimal performance independent\n+of any other nodes in the graph. Each :class:`ExecNode` processes batches\n+as they are pushed to it along an edge of the graph by upstream nodes\n+(its inputs), and pushes batches along an edge of the graph to downstream\n+nodes (its outputs) as they are finalized.\n+\n+.. [shaikhha et al] SHAIKHHA, A., DASHTI, M., & KOCH, C. (2018). Push versus pull-based loop fusion in query engines. Journal of Functional Programming, 28. https://doi.org/10.1017/s0956796818000102\n+\n+Overview\n+--------\n+\n+:class:`ExecNode`\n+  Each node in the graph is an implementation of the :class:`ExecNode` interface.\n+\n+:class:`ExecPlan`\n+  A set of :class:`ExecNode` is contained and (to an extent) coordinated by an\n+  :class:`ExecPlan`.\n+\n+:class:`ExecFactoryRegistry`\n+  Instances of :class:`ExecNode` are constructed by factory functions held\n+  in a :class:`ExecFactoryRegistry`.\n+\n+:class:`ExecNodeOptions`\n+  Heterogenous parameters for factories of :class:`ExecNode` are bundled in an\n+  :class:`ExecNodeOptions`.\n+\n+:struct:`Declaration`\n+  ``dplyr``-inspired helper for efficient construction of an :class:`ExecPlan`.\n+\n+:struct:`ExecBatch`\n+  A lightweight container for a single chunk of data in the Arrow format. In\n\nReview comment:\n       Right, but you have multiple columns and each one is its own set of contiguous chunks.  I.e. it's not a pandas block.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-17T00:36:06.832+0000",
                    "updated": "2021-10-17T00:36:06.832+0000",
                    "started": "2021-10-17T00:36:06.831+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "665819",
                    "issueId": "13386923"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13386923/worklog/665906",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz closed pull request #11309:\nURL: https://github.com/apache/arrow/pull/11309\n\n\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-17T00:44:32.386+0000",
                    "updated": "2021-10-17T00:44:32.386+0000",
                    "started": "2021-10-17T00:44:32.386+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "665906",
                    "issueId": "13386923"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13386923/worklog/665994",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot commented on pull request #11309:\nURL: https://github.com/apache/arrow/pull/11309#issuecomment-944520286\n\n\n   Benchmark runs are scheduled for baseline = 444cdac7d24968d5607495111e30330971be12b6 and contender = 8650c23116730f31b844591d9f8eba0530b6f172. 8650c23116730f31b844591d9f8eba0530b6f172 is a master commit associated with this PR. Results will be available as each benchmark for each run completes.\n   Conbench compare runs links:\n   [Scheduled] [ec2-t3-xlarge-us-east-2](https://conbench.ursa.dev/compare/runs/9ae94bb6545a48688fe35982cd25557a...128bcddcac4744438559a833c26ea207/)\n   [Scheduled] [ursa-i9-9960x](https://conbench.ursa.dev/compare/runs/5e3247c7e77b4d9abc74993d0e7f6eaf...cf996f8696d840508b4d99ee9b31dfbb/)\n   [Scheduled] [ursa-thinkcentre-m75q](https://conbench.ursa.dev/compare/runs/e988352985c643fb94497e499b57b138...e6960fba50ed43eaaa289c92467b8acb/)\n   Supported benchmarks:\n   ursa-i9-9960x: langs = Python, R, JavaScript\n   ursa-thinkcentre-m75q: langs = C++, Java\n   ec2-t3-xlarge-us-east-2: cloud = True\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-17T00:52:04.623+0000",
                    "updated": "2021-10-17T00:52:04.623+0000",
                    "started": "2021-10-17T00:52:04.623+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "665994",
                    "issueId": "13386923"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13386923/worklog/666007",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot edited a comment on pull request #11309:\nURL: https://github.com/apache/arrow/pull/11309#issuecomment-944520286\n\n\n   Benchmark runs are scheduled for baseline = 444cdac7d24968d5607495111e30330971be12b6 and contender = 8650c23116730f31b844591d9f8eba0530b6f172. 8650c23116730f31b844591d9f8eba0530b6f172 is a master commit associated with this PR. Results will be available as each benchmark for each run completes.\n   Conbench compare runs links:\n   [Finished :arrow_down:0.0% :arrow_up:0.0%] [ec2-t3-xlarge-us-east-2](https://conbench.ursa.dev/compare/runs/9ae94bb6545a48688fe35982cd25557a...128bcddcac4744438559a833c26ea207/)\n   [Finished :arrow_down:0.0% :arrow_up:0.0%] [ursa-i9-9960x](https://conbench.ursa.dev/compare/runs/5e3247c7e77b4d9abc74993d0e7f6eaf...cf996f8696d840508b4d99ee9b31dfbb/)\n   [Finished :arrow_down:0.18% :arrow_up:0.18%] [ursa-thinkcentre-m75q](https://conbench.ursa.dev/compare/runs/e988352985c643fb94497e499b57b138...e6960fba50ed43eaaa289c92467b8acb/)\n   Supported benchmarks:\n   ursa-i9-9960x: langs = Python, R, JavaScript\n   ursa-thinkcentre-m75q: langs = C++, Java\n   ec2-t3-xlarge-us-east-2: cloud = True\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-17T02:26:31.715+0000",
                    "updated": "2021-10-17T02:26:31.715+0000",
                    "started": "2021-10-17T02:26:31.714+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "666007",
                    "issueId": "13386923"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 12000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@729061c2[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5fc84879[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@12e70cd5[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@f710570[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7ae33bef[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@5e3713e3[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@749c3d54[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@7341ec32[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@109e8df6[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@76d02c0d[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6333d91e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@1fef8936[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 12000,
        "customfield_12312520": null,
        "customfield_12312521": "Fri Oct 15 18:43:25 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-10-15T18:43:25.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-13227/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2021-07-01T01:06:13.000+0000",
        "updated": "2021-10-17T02:26:32.000+0000",
        "timeoriginalestimate": null,
        "description": "ARROW-11930 added a markdown file with some basic descriptions of ExecNode and ExecPlan. It'd be better if we made that into a full formal Sphinx document alongside compute.rst",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "3h 20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 12000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++][Compute] Document ExecNode, ExecPlan",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13386923/comment/17429457",
                    "id": "17429457",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
                        "name": "bkietz",
                        "key": "bkietz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
                        },
                        "displayName": "Ben Kietzman",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 11309\n[https://github.com/apache/arrow/pull/11309]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
                        "name": "bkietz",
                        "key": "bkietz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
                        },
                        "displayName": "Ben Kietzman",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-10-15T18:43:25.268+0000",
                    "updated": "2021-10-15T18:43:25.268+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0shds:",
        "customfield_12314139": null
    }
}