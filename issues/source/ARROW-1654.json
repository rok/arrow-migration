{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13107401",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13107401",
    "key": "ARROW-1654",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12341352",
                "id": "12341352",
                "name": "0.8.0",
                "archived": false,
                "released": true,
                "releaseDate": "2017-12-18"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": null,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328936",
                "id": "12328936",
                "name": "Python"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": null,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=icexelloss",
            "name": "icexelloss",
            "key": "icexelloss",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Li Jin",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=icexelloss",
            "name": "icexelloss",
            "key": "icexelloss",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Li Jin",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1654/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 0,
            "worklogs": []
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": null,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@5ba0e0e8[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3cc0fdfb[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3e06524f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@5125f51[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@59fc7e73[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@51c35b0d[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5d5bff50[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@4a24db7d[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@70113bac[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@3bc11d90[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3962d4c7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@55f10fa5[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": null,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Oct 23 22:18:54 UTC 2017",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2017-10-23T22:18:51.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1654/watchers",
            "watchCount": 4,
            "isWatching": false
        },
        "created": "2017-10-05T23:40:36.000+0000",
        "updated": "2019-06-03T12:47:07.000+0000",
        "timeoriginalestimate": null,
        "description": "In [26]: t\nOut[26]: DataType(int64)\n\nIn [25]: pickle.dumps(t)\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n<ipython-input-25-f90063f6658b> in <module>()\n----> 1 pickle.dumps(t)\n\n/home/icexelloss/miniconda3/envs/spark-dev/lib/python3.5/site-packages/pyarrow/lib.cpython-35m-x86_64-linux-gnu.so in pyarrow.lib.DataType.__reduce_cython__()\n\nTypeError: no default __reduce__ due to non-trivial __cinit__\n\nThis is discovered when trying to send a pa.DataType along with a udf in pyspark. The workaround is to send pyspark DataType and convert to pa.DataType. It would be nice to able to pickle pa.DataType.",
        "customfield_10010": null,
        "timetracking": {},
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Python] pa.DataType cannot be pickled",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13107401/comment/16194537",
                    "id": "16194537",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Marked for 0.8.0. This should be doable without a great deal of effort",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2017-10-06T12:31:40.309+0000",
                    "updated": "2017-10-06T12:31:40.309+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13107401/comment/16214551",
                    "id": "16214551",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm opened a new pull request #1238: ARROW-1654: [Python] Implement pickling for DataType, Field\nURL: https://github.com/apache/arrow/pull/1238\n \n \n   I should perhaps also add tests for Schema while we are at it\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-10-23T02:40:14.521+0000",
                    "updated": "2017-10-23T02:40:14.521+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13107401/comment/16215639",
                    "id": "16215639",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on issue #1238: ARROW-1654: [Python] Implement pickling for DataType, Field, Schema\nURL: https://github.com/apache/arrow/pull/1238#issuecomment-338759024\n \n \n   This is completed\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-10-23T18:48:14.229+0000",
                    "updated": "2017-10-23T18:48:14.229+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13107401/comment/16215681",
                    "id": "16215681",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "BryanCutler commented on a change in pull request #1238: ARROW-1654: [Python] Implement pickling for DataType, Field, Schema\nURL: https://github.com/apache/arrow/pull/1238#discussion_r146365005\n \n \n\n ##########\n File path: python/pyarrow/tests/test_schema.py\n ##########\n @@ -304,3 +306,37 @@ def test_schema_repr_with_dictionaries():\n two: int32\"\"\")\n \n     assert repr(sch) == expected\n+\n+\n+def test_type_schema_pickling():\n+    cases = [\n+        pa.int8(),\n+        pa.string(),\n+        pa.binary(),\n+        pa.binary(10),\n+        pa.list_(pa.string()),\n+        pa.struct([\n+            pa.field('a', 'int8'),\n+            pa.field('b', 'string')\n+        ]),\n+        pa.time32('s'),\n+        pa.time64('us'),\n+        pa.date32(),\n+        pa.date64(),\n \n Review comment:\n   timestamp types should be fine as well right?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-10-23T19:11:46.862+0000",
                    "updated": "2017-10-23T19:11:46.862+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13107401/comment/16215687",
                    "id": "16215687",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on a change in pull request #1238: ARROW-1654: [Python] Implement pickling for DataType, Field, Schema\nURL: https://github.com/apache/arrow/pull/1238#discussion_r146365791\n \n \n\n ##########\n File path: python/pyarrow/tests/test_schema.py\n ##########\n @@ -304,3 +306,37 @@ def test_schema_repr_with_dictionaries():\n two: int32\"\"\")\n \n     assert repr(sch) == expected\n+\n+\n+def test_type_schema_pickling():\n+    cases = [\n+        pa.int8(),\n+        pa.string(),\n+        pa.binary(),\n+        pa.binary(10),\n+        pa.list_(pa.string()),\n+        pa.struct([\n+            pa.field('a', 'int8'),\n+            pa.field('b', 'string')\n+        ]),\n+        pa.time32('s'),\n+        pa.time64('us'),\n+        pa.date32(),\n+        pa.date64(),\n \n Review comment:\n   thought I had one, let me add\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-10-23T19:13:58.537+0000",
                    "updated": "2017-10-23T19:13:58.537+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13107401/comment/16215954",
                    "id": "16215954",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 1238\n[https://github.com/apache/arrow/pull/1238]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2017-10-23T22:18:51.595+0000",
                    "updated": "2017-10-23T22:18:51.595+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13107401/comment/16215955",
                    "id": "16215955",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm closed pull request #1238: ARROW-1654: [Python] Implement pickling for DataType, Field, Schema\nURL: https://github.com/apache/arrow/pull/1238\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/python/pyarrow/includes/libarrow.pxd b/python/pyarrow/includes/libarrow.pxd\nindex 60aa4d694..0e5d4a8ed 100644\n--- a/python/pyarrow/includes/libarrow.pxd\n+++ b/python/pyarrow/includes/libarrow.pxd\n@@ -182,6 +182,7 @@ cdef extern from \"arrow/api.h\" namespace \"arrow\" nogil:\n         CListType(const shared_ptr[CDataType]& value_type)\n         CListType(const shared_ptr[CField]& field)\n         shared_ptr[CDataType] value_type()\n+        shared_ptr[CField] value_field()\n \n     cdef cppclass CStringType\" arrow::StringType\"(CDataType):\n         pass\ndiff --git a/python/pyarrow/tests/test_schema.py b/python/pyarrow/tests/test_schema.py\nindex c77be9805..d6b2655b7 100644\n--- a/python/pyarrow/tests/test_schema.py\n+++ b/python/pyarrow/tests/test_schema.py\n@@ -15,6 +15,8 @@\n # specific language governing permissions and limitations\n # under the License.\n \n+import pickle\n+\n import pytest\n import numpy as np\n \n@@ -304,3 +306,40 @@ def test_schema_repr_with_dictionaries():\n two: int32\"\"\")\n \n     assert repr(sch) == expected\n+\n+\n+def test_type_schema_pickling():\n+    cases = [\n+        pa.int8(),\n+        pa.string(),\n+        pa.binary(),\n+        pa.binary(10),\n+        pa.list_(pa.string()),\n+        pa.struct([\n+            pa.field('a', 'int8'),\n+            pa.field('b', 'string')\n+        ]),\n+        pa.time32('s'),\n+        pa.time64('us'),\n+        pa.date32(),\n+        pa.date64(),\n+        pa.timestamp('ms'),\n+        pa.timestamp('ns'),\n+        pa.decimal(12, 2),\n+        pa.field('a', 'string', metadata={b'foo': b'bar'})\n+    ]\n+\n+    for val in cases:\n+        roundtripped = pickle.loads(pickle.dumps(val))\n+        assert val == roundtripped\n+\n+    fields = []\n+    for i, f in enumerate(cases):\n+        if isinstance(f, pa.Field):\n+            fields.append(f)\n+        else:\n+            fields.append(pa.field('_f{}'.format(i), f))\n+\n+    schema = pa.schema(fields, metadata={b'foo': b'bar'})\n+    roundtripped = pickle.loads(pickle.dumps(schema))\n+    assert schema == roundtripped\ndiff --git a/python/pyarrow/tests/test_types.py b/python/pyarrow/tests/test_types.py\nindex d8eea622c..e6ff5b156 100644\n--- a/python/pyarrow/tests/test_types.py\n+++ b/python/pyarrow/tests/test_types.py\n@@ -15,7 +15,6 @@\n # specific language governing permissions and limitations\n # under the License.\n \n-\n import pyarrow as pa\n import pyarrow.types as types\n \ndiff --git a/python/pyarrow/types.pxi b/python/pyarrow/types.pxi\nindex 0bef1aa60..7b95b1563 100644\n--- a/python/pyarrow/types.pxi\n+++ b/python/pyarrow/types.pxi\n@@ -69,6 +69,16 @@ cdef class DataType:\n             )\n         return frombytes(self.type.ToString())\n \n+    def __reduce__(self):\n+        return self.__class__, (), self.__getstate__()\n+\n+    def __getstate__(self):\n+        return str(self),\n+\n+    def __setstate__(self, state):\n+        cdef DataType reconstituted = type_for_alias(state[0])\n+        self.init(reconstituted.sp_type)\n+\n     def __repr__(self):\n         return '{0.__class__.__name__}({0})'.format(self)\n \n@@ -117,6 +127,15 @@ cdef class ListType(DataType):\n         DataType.init(self, type)\n         self.list_type = <const CListType*> type.get()\n \n+    def __getstate__(self):\n+        cdef CField* field = self.list_type.value_field().get()\n+        name = field.name()\n+        return name, self.value_type\n+\n+    def __setstate__(self, state):\n+        cdef DataType reconstituted = list_(field(state[0], state[1]))\n+        self.init(reconstituted.sp_type)\n+\n     property value_type:\n \n         def __get__(self):\n@@ -128,6 +147,25 @@ cdef class StructType(DataType):\n     cdef void init(self, const shared_ptr[CDataType]& type):\n         DataType.init(self, type)\n \n+    def __getitem__(self, i):\n+        if i < 0 or i >= self.num_children:\n+            raise IndexError(i)\n+\n+        return pyarrow_wrap_field(self.type.child(i))\n+\n+    property num_children:\n+\n+        def __get__(self):\n+            return self.type.num_children()\n+\n+    def __getstate__(self):\n+        cdef CStructType* type = <CStructType*> self.sp_type.get()\n+        return [self[i] for i in range(self.num_children)]\n+\n+    def __setstate__(self, state):\n+        cdef DataType reconstituted = struct(state)\n+        self.init(reconstituted.sp_type)\n+\n \n cdef class UnionType(DataType):\n \n@@ -196,6 +234,13 @@ cdef class FixedSizeBinaryType(DataType):\n         self.fixed_size_binary_type = (\n             <const CFixedSizeBinaryType*> type.get())\n \n+    def __getstate__(self):\n+        return self.byte_width\n+\n+    def __setstate__(self, state):\n+        cdef DataType reconstituted = binary(state)\n+        self.init(reconstituted.sp_type)\n+\n     property byte_width:\n \n         def __get__(self):\n@@ -208,6 +253,13 @@ cdef class DecimalType(FixedSizeBinaryType):\n         DataType.init(self, type)\n         self.decimal_type = <const CDecimalType*> type.get()\n \n+    def __getstate__(self):\n+        return (self.precision, self.scale)\n+\n+    def __setstate__(self, state):\n+        cdef DataType reconstituted = decimal(*state)\n+        self.init(reconstituted.sp_type)\n+\n     property precision:\n \n         def __get__(self):\n@@ -242,6 +294,24 @@ cdef class Field:\n         \"\"\"\n         return self.field.Equals(deref(other.field))\n \n+    def __richcmp__(Field self, Field other, int op):\n+        if op == cp.Py_EQ:\n+            return self.equals(other)\n+        elif op == cp.Py_NE:\n+            return not self.equals(other)\n+        else:\n+            raise TypeError('Invalid comparison')\n+\n+    def __reduce__(self):\n+        return Field, (), self.__getstate__()\n+\n+    def __getstate__(self):\n+        return (self.name, self.type, self.metadata)\n+\n+    def __setstate__(self, state):\n+        cdef Field reconstituted = field(state[0], state[1], metadata=state[2])\n+        self.init(reconstituted.sp_field)\n+\n     def __str__(self):\n         self._check_null()\n         return 'pyarrow.Field<{0}>'.format(frombytes(self.field.ToString()))\n@@ -354,6 +424,16 @@ cdef class Schema:\n         self.schema = schema.get()\n         self.sp_schema = schema\n \n+    def __reduce__(self):\n+        return Schema, (), self.__getstate__()\n+\n+    def __getstate__(self):\n+        return ([self[i] for i in range(len(self))], self.metadata)\n+\n+    def __setstate__(self, state):\n+        cdef Schema reconstituted = schema(state[0], metadata=state[1])\n+        self.init_schema(reconstituted.sp_schema)\n+\n     property names:\n \n         def __get__(self):\n@@ -372,6 +452,14 @@ cdef class Schema:\n                 self.schema.metadata())\n             return box_metadata(metadata.get())\n \n+    def __richcmp__(self, other, int op):\n+        if op == cp.Py_EQ:\n+            return self.equals(other)\n+        elif op == cp.Py_NE:\n+            return not self.equals(other)\n+        else:\n+            raise TypeError('Invalid comparison')\n+\n     def equals(self, other):\n         \"\"\"\n         Test if this schema is equal to the other\n@@ -518,7 +606,7 @@ cdef int convert_metadata(dict metadata,\n     return 0\n \n \n-def field(name, DataType type, bint nullable=True, dict metadata=None):\n+def field(name, type, bint nullable=True, dict metadata=None):\n     \"\"\"\n     Create a pyarrow.Field instance\n \n@@ -537,17 +625,29 @@ def field(name, DataType type, bint nullable=True, dict metadata=None):\n     cdef:\n         shared_ptr[CKeyValueMetadata] c_meta\n         Field result = Field()\n+        DataType _type\n \n     if metadata is not None:\n         convert_metadata(metadata, &c_meta)\n \n-    result.sp_field.reset(new CField(tobytes(name), type.sp_type,\n+    _type = _as_type(type)\n+\n+    result.sp_field.reset(new CField(tobytes(name), _type.sp_type,\n                                      nullable == 1, c_meta))\n     result.field = result.sp_field.get()\n-    result.type = type\n+    result.type = _type\n     return result\n \n \n+cdef _as_type(type):\n+    if isinstance(type, DataType):\n+        return type\n+    if not isinstance(type, six.string_types):\n+        raise TypeError(type)\n+    return type_for_alias(type)\n+\n+\n+\n cdef set PRIMITIVE_TYPES = set([\n     _Type_NA, _Type_BOOL,\n     _Type_UINT8, _Type_INT8,\n@@ -970,6 +1070,8 @@ cdef dict _type_aliases = {\n     'binary': binary,\n     'date32': date32,\n     'date64': date64,\n+    'date32[day]': date32,\n+    'date64[ms]': date64,\n     'time32[s]': time32('s'),\n     'time32[ms]': time32('ms'),\n     'time64[us]': time64('us'),\n@@ -1000,19 +1102,23 @@ def type_for_alias(name):\n     return alias()\n \n \n-def schema(fields):\n+def schema(fields, dict metadata=None):\n     \"\"\"\n     Construct pyarrow.Schema from collection of fields\n \n     Parameters\n     ----------\n     field : list or iterable\n+    metadata : dict, default None\n+        Keys and values must be coercible to bytes\n \n     Returns\n     -------\n     schema : pyarrow.Schema\n     \"\"\"\n     cdef:\n+        shared_ptr[CKeyValueMetadata] c_meta\n+        shared_ptr[CSchema] c_schema\n         Schema result\n         Field field\n         vector[shared_ptr[CField]] c_fields\n@@ -1020,8 +1126,12 @@ def schema(fields):\n     for i, field in enumerate(fields):\n         c_fields.push_back(field.sp_field)\n \n+    if metadata is not None:\n+        convert_metadata(metadata, &c_meta)\n+\n+    c_schema.reset(new CSchema(c_fields, c_meta))\n     result = Schema()\n-    result.init(c_fields)\n+    result.init_schema(c_schema)\n     return result\n \n \n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-10-23T22:18:54.757+0000",
                    "updated": "2017-10-23T22:18:54.757+0000"
                }
            ],
            "maxResults": 7,
            "total": 7,
            "startAt": 0
        },
        "customfield_12311820": "0|i3ky13:",
        "customfield_12314139": null
    }
}