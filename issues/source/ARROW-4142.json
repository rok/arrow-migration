{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13207191",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13207191",
    "key": "ARROW-4142",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343937",
                "id": "12343937",
                "description": "",
                "name": "0.13.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-04-01"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
            "name": "Minor",
            "id": "4"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=rpimike1022",
            "name": "rpimike1022",
            "key": "rpimike1022",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=rpimike1022&avatarId=37358",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rpimike1022&avatarId=37358",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rpimike1022&avatarId=37358",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rpimike1022&avatarId=37358"
            },
            "displayName": "Michael Pigott",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328933",
                "id": "12328933",
                "name": "Java"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=rpimike1022",
            "name": "rpimike1022",
            "key": "rpimike1022",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=rpimike1022&avatarId=37358",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rpimike1022&avatarId=37358",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rpimike1022&avatarId=37358",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rpimike1022&avatarId=37358"
            },
            "displayName": "Michael Pigott",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=rpimike1022",
            "name": "rpimike1022",
            "key": "rpimike1022",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=rpimike1022&avatarId=37358",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rpimike1022&avatarId=37358",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rpimike1022&avatarId=37358",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rpimike1022&avatarId=37358"
            },
            "displayName": "Michael Pigott",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 62400,
            "total": 62400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 62400,
            "total": 62400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-4142/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 124,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13207191/worklog/179994",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mikepigott commented on pull request #3294: ARROW-4142 [Java] JDBC Array -> Arrow ListVector\nURL: https://github.com/apache/arrow/pull/3294\n \n \n   https://issues.apache.org/jira/browse/ARROW-4142\r\n   \r\n   This adds support for reading JDBC arrays and converting them to Arrow ListVectors.  JDBC does not provide a great way to get the array type; there is a ResultSet object for walking the array, but its ResultSetMetaData may not contain the right value type (H2, for example, returns a JDBC type of NULL).\r\n   \r\n   This is based on #3134, which includes ARROW-3965 and ARROW-3966.\r\n   \r\n   I found Arrow arrays to be very confusing, and I am not sure if I am using them correctly here.\u00a0 One thing I noticed was if I added a null\u00a0array to a ListVector of VarCharVectors, the next value in the VarCharVector would be empty.\u00a0 I would appreciate any help on why!\u00a0 The ListVector unit tests weren't very helpful.\r\n   \r\n   For all other cases, this code seems to work.\u00a0 I look forward to your review!\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-01T23:27:47.379+0000",
                    "updated": "2019-01-01T23:27:47.379+0000",
                    "started": "2019-01-01T23:27:47.378+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "179994",
                    "issueId": "13207191"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13207191/worklog/179996",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #3294: ARROW-4142 [Java] JDBC Array -> Arrow ListVector\nURL: https://github.com/apache/arrow/pull/3294#issuecomment-450766967\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/3294?src=pr&el=h1) Report\n   > Merging [#3294](https://codecov.io/gh/apache/arrow/pull/3294?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/9376d85c409f4b9b272297b3acb6a0f70dcedc32?src=pr&el=desc) will **increase** coverage by `1.21%`.\n   > The diff coverage is `n/a`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/3294/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/3294?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #3294      +/-   ##\n   ==========================================\n   + Coverage    88.5%   89.72%   +1.21%     \n   ==========================================\n     Files         539      481      -58     \n     Lines       72968    68956    -4012     \n   ==========================================\n   - Hits        64583    61872    -2711     \n   + Misses       8278     7084    -1194     \n   + Partials      107        0     -107\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/3294?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [go/arrow/array/table.go](https://codecov.io/gh/apache/arrow/pull/3294/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvdGFibGUuZ28=) | | |\n   | [go/arrow/math/uint64\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/3294/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC91aW50NjRfYW1kNjQuZ28=) | | |\n   | [go/arrow/internal/testing/tools/bool.go](https://codecov.io/gh/apache/arrow/pull/3294/diff?src=pr&el=tree#diff-Z28vYXJyb3cvaW50ZXJuYWwvdGVzdGluZy90b29scy9ib29sLmdv) | | |\n   | [go/arrow/internal/bitutil/bitutil.go](https://codecov.io/gh/apache/arrow/pull/3294/diff?src=pr&el=tree#diff-Z28vYXJyb3cvaW50ZXJuYWwvYml0dXRpbC9iaXR1dGlsLmdv) | | |\n   | [go/arrow/memory/memory\\_avx2\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/3294/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWVtb3J5L21lbW9yeV9hdngyX2FtZDY0Lmdv) | | |\n   | [go/arrow/array/null.go](https://codecov.io/gh/apache/arrow/pull/3294/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvbnVsbC5nbw==) | | |\n   | [go/arrow/datatype\\_nested.go](https://codecov.io/gh/apache/arrow/pull/3294/diff?src=pr&el=tree#diff-Z28vYXJyb3cvZGF0YXR5cGVfbmVzdGVkLmdv) | | |\n   | [go/arrow/array/string.go](https://codecov.io/gh/apache/arrow/pull/3294/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvc3RyaW5nLmdv) | | |\n   | [go/arrow/math/uint64\\_avx2\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/3294/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC91aW50NjRfYXZ4Ml9hbWQ2NC5nbw==) | | |\n   | [go/arrow/array/builder.go](https://codecov.io/gh/apache/arrow/pull/3294/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvYnVpbGRlci5nbw==) | | |\n   | ... and [49 more](https://codecov.io/gh/apache/arrow/pull/3294/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/3294?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/3294?src=pr&el=footer). Last update [9376d85...c8695cd](https://codecov.io/gh/apache/arrow/pull/3294?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-02T00:03:08.117+0000",
                    "updated": "2019-01-02T00:03:08.117+0000",
                    "started": "2019-01-02T00:03:08.117+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "179996",
                    "issueId": "13207191"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13207191/worklog/193630",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3294: ARROW-4142 [Java] JDBC Array -> Arrow ListVector\nURL: https://github.com/apache/arrow/pull/3294#discussion_r253256299\n \n \n\n ##########\n File path: java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/JdbcFieldInfo.java\n ##########\n @@ -0,0 +1,106 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.adapter.jdbc;\n+\n+import java.sql.ResultSetMetaData;\n+import java.sql.SQLException;\n+\n+import com.google.common.base.Preconditions;\n+\n+/**\n+ * This class represents the information about a JDBC ResultSet Field that is\n+ * needed to construct an {@link org.apache.arrow.vector.types.pojo.ArrowType}.\n+ * Currently, this is:\n+ * <ul>\n+ *   <li>The JDBC {@link java.sql.Types} type.</li>\n+ *   <li>The field's precision (used for {@link java.sql.Types#DECIMAL} and {@link java.sql.Types#NUMERIC} types)</li>\n+ *   <li>The field's scale (used for {@link java.sql.Types#DECIMAL} and {@link java.sql.Types#NUMERIC} types)</li>\n+ * </ul>\n+ */\n+public class JdbcFieldInfo {\n+  private final int jdbcType;\n+  private final int precision;\n+  private final int scale;\n+\n+  /**\n+   * Builds a <code>JdbcFieldInfo</code> using only the {@link java.sql.Types} type.  Do not use this constructor\n+   * if the field type is {@link java.sql.Types#DECIMAL} or {@link java.sql.Types#NUMERIC}; the precision and\n+   * scale will be set to <code>0</code>.\n+   *\n+   * @param jdbcType The {@link java.sql.Types} type.\n+   */\n+  public JdbcFieldInfo(int jdbcType) {\n+    this.jdbcType = jdbcType;\n+    this.precision = 0;\n+    this.scale = 0;\n+  }\n+\n+  /**\n+   * Builds a <code>JdbcFieldInfo</code> from the {@link java.sql.Types} type, precision, and scale.\n+   * Use this constructor for {@link java.sql.Types#DECIMAL} and {@link java.sql.Types#NUMERIC} types.\n \n Review comment:\n   maybe warn if this is used with other types?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-02T07:22:14.588+0000",
                    "updated": "2019-02-02T07:22:14.588+0000",
                    "started": "2019-02-02T07:22:14.587+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "193630",
                    "issueId": "13207191"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13207191/worklog/193631",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3294: ARROW-4142 [Java] JDBC Array -> Arrow ListVector\nURL: https://github.com/apache/arrow/pull/3294#discussion_r253256285\n \n \n\n ##########\n File path: java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/JdbcFieldInfo.java\n ##########\n @@ -0,0 +1,106 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.adapter.jdbc;\n+\n+import java.sql.ResultSetMetaData;\n+import java.sql.SQLException;\n+\n+import com.google.common.base.Preconditions;\n+\n+/**\n+ * This class represents the information about a JDBC ResultSet Field that is\n+ * needed to construct an {@link org.apache.arrow.vector.types.pojo.ArrowType}.\n+ * Currently, this is:\n+ * <ul>\n+ *   <li>The JDBC {@link java.sql.Types} type.</li>\n+ *   <li>The field's precision (used for {@link java.sql.Types#DECIMAL} and {@link java.sql.Types#NUMERIC} types)</li>\n+ *   <li>The field's scale (used for {@link java.sql.Types#DECIMAL} and {@link java.sql.Types#NUMERIC} types)</li>\n+ * </ul>\n+ */\n+public class JdbcFieldInfo {\n+  private final int jdbcType;\n+  private final int precision;\n+  private final int scale;\n+\n+  /**\n+   * Builds a <code>JdbcFieldInfo</code> using only the {@link java.sql.Types} type.  Do not use this constructor\n+   * if the field type is {@link java.sql.Types#DECIMAL} or {@link java.sql.Types#NUMERIC}; the precision and\n \n Review comment:\n   maybe put a check for this in the constructor for this condition, in case someone doesn't read the javadoc?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-02T07:22:14.635+0000",
                    "updated": "2019-02-02T07:22:14.635+0000",
                    "started": "2019-02-02T07:22:14.633+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "193631",
                    "issueId": "13207191"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13207191/worklog/193632",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3294: ARROW-4142 [Java] JDBC Array -> Arrow ListVector\nURL: https://github.com/apache/arrow/pull/3294#discussion_r253256577\n \n \n\n ##########\n File path: java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/JdbcToArrowConfig.java\n ##########\n @@ -0,0 +1,215 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.adapter.jdbc;\n+\n+import java.util.Calendar;\n+import java.util.Map;\n+\n+import org.apache.arrow.memory.BaseAllocator;\n+\n+import com.google.common.base.Preconditions;\n+\n+/**\n+ * This class configures the JDBC-to-Arrow conversion process.\n+ * <p>\n+ * The allocator is used to construct the {@link org.apache.arrow.vector.VectorSchemaRoot},\n+ * and the calendar is used to define the time zone of any {@link org.apahe.arrow.vector.pojo.ArrowType.Timestamp}\n+ * fields that are created during the conversion.  Neither field may be <code>null</code>.\n+ * </p>\n+ * <p>\n+ * If the <code>includeMetadata</code> flag is set, the Arrow field metadata will contain information\n+ * from the corresponding {@link java.sql.ResultSetMetaData} that was used to create the\n+ * {@link org.apache.arrow.vector.types.pojo.FieldType} of the corresponding\n+ * {@link org.apache.arrow.vector.FieldVector}.\n+ * </p>\n+ * <p>\n+ * If there are any {@link java.sql.Types#ARRAY} fields in the {@link java.sql.ResultSet}, the corresponding\n+ * {@link JdbcFieldInfo} for the array's contents must be defined here.  Unfortunately, the sub-type\n+ * information cannot be retrieved from all JDBC implementations (H2 for example, returns\n+ * {@link java.sql.Types#NULL} for the array sub-type), so it must be configured here.  The column index\n+ * or name can be used to map to a {@link JdbcFieldInfo}, and that will be used for the conversion.\n+ * </p>\n+ */\n+public final class JdbcToArrowConfig {\n+\n+  private Calendar calendar;\n+  private BaseAllocator allocator;\n+  private boolean includeMetadata;\n+  private Map<Integer, JdbcFieldInfo> arraySubTypesByColumnIndex;\n+  private Map<String, JdbcFieldInfo> arraySubTypesByColumnName;\n+\n+  /**\n+   * Constructs a new configuration from the provided allocator and calendar.  The <code>allocator</code>\n+   * is used when constructing the Arrow vectors from the ResultSet, and the calendar is used to define\n+   * Arrow Timestamp fields, and to read time-based fields from the JDBC <code>ResultSet</code>. \n+   *\n+   * @param allocator The memory allocator to construct the Arrow vectors with.\n+   * @param calendar The calendar to use when constructing Timestamp fields and reading time-based results.\n+   */\n+  public JdbcToArrowConfig(BaseAllocator allocator, Calendar calendar) {\n+    Preconditions.checkNotNull(allocator, \"Memory allocator cannot be null\");\n \n Review comment:\n   This looks to be the style in the code base, but this in theory could be inlined below like:\r\n   ```\r\n   this.allocator = Preconditions.checkNotNul(...)\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-02T07:22:14.732+0000",
                    "updated": "2019-02-02T07:22:14.732+0000",
                    "started": "2019-02-02T07:22:14.731+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "193632",
                    "issueId": "13207191"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13207191/worklog/193633",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3294: ARROW-4142 [Java] JDBC Array -> Arrow ListVector\nURL: https://github.com/apache/arrow/pull/3294#discussion_r253256542\n \n \n\n ##########\n File path: java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/JdbcToArrow.java\n ##########\n @@ -177,15 +201,35 @@ public static VectorSchemaRoot sqlToArrow(ResultSet resultSet, Calendar calendar\n    * @return Arrow Data Objects {@link VectorSchemaRoot}\n    * @throws SQLException on error\n    */\n-  public static VectorSchemaRoot sqlToArrow(ResultSet resultSet, BaseAllocator allocator, Calendar calendar)\n+  public static VectorSchemaRoot sqlToArrow(\n+          ResultSet resultSet,\n+          BaseAllocator allocator,\n+          Calendar calendar)\n       throws SQLException, IOException {\n     Preconditions.checkNotNull(resultSet, \"JDBC ResultSet object can not be null\");\n     Preconditions.checkNotNull(allocator, \"Memory Allocator object can not be null\");\n     Preconditions.checkNotNull(calendar, \"Calendar object can not be null\");\n \n+    return sqlToArrow(resultSet, new JdbcToArrowConfig(allocator, calendar));\n+  }\n+\n+  /**\n+   * For the given JDBC {@link ResultSet}, fetch the data from Relational DB and convert it to Arrow objects.\n+   *\n+   * @param resultSet ResultSet to use to fetch the data from underlying database\n+   * @param config    Configuration of the conversion from JDBC to Arrow.\n+   * @return Arrow Data Objects {@link VectorSchemaRoot}\n+   * @throws SQLException on error\n+   */\n+  public static VectorSchemaRoot sqlToArrow(ResultSet resultSet, JdbcToArrowConfig config)\n+      throws SQLException, IOException {\n+    Preconditions.checkNotNull(resultSet, \"JDBC ResultSet object can not be null\");\n \n Review comment:\n   I'm new to the java code base, but given all the nullness checks it might be nice to follow a convention things are not null by default and use \"@nullable\" annotations when they can be null (might be worth discussing on the mailing list)\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-02T07:22:14.751+0000",
                    "updated": "2019-02-02T07:22:14.751+0000",
                    "started": "2019-02-02T07:22:14.750+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "193633",
                    "issueId": "13207191"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13207191/worklog/193634",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3294: ARROW-4142 [Java] JDBC Array -> Arrow ListVector\nURL: https://github.com/apache/arrow/pull/3294#discussion_r253256474\n \n \n\n ##########\n File path: java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/JdbcToArrow.java\n ##########\n @@ -110,13 +112,36 @@ public static VectorSchemaRoot sqlToArrow(\n       String query,\n       BaseAllocator allocator,\n       Calendar calendar) throws SQLException, IOException {\n+\n     Preconditions.checkNotNull(connection, \"JDBC connection object can not be null\");\n     Preconditions.checkArgument(query != null && query.length() > 0, \"SQL query can not be null or empty\");\n     Preconditions.checkNotNull(allocator, \"Memory allocator object can not be null\");\n     Preconditions.checkNotNull(calendar, \"Calendar object can not be null\");\n \n+    return sqlToArrow(connection, query, new JdbcToArrowConfig(allocator, calendar));\n+  }\n+\n+  /**\n+   * For the given SQL query, execute and fetch the data from Relational DB and convert it to Arrow objects.\n+   *\n+   * @param connection Database connection to be used. This method will not close the passed connection object.\n+   *                   Since the caller has passed the connection object it's the responsibility of the caller\n+   *                   to close or return the connection to the pool.\n+   * @param query      The DB Query to fetch the data.\n+   * @param config     Configuration\n+   * @return Arrow Data Objects {@link VectorSchemaRoot}\n+   * @throws SQLException Propagate any SQL Exceptions to the caller after closing any resources opened such as\n+   *                      ResultSet and Statement objects.\n+   */\n+  public static VectorSchemaRoot sqlToArrow(Connection connection, String query, JdbcToArrowConfig config)\n+      throws SQLException, IOException {\n+    Preconditions.checkNotNull(connection, \"JDBC connection object can not be null\");\n+    Preconditions.checkArgument(query != null && query.length() > 0, \"SQL query can not be null or empty\");\n+    Preconditions.checkNotNull(config, \"The configuration cannot be null\");\n \n Review comment:\n   style consistency.  it looks like you combined null and a validity check but here you split them for config\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-02T07:22:14.755+0000",
                    "updated": "2019-02-02T07:22:14.755+0000",
                    "started": "2019-02-02T07:22:14.755+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "193634",
                    "issueId": "13207191"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13207191/worklog/193635",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3294: ARROW-4142 [Java] JDBC Array -> Arrow ListVector\nURL: https://github.com/apache/arrow/pull/3294#discussion_r253256726\n \n \n\n ##########\n File path: java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/JdbcToArrowConfig.java\n ##########\n @@ -0,0 +1,215 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.adapter.jdbc;\n+\n+import java.util.Calendar;\n+import java.util.Map;\n+\n+import org.apache.arrow.memory.BaseAllocator;\n+\n+import com.google.common.base.Preconditions;\n+\n+/**\n+ * This class configures the JDBC-to-Arrow conversion process.\n+ * <p>\n+ * The allocator is used to construct the {@link org.apache.arrow.vector.VectorSchemaRoot},\n+ * and the calendar is used to define the time zone of any {@link org.apahe.arrow.vector.pojo.ArrowType.Timestamp}\n+ * fields that are created during the conversion.  Neither field may be <code>null</code>.\n+ * </p>\n+ * <p>\n+ * If the <code>includeMetadata</code> flag is set, the Arrow field metadata will contain information\n+ * from the corresponding {@link java.sql.ResultSetMetaData} that was used to create the\n+ * {@link org.apache.arrow.vector.types.pojo.FieldType} of the corresponding\n+ * {@link org.apache.arrow.vector.FieldVector}.\n+ * </p>\n+ * <p>\n+ * If there are any {@link java.sql.Types#ARRAY} fields in the {@link java.sql.ResultSet}, the corresponding\n+ * {@link JdbcFieldInfo} for the array's contents must be defined here.  Unfortunately, the sub-type\n+ * information cannot be retrieved from all JDBC implementations (H2 for example, returns\n+ * {@link java.sql.Types#NULL} for the array sub-type), so it must be configured here.  The column index\n+ * or name can be used to map to a {@link JdbcFieldInfo}, and that will be used for the conversion.\n+ * </p>\n+ */\n+public final class JdbcToArrowConfig {\n+\n+  private Calendar calendar;\n+  private BaseAllocator allocator;\n+  private boolean includeMetadata;\n+  private Map<Integer, JdbcFieldInfo> arraySubTypesByColumnIndex;\n+  private Map<String, JdbcFieldInfo> arraySubTypesByColumnName;\n+\n+  /**\n+   * Constructs a new configuration from the provided allocator and calendar.  The <code>allocator</code>\n+   * is used when constructing the Arrow vectors from the ResultSet, and the calendar is used to define\n+   * Arrow Timestamp fields, and to read time-based fields from the JDBC <code>ResultSet</code>. \n+   *\n+   * @param allocator The memory allocator to construct the Arrow vectors with.\n+   * @param calendar The calendar to use when constructing Timestamp fields and reading time-based results.\n+   */\n+  public JdbcToArrowConfig(BaseAllocator allocator, Calendar calendar) {\n+    Preconditions.checkNotNull(allocator, \"Memory allocator cannot be null\");\n+    Preconditions.checkNotNull(calendar, \"Calendar object can not be null\");\n+\n+    this.allocator = allocator;\n+    this.calendar = calendar;\n+    this.includeMetadata = false;\n+    this.arraySubTypesByColumnIndex = null;\n+    this.arraySubTypesByColumnName = null;\n+  }\n+\n+  /**\n+   * Constructs a new configuration from the provided allocator and calendar.  The <code>allocator</code>\n+   * is used when constructing the Arrow vectors from the ResultSet, and the calendar is used to define\n+   * Arrow Timestamp fields, and to read time-based fields from the JDBC <code>ResultSet</code>. \n+   *\n+   * @param allocator       The memory allocator to construct the Arrow vectors with.\n+   * @param calendar        The calendar to use when constructing Timestamp fields and reading time-based results.\n+   * @param includeMetadata Whether to include JDBC field metadata in the Arrow Schema Field metadata.\n+   */\n+  public JdbcToArrowConfig(BaseAllocator allocator, Calendar calendar, boolean includeMetadata) {\n+    this(allocator, calendar);\n+    this.includeMetadata = includeMetadata;\n+  }\n+\n+  /**\n+   * The calendar to use when defining Arrow Timestamp fields\n+   * and retrieving time-based fields from the database.\n+   * @return the calendar.\n+   */\n+  public Calendar getCalendar() {\n+    return calendar;\n+  }\n+\n+  /**\n+   * Sets the {@link Calendar} to use when constructing timestamp fields in the\n+   * Arrow schema, and reading time-based fields from the JDBC <code>ResultSet</code>.\n+   *\n+   * @param calendar the calendar to set.\n+   * @return This instance of the <code>JdbcToArrowConfig</code>, for chaining.\n+   * @exception NullPointerExeption if <code>calendar</code> is <code>null</code>.\n+   */\n+  public JdbcToArrowConfig setCalendar(Calendar calendar) {\n+    Preconditions.checkNotNull(calendar, \"Calendar object can not be null\");\n+    this.calendar = calendar;\n+    return this;\n+  }\n+\n+  /**\n+   * The Arrow memory allocator.\n+   * @return the allocator.\n+   */\n+  public BaseAllocator getAllocator() {\n+    return allocator;\n+  }\n+\n+  /**\n+   * Sets the memory allocator to use when construting the Arrow vectors from the ResultSet.\n+   *\n+   * @param allocator the allocator to set.\n+   * @return This instance of the <code>JdbcToArrowConfig</code>, for chaining.\n+   * @exception NullPointerException if <code>allocator</code> is null.\n+   */\n+  public JdbcToArrowConfig setAllocator(BaseAllocator allocator) {\n+    Preconditions.checkNotNull(allocator, \"Memory allocator cannot be null\");\n+    this.allocator = allocator;\n+    return this;\n+  }\n+\n+  /**\n+   * Whether to include JDBC ResultSet field metadata in the Arrow Schema field metadata.\n+   *\n+   * @return <code>true</code> to include field metadata, <code>false</code> to exclude it.\n+   */\n+  public boolean getIncludeMetadata() {\n+    return includeMetadata;\n+  }\n+\n+  /**\n+   * Sets whether to include JDBC ResultSet field metadata in the Arrow Schema field metadata.\n+   *\n+   * @param includeMetadata Whether to include or exclude JDBC metadata in the Arrow Schema field metadata.\n+   * @return This instance of the <code>JdbcToArrowConfig</code>, for chaining.\n+   */\n+  public JdbcToArrowConfig setIncludeMetadata(boolean includeMetadata) {\n+    this.includeMetadata = includeMetadata;\n+    return this;\n+  }\n+\n+  /**\n+   * Returns the array sub-type {@link JdbcFieldInfo} defined for the provided column index.\n+   *\n+   * @param index The {@link java.sql.ResultSetMetaData} column index of an {@link java.sql.Types#ARRAY} type.\n+   * @return The {@link JdbcFieldInfo} for that array's sub-type, or <code>null</code> if not defined.\n+   */\n+  public JdbcFieldInfo getArraySubTypeByColumnIndex(int index) {\n+    if (arraySubTypesByColumnIndex == null) {\n+      return null;\n+    } else {\n+      return arraySubTypesByColumnIndex.get(index);\n+    }\n+  }\n+\n+  /**\n+   * Sets the mapping of column-index-to-{@link JdbcFieldInfo} used for columns of type {@link java.sql.Types#ARRAY}.\n+   *\n+   * @param map The mapping.\n+   * @return This instance of the <code>JdbcToArrowConfig</code>, for chaining.\n+   */\n+  public JdbcToArrowConfig setArraySubTypeByColumnIndexMap(Map<Integer, JdbcFieldInfo> map) {\n+    this.arraySubTypesByColumnIndex = map;\n+    return this;\n+  }\n+\n+  /**\n+   * Returns the array sub-type {@link JdbcFieldInfo} defined for the provided column name.\n+   *\n+   * @param index The {@link java.sql.ResultSetMetaData} column name of an {@link java.sql.Types#ARRAY} type.\n+   * @return The {@link JdbcFieldInfo} for that array's sub-type, or <code>null</code> if not defined.\n+   */\n+  public JdbcFieldInfo getArraySubTypeByColumnName(String name) {\n+    if (arraySubTypesByColumnName == null) {\n \n Review comment:\n   maybe just construct the maps to be empty instead of having a separate check?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-02T07:22:14.844+0000",
                    "updated": "2019-02-02T07:22:14.844+0000",
                    "started": "2019-02-02T07:22:14.844+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "193635",
                    "issueId": "13207191"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13207191/worklog/193636",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3294: ARROW-4142 [Java] JDBC Array -> Arrow ListVector\nURL: https://github.com/apache/arrow/pull/3294#discussion_r253256707\n \n \n\n ##########\n File path: java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/JdbcToArrowConfig.java\n ##########\n @@ -0,0 +1,215 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.adapter.jdbc;\n+\n+import java.util.Calendar;\n+import java.util.Map;\n+\n+import org.apache.arrow.memory.BaseAllocator;\n+\n+import com.google.common.base.Preconditions;\n+\n+/**\n+ * This class configures the JDBC-to-Arrow conversion process.\n+ * <p>\n+ * The allocator is used to construct the {@link org.apache.arrow.vector.VectorSchemaRoot},\n+ * and the calendar is used to define the time zone of any {@link org.apahe.arrow.vector.pojo.ArrowType.Timestamp}\n+ * fields that are created during the conversion.  Neither field may be <code>null</code>.\n+ * </p>\n+ * <p>\n+ * If the <code>includeMetadata</code> flag is set, the Arrow field metadata will contain information\n+ * from the corresponding {@link java.sql.ResultSetMetaData} that was used to create the\n+ * {@link org.apache.arrow.vector.types.pojo.FieldType} of the corresponding\n+ * {@link org.apache.arrow.vector.FieldVector}.\n+ * </p>\n+ * <p>\n+ * If there are any {@link java.sql.Types#ARRAY} fields in the {@link java.sql.ResultSet}, the corresponding\n+ * {@link JdbcFieldInfo} for the array's contents must be defined here.  Unfortunately, the sub-type\n+ * information cannot be retrieved from all JDBC implementations (H2 for example, returns\n+ * {@link java.sql.Types#NULL} for the array sub-type), so it must be configured here.  The column index\n+ * or name can be used to map to a {@link JdbcFieldInfo}, and that will be used for the conversion.\n+ * </p>\n+ */\n+public final class JdbcToArrowConfig {\n+\n+  private Calendar calendar;\n+  private BaseAllocator allocator;\n+  private boolean includeMetadata;\n+  private Map<Integer, JdbcFieldInfo> arraySubTypesByColumnIndex;\n+  private Map<String, JdbcFieldInfo> arraySubTypesByColumnName;\n+\n+  /**\n+   * Constructs a new configuration from the provided allocator and calendar.  The <code>allocator</code>\n+   * is used when constructing the Arrow vectors from the ResultSet, and the calendar is used to define\n+   * Arrow Timestamp fields, and to read time-based fields from the JDBC <code>ResultSet</code>. \n+   *\n+   * @param allocator The memory allocator to construct the Arrow vectors with.\n+   * @param calendar The calendar to use when constructing Timestamp fields and reading time-based results.\n+   */\n+  public JdbcToArrowConfig(BaseAllocator allocator, Calendar calendar) {\n+    Preconditions.checkNotNull(allocator, \"Memory allocator cannot be null\");\n+    Preconditions.checkNotNull(calendar, \"Calendar object can not be null\");\n+\n+    this.allocator = allocator;\n+    this.calendar = calendar;\n+    this.includeMetadata = false;\n+    this.arraySubTypesByColumnIndex = null;\n+    this.arraySubTypesByColumnName = null;\n+  }\n+\n+  /**\n+   * Constructs a new configuration from the provided allocator and calendar.  The <code>allocator</code>\n+   * is used when constructing the Arrow vectors from the ResultSet, and the calendar is used to define\n+   * Arrow Timestamp fields, and to read time-based fields from the JDBC <code>ResultSet</code>. \n+   *\n+   * @param allocator       The memory allocator to construct the Arrow vectors with.\n+   * @param calendar        The calendar to use when constructing Timestamp fields and reading time-based results.\n+   * @param includeMetadata Whether to include JDBC field metadata in the Arrow Schema Field metadata.\n+   */\n+  public JdbcToArrowConfig(BaseAllocator allocator, Calendar calendar, boolean includeMetadata) {\n+    this(allocator, calendar);\n+    this.includeMetadata = includeMetadata;\n+  }\n+\n+  /**\n+   * The calendar to use when defining Arrow Timestamp fields\n+   * and retrieving time-based fields from the database.\n+   * @return the calendar.\n+   */\n+  public Calendar getCalendar() {\n+    return calendar;\n+  }\n+\n+  /**\n+   * Sets the {@link Calendar} to use when constructing timestamp fields in the\n+   * Arrow schema, and reading time-based fields from the JDBC <code>ResultSet</code>.\n+   *\n+   * @param calendar the calendar to set.\n+   * @return This instance of the <code>JdbcToArrowConfig</code>, for chaining.\n+   * @exception NullPointerExeption if <code>calendar</code> is <code>null</code>.\n+   */\n+  public JdbcToArrowConfig setCalendar(Calendar calendar) {\n \n Review comment:\n   is there a reason to make this mutable, instead of relying on the constructed value or returning a copy?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-02T07:22:14.864+0000",
                    "updated": "2019-02-02T07:22:14.864+0000",
                    "started": "2019-02-02T07:22:14.863+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "193636",
                    "issueId": "13207191"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13207191/worklog/193637",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3294: ARROW-4142 [Java] JDBC Array -> Arrow ListVector\nURL: https://github.com/apache/arrow/pull/3294#discussion_r253256358\n \n \n\n ##########\n File path: java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/JdbcFieldInfo.java\n ##########\n @@ -0,0 +1,106 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.adapter.jdbc;\n+\n+import java.sql.ResultSetMetaData;\n+import java.sql.SQLException;\n+\n+import com.google.common.base.Preconditions;\n+\n+/**\n+ * This class represents the information about a JDBC ResultSet Field that is\n+ * needed to construct an {@link org.apache.arrow.vector.types.pojo.ArrowType}.\n+ * Currently, this is:\n+ * <ul>\n+ *   <li>The JDBC {@link java.sql.Types} type.</li>\n+ *   <li>The field's precision (used for {@link java.sql.Types#DECIMAL} and {@link java.sql.Types#NUMERIC} types)</li>\n+ *   <li>The field's scale (used for {@link java.sql.Types#DECIMAL} and {@link java.sql.Types#NUMERIC} types)</li>\n+ * </ul>\n+ */\n+public class JdbcFieldInfo {\n+  private final int jdbcType;\n+  private final int precision;\n+  private final int scale;\n+\n+  /**\n+   * Builds a <code>JdbcFieldInfo</code> using only the {@link java.sql.Types} type.  Do not use this constructor\n+   * if the field type is {@link java.sql.Types#DECIMAL} or {@link java.sql.Types#NUMERIC}; the precision and\n+   * scale will be set to <code>0</code>.\n+   *\n+   * @param jdbcType The {@link java.sql.Types} type.\n+   */\n+  public JdbcFieldInfo(int jdbcType) {\n+    this.jdbcType = jdbcType;\n+    this.precision = 0;\n+    this.scale = 0;\n+  }\n+\n+  /**\n+   * Builds a <code>JdbcFieldInfo</code> from the {@link java.sql.Types} type, precision, and scale.\n+   * Use this constructor for {@link java.sql.Types#DECIMAL} and {@link java.sql.Types#NUMERIC} types.\n+   *\n+   * @param jdbcType The {@link java.sql.Types} type.\n+   * @param precision The field's numeric precision.\n+   * @param scale The field's numeric scale.\n+   */\n+  public JdbcFieldInfo(int jdbcType, int precision, int scale) {\n+    this.jdbcType = jdbcType;\n+    this.precision = precision;\n+    this.scale = scale;\n+  }\n+\n+  /**\n+   * Builds a <code>JdbcFieldInfo</code> from the corresponding {@link java.sql.ResultSetMetaData} column.\n+   *\n+   * @param rsmd The {@link java.sql.ResultSetMetaData} to get the field information from.\n+   * @param column The column to get the field information for (on a 1-based index).\n+   * @throws SQLException If the column information cannot be retrieved.\n+   * @throws NullPointerException if <code>rsmd</code> is <code>null</code>.\n+   * @throws IllegalArgumentException if <code>column</code> is out of bounds.\n+   */\n+  public JdbcFieldInfo(ResultSetMetaData rsmd, int column) throws SQLException {\n+    Preconditions.checkNotNull(rsmd, \"ResultSetMetaData cannot be null.\");\n+    Preconditions.checkArgument(column > 0, \"ResultSetMetaData columns have indices starting at 1.\");\n+    Preconditions.checkArgument(column <= rsmd.getColumnCount(), \"The index must be within the number of columns\");\n \n Review comment:\n   for these two (probably more for the second one, it might pay to use the templating feature of Preconditions.checkArgument to pass through the bad values\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-02T07:22:14.869+0000",
                    "updated": "2019-02-02T07:22:14.869+0000",
                    "started": "2019-02-02T07:22:14.868+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "193637",
                    "issueId": "13207191"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13207191/worklog/193638",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3294: ARROW-4142 [Java] JDBC Array -> Arrow ListVector\nURL: https://github.com/apache/arrow/pull/3294#discussion_r253256639\n \n \n\n ##########\n File path: java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/JdbcToArrowConfig.java\n ##########\n @@ -0,0 +1,215 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.adapter.jdbc;\n+\n+import java.util.Calendar;\n+import java.util.Map;\n+\n+import org.apache.arrow.memory.BaseAllocator;\n+\n+import com.google.common.base.Preconditions;\n+\n+/**\n+ * This class configures the JDBC-to-Arrow conversion process.\n+ * <p>\n+ * The allocator is used to construct the {@link org.apache.arrow.vector.VectorSchemaRoot},\n+ * and the calendar is used to define the time zone of any {@link org.apahe.arrow.vector.pojo.ArrowType.Timestamp}\n+ * fields that are created during the conversion.  Neither field may be <code>null</code>.\n+ * </p>\n+ * <p>\n+ * If the <code>includeMetadata</code> flag is set, the Arrow field metadata will contain information\n+ * from the corresponding {@link java.sql.ResultSetMetaData} that was used to create the\n+ * {@link org.apache.arrow.vector.types.pojo.FieldType} of the corresponding\n+ * {@link org.apache.arrow.vector.FieldVector}.\n+ * </p>\n+ * <p>\n+ * If there are any {@link java.sql.Types#ARRAY} fields in the {@link java.sql.ResultSet}, the corresponding\n+ * {@link JdbcFieldInfo} for the array's contents must be defined here.  Unfortunately, the sub-type\n+ * information cannot be retrieved from all JDBC implementations (H2 for example, returns\n+ * {@link java.sql.Types#NULL} for the array sub-type), so it must be configured here.  The column index\n+ * or name can be used to map to a {@link JdbcFieldInfo}, and that will be used for the conversion.\n+ * </p>\n+ */\n+public final class JdbcToArrowConfig {\n+\n+  private Calendar calendar;\n+  private BaseAllocator allocator;\n+  private boolean includeMetadata;\n+  private Map<Integer, JdbcFieldInfo> arraySubTypesByColumnIndex;\n+  private Map<String, JdbcFieldInfo> arraySubTypesByColumnName;\n+\n+  /**\n+   * Constructs a new configuration from the provided allocator and calendar.  The <code>allocator</code>\n+   * is used when constructing the Arrow vectors from the ResultSet, and the calendar is used to define\n+   * Arrow Timestamp fields, and to read time-based fields from the JDBC <code>ResultSet</code>. \n+   *\n+   * @param allocator The memory allocator to construct the Arrow vectors with.\n+   * @param calendar The calendar to use when constructing Timestamp fields and reading time-based results.\n+   */\n+  public JdbcToArrowConfig(BaseAllocator allocator, Calendar calendar) {\n+    Preconditions.checkNotNull(allocator, \"Memory allocator cannot be null\");\n+    Preconditions.checkNotNull(calendar, \"Calendar object can not be null\");\n+\n+    this.allocator = allocator;\n+    this.calendar = calendar;\n+    this.includeMetadata = false;\n+    this.arraySubTypesByColumnIndex = null;\n+    this.arraySubTypesByColumnName = null;\n+  }\n+\n+  /**\n+   * Constructs a new configuration from the provided allocator and calendar.  The <code>allocator</code>\n+   * is used when constructing the Arrow vectors from the ResultSet, and the calendar is used to define\n+   * Arrow Timestamp fields, and to read time-based fields from the JDBC <code>ResultSet</code>. \n+   *\n+   * @param allocator       The memory allocator to construct the Arrow vectors with.\n+   * @param calendar        The calendar to use when constructing Timestamp fields and reading time-based results.\n+   * @param includeMetadata Whether to include JDBC field metadata in the Arrow Schema Field metadata.\n+   */\n+  public JdbcToArrowConfig(BaseAllocator allocator, Calendar calendar, boolean includeMetadata) {\n+    this(allocator, calendar);\n+    this.includeMetadata = includeMetadata;\n+  }\n+\n+  /**\n+   * The calendar to use when defining Arrow Timestamp fields\n+   * and retrieving time-based fields from the database.\n+   * @return the calendar.\n+   */\n+  public Calendar getCalendar() {\n+    return calendar;\n+  }\n+\n+  /**\n+   * Sets the {@link Calendar} to use when constructing timestamp fields in the\n+   * Arrow schema, and reading time-based fields from the JDBC <code>ResultSet</code>.\n+   *\n+   * @param calendar the calendar to set.\n+   * @return This instance of the <code>JdbcToArrowConfig</code>, for chaining.\n+   * @exception NullPointerExeption if <code>calendar</code> is <code>null</code>.\n+   */\n+  public JdbcToArrowConfig setCalendar(Calendar calendar) {\n+    Preconditions.checkNotNull(calendar, \"Calendar object can not be null\");\n+    this.calendar = calendar;\n+    return this;\n+  }\n+\n+  /**\n+   * The Arrow memory allocator.\n+   * @return the allocator.\n+   */\n+  public BaseAllocator getAllocator() {\n+    return allocator;\n+  }\n+\n+  /**\n+   * Sets the memory allocator to use when construting the Arrow vectors from the ResultSet.\n+   *\n+   * @param allocator the allocator to set.\n+   * @return This instance of the <code>JdbcToArrowConfig</code>, for chaining.\n+   * @exception NullPointerException if <code>allocator</code> is null.\n+   */\n+  public JdbcToArrowConfig setAllocator(BaseAllocator allocator) {\n+    Preconditions.checkNotNull(allocator, \"Memory allocator cannot be null\");\n+    this.allocator = allocator;\n+    return this;\n+  }\n+\n+  /**\n+   * Whether to include JDBC ResultSet field metadata in the Arrow Schema field metadata.\n+   *\n+   * @return <code>true</code> to include field metadata, <code>false</code> to exclude it.\n+   */\n+  public boolean getIncludeMetadata() {\n+    return includeMetadata;\n+  }\n+\n+  /**\n+   * Sets whether to include JDBC ResultSet field metadata in the Arrow Schema field metadata.\n+   *\n+   * @param includeMetadata Whether to include or exclude JDBC metadata in the Arrow Schema field metadata.\n+   * @return This instance of the <code>JdbcToArrowConfig</code>, for chaining.\n+   */\n+  public JdbcToArrowConfig setIncludeMetadata(boolean includeMetadata) {\n+    this.includeMetadata = includeMetadata;\n+    return this;\n+  }\n+\n+  /**\n+   * Returns the array sub-type {@link JdbcFieldInfo} defined for the provided column index.\n+   *\n+   * @param index The {@link java.sql.ResultSetMetaData} column index of an {@link java.sql.Types#ARRAY} type.\n+   * @return The {@link JdbcFieldInfo} for that array's sub-type, or <code>null</code> if not defined.\n+   */\n+  public JdbcFieldInfo getArraySubTypeByColumnIndex(int index) {\n+    if (arraySubTypesByColumnIndex == null) {\n+      return null;\n+    } else {\n+      return arraySubTypesByColumnIndex.get(index);\n+    }\n+  }\n+\n+  /**\n+   * Sets the mapping of column-index-to-{@link JdbcFieldInfo} used for columns of type {@link java.sql.Types#ARRAY}.\n+   *\n+   * @param map The mapping.\n+   * @return This instance of the <code>JdbcToArrowConfig</code>, for chaining.\n+   */\n+  public JdbcToArrowConfig setArraySubTypeByColumnIndexMap(Map<Integer, JdbcFieldInfo> map) {\n+    this.arraySubTypesByColumnIndex = map;\n+    return this;\n+  }\n+\n+  /**\n+   * Returns the array sub-type {@link JdbcFieldInfo} defined for the provided column name.\n+   *\n+   * @param index The {@link java.sql.ResultSetMetaData} column name of an {@link java.sql.Types#ARRAY} type.\n+   * @return The {@link JdbcFieldInfo} for that array's sub-type, or <code>null</code> if not defined.\n+   */\n+  public JdbcFieldInfo getArraySubTypeByColumnName(String name) {\n \n Review comment:\n   going back to my previous comments about nulls, I wonder if Optional<JdbcFieldInfo> might make sense\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-02T07:22:14.885+0000",
                    "updated": "2019-02-02T07:22:14.885+0000",
                    "started": "2019-02-02T07:22:14.884+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "193638",
                    "issueId": "13207191"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13207191/worklog/193639",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3294: ARROW-4142 [Java] JDBC Array -> Arrow ListVector\nURL: https://github.com/apache/arrow/pull/3294#discussion_r253256605\n \n \n\n ##########\n File path: java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/JdbcToArrowConfig.java\n ##########\n @@ -0,0 +1,215 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.adapter.jdbc;\n+\n+import java.util.Calendar;\n+import java.util.Map;\n+\n+import org.apache.arrow.memory.BaseAllocator;\n+\n+import com.google.common.base.Preconditions;\n+\n+/**\n+ * This class configures the JDBC-to-Arrow conversion process.\n+ * <p>\n+ * The allocator is used to construct the {@link org.apache.arrow.vector.VectorSchemaRoot},\n+ * and the calendar is used to define the time zone of any {@link org.apahe.arrow.vector.pojo.ArrowType.Timestamp}\n+ * fields that are created during the conversion.  Neither field may be <code>null</code>.\n+ * </p>\n+ * <p>\n+ * If the <code>includeMetadata</code> flag is set, the Arrow field metadata will contain information\n+ * from the corresponding {@link java.sql.ResultSetMetaData} that was used to create the\n+ * {@link org.apache.arrow.vector.types.pojo.FieldType} of the corresponding\n+ * {@link org.apache.arrow.vector.FieldVector}.\n+ * </p>\n+ * <p>\n+ * If there are any {@link java.sql.Types#ARRAY} fields in the {@link java.sql.ResultSet}, the corresponding\n+ * {@link JdbcFieldInfo} for the array's contents must be defined here.  Unfortunately, the sub-type\n+ * information cannot be retrieved from all JDBC implementations (H2 for example, returns\n+ * {@link java.sql.Types#NULL} for the array sub-type), so it must be configured here.  The column index\n+ * or name can be used to map to a {@link JdbcFieldInfo}, and that will be used for the conversion.\n+ * </p>\n+ */\n+public final class JdbcToArrowConfig {\n+\n+  private Calendar calendar;\n+  private BaseAllocator allocator;\n+  private boolean includeMetadata;\n+  private Map<Integer, JdbcFieldInfo> arraySubTypesByColumnIndex;\n+  private Map<String, JdbcFieldInfo> arraySubTypesByColumnName;\n+\n+  /**\n+   * Constructs a new configuration from the provided allocator and calendar.  The <code>allocator</code>\n+   * is used when constructing the Arrow vectors from the ResultSet, and the calendar is used to define\n+   * Arrow Timestamp fields, and to read time-based fields from the JDBC <code>ResultSet</code>. \n+   *\n+   * @param allocator The memory allocator to construct the Arrow vectors with.\n+   * @param calendar The calendar to use when constructing Timestamp fields and reading time-based results.\n+   */\n+  public JdbcToArrowConfig(BaseAllocator allocator, Calendar calendar) {\n+    Preconditions.checkNotNull(allocator, \"Memory allocator cannot be null\");\n+    Preconditions.checkNotNull(calendar, \"Calendar object can not be null\");\n+\n+    this.allocator = allocator;\n+    this.calendar = calendar;\n+    this.includeMetadata = false;\n+    this.arraySubTypesByColumnIndex = null;\n+    this.arraySubTypesByColumnName = null;\n+  }\n+\n+  /**\n+   * Constructs a new configuration from the provided allocator and calendar.  The <code>allocator</code>\n+   * is used when constructing the Arrow vectors from the ResultSet, and the calendar is used to define\n+   * Arrow Timestamp fields, and to read time-based fields from the JDBC <code>ResultSet</code>. \n+   *\n+   * @param allocator       The memory allocator to construct the Arrow vectors with.\n+   * @param calendar        The calendar to use when constructing Timestamp fields and reading time-based results.\n+   * @param includeMetadata Whether to include JDBC field metadata in the Arrow Schema Field metadata.\n+   */\n+  public JdbcToArrowConfig(BaseAllocator allocator, Calendar calendar, boolean includeMetadata) {\n+    this(allocator, calendar);\n+    this.includeMetadata = includeMetadata;\n+  }\n+\n+  /**\n+   * The calendar to use when defining Arrow Timestamp fields\n+   * and retrieving time-based fields from the database.\n+   * @return the calendar.\n+   */\n+  public Calendar getCalendar() {\n+    return calendar;\n+  }\n+\n+  /**\n+   * Sets the {@link Calendar} to use when constructing timestamp fields in the\n+   * Arrow schema, and reading time-based fields from the JDBC <code>ResultSet</code>.\n+   *\n+   * @param calendar the calendar to set.\n+   * @return This instance of the <code>JdbcToArrowConfig</code>, for chaining.\n+   * @exception NullPointerExeption if <code>calendar</code> is <code>null</code>.\n+   */\n+  public JdbcToArrowConfig setCalendar(Calendar calendar) {\n+    Preconditions.checkNotNull(calendar, \"Calendar object can not be null\");\n+    this.calendar = calendar;\n+    return this;\n+  }\n+\n+  /**\n+   * The Arrow memory allocator.\n+   * @return the allocator.\n+   */\n+  public BaseAllocator getAllocator() {\n+    return allocator;\n+  }\n+\n+  /**\n+   * Sets the memory allocator to use when construting the Arrow vectors from the ResultSet.\n+   *\n+   * @param allocator the allocator to set.\n+   * @return This instance of the <code>JdbcToArrowConfig</code>, for chaining.\n+   * @exception NullPointerException if <code>allocator</code> is null.\n+   */\n+  public JdbcToArrowConfig setAllocator(BaseAllocator allocator) {\n+    Preconditions.checkNotNull(allocator, \"Memory allocator cannot be null\");\n+    this.allocator = allocator;\n+    return this;\n+  }\n+\n+  /**\n+   * Whether to include JDBC ResultSet field metadata in the Arrow Schema field metadata.\n+   *\n+   * @return <code>true</code> to include field metadata, <code>false</code> to exclude it.\n+   */\n+  public boolean getIncludeMetadata() {\n+    return includeMetadata;\n+  }\n+\n+  /**\n+   * Sets whether to include JDBC ResultSet field metadata in the Arrow Schema field metadata.\n+   *\n+   * @param includeMetadata Whether to include or exclude JDBC metadata in the Arrow Schema field metadata.\n+   * @return This instance of the <code>JdbcToArrowConfig</code>, for chaining.\n+   */\n+  public JdbcToArrowConfig setIncludeMetadata(boolean includeMetadata) {\n+    this.includeMetadata = includeMetadata;\n+    return this;\n+  }\n+\n+  /**\n+   * Returns the array sub-type {@link JdbcFieldInfo} defined for the provided column index.\n+   *\n+   * @param index The {@link java.sql.ResultSetMetaData} column index of an {@link java.sql.Types#ARRAY} type.\n+   * @return The {@link JdbcFieldInfo} for that array's sub-type, or <code>null</code> if not defined.\n+   */\n+  public JdbcFieldInfo getArraySubTypeByColumnIndex(int index) {\n+    if (arraySubTypesByColumnIndex == null) {\n+      return null;\n+    } else {\n+      return arraySubTypesByColumnIndex.get(index);\n+    }\n+  }\n+\n+  /**\n+   * Sets the mapping of column-index-to-{@link JdbcFieldInfo} used for columns of type {@link java.sql.Types#ARRAY}.\n+   *\n+   * @param map The mapping.\n \n Review comment:\n   This is 1-indexed? It might pay to comment on that here (though it might be obvious for people familiar with JDBC?)\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-02T07:22:14.895+0000",
                    "updated": "2019-02-02T07:22:14.895+0000",
                    "started": "2019-02-02T07:22:14.894+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "193639",
                    "issueId": "13207191"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13207191/worklog/193640",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3294: ARROW-4142 [Java] JDBC Array -> Arrow ListVector\nURL: https://github.com/apache/arrow/pull/3294#discussion_r253256674\n \n \n\n ##########\n File path: java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/JdbcToArrowConfig.java\n ##########\n @@ -0,0 +1,215 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.adapter.jdbc;\n+\n+import java.util.Calendar;\n+import java.util.Map;\n+\n+import org.apache.arrow.memory.BaseAllocator;\n+\n+import com.google.common.base.Preconditions;\n+\n+/**\n+ * This class configures the JDBC-to-Arrow conversion process.\n+ * <p>\n+ * The allocator is used to construct the {@link org.apache.arrow.vector.VectorSchemaRoot},\n+ * and the calendar is used to define the time zone of any {@link org.apahe.arrow.vector.pojo.ArrowType.Timestamp}\n+ * fields that are created during the conversion.  Neither field may be <code>null</code>.\n+ * </p>\n+ * <p>\n+ * If the <code>includeMetadata</code> flag is set, the Arrow field metadata will contain information\n+ * from the corresponding {@link java.sql.ResultSetMetaData} that was used to create the\n+ * {@link org.apache.arrow.vector.types.pojo.FieldType} of the corresponding\n+ * {@link org.apache.arrow.vector.FieldVector}.\n+ * </p>\n+ * <p>\n+ * If there are any {@link java.sql.Types#ARRAY} fields in the {@link java.sql.ResultSet}, the corresponding\n+ * {@link JdbcFieldInfo} for the array's contents must be defined here.  Unfortunately, the sub-type\n+ * information cannot be retrieved from all JDBC implementations (H2 for example, returns\n+ * {@link java.sql.Types#NULL} for the array sub-type), so it must be configured here.  The column index\n+ * or name can be used to map to a {@link JdbcFieldInfo}, and that will be used for the conversion.\n \n Review comment:\n   If both are set is there a precedence (or should it be considered an error?)\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-02T07:22:14.904+0000",
                    "updated": "2019-02-02T07:22:14.904+0000",
                    "started": "2019-02-02T07:22:14.903+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "193640",
                    "issueId": "13207191"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13207191/worklog/193641",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3294: ARROW-4142 [Java] JDBC Array -> Arrow ListVector\nURL: https://github.com/apache/arrow/pull/3294#discussion_r253257047\n \n \n\n ##########\n File path: java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/JdbcToArrowUtils.java\n ##########\n @@ -93,119 +98,229 @@\n   /**\n    * Create Arrow {@link Schema} object for the given JDBC {@link ResultSetMetaData}.\n    *\n-   * <p>This method currently performs following type mapping for JDBC SQL data types to corresponding Arrow data types.\n-   *\n-   * <p>CHAR --> ArrowType.Utf8\n-   * NCHAR --> ArrowType.Utf8\n-   * VARCHAR --> ArrowType.Utf8\n-   * NVARCHAR --> ArrowType.Utf8\n-   * LONGVARCHAR --> ArrowType.Utf8\n-   * LONGNVARCHAR --> ArrowType.Utf8\n-   * NUMERIC --> ArrowType.Decimal(precision, scale)\n-   * DECIMAL --> ArrowType.Decimal(precision, scale)\n-   * BIT --> ArrowType.Bool\n-   * TINYINT --> ArrowType.Int(8, signed)\n-   * SMALLINT --> ArrowType.Int(16, signed)\n-   * INTEGER --> ArrowType.Int(32, signed)\n-   * BIGINT --> ArrowType.Int(64, signed)\n-   * REAL --> ArrowType.FloatingPoint(FloatingPointPrecision.SINGLE)\n-   * FLOAT --> ArrowType.FloatingPoint(FloatingPointPrecision.SINGLE)\n-   * DOUBLE --> ArrowType.FloatingPoint(FloatingPointPrecision.DOUBLE)\n-   * BINARY --> ArrowType.Binary\n-   * VARBINARY --> ArrowType.Binary\n-   * LONGVARBINARY --> ArrowType.Binary\n-   * DATE --> ArrowType.Date(DateUnit.MILLISECOND)\n-   * TIME --> ArrowType.Time(TimeUnit.MILLISECOND, 32)\n-   * TIMESTAMP --> ArrowType.Timestamp(TimeUnit.MILLISECOND, timezone=null)\n-   * CLOB --> ArrowType.Utf8\n-   * BLOB --> ArrowType.Binary\n-   *\n-   * @param rsmd ResultSetMetaData\n+   * @param rsmd The ResultSetMetaData containing the results, to read the JDBC metadata from.\n+   * @param calendar The calendar to use the time zone field of, to construct Timestamp fields from.\n    * @return {@link Schema}\n    * @throws SQLException on error\n    */\n   public static Schema jdbcToArrowSchema(ResultSetMetaData rsmd, Calendar calendar) throws SQLException {\n-\n     Preconditions.checkNotNull(rsmd, \"JDBC ResultSetMetaData object can't be null\");\n     Preconditions.checkNotNull(calendar, \"Calendar object can't be null\");\n \n+    return jdbcToArrowSchema(rsmd, new JdbcToArrowConfig(new RootAllocator(0), calendar));\n+  }\n+\n+  /**\n+   * Create Arrow {@link Schema} object for the given JDBC {@link java.sql.ResultSetMetaData}.\n+   * <p>\n+   * The {@link JdbcToArrowUtils#getArrowTypeForJdbcField(JdbcFieldInfo, Calendar)} method is used to construct a\n+   * {@link org.apache.arrow.vector.types.pojo.ArrowType} for each field in the {@link java.sql.ResultSetMetaData}.\n+   * </p>\n+   * <p>\n+   * If {@link JdbcToArrowConfig#getIncludeMetadata()} returns <code>true</code>, the following fields\n+   * will be added to the {@link FieldType#getMetadata()}:\n+   * <ul>\n+   *  <li>{@link Constants#SQL_CATALOG_NAME_KEY} representing {@link ResultSetMetaData#getCatalogName(int)}</li>\n+   *  <li>{@link Constants#SQL_TABLE_NAME_KEY} representing {@link ResultSetMetaData#getTableName(int)}</li>\n+   *  <li>{@link Constants#SQL_COLUMN_NAME_KEY} representing {@link ResultSetMetaData#getColumnName(int)}</li>\n+   *  <li>{@link Constants#SQL_TYPE_KEY} representing {@link ResultSetMetaData#getColumnTypeName(int)}</li>\n+   * </ul>\n+   * </p>\n+   * <p>\n+   * If any columns are of type {@link java.sql.Types#ARRAY}, the configuration object will be used to look up\n+   * the array sub-type field.  The {@link JdbcToArrowConfig#getArraySubTypeByColumnIndex(int)} method will be\n+   * checked first, followed by the {@link JdbcToArrowConfig#getArraySubTypeByColumnName(String)} method.\n+   * </p>\n+   *\n+   * @param rsmd The ResultSetMetaData containing the results, to read the JDBC metadata from.\n+   * @param config The configuration to use when constructing the schema.\n+   * @return {@link Schema}\n+   * @throws SQLException on error\n+   * @throws IllegalArgumentException if <code>rsmd</code> contains an {@link java.sql.Types#ARRAY} but the\n+   *                                  <code>config</code> does not have a sub-type definition for it.\n+   */\n+  public static Schema jdbcToArrowSchema(ResultSetMetaData rsmd, JdbcToArrowConfig config) throws SQLException {\n+    Preconditions.checkNotNull(rsmd, \"JDBC ResultSetMetaData object can't be null\");\n+    Preconditions.checkNotNull(config, \"The configuration object must not be null\");\n+    Preconditions.checkArgument(config.isValid(), \"The configuration object must be valid\");\n+\n     List<Field> fields = new ArrayList<>();\n     int columnCount = rsmd.getColumnCount();\n     for (int i = 1; i <= columnCount; i++) {\n-      String columnName = rsmd.getColumnName(i);\n-      switch (rsmd.getColumnType(i)) {\n-        case Types.BOOLEAN:\n-        case Types.BIT:\n-          fields.add(new Field(columnName, FieldType.nullable(new ArrowType.Bool()), null));\n-          break;\n-        case Types.TINYINT:\n-          fields.add(new Field(columnName, FieldType.nullable(new ArrowType.Int(8, true)), null));\n-          break;\n-        case Types.SMALLINT:\n-          fields.add(new Field(columnName, FieldType.nullable(new ArrowType.Int(16, true)), null));\n-          break;\n-        case Types.INTEGER:\n-          fields.add(new Field(columnName, FieldType.nullable(new ArrowType.Int(32, true)), null));\n-          break;\n-        case Types.BIGINT:\n-          fields.add(new Field(columnName, FieldType.nullable(new ArrowType.Int(64, true)), null));\n-          break;\n-        case Types.NUMERIC:\n-        case Types.DECIMAL:\n-          int precision = rsmd.getPrecision(i);\n-          int scale = rsmd.getScale(i);\n-          fields.add(new Field(columnName, FieldType.nullable(new ArrowType.Decimal(precision, scale)), null));\n-          break;\n-        case Types.REAL:\n-        case Types.FLOAT:\n-          fields.add(new Field(columnName, FieldType.nullable(new ArrowType.FloatingPoint(SINGLE)), null));\n-          break;\n-        case Types.DOUBLE:\n-          fields.add(new Field(columnName, FieldType.nullable(new ArrowType.FloatingPoint(DOUBLE)), null));\n-          break;\n-        case Types.CHAR:\n-        case Types.NCHAR:\n-        case Types.VARCHAR:\n-        case Types.NVARCHAR:\n-        case Types.LONGVARCHAR:\n-        case Types.LONGNVARCHAR:\n-          fields.add(new Field(columnName, FieldType.nullable(new ArrowType.Utf8()), null));\n-          break;\n-        case Types.DATE:\n-          fields.add(new Field(columnName, FieldType.nullable(new ArrowType.Date(DateUnit.MILLISECOND)), null));\n-          break;\n-        case Types.TIME:\n-          fields.add(new Field(columnName, FieldType.nullable(new ArrowType.Time(TimeUnit.MILLISECOND, 32)), null));\n-          break;\n-        case Types.TIMESTAMP:\n-          fields.add(new Field(columnName, FieldType.nullable(new ArrowType.Timestamp(TimeUnit.MILLISECOND,\n-              calendar.getTimeZone().getID())), null));\n-          break;\n-        case Types.BINARY:\n-        case Types.VARBINARY:\n-        case Types.LONGVARBINARY:\n-          fields.add(new Field(columnName, FieldType.nullable(new ArrowType.Binary()), null));\n-          break;\n-        case Types.ARRAY:\n-          // TODO Need to handle this type\n-          // fields.add(new Field(\"list\", FieldType.nullable(new ArrowType.List()), null));\n-          break;\n-        case Types.CLOB:\n-          fields.add(new Field(columnName, FieldType.nullable(new ArrowType.Utf8()), null));\n-          break;\n-        case Types.BLOB:\n-          fields.add(new Field(columnName, FieldType.nullable(new ArrowType.Binary()), null));\n-          break;\n+      final String columnName = rsmd.getColumnName(i);\n \n-        default:\n-          // no-op, shouldn't get here\n-          break;\n+      final Map<String, String> metadata;\n+      if (config.getIncludeMetadata()) {\n+        metadata = new HashMap<String, String>();\n \n Review comment:\n   Is there a reason to use a Map here vs POJO?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-02T07:22:14.905+0000",
                    "updated": "2019-02-02T07:22:14.905+0000",
                    "started": "2019-02-02T07:22:14.904+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "193641",
                    "issueId": "13207191"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13207191/worklog/193642",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3294: ARROW-4142 [Java] JDBC Array -> Arrow ListVector\nURL: https://github.com/apache/arrow/pull/3294#discussion_r253257139\n \n \n\n ##########\n File path: java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/JdbcToArrowUtils.java\n ##########\n @@ -528,4 +680,39 @@ private static void updateVector(VarBinaryVector varBinaryVector, Blob blob, boo\n     updateVector(varBinaryVector, blob != null ? blob.getBinaryStream() : null, isNonNull, rowCount);\n   }\n \n+  private static void updateVector(\n+      ListVector listVector,\n+      ResultSet resultSet,\n+      int arrayIndex,\n+      int rowCount,\n+      JdbcToArrowConfig config)\n+      throws SQLException, IOException {\n+\n+    final JdbcFieldInfo fieldInfo = getJdbcFieldInfoForArraySubType(resultSet.getMetaData(), arrayIndex, config);\n+    if (fieldInfo == null) {\n+      throw new IllegalStateException(\"Column \" + arrayIndex + \" is an array of unknown type.\");\n+    }\n+\n+    final int valueCount = listVector.getValueCount();\n+    final Array array = resultSet.getArray(arrayIndex);\n+\n+    FieldVector fieldVector = listVector.getDataVector();\n+    int arrayRowCount = 0;\n+\n+    listVector.startNewValue(rowCount);\n+\n+    if (!resultSet.wasNull()) {\n+      try (ResultSet rs = array.getResultSet()) {\n+\n+        while (rs.next()) {\n+          // The second column contains the actual data.\n+          jdbcToFieldVector(rs, 2, fieldInfo.getJdbcType(), valueCount + arrayRowCount, fieldVector, config);\n \n Review comment:\n   can you make 2, a named constant?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-02T07:22:14.910+0000",
                    "updated": "2019-02-02T07:22:14.910+0000",
                    "started": "2019-02-02T07:22:14.910+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "193642",
                    "issueId": "13207191"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13207191/worklog/193643",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3294: ARROW-4142 [Java] JDBC Array -> Arrow ListVector\nURL: https://github.com/apache/arrow/pull/3294#discussion_r253257108\n \n \n\n ##########\n File path: java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/JdbcToArrowUtils.java\n ##########\n @@ -528,4 +680,39 @@ private static void updateVector(VarBinaryVector varBinaryVector, Blob blob, boo\n     updateVector(varBinaryVector, blob != null ? blob.getBinaryStream() : null, isNonNull, rowCount);\n   }\n \n+  private static void updateVector(\n+      ListVector listVector,\n+      ResultSet resultSet,\n+      int arrayIndex,\n+      int rowCount,\n+      JdbcToArrowConfig config)\n+      throws SQLException, IOException {\n+\n+    final JdbcFieldInfo fieldInfo = getJdbcFieldInfoForArraySubType(resultSet.getMetaData(), arrayIndex, config);\n \n Review comment:\n   would it make sense to move this to be a method on config?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-02T07:22:14.910+0000",
                    "updated": "2019-02-02T07:22:14.910+0000",
                    "started": "2019-02-02T07:22:14.910+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "193643",
                    "issueId": "13207191"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13207191/worklog/193644",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3294: ARROW-4142 [Java] JDBC Array -> Arrow ListVector\nURL: https://github.com/apache/arrow/pull/3294#discussion_r253256717\n \n \n\n ##########\n File path: java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/JdbcToArrowConfig.java\n ##########\n @@ -0,0 +1,215 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.adapter.jdbc;\n+\n+import java.util.Calendar;\n+import java.util.Map;\n+\n+import org.apache.arrow.memory.BaseAllocator;\n+\n+import com.google.common.base.Preconditions;\n+\n+/**\n+ * This class configures the JDBC-to-Arrow conversion process.\n+ * <p>\n+ * The allocator is used to construct the {@link org.apache.arrow.vector.VectorSchemaRoot},\n+ * and the calendar is used to define the time zone of any {@link org.apahe.arrow.vector.pojo.ArrowType.Timestamp}\n+ * fields that are created during the conversion.  Neither field may be <code>null</code>.\n+ * </p>\n+ * <p>\n+ * If the <code>includeMetadata</code> flag is set, the Arrow field metadata will contain information\n+ * from the corresponding {@link java.sql.ResultSetMetaData} that was used to create the\n+ * {@link org.apache.arrow.vector.types.pojo.FieldType} of the corresponding\n+ * {@link org.apache.arrow.vector.FieldVector}.\n+ * </p>\n+ * <p>\n+ * If there are any {@link java.sql.Types#ARRAY} fields in the {@link java.sql.ResultSet}, the corresponding\n+ * {@link JdbcFieldInfo} for the array's contents must be defined here.  Unfortunately, the sub-type\n+ * information cannot be retrieved from all JDBC implementations (H2 for example, returns\n+ * {@link java.sql.Types#NULL} for the array sub-type), so it must be configured here.  The column index\n+ * or name can be used to map to a {@link JdbcFieldInfo}, and that will be used for the conversion.\n+ * </p>\n+ */\n+public final class JdbcToArrowConfig {\n+\n+  private Calendar calendar;\n+  private BaseAllocator allocator;\n+  private boolean includeMetadata;\n+  private Map<Integer, JdbcFieldInfo> arraySubTypesByColumnIndex;\n+  private Map<String, JdbcFieldInfo> arraySubTypesByColumnName;\n+\n+  /**\n+   * Constructs a new configuration from the provided allocator and calendar.  The <code>allocator</code>\n+   * is used when constructing the Arrow vectors from the ResultSet, and the calendar is used to define\n+   * Arrow Timestamp fields, and to read time-based fields from the JDBC <code>ResultSet</code>. \n+   *\n+   * @param allocator The memory allocator to construct the Arrow vectors with.\n+   * @param calendar The calendar to use when constructing Timestamp fields and reading time-based results.\n+   */\n+  public JdbcToArrowConfig(BaseAllocator allocator, Calendar calendar) {\n+    Preconditions.checkNotNull(allocator, \"Memory allocator cannot be null\");\n+    Preconditions.checkNotNull(calendar, \"Calendar object can not be null\");\n+\n+    this.allocator = allocator;\n+    this.calendar = calendar;\n+    this.includeMetadata = false;\n+    this.arraySubTypesByColumnIndex = null;\n+    this.arraySubTypesByColumnName = null;\n+  }\n+\n+  /**\n+   * Constructs a new configuration from the provided allocator and calendar.  The <code>allocator</code>\n+   * is used when constructing the Arrow vectors from the ResultSet, and the calendar is used to define\n+   * Arrow Timestamp fields, and to read time-based fields from the JDBC <code>ResultSet</code>. \n+   *\n+   * @param allocator       The memory allocator to construct the Arrow vectors with.\n+   * @param calendar        The calendar to use when constructing Timestamp fields and reading time-based results.\n+   * @param includeMetadata Whether to include JDBC field metadata in the Arrow Schema Field metadata.\n+   */\n+  public JdbcToArrowConfig(BaseAllocator allocator, Calendar calendar, boolean includeMetadata) {\n+    this(allocator, calendar);\n+    this.includeMetadata = includeMetadata;\n+  }\n+\n+  /**\n+   * The calendar to use when defining Arrow Timestamp fields\n+   * and retrieving time-based fields from the database.\n+   * @return the calendar.\n+   */\n+  public Calendar getCalendar() {\n+    return calendar;\n+  }\n+\n+  /**\n+   * Sets the {@link Calendar} to use when constructing timestamp fields in the\n+   * Arrow schema, and reading time-based fields from the JDBC <code>ResultSet</code>.\n+   *\n+   * @param calendar the calendar to set.\n+   * @return This instance of the <code>JdbcToArrowConfig</code>, for chaining.\n+   * @exception NullPointerExeption if <code>calendar</code> is <code>null</code>.\n+   */\n+  public JdbcToArrowConfig setCalendar(Calendar calendar) {\n \n Review comment:\n   Or is this the convention in other parts of the java codebase?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-02T07:22:14.920+0000",
                    "updated": "2019-02-02T07:22:14.920+0000",
                    "started": "2019-02-02T07:22:14.920+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "193644",
                    "issueId": "13207191"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13207191/worklog/193645",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3294: ARROW-4142 [Java] JDBC Array -> Arrow ListVector\nURL: https://github.com/apache/arrow/pull/3294#discussion_r253257065\n \n \n\n ##########\n File path: java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/JdbcToArrowUtils.java\n ##########\n @@ -93,119 +98,229 @@\n   /**\n    * Create Arrow {@link Schema} object for the given JDBC {@link ResultSetMetaData}.\n    *\n-   * <p>This method currently performs following type mapping for JDBC SQL data types to corresponding Arrow data types.\n-   *\n-   * <p>CHAR --> ArrowType.Utf8\n-   * NCHAR --> ArrowType.Utf8\n-   * VARCHAR --> ArrowType.Utf8\n-   * NVARCHAR --> ArrowType.Utf8\n-   * LONGVARCHAR --> ArrowType.Utf8\n-   * LONGNVARCHAR --> ArrowType.Utf8\n-   * NUMERIC --> ArrowType.Decimal(precision, scale)\n-   * DECIMAL --> ArrowType.Decimal(precision, scale)\n-   * BIT --> ArrowType.Bool\n-   * TINYINT --> ArrowType.Int(8, signed)\n-   * SMALLINT --> ArrowType.Int(16, signed)\n-   * INTEGER --> ArrowType.Int(32, signed)\n-   * BIGINT --> ArrowType.Int(64, signed)\n-   * REAL --> ArrowType.FloatingPoint(FloatingPointPrecision.SINGLE)\n-   * FLOAT --> ArrowType.FloatingPoint(FloatingPointPrecision.SINGLE)\n-   * DOUBLE --> ArrowType.FloatingPoint(FloatingPointPrecision.DOUBLE)\n-   * BINARY --> ArrowType.Binary\n-   * VARBINARY --> ArrowType.Binary\n-   * LONGVARBINARY --> ArrowType.Binary\n-   * DATE --> ArrowType.Date(DateUnit.MILLISECOND)\n-   * TIME --> ArrowType.Time(TimeUnit.MILLISECOND, 32)\n-   * TIMESTAMP --> ArrowType.Timestamp(TimeUnit.MILLISECOND, timezone=null)\n-   * CLOB --> ArrowType.Utf8\n-   * BLOB --> ArrowType.Binary\n-   *\n-   * @param rsmd ResultSetMetaData\n+   * @param rsmd The ResultSetMetaData containing the results, to read the JDBC metadata from.\n+   * @param calendar The calendar to use the time zone field of, to construct Timestamp fields from.\n    * @return {@link Schema}\n    * @throws SQLException on error\n    */\n   public static Schema jdbcToArrowSchema(ResultSetMetaData rsmd, Calendar calendar) throws SQLException {\n-\n     Preconditions.checkNotNull(rsmd, \"JDBC ResultSetMetaData object can't be null\");\n     Preconditions.checkNotNull(calendar, \"Calendar object can't be null\");\n \n+    return jdbcToArrowSchema(rsmd, new JdbcToArrowConfig(new RootAllocator(0), calendar));\n+  }\n+\n+  /**\n+   * Create Arrow {@link Schema} object for the given JDBC {@link java.sql.ResultSetMetaData}.\n+   * <p>\n+   * The {@link JdbcToArrowUtils#getArrowTypeForJdbcField(JdbcFieldInfo, Calendar)} method is used to construct a\n+   * {@link org.apache.arrow.vector.types.pojo.ArrowType} for each field in the {@link java.sql.ResultSetMetaData}.\n+   * </p>\n+   * <p>\n+   * If {@link JdbcToArrowConfig#getIncludeMetadata()} returns <code>true</code>, the following fields\n+   * will be added to the {@link FieldType#getMetadata()}:\n+   * <ul>\n+   *  <li>{@link Constants#SQL_CATALOG_NAME_KEY} representing {@link ResultSetMetaData#getCatalogName(int)}</li>\n+   *  <li>{@link Constants#SQL_TABLE_NAME_KEY} representing {@link ResultSetMetaData#getTableName(int)}</li>\n+   *  <li>{@link Constants#SQL_COLUMN_NAME_KEY} representing {@link ResultSetMetaData#getColumnName(int)}</li>\n+   *  <li>{@link Constants#SQL_TYPE_KEY} representing {@link ResultSetMetaData#getColumnTypeName(int)}</li>\n+   * </ul>\n+   * </p>\n+   * <p>\n+   * If any columns are of type {@link java.sql.Types#ARRAY}, the configuration object will be used to look up\n+   * the array sub-type field.  The {@link JdbcToArrowConfig#getArraySubTypeByColumnIndex(int)} method will be\n+   * checked first, followed by the {@link JdbcToArrowConfig#getArraySubTypeByColumnName(String)} method.\n+   * </p>\n+   *\n+   * @param rsmd The ResultSetMetaData containing the results, to read the JDBC metadata from.\n+   * @param config The configuration to use when constructing the schema.\n+   * @return {@link Schema}\n+   * @throws SQLException on error\n+   * @throws IllegalArgumentException if <code>rsmd</code> contains an {@link java.sql.Types#ARRAY} but the\n+   *                                  <code>config</code> does not have a sub-type definition for it.\n+   */\n+  public static Schema jdbcToArrowSchema(ResultSetMetaData rsmd, JdbcToArrowConfig config) throws SQLException {\n+    Preconditions.checkNotNull(rsmd, \"JDBC ResultSetMetaData object can't be null\");\n+    Preconditions.checkNotNull(config, \"The configuration object must not be null\");\n+    Preconditions.checkArgument(config.isValid(), \"The configuration object must be valid\");\n+\n     List<Field> fields = new ArrayList<>();\n     int columnCount = rsmd.getColumnCount();\n     for (int i = 1; i <= columnCount; i++) {\n-      String columnName = rsmd.getColumnName(i);\n-      switch (rsmd.getColumnType(i)) {\n-        case Types.BOOLEAN:\n-        case Types.BIT:\n-          fields.add(new Field(columnName, FieldType.nullable(new ArrowType.Bool()), null));\n-          break;\n-        case Types.TINYINT:\n-          fields.add(new Field(columnName, FieldType.nullable(new ArrowType.Int(8, true)), null));\n-          break;\n-        case Types.SMALLINT:\n-          fields.add(new Field(columnName, FieldType.nullable(new ArrowType.Int(16, true)), null));\n-          break;\n-        case Types.INTEGER:\n-          fields.add(new Field(columnName, FieldType.nullable(new ArrowType.Int(32, true)), null));\n-          break;\n-        case Types.BIGINT:\n-          fields.add(new Field(columnName, FieldType.nullable(new ArrowType.Int(64, true)), null));\n-          break;\n-        case Types.NUMERIC:\n-        case Types.DECIMAL:\n-          int precision = rsmd.getPrecision(i);\n-          int scale = rsmd.getScale(i);\n-          fields.add(new Field(columnName, FieldType.nullable(new ArrowType.Decimal(precision, scale)), null));\n-          break;\n-        case Types.REAL:\n-        case Types.FLOAT:\n-          fields.add(new Field(columnName, FieldType.nullable(new ArrowType.FloatingPoint(SINGLE)), null));\n-          break;\n-        case Types.DOUBLE:\n-          fields.add(new Field(columnName, FieldType.nullable(new ArrowType.FloatingPoint(DOUBLE)), null));\n-          break;\n-        case Types.CHAR:\n-        case Types.NCHAR:\n-        case Types.VARCHAR:\n-        case Types.NVARCHAR:\n-        case Types.LONGVARCHAR:\n-        case Types.LONGNVARCHAR:\n-          fields.add(new Field(columnName, FieldType.nullable(new ArrowType.Utf8()), null));\n-          break;\n-        case Types.DATE:\n-          fields.add(new Field(columnName, FieldType.nullable(new ArrowType.Date(DateUnit.MILLISECOND)), null));\n-          break;\n-        case Types.TIME:\n-          fields.add(new Field(columnName, FieldType.nullable(new ArrowType.Time(TimeUnit.MILLISECOND, 32)), null));\n-          break;\n-        case Types.TIMESTAMP:\n-          fields.add(new Field(columnName, FieldType.nullable(new ArrowType.Timestamp(TimeUnit.MILLISECOND,\n-              calendar.getTimeZone().getID())), null));\n-          break;\n-        case Types.BINARY:\n-        case Types.VARBINARY:\n-        case Types.LONGVARBINARY:\n-          fields.add(new Field(columnName, FieldType.nullable(new ArrowType.Binary()), null));\n-          break;\n-        case Types.ARRAY:\n-          // TODO Need to handle this type\n-          // fields.add(new Field(\"list\", FieldType.nullable(new ArrowType.List()), null));\n-          break;\n-        case Types.CLOB:\n-          fields.add(new Field(columnName, FieldType.nullable(new ArrowType.Utf8()), null));\n-          break;\n-        case Types.BLOB:\n-          fields.add(new Field(columnName, FieldType.nullable(new ArrowType.Binary()), null));\n-          break;\n+      final String columnName = rsmd.getColumnName(i);\n \n-        default:\n-          // no-op, shouldn't get here\n-          break;\n+      final Map<String, String> metadata;\n+      if (config.getIncludeMetadata()) {\n+        metadata = new HashMap<String, String>();\n \n Review comment:\n   One advantage of a POJO might be you can move this logic to the constructor of that object\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-02T07:22:14.922+0000",
                    "updated": "2019-02-02T07:22:14.922+0000",
                    "started": "2019-02-02T07:22:14.922+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "193645",
                    "issueId": "13207191"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13207191/worklog/193646",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3294: ARROW-4142 [Java] JDBC Array -> Arrow ListVector\nURL: https://github.com/apache/arrow/pull/3294#discussion_r253257124\n \n \n\n ##########\n File path: java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/JdbcToArrowUtils.java\n ##########\n @@ -528,4 +680,39 @@ private static void updateVector(VarBinaryVector varBinaryVector, Blob blob, boo\n     updateVector(varBinaryVector, blob != null ? blob.getBinaryStream() : null, isNonNull, rowCount);\n   }\n \n+  private static void updateVector(\n+      ListVector listVector,\n+      ResultSet resultSet,\n+      int arrayIndex,\n+      int rowCount,\n+      JdbcToArrowConfig config)\n+      throws SQLException, IOException {\n+\n+    final JdbcFieldInfo fieldInfo = getJdbcFieldInfoForArraySubType(resultSet.getMetaData(), arrayIndex, config);\n+    if (fieldInfo == null) {\n+      throw new IllegalStateException(\"Column \" + arrayIndex + \" is an array of unknown type.\");\n \n Review comment:\n   this seems more like config wasn't setup correctly so illegal argument exception might be better.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-02T07:22:14.929+0000",
                    "updated": "2019-02-02T07:22:14.929+0000",
                    "started": "2019-02-02T07:22:14.928+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "193646",
                    "issueId": "13207191"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13207191/worklog/193647",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3294: ARROW-4142 [Java] JDBC Array -> Arrow ListVector\nURL: https://github.com/apache/arrow/pull/3294#discussion_r253257083\n \n \n\n ##########\n File path: java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/JdbcToArrowUtils.java\n ##########\n @@ -93,119 +98,229 @@\n   /**\n    * Create Arrow {@link Schema} object for the given JDBC {@link ResultSetMetaData}.\n    *\n-   * <p>This method currently performs following type mapping for JDBC SQL data types to corresponding Arrow data types.\n-   *\n-   * <p>CHAR --> ArrowType.Utf8\n-   * NCHAR --> ArrowType.Utf8\n-   * VARCHAR --> ArrowType.Utf8\n-   * NVARCHAR --> ArrowType.Utf8\n-   * LONGVARCHAR --> ArrowType.Utf8\n-   * LONGNVARCHAR --> ArrowType.Utf8\n-   * NUMERIC --> ArrowType.Decimal(precision, scale)\n-   * DECIMAL --> ArrowType.Decimal(precision, scale)\n-   * BIT --> ArrowType.Bool\n-   * TINYINT --> ArrowType.Int(8, signed)\n-   * SMALLINT --> ArrowType.Int(16, signed)\n-   * INTEGER --> ArrowType.Int(32, signed)\n-   * BIGINT --> ArrowType.Int(64, signed)\n-   * REAL --> ArrowType.FloatingPoint(FloatingPointPrecision.SINGLE)\n-   * FLOAT --> ArrowType.FloatingPoint(FloatingPointPrecision.SINGLE)\n-   * DOUBLE --> ArrowType.FloatingPoint(FloatingPointPrecision.DOUBLE)\n-   * BINARY --> ArrowType.Binary\n-   * VARBINARY --> ArrowType.Binary\n-   * LONGVARBINARY --> ArrowType.Binary\n-   * DATE --> ArrowType.Date(DateUnit.MILLISECOND)\n-   * TIME --> ArrowType.Time(TimeUnit.MILLISECOND, 32)\n-   * TIMESTAMP --> ArrowType.Timestamp(TimeUnit.MILLISECOND, timezone=null)\n-   * CLOB --> ArrowType.Utf8\n-   * BLOB --> ArrowType.Binary\n-   *\n-   * @param rsmd ResultSetMetaData\n+   * @param rsmd The ResultSetMetaData containing the results, to read the JDBC metadata from.\n+   * @param calendar The calendar to use the time zone field of, to construct Timestamp fields from.\n    * @return {@link Schema}\n    * @throws SQLException on error\n    */\n   public static Schema jdbcToArrowSchema(ResultSetMetaData rsmd, Calendar calendar) throws SQLException {\n-\n     Preconditions.checkNotNull(rsmd, \"JDBC ResultSetMetaData object can't be null\");\n     Preconditions.checkNotNull(calendar, \"Calendar object can't be null\");\n \n+    return jdbcToArrowSchema(rsmd, new JdbcToArrowConfig(new RootAllocator(0), calendar));\n+  }\n+\n+  /**\n+   * Create Arrow {@link Schema} object for the given JDBC {@link java.sql.ResultSetMetaData}.\n+   * <p>\n+   * The {@link JdbcToArrowUtils#getArrowTypeForJdbcField(JdbcFieldInfo, Calendar)} method is used to construct a\n+   * {@link org.apache.arrow.vector.types.pojo.ArrowType} for each field in the {@link java.sql.ResultSetMetaData}.\n+   * </p>\n+   * <p>\n+   * If {@link JdbcToArrowConfig#getIncludeMetadata()} returns <code>true</code>, the following fields\n+   * will be added to the {@link FieldType#getMetadata()}:\n+   * <ul>\n+   *  <li>{@link Constants#SQL_CATALOG_NAME_KEY} representing {@link ResultSetMetaData#getCatalogName(int)}</li>\n+   *  <li>{@link Constants#SQL_TABLE_NAME_KEY} representing {@link ResultSetMetaData#getTableName(int)}</li>\n+   *  <li>{@link Constants#SQL_COLUMN_NAME_KEY} representing {@link ResultSetMetaData#getColumnName(int)}</li>\n+   *  <li>{@link Constants#SQL_TYPE_KEY} representing {@link ResultSetMetaData#getColumnTypeName(int)}</li>\n+   * </ul>\n+   * </p>\n+   * <p>\n+   * If any columns are of type {@link java.sql.Types#ARRAY}, the configuration object will be used to look up\n+   * the array sub-type field.  The {@link JdbcToArrowConfig#getArraySubTypeByColumnIndex(int)} method will be\n+   * checked first, followed by the {@link JdbcToArrowConfig#getArraySubTypeByColumnName(String)} method.\n+   * </p>\n+   *\n+   * @param rsmd The ResultSetMetaData containing the results, to read the JDBC metadata from.\n+   * @param config The configuration to use when constructing the schema.\n+   * @return {@link Schema}\n+   * @throws SQLException on error\n+   * @throws IllegalArgumentException if <code>rsmd</code> contains an {@link java.sql.Types#ARRAY} but the\n+   *                                  <code>config</code> does not have a sub-type definition for it.\n+   */\n+  public static Schema jdbcToArrowSchema(ResultSetMetaData rsmd, JdbcToArrowConfig config) throws SQLException {\n+    Preconditions.checkNotNull(rsmd, \"JDBC ResultSetMetaData object can't be null\");\n+    Preconditions.checkNotNull(config, \"The configuration object must not be null\");\n+    Preconditions.checkArgument(config.isValid(), \"The configuration object must be valid\");\n+\n     List<Field> fields = new ArrayList<>();\n     int columnCount = rsmd.getColumnCount();\n     for (int i = 1; i <= columnCount; i++) {\n-      String columnName = rsmd.getColumnName(i);\n-      switch (rsmd.getColumnType(i)) {\n-        case Types.BOOLEAN:\n-        case Types.BIT:\n-          fields.add(new Field(columnName, FieldType.nullable(new ArrowType.Bool()), null));\n-          break;\n-        case Types.TINYINT:\n-          fields.add(new Field(columnName, FieldType.nullable(new ArrowType.Int(8, true)), null));\n-          break;\n-        case Types.SMALLINT:\n-          fields.add(new Field(columnName, FieldType.nullable(new ArrowType.Int(16, true)), null));\n-          break;\n-        case Types.INTEGER:\n-          fields.add(new Field(columnName, FieldType.nullable(new ArrowType.Int(32, true)), null));\n-          break;\n-        case Types.BIGINT:\n-          fields.add(new Field(columnName, FieldType.nullable(new ArrowType.Int(64, true)), null));\n-          break;\n-        case Types.NUMERIC:\n-        case Types.DECIMAL:\n-          int precision = rsmd.getPrecision(i);\n-          int scale = rsmd.getScale(i);\n-          fields.add(new Field(columnName, FieldType.nullable(new ArrowType.Decimal(precision, scale)), null));\n-          break;\n-        case Types.REAL:\n-        case Types.FLOAT:\n-          fields.add(new Field(columnName, FieldType.nullable(new ArrowType.FloatingPoint(SINGLE)), null));\n-          break;\n-        case Types.DOUBLE:\n-          fields.add(new Field(columnName, FieldType.nullable(new ArrowType.FloatingPoint(DOUBLE)), null));\n-          break;\n-        case Types.CHAR:\n-        case Types.NCHAR:\n-        case Types.VARCHAR:\n-        case Types.NVARCHAR:\n-        case Types.LONGVARCHAR:\n-        case Types.LONGNVARCHAR:\n-          fields.add(new Field(columnName, FieldType.nullable(new ArrowType.Utf8()), null));\n-          break;\n-        case Types.DATE:\n-          fields.add(new Field(columnName, FieldType.nullable(new ArrowType.Date(DateUnit.MILLISECOND)), null));\n-          break;\n-        case Types.TIME:\n-          fields.add(new Field(columnName, FieldType.nullable(new ArrowType.Time(TimeUnit.MILLISECOND, 32)), null));\n-          break;\n-        case Types.TIMESTAMP:\n-          fields.add(new Field(columnName, FieldType.nullable(new ArrowType.Timestamp(TimeUnit.MILLISECOND,\n-              calendar.getTimeZone().getID())), null));\n-          break;\n-        case Types.BINARY:\n-        case Types.VARBINARY:\n-        case Types.LONGVARBINARY:\n-          fields.add(new Field(columnName, FieldType.nullable(new ArrowType.Binary()), null));\n-          break;\n-        case Types.ARRAY:\n-          // TODO Need to handle this type\n-          // fields.add(new Field(\"list\", FieldType.nullable(new ArrowType.List()), null));\n-          break;\n-        case Types.CLOB:\n-          fields.add(new Field(columnName, FieldType.nullable(new ArrowType.Utf8()), null));\n-          break;\n-        case Types.BLOB:\n-          fields.add(new Field(columnName, FieldType.nullable(new ArrowType.Binary()), null));\n-          break;\n+      final String columnName = rsmd.getColumnName(i);\n \n-        default:\n-          // no-op, shouldn't get here\n-          break;\n+      final Map<String, String> metadata;\n+      if (config.getIncludeMetadata()) {\n+        metadata = new HashMap<String, String>();\n+        metadata.put(Constants.SQL_CATALOG_NAME_KEY, rsmd.getCatalogName(i));\n+        metadata.put(Constants.SQL_TABLE_NAME_KEY, rsmd.getTableName(i));\n+        metadata.put(Constants.SQL_COLUMN_NAME_KEY, columnName);\n+        metadata.put(Constants.SQL_TYPE_KEY, rsmd.getColumnTypeName(i));\n+\n+      } else {\n+        metadata = null;\n+      }\n+\n+      final ArrowType arrowType = getArrowTypeForJdbcField(new JdbcFieldInfo(rsmd, i), config.getCalendar());\n+      if (arrowType != null) {\n+        final FieldType fieldType = new FieldType(true, arrowType, null, metadata);\n \n Review comment:\n   please add a /* parameter name */ for null\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-02T07:22:14.947+0000",
                    "updated": "2019-02-02T07:22:14.947+0000",
                    "started": "2019-02-02T07:22:14.947+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "193647",
                    "issueId": "13207191"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 62400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@1118d7a9[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1ebd0f7[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5e85a744[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@136a80b[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2351fd7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@37956631[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@44595800[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@701bd670[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5a7ab403[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@4642e593[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@48552c03[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@6653cb2f[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 62400,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Feb 19 15:13:51 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-02-19T15:13:33.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-4142/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2019-01-01T23:23:33.000+0000",
        "updated": "2019-02-19T15:13:51.000+0000",
        "timeoriginalestimate": null,
        "description": "The JDBC Adapter does not support JDBC Arrays.\r\n\r\nJDBC Arrays can be walked using an internal ResultSet object, but its ResultSetMetaData may not contain the proper type information.\u00a0 The sub-type information can be stored in the JdbcToArrowConfig object, because there may not be any other way to get it.\r\n\r\n\u00a0",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "17h 20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 62400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Java] JDBC-to-Arrow: JDBC Arrays",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13207191/comment/16772001",
                    "id": "16772001",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "I changed the issue state from \"Closed\" to \"Resolved\"",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-02-19T15:13:51.217+0000",
                    "updated": "2019-02-19T15:13:51.217+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|u00fow:",
        "customfield_12314139": null
    }
}