{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13240226",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13240226",
    "key": "ARROW-5640",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12349983",
                "id": "12349983",
                "description": "",
                "name": "5.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-07-28"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12623846",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12623846",
                "type": {
                    "id": "12310660",
                    "name": "Completes",
                    "inward": "is fixed by",
                    "outward": "fixes",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310660"
                },
                "outwardIssue": {
                    "id": "13239808",
                    "key": "ARROW-5620",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13239808",
                    "fields": {
                        "summary": "[Go] implement read/write IPC for Map arrays",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
                            "id": "7",
                            "description": "The sub-task of the issue",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
                            "name": "Sub-task",
                            "subtask": true,
                            "avatarId": 21146
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=zeroshade",
            "name": "zeroshade",
            "key": "zeroshade",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=zeroshade&avatarId=31230",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=zeroshade&avatarId=31230",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=zeroshade&avatarId=31230",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=zeroshade&avatarId=31230"
            },
            "displayName": "Matthew Topol",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333772",
                "id": "12333772",
                "name": "Go"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=sbinet",
            "name": "sbinet",
            "key": "sbinet",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=sbinet&avatarId=36072",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=sbinet&avatarId=36072",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=sbinet&avatarId=36072",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=sbinet&avatarId=36072"
            },
            "displayName": "Sebastien Binet",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=sbinet",
            "name": "sbinet",
            "key": "sbinet",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=sbinet&avatarId=36072",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=sbinet&avatarId=36072",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=sbinet&avatarId=36072",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=sbinet&avatarId=36072"
            },
            "displayName": "Sebastien Binet",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "aggregateprogress": {
            "progress": 31800,
            "total": 31800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 31800,
            "total": 31800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-5640/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 53,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13240226/worklog/585520",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade opened a new pull request #10106:\nURL: https://github.com/apache/arrow/pull/10106\n\n\n   Took it upon myself to implement the Map Array type for Golang and uncomment the tests appropriately.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-20T02:25:42.498+0000",
                    "updated": "2021-04-20T02:25:42.498+0000",
                    "started": "2021-04-20T02:25:42.498+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "585520",
                    "issueId": "13240226"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13240226/worklog/585522",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #10106:\nURL: https://github.com/apache/arrow/pull/10106#issuecomment-822924052\n\n\n   https://issues.apache.org/jira/browse/ARROW-5640\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-20T02:26:11.500+0000",
                    "updated": "2021-04-20T02:26:11.500+0000",
                    "started": "2021-04-20T02:26:11.500+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "585522",
                    "issueId": "13240226"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13240226/worklog/585523",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on pull request #10106:\nURL: https://github.com/apache/arrow/pull/10106#issuecomment-822924120\n\n\n   Tagging @emkornfield @sbinet for visibility\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-20T02:26:26.878+0000",
                    "updated": "2021-04-20T02:26:26.878+0000",
                    "started": "2021-04-20T02:26:26.878+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "585523",
                    "issueId": "13240226"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13240226/worklog/585757",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "WilliamWhispell commented on a change in pull request #10106:\nURL: https://github.com/apache/arrow/pull/10106#discussion_r616629187\n\n\n\n##########\nFile path: go/arrow/array/builder.go\n##########\n@@ -277,6 +277,8 @@ func NewBuilder(mem memory.Allocator, dtype arrow.DataType) Builder {\n \tcase arrow.UNION:\n \tcase arrow.DICTIONARY:\n \tcase arrow.MAP:\n+\t\ttyp := dtype.(*arrow.MapType)\n\nReview comment:\n       Looks like in this change, you're only adding map support, but here you are changing union and dictionary to use the map builder. I'm not sure in this context the difference between map and dictionary.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-20T12:20:42.425+0000",
                    "updated": "2021-04-20T12:20:42.425+0000",
                    "started": "2021-04-20T12:20:42.424+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "585757",
                    "issueId": "13240226"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13240226/worklog/585758",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "WilliamWhispell commented on a change in pull request #10106:\nURL: https://github.com/apache/arrow/pull/10106#discussion_r616630446\n\n\n\n##########\nFile path: go/arrow/array/map.go\n##########\n@@ -0,0 +1,232 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package array // import \"github.com/apache/arrow/go/arrow/array\"\n+\n+import (\n+\t\"github.com/apache/arrow/go/arrow\"\n+\t\"github.com/apache/arrow/go/arrow/memory\"\n+)\n+\n+// Map represents an immutable sequence of Key/Value structs. It is a\n+// logical type that is implemented as a List<Struct: key, value>.\n+type Map struct {\n+\t*List\n+\tkeys, items Interface\n+}\n+\n+// NewMapData returns a new Map array value, from data\n+func NewMapData(data *Data) *Map {\n+\ta := &Map{List: &List{}}\n+\ta.refCount = 1\n+\ta.setData(data)\n+\treturn a\n+}\n+\n+// KeysSorted checks the datatype that was used to construct this array and\n+// returns the KeysSorted boolean value used to denote if the key array is\n+// sorted for each list element.\n+func (a *Map) KeysSorted() bool { return a.DataType().(*arrow.MapType).KeysSorted }\n+\n+func (a *Map) validateData(data *Data) {\n+\tif len(data.childData) != 1 || data.childData[0] == nil {\n+\t\tpanic(\"arrow/array: expected one child array for map array\")\n+\t}\n+\n+\tif data.childData[0].dtype.ID() != arrow.STRUCT {\n+\t\tpanic(\"arrow/array: map array child should be struct type\")\n+\t}\n+\n+\tif data.childData[0].NullN() != 0 {\n+\t\tpanic(\"arrow/array: map array child array should ahve no nulls\")\n\nReview comment:\n       typo\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-20T12:22:26.326+0000",
                    "updated": "2021-04-20T12:22:26.326+0000",
                    "started": "2021-04-20T12:22:26.325+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "585758",
                    "issueId": "13240226"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13240226/worklog/585759",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "WilliamWhispell commented on a change in pull request #10106:\nURL: https://github.com/apache/arrow/pull/10106#discussion_r616632364\n\n\n\n##########\nFile path: go/arrow/array/map.go\n##########\n@@ -0,0 +1,232 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package array // import \"github.com/apache/arrow/go/arrow/array\"\n+\n+import (\n+\t\"github.com/apache/arrow/go/arrow\"\n+\t\"github.com/apache/arrow/go/arrow/memory\"\n+)\n+\n+// Map represents an immutable sequence of Key/Value structs. It is a\n+// logical type that is implemented as a List<Struct: key, value>.\n+type Map struct {\n+\t*List\n+\tkeys, items Interface\n+}\n+\n+// NewMapData returns a new Map array value, from data\n+func NewMapData(data *Data) *Map {\n+\ta := &Map{List: &List{}}\n+\ta.refCount = 1\n+\ta.setData(data)\n+\treturn a\n+}\n+\n+// KeysSorted checks the datatype that was used to construct this array and\n+// returns the KeysSorted boolean value used to denote if the key array is\n+// sorted for each list element.\n+func (a *Map) KeysSorted() bool { return a.DataType().(*arrow.MapType).KeysSorted }\n+\n+func (a *Map) validateData(data *Data) {\n+\tif len(data.childData) != 1 || data.childData[0] == nil {\n+\t\tpanic(\"arrow/array: expected one child array for map array\")\n+\t}\n+\n+\tif data.childData[0].dtype.ID() != arrow.STRUCT {\n+\t\tpanic(\"arrow/array: map array child should be struct type\")\n+\t}\n+\n+\tif data.childData[0].NullN() != 0 {\n+\t\tpanic(\"arrow/array: map array child array should ahve no nulls\")\n+\t}\n+\n+\tif len(data.childData[0].childData) != 2 {\n+\t\tpanic(\"arrow/array: map array child array should have two fields\")\n+\t}\n+\n+\tif data.childData[0].childData[0].NullN() != 0 {\n+\t\tpanic(\"arrow/array: map array keys array should have no nulls\")\n+\t}\n+}\n+\n+func (a *Map) setData(data *Data) {\n+\ta.validateData(data)\n+\n+\ta.List.setData(data)\n+\ta.keys = MakeFromData(data.childData[0].childData[0])\n+\ta.items = MakeFromData(data.childData[0].childData[1])\n+}\n+\n+// Keys returns the full Array of Key values, equivalent to grabbing\n+// the key field of the child struct.\n+func (a *Map) Keys() Interface { return a.keys }\n+\n+// Items returns the full Array of Item values, equivalent to grabbing\n+// the Value field (the second field) of the child struct.\n+func (a *Map) Items() Interface { return a.items }\n+\n+func (a *Map) Retain() {\n+\ta.List.Retain()\n+\ta.keys.Retain()\n+\ta.items.Retain()\n+}\n+\n+func (a *Map) Release() {\n+\ta.List.Release()\n+\ta.keys.Release()\n+\ta.items.Release()\n+}\n+\n+func arrayEqualMap(left, right *Map) bool {\n+\t// since Map is implemented using a list, we can just use arrayEqualList\n+\treturn arrayEqualList(left.List, right.List)\n\nReview comment:\n       Would maps with the same key values, but in different orders be considered equal?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-20T12:25:12.465+0000",
                    "updated": "2021-04-20T12:25:12.465+0000",
                    "started": "2021-04-20T12:25:12.465+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "585759",
                    "issueId": "13240226"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13240226/worklog/585761",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "WilliamWhispell commented on a change in pull request #10106:\nURL: https://github.com/apache/arrow/pull/10106#discussion_r616634964\n\n\n\n##########\nFile path: go/arrow/array/map.go\n##########\n@@ -0,0 +1,232 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package array // import \"github.com/apache/arrow/go/arrow/array\"\n+\n+import (\n+\t\"github.com/apache/arrow/go/arrow\"\n+\t\"github.com/apache/arrow/go/arrow/memory\"\n+)\n+\n+// Map represents an immutable sequence of Key/Value structs. It is a\n+// logical type that is implemented as a List<Struct: key, value>.\n+type Map struct {\n+\t*List\n+\tkeys, items Interface\n+}\n+\n+// NewMapData returns a new Map array value, from data\n+func NewMapData(data *Data) *Map {\n+\ta := &Map{List: &List{}}\n+\ta.refCount = 1\n+\ta.setData(data)\n+\treturn a\n+}\n+\n+// KeysSorted checks the datatype that was used to construct this array and\n+// returns the KeysSorted boolean value used to denote if the key array is\n+// sorted for each list element.\n+func (a *Map) KeysSorted() bool { return a.DataType().(*arrow.MapType).KeysSorted }\n+\n+func (a *Map) validateData(data *Data) {\n+\tif len(data.childData) != 1 || data.childData[0] == nil {\n+\t\tpanic(\"arrow/array: expected one child array for map array\")\n+\t}\n+\n+\tif data.childData[0].dtype.ID() != arrow.STRUCT {\n+\t\tpanic(\"arrow/array: map array child should be struct type\")\n+\t}\n+\n+\tif data.childData[0].NullN() != 0 {\n+\t\tpanic(\"arrow/array: map array child array should ahve no nulls\")\n+\t}\n+\n+\tif len(data.childData[0].childData) != 2 {\n+\t\tpanic(\"arrow/array: map array child array should have two fields\")\n+\t}\n+\n+\tif data.childData[0].childData[0].NullN() != 0 {\n+\t\tpanic(\"arrow/array: map array keys array should have no nulls\")\n+\t}\n+}\n+\n+func (a *Map) setData(data *Data) {\n+\ta.validateData(data)\n+\n+\ta.List.setData(data)\n+\ta.keys = MakeFromData(data.childData[0].childData[0])\n+\ta.items = MakeFromData(data.childData[0].childData[1])\n+}\n+\n+// Keys returns the full Array of Key values, equivalent to grabbing\n+// the key field of the child struct.\n+func (a *Map) Keys() Interface { return a.keys }\n+\n+// Items returns the full Array of Item values, equivalent to grabbing\n+// the Value field (the second field) of the child struct.\n+func (a *Map) Items() Interface { return a.items }\n+\n+func (a *Map) Retain() {\n+\ta.List.Retain()\n+\ta.keys.Retain()\n+\ta.items.Retain()\n+}\n+\n+func (a *Map) Release() {\n+\ta.List.Release()\n+\ta.keys.Release()\n+\ta.items.Release()\n+}\n+\n+func arrayEqualMap(left, right *Map) bool {\n+\t// since Map is implemented using a list, we can just use arrayEqualList\n+\treturn arrayEqualList(left.List, right.List)\n+}\n+\n+type MapBuilder struct {\n+\tlistBuilder *ListBuilder\n+\n+\tetype                   arrow.DataType\n+\tkeytype, itemtype       arrow.DataType\n+\tkeyBuilder, itemBuilder Builder\n+\tkeysSorted              bool\n+}\n+\n+// NewMapBuilder returns a builder, using the provided memory allocator.\n+// The created Map builder will create a map array whose keys will be a non-nullable\n+// array of type `keytype` and whose mapped items will be a nullable array of itemtype.\n+func NewMapBuilder(mem memory.Allocator, keytype, itemtype arrow.DataType, keysSorted bool) *MapBuilder {\n+\tetype := arrow.MapOf(keytype, itemtype)\n+\tetype.KeysSorted = keysSorted\n+\tlistBldr := NewListBuilder(mem, etype.ValueType())\n+\tkeyBldr := listBldr.ValueBuilder().(*StructBuilder).FieldBuilder(0)\n+\tkeyBldr.Retain()\n+\titemBldr := listBldr.ValueBuilder().(*StructBuilder).FieldBuilder(1)\n+\titemBldr.Retain()\n+\treturn &MapBuilder{\n+\t\tlistBuilder: listBldr,\n+\t\tkeyBuilder:  keyBldr,\n+\t\titemBuilder: itemBldr,\n+\t\tetype:       etype,\n+\t\tkeytype:     keytype,\n+\t\titemtype:    itemtype,\n+\t\tkeysSorted:  keysSorted,\n+\t}\n+}\n+\n+func (b *MapBuilder) Retain() {\n+\tb.listBuilder.Retain()\n+\tb.keyBuilder.Retain()\n+\tb.itemBuilder.Retain()\n+}\n+\n+func (b *MapBuilder) Release() {\n+\tb.listBuilder.Release()\n+\tb.keyBuilder.Release()\n+\tb.itemBuilder.Release()\n+}\n+\n+// Len returns the current number of Maps that are in the builder\n+func (b *MapBuilder) Len() int { return b.listBuilder.Len() }\n+\n+func (b *MapBuilder) Cap() int   { return b.listBuilder.Cap() }\n+func (b *MapBuilder) NullN() int { return b.listBuilder.NullN() }\n+\n+// Append adds a new Map element to the array, calling Append(false) is\n+// equivalent to calling AppendNull.\n+func (b *MapBuilder) Append(v bool) {\n+\tb.adjustStructBuilderLen()\n+\tb.listBuilder.Append(v)\n+}\n+\n+// AppendNull adds a null map entry to the array.\n+func (b *MapBuilder) AppendNull() {\n+\tb.adjustStructBuilderLen()\n\nReview comment:\n       Could be b.Append(false)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-20T12:28:31.167+0000",
                    "updated": "2021-04-20T12:28:31.167+0000",
                    "started": "2021-04-20T12:28:31.167+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "585761",
                    "issueId": "13240226"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13240226/worklog/585765",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "WilliamWhispell commented on a change in pull request #10106:\nURL: https://github.com/apache/arrow/pull/10106#discussion_r616639139\n\n\n\n##########\nFile path: go/arrow/array/map_test.go\n##########\n@@ -0,0 +1,151 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package array_test\n+\n+import (\n+\t\"testing\"\n+\n+\t\"github.com/apache/arrow/go/arrow\"\n+\t\"github.com/apache/arrow/go/arrow/array\"\n+\t\"github.com/apache/arrow/go/arrow/memory\"\n+\t\"github.com/stretchr/testify/assert\"\n+)\n+\n+func TestMapArray(t *testing.T) {\n+\tpool := memory.NewCheckedAllocator(memory.NewGoAllocator())\n+\tdefer pool.AssertSize(t, 0)\n+\n+\tvar (\n+\t\tarr, equalArr, unequalArr *array.Map\n+\n+\t\tequalValid     = []bool{true, true, true, true, true, true, true}\n+\t\tequalOffsets   = []int32{0, 1, 2, 5, 6, 7, 8, 10}\n+\t\tequalKeys      = []string{\"a\", \"a\", \"a\", \"b\", \"c\", \"a\", \"a\", \"a\", \"a\", \"b\"}\n+\t\tequalValues    = []int32{1, 2, 3, 4, 5, 2, 2, 2, 5, 6}\n+\t\tunequalValid   = []bool{true, true, true}\n+\t\tunequalOffsets = []int32{0, 1, 4, 7}\n+\t\tunequalKeys    = []string{\"a\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\"}\n+\t\tunequalValues  = []int32{1, 2, 2, 2, 3, 4, 5}\n+\t)\n+\n+\tbldr := array.NewMapBuilder(pool, arrow.BinaryTypes.String, arrow.PrimitiveTypes.Int32, false)\n+\tdefer bldr.Release()\n+\n+\tkb := bldr.KeyBuilder().(*array.StringBuilder)\n+\tib := bldr.ItemBuilder().(*array.Int32Builder)\n+\n+\tbldr.AppendValues(equalOffsets, equalValid)\n+\tfor _, k := range equalKeys {\n+\t\tkb.Append(k)\n+\t}\n+\tib.AppendValues(equalValues, nil)\n+\n+\tassert.Equal(t, len(equalValid), bldr.Len())\n+\tassert.Zero(t, bldr.NullN())\n+\n+\tarr = bldr.NewMapArray()\n+\tdefer arr.Release()\n+\n+\tbldr.AppendValues(equalOffsets, equalValid)\n+\tfor _, k := range equalKeys {\n+\t\tkb.Append(k)\n+\t}\n+\tib.AppendValues(equalValues, nil)\n+\n+\tequalArr = bldr.NewMapArray()\n+\tdefer equalArr.Release()\n+\n+\tbldr.AppendValues(unequalOffsets, unequalValid)\n+\tfor _, k := range unequalKeys {\n+\t\tkb.Append(k)\n+\t}\n+\tib.AppendValues(unequalValues, nil)\n+\n+\tunequalArr = bldr.NewMapArray()\n+\tdefer unequalArr.Release()\n+\n+\tassert.True(t, array.ArrayEqual(arr, arr))\n+\tassert.True(t, array.ArrayEqual(arr, equalArr))\n+\tassert.True(t, array.ArrayEqual(equalArr, arr))\n+\tassert.False(t, array.ArrayEqual(equalArr, unequalArr))\n+\tassert.False(t, array.ArrayEqual(unequalArr, equalArr))\n+\n+\t// assert.True(t, array.ArraySliceEqual(arr, 0, 1, unequalArr, 0, 1))\n\nReview comment:\n       why are these commented out?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-20T12:34:15.149+0000",
                    "updated": "2021-04-20T12:34:15.149+0000",
                    "started": "2021-04-20T12:34:15.149+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "585765",
                    "issueId": "13240226"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13240226/worklog/585767",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "WilliamWhispell commented on a change in pull request #10106:\nURL: https://github.com/apache/arrow/pull/10106#discussion_r616639481\n\n\n\n##########\nFile path: go/arrow/array/map_test.go\n##########\n@@ -0,0 +1,151 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package array_test\n+\n+import (\n+\t\"testing\"\n+\n+\t\"github.com/apache/arrow/go/arrow\"\n+\t\"github.com/apache/arrow/go/arrow/array\"\n+\t\"github.com/apache/arrow/go/arrow/memory\"\n+\t\"github.com/stretchr/testify/assert\"\n+)\n+\n+func TestMapArray(t *testing.T) {\n+\tpool := memory.NewCheckedAllocator(memory.NewGoAllocator())\n+\tdefer pool.AssertSize(t, 0)\n+\n+\tvar (\n+\t\tarr, equalArr, unequalArr *array.Map\n+\n+\t\tequalValid     = []bool{true, true, true, true, true, true, true}\n+\t\tequalOffsets   = []int32{0, 1, 2, 5, 6, 7, 8, 10}\n+\t\tequalKeys      = []string{\"a\", \"a\", \"a\", \"b\", \"c\", \"a\", \"a\", \"a\", \"a\", \"b\"}\n+\t\tequalValues    = []int32{1, 2, 3, 4, 5, 2, 2, 2, 5, 6}\n+\t\tunequalValid   = []bool{true, true, true}\n+\t\tunequalOffsets = []int32{0, 1, 4, 7}\n+\t\tunequalKeys    = []string{\"a\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\"}\n+\t\tunequalValues  = []int32{1, 2, 2, 2, 3, 4, 5}\n+\t)\n+\n+\tbldr := array.NewMapBuilder(pool, arrow.BinaryTypes.String, arrow.PrimitiveTypes.Int32, false)\n+\tdefer bldr.Release()\n+\n+\tkb := bldr.KeyBuilder().(*array.StringBuilder)\n+\tib := bldr.ItemBuilder().(*array.Int32Builder)\n+\n+\tbldr.AppendValues(equalOffsets, equalValid)\n+\tfor _, k := range equalKeys {\n+\t\tkb.Append(k)\n+\t}\n+\tib.AppendValues(equalValues, nil)\n+\n+\tassert.Equal(t, len(equalValid), bldr.Len())\n+\tassert.Zero(t, bldr.NullN())\n+\n+\tarr = bldr.NewMapArray()\n+\tdefer arr.Release()\n+\n+\tbldr.AppendValues(equalOffsets, equalValid)\n+\tfor _, k := range equalKeys {\n+\t\tkb.Append(k)\n+\t}\n+\tib.AppendValues(equalValues, nil)\n+\n+\tequalArr = bldr.NewMapArray()\n+\tdefer equalArr.Release()\n+\n+\tbldr.AppendValues(unequalOffsets, unequalValid)\n+\tfor _, k := range unequalKeys {\n+\t\tkb.Append(k)\n+\t}\n+\tib.AppendValues(unequalValues, nil)\n+\n+\tunequalArr = bldr.NewMapArray()\n+\tdefer unequalArr.Release()\n+\n+\tassert.True(t, array.ArrayEqual(arr, arr))\n+\tassert.True(t, array.ArrayEqual(arr, equalArr))\n+\tassert.True(t, array.ArrayEqual(equalArr, arr))\n+\tassert.False(t, array.ArrayEqual(equalArr, unequalArr))\n+\tassert.False(t, array.ArrayEqual(unequalArr, equalArr))\n+\n+\t// assert.True(t, array.ArraySliceEqual(arr, 0, 1, unequalArr, 0, 1))\n\nReview comment:\n       why are these commented out?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-20T12:34:39.591+0000",
                    "updated": "2021-04-20T12:34:39.591+0000",
                    "started": "2021-04-20T12:34:39.591+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "585767",
                    "issueId": "13240226"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13240226/worklog/585792",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on a change in pull request #10106:\nURL: https://github.com/apache/arrow/pull/10106#discussion_r616674653\n\n\n\n##########\nFile path: go/arrow/array/builder.go\n##########\n@@ -277,6 +277,8 @@ func NewBuilder(mem memory.Allocator, dtype arrow.DataType) Builder {\n \tcase arrow.UNION:\n \tcase arrow.DICTIONARY:\n \tcase arrow.MAP:\n+\t\ttyp := dtype.(*arrow.MapType)\n\nReview comment:\n       you're still thinking in C++ context. Go doesn't automatically fallthrough like C++, this *only* modifies the Map case, it doesn't change anything about Union or Dictionary.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-20T13:19:12.776+0000",
                    "updated": "2021-04-20T13:19:12.776+0000",
                    "started": "2021-04-20T13:19:12.775+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "585792",
                    "issueId": "13240226"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13240226/worklog/585796",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on a change in pull request #10106:\nURL: https://github.com/apache/arrow/pull/10106#discussion_r616682988\n\n\n\n##########\nFile path: go/arrow/array/map.go\n##########\n@@ -0,0 +1,232 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package array // import \"github.com/apache/arrow/go/arrow/array\"\n+\n+import (\n+\t\"github.com/apache/arrow/go/arrow\"\n+\t\"github.com/apache/arrow/go/arrow/memory\"\n+)\n+\n+// Map represents an immutable sequence of Key/Value structs. It is a\n+// logical type that is implemented as a List<Struct: key, value>.\n+type Map struct {\n+\t*List\n+\tkeys, items Interface\n+}\n+\n+// NewMapData returns a new Map array value, from data\n+func NewMapData(data *Data) *Map {\n+\ta := &Map{List: &List{}}\n+\ta.refCount = 1\n+\ta.setData(data)\n+\treturn a\n+}\n+\n+// KeysSorted checks the datatype that was used to construct this array and\n+// returns the KeysSorted boolean value used to denote if the key array is\n+// sorted for each list element.\n+func (a *Map) KeysSorted() bool { return a.DataType().(*arrow.MapType).KeysSorted }\n+\n+func (a *Map) validateData(data *Data) {\n+\tif len(data.childData) != 1 || data.childData[0] == nil {\n+\t\tpanic(\"arrow/array: expected one child array for map array\")\n+\t}\n+\n+\tif data.childData[0].dtype.ID() != arrow.STRUCT {\n+\t\tpanic(\"arrow/array: map array child should be struct type\")\n+\t}\n+\n+\tif data.childData[0].NullN() != 0 {\n+\t\tpanic(\"arrow/array: map array child array should ahve no nulls\")\n\nReview comment:\n       fixed\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-20T13:28:37.950+0000",
                    "updated": "2021-04-20T13:28:37.950+0000",
                    "started": "2021-04-20T13:28:37.949+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "585796",
                    "issueId": "13240226"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13240226/worklog/585797",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on a change in pull request #10106:\nURL: https://github.com/apache/arrow/pull/10106#discussion_r616683122\n\n\n\n##########\nFile path: go/arrow/array/map.go\n##########\n@@ -0,0 +1,232 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package array // import \"github.com/apache/arrow/go/arrow/array\"\n+\n+import (\n+\t\"github.com/apache/arrow/go/arrow\"\n+\t\"github.com/apache/arrow/go/arrow/memory\"\n+)\n+\n+// Map represents an immutable sequence of Key/Value structs. It is a\n+// logical type that is implemented as a List<Struct: key, value>.\n+type Map struct {\n+\t*List\n+\tkeys, items Interface\n+}\n+\n+// NewMapData returns a new Map array value, from data\n+func NewMapData(data *Data) *Map {\n+\ta := &Map{List: &List{}}\n+\ta.refCount = 1\n+\ta.setData(data)\n+\treturn a\n+}\n+\n+// KeysSorted checks the datatype that was used to construct this array and\n+// returns the KeysSorted boolean value used to denote if the key array is\n+// sorted for each list element.\n+func (a *Map) KeysSorted() bool { return a.DataType().(*arrow.MapType).KeysSorted }\n+\n+func (a *Map) validateData(data *Data) {\n+\tif len(data.childData) != 1 || data.childData[0] == nil {\n+\t\tpanic(\"arrow/array: expected one child array for map array\")\n+\t}\n+\n+\tif data.childData[0].dtype.ID() != arrow.STRUCT {\n+\t\tpanic(\"arrow/array: map array child should be struct type\")\n+\t}\n+\n+\tif data.childData[0].NullN() != 0 {\n+\t\tpanic(\"arrow/array: map array child array should ahve no nulls\")\n+\t}\n+\n+\tif len(data.childData[0].childData) != 2 {\n+\t\tpanic(\"arrow/array: map array child array should have two fields\")\n+\t}\n+\n+\tif data.childData[0].childData[0].NullN() != 0 {\n+\t\tpanic(\"arrow/array: map array keys array should have no nulls\")\n+\t}\n+}\n+\n+func (a *Map) setData(data *Data) {\n+\ta.validateData(data)\n+\n+\ta.List.setData(data)\n+\ta.keys = MakeFromData(data.childData[0].childData[0])\n+\ta.items = MakeFromData(data.childData[0].childData[1])\n+}\n+\n+// Keys returns the full Array of Key values, equivalent to grabbing\n+// the key field of the child struct.\n+func (a *Map) Keys() Interface { return a.keys }\n+\n+// Items returns the full Array of Item values, equivalent to grabbing\n+// the Value field (the second field) of the child struct.\n+func (a *Map) Items() Interface { return a.items }\n+\n+func (a *Map) Retain() {\n+\ta.List.Retain()\n+\ta.keys.Retain()\n+\ta.items.Retain()\n+}\n+\n+func (a *Map) Release() {\n+\ta.List.Release()\n+\ta.keys.Release()\n+\ta.items.Release()\n+}\n+\n+func arrayEqualMap(left, right *Map) bool {\n+\t// since Map is implemented using a list, we can just use arrayEqualList\n+\treturn arrayEqualList(left.List, right.List)\n+}\n+\n+type MapBuilder struct {\n+\tlistBuilder *ListBuilder\n+\n+\tetype                   arrow.DataType\n+\tkeytype, itemtype       arrow.DataType\n+\tkeyBuilder, itemBuilder Builder\n+\tkeysSorted              bool\n+}\n+\n+// NewMapBuilder returns a builder, using the provided memory allocator.\n+// The created Map builder will create a map array whose keys will be a non-nullable\n+// array of type `keytype` and whose mapped items will be a nullable array of itemtype.\n+func NewMapBuilder(mem memory.Allocator, keytype, itemtype arrow.DataType, keysSorted bool) *MapBuilder {\n+\tetype := arrow.MapOf(keytype, itemtype)\n+\tetype.KeysSorted = keysSorted\n+\tlistBldr := NewListBuilder(mem, etype.ValueType())\n+\tkeyBldr := listBldr.ValueBuilder().(*StructBuilder).FieldBuilder(0)\n+\tkeyBldr.Retain()\n+\titemBldr := listBldr.ValueBuilder().(*StructBuilder).FieldBuilder(1)\n+\titemBldr.Retain()\n+\treturn &MapBuilder{\n+\t\tlistBuilder: listBldr,\n+\t\tkeyBuilder:  keyBldr,\n+\t\titemBuilder: itemBldr,\n+\t\tetype:       etype,\n+\t\tkeytype:     keytype,\n+\t\titemtype:    itemtype,\n+\t\tkeysSorted:  keysSorted,\n+\t}\n+}\n+\n+func (b *MapBuilder) Retain() {\n+\tb.listBuilder.Retain()\n+\tb.keyBuilder.Retain()\n+\tb.itemBuilder.Retain()\n+}\n+\n+func (b *MapBuilder) Release() {\n+\tb.listBuilder.Release()\n+\tb.keyBuilder.Release()\n+\tb.itemBuilder.Release()\n+}\n+\n+// Len returns the current number of Maps that are in the builder\n+func (b *MapBuilder) Len() int { return b.listBuilder.Len() }\n+\n+func (b *MapBuilder) Cap() int   { return b.listBuilder.Cap() }\n+func (b *MapBuilder) NullN() int { return b.listBuilder.NullN() }\n+\n+// Append adds a new Map element to the array, calling Append(false) is\n+// equivalent to calling AppendNull.\n+func (b *MapBuilder) Append(v bool) {\n+\tb.adjustStructBuilderLen()\n+\tb.listBuilder.Append(v)\n+}\n+\n+// AppendNull adds a null map entry to the array.\n+func (b *MapBuilder) AppendNull() {\n+\tb.adjustStructBuilderLen()\n\nReview comment:\n       done\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-20T13:28:50.950+0000",
                    "updated": "2021-04-20T13:28:50.950+0000",
                    "started": "2021-04-20T13:28:50.950+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "585797",
                    "issueId": "13240226"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13240226/worklog/585798",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on a change in pull request #10106:\nURL: https://github.com/apache/arrow/pull/10106#discussion_r616683513\n\n\n\n##########\nFile path: go/arrow/array/map_test.go\n##########\n@@ -0,0 +1,151 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package array_test\n+\n+import (\n+\t\"testing\"\n+\n+\t\"github.com/apache/arrow/go/arrow\"\n+\t\"github.com/apache/arrow/go/arrow/array\"\n+\t\"github.com/apache/arrow/go/arrow/memory\"\n+\t\"github.com/stretchr/testify/assert\"\n+)\n+\n+func TestMapArray(t *testing.T) {\n+\tpool := memory.NewCheckedAllocator(memory.NewGoAllocator())\n+\tdefer pool.AssertSize(t, 0)\n+\n+\tvar (\n+\t\tarr, equalArr, unequalArr *array.Map\n+\n+\t\tequalValid     = []bool{true, true, true, true, true, true, true}\n+\t\tequalOffsets   = []int32{0, 1, 2, 5, 6, 7, 8, 10}\n+\t\tequalKeys      = []string{\"a\", \"a\", \"a\", \"b\", \"c\", \"a\", \"a\", \"a\", \"a\", \"b\"}\n+\t\tequalValues    = []int32{1, 2, 3, 4, 5, 2, 2, 2, 5, 6}\n+\t\tunequalValid   = []bool{true, true, true}\n+\t\tunequalOffsets = []int32{0, 1, 4, 7}\n+\t\tunequalKeys    = []string{\"a\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\"}\n+\t\tunequalValues  = []int32{1, 2, 2, 2, 3, 4, 5}\n+\t)\n+\n+\tbldr := array.NewMapBuilder(pool, arrow.BinaryTypes.String, arrow.PrimitiveTypes.Int32, false)\n+\tdefer bldr.Release()\n+\n+\tkb := bldr.KeyBuilder().(*array.StringBuilder)\n+\tib := bldr.ItemBuilder().(*array.Int32Builder)\n+\n+\tbldr.AppendValues(equalOffsets, equalValid)\n+\tfor _, k := range equalKeys {\n+\t\tkb.Append(k)\n+\t}\n+\tib.AppendValues(equalValues, nil)\n+\n+\tassert.Equal(t, len(equalValid), bldr.Len())\n+\tassert.Zero(t, bldr.NullN())\n+\n+\tarr = bldr.NewMapArray()\n+\tdefer arr.Release()\n+\n+\tbldr.AppendValues(equalOffsets, equalValid)\n+\tfor _, k := range equalKeys {\n+\t\tkb.Append(k)\n+\t}\n+\tib.AppendValues(equalValues, nil)\n+\n+\tequalArr = bldr.NewMapArray()\n+\tdefer equalArr.Release()\n+\n+\tbldr.AppendValues(unequalOffsets, unequalValid)\n+\tfor _, k := range unequalKeys {\n+\t\tkb.Append(k)\n+\t}\n+\tib.AppendValues(unequalValues, nil)\n+\n+\tunequalArr = bldr.NewMapArray()\n+\tdefer unequalArr.Release()\n+\n+\tassert.True(t, array.ArrayEqual(arr, arr))\n+\tassert.True(t, array.ArrayEqual(arr, equalArr))\n+\tassert.True(t, array.ArrayEqual(equalArr, arr))\n+\tassert.False(t, array.ArrayEqual(equalArr, unequalArr))\n+\tassert.False(t, array.ArrayEqual(unequalArr, equalArr))\n+\n+\t// assert.True(t, array.ArraySliceEqual(arr, 0, 1, unequalArr, 0, 1))\n\nReview comment:\n       forgot to uncomment when testing something. :) Uncommented now.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-20T13:29:14.187+0000",
                    "updated": "2021-04-20T13:29:14.187+0000",
                    "started": "2021-04-20T13:29:14.186+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "585798",
                    "issueId": "13240226"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13240226/worklog/585799",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on a change in pull request #10106:\nURL: https://github.com/apache/arrow/pull/10106#discussion_r616684275\n\n\n\n##########\nFile path: go/arrow/array/map.go\n##########\n@@ -0,0 +1,232 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package array // import \"github.com/apache/arrow/go/arrow/array\"\n+\n+import (\n+\t\"github.com/apache/arrow/go/arrow\"\n+\t\"github.com/apache/arrow/go/arrow/memory\"\n+)\n+\n+// Map represents an immutable sequence of Key/Value structs. It is a\n+// logical type that is implemented as a List<Struct: key, value>.\n+type Map struct {\n+\t*List\n+\tkeys, items Interface\n+}\n+\n+// NewMapData returns a new Map array value, from data\n+func NewMapData(data *Data) *Map {\n+\ta := &Map{List: &List{}}\n+\ta.refCount = 1\n+\ta.setData(data)\n+\treturn a\n+}\n+\n+// KeysSorted checks the datatype that was used to construct this array and\n+// returns the KeysSorted boolean value used to denote if the key array is\n+// sorted for each list element.\n+func (a *Map) KeysSorted() bool { return a.DataType().(*arrow.MapType).KeysSorted }\n+\n+func (a *Map) validateData(data *Data) {\n+\tif len(data.childData) != 1 || data.childData[0] == nil {\n+\t\tpanic(\"arrow/array: expected one child array for map array\")\n+\t}\n+\n+\tif data.childData[0].dtype.ID() != arrow.STRUCT {\n+\t\tpanic(\"arrow/array: map array child should be struct type\")\n+\t}\n+\n+\tif data.childData[0].NullN() != 0 {\n+\t\tpanic(\"arrow/array: map array child array should ahve no nulls\")\n+\t}\n+\n+\tif len(data.childData[0].childData) != 2 {\n+\t\tpanic(\"arrow/array: map array child array should have two fields\")\n+\t}\n+\n+\tif data.childData[0].childData[0].NullN() != 0 {\n+\t\tpanic(\"arrow/array: map array keys array should have no nulls\")\n+\t}\n+}\n+\n+func (a *Map) setData(data *Data) {\n+\ta.validateData(data)\n+\n+\ta.List.setData(data)\n+\ta.keys = MakeFromData(data.childData[0].childData[0])\n+\ta.items = MakeFromData(data.childData[0].childData[1])\n+}\n+\n+// Keys returns the full Array of Key values, equivalent to grabbing\n+// the key field of the child struct.\n+func (a *Map) Keys() Interface { return a.keys }\n+\n+// Items returns the full Array of Item values, equivalent to grabbing\n+// the Value field (the second field) of the child struct.\n+func (a *Map) Items() Interface { return a.items }\n+\n+func (a *Map) Retain() {\n+\ta.List.Retain()\n+\ta.keys.Retain()\n+\ta.items.Retain()\n+}\n+\n+func (a *Map) Release() {\n+\ta.List.Release()\n+\ta.keys.Release()\n+\ta.items.Release()\n+}\n+\n+func arrayEqualMap(left, right *Map) bool {\n+\t// since Map is implemented using a list, we can just use arrayEqualList\n+\treturn arrayEqualList(left.List, right.List)\n\nReview comment:\n       Currently they would not, and as far as I can tell that seems consistent with other implementations. Someone else can tell me if i'm wrong there.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-20T13:30:07.656+0000",
                    "updated": "2021-04-20T13:30:07.656+0000",
                    "started": "2021-04-20T13:30:07.656+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "585799",
                    "issueId": "13240226"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13240226/worklog/585811",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "WilliamWhispell commented on a change in pull request #10106:\nURL: https://github.com/apache/arrow/pull/10106#discussion_r616707015\n\n\n\n##########\nFile path: go/arrow/array/builder.go\n##########\n@@ -277,6 +277,8 @@ func NewBuilder(mem memory.Allocator, dtype arrow.DataType) Builder {\n \tcase arrow.UNION:\n \tcase arrow.DICTIONARY:\n \tcase arrow.MAP:\n+\t\ttyp := dtype.(*arrow.MapType)\n\nReview comment:\n       ahh thanks\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-20T13:55:32.905+0000",
                    "updated": "2021-04-20T13:55:32.905+0000",
                    "started": "2021-04-20T13:55:32.904+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "585811",
                    "issueId": "13240226"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13240226/worklog/585845",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ggodik commented on a change in pull request #10106:\nURL: https://github.com/apache/arrow/pull/10106#discussion_r616735374\n\n\n\n##########\nFile path: go/arrow/array/map.go\n##########\n@@ -0,0 +1,231 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package array // import \"github.com/apache/arrow/go/arrow/array\"\n+\n+import (\n+\t\"github.com/apache/arrow/go/arrow\"\n+\t\"github.com/apache/arrow/go/arrow/memory\"\n+)\n+\n+// Map represents an immutable sequence of Key/Value structs. It is a\n+// logical type that is implemented as a List<Struct: key, value>.\n+type Map struct {\n+\t*List\n+\tkeys, items Interface\n+}\n+\n+// NewMapData returns a new Map array value, from data\n+func NewMapData(data *Data) *Map {\n+\ta := &Map{List: &List{}}\n+\ta.refCount = 1\n+\ta.setData(data)\n+\treturn a\n+}\n+\n+// KeysSorted checks the datatype that was used to construct this array and\n+// returns the KeysSorted boolean value used to denote if the key array is\n+// sorted for each list element.\n+func (a *Map) KeysSorted() bool { return a.DataType().(*arrow.MapType).KeysSorted }\n+\n+func (a *Map) validateData(data *Data) {\n+\tif len(data.childData) != 1 || data.childData[0] == nil {\n+\t\tpanic(\"arrow/array: expected one child array for map array\")\n+\t}\n+\n+\tif data.childData[0].dtype.ID() != arrow.STRUCT {\n+\t\tpanic(\"arrow/array: map array child should be struct type\")\n+\t}\n+\n+\tif data.childData[0].NullN() != 0 {\n+\t\tpanic(\"arrow/array: map array child array should have no nulls\")\n+\t}\n+\n+\tif len(data.childData[0].childData) != 2 {\n+\t\tpanic(\"arrow/array: map array child array should have two fields\")\n\nReview comment:\n       are the panics necessary here ? is this common in arrow/go ?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-20T14:25:19.254+0000",
                    "updated": "2021-04-20T14:25:19.254+0000",
                    "started": "2021-04-20T14:25:19.254+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "585845",
                    "issueId": "13240226"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13240226/worklog/585877",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on a change in pull request #10106:\nURL: https://github.com/apache/arrow/pull/10106#discussion_r616744995\n\n\n\n##########\nFile path: go/arrow/array/map.go\n##########\n@@ -0,0 +1,231 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package array // import \"github.com/apache/arrow/go/arrow/array\"\n+\n+import (\n+\t\"github.com/apache/arrow/go/arrow\"\n+\t\"github.com/apache/arrow/go/arrow/memory\"\n+)\n+\n+// Map represents an immutable sequence of Key/Value structs. It is a\n+// logical type that is implemented as a List<Struct: key, value>.\n+type Map struct {\n+\t*List\n+\tkeys, items Interface\n+}\n+\n+// NewMapData returns a new Map array value, from data\n+func NewMapData(data *Data) *Map {\n+\ta := &Map{List: &List{}}\n+\ta.refCount = 1\n+\ta.setData(data)\n+\treturn a\n+}\n+\n+// KeysSorted checks the datatype that was used to construct this array and\n+// returns the KeysSorted boolean value used to denote if the key array is\n+// sorted for each list element.\n+func (a *Map) KeysSorted() bool { return a.DataType().(*arrow.MapType).KeysSorted }\n+\n+func (a *Map) validateData(data *Data) {\n+\tif len(data.childData) != 1 || data.childData[0] == nil {\n+\t\tpanic(\"arrow/array: expected one child array for map array\")\n+\t}\n+\n+\tif data.childData[0].dtype.ID() != arrow.STRUCT {\n+\t\tpanic(\"arrow/array: map array child should be struct type\")\n+\t}\n+\n+\tif data.childData[0].NullN() != 0 {\n+\t\tpanic(\"arrow/array: map array child array should have no nulls\")\n+\t}\n+\n+\tif len(data.childData[0].childData) != 2 {\n+\t\tpanic(\"arrow/array: map array child array should have two fields\")\n\nReview comment:\n       yea, just following the pattern that is used elsewhere. Until the version tags are added properly as part of the release process here I can't change that because it would require adding \"error\" returns that would be breaking changes in order to get rid of the panics.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-20T14:35:41.303+0000",
                    "updated": "2021-04-20T14:35:41.303+0000",
                    "started": "2021-04-20T14:35:41.303+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "585877",
                    "issueId": "13240226"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13240226/worklog/587984",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on pull request #10106:\nURL: https://github.com/apache/arrow/pull/10106#issuecomment-825782614\n\n\n   bump for reviews and hopefully merges\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-23T16:45:31.513+0000",
                    "updated": "2021-04-23T16:45:31.513+0000",
                    "started": "2021-04-23T16:45:31.513+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "587984",
                    "issueId": "13240226"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13240226/worklog/588000",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "quinnj commented on a change in pull request #10106:\nURL: https://github.com/apache/arrow/pull/10106#discussion_r619372303\n\n\n\n##########\nFile path: go/arrow/array/map.go\n##########\n@@ -0,0 +1,232 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package array // import \"github.com/apache/arrow/go/arrow/array\"\n+\n+import (\n+\t\"github.com/apache/arrow/go/arrow\"\n+\t\"github.com/apache/arrow/go/arrow/memory\"\n+)\n+\n+// Map represents an immutable sequence of Key/Value structs. It is a\n+// logical type that is implemented as a List<Struct: key, value>.\n+type Map struct {\n+\t*List\n+\tkeys, items Interface\n+}\n+\n+// NewMapData returns a new Map array value, from data\n+func NewMapData(data *Data) *Map {\n+\ta := &Map{List: &List{}}\n+\ta.refCount = 1\n+\ta.setData(data)\n+\treturn a\n+}\n+\n+// KeysSorted checks the datatype that was used to construct this array and\n+// returns the KeysSorted boolean value used to denote if the key array is\n+// sorted for each list element.\n+func (a *Map) KeysSorted() bool { return a.DataType().(*arrow.MapType).KeysSorted }\n+\n+func (a *Map) validateData(data *Data) {\n+\tif len(data.childData) != 1 || data.childData[0] == nil {\n+\t\tpanic(\"arrow/array: expected one child array for map array\")\n+\t}\n+\n+\tif data.childData[0].dtype.ID() != arrow.STRUCT {\n+\t\tpanic(\"arrow/array: map array child should be struct type\")\n+\t}\n+\n+\tif data.childData[0].NullN() != 0 {\n+\t\tpanic(\"arrow/array: map array child array should ahve no nulls\")\n+\t}\n+\n+\tif len(data.childData[0].childData) != 2 {\n+\t\tpanic(\"arrow/array: map array child array should have two fields\")\n+\t}\n+\n+\tif data.childData[0].childData[0].NullN() != 0 {\n+\t\tpanic(\"arrow/array: map array keys array should have no nulls\")\n+\t}\n+}\n+\n+func (a *Map) setData(data *Data) {\n+\ta.validateData(data)\n+\n+\ta.List.setData(data)\n+\ta.keys = MakeFromData(data.childData[0].childData[0])\n+\ta.items = MakeFromData(data.childData[0].childData[1])\n+}\n+\n+// Keys returns the full Array of Key values, equivalent to grabbing\n+// the key field of the child struct.\n+func (a *Map) Keys() Interface { return a.keys }\n+\n+// Items returns the full Array of Item values, equivalent to grabbing\n+// the Value field (the second field) of the child struct.\n+func (a *Map) Items() Interface { return a.items }\n+\n+func (a *Map) Retain() {\n+\ta.List.Retain()\n+\ta.keys.Retain()\n+\ta.items.Retain()\n+}\n+\n+func (a *Map) Release() {\n+\ta.List.Release()\n+\ta.keys.Release()\n+\ta.items.Release()\n+}\n+\n+func arrayEqualMap(left, right *Map) bool {\n+\t// since Map is implemented using a list, we can just use arrayEqualList\n+\treturn arrayEqualList(left.List, right.List)\n\nReview comment:\n       Yeah, I don't see anywhere in the spec docs or cod that mentions `keysSorted` with regards to comparison\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-23T17:04:17.726+0000",
                    "updated": "2021-04-23T17:04:17.726+0000",
                    "started": "2021-04-23T17:04:17.726+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "588000",
                    "issueId": "13240226"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13240226/worklog/588577",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #10106:\nURL: https://github.com/apache/arrow/pull/10106#discussion_r619876807\n\n\n\n##########\nFile path: go/arrow/array/map.go\n##########\n@@ -0,0 +1,232 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package array // import \"github.com/apache/arrow/go/arrow/array\"\n+\n+import (\n+\t\"github.com/apache/arrow/go/arrow\"\n+\t\"github.com/apache/arrow/go/arrow/memory\"\n+)\n+\n+// Map represents an immutable sequence of Key/Value structs. It is a\n+// logical type that is implemented as a List<Struct: key, value>.\n+type Map struct {\n+\t*List\n+\tkeys, items Interface\n+}\n+\n+// NewMapData returns a new Map array value, from data\n+func NewMapData(data *Data) *Map {\n+\ta := &Map{List: &List{}}\n+\ta.refCount = 1\n+\ta.setData(data)\n+\treturn a\n+}\n+\n+// KeysSorted checks the datatype that was used to construct this array and\n+// returns the KeysSorted boolean value used to denote if the key array is\n+// sorted for each list element.\n+func (a *Map) KeysSorted() bool { return a.DataType().(*arrow.MapType).KeysSorted }\n+\n+func (a *Map) validateData(data *Data) {\n+\tif len(data.childData) != 1 || data.childData[0] == nil {\n+\t\tpanic(\"arrow/array: expected one child array for map array\")\n+\t}\n+\n+\tif data.childData[0].dtype.ID() != arrow.STRUCT {\n+\t\tpanic(\"arrow/array: map array child should be struct type\")\n+\t}\n+\n+\tif data.childData[0].NullN() != 0 {\n+\t\tpanic(\"arrow/array: map array child array should ahve no nulls\")\n+\t}\n+\n+\tif len(data.childData[0].childData) != 2 {\n+\t\tpanic(\"arrow/array: map array child array should have two fields\")\n+\t}\n+\n+\tif data.childData[0].childData[0].NullN() != 0 {\n+\t\tpanic(\"arrow/array: map array keys array should have no nulls\")\n+\t}\n+}\n+\n+func (a *Map) setData(data *Data) {\n+\ta.validateData(data)\n+\n+\ta.List.setData(data)\n+\ta.keys = MakeFromData(data.childData[0].childData[0])\n+\ta.items = MakeFromData(data.childData[0].childData[1])\n+}\n+\n+// Keys returns the full Array of Key values, equivalent to grabbing\n+// the key field of the child struct.\n+func (a *Map) Keys() Interface { return a.keys }\n+\n+// Items returns the full Array of Item values, equivalent to grabbing\n+// the Value field (the second field) of the child struct.\n+func (a *Map) Items() Interface { return a.items }\n+\n+func (a *Map) Retain() {\n+\ta.List.Retain()\n+\ta.keys.Retain()\n+\ta.items.Retain()\n+}\n+\n+func (a *Map) Release() {\n+\ta.List.Release()\n+\ta.keys.Release()\n+\ta.items.Release()\n+}\n+\n+func arrayEqualMap(left, right *Map) bool {\n+\t// since Map is implemented using a list, we can just use arrayEqualList\n+\treturn arrayEqualList(left.List, right.List)\n\nReview comment:\n       it isn't.  To my knowledge the keySorted doesn't have strong semantics other than to indicate the keys follow some logical ordering.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-25T20:57:05.728+0000",
                    "updated": "2021-04-25T20:57:05.728+0000",
                    "started": "2021-04-25T20:57:05.728+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "588577",
                    "issueId": "13240226"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 31800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@1241f473[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@597d3b72[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@16659c3e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@2673932b[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6cbcee0d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@37e7f0cb[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@d591e65[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@37893e2e[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3cce7254[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@34a7acae[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@71c82669[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@fce1e30[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 31800,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Apr 28 15:59:37 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-04-28T15:59:37.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-5640/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2019-06-18T15:06:21.000+0000",
        "updated": "2021-09-29T16:38:04.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "8h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 31800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Go] implement Map array",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13240226/comment/17334829",
                    "id": "17334829",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield",
                        "name": "emkornfield",
                        "key": "emkornfield",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Micah Kornfield",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Issue resolved by pull request 10106\n[https://github.com/apache/arrow/pull/10106]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield",
                        "name": "emkornfield",
                        "key": "emkornfield",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Micah Kornfield",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2021-04-28T15:59:37.985+0000",
                    "updated": "2021-04-28T15:59:37.985+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z03v9k:",
        "customfield_12314139": null
    }
}