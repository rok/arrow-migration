{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13246940",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13246940",
    "key": "ARROW-6030",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12345978",
                "id": "12345978",
                "description": "",
                "name": "0.15.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-10-05"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=fan_li_ya",
            "name": "fan_li_ya",
            "key": "fan_li_ya",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Liya Fan",
            "active": true,
            "timeZone": "Asia/Shanghai"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328933",
                "id": "12328933",
                "name": "Java"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=fan_li_ya",
            "name": "fan_li_ya",
            "key": "fan_li_ya",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Liya Fan",
            "active": true,
            "timeZone": "Asia/Shanghai"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=fan_li_ya",
            "name": "fan_li_ya",
            "key": "fan_li_ya",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Liya Fan",
            "active": true,
            "timeZone": "Asia/Shanghai"
        },
        "aggregateprogress": {
            "progress": 15000,
            "total": 15000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 15000,
            "total": 15000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-6030/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 26,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13246940/worklog/282517",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #4939: ARROW-6030: [Java] Efficiently compute hash code for ArrowBufPointer\nURL: https://github.com/apache/arrow/pull/4939\n \n \n   As ArrowBufHasher is introduced, we can compute the hash code of a continuous region within an ArrowBuf. \r\n   \r\n   We optimize the process to make it efficient to avoid recomputation. \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-25T07:23:52.001+0000",
                    "updated": "2019-07-25T07:23:52.001+0000",
                    "started": "2019-07-25T07:23:52.001+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "282517",
                    "issueId": "13246940"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13246940/worklog/283142",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #4939: ARROW-6030: [Java] Efficiently compute hash code for ArrowBufPointer\nURL: https://github.com/apache/arrow/pull/4939#discussion_r307600125\n \n \n\n ##########\n File path: java/memory/src/main/java/org/apache/arrow/memory/util/ArrowBufPointer.java\n ##########\n @@ -31,6 +34,15 @@\n \n   private int length;\n \n+  private int hashCode = 0;\n+\n+  private ArrowBufHasher hasher;\n \n Review comment:\n   initalize hasher here with a default.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-26T06:11:37.696+0000",
                    "updated": "2019-07-26T06:11:37.696+0000",
                    "started": "2019-07-26T06:11:37.695+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "283142",
                    "issueId": "13246940"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13246940/worklog/283143",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #4939: ARROW-6030: [Java] Efficiently compute hash code for ArrowBufPointer\nURL: https://github.com/apache/arrow/pull/4939#discussion_r307600483\n \n \n\n ##########\n File path: java/memory/src/test/java/org/apache/arrow/memory/util/TestArrowBufPointer.java\n ##########\n @@ -67,4 +67,29 @@ public void testArrowBufPointersEqual() {\n       }\n     }\n   }\n+\n+  @Test\n+  public void testArrowBufPointersHashCode() {\n+    final int vectorLength = 100;\n+    try (ArrowBuf buf1 = allocator.buffer(vectorLength * 4);\n+         ArrowBuf buf2 = allocator.buffer(vectorLength * 4)) {\n+      for (int i = 0; i < vectorLength; i++) {\n+        buf1.setInt(i * 4, i);\n+        buf2.setInt(i * 4, i);\n+      }\n+\n+      ArrowBufPointer pointer1 = new ArrowBufPointer();\n \n Review comment:\n   Please separate these tests into null and not-null.  Also, it would be nice to have a test to verify caching.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-26T06:11:37.699+0000",
                    "updated": "2019-07-26T06:11:37.699+0000",
                    "started": "2019-07-26T06:11:37.699+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "283143",
                    "issueId": "13246940"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13246940/worklog/283144",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #4939: ARROW-6030: [Java] Efficiently compute hash code for ArrowBufPointer\nURL: https://github.com/apache/arrow/pull/4939#discussion_r307599787\n \n \n\n ##########\n File path: java/memory/src/main/java/org/apache/arrow/memory/util/ArrowBufPointer.java\n ##########\n @@ -31,6 +34,15 @@\n \n   private int length;\n \n+  private int hashCode = 0;\n \n Review comment:\n   Could you make this a constant NULL_HASH_CODE  and use it here and below in hashCode\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-26T06:11:41.152+0000",
                    "updated": "2019-07-26T06:11:41.152+0000",
                    "started": "2019-07-26T06:11:41.151+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "283144",
                    "issueId": "13246940"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13246940/worklog/283145",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #4939: ARROW-6030: [Java] Efficiently compute hash code for ArrowBufPointer\nURL: https://github.com/apache/arrow/pull/4939#discussion_r307600176\n \n \n\n ##########\n File path: java/memory/src/main/java/org/apache/arrow/memory/util/ArrowBufPointer.java\n ##########\n @@ -58,6 +70,12 @@ public void set(ArrowBuf buf, int offset, int length) {\n     this.buf = buf;\n     this.offset = offset;\n     this.length = length;\n+\n+    dirty = true;\n+  }\n+\n+  public void setHasher(ArrowBufHasher hasher) {\n+    this.hasher = hasher;\n \n Review comment:\n   consider checking to make sure hash isn't null\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-26T06:11:42.670+0000",
                    "updated": "2019-07-26T06:11:42.670+0000",
                    "started": "2019-07-26T06:11:42.670+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "283145",
                    "issueId": "13246940"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13246940/worklog/283725",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #4939: ARROW-6030: [Java] Efficiently compute hash code for ArrowBufPointer\nURL: https://github.com/apache/arrow/pull/4939#discussion_r307952548\n \n \n\n ##########\n File path: java/memory/src/main/java/org/apache/arrow/memory/util/ArrowBufPointer.java\n ##########\n @@ -31,6 +34,15 @@\n \n   private int length;\n \n+  private int hashCode = 0;\n \n Review comment:\n   Sure. Good suggestion.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-27T04:28:57.615+0000",
                    "updated": "2019-07-27T04:28:57.615+0000",
                    "started": "2019-07-27T04:28:57.614+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "283725",
                    "issueId": "13246940"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13246940/worklog/283726",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #4939: ARROW-6030: [Java] Efficiently compute hash code for ArrowBufPointer\nURL: https://github.com/apache/arrow/pull/4939#discussion_r307952556\n \n \n\n ##########\n File path: java/memory/src/main/java/org/apache/arrow/memory/util/ArrowBufPointer.java\n ##########\n @@ -31,6 +34,15 @@\n \n   private int length;\n \n+  private int hashCode = 0;\n+\n+  private ArrowBufHasher hasher;\n \n Review comment:\n   Revised. Thanks.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-27T04:29:12.134+0000",
                    "updated": "2019-07-27T04:29:12.134+0000",
                    "started": "2019-07-27T04:29:12.134+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "283726",
                    "issueId": "13246940"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13246940/worklog/283727",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #4939: ARROW-6030: [Java] Efficiently compute hash code for ArrowBufPointer\nURL: https://github.com/apache/arrow/pull/4939#discussion_r307952564\n \n \n\n ##########\n File path: java/memory/src/main/java/org/apache/arrow/memory/util/ArrowBufPointer.java\n ##########\n @@ -58,6 +70,12 @@ public void set(ArrowBuf buf, int offset, int length) {\n     this.buf = buf;\n     this.offset = offset;\n     this.length = length;\n+\n+    dirty = true;\n+  }\n+\n+  public void setHasher(ArrowBufHasher hasher) {\n+    this.hasher = hasher;\n \n Review comment:\n   Done. Thanks.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-27T04:29:33.324+0000",
                    "updated": "2019-07-27T04:29:33.324+0000",
                    "started": "2019-07-27T04:29:33.324+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "283727",
                    "issueId": "13246940"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13246940/worklog/283728",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #4939: ARROW-6030: [Java] Efficiently compute hash code for ArrowBufPointer\nURL: https://github.com/apache/arrow/pull/4939#discussion_r307952584\n \n \n\n ##########\n File path: java/memory/src/test/java/org/apache/arrow/memory/util/TestArrowBufPointer.java\n ##########\n @@ -67,4 +67,29 @@ public void testArrowBufPointersEqual() {\n       }\n     }\n   }\n+\n+  @Test\n+  public void testArrowBufPointersHashCode() {\n+    final int vectorLength = 100;\n+    try (ArrowBuf buf1 = allocator.buffer(vectorLength * 4);\n+         ArrowBuf buf2 = allocator.buffer(vectorLength * 4)) {\n+      for (int i = 0; i < vectorLength; i++) {\n+        buf1.setInt(i * 4, i);\n+        buf2.setInt(i * 4, i);\n+      }\n+\n+      ArrowBufPointer pointer1 = new ArrowBufPointer();\n \n Review comment:\n   Good suggestion.\r\n   I have added test cases to 1) verify cases for null; 2) verify the hash code is recomputed/reused.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-27T04:30:25.640+0000",
                    "updated": "2019-07-27T04:30:25.640+0000",
                    "started": "2019-07-27T04:30:25.639+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "283728",
                    "issueId": "13246940"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13246940/worklog/284034",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pravindra commented on pull request #4939: ARROW-6030: [Java] Efficiently compute hash code for ArrowBufPointer\nURL: https://github.com/apache/arrow/pull/4939#discussion_r308067545\n \n \n\n ##########\n File path: java/memory/src/main/java/org/apache/arrow/memory/util/ArrowBufPointer.java\n ##########\n @@ -1,106 +1,147 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.arrow.memory.util;\n-\n-import io.netty.buffer.ArrowBuf;\n-\n-/**\n- * Pointer to a memory region within an {@link io.netty.buffer.ArrowBuf}.\n- * It will be used as the basis for calculating hash code within a vector, and equality determination.\n- */\n-public final class ArrowBufPointer {\n-\n-  private ArrowBuf buf;\n-\n-  private int offset;\n-\n-  private int length;\n-\n-  /**\n-   * The default constructor.\n-   */\n-  public ArrowBufPointer() {\n-\n-  }\n-\n-  /**\n-   * Constructs an Arrow buffer pointer.\n-   * @param buf the underlying {@link ArrowBuf}, which can be null.\n-   * @param offset the start off set of the memory region pointed to.\n-   * @param length the length off set of the memory region pointed to.\n-   */\n-  public ArrowBufPointer(ArrowBuf buf, int offset, int length) {\n-    set(buf, offset, length);\n-  }\n-\n-  /**\n-   * Sets this pointer.\n-   * @param buf the underlying {@link ArrowBuf}, which can be null.\n-   * @param offset the start off set of the memory region pointed to.\n-   * @param length the length off set of the memory region pointed to.\n-   */\n-  public void set(ArrowBuf buf, int offset, int length) {\n-    this.buf = buf;\n-    this.offset = offset;\n-    this.length = length;\n-  }\n-\n-  /**\n-   * Gets the underlying buffer, or null if the underlying data is invalid or null.\n-   * @return the underlying buffer, if any, or null if the underlying data is invalid or null.\n-   */\n-  public ArrowBuf getBuf() {\n-    return buf;\n-  }\n-\n-  public int getOffset() {\n-    return offset;\n-  }\n-\n-  public int getLength() {\n-    return length;\n-  }\n-\n-  @Override\n-  public boolean equals(Object o) {\n-    if (this == o) {\n-      return true;\n-    }\n-    if (o == null || getClass() != o.getClass()) {\n-      return false;\n-    }\n-\n-    ArrowBufPointer other = (ArrowBufPointer) o;\n-    if (buf == null || other.buf == null) {\n-      if (buf == null && other.buf == null) {\n-        return true;\n-      } else {\n-        return false;\n-      }\n-    }\n-\n-    return ByteFunctionHelpers.equal(buf, offset, offset + length,\n-            other.buf, other.offset, other.offset + other.length) != 0;\n-  }\n-\n-  @Override\n-  public int hashCode() {\n-    // implement after ARROW-5898\n-    throw new UnsupportedOperationException();\n-  }\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\r\n+ * contributor license agreements.  See the NOTICE file distributed with\r\n+ * this work for additional information regarding copyright ownership.\r\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\r\n+ * (the \"License\"); you may not use this file except in compliance with\r\n+ * the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *    http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+\r\n+package org.apache.arrow.memory.util;\r\n+\r\n+import org.apache.arrow.memory.util.hash.ArrowBufHasher;\r\n+import org.apache.arrow.memory.util.hash.DirectHasher;\r\n+import org.apache.arrow.util.Preconditions;\r\n+\r\n+import io.netty.buffer.ArrowBuf;\r\n+\r\n+/**\r\n+ * Pointer to a memory region within an {@link io.netty.buffer.ArrowBuf}.\r\n+ * It will be used as the basis for calculating hash code within a vector, and equality determination.\r\n+ */\r\n+public final class ArrowBufPointer {\r\n+\r\n+  /**\r\n+   * The hash code when the arrow buffer is null.\r\n+   */\r\n+  public static final int NULL_HASH_CODE = 0;\r\n+\r\n+  private ArrowBuf buf;\r\n+\r\n+  private int offset;\r\n+\r\n+  private int length;\r\n+\r\n+  private int hashCode = NULL_HASH_CODE;\r\n+\r\n+  private ArrowBufHasher hasher = DirectHasher.INSTANCE;\r\n+\r\n+  /**\r\n+   * A flag indicating if the underlying memory region has changed..\r\n+   */\r\n+  private boolean dirty = false;\r\n \n Review comment:\n   nit: maybe, make the name more obvious, say hashCodeValid ?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-29T06:15:15.940+0000",
                    "updated": "2019-07-29T06:15:15.940+0000",
                    "started": "2019-07-29T06:15:15.940+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "284034",
                    "issueId": "13246940"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13246940/worklog/284213",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #4939: ARROW-6030: [Java] Efficiently compute hash code for ArrowBufPointer\nURL: https://github.com/apache/arrow/pull/4939#discussion_r308199691\n \n \n\n ##########\n File path: java/memory/src/main/java/org/apache/arrow/memory/util/ArrowBufPointer.java\n ##########\n @@ -1,106 +1,147 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.arrow.memory.util;\n-\n-import io.netty.buffer.ArrowBuf;\n-\n-/**\n- * Pointer to a memory region within an {@link io.netty.buffer.ArrowBuf}.\n- * It will be used as the basis for calculating hash code within a vector, and equality determination.\n- */\n-public final class ArrowBufPointer {\n-\n-  private ArrowBuf buf;\n-\n-  private int offset;\n-\n-  private int length;\n-\n-  /**\n-   * The default constructor.\n-   */\n-  public ArrowBufPointer() {\n-\n-  }\n-\n-  /**\n-   * Constructs an Arrow buffer pointer.\n-   * @param buf the underlying {@link ArrowBuf}, which can be null.\n-   * @param offset the start off set of the memory region pointed to.\n-   * @param length the length off set of the memory region pointed to.\n-   */\n-  public ArrowBufPointer(ArrowBuf buf, int offset, int length) {\n-    set(buf, offset, length);\n-  }\n-\n-  /**\n-   * Sets this pointer.\n-   * @param buf the underlying {@link ArrowBuf}, which can be null.\n-   * @param offset the start off set of the memory region pointed to.\n-   * @param length the length off set of the memory region pointed to.\n-   */\n-  public void set(ArrowBuf buf, int offset, int length) {\n-    this.buf = buf;\n-    this.offset = offset;\n-    this.length = length;\n-  }\n-\n-  /**\n-   * Gets the underlying buffer, or null if the underlying data is invalid or null.\n-   * @return the underlying buffer, if any, or null if the underlying data is invalid or null.\n-   */\n-  public ArrowBuf getBuf() {\n-    return buf;\n-  }\n-\n-  public int getOffset() {\n-    return offset;\n-  }\n-\n-  public int getLength() {\n-    return length;\n-  }\n-\n-  @Override\n-  public boolean equals(Object o) {\n-    if (this == o) {\n-      return true;\n-    }\n-    if (o == null || getClass() != o.getClass()) {\n-      return false;\n-    }\n-\n-    ArrowBufPointer other = (ArrowBufPointer) o;\n-    if (buf == null || other.buf == null) {\n-      if (buf == null && other.buf == null) {\n-        return true;\n-      } else {\n-        return false;\n-      }\n-    }\n-\n-    return ByteFunctionHelpers.equal(buf, offset, offset + length,\n-            other.buf, other.offset, other.offset + other.length) != 0;\n-  }\n-\n-  @Override\n-  public int hashCode() {\n-    // implement after ARROW-5898\n-    throw new UnsupportedOperationException();\n-  }\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\r\n+ * contributor license agreements.  See the NOTICE file distributed with\r\n+ * this work for additional information regarding copyright ownership.\r\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\r\n+ * (the \"License\"); you may not use this file except in compliance with\r\n+ * the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *    http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+\r\n+package org.apache.arrow.memory.util;\r\n+\r\n+import org.apache.arrow.memory.util.hash.ArrowBufHasher;\r\n+import org.apache.arrow.memory.util.hash.DirectHasher;\r\n+import org.apache.arrow.util.Preconditions;\r\n+\r\n+import io.netty.buffer.ArrowBuf;\r\n+\r\n+/**\r\n+ * Pointer to a memory region within an {@link io.netty.buffer.ArrowBuf}.\r\n+ * It will be used as the basis for calculating hash code within a vector, and equality determination.\r\n+ */\r\n+public final class ArrowBufPointer {\r\n+\r\n+  /**\r\n+   * The hash code when the arrow buffer is null.\r\n+   */\r\n+  public static final int NULL_HASH_CODE = 0;\r\n+\r\n+  private ArrowBuf buf;\r\n+\r\n+  private int offset;\r\n+\r\n+  private int length;\r\n+\r\n+  private int hashCode = NULL_HASH_CODE;\r\n+\r\n+  private ArrowBufHasher hasher = DirectHasher.INSTANCE;\r\n+\r\n+  /**\r\n+   * A flag indicating if the underlying memory region has changed..\r\n+   */\r\n+  private boolean dirty = false;\r\n \n Review comment:\n   Good suggestion. Thank you @pravindra \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-29T12:24:06.536+0000",
                    "updated": "2019-07-29T12:24:06.536+0000",
                    "started": "2019-07-29T12:24:06.535+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "284213",
                    "issueId": "13246940"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13246940/worklog/285372",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #4939: ARROW-6030: [Java] Efficiently compute hash code for ArrowBufPointer\nURL: https://github.com/apache/arrow/pull/4939#discussion_r308997386\n \n \n\n ##########\n File path: java/memory/src/main/java/org/apache/arrow/memory/util/ArrowBufPointer.java\n ##########\n @@ -1,106 +1,147 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.arrow.memory.util;\n-\n-import io.netty.buffer.ArrowBuf;\n-\n-/**\n- * Pointer to a memory region within an {@link io.netty.buffer.ArrowBuf}.\n- * It will be used as the basis for calculating hash code within a vector, and equality determination.\n- */\n-public final class ArrowBufPointer {\n-\n-  private ArrowBuf buf;\n-\n-  private int offset;\n-\n-  private int length;\n-\n-  /**\n-   * The default constructor.\n-   */\n-  public ArrowBufPointer() {\n-\n-  }\n-\n-  /**\n-   * Constructs an Arrow buffer pointer.\n-   * @param buf the underlying {@link ArrowBuf}, which can be null.\n-   * @param offset the start off set of the memory region pointed to.\n-   * @param length the length off set of the memory region pointed to.\n-   */\n-  public ArrowBufPointer(ArrowBuf buf, int offset, int length) {\n-    set(buf, offset, length);\n-  }\n-\n-  /**\n-   * Sets this pointer.\n-   * @param buf the underlying {@link ArrowBuf}, which can be null.\n-   * @param offset the start off set of the memory region pointed to.\n-   * @param length the length off set of the memory region pointed to.\n-   */\n-  public void set(ArrowBuf buf, int offset, int length) {\n-    this.buf = buf;\n-    this.offset = offset;\n-    this.length = length;\n-  }\n-\n-  /**\n-   * Gets the underlying buffer, or null if the underlying data is invalid or null.\n-   * @return the underlying buffer, if any, or null if the underlying data is invalid or null.\n-   */\n-  public ArrowBuf getBuf() {\n-    return buf;\n-  }\n-\n-  public int getOffset() {\n-    return offset;\n-  }\n-\n-  public int getLength() {\n-    return length;\n-  }\n-\n-  @Override\n-  public boolean equals(Object o) {\n-    if (this == o) {\n-      return true;\n-    }\n-    if (o == null || getClass() != o.getClass()) {\n-      return false;\n-    }\n-\n-    ArrowBufPointer other = (ArrowBufPointer) o;\n-    if (buf == null || other.buf == null) {\n-      if (buf == null && other.buf == null) {\n-        return true;\n-      } else {\n-        return false;\n-      }\n-    }\n-\n-    return ByteFunctionHelpers.equal(buf, offset, offset + length,\n-            other.buf, other.offset, other.offset + other.length) != 0;\n-  }\n-\n-  @Override\n-  public int hashCode() {\n-    // implement after ARROW-5898\n-    throw new UnsupportedOperationException();\n-  }\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\r\n+ * contributor license agreements.  See the NOTICE file distributed with\r\n+ * this work for additional information regarding copyright ownership.\r\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\r\n+ * (the \"License\"); you may not use this file except in compliance with\r\n+ * the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *    http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+\r\n+package org.apache.arrow.memory.util;\r\n+\r\n+import org.apache.arrow.memory.util.hash.ArrowBufHasher;\r\n+import org.apache.arrow.memory.util.hash.DirectHasher;\r\n+import org.apache.arrow.util.Preconditions;\r\n+\r\n+import io.netty.buffer.ArrowBuf;\r\n+\r\n+/**\r\n+ * Pointer to a memory region within an {@link io.netty.buffer.ArrowBuf}.\r\n+ * It will be used as the basis for calculating hash code within a vector, and equality determination.\r\n+ */\r\n+public final class ArrowBufPointer {\r\n+\r\n+  /**\r\n+   * The hash code when the arrow buffer is null.\r\n+   */\r\n+  public static final int NULL_HASH_CODE = 0;\r\n+\r\n+  private ArrowBuf buf;\r\n+\r\n+  private int offset;\r\n+\r\n+  private int length;\r\n+\r\n+  private int hashCode = NULL_HASH_CODE;\r\n+\r\n+  private ArrowBufHasher hasher = DirectHasher.INSTANCE;\r\n+\r\n+  /**\r\n+   * A flag indicating if the underlying memory region has changed.\r\n+   */\r\n+  private boolean hashCodeChanged = false;\r\n+\r\n+  /**\r\n+   * The default constructor.\r\n+   */\r\n+  public ArrowBufPointer() {\r\n+\r\n+  }\r\n+\r\n+  /**\r\n+   * Constructs an Arrow buffer pointer.\r\n+   * @param buf the underlying {@link ArrowBuf}, which can be null.\r\n+   * @param offset the start off set of the memory region pointed to.\r\n+   * @param length the length off set of the memory region pointed to.\r\n+   */\r\n+  public ArrowBufPointer(ArrowBuf buf, int offset, int length) {\r\n+    set(buf, offset, length);\r\n+  }\r\n+\r\n+  /**\r\n+   * Sets this pointer.\r\n+   * @param buf the underlying {@link ArrowBuf}, which can be null.\r\n+   * @param offset the start off set of the memory region pointed to.\r\n+   * @param length the length off set of the memory region pointed to.\r\n+   */\r\n+  public void set(ArrowBuf buf, int offset, int length) {\r\n+    this.buf = buf;\r\n+    this.offset = offset;\r\n+    this.length = length;\r\n+\r\n+    hashCodeChanged = true;\r\n+  }\r\n+\r\n+  /**\r\n+   * Sets the hasher for the pointer.\r\n+   * @param hasher the hasher to set.\r\n+   */\r\n+  public void setHasher(ArrowBufHasher hasher) {\r\n+    Preconditions.checkNotNull(hasher);\r\n+    this.hasher = hasher;\r\n+    hashCodeChanged = true;\r\n+  }\r\n+\r\n+  /**\r\n+   * Gets the underlying buffer, or null if the underlying data is invalid or null.\r\n+   * @return the underlying buffer, if any, or null if the underlying data is invalid or null.\r\n+   */\r\n+  public ArrowBuf getBuf() {\r\n+    return buf;\r\n+  }\r\n+\r\n+  public int getOffset() {\r\n+    return offset;\r\n+  }\r\n+\r\n+  public int getLength() {\r\n+    return length;\r\n+  }\r\n+\r\n+  @Override\r\n+  public boolean equals(Object o) {\r\n+    if (this == o) {\r\n+      return true;\r\n+    }\r\n+    if (o == null || getClass() != o.getClass()) {\r\n+      return false;\r\n+    }\r\n+\r\n+    ArrowBufPointer other = (ArrowBufPointer) o;\r\n+    if (buf == null || other.buf == null) {\r\n+      if (buf == null && other.buf == null) {\r\n+        return true;\r\n+      } else {\r\n+        return false;\r\n+      }\r\n+    }\r\n+\r\n+    return ByteFunctionHelpers.equal(buf, offset, offset + length,\r\n+            other.buf, other.offset, other.offset + other.length) != 0;\r\n+  }\r\n+\r\n+  @Override\r\n+  public int hashCode() {\r\n \n Review comment:\n   this seems to provide for the posibility  that hashCodes are not equals when when two pointers are equal.  I don't have a great solution here, just a comment.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-31T00:30:48.431+0000",
                    "updated": "2019-07-31T00:30:48.431+0000",
                    "started": "2019-07-31T00:30:48.430+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "285372",
                    "issueId": "13246940"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13246940/worklog/285467",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #4939: ARROW-6030: [Java] Efficiently compute hash code for ArrowBufPointer\nURL: https://github.com/apache/arrow/pull/4939#discussion_r309022627\n \n \n\n ##########\n File path: java/memory/src/main/java/org/apache/arrow/memory/util/ArrowBufPointer.java\n ##########\n @@ -1,106 +1,147 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.arrow.memory.util;\n-\n-import io.netty.buffer.ArrowBuf;\n-\n-/**\n- * Pointer to a memory region within an {@link io.netty.buffer.ArrowBuf}.\n- * It will be used as the basis for calculating hash code within a vector, and equality determination.\n- */\n-public final class ArrowBufPointer {\n-\n-  private ArrowBuf buf;\n-\n-  private int offset;\n-\n-  private int length;\n-\n-  /**\n-   * The default constructor.\n-   */\n-  public ArrowBufPointer() {\n-\n-  }\n-\n-  /**\n-   * Constructs an Arrow buffer pointer.\n-   * @param buf the underlying {@link ArrowBuf}, which can be null.\n-   * @param offset the start off set of the memory region pointed to.\n-   * @param length the length off set of the memory region pointed to.\n-   */\n-  public ArrowBufPointer(ArrowBuf buf, int offset, int length) {\n-    set(buf, offset, length);\n-  }\n-\n-  /**\n-   * Sets this pointer.\n-   * @param buf the underlying {@link ArrowBuf}, which can be null.\n-   * @param offset the start off set of the memory region pointed to.\n-   * @param length the length off set of the memory region pointed to.\n-   */\n-  public void set(ArrowBuf buf, int offset, int length) {\n-    this.buf = buf;\n-    this.offset = offset;\n-    this.length = length;\n-  }\n-\n-  /**\n-   * Gets the underlying buffer, or null if the underlying data is invalid or null.\n-   * @return the underlying buffer, if any, or null if the underlying data is invalid or null.\n-   */\n-  public ArrowBuf getBuf() {\n-    return buf;\n-  }\n-\n-  public int getOffset() {\n-    return offset;\n-  }\n-\n-  public int getLength() {\n-    return length;\n-  }\n-\n-  @Override\n-  public boolean equals(Object o) {\n-    if (this == o) {\n-      return true;\n-    }\n-    if (o == null || getClass() != o.getClass()) {\n-      return false;\n-    }\n-\n-    ArrowBufPointer other = (ArrowBufPointer) o;\n-    if (buf == null || other.buf == null) {\n-      if (buf == null && other.buf == null) {\n-        return true;\n-      } else {\n-        return false;\n-      }\n-    }\n-\n-    return ByteFunctionHelpers.equal(buf, offset, offset + length,\n-            other.buf, other.offset, other.offset + other.length) != 0;\n-  }\n-\n-  @Override\n-  public int hashCode() {\n-    // implement after ARROW-5898\n-    throw new UnsupportedOperationException();\n-  }\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\r\n+ * contributor license agreements.  See the NOTICE file distributed with\r\n+ * this work for additional information regarding copyright ownership.\r\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\r\n+ * (the \"License\"); you may not use this file except in compliance with\r\n+ * the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *    http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+\r\n+package org.apache.arrow.memory.util;\r\n+\r\n+import org.apache.arrow.memory.util.hash.ArrowBufHasher;\r\n+import org.apache.arrow.memory.util.hash.DirectHasher;\r\n+import org.apache.arrow.util.Preconditions;\r\n+\r\n+import io.netty.buffer.ArrowBuf;\r\n+\r\n+/**\r\n+ * Pointer to a memory region within an {@link io.netty.buffer.ArrowBuf}.\r\n+ * It will be used as the basis for calculating hash code within a vector, and equality determination.\r\n+ */\r\n+public final class ArrowBufPointer {\r\n+\r\n+  /**\r\n+   * The hash code when the arrow buffer is null.\r\n+   */\r\n+  public static final int NULL_HASH_CODE = 0;\r\n+\r\n+  private ArrowBuf buf;\r\n+\r\n+  private int offset;\r\n+\r\n+  private int length;\r\n+\r\n+  private int hashCode = NULL_HASH_CODE;\r\n+\r\n+  private ArrowBufHasher hasher = DirectHasher.INSTANCE;\r\n+\r\n+  /**\r\n+   * A flag indicating if the underlying memory region has changed.\r\n+   */\r\n+  private boolean hashCodeChanged = false;\r\n+\r\n+  /**\r\n+   * The default constructor.\r\n+   */\r\n+  public ArrowBufPointer() {\r\n+\r\n+  }\r\n+\r\n+  /**\r\n+   * Constructs an Arrow buffer pointer.\r\n+   * @param buf the underlying {@link ArrowBuf}, which can be null.\r\n+   * @param offset the start off set of the memory region pointed to.\r\n+   * @param length the length off set of the memory region pointed to.\r\n+   */\r\n+  public ArrowBufPointer(ArrowBuf buf, int offset, int length) {\r\n+    set(buf, offset, length);\r\n+  }\r\n+\r\n+  /**\r\n+   * Sets this pointer.\r\n+   * @param buf the underlying {@link ArrowBuf}, which can be null.\r\n+   * @param offset the start off set of the memory region pointed to.\r\n+   * @param length the length off set of the memory region pointed to.\r\n+   */\r\n+  public void set(ArrowBuf buf, int offset, int length) {\r\n+    this.buf = buf;\r\n+    this.offset = offset;\r\n+    this.length = length;\r\n+\r\n+    hashCodeChanged = true;\r\n+  }\r\n+\r\n+  /**\r\n+   * Sets the hasher for the pointer.\r\n+   * @param hasher the hasher to set.\r\n+   */\r\n+  public void setHasher(ArrowBufHasher hasher) {\r\n+    Preconditions.checkNotNull(hasher);\r\n+    this.hasher = hasher;\r\n+    hashCodeChanged = true;\r\n+  }\r\n+\r\n+  /**\r\n+   * Gets the underlying buffer, or null if the underlying data is invalid or null.\r\n+   * @return the underlying buffer, if any, or null if the underlying data is invalid or null.\r\n+   */\r\n+  public ArrowBuf getBuf() {\r\n+    return buf;\r\n+  }\r\n+\r\n+  public int getOffset() {\r\n+    return offset;\r\n+  }\r\n+\r\n+  public int getLength() {\r\n+    return length;\r\n+  }\r\n+\r\n+  @Override\r\n+  public boolean equals(Object o) {\r\n+    if (this == o) {\r\n+      return true;\r\n+    }\r\n+    if (o == null || getClass() != o.getClass()) {\r\n+      return false;\r\n+    }\r\n+\r\n+    ArrowBufPointer other = (ArrowBufPointer) o;\r\n+    if (buf == null || other.buf == null) {\r\n+      if (buf == null && other.buf == null) {\r\n+        return true;\r\n+      } else {\r\n+        return false;\r\n+      }\r\n+    }\r\n+\r\n+    return ByteFunctionHelpers.equal(buf, offset, offset + length,\r\n+            other.buf, other.offset, other.offset + other.length) != 0;\r\n+  }\r\n+\r\n+  @Override\r\n+  public int hashCode() {\r\n \n Review comment:\n   Do you mean the cases where the data content changes, while the address and length remain the same?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-31T03:05:55.959+0000",
                    "updated": "2019-07-31T03:05:55.959+0000",
                    "started": "2019-07-31T03:05:55.958+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "285467",
                    "issueId": "13246940"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13246940/worklog/285608",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pravindra commented on pull request #4939: ARROW-6030: [Java] Efficiently compute hash code for ArrowBufPointer\nURL: https://github.com/apache/arrow/pull/4939#discussion_r309112626\n \n \n\n ##########\n File path: java/memory/src/main/java/org/apache/arrow/memory/util/ArrowBufPointer.java\n ##########\n @@ -1,106 +1,147 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.arrow.memory.util;\n-\n-import io.netty.buffer.ArrowBuf;\n-\n-/**\n- * Pointer to a memory region within an {@link io.netty.buffer.ArrowBuf}.\n- * It will be used as the basis for calculating hash code within a vector, and equality determination.\n- */\n-public final class ArrowBufPointer {\n-\n-  private ArrowBuf buf;\n-\n-  private int offset;\n-\n-  private int length;\n-\n-  /**\n-   * The default constructor.\n-   */\n-  public ArrowBufPointer() {\n-\n-  }\n-\n-  /**\n-   * Constructs an Arrow buffer pointer.\n-   * @param buf the underlying {@link ArrowBuf}, which can be null.\n-   * @param offset the start off set of the memory region pointed to.\n-   * @param length the length off set of the memory region pointed to.\n-   */\n-  public ArrowBufPointer(ArrowBuf buf, int offset, int length) {\n-    set(buf, offset, length);\n-  }\n-\n-  /**\n-   * Sets this pointer.\n-   * @param buf the underlying {@link ArrowBuf}, which can be null.\n-   * @param offset the start off set of the memory region pointed to.\n-   * @param length the length off set of the memory region pointed to.\n-   */\n-  public void set(ArrowBuf buf, int offset, int length) {\n-    this.buf = buf;\n-    this.offset = offset;\n-    this.length = length;\n-  }\n-\n-  /**\n-   * Gets the underlying buffer, or null if the underlying data is invalid or null.\n-   * @return the underlying buffer, if any, or null if the underlying data is invalid or null.\n-   */\n-  public ArrowBuf getBuf() {\n-    return buf;\n-  }\n-\n-  public int getOffset() {\n-    return offset;\n-  }\n-\n-  public int getLength() {\n-    return length;\n-  }\n-\n-  @Override\n-  public boolean equals(Object o) {\n-    if (this == o) {\n-      return true;\n-    }\n-    if (o == null || getClass() != o.getClass()) {\n-      return false;\n-    }\n-\n-    ArrowBufPointer other = (ArrowBufPointer) o;\n-    if (buf == null || other.buf == null) {\n-      if (buf == null && other.buf == null) {\n-        return true;\n-      } else {\n-        return false;\n-      }\n-    }\n-\n-    return ByteFunctionHelpers.equal(buf, offset, offset + length,\n-            other.buf, other.offset, other.offset + other.length) != 0;\n-  }\n-\n-  @Override\n-  public int hashCode() {\n-    // implement after ARROW-5898\n-    throw new UnsupportedOperationException();\n-  }\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\r\n+ * contributor license agreements.  See the NOTICE file distributed with\r\n+ * this work for additional information regarding copyright ownership.\r\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\r\n+ * (the \"License\"); you may not use this file except in compliance with\r\n+ * the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *    http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+\r\n+package org.apache.arrow.memory.util;\r\n+\r\n+import org.apache.arrow.memory.util.hash.ArrowBufHasher;\r\n+import org.apache.arrow.memory.util.hash.DirectHasher;\r\n+import org.apache.arrow.util.Preconditions;\r\n+\r\n+import io.netty.buffer.ArrowBuf;\r\n+\r\n+/**\r\n+ * Pointer to a memory region within an {@link io.netty.buffer.ArrowBuf}.\r\n+ * It will be used as the basis for calculating hash code within a vector, and equality determination.\r\n+ */\r\n+public final class ArrowBufPointer {\r\n+\r\n+  /**\r\n+   * The hash code when the arrow buffer is null.\r\n+   */\r\n+  public static final int NULL_HASH_CODE = 0;\r\n+\r\n+  private ArrowBuf buf;\r\n+\r\n+  private int offset;\r\n+\r\n+  private int length;\r\n+\r\n+  private int hashCode = NULL_HASH_CODE;\r\n+\r\n+  private ArrowBufHasher hasher = DirectHasher.INSTANCE;\r\n+\r\n+  /**\r\n+   * A flag indicating if the underlying memory region has changed.\r\n+   */\r\n+  private boolean hashCodeChanged = false;\r\n+\r\n+  /**\r\n+   * The default constructor.\r\n+   */\r\n+  public ArrowBufPointer() {\r\n+\r\n+  }\r\n+\r\n+  /**\r\n+   * Constructs an Arrow buffer pointer.\r\n+   * @param buf the underlying {@link ArrowBuf}, which can be null.\r\n+   * @param offset the start off set of the memory region pointed to.\r\n+   * @param length the length off set of the memory region pointed to.\r\n+   */\r\n+  public ArrowBufPointer(ArrowBuf buf, int offset, int length) {\r\n+    set(buf, offset, length);\r\n+  }\r\n+\r\n+  /**\r\n+   * Sets this pointer.\r\n+   * @param buf the underlying {@link ArrowBuf}, which can be null.\r\n+   * @param offset the start off set of the memory region pointed to.\r\n+   * @param length the length off set of the memory region pointed to.\r\n+   */\r\n+  public void set(ArrowBuf buf, int offset, int length) {\r\n+    this.buf = buf;\r\n+    this.offset = offset;\r\n+    this.length = length;\r\n+\r\n+    hashCodeChanged = true;\r\n+  }\r\n+\r\n+  /**\r\n+   * Sets the hasher for the pointer.\r\n+   * @param hasher the hasher to set.\r\n+   */\r\n+  public void setHasher(ArrowBufHasher hasher) {\r\n+    Preconditions.checkNotNull(hasher);\r\n+    this.hasher = hasher;\r\n+    hashCodeChanged = true;\r\n+  }\r\n+\r\n+  /**\r\n+   * Gets the underlying buffer, or null if the underlying data is invalid or null.\r\n+   * @return the underlying buffer, if any, or null if the underlying data is invalid or null.\r\n+   */\r\n+  public ArrowBuf getBuf() {\r\n+    return buf;\r\n+  }\r\n+\r\n+  public int getOffset() {\r\n+    return offset;\r\n+  }\r\n+\r\n+  public int getLength() {\r\n+    return length;\r\n+  }\r\n+\r\n+  @Override\r\n+  public boolean equals(Object o) {\r\n+    if (this == o) {\r\n+      return true;\r\n+    }\r\n+    if (o == null || getClass() != o.getClass()) {\r\n+      return false;\r\n+    }\r\n+\r\n+    ArrowBufPointer other = (ArrowBufPointer) o;\r\n+    if (buf == null || other.buf == null) {\r\n+      if (buf == null && other.buf == null) {\r\n+        return true;\r\n+      } else {\r\n+        return false;\r\n+      }\r\n+    }\r\n+\r\n+    return ByteFunctionHelpers.equal(buf, offset, offset + length,\r\n+            other.buf, other.offset, other.offset + other.length) != 0;\r\n+  }\r\n+\r\n+  @Override\r\n+  public int hashCode() {\r\n \n Review comment:\n   @emkornfield can you please explain when this possibility occurs ? \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-31T09:04:38.871+0000",
                    "updated": "2019-07-31T09:04:38.871+0000",
                    "started": "2019-07-31T09:04:38.871+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "285608",
                    "issueId": "13246940"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13246940/worklog/286215",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #4939: ARROW-6030: [Java] Efficiently compute hash code for ArrowBufPointer\nURL: https://github.com/apache/arrow/pull/4939#discussion_r309423802\n \n \n\n ##########\n File path: java/memory/src/main/java/org/apache/arrow/memory/util/ArrowBufPointer.java\n ##########\n @@ -1,106 +1,147 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.arrow.memory.util;\n-\n-import io.netty.buffer.ArrowBuf;\n-\n-/**\n- * Pointer to a memory region within an {@link io.netty.buffer.ArrowBuf}.\n- * It will be used as the basis for calculating hash code within a vector, and equality determination.\n- */\n-public final class ArrowBufPointer {\n-\n-  private ArrowBuf buf;\n-\n-  private int offset;\n-\n-  private int length;\n-\n-  /**\n-   * The default constructor.\n-   */\n-  public ArrowBufPointer() {\n-\n-  }\n-\n-  /**\n-   * Constructs an Arrow buffer pointer.\n-   * @param buf the underlying {@link ArrowBuf}, which can be null.\n-   * @param offset the start off set of the memory region pointed to.\n-   * @param length the length off set of the memory region pointed to.\n-   */\n-  public ArrowBufPointer(ArrowBuf buf, int offset, int length) {\n-    set(buf, offset, length);\n-  }\n-\n-  /**\n-   * Sets this pointer.\n-   * @param buf the underlying {@link ArrowBuf}, which can be null.\n-   * @param offset the start off set of the memory region pointed to.\n-   * @param length the length off set of the memory region pointed to.\n-   */\n-  public void set(ArrowBuf buf, int offset, int length) {\n-    this.buf = buf;\n-    this.offset = offset;\n-    this.length = length;\n-  }\n-\n-  /**\n-   * Gets the underlying buffer, or null if the underlying data is invalid or null.\n-   * @return the underlying buffer, if any, or null if the underlying data is invalid or null.\n-   */\n-  public ArrowBuf getBuf() {\n-    return buf;\n-  }\n-\n-  public int getOffset() {\n-    return offset;\n-  }\n-\n-  public int getLength() {\n-    return length;\n-  }\n-\n-  @Override\n-  public boolean equals(Object o) {\n-    if (this == o) {\n-      return true;\n-    }\n-    if (o == null || getClass() != o.getClass()) {\n-      return false;\n-    }\n-\n-    ArrowBufPointer other = (ArrowBufPointer) o;\n-    if (buf == null || other.buf == null) {\n-      if (buf == null && other.buf == null) {\n-        return true;\n-      } else {\n-        return false;\n-      }\n-    }\n-\n-    return ByteFunctionHelpers.equal(buf, offset, offset + length,\n-            other.buf, other.offset, other.offset + other.length) != 0;\n-  }\n-\n-  @Override\n-  public int hashCode() {\n-    // implement after ARROW-5898\n-    throw new UnsupportedOperationException();\n-  }\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\r\n+ * contributor license agreements.  See the NOTICE file distributed with\r\n+ * this work for additional information regarding copyright ownership.\r\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\r\n+ * (the \"License\"); you may not use this file except in compliance with\r\n+ * the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *    http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+\r\n+package org.apache.arrow.memory.util;\r\n+\r\n+import org.apache.arrow.memory.util.hash.ArrowBufHasher;\r\n+import org.apache.arrow.memory.util.hash.DirectHasher;\r\n+import org.apache.arrow.util.Preconditions;\r\n+\r\n+import io.netty.buffer.ArrowBuf;\r\n+\r\n+/**\r\n+ * Pointer to a memory region within an {@link io.netty.buffer.ArrowBuf}.\r\n+ * It will be used as the basis for calculating hash code within a vector, and equality determination.\r\n+ */\r\n+public final class ArrowBufPointer {\r\n+\r\n+  /**\r\n+   * The hash code when the arrow buffer is null.\r\n+   */\r\n+  public static final int NULL_HASH_CODE = 0;\r\n+\r\n+  private ArrowBuf buf;\r\n+\r\n+  private int offset;\r\n+\r\n+  private int length;\r\n+\r\n+  private int hashCode = NULL_HASH_CODE;\r\n+\r\n+  private ArrowBufHasher hasher = DirectHasher.INSTANCE;\r\n+\r\n+  /**\r\n+   * A flag indicating if the underlying memory region has changed.\r\n+   */\r\n+  private boolean hashCodeChanged = false;\r\n+\r\n+  /**\r\n+   * The default constructor.\r\n+   */\r\n+  public ArrowBufPointer() {\r\n+\r\n+  }\r\n+\r\n+  /**\r\n+   * Constructs an Arrow buffer pointer.\r\n+   * @param buf the underlying {@link ArrowBuf}, which can be null.\r\n+   * @param offset the start off set of the memory region pointed to.\r\n+   * @param length the length off set of the memory region pointed to.\r\n+   */\r\n+  public ArrowBufPointer(ArrowBuf buf, int offset, int length) {\r\n+    set(buf, offset, length);\r\n+  }\r\n+\r\n+  /**\r\n+   * Sets this pointer.\r\n+   * @param buf the underlying {@link ArrowBuf}, which can be null.\r\n+   * @param offset the start off set of the memory region pointed to.\r\n+   * @param length the length off set of the memory region pointed to.\r\n+   */\r\n+  public void set(ArrowBuf buf, int offset, int length) {\r\n+    this.buf = buf;\r\n+    this.offset = offset;\r\n+    this.length = length;\r\n+\r\n+    hashCodeChanged = true;\r\n+  }\r\n+\r\n+  /**\r\n+   * Sets the hasher for the pointer.\r\n+   * @param hasher the hasher to set.\r\n+   */\r\n+  public void setHasher(ArrowBufHasher hasher) {\r\n+    Preconditions.checkNotNull(hasher);\r\n+    this.hasher = hasher;\r\n+    hashCodeChanged = true;\r\n+  }\r\n+\r\n+  /**\r\n+   * Gets the underlying buffer, or null if the underlying data is invalid or null.\r\n+   * @return the underlying buffer, if any, or null if the underlying data is invalid or null.\r\n+   */\r\n+  public ArrowBuf getBuf() {\r\n+    return buf;\r\n+  }\r\n+\r\n+  public int getOffset() {\r\n+    return offset;\r\n+  }\r\n+\r\n+  public int getLength() {\r\n+    return length;\r\n+  }\r\n+\r\n+  @Override\r\n+  public boolean equals(Object o) {\r\n+    if (this == o) {\r\n+      return true;\r\n+    }\r\n+    if (o == null || getClass() != o.getClass()) {\r\n+      return false;\r\n+    }\r\n+\r\n+    ArrowBufPointer other = (ArrowBufPointer) o;\r\n+    if (buf == null || other.buf == null) {\r\n+      if (buf == null && other.buf == null) {\r\n+        return true;\r\n+      } else {\r\n+        return false;\r\n+      }\r\n+    }\r\n+\r\n+    return ByteFunctionHelpers.equal(buf, offset, offset + length,\r\n+            other.buf, other.offset, other.offset + other.length) != 0;\r\n+  }\r\n+\r\n+  @Override\r\n+  public int hashCode() {\r\n \n Review comment:\n   I was thinking of two different hash functions in use?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-31T20:45:25.489+0000",
                    "updated": "2019-07-31T20:45:25.489+0000",
                    "started": "2019-07-31T20:45:25.489+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "286215",
                    "issueId": "13246940"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13246940/worklog/286475",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pravindra commented on pull request #4939: ARROW-6030: [Java] Efficiently compute hash code for ArrowBufPointer\nURL: https://github.com/apache/arrow/pull/4939#discussion_r309546217\n \n \n\n ##########\n File path: java/memory/src/main/java/org/apache/arrow/memory/util/ArrowBufPointer.java\n ##########\n @@ -1,106 +1,147 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.arrow.memory.util;\n-\n-import io.netty.buffer.ArrowBuf;\n-\n-/**\n- * Pointer to a memory region within an {@link io.netty.buffer.ArrowBuf}.\n- * It will be used as the basis for calculating hash code within a vector, and equality determination.\n- */\n-public final class ArrowBufPointer {\n-\n-  private ArrowBuf buf;\n-\n-  private int offset;\n-\n-  private int length;\n-\n-  /**\n-   * The default constructor.\n-   */\n-  public ArrowBufPointer() {\n-\n-  }\n-\n-  /**\n-   * Constructs an Arrow buffer pointer.\n-   * @param buf the underlying {@link ArrowBuf}, which can be null.\n-   * @param offset the start off set of the memory region pointed to.\n-   * @param length the length off set of the memory region pointed to.\n-   */\n-  public ArrowBufPointer(ArrowBuf buf, int offset, int length) {\n-    set(buf, offset, length);\n-  }\n-\n-  /**\n-   * Sets this pointer.\n-   * @param buf the underlying {@link ArrowBuf}, which can be null.\n-   * @param offset the start off set of the memory region pointed to.\n-   * @param length the length off set of the memory region pointed to.\n-   */\n-  public void set(ArrowBuf buf, int offset, int length) {\n-    this.buf = buf;\n-    this.offset = offset;\n-    this.length = length;\n-  }\n-\n-  /**\n-   * Gets the underlying buffer, or null if the underlying data is invalid or null.\n-   * @return the underlying buffer, if any, or null if the underlying data is invalid or null.\n-   */\n-  public ArrowBuf getBuf() {\n-    return buf;\n-  }\n-\n-  public int getOffset() {\n-    return offset;\n-  }\n-\n-  public int getLength() {\n-    return length;\n-  }\n-\n-  @Override\n-  public boolean equals(Object o) {\n-    if (this == o) {\n-      return true;\n-    }\n-    if (o == null || getClass() != o.getClass()) {\n-      return false;\n-    }\n-\n-    ArrowBufPointer other = (ArrowBufPointer) o;\n-    if (buf == null || other.buf == null) {\n-      if (buf == null && other.buf == null) {\n-        return true;\n-      } else {\n-        return false;\n-      }\n-    }\n-\n-    return ByteFunctionHelpers.equal(buf, offset, offset + length,\n-            other.buf, other.offset, other.offset + other.length) != 0;\n-  }\n-\n-  @Override\n-  public int hashCode() {\n-    // implement after ARROW-5898\n-    throw new UnsupportedOperationException();\n-  }\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\r\n+ * contributor license agreements.  See the NOTICE file distributed with\r\n+ * this work for additional information regarding copyright ownership.\r\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\r\n+ * (the \"License\"); you may not use this file except in compliance with\r\n+ * the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *    http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+\r\n+package org.apache.arrow.memory.util;\r\n+\r\n+import org.apache.arrow.memory.util.hash.ArrowBufHasher;\r\n+import org.apache.arrow.memory.util.hash.DirectHasher;\r\n+import org.apache.arrow.util.Preconditions;\r\n+\r\n+import io.netty.buffer.ArrowBuf;\r\n+\r\n+/**\r\n+ * Pointer to a memory region within an {@link io.netty.buffer.ArrowBuf}.\r\n+ * It will be used as the basis for calculating hash code within a vector, and equality determination.\r\n+ */\r\n+public final class ArrowBufPointer {\r\n+\r\n+  /**\r\n+   * The hash code when the arrow buffer is null.\r\n+   */\r\n+  public static final int NULL_HASH_CODE = 0;\r\n+\r\n+  private ArrowBuf buf;\r\n+\r\n+  private int offset;\r\n+\r\n+  private int length;\r\n+\r\n+  private int hashCode = NULL_HASH_CODE;\r\n+\r\n+  private ArrowBufHasher hasher = DirectHasher.INSTANCE;\r\n+\r\n+  /**\r\n+   * A flag indicating if the underlying memory region has changed.\r\n+   */\r\n+  private boolean hashCodeChanged = false;\r\n+\r\n+  /**\r\n+   * The default constructor.\r\n+   */\r\n+  public ArrowBufPointer() {\r\n+\r\n+  }\r\n+\r\n+  /**\r\n+   * Constructs an Arrow buffer pointer.\r\n+   * @param buf the underlying {@link ArrowBuf}, which can be null.\r\n+   * @param offset the start off set of the memory region pointed to.\r\n+   * @param length the length off set of the memory region pointed to.\r\n+   */\r\n+  public ArrowBufPointer(ArrowBuf buf, int offset, int length) {\r\n+    set(buf, offset, length);\r\n+  }\r\n+\r\n+  /**\r\n+   * Sets this pointer.\r\n+   * @param buf the underlying {@link ArrowBuf}, which can be null.\r\n+   * @param offset the start off set of the memory region pointed to.\r\n+   * @param length the length off set of the memory region pointed to.\r\n+   */\r\n+  public void set(ArrowBuf buf, int offset, int length) {\r\n+    this.buf = buf;\r\n+    this.offset = offset;\r\n+    this.length = length;\r\n+\r\n+    hashCodeChanged = true;\r\n+  }\r\n+\r\n+  /**\r\n+   * Sets the hasher for the pointer.\r\n+   * @param hasher the hasher to set.\r\n+   */\r\n+  public void setHasher(ArrowBufHasher hasher) {\r\n+    Preconditions.checkNotNull(hasher);\r\n+    this.hasher = hasher;\r\n+    hashCodeChanged = true;\r\n+  }\r\n+\r\n+  /**\r\n+   * Gets the underlying buffer, or null if the underlying data is invalid or null.\r\n+   * @return the underlying buffer, if any, or null if the underlying data is invalid or null.\r\n+   */\r\n+  public ArrowBuf getBuf() {\r\n+    return buf;\r\n+  }\r\n+\r\n+  public int getOffset() {\r\n+    return offset;\r\n+  }\r\n+\r\n+  public int getLength() {\r\n+    return length;\r\n+  }\r\n+\r\n+  @Override\r\n+  public boolean equals(Object o) {\r\n+    if (this == o) {\r\n+      return true;\r\n+    }\r\n+    if (o == null || getClass() != o.getClass()) {\r\n+      return false;\r\n+    }\r\n+\r\n+    ArrowBufPointer other = (ArrowBufPointer) o;\r\n+    if (buf == null || other.buf == null) {\r\n+      if (buf == null && other.buf == null) {\r\n+        return true;\r\n+      } else {\r\n+        return false;\r\n+      }\r\n+    }\r\n+\r\n+    return ByteFunctionHelpers.equal(buf, offset, offset + length,\r\n+            other.buf, other.offset, other.offset + other.length) != 0;\r\n+  }\r\n+\r\n+  @Override\r\n+  public int hashCode() {\r\n \n Review comment:\n   would it be cleaner if the hasher can be set only via the constructor ? That way, a given instance of ArrowBufPointer cannot return different hash values for the same data content,\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-01T06:53:27.746+0000",
                    "updated": "2019-08-01T06:53:27.746+0000",
                    "started": "2019-08-01T06:53:27.745+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "286475",
                    "issueId": "13246940"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13246940/worklog/286539",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #4939: ARROW-6030: [Java] Efficiently compute hash code for ArrowBufPointer\nURL: https://github.com/apache/arrow/pull/4939#discussion_r309586321\n \n \n\n ##########\n File path: java/memory/src/main/java/org/apache/arrow/memory/util/ArrowBufPointer.java\n ##########\n @@ -1,106 +1,147 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.arrow.memory.util;\n-\n-import io.netty.buffer.ArrowBuf;\n-\n-/**\n- * Pointer to a memory region within an {@link io.netty.buffer.ArrowBuf}.\n- * It will be used as the basis for calculating hash code within a vector, and equality determination.\n- */\n-public final class ArrowBufPointer {\n-\n-  private ArrowBuf buf;\n-\n-  private int offset;\n-\n-  private int length;\n-\n-  /**\n-   * The default constructor.\n-   */\n-  public ArrowBufPointer() {\n-\n-  }\n-\n-  /**\n-   * Constructs an Arrow buffer pointer.\n-   * @param buf the underlying {@link ArrowBuf}, which can be null.\n-   * @param offset the start off set of the memory region pointed to.\n-   * @param length the length off set of the memory region pointed to.\n-   */\n-  public ArrowBufPointer(ArrowBuf buf, int offset, int length) {\n-    set(buf, offset, length);\n-  }\n-\n-  /**\n-   * Sets this pointer.\n-   * @param buf the underlying {@link ArrowBuf}, which can be null.\n-   * @param offset the start off set of the memory region pointed to.\n-   * @param length the length off set of the memory region pointed to.\n-   */\n-  public void set(ArrowBuf buf, int offset, int length) {\n-    this.buf = buf;\n-    this.offset = offset;\n-    this.length = length;\n-  }\n-\n-  /**\n-   * Gets the underlying buffer, or null if the underlying data is invalid or null.\n-   * @return the underlying buffer, if any, or null if the underlying data is invalid or null.\n-   */\n-  public ArrowBuf getBuf() {\n-    return buf;\n-  }\n-\n-  public int getOffset() {\n-    return offset;\n-  }\n-\n-  public int getLength() {\n-    return length;\n-  }\n-\n-  @Override\n-  public boolean equals(Object o) {\n-    if (this == o) {\n-      return true;\n-    }\n-    if (o == null || getClass() != o.getClass()) {\n-      return false;\n-    }\n-\n-    ArrowBufPointer other = (ArrowBufPointer) o;\n-    if (buf == null || other.buf == null) {\n-      if (buf == null && other.buf == null) {\n-        return true;\n-      } else {\n-        return false;\n-      }\n-    }\n-\n-    return ByteFunctionHelpers.equal(buf, offset, offset + length,\n-            other.buf, other.offset, other.offset + other.length) != 0;\n-  }\n-\n-  @Override\n-  public int hashCode() {\n-    // implement after ARROW-5898\n-    throw new UnsupportedOperationException();\n-  }\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\r\n+ * contributor license agreements.  See the NOTICE file distributed with\r\n+ * this work for additional information regarding copyright ownership.\r\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\r\n+ * (the \"License\"); you may not use this file except in compliance with\r\n+ * the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *    http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+\r\n+package org.apache.arrow.memory.util;\r\n+\r\n+import org.apache.arrow.memory.util.hash.ArrowBufHasher;\r\n+import org.apache.arrow.memory.util.hash.DirectHasher;\r\n+import org.apache.arrow.util.Preconditions;\r\n+\r\n+import io.netty.buffer.ArrowBuf;\r\n+\r\n+/**\r\n+ * Pointer to a memory region within an {@link io.netty.buffer.ArrowBuf}.\r\n+ * It will be used as the basis for calculating hash code within a vector, and equality determination.\r\n+ */\r\n+public final class ArrowBufPointer {\r\n+\r\n+  /**\r\n+   * The hash code when the arrow buffer is null.\r\n+   */\r\n+  public static final int NULL_HASH_CODE = 0;\r\n+\r\n+  private ArrowBuf buf;\r\n+\r\n+  private int offset;\r\n+\r\n+  private int length;\r\n+\r\n+  private int hashCode = NULL_HASH_CODE;\r\n+\r\n+  private ArrowBufHasher hasher = DirectHasher.INSTANCE;\r\n+\r\n+  /**\r\n+   * A flag indicating if the underlying memory region has changed.\r\n+   */\r\n+  private boolean hashCodeChanged = false;\r\n+\r\n+  /**\r\n+   * The default constructor.\r\n+   */\r\n+  public ArrowBufPointer() {\r\n+\r\n+  }\r\n+\r\n+  /**\r\n+   * Constructs an Arrow buffer pointer.\r\n+   * @param buf the underlying {@link ArrowBuf}, which can be null.\r\n+   * @param offset the start off set of the memory region pointed to.\r\n+   * @param length the length off set of the memory region pointed to.\r\n+   */\r\n+  public ArrowBufPointer(ArrowBuf buf, int offset, int length) {\r\n+    set(buf, offset, length);\r\n+  }\r\n+\r\n+  /**\r\n+   * Sets this pointer.\r\n+   * @param buf the underlying {@link ArrowBuf}, which can be null.\r\n+   * @param offset the start off set of the memory region pointed to.\r\n+   * @param length the length off set of the memory region pointed to.\r\n+   */\r\n+  public void set(ArrowBuf buf, int offset, int length) {\r\n+    this.buf = buf;\r\n+    this.offset = offset;\r\n+    this.length = length;\r\n+\r\n+    hashCodeChanged = true;\r\n+  }\r\n+\r\n+  /**\r\n+   * Sets the hasher for the pointer.\r\n+   * @param hasher the hasher to set.\r\n+   */\r\n+  public void setHasher(ArrowBufHasher hasher) {\r\n+    Preconditions.checkNotNull(hasher);\r\n+    this.hasher = hasher;\r\n+    hashCodeChanged = true;\r\n+  }\r\n+\r\n+  /**\r\n+   * Gets the underlying buffer, or null if the underlying data is invalid or null.\r\n+   * @return the underlying buffer, if any, or null if the underlying data is invalid or null.\r\n+   */\r\n+  public ArrowBuf getBuf() {\r\n+    return buf;\r\n+  }\r\n+\r\n+  public int getOffset() {\r\n+    return offset;\r\n+  }\r\n+\r\n+  public int getLength() {\r\n+    return length;\r\n+  }\r\n+\r\n+  @Override\r\n+  public boolean equals(Object o) {\r\n+    if (this == o) {\r\n+      return true;\r\n+    }\r\n+    if (o == null || getClass() != o.getClass()) {\r\n+      return false;\r\n+    }\r\n+\r\n+    ArrowBufPointer other = (ArrowBufPointer) o;\r\n+    if (buf == null || other.buf == null) {\r\n+      if (buf == null && other.buf == null) {\r\n+        return true;\r\n+      } else {\r\n+        return false;\r\n+      }\r\n+    }\r\n+\r\n+    return ByteFunctionHelpers.equal(buf, offset, offset + length,\r\n+            other.buf, other.offset, other.offset + other.length) != 0;\r\n+  }\r\n+\r\n+  @Override\r\n+  public int hashCode() {\r\n \n Review comment:\n   @pravindra Great suggestion. Thank you so much.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-01T08:43:42.038+0000",
                    "updated": "2019-08-01T08:43:42.038+0000",
                    "started": "2019-08-01T08:43:42.038+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "286539",
                    "issueId": "13246940"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13246940/worklog/286648",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #4939: ARROW-6030: [Java] Efficiently compute hash code for ArrowBufPointer\nURL: https://github.com/apache/arrow/pull/4939#issuecomment-517249258\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/4939?src=pr&el=h1) Report\n   > Merging [#4939](https://codecov.io/gh/apache/arrow/pull/4939?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/25efd825e0f523fe32bd2eabd6c2ba60921d031f?src=pr&el=desc) will **increase** coverage by `2.13%`.\n   > The diff coverage is `n/a`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/4939/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/4939?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #4939      +/-   ##\n   ==========================================\n   + Coverage   87.57%   89.71%   +2.13%     \n   ==========================================\n     Files        1002      667     -335     \n     Lines      142994    98627   -44367     \n     Branches     1418        0    -1418     \n   ==========================================\n   - Hits       125224    88480   -36744     \n   + Misses      17408    10147    -7261     \n   + Partials      362        0     -362\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/4939?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [r/src/recordbatch.cpp](https://codecov.io/gh/apache/arrow/pull/4939/diff?src=pr&el=tree#diff-ci9zcmMvcmVjb3JkYmF0Y2guY3Bw) | | |\n   | [r/R/Table.R](https://codecov.io/gh/apache/arrow/pull/4939/diff?src=pr&el=tree#diff-ci9SL1RhYmxlLlI=) | | |\n   | [js/src/util/fn.ts](https://codecov.io/gh/apache/arrow/pull/4939/diff?src=pr&el=tree#diff-anMvc3JjL3V0aWwvZm4udHM=) | | |\n   | [go/arrow/array/bufferbuilder.go](https://codecov.io/gh/apache/arrow/pull/4939/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvYnVmZmVyYnVpbGRlci5nbw==) | | |\n   | [r/src/symbols.cpp](https://codecov.io/gh/apache/arrow/pull/4939/diff?src=pr&el=tree#diff-ci9zcmMvc3ltYm9scy5jcHA=) | | |\n   | [rust/datafusion/src/execution/projection.rs](https://codecov.io/gh/apache/arrow/pull/4939/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9leGVjdXRpb24vcHJvamVjdGlvbi5ycw==) | | |\n   | [rust/datafusion/src/execution/filter.rs](https://codecov.io/gh/apache/arrow/pull/4939/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9leGVjdXRpb24vZmlsdGVyLnJz) | | |\n   | [rust/arrow/src/csv/writer.rs](https://codecov.io/gh/apache/arrow/pull/4939/diff?src=pr&el=tree#diff-cnVzdC9hcnJvdy9zcmMvY3N2L3dyaXRlci5ycw==) | | |\n   | [rust/datafusion/src/bin/main.rs](https://codecov.io/gh/apache/arrow/pull/4939/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9iaW4vbWFpbi5ycw==) | | |\n   | [go/arrow/ipc/file\\_reader.go](https://codecov.io/gh/apache/arrow/pull/4939/diff?src=pr&el=tree#diff-Z28vYXJyb3cvaXBjL2ZpbGVfcmVhZGVyLmdv) | | |\n   | ... and [326 more](https://codecov.io/gh/apache/arrow/pull/4939/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/4939?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/4939?src=pr&el=footer). Last update [25efd82...589c22c](https://codecov.io/gh/apache/arrow/pull/4939?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-01T11:44:51.789+0000",
                    "updated": "2019-08-01T11:44:51.789+0000",
                    "started": "2019-08-01T11:44:51.788+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "286648",
                    "issueId": "13246940"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13246940/worklog/286706",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pravindra commented on pull request #4939: ARROW-6030: [Java] Efficiently compute hash code for ArrowBufPointer\nURL: https://github.com/apache/arrow/pull/4939#discussion_r309696590\n \n \n\n ##########\n File path: java/memory/src/main/java/org/apache/arrow/memory/util/ArrowBufPointer.java\n ##########\n @@ -1,106 +1,147 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.arrow.memory.util;\n-\n-import io.netty.buffer.ArrowBuf;\n-\n-/**\n- * Pointer to a memory region within an {@link io.netty.buffer.ArrowBuf}.\n- * It will be used as the basis for calculating hash code within a vector, and equality determination.\n- */\n-public final class ArrowBufPointer {\n-\n-  private ArrowBuf buf;\n-\n-  private int offset;\n-\n-  private int length;\n-\n-  /**\n-   * The default constructor.\n-   */\n-  public ArrowBufPointer() {\n-\n-  }\n-\n-  /**\n-   * Constructs an Arrow buffer pointer.\n-   * @param buf the underlying {@link ArrowBuf}, which can be null.\n-   * @param offset the start off set of the memory region pointed to.\n-   * @param length the length off set of the memory region pointed to.\n-   */\n-  public ArrowBufPointer(ArrowBuf buf, int offset, int length) {\n-    set(buf, offset, length);\n-  }\n-\n-  /**\n-   * Sets this pointer.\n-   * @param buf the underlying {@link ArrowBuf}, which can be null.\n-   * @param offset the start off set of the memory region pointed to.\n-   * @param length the length off set of the memory region pointed to.\n-   */\n-  public void set(ArrowBuf buf, int offset, int length) {\n-    this.buf = buf;\n-    this.offset = offset;\n-    this.length = length;\n-  }\n-\n-  /**\n-   * Gets the underlying buffer, or null if the underlying data is invalid or null.\n-   * @return the underlying buffer, if any, or null if the underlying data is invalid or null.\n-   */\n-  public ArrowBuf getBuf() {\n-    return buf;\n-  }\n-\n-  public int getOffset() {\n-    return offset;\n-  }\n-\n-  public int getLength() {\n-    return length;\n-  }\n-\n-  @Override\n-  public boolean equals(Object o) {\n-    if (this == o) {\n-      return true;\n-    }\n-    if (o == null || getClass() != o.getClass()) {\n-      return false;\n-    }\n-\n-    ArrowBufPointer other = (ArrowBufPointer) o;\n-    if (buf == null || other.buf == null) {\n-      if (buf == null && other.buf == null) {\n-        return true;\n-      } else {\n-        return false;\n-      }\n-    }\n-\n-    return ByteFunctionHelpers.equal(buf, offset, offset + length,\n-            other.buf, other.offset, other.offset + other.length) != 0;\n-  }\n-\n-  @Override\n-  public int hashCode() {\n-    // implement after ARROW-5898\n-    throw new UnsupportedOperationException();\n-  }\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\r\n+ * contributor license agreements.  See the NOTICE file distributed with\r\n+ * this work for additional information regarding copyright ownership.\r\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\r\n+ * (the \"License\"); you may not use this file except in compliance with\r\n+ * the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *    http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+\r\n+package org.apache.arrow.memory.util;\r\n+\r\n+import org.apache.arrow.memory.util.hash.ArrowBufHasher;\r\n+import org.apache.arrow.memory.util.hash.DirectHasher;\r\n+import org.apache.arrow.util.Preconditions;\r\n+\r\n+import io.netty.buffer.ArrowBuf;\r\n+\r\n+/**\r\n+ * Pointer to a memory region within an {@link io.netty.buffer.ArrowBuf}.\r\n+ * It will be used as the basis for calculating hash code within a vector, and equality determination.\r\n+ */\r\n+public final class ArrowBufPointer {\r\n+\r\n+  /**\r\n+   * The hash code when the arrow buffer is null.\r\n+   */\r\n+  public static final int NULL_HASH_CODE = 0;\r\n+\r\n+  private ArrowBuf buf;\r\n+\r\n+  private int offset;\r\n+\r\n+  private int length;\r\n+\r\n+  private int hashCode = NULL_HASH_CODE;\r\n+\r\n+  private ArrowBufHasher hasher = DirectHasher.INSTANCE;\r\n+\r\n+  /**\r\n+   * A flag indicating if the underlying memory region has changed.\r\n+   */\r\n+  private boolean hashCodeChanged = false;\r\n+\r\n+  /**\r\n+   * The default constructor.\r\n+   */\r\n+  public ArrowBufPointer() {\r\n+\r\n+  }\r\n+\r\n+  /**\r\n+   * Constructs an Arrow buffer pointer.\r\n+   * @param buf the underlying {@link ArrowBuf}, which can be null.\r\n+   * @param offset the start off set of the memory region pointed to.\r\n+   * @param length the length off set of the memory region pointed to.\r\n+   */\r\n+  public ArrowBufPointer(ArrowBuf buf, int offset, int length) {\r\n+    set(buf, offset, length);\r\n+  }\r\n+\r\n+  /**\r\n+   * Sets this pointer.\r\n+   * @param buf the underlying {@link ArrowBuf}, which can be null.\r\n+   * @param offset the start off set of the memory region pointed to.\r\n+   * @param length the length off set of the memory region pointed to.\r\n+   */\r\n+  public void set(ArrowBuf buf, int offset, int length) {\r\n+    this.buf = buf;\r\n+    this.offset = offset;\r\n+    this.length = length;\r\n+\r\n+    hashCodeChanged = true;\r\n+  }\r\n+\r\n+  /**\r\n+   * Sets the hasher for the pointer.\r\n+   * @param hasher the hasher to set.\r\n+   */\r\n+  public void setHasher(ArrowBufHasher hasher) {\r\n+    Preconditions.checkNotNull(hasher);\r\n+    this.hasher = hasher;\r\n+    hashCodeChanged = true;\r\n+  }\r\n+\r\n+  /**\r\n+   * Gets the underlying buffer, or null if the underlying data is invalid or null.\r\n+   * @return the underlying buffer, if any, or null if the underlying data is invalid or null.\r\n+   */\r\n+  public ArrowBuf getBuf() {\r\n+    return buf;\r\n+  }\r\n+\r\n+  public int getOffset() {\r\n+    return offset;\r\n+  }\r\n+\r\n+  public int getLength() {\r\n+    return length;\r\n+  }\r\n+\r\n+  @Override\r\n+  public boolean equals(Object o) {\r\n+    if (this == o) {\r\n+      return true;\r\n+    }\r\n+    if (o == null || getClass() != o.getClass()) {\r\n+      return false;\r\n+    }\r\n+\r\n+    ArrowBufPointer other = (ArrowBufPointer) o;\r\n+    if (buf == null || other.buf == null) {\r\n+      if (buf == null && other.buf == null) {\r\n+        return true;\r\n+      } else {\r\n+        return false;\r\n+      }\r\n+    }\r\n+\r\n+    return ByteFunctionHelpers.equal(buf, offset, offset + length,\r\n+            other.buf, other.offset, other.offset + other.length) != 0;\r\n+  }\r\n+\r\n+  @Override\r\n+  public int hashCode() {\r\n \n Review comment:\n   this lgtm. @emkornfield does this solve the concern you raised ?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-01T13:30:37.522+0000",
                    "updated": "2019-08-01T13:30:37.522+0000",
                    "started": "2019-08-01T13:30:37.521+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "286706",
                    "issueId": "13246940"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13246940/worklog/287455",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #4939: ARROW-6030: [Java] Efficiently compute hash code for ArrowBufPointer\nURL: https://github.com/apache/arrow/pull/4939#discussion_r309968761\n \n \n\n ##########\n File path: java/memory/src/main/java/org/apache/arrow/memory/util/ArrowBufPointer.java\n ##########\n @@ -1,106 +1,147 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.arrow.memory.util;\n-\n-import io.netty.buffer.ArrowBuf;\n-\n-/**\n- * Pointer to a memory region within an {@link io.netty.buffer.ArrowBuf}.\n- * It will be used as the basis for calculating hash code within a vector, and equality determination.\n- */\n-public final class ArrowBufPointer {\n-\n-  private ArrowBuf buf;\n-\n-  private int offset;\n-\n-  private int length;\n-\n-  /**\n-   * The default constructor.\n-   */\n-  public ArrowBufPointer() {\n-\n-  }\n-\n-  /**\n-   * Constructs an Arrow buffer pointer.\n-   * @param buf the underlying {@link ArrowBuf}, which can be null.\n-   * @param offset the start off set of the memory region pointed to.\n-   * @param length the length off set of the memory region pointed to.\n-   */\n-  public ArrowBufPointer(ArrowBuf buf, int offset, int length) {\n-    set(buf, offset, length);\n-  }\n-\n-  /**\n-   * Sets this pointer.\n-   * @param buf the underlying {@link ArrowBuf}, which can be null.\n-   * @param offset the start off set of the memory region pointed to.\n-   * @param length the length off set of the memory region pointed to.\n-   */\n-  public void set(ArrowBuf buf, int offset, int length) {\n-    this.buf = buf;\n-    this.offset = offset;\n-    this.length = length;\n-  }\n-\n-  /**\n-   * Gets the underlying buffer, or null if the underlying data is invalid or null.\n-   * @return the underlying buffer, if any, or null if the underlying data is invalid or null.\n-   */\n-  public ArrowBuf getBuf() {\n-    return buf;\n-  }\n-\n-  public int getOffset() {\n-    return offset;\n-  }\n-\n-  public int getLength() {\n-    return length;\n-  }\n-\n-  @Override\n-  public boolean equals(Object o) {\n-    if (this == o) {\n-      return true;\n-    }\n-    if (o == null || getClass() != o.getClass()) {\n-      return false;\n-    }\n-\n-    ArrowBufPointer other = (ArrowBufPointer) o;\n-    if (buf == null || other.buf == null) {\n-      if (buf == null && other.buf == null) {\n-        return true;\n-      } else {\n-        return false;\n-      }\n-    }\n-\n-    return ByteFunctionHelpers.equal(buf, offset, offset + length,\n-            other.buf, other.offset, other.offset + other.length) != 0;\n-  }\n-\n-  @Override\n-  public int hashCode() {\n-    // implement after ARROW-5898\n-    throw new UnsupportedOperationException();\n-  }\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\r\n+ * contributor license agreements.  See the NOTICE file distributed with\r\n+ * this work for additional information regarding copyright ownership.\r\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\r\n+ * (the \"License\"); you may not use this file except in compliance with\r\n+ * the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *    http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+\r\n+package org.apache.arrow.memory.util;\r\n+\r\n+import org.apache.arrow.memory.util.hash.ArrowBufHasher;\r\n+import org.apache.arrow.memory.util.hash.DirectHasher;\r\n+import org.apache.arrow.util.Preconditions;\r\n+\r\n+import io.netty.buffer.ArrowBuf;\r\n+\r\n+/**\r\n+ * Pointer to a memory region within an {@link io.netty.buffer.ArrowBuf}.\r\n+ * It will be used as the basis for calculating hash code within a vector, and equality determination.\r\n+ */\r\n+public final class ArrowBufPointer {\r\n+\r\n+  /**\r\n+   * The hash code when the arrow buffer is null.\r\n+   */\r\n+  public static final int NULL_HASH_CODE = 0;\r\n+\r\n+  private ArrowBuf buf;\r\n+\r\n+  private int offset;\r\n+\r\n+  private int length;\r\n+\r\n+  private int hashCode = NULL_HASH_CODE;\r\n+\r\n+  private ArrowBufHasher hasher = DirectHasher.INSTANCE;\r\n+\r\n+  /**\r\n+   * A flag indicating if the underlying memory region has changed.\r\n+   */\r\n+  private boolean hashCodeChanged = false;\r\n+\r\n+  /**\r\n+   * The default constructor.\r\n+   */\r\n+  public ArrowBufPointer() {\r\n+\r\n+  }\r\n+\r\n+  /**\r\n+   * Constructs an Arrow buffer pointer.\r\n+   * @param buf the underlying {@link ArrowBuf}, which can be null.\r\n+   * @param offset the start off set of the memory region pointed to.\r\n+   * @param length the length off set of the memory region pointed to.\r\n+   */\r\n+  public ArrowBufPointer(ArrowBuf buf, int offset, int length) {\r\n+    set(buf, offset, length);\r\n+  }\r\n+\r\n+  /**\r\n+   * Sets this pointer.\r\n+   * @param buf the underlying {@link ArrowBuf}, which can be null.\r\n+   * @param offset the start off set of the memory region pointed to.\r\n+   * @param length the length off set of the memory region pointed to.\r\n+   */\r\n+  public void set(ArrowBuf buf, int offset, int length) {\r\n+    this.buf = buf;\r\n+    this.offset = offset;\r\n+    this.length = length;\r\n+\r\n+    hashCodeChanged = true;\r\n+  }\r\n+\r\n+  /**\r\n+   * Sets the hasher for the pointer.\r\n+   * @param hasher the hasher to set.\r\n+   */\r\n+  public void setHasher(ArrowBufHasher hasher) {\r\n+    Preconditions.checkNotNull(hasher);\r\n+    this.hasher = hasher;\r\n+    hashCodeChanged = true;\r\n+  }\r\n+\r\n+  /**\r\n+   * Gets the underlying buffer, or null if the underlying data is invalid or null.\r\n+   * @return the underlying buffer, if any, or null if the underlying data is invalid or null.\r\n+   */\r\n+  public ArrowBuf getBuf() {\r\n+    return buf;\r\n+  }\r\n+\r\n+  public int getOffset() {\r\n+    return offset;\r\n+  }\r\n+\r\n+  public int getLength() {\r\n+    return length;\r\n+  }\r\n+\r\n+  @Override\r\n+  public boolean equals(Object o) {\r\n+    if (this == o) {\r\n+      return true;\r\n+    }\r\n+    if (o == null || getClass() != o.getClass()) {\r\n+      return false;\r\n+    }\r\n+\r\n+    ArrowBufPointer other = (ArrowBufPointer) o;\r\n+    if (buf == null || other.buf == null) {\r\n+      if (buf == null && other.buf == null) {\r\n+        return true;\r\n+      } else {\r\n+        return false;\r\n+      }\r\n+    }\r\n+\r\n+    return ByteFunctionHelpers.equal(buf, offset, offset + length,\r\n+            other.buf, other.offset, other.offset + other.length) != 0;\r\n+  }\r\n+\r\n+  @Override\r\n+  public int hashCode() {\r\n \n Review comment:\n   I don't want to hold up merging.  You still have a strange contract that two separately constructed pointers can have different hashcodes but are still equals.  One could make equality date into account that hasher but that might be slightly surprising as well.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-02T03:17:09.765+0000",
                    "updated": "2019-08-02T03:17:09.765+0000",
                    "started": "2019-08-02T03:17:09.765+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "287455",
                    "issueId": "13246940"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 15000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@43aef875[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6ec5558a[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4f1e7da5[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@b3308c9[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@d45c9ff[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@4c3c7fa0[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@70f3d0d7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@6395eb40[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@403cdcfc[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@6f527a24[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1c96a71[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@4dca5ee3[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 15000,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Aug 05 06:31:13 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-08-05T06:31:13.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-6030/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2019-07-25T01:53:37.000+0000",
        "updated": "2019-08-05T06:31:40.000+0000",
        "timeoriginalestimate": null,
        "description": "As ArrowBufHasher is introduced, we can compute the hash code of a continuous region within an ArrowBuf.\u00a0\r\n\r\nWe optimize the process to make it efficient to avoid recomputation.\u00a0",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "4h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 15000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Java] Efficiently compute hash code for ArrowBufPointer",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13246940/comment/16899815",
                    "id": "16899815",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=pravindra",
                        "name": "pravindra",
                        "key": "pravindra",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34055",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34055",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34055",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34055"
                        },
                        "displayName": "Pindikura Ravindra",
                        "active": true,
                        "timeZone": "Asia/Kolkata"
                    },
                    "body": "Issue resolved by pull request 4939\n[https://github.com/apache/arrow/pull/4939]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=pravindra",
                        "name": "pravindra",
                        "key": "pravindra",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34055",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34055",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34055",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34055"
                        },
                        "displayName": "Pindikura Ravindra",
                        "active": true,
                        "timeZone": "Asia/Kolkata"
                    },
                    "created": "2019-08-05T06:31:13.698+0000",
                    "updated": "2019-08-05T06:31:13.698+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0502o:",
        "customfield_12314139": null
    }
}