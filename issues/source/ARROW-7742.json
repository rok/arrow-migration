{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13282828",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13282828",
    "key": "ARROW-7742",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12346687",
                "id": "12346687",
                "description": "",
                "name": "0.17.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-04-20"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=shiro615",
            "name": "shiro615",
            "key": "shiro615",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34043",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34043",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34043",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34043"
            },
            "displayName": "Yosuke Shiro",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12332430",
                "id": "12332430",
                "name": "GLib"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=shiro615",
            "name": "shiro615",
            "key": "shiro615",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34043",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34043",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34043",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34043"
            },
            "displayName": "Yosuke Shiro",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=shiro615",
            "name": "shiro615",
            "key": "shiro615",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34043",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34043",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34043",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34043"
            },
            "displayName": "Yosuke Shiro",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 5400,
            "total": 5400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 5400,
            "total": 5400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-7742/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 15,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13282828/worklog/387951",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "shiro615 commented on pull request #6436: ARROW-7742: [GLib] Add support for MapArray\nURL: https://github.com/apache/arrow/pull/6436\n \n \n   This PR add support for `GArrowMapArrayBuilder`, `GArrowMapArray`, and `GArrowMapDataType`.\r\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-15T16:57:21.522+0000",
                    "updated": "2020-02-15T16:57:21.522+0000",
                    "started": "2020-02-15T16:57:21.521+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "387951",
                    "issueId": "13282828"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13282828/worklog/387952",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on issue #6436: ARROW-7742: [GLib] Add support for MapArray\nURL: https://github.com/apache/arrow/pull/6436#issuecomment-586620361\n \n \n   https://issues.apache.org/jira/browse/ARROW-7742\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-15T17:02:49.819+0000",
                    "updated": "2020-02-15T17:02:49.819+0000",
                    "started": "2020-02-15T17:02:49.818+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "387952",
                    "issueId": "13282828"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13282828/worklog/389252",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on pull request #6436: ARROW-7742: [GLib] Add support for MapArray\nURL: https://github.com/apache/arrow/pull/6436#discussion_r381031339\n \n \n\n ##########\n File path: c_glib/arrow-glib/array-builder.cpp\n ##########\n @@ -4486,6 +4489,262 @@ garrow_struct_array_builder_get_field_builders(GArrowStructArrayBuilder *builder\n }\n \n \n+typedef struct GArrowMapArrayBuilderPrivate_ {\n+  GArrowArrayBuilder *key_builder;\n+  GArrowArrayBuilder *item_builder;\n+  GArrowArrayBuilder *value_builder;\n+} GArrowMapArrayBuilderPrivate;\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GArrowMapArrayBuilder,\n+                           garrow_map_array_builder,\n+                           GARROW_TYPE_ARRAY_BUILDER)\n+\n+#define GARROW_MAP_ARRAY_BUILDER_GET_PRIVATE(object)      \\\n+  static_cast<GArrowMapArrayBuilderPrivate *>(            \\\n+     garrow_map_array_builder_get_instance_private(       \\\n+       GARROW_MAP_ARRAY_BUILDER(object)))\n+\n+static void\n+garrow_map_array_builder_dispose(GObject *object)\n+{\n+  auto priv = GARROW_MAP_ARRAY_BUILDER_GET_PRIVATE(object);\n+\n+  if (priv->key_builder) {\n+    g_object_unref(priv->key_builder);\n+    priv->key_builder = NULL;\n+  }\n+\n+  if (priv->item_builder) {\n+    g_object_unref(priv->item_builder);\n+    priv->item_builder = NULL;\n+  }\n+\n+  if (priv->value_builder) {\n+    g_object_unref(priv->value_builder);\n+    priv->value_builder = NULL;\n+  }\n+\n+  G_OBJECT_CLASS(garrow_map_array_builder_parent_class)->dispose(object);\n+}\n+\n+static void\n+garrow_map_array_builder_init(GArrowMapArrayBuilder *builder)\n+{\n+}\n+\n+static void\n+garrow_map_array_builder_class_init(GArrowMapArrayBuilderClass *klass)\n+{\n+  GObjectClass *gobject_class;\n+\n+  gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->dispose = garrow_map_array_builder_dispose;\n+}\n+\n+/**\n+ * garrow_map_array_builder_new:\n+ * @data_type: #GArrowMapDataType for the map.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Returns: A newly created #GArrowMapArrayBuilder.\n+ *\n+ * Since: 1.0.0\n+ */\n+GArrowMapArrayBuilder *\n+garrow_map_array_builder_new(GArrowMapDataType *data_type,\n+                             GError **error)\n+{\n+  if (!GARROW_IS_MAP_DATA_TYPE(data_type)) {\n+    g_set_error(error,\n+                GARROW_ERROR,\n+                GARROW_ERROR_INVALID,\n+                \"[map-array-builder][new] data type must be map data type\");\n+    return NULL;\n+  }\n+\n+  auto arrow_data_type = garrow_data_type_get_raw(GARROW_DATA_TYPE(data_type));\n+  auto builder = garrow_array_builder_new(arrow_data_type,\n+                                          error,\n+                                          \"[map-array-builder][new]\");\n+  return GARROW_MAP_ARRAY_BUILDER(builder);\n+}\n+\n+/**\n+ * garrow_map_array_builder_append_value:\n+ * @builder: A #GArrowMapArrayBuilder.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Returns: %TRUE on success, %FALSE if there was an error.\n+ *\n+ * Since: 1.0.0\n+ */\n+gboolean\n+garrow_map_array_builder_append_value(GArrowMapArrayBuilder *builder,\n+                                      GError **error)\n+{\n+  auto arrow_builder =\n+    static_cast<arrow::MapBuilder *>(\n+      garrow_array_builder_get_raw(GARROW_ARRAY_BUILDER(builder)));\n+\n+  auto status = arrow_builder->Append();\n+  return garrow_error_check(error,\n \n Review comment:\n   Could you use `garrow::check()`?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-19T01:49:19.880+0000",
                    "updated": "2020-02-19T01:49:19.880+0000",
                    "started": "2020-02-19T01:49:19.879+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "389252",
                    "issueId": "13282828"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13282828/worklog/389254",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on pull request #6436: ARROW-7742: [GLib] Add support for MapArray\nURL: https://github.com/apache/arrow/pull/6436#discussion_r381030713\n \n \n\n ##########\n File path: c_glib/arrow-glib/array-builder.cpp\n ##########\n @@ -4486,6 +4489,262 @@ garrow_struct_array_builder_get_field_builders(GArrowStructArrayBuilder *builder\n }\n \n \n+typedef struct GArrowMapArrayBuilderPrivate_ {\n+  GArrowArrayBuilder *key_builder;\n+  GArrowArrayBuilder *item_builder;\n+  GArrowArrayBuilder *value_builder;\n+} GArrowMapArrayBuilderPrivate;\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GArrowMapArrayBuilder,\n+                           garrow_map_array_builder,\n+                           GARROW_TYPE_ARRAY_BUILDER)\n+\n+#define GARROW_MAP_ARRAY_BUILDER_GET_PRIVATE(object)      \\\n+  static_cast<GArrowMapArrayBuilderPrivate *>(            \\\n+     garrow_map_array_builder_get_instance_private(       \\\n+       GARROW_MAP_ARRAY_BUILDER(object)))\n+\n+static void\n+garrow_map_array_builder_dispose(GObject *object)\n+{\n+  auto priv = GARROW_MAP_ARRAY_BUILDER_GET_PRIVATE(object);\n+\n+  if (priv->key_builder) {\n+    g_object_unref(priv->key_builder);\n+    priv->key_builder = NULL;\n+  }\n+\n+  if (priv->item_builder) {\n+    g_object_unref(priv->item_builder);\n+    priv->item_builder = NULL;\n+  }\n+\n+  if (priv->value_builder) {\n+    g_object_unref(priv->value_builder);\n+    priv->value_builder = NULL;\n+  }\n+\n+  G_OBJECT_CLASS(garrow_map_array_builder_parent_class)->dispose(object);\n+}\n+\n+static void\n+garrow_map_array_builder_init(GArrowMapArrayBuilder *builder)\n+{\n+}\n+\n+static void\n+garrow_map_array_builder_class_init(GArrowMapArrayBuilderClass *klass)\n+{\n+  GObjectClass *gobject_class;\n+\n+  gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->dispose = garrow_map_array_builder_dispose;\n+}\n+\n+/**\n+ * garrow_map_array_builder_new:\n+ * @data_type: #GArrowMapDataType for the map.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Returns: A newly created #GArrowMapArrayBuilder.\n+ *\n+ * Since: 1.0.0\n+ */\n+GArrowMapArrayBuilder *\n+garrow_map_array_builder_new(GArrowMapDataType *data_type,\n+                             GError **error)\n+{\n+  if (!GARROW_IS_MAP_DATA_TYPE(data_type)) {\n+    g_set_error(error,\n+                GARROW_ERROR,\n+                GARROW_ERROR_INVALID,\n+                \"[map-array-builder][new] data type must be map data type\");\n+    return NULL;\n+  }\n+\n+  auto arrow_data_type = garrow_data_type_get_raw(GARROW_DATA_TYPE(data_type));\n+  auto builder = garrow_array_builder_new(arrow_data_type,\n+                                          error,\n+                                          \"[map-array-builder][new]\");\n+  return GARROW_MAP_ARRAY_BUILDER(builder);\n \n Review comment:\n   Could you add `NULL` check?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-19T01:49:19.882+0000",
                    "updated": "2020-02-19T01:49:19.882+0000",
                    "started": "2020-02-19T01:49:19.882+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "389254",
                    "issueId": "13282828"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13282828/worklog/389253",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on pull request #6436: ARROW-7742: [GLib] Add support for MapArray\nURL: https://github.com/apache/arrow/pull/6436#discussion_r381032906\n \n \n\n ##########\n File path: c_glib/arrow-glib/composite-array.cpp\n ##########\n @@ -373,6 +376,92 @@ garrow_struct_array_flatten(GArrowStructArray *array, GError **error)\n }\n \n \n+G_DEFINE_TYPE(GArrowMapArray,\n+              garrow_map_array,\n+              GARROW_TYPE_LIST_ARRAY)\n+\n+static void\n+garrow_map_array_init(GArrowMapArray *object)\n+{\n+}\n+\n+static void\n+garrow_map_array_class_init(GArrowMapArrayClass *klass)\n+{\n+}\n+\n+/**\n+ * garrow_map_array_new:\n+ * @offsets: The offsets Array containing n + 1 offsets encoding length and size.\n+ * @keys: The Array containing key values.\n+ * @items: The items Array containing item values.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Returns: (nullable): A newly created #GArrowMapArray\n+ *   or %NULL on error.\n+ *\n+ * Since: 1.0.0\n+ */\n+GArrowMapArray *\n+garrow_map_array_new(GArrowArray *offsets,\n+                     GArrowArray *keys,\n+                     GArrowArray *items,\n+                     GError **error)\n+{\n+  const auto arrow_offsets = garrow_array_get_raw(offsets);\n+  const auto arrow_keys = garrow_array_get_raw(keys);\n+  const auto arrow_items = garrow_array_get_raw(items);\n+  std::shared_ptr<arrow::Array> arrow_array;\n+  auto arrow_memory_pool = arrow::default_memory_pool();\n+  auto status = arrow::MapArray::FromArrays(arrow_offsets,\n+                                            arrow_keys,\n+                                            arrow_items,\n+                                            arrow_memory_pool,\n+                                            &arrow_array);\n+  if (garrow_error_check(error, status, \"[map-array][new]\")) {\n \n Review comment:\n   Could you use `garrow::check()`?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-19T01:49:19.882+0000",
                    "updated": "2020-02-19T01:49:19.882+0000",
                    "started": "2020-02-19T01:49:19.882+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "389253",
                    "issueId": "13282828"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13282828/worklog/389255",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on pull request #6436: ARROW-7742: [GLib] Add support for MapArray\nURL: https://github.com/apache/arrow/pull/6436#discussion_r381033568\n \n \n\n ##########\n File path: c_glib/arrow-glib/composite-data-type.cpp\n ##########\n @@ -337,6 +339,82 @@ garrow_struct_data_type_get_field_index(GArrowStructDataType *struct_data_type,\n }\n \n \n+G_DEFINE_TYPE(GArrowMapDataType,\n+              garrow_map_data_type,\n+              GARROW_TYPE_LIST_DATA_TYPE)\n+\n+static void\n+garrow_map_data_type_init(GArrowMapDataType *object)\n+{\n+}\n+\n+static void\n+garrow_map_data_type_class_init(GArrowMapDataTypeClass *klass)\n+{\n+}\n+\n+/**\n+ * garrow_map_data_type_new:\n+ * @key_type: The key type of the map.\n+ * @item_type: The item type of the map.\n+ *\n+ * Returns: The newly created map data type.\n+ *\n+ * Since: 1.0.0\n+ */\n+GArrowMapDataType *\n+garrow_map_data_type_new(GArrowDataType *key_type,\n+                         GArrowDataType *item_type)\n+{\n+  auto arrow_key_type = garrow_data_type_get_raw(key_type);\n+  auto arrow_item_type = garrow_data_type_get_raw(item_type);\n+  auto arrow_data_type = std::make_shared<arrow::MapType>(arrow_key_type,\n+                                                          arrow_item_type);\n+  auto data_type = g_object_new(GARROW_TYPE_MAP_DATA_TYPE,\n+                                \"data-type\", &arrow_data_type,\n+                                NULL);\n+  return GARROW_MAP_DATA_TYPE(data_type);\n+}\n+\n+/**\n+ * garrow_map_data_type_get_key_type:\n+ * @map_data_type: A #GArrowMapDataType.\n+ *\n+ * Return: (transfer full): The key type of the map.\n+ *\n+ * Since: 1.0.0\n+ */\n+GArrowDataType *\n+garrow_map_data_type_get_key_type(GArrowMapDataType *map_data_type)\n+{\n+  auto data_type = GARROW_DATA_TYPE(map_data_type);\n+  auto arrow_data_type = garrow_data_type_get_raw(data_type);\n+  auto arrow_map_data_type =\n+    static_cast<arrow::MapType *>(arrow_data_type.get());\n \n Review comment:\n   Can we use `std::static_pointer_cast<arrow::MapType>(arrow_data_type)` here?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-19T01:49:19.883+0000",
                    "updated": "2020-02-19T01:49:19.883+0000",
                    "started": "2020-02-19T01:49:19.882+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "389255",
                    "issueId": "13282828"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13282828/worklog/389257",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on pull request #6436: ARROW-7742: [GLib] Add support for MapArray\nURL: https://github.com/apache/arrow/pull/6436#discussion_r381030647\n \n \n\n ##########\n File path: c_glib/arrow-glib/array-builder.cpp\n ##########\n @@ -4486,6 +4489,262 @@ garrow_struct_array_builder_get_field_builders(GArrowStructArrayBuilder *builder\n }\n \n \n+typedef struct GArrowMapArrayBuilderPrivate_ {\n+  GArrowArrayBuilder *key_builder;\n+  GArrowArrayBuilder *item_builder;\n+  GArrowArrayBuilder *value_builder;\n+} GArrowMapArrayBuilderPrivate;\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GArrowMapArrayBuilder,\n+                           garrow_map_array_builder,\n+                           GARROW_TYPE_ARRAY_BUILDER)\n+\n+#define GARROW_MAP_ARRAY_BUILDER_GET_PRIVATE(object)      \\\n+  static_cast<GArrowMapArrayBuilderPrivate *>(            \\\n+     garrow_map_array_builder_get_instance_private(       \\\n+       GARROW_MAP_ARRAY_BUILDER(object)))\n+\n+static void\n+garrow_map_array_builder_dispose(GObject *object)\n+{\n+  auto priv = GARROW_MAP_ARRAY_BUILDER_GET_PRIVATE(object);\n+\n+  if (priv->key_builder) {\n+    g_object_unref(priv->key_builder);\n+    priv->key_builder = NULL;\n+  }\n+\n+  if (priv->item_builder) {\n+    g_object_unref(priv->item_builder);\n+    priv->item_builder = NULL;\n+  }\n+\n+  if (priv->value_builder) {\n+    g_object_unref(priv->value_builder);\n+    priv->value_builder = NULL;\n+  }\n+\n+  G_OBJECT_CLASS(garrow_map_array_builder_parent_class)->dispose(object);\n+}\n+\n+static void\n+garrow_map_array_builder_init(GArrowMapArrayBuilder *builder)\n+{\n+}\n+\n+static void\n+garrow_map_array_builder_class_init(GArrowMapArrayBuilderClass *klass)\n+{\n+  GObjectClass *gobject_class;\n+\n+  gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->dispose = garrow_map_array_builder_dispose;\n+}\n+\n+/**\n+ * garrow_map_array_builder_new:\n+ * @data_type: #GArrowMapDataType for the map.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Returns: A newly created #GArrowMapArrayBuilder.\n \n Review comment:\n   Could you add `on success, %NULL on error`?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-19T01:49:19.886+0000",
                    "updated": "2020-02-19T01:49:19.886+0000",
                    "started": "2020-02-19T01:49:19.885+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "389257",
                    "issueId": "13282828"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13282828/worklog/389256",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on pull request #6436: ARROW-7742: [GLib] Add support for MapArray\nURL: https://github.com/apache/arrow/pull/6436#discussion_r381030447\n \n \n\n ##########\n File path: c_glib/arrow-glib/array-builder.cpp\n ##########\n @@ -4486,6 +4489,262 @@ garrow_struct_array_builder_get_field_builders(GArrowStructArrayBuilder *builder\n }\n \n \n+typedef struct GArrowMapArrayBuilderPrivate_ {\n+  GArrowArrayBuilder *key_builder;\n+  GArrowArrayBuilder *item_builder;\n+  GArrowArrayBuilder *value_builder;\n+} GArrowMapArrayBuilderPrivate;\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GArrowMapArrayBuilder,\n+                           garrow_map_array_builder,\n+                           GARROW_TYPE_ARRAY_BUILDER)\n+\n+#define GARROW_MAP_ARRAY_BUILDER_GET_PRIVATE(object)      \\\n+  static_cast<GArrowMapArrayBuilderPrivate *>(            \\\n+     garrow_map_array_builder_get_instance_private(       \\\n+       GARROW_MAP_ARRAY_BUILDER(object)))\n+\n+static void\n+garrow_map_array_builder_dispose(GObject *object)\n+{\n+  auto priv = GARROW_MAP_ARRAY_BUILDER_GET_PRIVATE(object);\n+\n+  if (priv->key_builder) {\n+    g_object_unref(priv->key_builder);\n+    priv->key_builder = NULL;\n+  }\n+\n+  if (priv->item_builder) {\n+    g_object_unref(priv->item_builder);\n+    priv->item_builder = NULL;\n+  }\n+\n+  if (priv->value_builder) {\n+    g_object_unref(priv->value_builder);\n+    priv->value_builder = NULL;\n+  }\n+\n+  G_OBJECT_CLASS(garrow_map_array_builder_parent_class)->dispose(object);\n+}\n+\n+static void\n+garrow_map_array_builder_init(GArrowMapArrayBuilder *builder)\n+{\n+}\n+\n+static void\n+garrow_map_array_builder_class_init(GArrowMapArrayBuilderClass *klass)\n+{\n+  GObjectClass *gobject_class;\n+\n+  gobject_class = G_OBJECT_CLASS(klass);\n \n Review comment:\n   Could you use `auto gobject_class = ...` here?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-19T01:49:19.886+0000",
                    "updated": "2020-02-19T01:49:19.886+0000",
                    "started": "2020-02-19T01:49:19.885+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "389256",
                    "issueId": "13282828"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13282828/worklog/389258",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on pull request #6436: ARROW-7742: [GLib] Add support for MapArray\nURL: https://github.com/apache/arrow/pull/6436#discussion_r381033634\n \n \n\n ##########\n File path: c_glib/arrow-glib/composite-data-type.cpp\n ##########\n @@ -337,6 +339,82 @@ garrow_struct_data_type_get_field_index(GArrowStructDataType *struct_data_type,\n }\n \n \n+G_DEFINE_TYPE(GArrowMapDataType,\n+              garrow_map_data_type,\n+              GARROW_TYPE_LIST_DATA_TYPE)\n+\n+static void\n+garrow_map_data_type_init(GArrowMapDataType *object)\n+{\n+}\n+\n+static void\n+garrow_map_data_type_class_init(GArrowMapDataTypeClass *klass)\n+{\n+}\n+\n+/**\n+ * garrow_map_data_type_new:\n+ * @key_type: The key type of the map.\n+ * @item_type: The item type of the map.\n+ *\n+ * Returns: The newly created map data type.\n+ *\n+ * Since: 1.0.0\n+ */\n+GArrowMapDataType *\n+garrow_map_data_type_new(GArrowDataType *key_type,\n+                         GArrowDataType *item_type)\n+{\n+  auto arrow_key_type = garrow_data_type_get_raw(key_type);\n+  auto arrow_item_type = garrow_data_type_get_raw(item_type);\n+  auto arrow_data_type = std::make_shared<arrow::MapType>(arrow_key_type,\n+                                                          arrow_item_type);\n+  auto data_type = g_object_new(GARROW_TYPE_MAP_DATA_TYPE,\n+                                \"data-type\", &arrow_data_type,\n+                                NULL);\n+  return GARROW_MAP_DATA_TYPE(data_type);\n+}\n+\n+/**\n+ * garrow_map_data_type_get_key_type:\n+ * @map_data_type: A #GArrowMapDataType.\n+ *\n+ * Return: (transfer full): The key type of the map.\n+ *\n+ * Since: 1.0.0\n+ */\n+GArrowDataType *\n+garrow_map_data_type_get_key_type(GArrowMapDataType *map_data_type)\n+{\n+  auto data_type = GARROW_DATA_TYPE(map_data_type);\n+  auto arrow_data_type = garrow_data_type_get_raw(data_type);\n+  auto arrow_map_data_type =\n+    static_cast<arrow::MapType *>(arrow_data_type.get());\n+  auto arrow_key_type = arrow_map_data_type->key_type();\n+  return garrow_data_type_new_raw(&arrow_key_type);\n+}\n+\n+/**\n+ * garrow_map_data_type_get_item_type:\n+ * @map_data_type: A #GArrowMapDataType.\n+ *\n+ * Return: (transfer full): The item type of the map.\n+ *\n+ * Since: 1.0.0\n+ */\n+GArrowDataType *\n+garrow_map_data_type_get_item_type(GArrowMapDataType *map_data_type)\n+{\n+  auto data_type = GARROW_DATA_TYPE(map_data_type);\n+  auto arrow_data_type = garrow_data_type_get_raw(data_type);\n+  auto arrow_map_data_type =\n+    static_cast<arrow::MapType *>(arrow_data_type.get());\n \n Review comment:\n   Ditto.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-19T01:49:19.955+0000",
                    "updated": "2020-02-19T01:49:19.955+0000",
                    "started": "2020-02-19T01:49:19.955+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "389258",
                    "issueId": "13282828"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13282828/worklog/389259",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on pull request #6436: ARROW-7742: [GLib] Add support for MapArray\nURL: https://github.com/apache/arrow/pull/6436#discussion_r381034624\n \n \n\n ##########\n File path: c_glib/test/test-map-array-builder.rb\n ##########\n @@ -0,0 +1,123 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+class TestMapArrayBuilder < Test::Unit::TestCase\n+  include Helper::Buildable\n+\n+  def setup\n+    offsets = build_int32_array([0, 2, 5])\n+    @keys = build_string_array([\"a\", \"b\", \"c\", \"d\", \"e\"])\n+    @items = build_int16_array([0, 1, 2, 3, 4])\n \n Review comment:\n   `@items` -> `items`.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-19T01:49:19.986+0000",
                    "updated": "2020-02-19T01:49:19.986+0000",
                    "started": "2020-02-19T01:49:19.985+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "389259",
                    "issueId": "13282828"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13282828/worklog/389260",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on pull request #6436: ARROW-7742: [GLib] Add support for MapArray\nURL: https://github.com/apache/arrow/pull/6436#discussion_r381034582\n \n \n\n ##########\n File path: c_glib/test/test-map-array-builder.rb\n ##########\n @@ -0,0 +1,123 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+class TestMapArrayBuilder < Test::Unit::TestCase\n+  include Helper::Buildable\n+\n+  def setup\n+    offsets = build_int32_array([0, 2, 5])\n+    @keys = build_string_array([\"a\", \"b\", \"c\", \"d\", \"e\"])\n \n Review comment:\n   `@keys` -> `keys`.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-19T01:49:20.002+0000",
                    "updated": "2020-02-19T01:49:20.002+0000",
                    "started": "2020-02-19T01:49:20.001+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "389260",
                    "issueId": "13282828"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13282828/worklog/389261",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on pull request #6436: ARROW-7742: [GLib] Add support for MapArray\nURL: https://github.com/apache/arrow/pull/6436#discussion_r381033076\n \n \n\n ##########\n File path: c_glib/arrow-glib/composite-array.cpp\n ##########\n @@ -373,6 +376,92 @@ garrow_struct_array_flatten(GArrowStructArray *array, GError **error)\n }\n \n \n+G_DEFINE_TYPE(GArrowMapArray,\n+              garrow_map_array,\n+              GARROW_TYPE_LIST_ARRAY)\n+\n+static void\n+garrow_map_array_init(GArrowMapArray *object)\n+{\n+}\n+\n+static void\n+garrow_map_array_class_init(GArrowMapArrayClass *klass)\n+{\n+}\n+\n+/**\n+ * garrow_map_array_new:\n+ * @offsets: The offsets Array containing n + 1 offsets encoding length and size.\n+ * @keys: The Array containing key values.\n+ * @items: The items Array containing item values.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Returns: (nullable): A newly created #GArrowMapArray\n+ *   or %NULL on error.\n+ *\n+ * Since: 1.0.0\n+ */\n+GArrowMapArray *\n+garrow_map_array_new(GArrowArray *offsets,\n+                     GArrowArray *keys,\n+                     GArrowArray *items,\n+                     GError **error)\n+{\n+  const auto arrow_offsets = garrow_array_get_raw(offsets);\n+  const auto arrow_keys = garrow_array_get_raw(keys);\n+  const auto arrow_items = garrow_array_get_raw(items);\n+  std::shared_ptr<arrow::Array> arrow_array;\n+  auto arrow_memory_pool = arrow::default_memory_pool();\n+  auto status = arrow::MapArray::FromArrays(arrow_offsets,\n+                                            arrow_keys,\n+                                            arrow_items,\n+                                            arrow_memory_pool,\n+                                            &arrow_array);\n+  if (garrow_error_check(error, status, \"[map-array][new]\")) {\n+    return GARROW_MAP_ARRAY(garrow_array_new_raw(&arrow_array));\n+  } else {\n+    return NULL;\n+  }\n+}\n+\n+/**\n+ * garrow_map_array_get_keys:\n+ * @array: A #GArrowMapArray.\n+ *\n+ * Returns: (transfer full): The Array containing key values.\n+ *\n+ * Since: 1.0.0\n+ */\n+GArrowArray *\n+garrow_map_array_get_keys(GArrowMapArray *array)\n+{\n+  auto arrow_array = garrow_array_get_raw(GARROW_ARRAY(array));\n+  auto arrow_map_array =\n+    std::static_pointer_cast<arrow::MapArray>(arrow_array);\n+  auto arrow_keys = arrow_map_array->keys();\n+  return garrow_array_new_raw(&arrow_keys);\n+}\n+\n+/**\n+ * garrow_map_array_get_items:\n+ * @array: A #GArrowMapArray.\n+ *\n+ * Returns: (transfer full): The items Array containing item values.\n+ *\n+ * Since: 1.0.0\n+ */\n+GArrowArray *\n+garrow_map_array_get_items(GArrowMapArray *array)\n+{\n+  auto arrow_array = garrow_array_get_raw(GARROW_ARRAY(array));\n+  auto arrow_map_array =\n+    std::static_pointer_cast<arrow::MapArray>(arrow_array);\n+  auto arrow_keys = arrow_map_array->items();\n \n Review comment:\n   `keys` -> `items`.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-19T01:49:20.029+0000",
                    "updated": "2020-02-19T01:49:20.029+0000",
                    "started": "2020-02-19T01:49:20.028+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "389261",
                    "issueId": "13282828"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13282828/worklog/389262",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on pull request #6436: ARROW-7742: [GLib] Add support for MapArray\nURL: https://github.com/apache/arrow/pull/6436#discussion_r381036295\n \n \n\n ##########\n File path: c_glib/arrow-glib/array-builder.cpp\n ##########\n @@ -4486,6 +4489,262 @@ garrow_struct_array_builder_get_field_builders(GArrowStructArrayBuilder *builder\n }\n \n \n+typedef struct GArrowMapArrayBuilderPrivate_ {\n+  GArrowArrayBuilder *key_builder;\n+  GArrowArrayBuilder *item_builder;\n+  GArrowArrayBuilder *value_builder;\n+} GArrowMapArrayBuilderPrivate;\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GArrowMapArrayBuilder,\n+                           garrow_map_array_builder,\n+                           GARROW_TYPE_ARRAY_BUILDER)\n+\n+#define GARROW_MAP_ARRAY_BUILDER_GET_PRIVATE(object)      \\\n+  static_cast<GArrowMapArrayBuilderPrivate *>(            \\\n+     garrow_map_array_builder_get_instance_private(       \\\n+       GARROW_MAP_ARRAY_BUILDER(object)))\n+\n+static void\n+garrow_map_array_builder_dispose(GObject *object)\n+{\n+  auto priv = GARROW_MAP_ARRAY_BUILDER_GET_PRIVATE(object);\n+\n+  if (priv->key_builder) {\n+    g_object_unref(priv->key_builder);\n+    priv->key_builder = NULL;\n+  }\n+\n+  if (priv->item_builder) {\n+    g_object_unref(priv->item_builder);\n+    priv->item_builder = NULL;\n+  }\n+\n+  if (priv->value_builder) {\n+    g_object_unref(priv->value_builder);\n+    priv->value_builder = NULL;\n+  }\n+\n+  G_OBJECT_CLASS(garrow_map_array_builder_parent_class)->dispose(object);\n+}\n+\n+static void\n+garrow_map_array_builder_init(GArrowMapArrayBuilder *builder)\n+{\n+}\n+\n+static void\n+garrow_map_array_builder_class_init(GArrowMapArrayBuilderClass *klass)\n+{\n+  GObjectClass *gobject_class;\n+\n+  gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->dispose = garrow_map_array_builder_dispose;\n+}\n+\n+/**\n+ * garrow_map_array_builder_new:\n+ * @data_type: #GArrowMapDataType for the map.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Returns: A newly created #GArrowMapArrayBuilder.\n+ *\n+ * Since: 1.0.0\n+ */\n+GArrowMapArrayBuilder *\n+garrow_map_array_builder_new(GArrowMapDataType *data_type,\n+                             GError **error)\n+{\n+  if (!GARROW_IS_MAP_DATA_TYPE(data_type)) {\n+    g_set_error(error,\n+                GARROW_ERROR,\n+                GARROW_ERROR_INVALID,\n+                \"[map-array-builder][new] data type must be map data type\");\n+    return NULL;\n+  }\n+\n+  auto arrow_data_type = garrow_data_type_get_raw(GARROW_DATA_TYPE(data_type));\n+  auto builder = garrow_array_builder_new(arrow_data_type,\n+                                          error,\n+                                          \"[map-array-builder][new]\");\n+  return GARROW_MAP_ARRAY_BUILDER(builder);\n+}\n+\n+/**\n+ * garrow_map_array_builder_append_value:\n+ * @builder: A #GArrowMapArrayBuilder.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Returns: %TRUE on success, %FALSE if there was an error.\n+ *\n+ * Since: 1.0.0\n+ */\n+gboolean\n+garrow_map_array_builder_append_value(GArrowMapArrayBuilder *builder,\n+                                      GError **error)\n+{\n+  auto arrow_builder =\n+    static_cast<arrow::MapBuilder *>(\n+      garrow_array_builder_get_raw(GARROW_ARRAY_BUILDER(builder)));\n+\n+  auto status = arrow_builder->Append();\n+  return garrow_error_check(error,\n+                            status,\n+                            \"[map-array-builder][append-value]\");\n+}\n+\n+/**\n+ * garrow_map_array_builder_append_values:\n+ * @builder: A #GArrowMapArrayBuilder.\n+ * @offsets: (array length=offsets_length): The array of signed int.\n+ * @offsets_length: The length of `offsets`.\n+ * @is_valids: (nullable) (array length=is_valids_length): The array of\n+ *   boolean that shows whether the Nth value is valid or not. If the\n+ *   Nth `is_valids` is %TRUE, the Nth `values` is valid value. Otherwise\n+ *   the Nth value is null value.\n+ * @is_valids_length: The length of `is_valids`.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Append multiple values at once. It's more efficient than multiple\n+ * `append()` and `append_null()` calls.\n+ *\n+ * Returns: %TRUE on success, %FALSE if there was an error.\n+ *\n+ * Since: 1.0.0\n+ */\n+gboolean\n+garrow_map_array_builder_append_values(GArrowMapArrayBuilder *builder,\n+                                       const gint32 *offsets,\n+                                       gint64 offsets_length,\n+                                       const gboolean *is_valids,\n+                                       gint64 is_valids_length,\n+                                       GError **error)\n+{\n+  return garrow_array_builder_append_values<arrow::MapBuilder *>\n+    (GARROW_ARRAY_BUILDER(builder),\n+     reinterpret_cast<const int32_t *>(offsets),\n+     offsets_length,\n+     is_valids,\n+     is_valids_length,\n+     error,\n+     \"[map-array-builder][append-values]\");\n+}\n+\n+/**\n+ * garrow_map_array_builder_append_null:\n+ * @builder: A #GArrowMapArrayBuilder.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Returns: %TRUE on success, %FALSE if there was an error.\n+ *\n+ * Since: 1.0.0\n+ */\n+gboolean\n+garrow_map_array_builder_append_null(GArrowMapArrayBuilder *builder,\n+                                     GError **error)\n+{\n+  return garrow_array_builder_append_null<arrow::MapBuilder *>\n+    (GARROW_ARRAY_BUILDER(builder),\n+     error,\n+     \"[map-array-builder][append-null]\");\n+}\n+\n+/**\n+ * garrow_map_array_builder_append_nulls:\n+ * @builder: A #GArrowMapArrayBuilder.\n+ * @n: The number of null values to be appended.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Append multiple nulls at once. It's more efficient than multiple\n+ * `append_null()` calls.\n+ *\n+ * Returns: %TRUE on success, %FALSE if there was an error.\n+ *\n+ * Since: 1.0.0\n+ */\n+gboolean\n+garrow_map_array_builder_append_nulls(GArrowMapArrayBuilder *builder,\n+                                      gint64 n,\n+                                      GError **error)\n+{\n+  return garrow_array_builder_append_nulls<arrow::MapBuilder *>\n+    (GARROW_ARRAY_BUILDER(builder),\n+     n,\n+     error,\n+     \"[map-array-builder][append-nulls]\");\n+}\n+\n+/**\n+ * garrow_map_array_builder_get_key_builder:\n+ * @builder: A #GArrowMapArrayBuilder.\n+ *\n+ * Returns: (transfer none): The #GArrowArrayBuilder for key values.\n+ *\n+ * Since: 1.0.0\n+ */\n+GArrowArrayBuilder *\n+garrow_map_array_builder_get_key_builder(GArrowMapArrayBuilder *builder)\n+{\n+  auto priv = GARROW_MAP_ARRAY_BUILDER_GET_PRIVATE(builder);\n+  if (!priv->key_builder) {\n+    auto arrow_builder =\n+      static_cast<arrow::MapBuilder *>(\n+        garrow_array_builder_get_raw(GARROW_ARRAY_BUILDER(builder)));\n+    auto arrow_key_builder = arrow_builder->key_builder();\n+    priv->key_builder = garrow_array_builder_new_raw(arrow_key_builder);\n+    garrow_array_builder_release_ownership(priv->key_builder);\n+  }\n+  return priv->key_builder;\n+}\n+\n+/**\n+ * garrow_map_array_builder_get_item_builder:\n+ * @builder: A #GArrowMapArrayBuilder.\n+ *\n+ * Returns: (transfer none): The #GArrowArrayBuilder for item values.\n+ *\n+ * Since: 1.0.0\n+ */\n+GArrowArrayBuilder *\n+garrow_map_array_builder_get_item_builder(GArrowMapArrayBuilder *builder)\n+{\n+  auto priv = GARROW_MAP_ARRAY_BUILDER_GET_PRIVATE(builder);\n+  if (!priv->item_builder) {\n+    auto arrow_builder =\n+      static_cast<arrow::MapBuilder *>(\n+        garrow_array_builder_get_raw(GARROW_ARRAY_BUILDER(builder)));\n+    auto arrow_item_builder = arrow_builder->item_builder();\n+    priv->item_builder = garrow_array_builder_new_raw(arrow_item_builder);\n+    garrow_array_builder_release_ownership(priv->item_builder);\n+  }\n+  return priv->item_builder;\n+}\n+\n+/**\n+ * garrow_map_array_builder_get_value_builder:\n+ * @builder: A #GArrowMapArrayBuilder.\n+ *\n+ * Returns: (transfer none): The #GArrowArrayBuilder for struct values.\n+ *   This is used instead of garrow_map_array_builder_get_key_builder() and garrow_map_array_builder_get_item_builder().\n \n Review comment:\n   How about this?\r\n   \r\n   ```cpp\r\n     * Returns: (transfer none): The #GArrowArrayBuilder to add map entries as struct values.\r\n     *   This can be used instead of garrow_map_array_builder_get_key_builder() and\r\n     *   garrow_map_array_builder_get_item_builder(). You can build map entries as a list of\r\n     *   struct values with this builder.\r\n   ```\r\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-19T01:49:20.074+0000",
                    "updated": "2020-02-19T01:49:20.074+0000",
                    "started": "2020-02-19T01:49:20.073+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "389262",
                    "issueId": "13282828"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13282828/worklog/389486",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "shiro615 commented on pull request #6436: ARROW-7742: [GLib] Add support for MapArray\nURL: https://github.com/apache/arrow/pull/6436#discussion_r381381434\n \n \n\n ##########\n File path: c_glib/arrow-glib/array-builder.cpp\n ##########\n @@ -4486,6 +4489,262 @@ garrow_struct_array_builder_get_field_builders(GArrowStructArrayBuilder *builder\n }\n \n \n+typedef struct GArrowMapArrayBuilderPrivate_ {\n+  GArrowArrayBuilder *key_builder;\n+  GArrowArrayBuilder *item_builder;\n+  GArrowArrayBuilder *value_builder;\n+} GArrowMapArrayBuilderPrivate;\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GArrowMapArrayBuilder,\n+                           garrow_map_array_builder,\n+                           GARROW_TYPE_ARRAY_BUILDER)\n+\n+#define GARROW_MAP_ARRAY_BUILDER_GET_PRIVATE(object)      \\\n+  static_cast<GArrowMapArrayBuilderPrivate *>(            \\\n+     garrow_map_array_builder_get_instance_private(       \\\n+       GARROW_MAP_ARRAY_BUILDER(object)))\n+\n+static void\n+garrow_map_array_builder_dispose(GObject *object)\n+{\n+  auto priv = GARROW_MAP_ARRAY_BUILDER_GET_PRIVATE(object);\n+\n+  if (priv->key_builder) {\n+    g_object_unref(priv->key_builder);\n+    priv->key_builder = NULL;\n+  }\n+\n+  if (priv->item_builder) {\n+    g_object_unref(priv->item_builder);\n+    priv->item_builder = NULL;\n+  }\n+\n+  if (priv->value_builder) {\n+    g_object_unref(priv->value_builder);\n+    priv->value_builder = NULL;\n+  }\n+\n+  G_OBJECT_CLASS(garrow_map_array_builder_parent_class)->dispose(object);\n+}\n+\n+static void\n+garrow_map_array_builder_init(GArrowMapArrayBuilder *builder)\n+{\n+}\n+\n+static void\n+garrow_map_array_builder_class_init(GArrowMapArrayBuilderClass *klass)\n+{\n+  GObjectClass *gobject_class;\n+\n+  gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->dispose = garrow_map_array_builder_dispose;\n+}\n+\n+/**\n+ * garrow_map_array_builder_new:\n+ * @data_type: #GArrowMapDataType for the map.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Returns: A newly created #GArrowMapArrayBuilder.\n+ *\n+ * Since: 1.0.0\n+ */\n+GArrowMapArrayBuilder *\n+garrow_map_array_builder_new(GArrowMapDataType *data_type,\n+                             GError **error)\n+{\n+  if (!GARROW_IS_MAP_DATA_TYPE(data_type)) {\n+    g_set_error(error,\n+                GARROW_ERROR,\n+                GARROW_ERROR_INVALID,\n+                \"[map-array-builder][new] data type must be map data type\");\n+    return NULL;\n+  }\n+\n+  auto arrow_data_type = garrow_data_type_get_raw(GARROW_DATA_TYPE(data_type));\n+  auto builder = garrow_array_builder_new(arrow_data_type,\n+                                          error,\n+                                          \"[map-array-builder][new]\");\n+  return GARROW_MAP_ARRAY_BUILDER(builder);\n+}\n+\n+/**\n+ * garrow_map_array_builder_append_value:\n+ * @builder: A #GArrowMapArrayBuilder.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Returns: %TRUE on success, %FALSE if there was an error.\n+ *\n+ * Since: 1.0.0\n+ */\n+gboolean\n+garrow_map_array_builder_append_value(GArrowMapArrayBuilder *builder,\n+                                      GError **error)\n+{\n+  auto arrow_builder =\n+    static_cast<arrow::MapBuilder *>(\n+      garrow_array_builder_get_raw(GARROW_ARRAY_BUILDER(builder)));\n+\n+  auto status = arrow_builder->Append();\n+  return garrow_error_check(error,\n+                            status,\n+                            \"[map-array-builder][append-value]\");\n+}\n+\n+/**\n+ * garrow_map_array_builder_append_values:\n+ * @builder: A #GArrowMapArrayBuilder.\n+ * @offsets: (array length=offsets_length): The array of signed int.\n+ * @offsets_length: The length of `offsets`.\n+ * @is_valids: (nullable) (array length=is_valids_length): The array of\n+ *   boolean that shows whether the Nth value is valid or not. If the\n+ *   Nth `is_valids` is %TRUE, the Nth `values` is valid value. Otherwise\n+ *   the Nth value is null value.\n+ * @is_valids_length: The length of `is_valids`.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Append multiple values at once. It's more efficient than multiple\n+ * `append()` and `append_null()` calls.\n+ *\n+ * Returns: %TRUE on success, %FALSE if there was an error.\n+ *\n+ * Since: 1.0.0\n+ */\n+gboolean\n+garrow_map_array_builder_append_values(GArrowMapArrayBuilder *builder,\n+                                       const gint32 *offsets,\n+                                       gint64 offsets_length,\n+                                       const gboolean *is_valids,\n+                                       gint64 is_valids_length,\n+                                       GError **error)\n+{\n+  return garrow_array_builder_append_values<arrow::MapBuilder *>\n+    (GARROW_ARRAY_BUILDER(builder),\n+     reinterpret_cast<const int32_t *>(offsets),\n+     offsets_length,\n+     is_valids,\n+     is_valids_length,\n+     error,\n+     \"[map-array-builder][append-values]\");\n+}\n+\n+/**\n+ * garrow_map_array_builder_append_null:\n+ * @builder: A #GArrowMapArrayBuilder.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Returns: %TRUE on success, %FALSE if there was an error.\n+ *\n+ * Since: 1.0.0\n+ */\n+gboolean\n+garrow_map_array_builder_append_null(GArrowMapArrayBuilder *builder,\n+                                     GError **error)\n+{\n+  return garrow_array_builder_append_null<arrow::MapBuilder *>\n+    (GARROW_ARRAY_BUILDER(builder),\n+     error,\n+     \"[map-array-builder][append-null]\");\n+}\n+\n+/**\n+ * garrow_map_array_builder_append_nulls:\n+ * @builder: A #GArrowMapArrayBuilder.\n+ * @n: The number of null values to be appended.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Append multiple nulls at once. It's more efficient than multiple\n+ * `append_null()` calls.\n+ *\n+ * Returns: %TRUE on success, %FALSE if there was an error.\n+ *\n+ * Since: 1.0.0\n+ */\n+gboolean\n+garrow_map_array_builder_append_nulls(GArrowMapArrayBuilder *builder,\n+                                      gint64 n,\n+                                      GError **error)\n+{\n+  return garrow_array_builder_append_nulls<arrow::MapBuilder *>\n+    (GARROW_ARRAY_BUILDER(builder),\n+     n,\n+     error,\n+     \"[map-array-builder][append-nulls]\");\n+}\n+\n+/**\n+ * garrow_map_array_builder_get_key_builder:\n+ * @builder: A #GArrowMapArrayBuilder.\n+ *\n+ * Returns: (transfer none): The #GArrowArrayBuilder for key values.\n+ *\n+ * Since: 1.0.0\n+ */\n+GArrowArrayBuilder *\n+garrow_map_array_builder_get_key_builder(GArrowMapArrayBuilder *builder)\n+{\n+  auto priv = GARROW_MAP_ARRAY_BUILDER_GET_PRIVATE(builder);\n+  if (!priv->key_builder) {\n+    auto arrow_builder =\n+      static_cast<arrow::MapBuilder *>(\n+        garrow_array_builder_get_raw(GARROW_ARRAY_BUILDER(builder)));\n+    auto arrow_key_builder = arrow_builder->key_builder();\n+    priv->key_builder = garrow_array_builder_new_raw(arrow_key_builder);\n+    garrow_array_builder_release_ownership(priv->key_builder);\n+  }\n+  return priv->key_builder;\n+}\n+\n+/**\n+ * garrow_map_array_builder_get_item_builder:\n+ * @builder: A #GArrowMapArrayBuilder.\n+ *\n+ * Returns: (transfer none): The #GArrowArrayBuilder for item values.\n+ *\n+ * Since: 1.0.0\n+ */\n+GArrowArrayBuilder *\n+garrow_map_array_builder_get_item_builder(GArrowMapArrayBuilder *builder)\n+{\n+  auto priv = GARROW_MAP_ARRAY_BUILDER_GET_PRIVATE(builder);\n+  if (!priv->item_builder) {\n+    auto arrow_builder =\n+      static_cast<arrow::MapBuilder *>(\n+        garrow_array_builder_get_raw(GARROW_ARRAY_BUILDER(builder)));\n+    auto arrow_item_builder = arrow_builder->item_builder();\n+    priv->item_builder = garrow_array_builder_new_raw(arrow_item_builder);\n+    garrow_array_builder_release_ownership(priv->item_builder);\n+  }\n+  return priv->item_builder;\n+}\n+\n+/**\n+ * garrow_map_array_builder_get_value_builder:\n+ * @builder: A #GArrowMapArrayBuilder.\n+ *\n+ * Returns: (transfer none): The #GArrowArrayBuilder for struct values.\n+ *   This is used instead of garrow_map_array_builder_get_key_builder() and garrow_map_array_builder_get_item_builder().\n \n Review comment:\n   Thank you for improving document. I've applied this.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-19T16:17:16.953+0000",
                    "updated": "2020-02-19T16:17:16.953+0000",
                    "started": "2020-02-19T16:17:16.953+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "389486",
                    "issueId": "13282828"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13282828/worklog/389735",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on pull request #6436: ARROW-7742: [GLib] Add support for MapArray\nURL: https://github.com/apache/arrow/pull/6436\n \n \n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-20T01:32:00.762+0000",
                    "updated": "2020-02-20T01:32:00.762+0000",
                    "started": "2020-02-20T01:32:00.761+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "389735",
                    "issueId": "13282828"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 5400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@27df501a[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6dd2c34b[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@25493436[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@5efa634f[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@788e686e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@5f474596[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@33c322cc[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@3eaedfe0[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@35e81d43[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@50e6859d[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7a19180f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@32809973[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 5400,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Feb 20 01:32:35 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-02-20T01:32:34.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-7742/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2020-02-02T10:38:05.000+0000",
        "updated": "2020-02-20T01:32:35.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "1.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 5400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[GLib] Add support for MapArray",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13282828/comment/17040553",
                    "id": "17040553",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
                        "name": "kou",
                        "key": "kou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
                        },
                        "displayName": "Kouhei Sutou",
                        "active": true,
                        "timeZone": "Asia/Tokyo"
                    },
                    "body": "Issue resolved by pull request 6436\n[https://github.com/apache/arrow/pull/6436]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
                        "name": "kou",
                        "key": "kou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
                        },
                        "displayName": "Kouhei Sutou",
                        "active": true,
                        "timeZone": "Asia/Tokyo"
                    },
                    "created": "2020-02-20T01:32:35.042+0000",
                    "updated": "2020-02-20T01:32:35.042+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0b2w0:",
        "customfield_12314139": null
    }
}