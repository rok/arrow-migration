{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13477868",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13477868",
    "key": "ARROW-17486",
    "fields": {
        "parent": {
            "id": "13477340",
            "key": "ARROW-17457",
            "self": "https://issues.apache.org/jira/rest/api/2/issue/13477340",
            "fields": {
                "summary": "[C++] Substarit End-To-End Tests for Relations",
                "status": {
                    "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                    "description": "The issue is open and ready for the assignee to start work on it.",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                    "name": "Open",
                    "id": "1",
                    "statusCategory": {
                        "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                        "id": 2,
                        "key": "new",
                        "colorName": "blue-gray",
                        "name": "To Do"
                    }
                },
                "priority": {
                    "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                    "name": "Major",
                    "id": "3"
                },
                "issuetype": {
                    "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                    "id": "4",
                    "description": "An improvement or enhancement to an existing feature or task.",
                    "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                    "name": "Improvement",
                    "subtask": false,
                    "avatarId": 21140
                }
            }
        },
        "fixVersions": [],
        "resolution": null,
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=vibhatha",
            "name": "vibhatha",
            "key": "vibhatha",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
            },
            "displayName": "Vibhatha Lakmal Abeykoon",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/3",
            "description": "This issue is being actively worked on at the moment by the assignee.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/inprogress.png",
            "name": "In Progress",
            "id": "3",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/4",
                "id": 4,
                "key": "indeterminate",
                "colorName": "yellow",
                "name": "In Progress"
            }
        },
        "components": [],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=vibhatha",
            "name": "vibhatha",
            "key": "vibhatha",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
            },
            "displayName": "Vibhatha Lakmal Abeykoon",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=vibhatha",
            "name": "vibhatha",
            "key": "vibhatha",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
            },
            "displayName": "Vibhatha Lakmal Abeykoon",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 6600,
            "total": 6600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 6600,
            "total": 6600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-17486/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 11,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13477868/worklog/810310",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha opened a new pull request, #14174:\nURL: https://github.com/apache/arrow/pull/14174\n\n   Adding compound tests for Substrait Emit. This is an extension to previous tests which only included emit testing only with a particular operator + read.\n\n\n",
                    "created": "2022-09-20T09:15:34.302+0000",
                    "updated": "2022-09-20T09:15:34.302+0000",
                    "started": "2022-09-20T09:15:34.301+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "810310",
                    "issueId": "13477868"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13477868/worklog/810340",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #14174:\nURL: https://github.com/apache/arrow/pull/14174#issuecomment-1252168876\n\n   https://issues.apache.org/jira/browse/ARROW-17486\n\n\n",
                    "created": "2022-09-20T10:42:27.276+0000",
                    "updated": "2022-09-20T10:42:27.276+0000",
                    "started": "2022-09-20T10:42:27.276+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "810340",
                    "issueId": "13477868"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13477868/worklog/810341",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #14174:\nURL: https://github.com/apache/arrow/pull/14174#issuecomment-1252168894\n\n   :warning: Ticket **has no components in JIRA**, make sure you assign one.\n\n\n",
                    "created": "2022-09-20T10:42:28.457+0000",
                    "updated": "2022-09-20T10:42:28.457+0000",
                    "started": "2022-09-20T10:42:28.456+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "810341",
                    "issueId": "13477868"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13477868/worklog/822467",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on code in PR #14174:\nURL: https://github.com/apache/arrow/pull/14174#discussion_r1010880898\n\n\n##########\ncpp/src/arrow/engine/substrait/serde_test.cc:\n##########\n@@ -3187,5 +3043,637 @@ TEST(Substrait, IsthmusPlan) {\n                        *compute::default_exec_context(), buf, {}, conversion_options);\n }\n \n+TEST(Substrait, CompoundEmitFilterless) {\n+#ifdef _WIN32\n+  GTEST_SKIP() << \"ARROW-16392: Substrait File URI not supported for Windows\";\n+#endif\n\nReview Comment:\n   Is this still true?  ARROW-16392 is resolved.\n\n\n\n##########\ncpp/src/arrow/engine/substrait/serde_test.cc:\n##########\n@@ -3187,5 +3043,637 @@ TEST(Substrait, IsthmusPlan) {\n                        *compute::default_exec_context(), buf, {}, conversion_options);\n }\n \n+TEST(Substrait, CompoundEmitFilterless) {\n+#ifdef _WIN32\n+  GTEST_SKIP() << \"ARROW-16392: Substrait File URI not supported for Windows\";\n+#endif\n+  compute::ExecContext exec_context;\n+  auto left_schema =\n+      schema({field(\"A\", int32()), field(\"B\", int32()), field(\"C\", int32()),\n+              field(\"D\", int32()), field(\"E\", int32())});\n+\n+  auto right_schema =\n+      schema({field(\"X\", int32()), field(\"Y\", int32()), field(\"W\", int32()),\n+              field(\"V\", int32()), field(\"Z\", int32())});\n+\n+  // creating a dummy dataset using a dummy table\n+  auto left_table = TableFromJSON(left_schema, {R\"([\n+      [10, 1, 21, 32, 43],\n+      [20, 2, 21, 32, 43],\n+      [30, 3, 21, 32, 43],\n+      [80, 2, 21, 52, 45],\n+      [35, 31, 25, 36, 47]\n+  ])\"});\n+\n+  auto right_table = TableFromJSON(right_schema, {R\"([\n+      [10, 11, 25, 36, 47],\n+      [80, 21, 25, 32, 40],\n+      [32, 31, 25, 36, 42],\n+      [30, 11, 25, 38, 44],\n+      [33, 21, 24, 32, 41]\n+  ])\"});\n+\n+  std::string substrait_json = R\"({\n+  \"relations\": [{\n+    \"rel\": {\n+      \"join\": {\n+        \"common\": {\n+          \"emit\": {\n+            \"outputMapping\": [0, 2, 3, 4, 6, 7]\n+          }\n+        },\n+        \"left\": {\n+          \"project\": {\n+            \"common\": {\n+              \"emit\": {\n+                \"outputMapping\": [0, 1, 2, 5]\n+              }\n+            },\n+            \"expressions\": [{\n+              \"scalarFunction\": {\n+                \"functionReference\": 32,\n+                \"arguments\": [\n+                  {\n+                    \"enum\": {\n+                          \"specified\": \"ERROR\"\n+                    }\n+                  },\n+                  {\n+                    \"value\": {\n+                      \"selection\": {\n+                        \"directReference\": {\n+                          \"structField\": {\n+                            \"field\": 1\n+                          }\n+                        },\n+                        \"rootReference\": {\n+                        }\n+                      }\n+                    }\n+                  }, {\n+                    \"value\": {\n+                      \"selection\": {\n+                        \"directReference\": {\n+                          \"structField\": {\n+                            \"field\": 2\n+                          }\n+                        },\n+                        \"rootReference\": {\n+                        }\n+                      }\n+                    }\n+                  }\n+                ],\n+                \"output_type\": {\n+                  \"bool\": {}\n+                }\n+              }\n+            },\n+            ],\n+            \"input\" : {\n+              \"read\": {\n+                \"base_schema\": {\n+                  \"names\": [\"A\", \"B\", \"C\", \"D\", \"E\"],\n+                    \"struct\": {\n+                    \"types\": [{\n+                      \"i32\": {}\n+                    }, {\n+                      \"i32\": {}\n+                    }, {\n+                      \"i32\": {}\n+                    }, {\n+                      \"i32\": {}\n+                    }, {\n+                      \"i32\": {}\n+                    }]\n+                  }\n+                },\n+                \"namedTable\": {\n+                  \"names\": [\"left\"]\n+                }\n+              }\n+            }\n+          }\n+        },\n+        \"right\": {\n+          \"project\": {\n+            \"common\": {\n+              \"emit\": {\n+                \"outputMapping\": [0, 1, 2, 5]\n+              }\n+            },\n+            \"expressions\": [{\n+              \"scalarFunction\": {\n+                \"functionReference\": 32,\n+                \"arguments\": [\n+                  {\n+                    \"enum\": {\n+                          \"specified\": \"ERROR\"\n+                    }\n+                  },\n+                  {\n+                    \"value\": {\n+                      \"selection\": {\n+                        \"directReference\": {\n+                          \"structField\": {\n+                            \"field\": 1\n+                          }\n+                        },\n+                        \"rootReference\": {\n+                        }\n+                      }\n+                    }\n+                  }, {\n+                    \"value\": {\n+                      \"selection\": {\n+                        \"directReference\": {\n+                          \"structField\": {\n+                            \"field\": 2\n+                          }\n+                        },\n+                        \"rootReference\": {\n+                        }\n+                      }\n+                    }\n+                  }\n+                ],\n+                \"output_type\": {\n+                  \"bool\": {}\n+                }\n+              }\n+            },\n+            ],\n+            \"input\" : {\n+              \"read\": {\n+                \"base_schema\": {\n+                  \"names\": [\"X\", \"Y\", \"W\", \"V\", \"Z\"],\n+                    \"struct\": {\n+                    \"types\": [{\n+                      \"i32\": {}\n+                    }, {\n+                      \"i32\": {}\n+                    }, {\n+                      \"i32\": {}\n+                    }, {\n+                      \"i32\": {}\n+                    }, {\n+                      \"i32\": {}\n+                    }]\n+                  }\n+                },\n+                \"namedTable\": {\n+                  \"names\": [\"right\"]\n+                }\n+              }\n+            }\n+          }\n+        },\n+        \"expression\": {\n+          \"scalarFunction\": {\n+            \"functionReference\": 14,\n+            \"arguments\": [{\n+              \"value\": {\n+                \"selection\": {\n+                  \"directReference\": {\n+                    \"structField\": {\n+                      \"field\": 0\n+                    }\n+                  },\n+                  \"rootReference\": {\n+                  }\n+                }\n+              }\n+            }, {\n+              \"value\": {\n+                \"selection\": {\n+                  \"directReference\": {\n+                    \"structField\": {\n+                      \"field\": 0\n+                    }\n+                  },\n+                  \"rootReference\": {\n+                  }\n+                }\n+              }\n+            }],\n+            \"output_type\": {\n+              \"bool\": {}\n+            },\n+            \"overflow\" : {\n+              \"ERROR\": {}\n+            }\n+          }\n+        },\n+        \"type\": \"JOIN_TYPE_INNER\"\n+      }\n+    }\n+  }],\n+  \"extension_uris\": [\n+      {\n+        \"extension_uri_anchor\": 42,\n+        \"uri\": \")\" + std::string(kSubstraitComparisonFunctionsUri) +\n+                               R\"(\"\n+      },\n+      {\n+        \"extension_uri_anchor\": 72,\n+        \"uri\": \")\" + std::string(kSubstraitArithmeticFunctionsUri) +\n+                               R\"(\"\n+      }\n+    ],\n+    \"extensions\": [\n+      {\n+        \"extension_function\": {\n+          \"extension_uri_reference\": 42,\n+          \"function_anchor\": 14,\n+          \"name\": \"equal\"\n+        }\n+      },\n+      {\n+        \"extension_function\": {\n+          \"extension_uri_reference\": 72,\n+          \"function_anchor\": 32,\n+          \"name\": \"add\"\n+        }\n+      }\n+    ]\n+  })\";\n+\n+  ASSERT_OK_AND_ASSIGN(auto buf, internal::SubstraitFromJSON(\"Plan\", substrait_json));\n+  auto output_schema = schema({\n+      field(\"A\", int32()),\n+      field(\"E\", int32()),\n+      field(\"B+C\", int32()),\n+      field(\"X\", int32()),\n+      field(\"Z\", int32()),\n+      field(\"Y+W\", int32()),\n+  });\n+\n+  auto expected_table = TableFromJSON(std::move(output_schema), {R\"([\n+      [10, 21, 22, 10, 25, 36],\n+      [30, 21, 24, 30, 25, 36],\n+      [80, 21, 23, 80, 25, 46]\n+  ])\"});\n+\n+  NamedTableProvider table_provider =\n+      [left_table, right_table](const std::vector<std::string>& names) {\n+        std::shared_ptr<Table> output_table;\n+        for (const auto& name : names) {\n+          if (name == \"left\") {\n+            output_table = left_table;\n+          }\n+          if (name == \"right\") {\n+            output_table = right_table;\n+          }\n+        }\n+        std::shared_ptr<compute::ExecNodeOptions> options =\n\nReview Comment:\n   Maybe `ASSERT_TRUE(!!output_table)` just to make sure?\n\n\n\n##########\ncpp/src/arrow/engine/substrait/test_util.cc:\n##########\n@@ -0,0 +1,117 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+// These utilities are for internal / unit test use only.\n+// They allow for the construction of simple Substrait plans\n+// programmatically without first requiring the construction\n+// of an ExecPlan\n+\n+// These utilities have to be here, and not in a test_util.cc\n+// file (or in a unit test) because only one .so is allowed\n+// to include each .pb.h file or else protobuf will encounter\n+// global namespace conflicts.\n+\n+#include \"arrow/engine/substrait/test_util.h\"\n+#include \"arrow/ipc/writer.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+\n+namespace arrow {\n+\n+namespace engine {\n+\n+std::shared_ptr<DataType> StripFieldNames(std::shared_ptr<DataType> type) {\n+  if (type->id() == Type::STRUCT) {\n+    FieldVector fields(type->num_fields());\n+    for (int i = 0; i < type->num_fields(); ++i) {\n+      fields[i] = type->field(i)->WithName(\"\");\n+    }\n+    return struct_(std::move(fields));\n+  }\n+\n+  if (type->id() == Type::LIST) {\n+    return list(type->field(0)->WithName(\"\"));\n+  }\n+\n+  return type;\n+}\n+\n+void WriteIpcData(const std::string& path,\n+                  const std::shared_ptr<fs::FileSystem> file_system,\n+                  const std::shared_ptr<Table> input) {\n+  EXPECT_OK_AND_ASSIGN(auto mmap, file_system->OpenOutputStream(path));\n+  ASSERT_OK_AND_ASSIGN(\n+      auto file_writer,\n+      MakeFileWriter(mmap, input->schema(), ipc::IpcWriteOptions::Defaults()));\n+  TableBatchReader reader(input);\n+  std::shared_ptr<RecordBatch> batch;\n+  while (true) {\n+    ASSERT_OK(reader.ReadNext(&batch));\n+    if (batch == nullptr) {\n+      break;\n+    }\n+    ASSERT_OK(file_writer->WriteRecordBatch(*batch));\n+  }\n+  ASSERT_OK(file_writer->Close());\n+}\n+\n+Result<std::shared_ptr<Table>> GetTableFromPlan(\n+    compute::Declaration& other_declrs, compute::ExecContext& exec_context,\n+    const std::shared_ptr<Schema>& output_schema) {\n+  ARROW_ASSIGN_OR_RAISE(auto plan, compute::ExecPlan::Make(&exec_context));\n+\n+  arrow::AsyncGenerator<std::optional<compute::ExecBatch>> sink_gen;\n+  auto sink_node_options = compute::SinkNodeOptions{&sink_gen};\n+  auto sink_declaration = compute::Declaration({\"sink\", sink_node_options, \"e\"});\n+  auto declarations = compute::Declaration::Sequence({other_declrs, sink_declaration});\n+\n+  ARROW_ASSIGN_OR_RAISE(auto decl, declarations.AddToPlan(plan.get()));\n+\n+  RETURN_NOT_OK(decl->Validate());\n+\n+  std::shared_ptr<arrow::RecordBatchReader> sink_reader = compute::MakeGeneratorReader(\n+      output_schema, std::move(sink_gen), exec_context.memory_pool());\n+\n+  RETURN_NOT_OK(plan->Validate());\n+  RETURN_NOT_OK(plan->StartProducing());\n+  return arrow::Table::FromRecordBatchReader(sink_reader.get());\n+}\n+\n+void CheckRoundTripResult(const std::shared_ptr<Schema> output_schema,\n+                          const std::shared_ptr<Table> expected_table,\n+                          compute::ExecContext& exec_context,\n+                          std::shared_ptr<Buffer>& buf,\n+                          const std::vector<int>& include_columns,\n+                          const ConversionOptions& conversion_options) {\n+  std::shared_ptr<ExtensionIdRegistry> sp_ext_id_reg = MakeExtensionIdRegistry();\n+  ExtensionIdRegistry* ext_id_reg = sp_ext_id_reg.get();\n+  ExtensionSet ext_set(ext_id_reg);\n+  ASSERT_OK_AND_ASSIGN(auto sink_decls, DeserializePlans(\n+                                            *buf, [] { return kNullConsumer; },\n+                                            ext_id_reg, &ext_set, conversion_options));\n+  auto other_declrs = std::get_if<compute::Declaration>(&sink_decls[0].inputs[0]);\n\nReview Comment:\n   ```suggestion\r\n     auto other_declrs = std::get_if<compute::Declaration>(&sink_decls[0].inputs[0]);\r\n     ASSERT_NE(other_declrs, nullptr);\r\n   ```\n\n\n\n##########\ncpp/src/arrow/engine/substrait/serde_test.cc:\n##########\n@@ -3187,5 +3043,637 @@ TEST(Substrait, IsthmusPlan) {\n                        *compute::default_exec_context(), buf, {}, conversion_options);\n }\n \n+TEST(Substrait, CompoundEmitFilterless) {\n+#ifdef _WIN32\n+  GTEST_SKIP() << \"ARROW-16392: Substrait File URI not supported for Windows\";\n+#endif\n+  compute::ExecContext exec_context;\n+  auto left_schema =\n+      schema({field(\"A\", int32()), field(\"B\", int32()), field(\"C\", int32()),\n+              field(\"D\", int32()), field(\"E\", int32())});\n+\n+  auto right_schema =\n+      schema({field(\"X\", int32()), field(\"Y\", int32()), field(\"W\", int32()),\n+              field(\"V\", int32()), field(\"Z\", int32())});\n+\n+  // creating a dummy dataset using a dummy table\n+  auto left_table = TableFromJSON(left_schema, {R\"([\n+      [10, 1, 21, 32, 43],\n+      [20, 2, 21, 32, 43],\n+      [30, 3, 21, 32, 43],\n+      [80, 2, 21, 52, 45],\n+      [35, 31, 25, 36, 47]\n+  ])\"});\n+\n+  auto right_table = TableFromJSON(right_schema, {R\"([\n+      [10, 11, 25, 36, 47],\n+      [80, 21, 25, 32, 40],\n+      [32, 31, 25, 36, 42],\n+      [30, 11, 25, 38, 44],\n+      [33, 21, 24, 32, 41]\n+  ])\"});\n+\n+  std::string substrait_json = R\"({\n+  \"relations\": [{\n+    \"rel\": {\n+      \"join\": {\n+        \"common\": {\n+          \"emit\": {\n+            \"outputMapping\": [0, 2, 3, 4, 6, 7]\n+          }\n+        },\n+        \"left\": {\n+          \"project\": {\n+            \"common\": {\n+              \"emit\": {\n+                \"outputMapping\": [0, 1, 2, 5]\n+              }\n+            },\n+            \"expressions\": [{\n+              \"scalarFunction\": {\n+                \"functionReference\": 32,\n+                \"arguments\": [\n+                  {\n+                    \"enum\": {\n+                          \"specified\": \"ERROR\"\n+                    }\n+                  },\n+                  {\n+                    \"value\": {\n+                      \"selection\": {\n+                        \"directReference\": {\n+                          \"structField\": {\n+                            \"field\": 1\n+                          }\n+                        },\n+                        \"rootReference\": {\n+                        }\n+                      }\n+                    }\n+                  }, {\n+                    \"value\": {\n+                      \"selection\": {\n+                        \"directReference\": {\n+                          \"structField\": {\n+                            \"field\": 2\n+                          }\n+                        },\n+                        \"rootReference\": {\n+                        }\n+                      }\n+                    }\n+                  }\n+                ],\n+                \"output_type\": {\n+                  \"bool\": {}\n+                }\n+              }\n+            },\n+            ],\n+            \"input\" : {\n+              \"read\": {\n+                \"base_schema\": {\n+                  \"names\": [\"A\", \"B\", \"C\", \"D\", \"E\"],\n+                    \"struct\": {\n+                    \"types\": [{\n+                      \"i32\": {}\n+                    }, {\n+                      \"i32\": {}\n+                    }, {\n+                      \"i32\": {}\n+                    }, {\n+                      \"i32\": {}\n+                    }, {\n+                      \"i32\": {}\n+                    }]\n+                  }\n+                },\n+                \"namedTable\": {\n+                  \"names\": [\"left\"]\n+                }\n+              }\n+            }\n+          }\n+        },\n+        \"right\": {\n+          \"project\": {\n+            \"common\": {\n+              \"emit\": {\n+                \"outputMapping\": [0, 1, 2, 5]\n+              }\n+            },\n+            \"expressions\": [{\n+              \"scalarFunction\": {\n+                \"functionReference\": 32,\n+                \"arguments\": [\n+                  {\n+                    \"enum\": {\n+                          \"specified\": \"ERROR\"\n+                    }\n+                  },\n+                  {\n+                    \"value\": {\n+                      \"selection\": {\n+                        \"directReference\": {\n+                          \"structField\": {\n+                            \"field\": 1\n+                          }\n+                        },\n+                        \"rootReference\": {\n+                        }\n+                      }\n+                    }\n+                  }, {\n+                    \"value\": {\n+                      \"selection\": {\n+                        \"directReference\": {\n+                          \"structField\": {\n+                            \"field\": 2\n+                          }\n+                        },\n+                        \"rootReference\": {\n+                        }\n+                      }\n+                    }\n+                  }\n+                ],\n+                \"output_type\": {\n+                  \"bool\": {}\n+                }\n+              }\n+            },\n+            ],\n+            \"input\" : {\n+              \"read\": {\n+                \"base_schema\": {\n+                  \"names\": [\"X\", \"Y\", \"W\", \"V\", \"Z\"],\n+                    \"struct\": {\n+                    \"types\": [{\n+                      \"i32\": {}\n+                    }, {\n+                      \"i32\": {}\n+                    }, {\n+                      \"i32\": {}\n+                    }, {\n+                      \"i32\": {}\n+                    }, {\n+                      \"i32\": {}\n+                    }]\n+                  }\n+                },\n+                \"namedTable\": {\n+                  \"names\": [\"right\"]\n+                }\n+              }\n+            }\n+          }\n+        },\n+        \"expression\": {\n+          \"scalarFunction\": {\n+            \"functionReference\": 14,\n+            \"arguments\": [{\n+              \"value\": {\n+                \"selection\": {\n+                  \"directReference\": {\n+                    \"structField\": {\n+                      \"field\": 0\n+                    }\n+                  },\n+                  \"rootReference\": {\n+                  }\n+                }\n+              }\n+            }, {\n+              \"value\": {\n+                \"selection\": {\n+                  \"directReference\": {\n+                    \"structField\": {\n+                      \"field\": 0\n+                    }\n+                  },\n+                  \"rootReference\": {\n+                  }\n+                }\n+              }\n+            }],\n+            \"output_type\": {\n+              \"bool\": {}\n+            },\n+            \"overflow\" : {\n+              \"ERROR\": {}\n+            }\n+          }\n+        },\n+        \"type\": \"JOIN_TYPE_INNER\"\n+      }\n+    }\n+  }],\n+  \"extension_uris\": [\n+      {\n+        \"extension_uri_anchor\": 42,\n+        \"uri\": \")\" + std::string(kSubstraitComparisonFunctionsUri) +\n+                               R\"(\"\n+      },\n+      {\n+        \"extension_uri_anchor\": 72,\n+        \"uri\": \")\" + std::string(kSubstraitArithmeticFunctionsUri) +\n+                               R\"(\"\n+      }\n+    ],\n+    \"extensions\": [\n+      {\n+        \"extension_function\": {\n+          \"extension_uri_reference\": 42,\n+          \"function_anchor\": 14,\n+          \"name\": \"equal\"\n+        }\n+      },\n+      {\n+        \"extension_function\": {\n+          \"extension_uri_reference\": 72,\n+          \"function_anchor\": 32,\n+          \"name\": \"add\"\n+        }\n+      }\n+    ]\n+  })\";\n+\n+  ASSERT_OK_AND_ASSIGN(auto buf, internal::SubstraitFromJSON(\"Plan\", substrait_json));\n+  auto output_schema = schema({\n+      field(\"A\", int32()),\n+      field(\"E\", int32()),\n+      field(\"B+C\", int32()),\n+      field(\"X\", int32()),\n+      field(\"Z\", int32()),\n+      field(\"Y+W\", int32()),\n+  });\n+\n+  auto expected_table = TableFromJSON(std::move(output_schema), {R\"([\n+      [10, 21, 22, 10, 25, 36],\n+      [30, 21, 24, 30, 25, 36],\n+      [80, 21, 23, 80, 25, 46]\n+  ])\"});\n+\n+  NamedTableProvider table_provider =\n+      [left_table, right_table](const std::vector<std::string>& names) {\n+        std::shared_ptr<Table> output_table;\n+        for (const auto& name : names) {\n+          if (name == \"left\") {\n+            output_table = left_table;\n+          }\n+          if (name == \"right\") {\n+            output_table = right_table;\n+          }\n+        }\n+        std::shared_ptr<compute::ExecNodeOptions> options =\n+            std::make_shared<compute::TableSourceNodeOptions>(std::move(output_table));\n+        return compute::Declaration(\"table_source\", {}, options, \"mock_source\");\n+      };\n+\n+  ConversionOptions conversion_options;\n+  conversion_options.named_table_provider = std::move(table_provider);\n+\n+  CheckRoundTripResult(std::move(output_schema), std::move(expected_table), exec_context,\n+                       buf, {}, conversion_options);\n+}\n+\n+TEST(Substrait, CompoundEmitWithFilter) {\n+#ifdef _WIN32\n+  GTEST_SKIP() << \"ARROW-16392: Substrait File URI not supported for Windows\";\n+#endif\n\nReview Comment:\n   Same comment as above.\n\n\n\n",
                    "created": "2022-11-01T21:14:01.076+0000",
                    "updated": "2022-11-01T21:14:01.076+0000",
                    "started": "2022-11-01T21:14:01.075+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "822467",
                    "issueId": "13477868"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13477868/worklog/822489",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on code in PR #14174:\nURL: https://github.com/apache/arrow/pull/14174#discussion_r1011002074\n\n\n##########\ncpp/src/arrow/engine/substrait/serde_test.cc:\n##########\n@@ -3187,5 +3043,637 @@ TEST(Substrait, IsthmusPlan) {\n                        *compute::default_exec_context(), buf, {}, conversion_options);\n }\n \n+TEST(Substrait, CompoundEmitFilterless) {\n+#ifdef _WIN32\n+  GTEST_SKIP() << \"ARROW-16392: Substrait File URI not supported for Windows\";\n+#endif\n\nReview Comment:\n   @westonpace sorry I made the PR https://github.com/apache/arrow/pull/14425 and the JIRA is here, https://issues.apache.org/jira/browse/ARROW-18051\r\n   \n\n\n\n",
                    "created": "2022-11-01T23:40:56.572+0000",
                    "updated": "2022-11-01T23:40:56.572+0000",
                    "started": "2022-11-01T23:40:56.571+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "822489",
                    "issueId": "13477868"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13477868/worklog/822500",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on code in PR #14174:\nURL: https://github.com/apache/arrow/pull/14174#discussion_r1011030844\n\n\n##########\ncpp/src/arrow/engine/substrait/serde_test.cc:\n##########\n@@ -3187,5 +3043,637 @@ TEST(Substrait, IsthmusPlan) {\n                        *compute::default_exec_context(), buf, {}, conversion_options);\n }\n \n+TEST(Substrait, CompoundEmitFilterless) {\n+#ifdef _WIN32\n+  GTEST_SKIP() << \"ARROW-16392: Substrait File URI not supported for Windows\";\n+#endif\n+  compute::ExecContext exec_context;\n+  auto left_schema =\n+      schema({field(\"A\", int32()), field(\"B\", int32()), field(\"C\", int32()),\n+              field(\"D\", int32()), field(\"E\", int32())});\n+\n+  auto right_schema =\n+      schema({field(\"X\", int32()), field(\"Y\", int32()), field(\"W\", int32()),\n+              field(\"V\", int32()), field(\"Z\", int32())});\n+\n+  // creating a dummy dataset using a dummy table\n+  auto left_table = TableFromJSON(left_schema, {R\"([\n+      [10, 1, 21, 32, 43],\n+      [20, 2, 21, 32, 43],\n+      [30, 3, 21, 32, 43],\n+      [80, 2, 21, 52, 45],\n+      [35, 31, 25, 36, 47]\n+  ])\"});\n+\n+  auto right_table = TableFromJSON(right_schema, {R\"([\n+      [10, 11, 25, 36, 47],\n+      [80, 21, 25, 32, 40],\n+      [32, 31, 25, 36, 42],\n+      [30, 11, 25, 38, 44],\n+      [33, 21, 24, 32, 41]\n+  ])\"});\n+\n+  std::string substrait_json = R\"({\n+  \"relations\": [{\n+    \"rel\": {\n+      \"join\": {\n+        \"common\": {\n+          \"emit\": {\n+            \"outputMapping\": [0, 2, 3, 4, 6, 7]\n+          }\n+        },\n+        \"left\": {\n+          \"project\": {\n+            \"common\": {\n+              \"emit\": {\n+                \"outputMapping\": [0, 1, 2, 5]\n+              }\n+            },\n+            \"expressions\": [{\n+              \"scalarFunction\": {\n+                \"functionReference\": 32,\n+                \"arguments\": [\n+                  {\n+                    \"enum\": {\n+                          \"specified\": \"ERROR\"\n+                    }\n+                  },\n+                  {\n+                    \"value\": {\n+                      \"selection\": {\n+                        \"directReference\": {\n+                          \"structField\": {\n+                            \"field\": 1\n+                          }\n+                        },\n+                        \"rootReference\": {\n+                        }\n+                      }\n+                    }\n+                  }, {\n+                    \"value\": {\n+                      \"selection\": {\n+                        \"directReference\": {\n+                          \"structField\": {\n+                            \"field\": 2\n+                          }\n+                        },\n+                        \"rootReference\": {\n+                        }\n+                      }\n+                    }\n+                  }\n+                ],\n+                \"output_type\": {\n+                  \"bool\": {}\n+                }\n+              }\n+            },\n+            ],\n+            \"input\" : {\n+              \"read\": {\n+                \"base_schema\": {\n+                  \"names\": [\"A\", \"B\", \"C\", \"D\", \"E\"],\n+                    \"struct\": {\n+                    \"types\": [{\n+                      \"i32\": {}\n+                    }, {\n+                      \"i32\": {}\n+                    }, {\n+                      \"i32\": {}\n+                    }, {\n+                      \"i32\": {}\n+                    }, {\n+                      \"i32\": {}\n+                    }]\n+                  }\n+                },\n+                \"namedTable\": {\n+                  \"names\": [\"left\"]\n+                }\n+              }\n+            }\n+          }\n+        },\n+        \"right\": {\n+          \"project\": {\n+            \"common\": {\n+              \"emit\": {\n+                \"outputMapping\": [0, 1, 2, 5]\n+              }\n+            },\n+            \"expressions\": [{\n+              \"scalarFunction\": {\n+                \"functionReference\": 32,\n+                \"arguments\": [\n+                  {\n+                    \"enum\": {\n+                          \"specified\": \"ERROR\"\n+                    }\n+                  },\n+                  {\n+                    \"value\": {\n+                      \"selection\": {\n+                        \"directReference\": {\n+                          \"structField\": {\n+                            \"field\": 1\n+                          }\n+                        },\n+                        \"rootReference\": {\n+                        }\n+                      }\n+                    }\n+                  }, {\n+                    \"value\": {\n+                      \"selection\": {\n+                        \"directReference\": {\n+                          \"structField\": {\n+                            \"field\": 2\n+                          }\n+                        },\n+                        \"rootReference\": {\n+                        }\n+                      }\n+                    }\n+                  }\n+                ],\n+                \"output_type\": {\n+                  \"bool\": {}\n+                }\n+              }\n+            },\n+            ],\n+            \"input\" : {\n+              \"read\": {\n+                \"base_schema\": {\n+                  \"names\": [\"X\", \"Y\", \"W\", \"V\", \"Z\"],\n+                    \"struct\": {\n+                    \"types\": [{\n+                      \"i32\": {}\n+                    }, {\n+                      \"i32\": {}\n+                    }, {\n+                      \"i32\": {}\n+                    }, {\n+                      \"i32\": {}\n+                    }, {\n+                      \"i32\": {}\n+                    }]\n+                  }\n+                },\n+                \"namedTable\": {\n+                  \"names\": [\"right\"]\n+                }\n+              }\n+            }\n+          }\n+        },\n+        \"expression\": {\n+          \"scalarFunction\": {\n+            \"functionReference\": 14,\n+            \"arguments\": [{\n+              \"value\": {\n+                \"selection\": {\n+                  \"directReference\": {\n+                    \"structField\": {\n+                      \"field\": 0\n+                    }\n+                  },\n+                  \"rootReference\": {\n+                  }\n+                }\n+              }\n+            }, {\n+              \"value\": {\n+                \"selection\": {\n+                  \"directReference\": {\n+                    \"structField\": {\n+                      \"field\": 0\n+                    }\n+                  },\n+                  \"rootReference\": {\n+                  }\n+                }\n+              }\n+            }],\n+            \"output_type\": {\n+              \"bool\": {}\n+            },\n+            \"overflow\" : {\n+              \"ERROR\": {}\n+            }\n+          }\n+        },\n+        \"type\": \"JOIN_TYPE_INNER\"\n+      }\n+    }\n+  }],\n+  \"extension_uris\": [\n+      {\n+        \"extension_uri_anchor\": 42,\n+        \"uri\": \")\" + std::string(kSubstraitComparisonFunctionsUri) +\n+                               R\"(\"\n+      },\n+      {\n+        \"extension_uri_anchor\": 72,\n+        \"uri\": \")\" + std::string(kSubstraitArithmeticFunctionsUri) +\n+                               R\"(\"\n+      }\n+    ],\n+    \"extensions\": [\n+      {\n+        \"extension_function\": {\n+          \"extension_uri_reference\": 42,\n+          \"function_anchor\": 14,\n+          \"name\": \"equal\"\n+        }\n+      },\n+      {\n+        \"extension_function\": {\n+          \"extension_uri_reference\": 72,\n+          \"function_anchor\": 32,\n+          \"name\": \"add\"\n+        }\n+      }\n+    ]\n+  })\";\n+\n+  ASSERT_OK_AND_ASSIGN(auto buf, internal::SubstraitFromJSON(\"Plan\", substrait_json));\n+  auto output_schema = schema({\n+      field(\"A\", int32()),\n+      field(\"E\", int32()),\n+      field(\"B+C\", int32()),\n+      field(\"X\", int32()),\n+      field(\"Z\", int32()),\n+      field(\"Y+W\", int32()),\n+  });\n+\n+  auto expected_table = TableFromJSON(std::move(output_schema), {R\"([\n+      [10, 21, 22, 10, 25, 36],\n+      [30, 21, 24, 30, 25, 36],\n+      [80, 21, 23, 80, 25, 46]\n+  ])\"});\n+\n+  NamedTableProvider table_provider =\n+      [left_table, right_table](const std::vector<std::string>& names) {\n+        std::shared_ptr<Table> output_table;\n+        for (const auto& name : names) {\n+          if (name == \"left\") {\n+            output_table = left_table;\n+          }\n+          if (name == \"right\") {\n+            output_table = right_table;\n+          }\n+        }\n+        std::shared_ptr<compute::ExecNodeOptions> options =\n\nReview Comment:\n   Not sure if we can do that here since the lambda returns a `Result<Declaration>`, but maybe\r\n   \r\n   ```c++\r\n   if(!output_table) {\r\n        return Status::Invalid(\"NamedTableProvider couldn't set the table\");\r\n   }\r\n   ```\n\n\n\n",
                    "created": "2022-11-02T00:43:06.986+0000",
                    "updated": "2022-11-02T00:43:06.986+0000",
                    "started": "2022-11-02T00:43:06.986+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "822500",
                    "issueId": "13477868"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13477868/worklog/822502",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on code in PR #14174:\nURL: https://github.com/apache/arrow/pull/14174#discussion_r1011035704\n\n\n##########\ncpp/src/arrow/engine/substrait/test_util.cc:\n##########\n@@ -0,0 +1,117 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+// These utilities are for internal / unit test use only.\n+// They allow for the construction of simple Substrait plans\n+// programmatically without first requiring the construction\n+// of an ExecPlan\n+\n+// These utilities have to be here, and not in a test_util.cc\n+// file (or in a unit test) because only one .so is allowed\n+// to include each .pb.h file or else protobuf will encounter\n+// global namespace conflicts.\n+\n+#include \"arrow/engine/substrait/test_util.h\"\n+#include \"arrow/ipc/writer.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+\n+namespace arrow {\n+\n+namespace engine {\n+\n+std::shared_ptr<DataType> StripFieldNames(std::shared_ptr<DataType> type) {\n+  if (type->id() == Type::STRUCT) {\n+    FieldVector fields(type->num_fields());\n+    for (int i = 0; i < type->num_fields(); ++i) {\n+      fields[i] = type->field(i)->WithName(\"\");\n+    }\n+    return struct_(std::move(fields));\n+  }\n+\n+  if (type->id() == Type::LIST) {\n+    return list(type->field(0)->WithName(\"\"));\n+  }\n+\n+  return type;\n+}\n+\n+void WriteIpcData(const std::string& path,\n+                  const std::shared_ptr<fs::FileSystem> file_system,\n+                  const std::shared_ptr<Table> input) {\n+  EXPECT_OK_AND_ASSIGN(auto mmap, file_system->OpenOutputStream(path));\n+  ASSERT_OK_AND_ASSIGN(\n+      auto file_writer,\n+      MakeFileWriter(mmap, input->schema(), ipc::IpcWriteOptions::Defaults()));\n+  TableBatchReader reader(input);\n+  std::shared_ptr<RecordBatch> batch;\n+  while (true) {\n+    ASSERT_OK(reader.ReadNext(&batch));\n+    if (batch == nullptr) {\n+      break;\n+    }\n+    ASSERT_OK(file_writer->WriteRecordBatch(*batch));\n+  }\n+  ASSERT_OK(file_writer->Close());\n+}\n+\n+Result<std::shared_ptr<Table>> GetTableFromPlan(\n+    compute::Declaration& other_declrs, compute::ExecContext& exec_context,\n+    const std::shared_ptr<Schema>& output_schema) {\n+  ARROW_ASSIGN_OR_RAISE(auto plan, compute::ExecPlan::Make(&exec_context));\n+\n+  arrow::AsyncGenerator<std::optional<compute::ExecBatch>> sink_gen;\n+  auto sink_node_options = compute::SinkNodeOptions{&sink_gen};\n+  auto sink_declaration = compute::Declaration({\"sink\", sink_node_options, \"e\"});\n+  auto declarations = compute::Declaration::Sequence({other_declrs, sink_declaration});\n+\n+  ARROW_ASSIGN_OR_RAISE(auto decl, declarations.AddToPlan(plan.get()));\n+\n+  RETURN_NOT_OK(decl->Validate());\n+\n+  std::shared_ptr<arrow::RecordBatchReader> sink_reader = compute::MakeGeneratorReader(\n+      output_schema, std::move(sink_gen), exec_context.memory_pool());\n+\n+  RETURN_NOT_OK(plan->Validate());\n+  RETURN_NOT_OK(plan->StartProducing());\n+  return arrow::Table::FromRecordBatchReader(sink_reader.get());\n+}\n+\n+void CheckRoundTripResult(const std::shared_ptr<Schema> output_schema,\n+                          const std::shared_ptr<Table> expected_table,\n+                          compute::ExecContext& exec_context,\n+                          std::shared_ptr<Buffer>& buf,\n+                          const std::vector<int>& include_columns,\n+                          const ConversionOptions& conversion_options) {\n+  std::shared_ptr<ExtensionIdRegistry> sp_ext_id_reg = MakeExtensionIdRegistry();\n+  ExtensionIdRegistry* ext_id_reg = sp_ext_id_reg.get();\n+  ExtensionSet ext_set(ext_id_reg);\n+  ASSERT_OK_AND_ASSIGN(auto sink_decls, DeserializePlans(\n+                                            *buf, [] { return kNullConsumer; },\n+                                            ext_id_reg, &ext_set, conversion_options));\n+  auto other_declrs = std::get_if<compute::Declaration>(&sink_decls[0].inputs[0]);\n\nReview Comment:\n   How about \r\n   `ASSERT_TRUE(other_declrs.IsValid());`\n\n\n\n",
                    "created": "2022-11-02T00:52:57.816+0000",
                    "updated": "2022-11-02T00:52:57.816+0000",
                    "started": "2022-11-02T00:52:57.816+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "822502",
                    "issueId": "13477868"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13477868/worklog/822503",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on PR #14174:\nURL: https://github.com/apache/arrow/pull/14174#issuecomment-1299409196\n\n   cc @westonpace addressed the reviews\n\n\n",
                    "created": "2022-11-02T00:58:55.883+0000",
                    "updated": "2022-11-02T00:58:55.883+0000",
                    "started": "2022-11-02T00:58:55.883+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "822503",
                    "issueId": "13477868"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13477868/worklog/825982",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on code in PR #14174:\nURL: https://github.com/apache/arrow/pull/14174#discussion_r1022347947\n\n\n##########\ncpp/src/arrow/engine/substrait/serde_test.cc:\n##########\n@@ -3692,5 +3536,641 @@ TEST(Substrait, ReadRelWithGlobFiles) {\n                        buf, {}, {}, &options);\n }\n \n+TEST(Substrait, CompoundEmitFilterless) {\n+#ifdef _WIN32\n+  GTEST_SKIP() << \"ARROW-16392: Substrait File URI not supported for Windows\";\n+#endif\n+  compute::ExecContext exec_context;\n+  auto left_schema =\n+      schema({field(\"A\", int32()), field(\"B\", int32()), field(\"C\", int32()),\n+              field(\"D\", int32()), field(\"E\", int32())});\n+\n+  auto right_schema =\n+      schema({field(\"X\", int32()), field(\"Y\", int32()), field(\"W\", int32()),\n+              field(\"V\", int32()), field(\"Z\", int32())});\n+\n+  // creating a dummy dataset using a dummy table\n+  auto left_table = TableFromJSON(left_schema, {R\"([\n+      [10, 1, 21, 32, 43],\n+      [20, 2, 21, 32, 43],\n+      [30, 3, 21, 32, 43],\n+      [80, 2, 21, 52, 45],\n+      [35, 31, 25, 36, 47]\n+  ])\"});\n+\n+  auto right_table = TableFromJSON(right_schema, {R\"([\n+      [10, 11, 25, 36, 47],\n+      [80, 21, 25, 32, 40],\n+      [32, 31, 25, 36, 42],\n+      [30, 11, 25, 38, 44],\n+      [33, 21, 24, 32, 41]\n+  ])\"});\n+\n+  std::string substrait_json = R\"({\n+  \"relations\": [{\n+    \"rel\": {\n+      \"join\": {\n+        \"common\": {\n+          \"emit\": {\n+            \"outputMapping\": [0, 2, 3, 4, 6, 7]\n+          }\n+        },\n+        \"left\": {\n+          \"project\": {\n+            \"common\": {\n+              \"emit\": {\n+                \"outputMapping\": [0, 1, 2, 5]\n+              }\n+            },\n+            \"expressions\": [{\n+              \"scalarFunction\": {\n+                \"functionReference\": 32,\n+                \"arguments\": [\n+                  {\n+                    \"enum\": {\n+                          \"specified\": \"ERROR\"\n+                    }\n+                  },\n+                  {\n+                    \"value\": {\n+                      \"selection\": {\n+                        \"directReference\": {\n+                          \"structField\": {\n+                            \"field\": 1\n+                          }\n+                        },\n+                        \"rootReference\": {\n+                        }\n+                      }\n+                    }\n+                  }, {\n+                    \"value\": {\n+                      \"selection\": {\n+                        \"directReference\": {\n+                          \"structField\": {\n+                            \"field\": 2\n+                          }\n+                        },\n+                        \"rootReference\": {\n+                        }\n+                      }\n+                    }\n+                  }\n+                ],\n+                \"output_type\": {\n+                  \"bool\": {}\n+                }\n+              }\n+            },\n+            ],\n+            \"input\" : {\n+              \"read\": {\n+                \"base_schema\": {\n+                  \"names\": [\"A\", \"B\", \"C\", \"D\", \"E\"],\n+                    \"struct\": {\n+                    \"types\": [{\n+                      \"i32\": {}\n+                    }, {\n+                      \"i32\": {}\n+                    }, {\n+                      \"i32\": {}\n+                    }, {\n+                      \"i32\": {}\n+                    }, {\n+                      \"i32\": {}\n+                    }]\n+                  }\n+                },\n+                \"namedTable\": {\n+                  \"names\": [\"left\"]\n+                }\n+              }\n+            }\n+          }\n+        },\n+        \"right\": {\n+          \"project\": {\n+            \"common\": {\n+              \"emit\": {\n+                \"outputMapping\": [0, 1, 2, 5]\n+              }\n+            },\n+            \"expressions\": [{\n+              \"scalarFunction\": {\n+                \"functionReference\": 32,\n+                \"arguments\": [\n+                  {\n+                    \"enum\": {\n+                          \"specified\": \"ERROR\"\n+                    }\n+                  },\n+                  {\n+                    \"value\": {\n+                      \"selection\": {\n+                        \"directReference\": {\n+                          \"structField\": {\n+                            \"field\": 1\n+                          }\n+                        },\n+                        \"rootReference\": {\n+                        }\n+                      }\n+                    }\n+                  }, {\n+                    \"value\": {\n+                      \"selection\": {\n+                        \"directReference\": {\n+                          \"structField\": {\n+                            \"field\": 2\n+                          }\n+                        },\n+                        \"rootReference\": {\n+                        }\n+                      }\n+                    }\n+                  }\n+                ],\n+                \"output_type\": {\n+                  \"bool\": {}\n+                }\n+              }\n+            },\n+            ],\n+            \"input\" : {\n+              \"read\": {\n+                \"base_schema\": {\n+                  \"names\": [\"X\", \"Y\", \"W\", \"V\", \"Z\"],\n+                    \"struct\": {\n+                    \"types\": [{\n+                      \"i32\": {}\n+                    }, {\n+                      \"i32\": {}\n+                    }, {\n+                      \"i32\": {}\n+                    }, {\n+                      \"i32\": {}\n+                    }, {\n+                      \"i32\": {}\n+                    }]\n+                  }\n+                },\n+                \"namedTable\": {\n+                  \"names\": [\"right\"]\n+                }\n+              }\n+            }\n+          }\n+        },\n+        \"expression\": {\n+          \"scalarFunction\": {\n+            \"functionReference\": 14,\n+            \"arguments\": [{\n+              \"value\": {\n+                \"selection\": {\n+                  \"directReference\": {\n+                    \"structField\": {\n+                      \"field\": 0\n+                    }\n+                  },\n+                  \"rootReference\": {\n+                  }\n+                }\n+              }\n+            }, {\n+              \"value\": {\n+                \"selection\": {\n+                  \"directReference\": {\n+                    \"structField\": {\n+                      \"field\": 4\n+                    }\n+                  },\n+                  \"rootReference\": {\n+                  }\n+                }\n+              }\n+            }],\n+            \"output_type\": {\n+              \"bool\": {}\n+            },\n+            \"overflow\" : {\n+              \"ERROR\": {}\n+            }\n+          }\n+        },\n+        \"type\": \"JOIN_TYPE_INNER\"\n+      }\n+    }\n+  }],\n+  \"extension_uris\": [\n+      {\n+        \"extension_uri_anchor\": 42,\n+        \"uri\": \")\" + std::string(kSubstraitComparisonFunctionsUri) +\n+                               R\"(\"\n+      },\n+      {\n+        \"extension_uri_anchor\": 72,\n+        \"uri\": \")\" + std::string(kSubstraitArithmeticFunctionsUri) +\n+                               R\"(\"\n+      }\n+    ],\n+    \"extensions\": [\n+      {\n+        \"extension_function\": {\n+          \"extension_uri_reference\": 42,\n+          \"function_anchor\": 14,\n+          \"name\": \"equal\"\n+        }\n+      },\n+      {\n+        \"extension_function\": {\n+          \"extension_uri_reference\": 72,\n+          \"function_anchor\": 32,\n+          \"name\": \"add\"\n+        }\n+      }\n+    ]\n+  })\";\n+\n+  ASSERT_OK_AND_ASSIGN(auto buf, internal::SubstraitFromJSON(\"Plan\", substrait_json));\n+  auto output_schema = schema({\n+      field(\"A\", int32()),\n+      field(\"E\", int32()),\n\nReview Comment:\n   ```suggestion\r\n         field(\"C\", int32()),\r\n   ```\n\n\n\n##########\ncpp/src/arrow/engine/substrait/serde_test.cc:\n##########\n@@ -3692,5 +3536,641 @@ TEST(Substrait, ReadRelWithGlobFiles) {\n                        buf, {}, {}, &options);\n }\n \n+TEST(Substrait, CompoundEmitFilterless) {\n+#ifdef _WIN32\n+  GTEST_SKIP() << \"ARROW-16392: Substrait File URI not supported for Windows\";\n+#endif\n+  compute::ExecContext exec_context;\n+  auto left_schema =\n+      schema({field(\"A\", int32()), field(\"B\", int32()), field(\"C\", int32()),\n+              field(\"D\", int32()), field(\"E\", int32())});\n+\n+  auto right_schema =\n+      schema({field(\"X\", int32()), field(\"Y\", int32()), field(\"W\", int32()),\n+              field(\"V\", int32()), field(\"Z\", int32())});\n+\n+  // creating a dummy dataset using a dummy table\n+  auto left_table = TableFromJSON(left_schema, {R\"([\n+      [10, 1, 21, 32, 43],\n+      [20, 2, 21, 32, 43],\n+      [30, 3, 21, 32, 43],\n+      [80, 2, 21, 52, 45],\n+      [35, 31, 25, 36, 47]\n+  ])\"});\n+\n+  auto right_table = TableFromJSON(right_schema, {R\"([\n+      [10, 11, 25, 36, 47],\n+      [80, 21, 25, 32, 40],\n+      [32, 31, 25, 36, 42],\n+      [30, 11, 25, 38, 44],\n+      [33, 21, 24, 32, 41]\n+  ])\"});\n+\n+  std::string substrait_json = R\"({\n+  \"relations\": [{\n+    \"rel\": {\n+      \"join\": {\n+        \"common\": {\n+          \"emit\": {\n+            \"outputMapping\": [0, 2, 3, 4, 6, 7]\n+          }\n+        },\n+        \"left\": {\n+          \"project\": {\n+            \"common\": {\n+              \"emit\": {\n+                \"outputMapping\": [0, 1, 2, 5]\n+              }\n+            },\n+            \"expressions\": [{\n+              \"scalarFunction\": {\n+                \"functionReference\": 32,\n+                \"arguments\": [\n+                  {\n+                    \"enum\": {\n+                          \"specified\": \"ERROR\"\n+                    }\n+                  },\n+                  {\n+                    \"value\": {\n+                      \"selection\": {\n+                        \"directReference\": {\n+                          \"structField\": {\n+                            \"field\": 1\n+                          }\n+                        },\n+                        \"rootReference\": {\n+                        }\n+                      }\n+                    }\n+                  }, {\n+                    \"value\": {\n+                      \"selection\": {\n+                        \"directReference\": {\n+                          \"structField\": {\n+                            \"field\": 2\n+                          }\n+                        },\n+                        \"rootReference\": {\n+                        }\n+                      }\n+                    }\n+                  }\n+                ],\n+                \"output_type\": {\n+                  \"bool\": {}\n+                }\n+              }\n+            },\n+            ],\n+            \"input\" : {\n+              \"read\": {\n+                \"base_schema\": {\n+                  \"names\": [\"A\", \"B\", \"C\", \"D\", \"E\"],\n+                    \"struct\": {\n+                    \"types\": [{\n+                      \"i32\": {}\n+                    }, {\n+                      \"i32\": {}\n+                    }, {\n+                      \"i32\": {}\n+                    }, {\n+                      \"i32\": {}\n+                    }, {\n+                      \"i32\": {}\n+                    }]\n+                  }\n+                },\n+                \"namedTable\": {\n+                  \"names\": [\"left\"]\n+                }\n+              }\n+            }\n+          }\n+        },\n+        \"right\": {\n+          \"project\": {\n+            \"common\": {\n+              \"emit\": {\n+                \"outputMapping\": [0, 1, 2, 5]\n+              }\n+            },\n+            \"expressions\": [{\n+              \"scalarFunction\": {\n+                \"functionReference\": 32,\n+                \"arguments\": [\n+                  {\n+                    \"enum\": {\n+                          \"specified\": \"ERROR\"\n+                    }\n+                  },\n+                  {\n+                    \"value\": {\n+                      \"selection\": {\n+                        \"directReference\": {\n+                          \"structField\": {\n+                            \"field\": 1\n+                          }\n+                        },\n+                        \"rootReference\": {\n+                        }\n+                      }\n+                    }\n+                  }, {\n+                    \"value\": {\n+                      \"selection\": {\n+                        \"directReference\": {\n+                          \"structField\": {\n+                            \"field\": 2\n+                          }\n+                        },\n+                        \"rootReference\": {\n+                        }\n+                      }\n+                    }\n+                  }\n+                ],\n+                \"output_type\": {\n+                  \"bool\": {}\n+                }\n+              }\n+            },\n+            ],\n+            \"input\" : {\n+              \"read\": {\n+                \"base_schema\": {\n+                  \"names\": [\"X\", \"Y\", \"W\", \"V\", \"Z\"],\n+                    \"struct\": {\n+                    \"types\": [{\n+                      \"i32\": {}\n+                    }, {\n+                      \"i32\": {}\n+                    }, {\n+                      \"i32\": {}\n+                    }, {\n+                      \"i32\": {}\n+                    }, {\n+                      \"i32\": {}\n+                    }]\n+                  }\n+                },\n+                \"namedTable\": {\n+                  \"names\": [\"right\"]\n+                }\n+              }\n+            }\n+          }\n+        },\n+        \"expression\": {\n+          \"scalarFunction\": {\n+            \"functionReference\": 14,\n+            \"arguments\": [{\n+              \"value\": {\n+                \"selection\": {\n+                  \"directReference\": {\n+                    \"structField\": {\n+                      \"field\": 0\n+                    }\n+                  },\n+                  \"rootReference\": {\n+                  }\n+                }\n+              }\n+            }, {\n+              \"value\": {\n+                \"selection\": {\n+                  \"directReference\": {\n+                    \"structField\": {\n+                      \"field\": 4\n+                    }\n+                  },\n+                  \"rootReference\": {\n+                  }\n+                }\n+              }\n+            }],\n+            \"output_type\": {\n+              \"bool\": {}\n+            },\n+            \"overflow\" : {\n+              \"ERROR\": {}\n+            }\n+          }\n+        },\n+        \"type\": \"JOIN_TYPE_INNER\"\n+      }\n+    }\n+  }],\n+  \"extension_uris\": [\n+      {\n+        \"extension_uri_anchor\": 42,\n+        \"uri\": \")\" + std::string(kSubstraitComparisonFunctionsUri) +\n+                               R\"(\"\n+      },\n+      {\n+        \"extension_uri_anchor\": 72,\n+        \"uri\": \")\" + std::string(kSubstraitArithmeticFunctionsUri) +\n+                               R\"(\"\n+      }\n+    ],\n+    \"extensions\": [\n+      {\n+        \"extension_function\": {\n+          \"extension_uri_reference\": 42,\n+          \"function_anchor\": 14,\n+          \"name\": \"equal\"\n+        }\n+      },\n+      {\n+        \"extension_function\": {\n+          \"extension_uri_reference\": 72,\n+          \"function_anchor\": 32,\n+          \"name\": \"add\"\n+        }\n+      }\n+    ]\n+  })\";\n+\n+  ASSERT_OK_AND_ASSIGN(auto buf, internal::SubstraitFromJSON(\"Plan\", substrait_json));\n+  auto output_schema = schema({\n+      field(\"A\", int32()),\n+      field(\"E\", int32()),\n+      field(\"B+C\", int32()),\n+      field(\"X\", int32()),\n+      field(\"Z\", int32()),\n\nReview Comment:\n   ```suggestion\r\n         field(\"W\", int32()),\r\n   ```\n\n\n\n##########\ncpp/src/arrow/engine/substrait/test_util.h:\n##########\n@@ -0,0 +1,118 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+// These utilities are for internal / unit test use only.\n+// They allow for the construction of simple Substrait plans\n+// programmatically without first requiring the construction\n+// of an ExecPlan\n+\n+// These utilities have to be here, and not in a test_util.cc\n+// file (or in a unit test) because only one .so is allowed\n+// to include each .pb.h file or else protobuf will encounter\n+// global namespace conflicts.\n+\n+#include \"arrow/compute/exec/exec_plan.h\"\n+#include \"arrow/compute/exec/expression_internal.h\"\n+#include \"arrow/dataset/file_base.h\"\n+#include \"arrow/engine/substrait/util.h\"\n+#include \"arrow/table.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+\n+namespace arrow {\n+\n+namespace engine {\n+\n+class NullSinkNodeConsumer : public compute::SinkNodeConsumer {\n+ public:\n+  Status Init(const std::shared_ptr<Schema>&, compute::BackpressureControl*) override {\n+    return Status::OK();\n+  }\n+  Status Consume(compute::ExecBatch exec_batch) override { return Status::OK(); }\n+  Future<> Finish() override { return Status::OK(); }\n+\n+ public:\n+  static std::shared_ptr<NullSinkNodeConsumer> Make() {\n+    return std::make_shared<NullSinkNodeConsumer>();\n+  }\n+};\n+\n+const auto kNullConsumer = std::make_shared<NullSinkNodeConsumer>();\n+\n+const std::shared_ptr<Schema> kBoringSchema = schema({\n+    field(\"bool\", boolean()),\n+    field(\"i8\", int8()),\n+    field(\"i32\", int32()),\n+    field(\"i32_req\", int32(), /*nullable=*/false),\n+    field(\"u32\", uint32()),\n+    field(\"i64\", int64()),\n+    field(\"f32\", float32()),\n+    field(\"f32_req\", float32(), /*nullable=*/false),\n+    field(\"f64\", float64()),\n+    field(\"date64\", date64()),\n+    field(\"str\", utf8()),\n+    field(\"list_i32\", list(int32())),\n+    field(\"struct\", struct_({\n+                        field(\"i32\", int32()),\n+                        field(\"str\", utf8()),\n+                        field(\"struct_i32_str\",\n+                              struct_({field(\"i32\", int32()), field(\"str\", utf8())})),\n+                    })),\n+    field(\"list_struct\", list(struct_({\n+                             field(\"i32\", int32()),\n+                             field(\"str\", utf8()),\n+                             field(\"struct_i32_str\", struct_({field(\"i32\", int32()),\n+                                                              field(\"str\", utf8())})),\n+                         }))),\n+    field(\"dict_str\", dictionary(int32(), utf8())),\n+    field(\"dict_i32\", dictionary(int32(), int32())),\n+    field(\"ts_ns\", timestamp(TimeUnit::NANO)),\n+});\n+\n+ARROW_ENGINE_EXPORT std::shared_ptr<DataType> StripFieldNames(\n+    std::shared_ptr<DataType> type);\n+\n+inline compute::Expression UseBoringRefs(const compute::Expression& expr) {\n+  if (expr.literal()) return expr;\n+\n+  if (auto ref = expr.field_ref()) {\n+    return compute::field_ref(*ref->FindOne(*kBoringSchema));\n+  }\n+\n+  auto modified_call = *CallNotNull(expr);\n+  for (auto& arg : modified_call.arguments) {\n+    arg = UseBoringRefs(arg);\n+  }\n+  return compute::Expression{std::move(modified_call)};\n+}\n\nReview Comment:\n   Why did these two methods have to move to a header file?\n\n\n\n",
                    "created": "2022-11-15T05:59:22.314+0000",
                    "updated": "2022-11-15T05:59:22.314+0000",
                    "started": "2022-11-15T05:59:22.314+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "825982",
                    "issueId": "13477868"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13477868/worklog/825983",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on code in PR #14174:\nURL: https://github.com/apache/arrow/pull/14174#discussion_r1022350631\n\n\n##########\ncpp/src/arrow/engine/substrait/test_util.h:\n##########\n@@ -0,0 +1,118 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+// These utilities are for internal / unit test use only.\n+// They allow for the construction of simple Substrait plans\n+// programmatically without first requiring the construction\n+// of an ExecPlan\n+\n+// These utilities have to be here, and not in a test_util.cc\n+// file (or in a unit test) because only one .so is allowed\n+// to include each .pb.h file or else protobuf will encounter\n+// global namespace conflicts.\n+\n+#include \"arrow/compute/exec/exec_plan.h\"\n+#include \"arrow/compute/exec/expression_internal.h\"\n+#include \"arrow/dataset/file_base.h\"\n+#include \"arrow/engine/substrait/util.h\"\n+#include \"arrow/table.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+\n+namespace arrow {\n+\n+namespace engine {\n+\n+class NullSinkNodeConsumer : public compute::SinkNodeConsumer {\n+ public:\n+  Status Init(const std::shared_ptr<Schema>&, compute::BackpressureControl*) override {\n+    return Status::OK();\n+  }\n+  Status Consume(compute::ExecBatch exec_batch) override { return Status::OK(); }\n+  Future<> Finish() override { return Status::OK(); }\n+\n+ public:\n+  static std::shared_ptr<NullSinkNodeConsumer> Make() {\n+    return std::make_shared<NullSinkNodeConsumer>();\n+  }\n+};\n+\n+const auto kNullConsumer = std::make_shared<NullSinkNodeConsumer>();\n+\n+const std::shared_ptr<Schema> kBoringSchema = schema({\n+    field(\"bool\", boolean()),\n+    field(\"i8\", int8()),\n+    field(\"i32\", int32()),\n+    field(\"i32_req\", int32(), /*nullable=*/false),\n+    field(\"u32\", uint32()),\n+    field(\"i64\", int64()),\n+    field(\"f32\", float32()),\n+    field(\"f32_req\", float32(), /*nullable=*/false),\n+    field(\"f64\", float64()),\n+    field(\"date64\", date64()),\n+    field(\"str\", utf8()),\n+    field(\"list_i32\", list(int32())),\n+    field(\"struct\", struct_({\n+                        field(\"i32\", int32()),\n+                        field(\"str\", utf8()),\n+                        field(\"struct_i32_str\",\n+                              struct_({field(\"i32\", int32()), field(\"str\", utf8())})),\n+                    })),\n+    field(\"list_struct\", list(struct_({\n+                             field(\"i32\", int32()),\n+                             field(\"str\", utf8()),\n+                             field(\"struct_i32_str\", struct_({field(\"i32\", int32()),\n+                                                              field(\"str\", utf8())})),\n+                         }))),\n+    field(\"dict_str\", dictionary(int32(), utf8())),\n+    field(\"dict_i32\", dictionary(int32(), int32())),\n+    field(\"ts_ns\", timestamp(TimeUnit::NANO)),\n+});\n+\n+ARROW_ENGINE_EXPORT std::shared_ptr<DataType> StripFieldNames(\n+    std::shared_ptr<DataType> type);\n+\n+inline compute::Expression UseBoringRefs(const compute::Expression& expr) {\n+  if (expr.literal()) return expr;\n+\n+  if (auto ref = expr.field_ref()) {\n+    return compute::field_ref(*ref->FindOne(*kBoringSchema));\n+  }\n+\n+  auto modified_call = *CallNotNull(expr);\n+  for (auto& arg : modified_call.arguments) {\n+    arg = UseBoringRefs(arg);\n+  }\n+  return compute::Expression{std::move(modified_call)};\n+}\n\nReview Comment:\n   I assumed util. This is the move which causes the windows build failure. \n\n\n\n",
                    "created": "2022-11-15T06:01:17.449+0000",
                    "updated": "2022-11-15T06:01:17.449+0000",
                    "started": "2022-11-15T06:01:17.448+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "825983",
                    "issueId": "13477868"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13477868/worklog/826403",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on code in PR #14174:\nURL: https://github.com/apache/arrow/pull/14174#discussion_r1023522551\n\n\n##########\ncpp/src/arrow/engine/substrait/test_util.h:\n##########\n@@ -0,0 +1,118 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+// These utilities are for internal / unit test use only.\n+// They allow for the construction of simple Substrait plans\n+// programmatically without first requiring the construction\n+// of an ExecPlan\n+\n+// These utilities have to be here, and not in a test_util.cc\n+// file (or in a unit test) because only one .so is allowed\n+// to include each .pb.h file or else protobuf will encounter\n+// global namespace conflicts.\n+\n+#include \"arrow/compute/exec/exec_plan.h\"\n+#include \"arrow/compute/exec/expression_internal.h\"\n+#include \"arrow/dataset/file_base.h\"\n+#include \"arrow/engine/substrait/util.h\"\n+#include \"arrow/table.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+\n+namespace arrow {\n+\n+namespace engine {\n+\n+class NullSinkNodeConsumer : public compute::SinkNodeConsumer {\n+ public:\n+  Status Init(const std::shared_ptr<Schema>&, compute::BackpressureControl*) override {\n+    return Status::OK();\n+  }\n+  Status Consume(compute::ExecBatch exec_batch) override { return Status::OK(); }\n+  Future<> Finish() override { return Status::OK(); }\n+\n+ public:\n+  static std::shared_ptr<NullSinkNodeConsumer> Make() {\n+    return std::make_shared<NullSinkNodeConsumer>();\n+  }\n+};\n+\n+const auto kNullConsumer = std::make_shared<NullSinkNodeConsumer>();\n+\n+const std::shared_ptr<Schema> kBoringSchema = schema({\n+    field(\"bool\", boolean()),\n+    field(\"i8\", int8()),\n+    field(\"i32\", int32()),\n+    field(\"i32_req\", int32(), /*nullable=*/false),\n+    field(\"u32\", uint32()),\n+    field(\"i64\", int64()),\n+    field(\"f32\", float32()),\n+    field(\"f32_req\", float32(), /*nullable=*/false),\n+    field(\"f64\", float64()),\n+    field(\"date64\", date64()),\n+    field(\"str\", utf8()),\n+    field(\"list_i32\", list(int32())),\n+    field(\"struct\", struct_({\n+                        field(\"i32\", int32()),\n+                        field(\"str\", utf8()),\n+                        field(\"struct_i32_str\",\n+                              struct_({field(\"i32\", int32()), field(\"str\", utf8())})),\n+                    })),\n+    field(\"list_struct\", list(struct_({\n+                             field(\"i32\", int32()),\n+                             field(\"str\", utf8()),\n+                             field(\"struct_i32_str\", struct_({field(\"i32\", int32()),\n+                                                              field(\"str\", utf8())})),\n+                         }))),\n+    field(\"dict_str\", dictionary(int32(), utf8())),\n+    field(\"dict_i32\", dictionary(int32(), int32())),\n+    field(\"ts_ns\", timestamp(TimeUnit::NANO)),\n+});\n+\n+ARROW_ENGINE_EXPORT std::shared_ptr<DataType> StripFieldNames(\n+    std::shared_ptr<DataType> type);\n+\n+inline compute::Expression UseBoringRefs(const compute::Expression& expr) {\n+  if (expr.literal()) return expr;\n+\n+  if (auto ref = expr.field_ref()) {\n+    return compute::field_ref(*ref->FindOne(*kBoringSchema));\n+  }\n+\n+  auto modified_call = *CallNotNull(expr);\n+  for (auto& arg : modified_call.arguments) {\n+    arg = UseBoringRefs(arg);\n+  }\n+  return compute::Expression{std::move(modified_call)};\n+}\n\nReview Comment:\n   I undo the move.\n\n\n\n",
                    "created": "2022-11-16T05:34:19.014+0000",
                    "updated": "2022-11-16T05:34:19.014+0000",
                    "started": "2022-11-16T05:34:19.014+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "826403",
                    "issueId": "13477868"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
            "id": "7",
            "description": "The sub-task of the issue",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
            "name": "Sub-task",
            "subtask": true,
            "avatarId": 21146
        },
        "timespent": 6600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@7ad339b6[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@27d713fb[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@37c2bae7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@28952f2f[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2fd342d5[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@2fb0d2f[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@204c9a15[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@21a13564[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@14d10e6f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@4e99ebaf[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@ac15c5b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@22634272[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 6600,
        "customfield_12312520": null,
        "customfield_12312521": "2022-08-22 01:47:16.0",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": null,
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-17486/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2022-08-22T01:47:16.000+0000",
        "updated": "2022-11-16T05:34:19.000+0000",
        "timeoriginalestimate": null,
        "description": "At the moment, the emit feature is tested with respect to each relation. It can be further tested with the combination of other relations. https://issues.apache.org/jira/browse/ARROW-15584\u00a0contains the basic tests. Since this PR is already a bit lengthy one, decided to include the rest of the effort as a sub-task to the parent task which covers Substrait end-to-end tests.\u00a0",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "1h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 6600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Substrait To Arrow Emit feature testing",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [],
            "maxResults": 0,
            "total": 0,
            "startAt": 0
        },
        "customfield_12311820": "0|z17xqg:",
        "customfield_12314139": null
    }
}