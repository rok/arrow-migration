{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13358550",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13358550",
    "key": "ARROW-11627",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12349493",
                "id": "12349493",
                "description": "",
                "name": "4.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-04-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorgecarleitao",
            "name": "jorgecarleitao",
            "key": "jorgecarleitao",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=jorgecarleitao&avatarId=43827",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jorgecarleitao&avatarId=43827",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jorgecarleitao&avatarId=43827",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jorgecarleitao&avatarId=43827"
            },
            "displayName": "Jorge Leit\u00e3o",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333773",
                "id": "12333773",
                "name": "Rust"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorgecarleitao",
            "name": "jorgecarleitao",
            "key": "jorgecarleitao",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=jorgecarleitao&avatarId=43827",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jorgecarleitao&avatarId=43827",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jorgecarleitao&avatarId=43827",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jorgecarleitao&avatarId=43827"
            },
            "displayName": "Jorge Leit\u00e3o",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorgecarleitao",
            "name": "jorgecarleitao",
            "key": "jorgecarleitao",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=jorgecarleitao&avatarId=43827",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jorgecarleitao&avatarId=43827",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jorgecarleitao&avatarId=43827",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jorgecarleitao&avatarId=43827"
            },
            "displayName": "Jorge Leit\u00e3o",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 16200,
            "total": 16200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 16200,
            "total": 16200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-11627/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 27,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13358550/worklog/552381",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #9495:\nURL: https://github.com/apache/arrow/pull/9495#issuecomment-778806991\n\n\n   https://issues.apache.org/jira/browse/ARROW-11627\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-14T17:07:45.726+0000",
                    "updated": "2021-02-14T17:07:45.726+0000",
                    "started": "2021-02-14T17:07:45.725+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "552381",
                    "issueId": "13358550"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13358550/worklog/552384",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] removed a comment on pull request #9495:\nURL: https://github.com/apache/arrow/pull/9495#issuecomment-778806859\n\n\n   <!--\n     Licensed to the Apache Software Foundation (ASF) under one\n     or more contributor license agreements.  See the NOTICE file\n     distributed with this work for additional information\n     regarding copyright ownership.  The ASF licenses this file\n     to you under the Apache License, Version 2.0 (the\n     \"License\"); you may not use this file except in compliance\n     with the License.  You may obtain a copy of the License at\n   \n       http://www.apache.org/licenses/LICENSE-2.0\n   \n     Unless required by applicable law or agreed to in writing,\n     software distributed under the License is distributed on an\n     \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n     KIND, either express or implied.  See the License for the\n     specific language governing permissions and limitations\n     under the License.\n   -->\n   \n   Thanks for opening a pull request!\n   \n   Could you open an issue for this pull request on JIRA?\n   https://issues.apache.org/jira/browse/ARROW\n   \n   Then could you also rename pull request title in the following format?\n   \n       ARROW-${JIRA_ID}: [${COMPONENT}] ${SUMMARY}\n   \n   See also:\n   \n     * [Other pull requests](https://github.com/apache/arrow/pulls/)\n     * [Contribution Guidelines - How to contribute patches](https://arrow.apache.org/docs/developers/contributing.html#how-to-contribute-patches)\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-14T17:40:11.063+0000",
                    "updated": "2021-02-14T17:40:11.063+0000",
                    "started": "2021-02-14T17:40:11.063+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "552384",
                    "issueId": "13358550"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13358550/worklog/552385",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on pull request #9495:\nURL: https://github.com/apache/arrow/pull/9495#issuecomment-778812032\n\n\n   cc: @sunchao @nevi-me @pitrou @andygrove @alamb, this is a core change to the arrow crate, as it will enable us to allocate memory regions without losing the type information about what they contain. I would appreciate to know if someone sees an issue here.\r\n   \r\n   The general direction is stop transmuting byte buffers, which have caused us too many bugs and is `unsafe`, and instead use a type system on them.\r\n   \r\n   AFAIK, this is will also enable us to support multiple endianess, but we are some PRs away from it. For now, we just stick to little endianess (AFAIK we do not support big atm), where at least we make it explicit.\r\n   \r\n   cc @maxburke , since you depend on the `memory` module of this crate.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-14T17:41:34.017+0000",
                    "updated": "2021-02-14T17:41:34.017+0000",
                    "started": "2021-02-14T17:41:34.016+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "552385",
                    "issueId": "13358550"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13358550/worklog/552390",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on pull request #9495:\nURL: https://github.com/apache/arrow/pull/9495#issuecomment-778814192\n\n\n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/9495?src=pr&el=h1) Report\n   > Merging [#9495](https://codecov.io/gh/apache/arrow/pull/9495?src=pr&el=desc) (a15c5b1) into [master](https://codecov.io/gh/apache/arrow/commit/8547c616dcc7c3ee51f174d118c81b38847974af?el=desc) (8547c61) will **decrease** coverage by `0.06%`.\n   > The diff coverage is `51.45%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/9495/graphs/tree.svg?width=650&height=150&src=pr&token=LpTCFbqVT1)](https://codecov.io/gh/apache/arrow/pull/9495?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #9495      +/-   ##\n   ==========================================\n   - Coverage   82.12%   82.05%   -0.07%     \n   ==========================================\n     Files         235      236       +1     \n     Lines       54729    54774      +45     \n   ==========================================\n     Hits        44944    44944              \n   - Misses       9785     9830      +45     \n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/9495?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [rust/arrow/src/alloc/types.rs](https://codecov.io/gh/apache/arrow/pull/9495/diff?src=pr&el=tree#diff-cnVzdC9hcnJvdy9zcmMvYWxsb2MvdHlwZXMucnM=) | `0.00% <0.00%> (\u00f8)` | |\n   | [rust/arrow/src/alloc/mod.rs](https://codecov.io/gh/apache/arrow/pull/9495/diff?src=pr&el=tree#diff-cnVzdC9hcnJvdy9zcmMvYWxsb2MvbW9kLnJz) | `92.68% <92.68%> (\u00f8)` | |\n   | [rust/arrow/src/array/array\\_list.rs](https://codecov.io/gh/apache/arrow/pull/9495/diff?src=pr&el=tree#diff-cnVzdC9hcnJvdy9zcmMvYXJyYXkvYXJyYXlfbGlzdC5ycw==) | `93.40% <100.00%> (\u00f8)` | |\n   | [rust/arrow/src/array/raw\\_pointer.rs](https://codecov.io/gh/apache/arrow/pull/9495/diff?src=pr&el=tree#diff-cnVzdC9hcnJvdy9zcmMvYXJyYXkvcmF3X3BvaW50ZXIucnM=) | `100.00% <100.00%> (\u00f8)` | |\n   | [rust/arrow/src/buffer.rs](https://codecov.io/gh/apache/arrow/pull/9495/diff?src=pr&el=tree#diff-cnVzdC9hcnJvdy9zcmMvYnVmZmVyLnJz) | `95.62% <100.00%> (+0.35%)` | :arrow_up: |\n   | [rust/arrow/src/bytes.rs](https://codecov.io/gh/apache/arrow/pull/9495/diff?src=pr&el=tree#diff-cnVzdC9hcnJvdy9zcmMvYnl0ZXMucnM=) | `53.12% <100.00%> (\u00f8)` | |\n   | [rust/parquet/src/encodings/encoding.rs](https://codecov.io/gh/apache/arrow/pull/9495/diff?src=pr&el=tree#diff-cnVzdC9wYXJxdWV0L3NyYy9lbmNvZGluZ3MvZW5jb2RpbmcucnM=) | `94.86% <0.00%> (-0.20%)` | :arrow_down: |\n   | [rust/arrow/src/array/transform/fixed\\_binary.rs](https://codecov.io/gh/apache/arrow/pull/9495/diff?src=pr&el=tree#diff-cnVzdC9hcnJvdy9zcmMvYXJyYXkvdHJhbnNmb3JtL2ZpeGVkX2JpbmFyeS5ycw==) | `84.21% <0.00%> (+5.26%)` | :arrow_up: |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/9495?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/9495?src=pr&el=footer). Last update [8547c61...8ac48f4](https://codecov.io/gh/apache/arrow/pull/9495?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-14T17:55:45.439+0000",
                    "updated": "2021-02-14T17:55:45.439+0000",
                    "started": "2021-02-14T17:55:45.438+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "552390",
                    "issueId": "13358550"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13358550/worklog/552499",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao edited a comment on pull request #9495:\nURL: https://github.com/apache/arrow/pull/9495#issuecomment-778812032\n\n\n   cc: @sunchao @nevi-me @pitrou @andygrove @alamb, this is a core change to the arrow crate, as it will enable us to allocate memory regions without losing the type information about what they contain. I would appreciate to know if someone sees an issue here.\r\n   \r\n   The general direction is stop transmuting byte buffers, which have caused us too many bugs and is `unsafe`, and instead use Rust's type system on them.\r\n   \r\n   AFAIK, this is will also enable us to support multiple endianess, but we are some PRs away from it. For now, we just stick to little endianess (AFAIK we do not support big atm), where at least we make it explicit.\r\n   \r\n   cc @maxburke , since you depend on the `memory` module of this crate.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-15T09:48:19.824+0000",
                    "updated": "2021-02-15T09:48:19.824+0000",
                    "started": "2021-02-15T09:48:19.824+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "552499",
                    "issueId": "13358550"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13358550/worklog/552694",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on a change in pull request #9495:\nURL: https://github.com/apache/arrow/pull/9495#discussion_r576397354\n\n\n\n##########\nFile path: rust/arrow/src/alloc/alignment.rs\n##########\n@@ -0,0 +1,119 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+// NOTE: Below code is written for spatial/temporal prefetcher optimizations. Memory allocation\n\nReview comment:\n       FWIW I know you didn't introduce this comment in this PR (it just moved) but I find this comment more confusing than enlightening. \n\n##########\nFile path: rust/arrow/src/alloc/mod.rs\n##########\n@@ -0,0 +1,136 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Defines memory-related functions, such as allocate/deallocate/reallocate memory\n+//! regions, cache and allocation alignments.\n+\n+use std::mem::size_of;\n+use std::ptr::NonNull;\n+use std::{\n+    alloc::{handle_alloc_error, Layout},\n+    sync::atomic::AtomicIsize,\n+};\n+\n+mod alignment;\n+mod types;\n+\n+pub use alignment::ALIGNMENT;\n+pub use types::NativeType;\n+\n+// If this number is not zero after all objects have been `drop`, there is a memory leak\n+pub static mut ALLOCATIONS: AtomicIsize = AtomicIsize::new(0);\n+\n+#[inline]\n+unsafe fn null_pointer<T: NativeType>() -> NonNull<T> {\n+    NonNull::new_unchecked(ALIGNMENT as *mut T)\n+}\n+\n+/// Allocates a cache-aligned memory region of `size` bytes with uninitialized values.\n+/// This is more performant than using [allocate_aligned_zeroed] when all bytes will have\n+/// an unknown or non-zero value and is semantically similar to `malloc`.\n+pub fn allocate_aligned<T: NativeType>(size: usize) -> NonNull<T> {\n+    unsafe {\n+        if size == 0 {\n+            null_pointer()\n+        } else {\n+            let size = size * size_of::<T>();\n+            ALLOCATIONS.fetch_add(size as isize, std::sync::atomic::Ordering::SeqCst);\n+\n+            let layout = Layout::from_size_align_unchecked(size, ALIGNMENT);\n+            let raw_ptr = std::alloc::alloc(layout) as *mut T;\n+            NonNull::new(raw_ptr).unwrap_or_else(|| handle_alloc_error(layout))\n+        }\n+    }\n+}\n+\n+/// Allocates a cache-aligned memory region of `size` bytes with `0` on all of them.\n+/// This is more performant than using [allocate_aligned] and setting all bytes to zero\n+/// and is semantically similar to `calloc`.\n+pub fn allocate_aligned_zeroed<T: NativeType>(size: usize) -> NonNull<T> {\n+    unsafe {\n+        if size == 0 {\n+            null_pointer()\n+        } else {\n+            let size = size * size_of::<T>();\n+            ALLOCATIONS.fetch_add(size as isize, std::sync::atomic::Ordering::SeqCst);\n+\n+            let layout = Layout::from_size_align_unchecked(size, ALIGNMENT);\n+            let raw_ptr = std::alloc::alloc_zeroed(layout) as *mut T;\n+            NonNull::new(raw_ptr).unwrap_or_else(|| handle_alloc_error(layout))\n+        }\n+    }\n+}\n+\n+/// # Safety\n+///\n+/// This function is unsafe because undefined behavior can result if the caller does not ensure all\n+/// of the following:\n+///\n+/// * ptr must denote a block of memory currently allocated via this allocator,\n+///\n+/// * size must be the same size that was used to allocate that block of memory,\n+pub unsafe fn free_aligned<T: NativeType>(ptr: NonNull<T>, size: usize) {\n+    if ptr != null_pointer() {\n+        let size = size * size_of::<T>();\n+        ALLOCATIONS.fetch_sub(size as isize, std::sync::atomic::Ordering::SeqCst);\n+        std::alloc::dealloc(\n+            ptr.as_ptr() as *mut u8,\n+            Layout::from_size_align_unchecked(size, ALIGNMENT),\n+        );\n+    }\n+}\n+\n+/// # Safety\n+///\n+/// This function is unsafe because undefined behavior can result if the caller does not ensure all\n+/// of the following:\n+///\n+/// * ptr must be currently allocated via this allocator,\n\nReview comment:\n       ```suggestion\r\n   ///  ptr must denote a block of memory previously returned from `allocate_aligned` or\r\n   /// `allocate_aligned_zeroed`\r\n   ```\n\n##########\nFile path: rust/arrow/src/alloc/types.rs\n##########\n@@ -0,0 +1,166 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+use crate::datatypes::DataType;\n+\n+/// A type that Rust's custom allocator knows how to allocate and deallocate.\n+/// This is implemented for all Arrow's physical types whose in-memory representation\n+/// matches Rust's physical types. Consider this trait sealed.\n+/// # Safety\n+/// Do not implement this trait.\n+pub unsafe trait NativeType:\n+    Sized + Copy + std::fmt::Debug + std::fmt::Display + PartialEq + Default + Sized + 'static\n+{\n+    type Bytes: AsRef<[u8]>;\n+\n+    /// Whether a DataType is a valid type for this physical representation.\n\nReview comment:\n       ```suggestion\r\n       /// Whether an array element of `data_type` can be stored using this `NativeType` as\r\n       /// its physical representation. For example, `i32` stores `DataType::Int32` as well as \r\n       /// `DataType::Date32`\r\n   ```\n\n##########\nFile path: rust/arrow/src/alloc/mod.rs\n##########\n@@ -0,0 +1,136 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Defines memory-related functions, such as allocate/deallocate/reallocate memory\n+//! regions, cache and allocation alignments.\n+\n+use std::mem::size_of;\n+use std::ptr::NonNull;\n+use std::{\n+    alloc::{handle_alloc_error, Layout},\n+    sync::atomic::AtomicIsize,\n+};\n+\n+mod alignment;\n+mod types;\n+\n+pub use alignment::ALIGNMENT;\n+pub use types::NativeType;\n+\n+// If this number is not zero after all objects have been `drop`, there is a memory leak\n+pub static mut ALLOCATIONS: AtomicIsize = AtomicIsize::new(0);\n+\n+#[inline]\n+unsafe fn null_pointer<T: NativeType>() -> NonNull<T> {\n+    NonNull::new_unchecked(ALIGNMENT as *mut T)\n+}\n+\n+/// Allocates a cache-aligned memory region of `size` bytes with uninitialized values.\n+/// This is more performant than using [allocate_aligned_zeroed] when all bytes will have\n+/// an unknown or non-zero value and is semantically similar to `malloc`.\n+pub fn allocate_aligned<T: NativeType>(size: usize) -> NonNull<T> {\n+    unsafe {\n+        if size == 0 {\n+            null_pointer()\n+        } else {\n+            let size = size * size_of::<T>();\n+            ALLOCATIONS.fetch_add(size as isize, std::sync::atomic::Ordering::SeqCst);\n+\n+            let layout = Layout::from_size_align_unchecked(size, ALIGNMENT);\n+            let raw_ptr = std::alloc::alloc(layout) as *mut T;\n+            NonNull::new(raw_ptr).unwrap_or_else(|| handle_alloc_error(layout))\n+        }\n+    }\n+}\n+\n+/// Allocates a cache-aligned memory region of `size` bytes with `0` on all of them.\n+/// This is more performant than using [allocate_aligned] and setting all bytes to zero\n+/// and is semantically similar to `calloc`.\n+pub fn allocate_aligned_zeroed<T: NativeType>(size: usize) -> NonNull<T> {\n+    unsafe {\n+        if size == 0 {\n+            null_pointer()\n+        } else {\n+            let size = size * size_of::<T>();\n+            ALLOCATIONS.fetch_add(size as isize, std::sync::atomic::Ordering::SeqCst);\n+\n+            let layout = Layout::from_size_align_unchecked(size, ALIGNMENT);\n+            let raw_ptr = std::alloc::alloc_zeroed(layout) as *mut T;\n+            NonNull::new(raw_ptr).unwrap_or_else(|| handle_alloc_error(layout))\n+        }\n+    }\n+}\n+\n+/// # Safety\n+///\n+/// This function is unsafe because undefined behavior can result if the caller does not ensure all\n+/// of the following:\n+///\n+/// * ptr must denote a block of memory currently allocated via this allocator,\n+///\n+/// * size must be the same size that was used to allocate that block of memory,\n+pub unsafe fn free_aligned<T: NativeType>(ptr: NonNull<T>, size: usize) {\n+    if ptr != null_pointer() {\n+        let size = size * size_of::<T>();\n+        ALLOCATIONS.fetch_sub(size as isize, std::sync::atomic::Ordering::SeqCst);\n+        std::alloc::dealloc(\n+            ptr.as_ptr() as *mut u8,\n+            Layout::from_size_align_unchecked(size, ALIGNMENT),\n+        );\n+    }\n+}\n+\n+/// # Safety\n+///\n+/// This function is unsafe because undefined behavior can result if the caller does not ensure all\n+/// of the following:\n+///\n+/// * ptr must be currently allocated via this allocator,\n+///\n+/// * new_size must be greater than zero.\n+///\n+/// * new_size, when rounded up to the nearest multiple of [ALIGNMENT], must not overflow (i.e.,\n\nReview comment:\n       If your allocation size is even anywhere near overflowing a 64-bit  `usize` you are likely going to have problems \ud83d\ude06 \n\n##########\nFile path: rust/arrow/src/alloc/types.rs\n##########\n@@ -0,0 +1,166 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+use crate::datatypes::DataType;\n+\n+/// A type that Rust's custom allocator knows how to allocate and deallocate.\n+/// This is implemented for all Arrow's physical types whose in-memory representation\n+/// matches Rust's physical types. Consider this trait sealed.\n+/// # Safety\n+/// Do not implement this trait.\n\nReview comment:\n       \ud83d\udc4d \n\n##########\nFile path: rust/arrow/src/alloc/mod.rs\n##########\n@@ -0,0 +1,136 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Defines memory-related functions, such as allocate/deallocate/reallocate memory\n+//! regions, cache and allocation alignments.\n+\n+use std::mem::size_of;\n+use std::ptr::NonNull;\n+use std::{\n+    alloc::{handle_alloc_error, Layout},\n+    sync::atomic::AtomicIsize,\n+};\n+\n+mod alignment;\n+mod types;\n+\n+pub use alignment::ALIGNMENT;\n+pub use types::NativeType;\n+\n+// If this number is not zero after all objects have been `drop`, there is a memory leak\n+pub static mut ALLOCATIONS: AtomicIsize = AtomicIsize::new(0);\n+\n+#[inline]\n+unsafe fn null_pointer<T: NativeType>() -> NonNull<T> {\n+    NonNull::new_unchecked(ALIGNMENT as *mut T)\n+}\n+\n+/// Allocates a cache-aligned memory region of `size` bytes with uninitialized values.\n+/// This is more performant than using [allocate_aligned_zeroed] when all bytes will have\n+/// an unknown or non-zero value and is semantically similar to `malloc`.\n+pub fn allocate_aligned<T: NativeType>(size: usize) -> NonNull<T> {\n+    unsafe {\n+        if size == 0 {\n+            null_pointer()\n+        } else {\n+            let size = size * size_of::<T>();\n+            ALLOCATIONS.fetch_add(size as isize, std::sync::atomic::Ordering::SeqCst);\n+\n+            let layout = Layout::from_size_align_unchecked(size, ALIGNMENT);\n+            let raw_ptr = std::alloc::alloc(layout) as *mut T;\n+            NonNull::new(raw_ptr).unwrap_or_else(|| handle_alloc_error(layout))\n+        }\n+    }\n+}\n+\n+/// Allocates a cache-aligned memory region of `size` bytes with `0` on all of them.\n+/// This is more performant than using [allocate_aligned] and setting all bytes to zero\n+/// and is semantically similar to `calloc`.\n+pub fn allocate_aligned_zeroed<T: NativeType>(size: usize) -> NonNull<T> {\n+    unsafe {\n+        if size == 0 {\n+            null_pointer()\n+        } else {\n+            let size = size * size_of::<T>();\n+            ALLOCATIONS.fetch_add(size as isize, std::sync::atomic::Ordering::SeqCst);\n+\n+            let layout = Layout::from_size_align_unchecked(size, ALIGNMENT);\n+            let raw_ptr = std::alloc::alloc_zeroed(layout) as *mut T;\n+            NonNull::new(raw_ptr).unwrap_or_else(|| handle_alloc_error(layout))\n+        }\n+    }\n+}\n+\n+/// # Safety\n+///\n+/// This function is unsafe because undefined behavior can result if the caller does not ensure all\n+/// of the following:\n+///\n+/// * ptr must denote a block of memory currently allocated via this allocator,\n\nReview comment:\n       ```suggestion\r\n   /// * ptr must denote a block of memory previously returned from `allocate_aligned` or\r\n   /// `allocate_aligned_zeroed`\r\n   ```\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-15T20:07:50.518+0000",
                    "updated": "2021-02-15T20:07:50.518+0000",
                    "started": "2021-02-15T20:07:50.518+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "552694",
                    "issueId": "13358550"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13358550/worklog/552801",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #9495:\nURL: https://github.com/apache/arrow/pull/9495#discussion_r576535311\n\n\n\n##########\nFile path: rust/arrow/src/alloc/mod.rs\n##########\n@@ -0,0 +1,136 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Defines memory-related functions, such as allocate/deallocate/reallocate memory\n+//! regions, cache and allocation alignments.\n+\n+use std::mem::size_of;\n+use std::ptr::NonNull;\n+use std::{\n+    alloc::{handle_alloc_error, Layout},\n+    sync::atomic::AtomicIsize,\n+};\n+\n+mod alignment;\n+mod types;\n+\n+pub use alignment::ALIGNMENT;\n+pub use types::NativeType;\n+\n+// If this number is not zero after all objects have been `drop`, there is a memory leak\n+pub static mut ALLOCATIONS: AtomicIsize = AtomicIsize::new(0);\n+\n+#[inline]\n+unsafe fn null_pointer<T: NativeType>() -> NonNull<T> {\n+    NonNull::new_unchecked(ALIGNMENT as *mut T)\n+}\n+\n+/// Allocates a cache-aligned memory region of `size` bytes with uninitialized values.\n+/// This is more performant than using [allocate_aligned_zeroed] when all bytes will have\n+/// an unknown or non-zero value and is semantically similar to `malloc`.\n+pub fn allocate_aligned<T: NativeType>(size: usize) -> NonNull<T> {\n+    unsafe {\n+        if size == 0 {\n+            null_pointer()\n+        } else {\n+            let size = size * size_of::<T>();\n+            ALLOCATIONS.fetch_add(size as isize, std::sync::atomic::Ordering::SeqCst);\n+\n+            let layout = Layout::from_size_align_unchecked(size, ALIGNMENT);\n+            let raw_ptr = std::alloc::alloc(layout) as *mut T;\n+            NonNull::new(raw_ptr).unwrap_or_else(|| handle_alloc_error(layout))\n+        }\n+    }\n+}\n+\n+/// Allocates a cache-aligned memory region of `size` bytes with `0` on all of them.\n+/// This is more performant than using [allocate_aligned] and setting all bytes to zero\n+/// and is semantically similar to `calloc`.\n+pub fn allocate_aligned_zeroed<T: NativeType>(size: usize) -> NonNull<T> {\n+    unsafe {\n+        if size == 0 {\n+            null_pointer()\n+        } else {\n+            let size = size * size_of::<T>();\n+            ALLOCATIONS.fetch_add(size as isize, std::sync::atomic::Ordering::SeqCst);\n+\n+            let layout = Layout::from_size_align_unchecked(size, ALIGNMENT);\n+            let raw_ptr = std::alloc::alloc_zeroed(layout) as *mut T;\n+            NonNull::new(raw_ptr).unwrap_or_else(|| handle_alloc_error(layout))\n+        }\n+    }\n+}\n+\n+/// # Safety\n+///\n+/// This function is unsafe because undefined behavior can result if the caller does not ensure all\n+/// of the following:\n+///\n+/// * ptr must denote a block of memory currently allocated via this allocator,\n+///\n+/// * size must be the same size that was used to allocate that block of memory,\n+pub unsafe fn free_aligned<T: NativeType>(ptr: NonNull<T>, size: usize) {\n+    if ptr != null_pointer() {\n+        let size = size * size_of::<T>();\n+        ALLOCATIONS.fetch_sub(size as isize, std::sync::atomic::Ordering::SeqCst);\n+        std::alloc::dealloc(\n+            ptr.as_ptr() as *mut u8,\n+            Layout::from_size_align_unchecked(size, ALIGNMENT),\n+        );\n+    }\n+}\n+\n+/// # Safety\n+///\n+/// This function is unsafe because undefined behavior can result if the caller does not ensure all\n+/// of the following:\n+///\n+/// * ptr must be currently allocated via this allocator,\n+///\n+/// * new_size must be greater than zero.\n+///\n+/// * new_size, when rounded up to the nearest multiple of [ALIGNMENT], must not overflow (i.e.,\n\nReview comment:\n       I agree. I do think that this comment applies mostly to 32 bit systems where `usize = u32`.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-16T04:01:34.103+0000",
                    "updated": "2021-02-16T04:01:34.103+0000",
                    "started": "2021-02-16T04:01:34.102+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "552801",
                    "issueId": "13358550"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13358550/worklog/553167",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on pull request #9495:\nURL: https://github.com/apache/arrow/pull/9495#issuecomment-780076226\n\n\n   Any thoughts @nevi-me  or @maxburke ?\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-16T19:47:02.286+0000",
                    "updated": "2021-02-16T19:47:02.286+0000",
                    "started": "2021-02-16T19:47:02.286+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "553167",
                    "issueId": "13358550"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13358550/worklog/554203",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on pull request #9495:\nURL: https://github.com/apache/arrow/pull/9495#issuecomment-781290924\n\n\n   I plan to merge this on the weekend unless I hear any comments otherwise\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-18T11:54:11.186+0000",
                    "updated": "2021-02-18T11:54:11.186+0000",
                    "started": "2021-02-18T11:54:11.186+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "554203",
                    "issueId": "13358550"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13358550/worklog/555209",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on pull request #9495:\nURL: https://github.com/apache/arrow/pull/9495#issuecomment-782674520\n\n\n   @jorgecarleitao  this needs a rebase :( \r\n   \r\n   But then I think we'll (finally) get it in. Woohoo!\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-20T14:02:14.917+0000",
                    "updated": "2021-02-20T14:02:14.917+0000",
                    "started": "2021-02-20T14:02:14.917+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "555209",
                    "issueId": "13358550"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13358550/worklog/555424",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vertexclique commented on a change in pull request #9495:\nURL: https://github.com/apache/arrow/pull/9495#discussion_r579816799\n\n\n\n##########\nFile path: rust/arrow/src/alloc/mod.rs\n##########\n@@ -0,0 +1,136 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Defines memory-related functions, such as allocate/deallocate/reallocate memory\n+//! regions, cache and allocation alignments.\n+\n+use std::mem::size_of;\n+use std::ptr::NonNull;\n+use std::{\n+    alloc::{handle_alloc_error, Layout},\n+    sync::atomic::AtomicIsize,\n+};\n+\n+mod alignment;\n+mod types;\n+\n+pub use alignment::ALIGNMENT;\n+pub use types::NativeType;\n+\n+// If this number is not zero after all objects have been `drop`, there is a memory leak\n+pub static mut ALLOCATIONS: AtomicIsize = AtomicIsize::new(0);\n+\n+#[inline]\n+unsafe fn null_pointer<T: NativeType>() -> NonNull<T> {\n+    NonNull::new_unchecked(ALIGNMENT as *mut T)\n+}\n+\n+/// Allocates a cache-aligned memory region of `size` bytes with uninitialized values.\n+/// This is more performant than using [allocate_aligned_zeroed] when all bytes will have\n+/// an unknown or non-zero value and is semantically similar to `malloc`.\n+pub fn allocate_aligned<T: NativeType>(size: usize) -> NonNull<T> {\n+    unsafe {\n+        if size == 0 {\n+            null_pointer()\n+        } else {\n+            let size = size * size_of::<T>();\n+            ALLOCATIONS.fetch_add(size as isize, std::sync::atomic::Ordering::SeqCst);\n\nReview comment:\n       ```suggestion\r\n               #[cfg(feature = \"memory-check\")]\r\n               ALLOCATIONS.fetch_add(size as isize, Ordering::Relaxed);\r\n   ```\n\n##########\nFile path: rust/arrow/src/alloc/mod.rs\n##########\n@@ -0,0 +1,136 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Defines memory-related functions, such as allocate/deallocate/reallocate memory\n+//! regions, cache and allocation alignments.\n+\n+use std::mem::size_of;\n+use std::ptr::NonNull;\n+use std::{\n+    alloc::{handle_alloc_error, Layout},\n+    sync::atomic::AtomicIsize,\n+};\n+\n+mod alignment;\n+mod types;\n+\n+pub use alignment::ALIGNMENT;\n+pub use types::NativeType;\n+\n+// If this number is not zero after all objects have been `drop`, there is a memory leak\n+pub static mut ALLOCATIONS: AtomicIsize = AtomicIsize::new(0);\n+\n+#[inline]\n+unsafe fn null_pointer<T: NativeType>() -> NonNull<T> {\n+    NonNull::new_unchecked(ALIGNMENT as *mut T)\n+}\n+\n+/// Allocates a cache-aligned memory region of `size` bytes with uninitialized values.\n+/// This is more performant than using [allocate_aligned_zeroed] when all bytes will have\n+/// an unknown or non-zero value and is semantically similar to `malloc`.\n+pub fn allocate_aligned<T: NativeType>(size: usize) -> NonNull<T> {\n+    unsafe {\n+        if size == 0 {\n+            null_pointer()\n+        } else {\n+            let size = size * size_of::<T>();\n+            ALLOCATIONS.fetch_add(size as isize, std::sync::atomic::Ordering::SeqCst);\n+\n+            let layout = Layout::from_size_align_unchecked(size, ALIGNMENT);\n+            let raw_ptr = std::alloc::alloc(layout) as *mut T;\n+            NonNull::new(raw_ptr).unwrap_or_else(|| handle_alloc_error(layout))\n+        }\n+    }\n+}\n+\n+/// Allocates a cache-aligned memory region of `size` bytes with `0` on all of them.\n+/// This is more performant than using [allocate_aligned] and setting all bytes to zero\n+/// and is semantically similar to `calloc`.\n+pub fn allocate_aligned_zeroed<T: NativeType>(size: usize) -> NonNull<T> {\n+    unsafe {\n+        if size == 0 {\n+            null_pointer()\n+        } else {\n+            let size = size * size_of::<T>();\n+            ALLOCATIONS.fetch_add(size as isize, std::sync::atomic::Ordering::SeqCst);\n\nReview comment:\n       ```suggestion\r\n               #[cfg(feature = \"memory-check\")]\r\n               ALLOCATIONS.fetch_add(size as isize, Ordering::Relaxed);\r\n   ```\n\n##########\nFile path: rust/arrow/src/alloc/alignment.rs\n##########\n@@ -0,0 +1,119 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+// NOTE: Below code is written for spatial/temporal prefetcher optimizations. Memory allocation\n\nReview comment:\n       I've written this before, which part is confusing? Let's rephrase.\n\n##########\nFile path: rust/arrow/src/alloc/mod.rs\n##########\n@@ -0,0 +1,136 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Defines memory-related functions, such as allocate/deallocate/reallocate memory\n+//! regions, cache and allocation alignments.\n+\n+use std::mem::size_of;\n+use std::ptr::NonNull;\n+use std::{\n+    alloc::{handle_alloc_error, Layout},\n+    sync::atomic::AtomicIsize,\n+};\n+\n+mod alignment;\n+mod types;\n+\n+pub use alignment::ALIGNMENT;\n+pub use types::NativeType;\n+\n+// If this number is not zero after all objects have been `drop`, there is a memory leak\n+pub static mut ALLOCATIONS: AtomicIsize = AtomicIsize::new(0);\n\nReview comment:\n       ```suggestion\r\n   // If this number is not zero after all objects have been `drop`, there is a memory leak\r\n   #[cfg(feature = \"memory-check\")]\r\n   pub static mut ALLOCATIONS: AtomicIsize = AtomicIsize::new(0);\r\n   ```\n\n##########\nFile path: rust/arrow/src/alloc/mod.rs\n##########\n@@ -0,0 +1,136 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Defines memory-related functions, such as allocate/deallocate/reallocate memory\n+//! regions, cache and allocation alignments.\n+\n+use std::mem::size_of;\n+use std::ptr::NonNull;\n+use std::{\n+    alloc::{handle_alloc_error, Layout},\n+    sync::atomic::AtomicIsize,\n+};\n+\n+mod alignment;\n+mod types;\n+\n+pub use alignment::ALIGNMENT;\n+pub use types::NativeType;\n+\n+// If this number is not zero after all objects have been `drop`, there is a memory leak\n+pub static mut ALLOCATIONS: AtomicIsize = AtomicIsize::new(0);\n+\n+#[inline]\n+unsafe fn null_pointer<T: NativeType>() -> NonNull<T> {\n+    NonNull::new_unchecked(ALIGNMENT as *mut T)\n+}\n+\n+/// Allocates a cache-aligned memory region of `size` bytes with uninitialized values.\n+/// This is more performant than using [allocate_aligned_zeroed] when all bytes will have\n+/// an unknown or non-zero value and is semantically similar to `malloc`.\n+pub fn allocate_aligned<T: NativeType>(size: usize) -> NonNull<T> {\n+    unsafe {\n+        if size == 0 {\n+            null_pointer()\n+        } else {\n+            let size = size * size_of::<T>();\n+            ALLOCATIONS.fetch_add(size as isize, std::sync::atomic::Ordering::SeqCst);\n+\n+            let layout = Layout::from_size_align_unchecked(size, ALIGNMENT);\n+            let raw_ptr = std::alloc::alloc(layout) as *mut T;\n+            NonNull::new(raw_ptr).unwrap_or_else(|| handle_alloc_error(layout))\n+        }\n+    }\n+}\n+\n+/// Allocates a cache-aligned memory region of `size` bytes with `0` on all of them.\n+/// This is more performant than using [allocate_aligned] and setting all bytes to zero\n+/// and is semantically similar to `calloc`.\n+pub fn allocate_aligned_zeroed<T: NativeType>(size: usize) -> NonNull<T> {\n+    unsafe {\n+        if size == 0 {\n+            null_pointer()\n+        } else {\n+            let size = size * size_of::<T>();\n+            ALLOCATIONS.fetch_add(size as isize, std::sync::atomic::Ordering::SeqCst);\n+\n+            let layout = Layout::from_size_align_unchecked(size, ALIGNMENT);\n+            let raw_ptr = std::alloc::alloc_zeroed(layout) as *mut T;\n+            NonNull::new(raw_ptr).unwrap_or_else(|| handle_alloc_error(layout))\n+        }\n+    }\n+}\n+\n+/// # Safety\n+///\n+/// This function is unsafe because undefined behavior can result if the caller does not ensure all\n+/// of the following:\n+///\n+/// * ptr must denote a block of memory currently allocated via this allocator,\n+///\n+/// * size must be the same size that was used to allocate that block of memory,\n+pub unsafe fn free_aligned<T: NativeType>(ptr: NonNull<T>, size: usize) {\n+    if ptr != null_pointer() {\n+        let size = size * size_of::<T>();\n+        ALLOCATIONS.fetch_sub(size as isize, std::sync::atomic::Ordering::SeqCst);\n\nReview comment:\n       ```suggestion\r\n           #[cfg(feature = \"memory-check\")]\r\n           ALLOCATIONS.fetch_sub(size as isize, Ordering::Relaxed);\r\n   ```\n\n##########\nFile path: rust/arrow/src/alloc/mod.rs\n##########\n@@ -0,0 +1,136 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Defines memory-related functions, such as allocate/deallocate/reallocate memory\n+//! regions, cache and allocation alignments.\n+\n+use std::mem::size_of;\n+use std::ptr::NonNull;\n+use std::{\n+    alloc::{handle_alloc_error, Layout},\n+    sync::atomic::AtomicIsize,\n+};\n+\n+mod alignment;\n+mod types;\n+\n+pub use alignment::ALIGNMENT;\n+pub use types::NativeType;\n+\n+// If this number is not zero after all objects have been `drop`, there is a memory leak\n+pub static mut ALLOCATIONS: AtomicIsize = AtomicIsize::new(0);\n+\n+#[inline]\n+unsafe fn null_pointer<T: NativeType>() -> NonNull<T> {\n+    NonNull::new_unchecked(ALIGNMENT as *mut T)\n+}\n+\n+/// Allocates a cache-aligned memory region of `size` bytes with uninitialized values.\n+/// This is more performant than using [allocate_aligned_zeroed] when all bytes will have\n+/// an unknown or non-zero value and is semantically similar to `malloc`.\n+pub fn allocate_aligned<T: NativeType>(size: usize) -> NonNull<T> {\n+    unsafe {\n+        if size == 0 {\n+            null_pointer()\n+        } else {\n+            let size = size * size_of::<T>();\n+            ALLOCATIONS.fetch_add(size as isize, std::sync::atomic::Ordering::SeqCst);\n+\n+            let layout = Layout::from_size_align_unchecked(size, ALIGNMENT);\n+            let raw_ptr = std::alloc::alloc(layout) as *mut T;\n+            NonNull::new(raw_ptr).unwrap_or_else(|| handle_alloc_error(layout))\n+        }\n+    }\n+}\n+\n+/// Allocates a cache-aligned memory region of `size` bytes with `0` on all of them.\n+/// This is more performant than using [allocate_aligned] and setting all bytes to zero\n+/// and is semantically similar to `calloc`.\n+pub fn allocate_aligned_zeroed<T: NativeType>(size: usize) -> NonNull<T> {\n+    unsafe {\n+        if size == 0 {\n+            null_pointer()\n+        } else {\n+            let size = size * size_of::<T>();\n+            ALLOCATIONS.fetch_add(size as isize, std::sync::atomic::Ordering::SeqCst);\n+\n+            let layout = Layout::from_size_align_unchecked(size, ALIGNMENT);\n+            let raw_ptr = std::alloc::alloc_zeroed(layout) as *mut T;\n+            NonNull::new(raw_ptr).unwrap_or_else(|| handle_alloc_error(layout))\n+        }\n+    }\n+}\n+\n+/// # Safety\n+///\n+/// This function is unsafe because undefined behavior can result if the caller does not ensure all\n+/// of the following:\n+///\n+/// * ptr must denote a block of memory currently allocated via this allocator,\n+///\n+/// * size must be the same size that was used to allocate that block of memory,\n+pub unsafe fn free_aligned<T: NativeType>(ptr: NonNull<T>, size: usize) {\n+    if ptr != null_pointer() {\n+        let size = size * size_of::<T>();\n+        ALLOCATIONS.fetch_sub(size as isize, std::sync::atomic::Ordering::SeqCst);\n+        std::alloc::dealloc(\n+            ptr.as_ptr() as *mut u8,\n+            Layout::from_size_align_unchecked(size, ALIGNMENT),\n+        );\n+    }\n+}\n+\n+/// # Safety\n+///\n+/// This function is unsafe because undefined behavior can result if the caller does not ensure all\n+/// of the following:\n+///\n+/// * ptr must be currently allocated via this allocator,\n+///\n+/// * new_size must be greater than zero.\n+///\n+/// * new_size, when rounded up to the nearest multiple of [ALIGNMENT], must not overflow (i.e.,\n+/// the rounded value must be less than usize::MAX).\n+pub unsafe fn reallocate<T: NativeType>(\n+    ptr: NonNull<T>,\n+    old_size: usize,\n+    new_size: usize,\n+) -> NonNull<T> {\n+    let old_size = old_size * size_of::<T>();\n+    let new_size = new_size * size_of::<T>();\n+    if ptr == null_pointer() {\n+        return allocate_aligned(new_size);\n+    }\n+\n+    if new_size == 0 {\n+        free_aligned(ptr, old_size);\n+        return null_pointer();\n+    }\n+\n+    ALLOCATIONS.fetch_add(\n+        new_size as isize - old_size as isize,\n+        std::sync::atomic::Ordering::SeqCst,\n+    );\n\nReview comment:\n       ```suggestion\r\n   \r\n       #[cfg(feature = \"memory-check\")]\r\n       ALLOCATIONS.fetch_add(\r\n           new_size.checked_sub(old_size).unwrap() as isize,\r\n           Ordering::Relaxed,\r\n       );\r\n   ```\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-21T15:54:03.842+0000",
                    "updated": "2021-02-21T15:54:03.842+0000",
                    "started": "2021-02-21T15:54:03.841+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "555424",
                    "issueId": "13358550"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13358550/worklog/555426",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vertexclique commented on pull request #9495:\nURL: https://github.com/apache/arrow/pull/9495#issuecomment-782879731\n\n\n   @alamb Please don't get it in, it will slow down allocations with MOESI communication between cores.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-21T15:55:08.065+0000",
                    "updated": "2021-02-21T15:55:08.065+0000",
                    "started": "2021-02-21T15:55:08.064+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "555426",
                    "issueId": "13358550"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13358550/worklog/555432",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vertexclique commented on a change in pull request #9495:\nURL: https://github.com/apache/arrow/pull/9495#discussion_r579827116\n\n\n\n##########\nFile path: rust/arrow/src/alloc/mod.rs\n##########\n@@ -0,0 +1,136 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Defines memory-related functions, such as allocate/deallocate/reallocate memory\n+//! regions, cache and allocation alignments.\n+\n+use std::mem::size_of;\n+use std::ptr::NonNull;\n+use std::{\n+    alloc::{handle_alloc_error, Layout},\n+    sync::atomic::AtomicIsize,\n+};\n\nReview comment:\n       ```suggestion\r\n   use std::alloc::{handle_alloc_error, Layout};\r\n   use std::sync::atomic::*;\r\n   ```\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-21T15:59:08.139+0000",
                    "updated": "2021-02-21T15:59:08.139+0000",
                    "started": "2021-02-21T15:59:08.138+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "555432",
                    "issueId": "13358550"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13358550/worklog/555435",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vertexclique commented on a change in pull request #9495:\nURL: https://github.com/apache/arrow/pull/9495#discussion_r579828325\n\n\n\n##########\nFile path: rust/arrow/src/alloc/mod.rs\n##########\n@@ -0,0 +1,136 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Defines memory-related functions, such as allocate/deallocate/reallocate memory\n+//! regions, cache and allocation alignments.\n+\n+use std::mem::size_of;\n+use std::ptr::NonNull;\n+use std::{\n+    alloc::{handle_alloc_error, Layout},\n+    sync::atomic::AtomicIsize,\n+};\n+\n+mod alignment;\n+mod types;\n+\n+pub use alignment::ALIGNMENT;\n+pub use types::NativeType;\n+\n+// If this number is not zero after all objects have been `drop`, there is a memory leak\n+pub static mut ALLOCATIONS: AtomicIsize = AtomicIsize::new(0);\n+\n+#[inline]\n+unsafe fn null_pointer<T: NativeType>() -> NonNull<T> {\n+    NonNull::new_unchecked(ALIGNMENT as *mut T)\n+}\n+\n+/// Allocates a cache-aligned memory region of `size` bytes with uninitialized values.\n+/// This is more performant than using [allocate_aligned_zeroed] when all bytes will have\n+/// an unknown or non-zero value and is semantically similar to `malloc`.\n+pub fn allocate_aligned<T: NativeType>(size: usize) -> NonNull<T> {\n+    unsafe {\n+        if size == 0 {\n+            null_pointer()\n+        } else {\n+            let size = size * size_of::<T>();\n+            ALLOCATIONS.fetch_add(size as isize, std::sync::atomic::Ordering::SeqCst);\n+\n+            let layout = Layout::from_size_align_unchecked(size, ALIGNMENT);\n+            let raw_ptr = std::alloc::alloc(layout) as *mut T;\n+            NonNull::new(raw_ptr).unwrap_or_else(|| handle_alloc_error(layout))\n+        }\n+    }\n+}\n+\n+/// Allocates a cache-aligned memory region of `size` bytes with `0` on all of them.\n+/// This is more performant than using [allocate_aligned] and setting all bytes to zero\n+/// and is semantically similar to `calloc`.\n+pub fn allocate_aligned_zeroed<T: NativeType>(size: usize) -> NonNull<T> {\n+    unsafe {\n+        if size == 0 {\n+            null_pointer()\n+        } else {\n+            let size = size * size_of::<T>();\n+            ALLOCATIONS.fetch_add(size as isize, std::sync::atomic::Ordering::SeqCst);\n+\n+            let layout = Layout::from_size_align_unchecked(size, ALIGNMENT);\n+            let raw_ptr = std::alloc::alloc_zeroed(layout) as *mut T;\n+            NonNull::new(raw_ptr).unwrap_or_else(|| handle_alloc_error(layout))\n+        }\n+    }\n+}\n+\n+/// # Safety\n+///\n+/// This function is unsafe because undefined behavior can result if the caller does not ensure all\n+/// of the following:\n+///\n+/// * ptr must denote a block of memory currently allocated via this allocator,\n+///\n+/// * size must be the same size that was used to allocate that block of memory,\n+pub unsafe fn free_aligned<T: NativeType>(ptr: NonNull<T>, size: usize) {\n+    if ptr != null_pointer() {\n+        let size = size * size_of::<T>();\n+        ALLOCATIONS.fetch_sub(size as isize, std::sync::atomic::Ordering::SeqCst);\n+        std::alloc::dealloc(\n+            ptr.as_ptr() as *mut u8,\n+            Layout::from_size_align_unchecked(size, ALIGNMENT),\n+        );\n+    }\n+}\n+\n+/// # Safety\n+///\n+/// This function is unsafe because undefined behavior can result if the caller does not ensure all\n+/// of the following:\n+///\n+/// * ptr must be currently allocated via this allocator,\n+///\n+/// * new_size must be greater than zero.\n+///\n+/// * new_size, when rounded up to the nearest multiple of [ALIGNMENT], must not overflow (i.e.,\n+/// the rounded value must be less than usize::MAX).\n+pub unsafe fn reallocate<T: NativeType>(\n+    ptr: NonNull<T>,\n+    old_size: usize,\n+    new_size: usize,\n+) -> NonNull<T> {\n+    let old_size = old_size * size_of::<T>();\n+    let new_size = new_size * size_of::<T>();\n+    if ptr == null_pointer() {\n+        return allocate_aligned(new_size);\n+    }\n+\n+    if new_size == 0 {\n\nReview comment:\n       It would be better to add the `checked_sub` check written below for memory-check; also, go here.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-21T16:08:36.562+0000",
                    "updated": "2021-02-21T16:08:36.562+0000",
                    "started": "2021-02-21T16:08:36.562+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "555435",
                    "issueId": "13358550"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13358550/worklog/555436",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vertexclique commented on a change in pull request #9495:\nURL: https://github.com/apache/arrow/pull/9495#discussion_r579828447\n\n\n\n##########\nFile path: rust/arrow/src/alloc/types.rs\n##########\n@@ -0,0 +1,166 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+use crate::datatypes::DataType;\n+\n+/// A type that Rust's custom allocator knows how to allocate and deallocate.\n+/// This is implemented for all Arrow's physical types whose in-memory representation\n+/// matches Rust's physical types. Consider this trait sealed.\n+/// # Safety\n+/// Do not implement this trait.\n+pub unsafe trait NativeType:\n+    Sized + Copy + std::fmt::Debug + std::fmt::Display + PartialEq + Default + Sized + 'static\n+{\n+    type Bytes: AsRef<[u8]>;\n+\n+    /// Whether a DataType is a valid type for this physical representation.\n+    fn is_valid(data_type: &DataType) -> bool;\n+\n+    /// How this type represents itself as bytes in little endianess.\n+    /// This is used for IPC, where data is communicated with a specific endianess.\n+    fn to_le_bytes(&self) -> Self::Bytes;\n+}\n+\n+unsafe impl NativeType for u8 {\n+    type Bytes = [u8; std::mem::size_of::<Self>()];\n+    #[inline]\n+    fn to_le_bytes(&self) -> Self::Bytes {\n+        Self::to_le_bytes(*self)\n+    }\n\nReview comment:\n       tioli; Adding to_ne_bytes, to_be_bytes would be cool. Why not :)\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-21T16:11:19.740+0000",
                    "updated": "2021-02-21T16:11:19.740+0000",
                    "started": "2021-02-21T16:11:19.740+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "555436",
                    "issueId": "13358550"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13358550/worklog/555438",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on pull request #9495:\nURL: https://github.com/apache/arrow/pull/9495#issuecomment-782883232\n\n\n   @vertexclique , thanks a lot for going through this and your comments.\r\n   \r\n   For my own understanding, could you give some insight into the ordering comments and the `spin_loop_hint`?\r\n   \r\n   Note that this PR does no modify the `ALLOCATIONS` bit. That is the same as it was before. That was added in 2.0 and in the context of FFI; I measured no performance difference (maybe 2-3%).\r\n   \r\n   The change set of this PR is essentially https://github.com/apache/arrow/pull/9495/commits/bf1a7eb2285e5ee7a70fa1e4e6045c3e2b5fe085\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-21T16:19:49.609+0000",
                    "updated": "2021-02-21T16:19:49.609+0000",
                    "started": "2021-02-21T16:19:49.608+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "555438",
                    "issueId": "13358550"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13358550/worklog/555450",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vertexclique commented on pull request #9495:\nURL: https://github.com/apache/arrow/pull/9495#issuecomment-782885751\n\n\n   > For my own understanding, could you give some insight into the ordering comments and the `spin_loop_hint`?\r\n   \r\n   loop hint is for waiting on the cpu without os intervention to wait until to the point of expected value for this test.\r\n   \r\n   > Note that this PR does no modify the ALLOCATIONS bit. That is the same as it was before. That was added in 2.0 and in the context of FFI; I measured no performance difference (maybe 2-3%).\r\n   \r\n   > The change set of this PR is essentially bf1a7eb\r\n   \r\n   I've just seen this, probably I wasn't the reviewer or simply missed the review cycle.\r\n   I don't think that it can be seen in test execution. But it can be seen in the normal execution of the code. \r\n   Moreover, in the actual release code, it is not needed and can be filtered out.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-21T16:37:32.679+0000",
                    "updated": "2021-02-21T16:37:32.679+0000",
                    "started": "2021-02-21T16:37:32.679+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "555450",
                    "issueId": "13358550"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13358550/worklog/556612",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on a change in pull request #9495:\nURL: https://github.com/apache/arrow/pull/9495#discussion_r581444906\n\n\n\n##########\nFile path: rust/arrow/src/alloc/alignment.rs\n##########\n@@ -0,0 +1,119 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+// NOTE: Below code is written for spatial/temporal prefetcher optimizations. Memory allocation\n\nReview comment:\n       I think I am overwhelmed by the detail before I get the context of what the information is for.\r\n   \r\n   Maybe if the comment started with something like \r\n   ```\r\n   // Pick the best memory alignment based on the target architecture.\r\n   // \r\n   // The rationale for doing so is ....\r\n   ```\r\n   \n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-23T22:51:26.545+0000",
                    "updated": "2021-02-23T22:51:26.545+0000",
                    "started": "2021-02-23T22:51:26.544+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "556612",
                    "issueId": "13358550"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13358550/worklog/556983",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vertexclique commented on pull request #9495:\nURL: https://github.com/apache/arrow/pull/9495#issuecomment-785091359\n\n\n   @alamb @jorgecarleitao Yeah, I am totally ok merging it like this. We can keep track of the suggestions as Jira ticket. :)\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-24T13:54:37.789+0000",
                    "updated": "2021-02-24T13:54:37.789+0000",
                    "started": "2021-02-24T13:54:37.788+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "556983",
                    "issueId": "13358550"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13358550/worklog/556984",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vertexclique edited a comment on pull request #9495:\nURL: https://github.com/apache/arrow/pull/9495#issuecomment-785091359\n\n\n   @alamb @jorgecarleitao @nevi-me Yeah, I am totally ok merging it like this. We can keep track of the suggestions as Jira ticket. :)\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-24T13:54:50.645+0000",
                    "updated": "2021-02-24T13:54:50.645+0000",
                    "started": "2021-02-24T13:54:50.645+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "556984",
                    "issueId": "13358550"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 16200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@38c55a98[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@43e6cfb[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2e84c7ba[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@59aa3f25[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@42944e5b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@44cc93ba[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4cfd358e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@44266823[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2420106a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@4511617[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@21251256[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@56351121[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 16200,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Feb 25 05:02:05 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-02-25T05:02:05.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-11627/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2021-02-14T17:06:59.000+0000",
        "updated": "2021-02-25T05:02:13.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "4.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 16200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Rust] Typed allocator",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13358550/comment/17290671",
                    "id": "17290671",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=nevi_me",
                        "name": "nevi_me",
                        "key": "nevi_me",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=nevi_me&avatarId=24271",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nevi_me&avatarId=24271",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nevi_me&avatarId=24271",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nevi_me&avatarId=24271"
                        },
                        "displayName": "Neville Dipale",
                        "active": true,
                        "timeZone": "Africa/Johannesburg"
                    },
                    "body": "Issue resolved by pull request 9495\n[https://github.com/apache/arrow/pull/9495]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=nevi_me",
                        "name": "nevi_me",
                        "key": "nevi_me",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=nevi_me&avatarId=24271",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nevi_me&avatarId=24271",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nevi_me&avatarId=24271",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nevi_me&avatarId=24271"
                        },
                        "displayName": "Neville Dipale",
                        "active": true,
                        "timeZone": "Africa/Johannesburg"
                    },
                    "created": "2021-02-25T05:02:05.132+0000",
                    "updated": "2021-02-25T05:02:05.132+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0nnyo:",
        "customfield_12314139": null
    }
}