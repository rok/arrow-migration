{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13324153",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13324153",
    "key": "ARROW-9836",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12345977",
                "id": "12345977",
                "description": "",
                "name": "2.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-10-19"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12599472",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12599472",
                "type": {
                    "id": "12310000",
                    "name": "Duplicate",
                    "inward": "is duplicated by",
                    "outward": "duplicates",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310000"
                },
                "outwardIssue": {
                    "id": "13294833",
                    "key": "ARROW-8253",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13294833",
                    "fields": {
                        "summary": "[Rust] [DataFusion] Improve ergonomics of registering UDFs",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorgecarleitao",
            "name": "jorgecarleitao",
            "key": "jorgecarleitao",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=jorgecarleitao&avatarId=43827",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jorgecarleitao&avatarId=43827",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jorgecarleitao&avatarId=43827",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jorgecarleitao&avatarId=43827"
            },
            "displayName": "Jorge Leit\u00e3o",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333773",
                "id": "12333773",
                "name": "Rust"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12335005",
                "id": "12335005",
                "name": "Rust - DataFusion"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorgecarleitao",
            "name": "jorgecarleitao",
            "key": "jorgecarleitao",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=jorgecarleitao&avatarId=43827",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jorgecarleitao&avatarId=43827",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jorgecarleitao&avatarId=43827",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jorgecarleitao&avatarId=43827"
            },
            "displayName": "Jorge Leit\u00e3o",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorgecarleitao",
            "name": "jorgecarleitao",
            "key": "jorgecarleitao",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=jorgecarleitao&avatarId=43827",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jorgecarleitao&avatarId=43827",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jorgecarleitao&avatarId=43827",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jorgecarleitao&avatarId=43827"
            },
            "displayName": "Jorge Leit\u00e3o",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 16800,
            "total": 16800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 16800,
            "total": 16800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-9836/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 28,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13324153/worklog/473662",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao opened a new pull request #8032:\nURL: https://github.com/apache/arrow/pull/8032\n\n\n   See associated issue and document for details.\r\n   \r\n   The gist is that currently, users call UDFs through\r\n   \r\n   ``` \r\n   df.select(scalar_functions(\u201csqrt\u201d, vec![col(\u201ca\u201d)], DataType::Float64))\r\n   ```\r\n    \r\n   and this PR proposes a change to \r\n    \r\n   ```\r\n   let functions = df.registry()?;\r\n   \r\n   df.select(functions.udf(\u201csqrt\u201d, vec![col(\u201ca\u201d)])?)\r\n   ```\r\n    \r\n   so that they do not have to remember the UDFs return type when using it (and a whole lot other things for us internally). The `df` part is still not implemented. Currently it only works with `ctx.registry()?`.\r\n   \r\n   This PR is waiting for some changes in the `ExecutionContext`, for it to be easier to be integrated.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-23T15:25:08.178+0000",
                    "updated": "2020-08-23T15:25:08.178+0000",
                    "started": "2020-08-23T15:25:08.178+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "473662",
                    "issueId": "13324153"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13324153/worklog/473663",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #8032:\nURL: https://github.com/apache/arrow/pull/8032#issuecomment-678788344\n\n\n   https://issues.apache.org/jira/browse/ARROW-9836\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-23T15:32:02.718+0000",
                    "updated": "2020-08-23T15:32:02.718+0000",
                    "started": "2020-08-23T15:32:02.718+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "473663",
                    "issueId": "13324153"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13324153/worklog/474021",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #8032:\nURL: https://github.com/apache/arrow/pull/8032#issuecomment-679327189\n\n\n   For built-in functions like `sqrt` I would expect DataFusion to provide convenience functions to create an expression, like we do with `col` and the aggregate functions. I assume we could also do that with the design proposed here?\r\n   \r\n   For example, I would like to be able to write:\r\n   \r\n   ```rust\r\n   df.select(vec![col(\"foo\"), sqrt(col(\"bar\"))])?\r\n   ```\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-24T19:41:51.981+0000",
                    "updated": "2020-08-24T19:41:51.981+0000",
                    "started": "2020-08-24T19:41:51.981+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "474021",
                    "issueId": "13324153"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13324153/worklog/474133",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on pull request #8032:\nURL: https://github.com/apache/arrow/pull/8032#issuecomment-679631810\n\n\n   > For built-in functions like `sqrt` I would expect DataFusion to provide convenience functions to create an expression, like we do with `col` and the aggregate functions. I assume we could also do that with the design proposed here?\r\n   > \r\n   > For example, I would like to be able to write:\r\n   > \r\n   > ```rust\r\n   > df.select(vec![col(\"foo\"), sqrt(col(\"bar\"))])?\r\n   > ```\r\n   \r\n   This PR does not support this, as it threats every function (built-in or not) equally. To include that case, IMO this PR needs to add a new enum in the logical `Expr`:\r\n   \r\n   * `Expr::ScalarFunction { name: String/Enum, args: Vec<Expr> }` that we logically know its return type based on `name` (e.g. `\"sqrt\"`), exactly like `Expr::BinaryExpr`. This is mapped to a physical expression during planning. These can be build without access to the registry, as we hard-cod the return type on the logical plan to be consistent with the physical one, like we do for our aggregates, binary expressions, etc.\r\n   * `Expr:ScalarUDF { fun: ScalarFunction, args: Vec<Expr> }`, whose return type is only known after going to the registry to check what the user set its return type to be (as this PR currently does).\r\n   \r\n   `sqrt` would return `Expr::Function`, that knows its own return type, and the planner converts it to `ScalarFunction` via a hard-coded map, while `Expr:UDF`'s physical planning is just planning `args` and pass them to `ScalarFunction` like this PR already does.\r\n   \r\n   I.e. at the physical level, built-in and UDFs are indistinguishable, but at the logical plan, one only knows its name (built-in), the other also knows its physical representation `ScalarUDF`.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-25T04:56:13.944+0000",
                    "updated": "2020-08-25T04:56:13.944+0000",
                    "started": "2020-08-25T04:56:13.944+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "474133",
                    "issueId": "13324153"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13324153/worklog/474138",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao edited a comment on pull request #8032:\nURL: https://github.com/apache/arrow/pull/8032#issuecomment-679631810\n\n\n   > For built-in functions like `sqrt` I would expect DataFusion to provide convenience functions to create an expression, like we do with `col` and the aggregate functions. I assume we could also do that with the design proposed here?\r\n   > \r\n   > For example, I would like to be able to write:\r\n   > \r\n   > ```rust\r\n   > df.select(vec![col(\"foo\"), sqrt(col(\"bar\"))])?\r\n   > ```\r\n   \r\n   This PR does not support this, as it threats every function (built-in or not) equally. To include that case, IMO this PR needs to add a new enum in the logical `Expr`:\r\n   \r\n   * `Expr::ScalarFunction { name: String/Enum, args: Vec<Expr> }` that we logically know its return type based on `name` (e.g. `\"sqrt\"`), exactly like `Expr::BinaryExpr`. This is mapped to a physical expression during planning. These can be build without access to the registry, as we hard-cod the return type on the logical plan to be consistent with the physical one, like we do for our aggregates, binary expressions, etc.\r\n   * `Expr:ScalarUDF { fun: ScalarFunction, args: Vec<Expr> }`, whose return type is only known after going to the registry to check what the user set its return type to be (as this PR currently does).\r\n   \r\n   `sqrt` would return `Expr::ScalarFunction`, that knows its own return type, and the planner converts it to `ScalarFunction` via a hard-coded map, while `Expr:UDF`'s physical planning is just planning `args` and pass them to `ScalarFunction` like this PR already does.\r\n   \r\n   I.e. at the physical level, built-in and UDFs are indistinguishable, but at the logical plan, one only knows its name (built-in), the other also knows its physical representation `ScalarUDF`.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-25T05:16:54.674+0000",
                    "updated": "2020-08-25T05:16:54.674+0000",
                    "started": "2020-08-25T05:16:54.674+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "474138",
                    "issueId": "13324153"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13324153/worklog/474140",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao edited a comment on pull request #8032:\nURL: https://github.com/apache/arrow/pull/8032#issuecomment-679631810\n\n\n   > For built-in functions like `sqrt` I would expect DataFusion to provide convenience functions to create an expression, like we do with `col` and the aggregate functions. I assume we could also do that with the design proposed here?\r\n   > \r\n   > For example, I would like to be able to write:\r\n   > \r\n   > ```rust\r\n   > df.select(vec![col(\"foo\"), sqrt(col(\"bar\"))])?\r\n   > ```\r\n   \r\n   This PR does not support this, as it threats every function (built-in or not) equally. To include that case, IMO this PR needs to add a new enum in the logical `Expr`:\r\n   \r\n   * `Expr::ScalarFunction { name: String/Enum, args: Vec<Expr> }` that we logically know its return type based on `name` (e.g. `\"sqrt\"`), exactly like `Expr::BinaryExpr`. This is mapped to a physical expression during planning. These can be build without access to the registry, as we hard-code the return type on the logical plan to be consistent with the physical one, like we do for our aggregates, binary expressions, etc.\r\n   * `Expr:ScalarUDF { fun: ScalarFunction, args: Vec<Expr> }`, whose return type is only known after going to the registry to check what the user set its return type to be (as this PR currently does).\r\n   \r\n   `sqrt` would return `Expr::ScalarFunction`, that knows its own return type, and the planner converts it to `ScalarFunction` via a hard-coded map, while `Expr:UDF`'s physical planning is just planning `args` and pass them to `ScalarFunction` like this PR already does.\r\n   \r\n   I.e. at the physical level, built-in and UDFs are indistinguishable, but at the logical plan, one only knows its name (built-in), the other also knows its physical representation `ScalarUDF`.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-25T05:19:07.749+0000",
                    "updated": "2020-08-25T05:19:07.749+0000",
                    "started": "2020-08-25T05:19:07.749+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "474140",
                    "issueId": "13324153"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13324153/worklog/474320",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on pull request #8032:\nURL: https://github.com/apache/arrow/pull/8032#issuecomment-680037941\n\n\n   For anyone else reading along, the associated document I think is https://docs.google.com/document/d/1Kzz642ScizeKXmVE1bBlbLvR663BKQaGqVIyy9cAscY/edit?usp=sharing\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-25T13:51:10.783+0000",
                    "updated": "2020-08-25T13:51:10.783+0000",
                    "started": "2020-08-25T13:51:10.782+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "474320",
                    "issueId": "13324153"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13324153/worklog/474333",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on a change in pull request #8032:\nURL: https://github.com/apache/arrow/pull/8032#discussion_r476466084\n\n\n\n##########\nFile path: rust/datafusion/src/execution/context.rs\n##########\n@@ -193,6 +191,17 @@ impl ExecutionContext {\n         state.scalar_functions.insert(f.name.clone(), Arc::new(f));\n     }\n \n+    /// Get a reference to the registered scalar functions\n+    pub fn scalar_functions(&self) -> Vec<String> {\n\nReview comment:\n       This is not returning a reference, it is returning a copy \n\n##########\nFile path: rust/datafusion/src/logicalplan.rs\n##########\n@@ -1042,6 +998,35 @@ pub fn can_coerce_from(type_into: &DataType, type_from: &DataType) -> bool {\n     }\n }\n \n+/// A registry of functions used to plan queries programmatically\n\nReview comment:\n       I wonder what benefit we get from having Registry be its own `struct` and copying the vec around.\r\n   \r\n   What do you think about something like using a traint. Something like \r\n   \r\n   ```\r\n   pub trait UDFFactory {\r\n       pub fn udf(&self, name: &str, args: Vec<Expr>) -> Result<Expr>;\r\n   }\r\n   ```\r\n   \r\n   And then move the implementation of `udf` directly into ExecutionContext. \r\n   \r\n   \r\n   \r\n   \r\n   \n\n##########\nFile path: rust/datafusion/src/logicalplan.rs\n##########\n@@ -260,12 +261,10 @@ pub enum Expr {\n     },\n     /// scalar function\n     ScalarFunction {\n-        /// Name of the function\n-        name: String,\n+        /// The function\n+        fun: Box<ScalarFunction>,\n\nReview comment:\n       ```suggestion\r\n           fun: Arc<ScalarFunction>,\r\n   ```\r\n   \r\n   I think you can avoid deep copying the `ScalarFunction`  if we use `Arc` consistently\n\n##########\nFile path: rust/datafusion/src/sql/planner.rs\n##########\n@@ -527,9 +527,8 @@ impl<'a, S: SchemaProvider> SqlToRel<'a, S> {\n                             }\n \n                             Ok(Expr::ScalarFunction {\n-                                name: name.clone(),\n+                                fun: Box::new(fm.as_ref().clone()),\n\nReview comment:\n       I think if `fun` was an `Arc` this line will look like `fun: fm.clone()`\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-25T14:03:50.858+0000",
                    "updated": "2020-08-25T14:03:50.858+0000",
                    "started": "2020-08-25T14:03:50.858+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "474333",
                    "issueId": "13324153"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13324153/worklog/474488",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #8032:\nURL: https://github.com/apache/arrow/pull/8032#discussion_r476703332\n\n\n\n##########\nFile path: rust/datafusion/src/execution/dataframe_impl.rs\n##########\n@@ -232,6 +238,23 @@ mod tests {\n         Ok(())\n     }\n \n+    #[test]\n+    fn registry() -> Result<()> {\n+        // build query with a UDF using DataFrame API\n\nReview comment:\n       this is now useless, as built-in functions no longer require the registry. We should register one and use it.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-25T20:00:16.975+0000",
                    "updated": "2020-08-25T20:00:16.975+0000",
                    "started": "2020-08-25T20:00:16.975+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "474488",
                    "issueId": "13324153"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13324153/worklog/474489",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #8032:\nURL: https://github.com/apache/arrow/pull/8032#discussion_r476704464\n\n\n\n##########\nFile path: rust/datafusion/src/execution/physical_plan/functions.rs\n##########\n@@ -0,0 +1,208 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Declaration of built-in (scalar) functions.\n+//! This module contains built-in functions' enumeration and metadata.\n+\n+use super::{expressions::cast, PhysicalExpr};\n+use crate::error::{ExecutionError, Result};\n+use crate::execution::physical_plan::math_expressions;\n+use crate::execution::physical_plan::udf;\n+use arrow::{\n+    compute::kernels::length::length,\n+    datatypes::{DataType, Schema},\n+};\n+use std::{fmt, str::FromStr, sync::Arc};\n+use udf::ScalarUdf;\n+\n+/// Enum of all built-in scalar functions\n+#[derive(Debug, Clone, PartialEq, Eq)]\n+pub enum ScalarFunction {\n+    /// sqrt\n+    Sqrt,\n+    /// sin\n+    Sin,\n+    /// cos\n+    Cos,\n+    /// tan\n+    Tan,\n+    /// asin\n+    Asin,\n+    /// acos\n+    Acos,\n+    /// atan\n+    Atan,\n+    /// exp\n+    Exp,\n+    /// log, also known as ln\n+    Log,\n+    /// log2\n+    Log2,\n+    /// log10\n+    Log10,\n+    /// floor\n+    Floor,\n+    /// ceil\n+    Ceil,\n+    /// round\n+    Round,\n+    /// trunc\n+    Trunc,\n+    /// abs\n+    Abs,\n+    /// signum\n+    Signum,\n+    /// length\n+    Length,\n+}\n+\n+impl fmt::Display for ScalarFunction {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        // lowercase of the debug.\n+        write!(f, \"{}\", format!(\"{:?}\", self).to_lowercase())\n+    }\n+}\n+\n+impl FromStr for ScalarFunction {\n+    type Err = ExecutionError;\n+    fn from_str(name: &str) -> Result<ScalarFunction> {\n+        Ok(match name {\n+            \"sqrt\" => ScalarFunction::Sqrt,\n+            \"sin\" => ScalarFunction::Sin,\n+            \"cos\" => ScalarFunction::Cos,\n+            \"tan\" => ScalarFunction::Tan,\n+            \"asin\" => ScalarFunction::Asin,\n+            \"acos\" => ScalarFunction::Acos,\n+            \"atan\" => ScalarFunction::Atan,\n+            \"exp\" => ScalarFunction::Exp,\n+            \"log\" => ScalarFunction::Log,\n+            \"log2\" => ScalarFunction::Log2,\n+            \"log10\" => ScalarFunction::Log10,\n+            \"floor\" => ScalarFunction::Floor,\n+            \"ceil\" => ScalarFunction::Ceil,\n+            \"round\" => ScalarFunction::Round,\n+            \"truc\" => ScalarFunction::Trunc,\n+            \"abs\" => ScalarFunction::Abs,\n+            \"signum\" => ScalarFunction::Signum,\n+            \"length\" => ScalarFunction::Length,\n+            _ => {\n+                return Err(ExecutionError::General(format!(\n+                    \"There is no built-in function named {}\",\n+                    name\n+                )))\n+            }\n+        })\n+    }\n+}\n+\n+/// Returns the datatype of the scalar function\n+pub fn return_type(fun: &ScalarFunction, arg_types: &Vec<DataType>) -> Result<DataType> {\n+    if arg_types.len() != 1 {\n+        // for now, every function expects a single argument, and thus this is enough\n+        return Err(ExecutionError::General(format!(\n+            \"The function \\\"{}\\\" expected 1 argument, but received \\\"{}\\\"\",\n+            fun,\n+            arg_types.len()\n+        )));\n+    }\n+\n+    // verify that this is a valid type for this function\n+    coerce(fun, &arg_types[0])?;\n+\n+    match fun {\n+        ScalarFunction::Length => Ok(DataType::UInt32),\n+        _ => Ok(DataType::Float64),\n\nReview comment:\n       for now, but here is where the beauty will happen: as long as our physical plan supports it, we can return other stuff here.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-25T20:02:30.202+0000",
                    "updated": "2020-08-25T20:02:30.202+0000",
                    "started": "2020-08-25T20:02:30.202+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "474489",
                    "issueId": "13324153"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13324153/worklog/474490",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #8032:\nURL: https://github.com/apache/arrow/pull/8032#discussion_r476704869\n\n\n\n##########\nFile path: rust/datafusion/src/execution/physical_plan/functions.rs\n##########\n@@ -0,0 +1,208 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Declaration of built-in (scalar) functions.\n+//! This module contains built-in functions' enumeration and metadata.\n+\n+use super::{expressions::cast, PhysicalExpr};\n+use crate::error::{ExecutionError, Result};\n+use crate::execution::physical_plan::math_expressions;\n+use crate::execution::physical_plan::udf;\n+use arrow::{\n+    compute::kernels::length::length,\n+    datatypes::{DataType, Schema},\n+};\n+use std::{fmt, str::FromStr, sync::Arc};\n+use udf::ScalarUdf;\n+\n+/// Enum of all built-in scalar functions\n+#[derive(Debug, Clone, PartialEq, Eq)]\n+pub enum ScalarFunction {\n+    /// sqrt\n+    Sqrt,\n+    /// sin\n+    Sin,\n+    /// cos\n+    Cos,\n+    /// tan\n+    Tan,\n+    /// asin\n+    Asin,\n+    /// acos\n+    Acos,\n+    /// atan\n+    Atan,\n+    /// exp\n+    Exp,\n+    /// log, also known as ln\n+    Log,\n+    /// log2\n+    Log2,\n+    /// log10\n+    Log10,\n+    /// floor\n+    Floor,\n+    /// ceil\n+    Ceil,\n+    /// round\n+    Round,\n+    /// trunc\n+    Trunc,\n+    /// abs\n+    Abs,\n+    /// signum\n+    Signum,\n+    /// length\n+    Length,\n+}\n+\n+impl fmt::Display for ScalarFunction {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        // lowercase of the debug.\n+        write!(f, \"{}\", format!(\"{:?}\", self).to_lowercase())\n+    }\n+}\n+\n+impl FromStr for ScalarFunction {\n+    type Err = ExecutionError;\n+    fn from_str(name: &str) -> Result<ScalarFunction> {\n+        Ok(match name {\n+            \"sqrt\" => ScalarFunction::Sqrt,\n+            \"sin\" => ScalarFunction::Sin,\n+            \"cos\" => ScalarFunction::Cos,\n+            \"tan\" => ScalarFunction::Tan,\n+            \"asin\" => ScalarFunction::Asin,\n+            \"acos\" => ScalarFunction::Acos,\n+            \"atan\" => ScalarFunction::Atan,\n+            \"exp\" => ScalarFunction::Exp,\n+            \"log\" => ScalarFunction::Log,\n+            \"log2\" => ScalarFunction::Log2,\n+            \"log10\" => ScalarFunction::Log10,\n+            \"floor\" => ScalarFunction::Floor,\n+            \"ceil\" => ScalarFunction::Ceil,\n+            \"round\" => ScalarFunction::Round,\n+            \"truc\" => ScalarFunction::Trunc,\n+            \"abs\" => ScalarFunction::Abs,\n+            \"signum\" => ScalarFunction::Signum,\n+            \"length\" => ScalarFunction::Length,\n+            _ => {\n+                return Err(ExecutionError::General(format!(\n+                    \"There is no built-in function named {}\",\n+                    name\n+                )))\n+            }\n+        })\n+    }\n+}\n+\n+/// Returns the datatype of the scalar function\n+pub fn return_type(fun: &ScalarFunction, arg_types: &Vec<DataType>) -> Result<DataType> {\n+    if arg_types.len() != 1 {\n+        // for now, every function expects a single argument, and thus this is enough\n+        return Err(ExecutionError::General(format!(\n+            \"The function \\\"{}\\\" expected 1 argument, but received \\\"{}\\\"\",\n+            fun,\n+            arg_types.len()\n+        )));\n+    }\n+\n+    // verify that this is a valid type for this function\n+    coerce(fun, &arg_types[0])?;\n+\n+    match fun {\n+        ScalarFunction::Length => Ok(DataType::UInt32),\n+        _ => Ok(DataType::Float64),\n+    }\n+}\n+\n+/// Create a physical (function) expression.\n+pub fn function(\n+    fun: &ScalarFunction,\n+    args: Vec<Arc<dyn PhysicalExpr>>,\n+    input_schema: &Schema,\n+) -> Result<Arc<dyn PhysicalExpr>> {\n+    let fun_expr: ScalarUdf = Arc::new(match fun {\n+        ScalarFunction::Sqrt => math_expressions::sqrt,\n+        ScalarFunction::Sin => math_expressions::sin,\n+        ScalarFunction::Cos => math_expressions::cos,\n+        ScalarFunction::Tan => math_expressions::tan,\n+        ScalarFunction::Asin => math_expressions::asin,\n+        ScalarFunction::Acos => math_expressions::acos,\n+        ScalarFunction::Atan => math_expressions::atan,\n+        ScalarFunction::Exp => math_expressions::exp,\n+        ScalarFunction::Log => math_expressions::ln,\n+        ScalarFunction::Log2 => math_expressions::log2,\n+        ScalarFunction::Log10 => math_expressions::log10,\n+        ScalarFunction::Floor => math_expressions::floor,\n+        ScalarFunction::Ceil => math_expressions::ceil,\n+        ScalarFunction::Round => math_expressions::round,\n+        ScalarFunction::Trunc => math_expressions::trunc,\n+        ScalarFunction::Abs => math_expressions::abs,\n+        ScalarFunction::Signum => math_expressions::signum,\n+        ScalarFunction::Length => |args| Ok(Arc::new(length(args[0].as_ref())?)),\n+    });\n+    let data_types = args\n+        .iter()\n+        .map(|e| e.data_type(input_schema))\n+        .collect::<Result<Vec<_>>>()?;\n+\n+    // coerce type\n+    // for now, this works only for 1 argument.\n+    assert!(args.len() == 1);\n+    assert!(data_types.len() == 1);\n+    let new_type = coerce(fun, &data_types[0])?;\n+    let args = vec![cast(args[0].clone(), input_schema, new_type)?];\n\nReview comment:\n       we have this coercion rule in another PR, which will expand this to multiple arguments.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-25T20:03:23.174+0000",
                    "updated": "2020-08-25T20:03:23.174+0000",
                    "started": "2020-08-25T20:03:23.174+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "474490",
                    "issueId": "13324153"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13324153/worklog/474493",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #8032:\nURL: https://github.com/apache/arrow/pull/8032#discussion_r476706007\n\n\n\n##########\nFile path: rust/datafusion/src/execution/physical_plan/functions.rs\n##########\n@@ -0,0 +1,208 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Declaration of built-in (scalar) functions.\n+//! This module contains built-in functions' enumeration and metadata.\n+\n+use super::{expressions::cast, PhysicalExpr};\n+use crate::error::{ExecutionError, Result};\n+use crate::execution::physical_plan::math_expressions;\n+use crate::execution::physical_plan::udf;\n+use arrow::{\n+    compute::kernels::length::length,\n+    datatypes::{DataType, Schema},\n+};\n+use std::{fmt, str::FromStr, sync::Arc};\n+use udf::ScalarUdf;\n+\n+/// Enum of all built-in scalar functions\n+#[derive(Debug, Clone, PartialEq, Eq)]\n+pub enum ScalarFunction {\n+    /// sqrt\n+    Sqrt,\n+    /// sin\n+    Sin,\n+    /// cos\n+    Cos,\n+    /// tan\n+    Tan,\n+    /// asin\n+    Asin,\n+    /// acos\n+    Acos,\n+    /// atan\n+    Atan,\n+    /// exp\n+    Exp,\n+    /// log, also known as ln\n+    Log,\n+    /// log2\n+    Log2,\n+    /// log10\n+    Log10,\n+    /// floor\n+    Floor,\n+    /// ceil\n+    Ceil,\n+    /// round\n+    Round,\n+    /// trunc\n+    Trunc,\n+    /// abs\n+    Abs,\n+    /// signum\n+    Signum,\n+    /// length\n+    Length,\n+}\n+\n+impl fmt::Display for ScalarFunction {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        // lowercase of the debug.\n+        write!(f, \"{}\", format!(\"{:?}\", self).to_lowercase())\n+    }\n+}\n+\n+impl FromStr for ScalarFunction {\n+    type Err = ExecutionError;\n+    fn from_str(name: &str) -> Result<ScalarFunction> {\n+        Ok(match name {\n+            \"sqrt\" => ScalarFunction::Sqrt,\n+            \"sin\" => ScalarFunction::Sin,\n+            \"cos\" => ScalarFunction::Cos,\n+            \"tan\" => ScalarFunction::Tan,\n+            \"asin\" => ScalarFunction::Asin,\n+            \"acos\" => ScalarFunction::Acos,\n+            \"atan\" => ScalarFunction::Atan,\n+            \"exp\" => ScalarFunction::Exp,\n+            \"log\" => ScalarFunction::Log,\n+            \"log2\" => ScalarFunction::Log2,\n+            \"log10\" => ScalarFunction::Log10,\n+            \"floor\" => ScalarFunction::Floor,\n+            \"ceil\" => ScalarFunction::Ceil,\n+            \"round\" => ScalarFunction::Round,\n+            \"truc\" => ScalarFunction::Trunc,\n+            \"abs\" => ScalarFunction::Abs,\n+            \"signum\" => ScalarFunction::Signum,\n+            \"length\" => ScalarFunction::Length,\n+            _ => {\n+                return Err(ExecutionError::General(format!(\n+                    \"There is no built-in function named {}\",\n+                    name\n+                )))\n+            }\n+        })\n+    }\n+}\n+\n+/// Returns the datatype of the scalar function\n+pub fn return_type(fun: &ScalarFunction, arg_types: &Vec<DataType>) -> Result<DataType> {\n+    if arg_types.len() != 1 {\n+        // for now, every function expects a single argument, and thus this is enough\n+        return Err(ExecutionError::General(format!(\n+            \"The function \\\"{}\\\" expected 1 argument, but received \\\"{}\\\"\",\n+            fun,\n+            arg_types.len()\n+        )));\n+    }\n+\n+    // verify that this is a valid type for this function\n+    coerce(fun, &arg_types[0])?;\n+\n+    match fun {\n+        ScalarFunction::Length => Ok(DataType::UInt32),\n+        _ => Ok(DataType::Float64),\n+    }\n+}\n+\n+/// Create a physical (function) expression.\n+pub fn function(\n+    fun: &ScalarFunction,\n+    args: Vec<Arc<dyn PhysicalExpr>>,\n+    input_schema: &Schema,\n+) -> Result<Arc<dyn PhysicalExpr>> {\n+    let fun_expr: ScalarUdf = Arc::new(match fun {\n+        ScalarFunction::Sqrt => math_expressions::sqrt,\n+        ScalarFunction::Sin => math_expressions::sin,\n+        ScalarFunction::Cos => math_expressions::cos,\n+        ScalarFunction::Tan => math_expressions::tan,\n+        ScalarFunction::Asin => math_expressions::asin,\n+        ScalarFunction::Acos => math_expressions::acos,\n+        ScalarFunction::Atan => math_expressions::atan,\n+        ScalarFunction::Exp => math_expressions::exp,\n+        ScalarFunction::Log => math_expressions::ln,\n+        ScalarFunction::Log2 => math_expressions::log2,\n+        ScalarFunction::Log10 => math_expressions::log10,\n+        ScalarFunction::Floor => math_expressions::floor,\n+        ScalarFunction::Ceil => math_expressions::ceil,\n+        ScalarFunction::Round => math_expressions::round,\n+        ScalarFunction::Trunc => math_expressions::trunc,\n+        ScalarFunction::Abs => math_expressions::abs,\n+        ScalarFunction::Signum => math_expressions::signum,\n+        ScalarFunction::Length => |args| Ok(Arc::new(length(args[0].as_ref())?)),\n+    });\n+    let data_types = args\n+        .iter()\n+        .map(|e| e.data_type(input_schema))\n+        .collect::<Result<Vec<_>>>()?;\n+\n+    // coerce type\n+    // for now, this works only for 1 argument.\n+    assert!(args.len() == 1);\n+    assert!(data_types.len() == 1);\n+    let new_type = coerce(fun, &data_types[0])?;\n+    let args = vec![cast(args[0].clone(), input_schema, new_type)?];\n+\n+    Ok(Arc::new(udf::ScalarFunctionExpr::new(\n+        &format!(\"{}\", fun),\n+        &fun_expr,\n+        args,\n+        &return_type(&fun, &data_types)?,\n+    )))\n+}\n+\n+/// the set of valid types supported by the function\n+pub fn valid_type(fun: &ScalarFunction) -> DataType {\n+    match fun {\n+        ScalarFunction::Length => DataType::Utf8,\n+        _ => DataType::Float64,\n\nReview comment:\n       This is where we will be able to declare multiple valid input types, if this function changes to `Vec<Vec<DataType>>` (multiple types, multiple arguments).\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-25T20:05:31.239+0000",
                    "updated": "2020-08-25T20:05:31.239+0000",
                    "started": "2020-08-25T20:05:31.238+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "474493",
                    "issueId": "13324153"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13324153/worklog/474498",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on pull request #8032:\nURL: https://github.com/apache/arrow/pull/8032#issuecomment-680244598\n\n\n   @alamb thank you very much for your comments, I will now work on addressing them now. I still learning the Arc/Box/Ref, so thank you a lot for also teaching me.\r\n   \r\n   @andygrove , I agree with you that built-in functions should not require access to the registry. Unfortunately, doing so required some re-work, which is the reason I retracted #7967 back to draft to focus on this one first.\r\n   \r\n   I pushed a new commit to this PR to address this point. Specifically, that commit adds:\r\n   \r\n   * a new enum with all built-in functions\r\n   * functionally gluing the logical plan with the physical plan so that the function's return types are invariant.\r\n   * made type coercion on built-in functions to be on the physical plane, to preserve schema invariance during planning.\r\n   \r\n   I am pretty happy with this PR, as IMO has the flexibility we need to expand DataFusion's pool of built-in functions to multiple input and return types. The main features of this PR:\r\n   \r\n   * users no longer have to pass the return type of the UDF when calling them (the proposal)\r\n   * planning built-in functions continue to not need access to the registry (@andygrove 's point)\r\n   * built-in functions now support multiple input types (e.g. `sqrt(f32)`, `sqrt(f64)`)\r\n   * built-in functions now support multiple return types (e.g. `sqrt(f32) -> f32`, `sqrt(f64) -> f64`)\r\n   * coercion rules are no longer applied in the sql planning or physical planning to built-in functions, to avoid breaking schema invariance during planning\r\n   \r\n   I have not completed the valid return types of built-in math functions as this PR was already too long.\r\n   \r\n   Overall, I think that this has not been a pleasant experience for you @andygrove and @alamb, as I constantly open and close PRs around functions/UDFs, and for that I am really sorry. I've been hitting some design challenge after another, which requires me to go back and forth.\r\n   \r\n   I am still in pursuit of my original quests:\r\n   \r\n   * built-in aggregate functions whose logical types are known from the physical expressions\r\n   * type coercion on aggregate functions\r\n   * built-in aggregate functions whose return types (e.g. `min(f32) -> f32`, `min(f64) -> f64`) are directly derived from the physical plan (there is an old fixme/todo in the code around that)\r\n   * aggregate udfs\r\n   * udfs with multiple incoming and return types, to bring them to the same level of functionality of built-ins\r\n   * planning a udf without registering it (a-la spark) in the DF's API.\r\n    \r\n   I have code for some of this, I... just... need... to... finish... the... scalar... stuff... first...  \ud83d\ude03 \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-25T20:10:46.059+0000",
                    "updated": "2020-08-25T20:10:46.059+0000",
                    "started": "2020-08-25T20:10:46.059+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "474498",
                    "issueId": "13324153"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13324153/worklog/474670",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #8032:\nURL: https://github.com/apache/arrow/pull/8032#discussion_r477045153\n\n\n\n##########\nFile path: rust/datafusion/src/logicalplan.rs\n##########\n@@ -1042,6 +998,35 @@ pub fn can_coerce_from(type_into: &DataType, type_from: &DataType) -> bool {\n     }\n }\n \n+/// A registry of functions used to plan queries programmatically\n\nReview comment:\n       That is an excellent idea. I am trying to implement it, but I am facing a challenge; could you help me here?\r\n   \r\n   I've implemented the trait and moved the implementation for the `ExecutionContextState`, which is where the scalar is and what the DataFrame has access to:\r\n   \r\n   ```\r\n   impl UDFFactory for ExecutionContextState {\r\n       fn udf(&self, name: &str, args: Vec<Expr>) -> Result<Expr> {\r\n       ...\r\n       }\r\n   ```\r\n   \r\n   On the dataframe, we will need to do something like \r\n   \r\n   ```\r\n   fn udfs(&self) -> &dyn UDFFactory {\r\n           self.ctx_state ...\r\n       }\r\n   ```\r\n   \r\n   but `self.ctx_state` is under a mutex: `Arc<Mutex<ExecutionContextState>>`.\r\n   \r\n   This seems fair (safety wise): another thread could be trying to register a new UDF while we are trying to use one, in which case one of them should wait.\r\n   \r\n   However, I am struggling to write the interface to handle this.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-26T05:37:12.294+0000",
                    "updated": "2020-08-26T05:37:12.294+0000",
                    "started": "2020-08-26T05:37:12.294+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "474670",
                    "issueId": "13324153"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13324153/worklog/474671",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #8032:\nURL: https://github.com/apache/arrow/pull/8032#discussion_r477045153\n\n\n\n##########\nFile path: rust/datafusion/src/logicalplan.rs\n##########\n@@ -1042,6 +998,35 @@ pub fn can_coerce_from(type_into: &DataType, type_from: &DataType) -> bool {\n     }\n }\n \n+/// A registry of functions used to plan queries programmatically\n\nReview comment:\n       That is an excellent idea. I am trying to implement it, but I am facing a challenge; could you help me here?\r\n   \r\n   I've implemented the trait and moved the implementation for the `ExecutionContextState`, which is where the scalar is and what the DataFrame has access to:\r\n   \r\n   ```\r\n   impl UDFFactory for ExecutionContextState {\r\n       fn udf(&self, name: &str, args: Vec<Expr>) -> Result<Expr> {\r\n       ...\r\n       }\r\n   ```\r\n   \r\n   On the dataframe, we will need to do something like \r\n   \r\n   ```\r\n   fn registry(&self) -> &dyn UDFFactory {\r\n           self.ctx_state ...\r\n       }\r\n   ```\r\n   \r\n   but `self.ctx_state` is under a mutex: `Arc<Mutex<ExecutionContextState>>`.\r\n   \r\n   This seems fair (safety wise): another thread could be trying to register a new UDF while we are trying to use one, in which case one of them should wait.\r\n   \r\n   However, I am struggling to write the interface to handle this.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-26T05:40:58.181+0000",
                    "updated": "2020-08-26T05:40:58.181+0000",
                    "started": "2020-08-26T05:40:58.180+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "474671",
                    "issueId": "13324153"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13324153/worklog/475228",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on a change in pull request #8032:\nURL: https://github.com/apache/arrow/pull/8032#discussion_r478319729\n\n\n\n##########\nFile path: rust/datafusion/src/logicalplan.rs\n##########\n@@ -1042,6 +998,35 @@ pub fn can_coerce_from(type_into: &DataType, type_from: &DataType) -> bool {\n     }\n }\n \n+/// A registry of functions used to plan queries programmatically\n\nReview comment:\n       I wonder if you could implement UDFFactory on `DataFrameImpl` as well -- something like (untested)\r\n   \r\n   ```\r\n   impl UDFFactory for DataFrameImpl {\r\n       fn udf(&self, name: &str, args: Vec<Expr>) -> Result<Expr> {\r\n       self.ctx_state.lock().expect(\"locked the mutex\").udf(name, args)\r\n       }\r\n   ```\r\n   \r\n   I think this is another good example of why it would be helpful to remove the the Mutex from ExecutionContextState. I'll keep working on that -- I apologize for my slowness this week. I'll be back full time next week and hopefully make faster progress\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-27T10:33:29.980+0000",
                    "updated": "2020-08-27T10:33:29.980+0000",
                    "started": "2020-08-27T10:33:29.979+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "475228",
                    "issueId": "13324153"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13324153/worklog/475233",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on pull request #8032:\nURL: https://github.com/apache/arrow/pull/8032#issuecomment-681867726\n\n\n   Good luck -- at this stage of a project (when architecture is changing a\n   bunch) know it is hard to make small / easy to review PRs. I hope the\n   comments are helpful and I am sorry I don't have more time to devote to\n   reviews.\n   \n   On Tue, Aug 25, 2020 at 4:10 PM Jorge Leitao <notifications@github.com>\n   wrote:\n   \n   > @alamb <https://github.com/alamb> thank you very much for your comments,\n   > I will now work on addressing them now. I still learning the Arc/Box/Ref,\n   > so thank you a lot for also teaching me.\n   >\n   > @andygrove <https://github.com/andygrove> , I agree with you that\n   > built-in functions should not require access to the registry.\n   > Unfortunately, doing so required some re-work, which is the reason I\n   > retracted #7967 <https://github.com/apache/arrow/pull/7967> back to draft\n   > to focus on this one first.\n   >\n   > I pushed a new commit to this PR to address this point. Specifically, that\n   > commit adds:\n   >\n   >    - a new enum with all built-in functions\n   >    - functionally gluing the logical plan with the physical plan so that\n   >    the function's return types are invariant.\n   >    - made type coercion on built-in functions to be on the physical\n   >    plane, to preserve schema invariance during planning.\n   >\n   > I am pretty happy with this PR, as IMO has the flexibility we need to\n   > expand DataFusion's pool of built-in functions to multiple input and return\n   > types. The main features of this PR:\n   >\n   >    - users no longer have to pass the return type of the UDF when calling\n   >    them (the proposal)\n   >    - planning built-in functions continue to not need access to the\n   >    registry (@andygrove <https://github.com/andygrove> 's point)\n   >    - built-in functions now support multiple input types (e.g. sqrt(f32),\n   >    sqrt(f64))\n   >    - built-in functions now support multiple return types (e.g. sqrt(f32)\n   >    -> f32, sqrt(f64) -> f64)\n   >    - coercion rules are no longer applied in the sql planning or physical\n   >    planning to built-in functions, to avoid breaking schema invariance during\n   >    planning\n   >\n   > I have not completed the valid return types of built-in math functions as\n   > this PR was already too long.\n   >\n   > Overall, I think that this has not been a pleasant experience for you\n   > @andygrove <https://github.com/andygrove> and @alamb\n   > <https://github.com/alamb>, as I constantly open and close PRs around\n   > functions/UDFs, and for that I am really sorry. I've been hitting some\n   > design challenge after another, which requires me to go back and forth.\n   >\n   > I am still in pursuit of my original quests:\n   >\n   >    - built-in aggregate functions whose logical types are known from the\n   >    physical expressions\n   >    - type coercion on aggregate functions\n   >    - built-in aggregate functions whose return types (e.g. min(f32) -> f32,\n   >    min(f64) -> f64) are directly derived from the physical plan (there is\n   >    an old fixme/todo in the code around that)\n   >    - aggregate udfs\n   >    - udfs with multiple incoming and return types, to bring them to the\n   >    same level of functionality of built-ins\n   >    - planning a udf without registering it (a-la spark) in the DF's API.\n   >\n   > I have code for some of this, I... just... need... to... finish... the...\n   > scalar... stuff... first... \ud83d\ude03\n   >\n   > \u2014\n   > You are receiving this because you were mentioned.\n   > Reply to this email directly, view it on GitHub\n   > <https://github.com/apache/arrow/pull/8032#issuecomment-680244598>, or\n   > unsubscribe\n   > <https://github.com/notifications/unsubscribe-auth/AADXZMLPUU3TGXRLTCKWWKLSCQLEFANCNFSM4QIW6KXQ>\n   > .\n   >\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-27T10:35:37.693+0000",
                    "updated": "2020-08-27T10:35:37.693+0000",
                    "started": "2020-08-27T10:35:37.693+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "475233",
                    "issueId": "13324153"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13324153/worklog/476073",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on pull request #8032:\nURL: https://github.com/apache/arrow/pull/8032#issuecomment-683255964\n\n\n   FYI, this is what a PR to add support for f32 to mathematical expressions (keeping the return type f64) looks like: \r\n   https://github.com/jorgecarleitao/arrow/pull/1\r\n   \r\n   I.e. IMO with this PR we can support almost any built-in function: fixed type, variable return type, multiple input types, etc on `Expr::ScalarFunction`, which gives a lot of flexibility to add a new function, as we do not need to fiddle with `Expr`, only with input types, return types, etc. on the physical plane.\r\n   \r\n   I split built-ins from the UDFs because built-ins type is known without access to the registry, which is currently required to allow users to use them outside the `registry`.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-29T08:18:10.985+0000",
                    "updated": "2020-08-29T08:18:10.985+0000",
                    "started": "2020-08-29T08:18:10.984+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "476073",
                    "issueId": "13324153"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13324153/worklog/476194",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on pull request #8032:\nURL: https://github.com/apache/arrow/pull/8032#issuecomment-683374524\n\n\n   FYI, this is what a PR would look like for the concatenate function: https://github.com/jorgecarleitao/arrow/pull/2/files using this API.\r\n   \r\n   I am not advocating that we follow this design (option 3 in [this comment](https://github.com/apache/arrow/pull/7967#issuecomment-683275858)) would also be fine.\r\n   \r\n   My point is that regardless of which option we pick, we will need to have the functionality in this PR:\r\n   \r\n   1. function signatures\r\n   2. methods to check and coerce types based on those signatures\r\n   3. methods to return the return type of the function\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-30T04:24:23.118+0000",
                    "updated": "2020-08-30T04:24:23.118+0000",
                    "started": "2020-08-30T04:24:23.118+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "476194",
                    "issueId": "13324153"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13324153/worklog/476200",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on pull request #8032:\nURL: https://github.com/apache/arrow/pull/8032#issuecomment-683377384\n\n\n   And finally, this is how we would add the `array` function, that receives an arbitrary but uniformly-typed number of arguments: https://github.com/jorgecarleitao/arrow/pull/3/files\r\n   \r\n   To summarize:\r\n   \r\n   * math functions: \r\n       * accept 1 argument of a fixed type (f32 or f64)\r\n       * return a fixed type (f64)\r\n   * `concat`:\r\n       * accepts an arbitrary number of arguments of fixed type (utf8 atm, but large is trivial to add)\r\n       * returns a fixed type (utf8)\r\n   * `array`:\r\n       * accepts an arbitrary number of arguments of variable but uniform types (i.e. all arguments must be of equal type)\r\n       * returns `FixedSizeList(input_types[0], input.len())`\r\n   \r\n   The API that I am proposing here addresses all these cases out of the box. The 3 PRs in my repo,\r\n   \r\n   * all math accepts f32: https://github.com/jorgecarleitao/arrow/pull/1/files\r\n   * `concatenate` for utf8: https://github.com/jorgecarleitao/arrow/pull/2/files\r\n   * `array` for utf8: https://github.com/jorgecarleitao/arrow/pull/3/files\r\n   \r\n   add support to each of them at the physical and logical level.\r\n   \r\n   This PR also includes all the required coercion rules for this to work. E.g. `array(f32, i32, u32)` would be coerced to `array(f32, f32, f32)` (first argument dominates).\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-30T05:12:47.900+0000",
                    "updated": "2020-08-30T05:12:47.900+0000",
                    "started": "2020-08-30T05:12:47.900+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "476200",
                    "issueId": "13324153"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 16800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@1e94b48[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6904062b[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6096ab83[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@29eacce4[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4277b6[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@5bc2c26d[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@edda025[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@712fc0f6[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6243f6a2[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@2f5f912d[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4c60c06b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@43478161[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 16800,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Sep 07 20:33:10 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-09-07T20:33:09.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-9836/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2020-08-23T15:11:13.000+0000",
        "updated": "2020-09-27T18:51:47.000+0000",
        "timeoriginalestimate": null,
        "description": "TL;DR; currently, users call UDFs through\r\n \u00a0\r\n {color:#000000}df.select(scalar_functions(\u201csqrt\u201d, vec![col(\u201ca\u201d)], DataType::Float64)){color}\r\n \u00a0\r\n Proposal:\r\n \u00a0\r\n {color:#000000}let f = df.registry();{color}\r\n\r\n{color:#000000}df.select(f.udf(\u201csqrt\u201d, vec![col(\u201ca\u201d)])?){color}\r\n \u00a0\r\n so that they do not have to remember the UDFs return type when using it.\r\n \u00a0\r\n This API will in the future allow to declare the UDF as part of the planning, like spark, instead of having to register it in the registry before using it (we just need to check if the UDF is registered or not before doing so).\r\n See complete proposal here: [https://docs.google.com/document/d/1Kzz642ScizeKXmVE1bBlbLvR663BKQaGqVIyy9cAscY/edit?usp=sharing]\r\n\r\n\u00a0",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "4h 40m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 16800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Rust] [DataFusion] Improve API for usage of UDFs",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13324153/comment/17191855",
                    "id": "17191855",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "body": "Issue resolved by pull request 8032\n[https://github.com/apache/arrow/pull/8032]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "created": "2020-09-07T20:33:10.026+0000",
                    "updated": "2020-09-07T20:33:10.026+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0i0oo:",
        "customfield_12314139": null
    }
}