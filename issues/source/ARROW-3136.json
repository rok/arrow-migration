{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13181694",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13181694",
    "key": "ARROW-3136",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343066",
                "id": "12343066",
                "description": "",
                "name": "0.11.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-10-08"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 6000,
            "total": 6000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 6000,
            "total": 6000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3136/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 10,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13181694/worklog/148160",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou opened a new pull request #2633: ARROW-3136: [C++] Clean up public API\nURL: https://github.com/apache/arrow/pull/2633\n \n \n   Move some exported functions and classes into `arrow::util` and `arrow::internal` namespaces.\r\n   Also add and improve some docstrings for public API members.\r\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-26T14:56:37.017+0000",
                    "updated": "2018-09-26T14:56:37.017+0000",
                    "started": "2018-09-26T14:56:37.017+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "148160",
                    "issueId": "13181694"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13181694/worklog/148161",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #2633: ARROW-3136: [C++] Clean up public API\nURL: https://github.com/apache/arrow/pull/2633#discussion_r220600112\n \n \n\n ##########\n File path: cpp/src/arrow/type_fwd.h\n ##########\n @@ -135,26 +135,42 @@ using IntervalArray = NumericArray<IntervalType>;\n \n // ----------------------------------------------------------------------\n // (parameter-free) Factory functions\n+// Other factory functions are in type.h\n \n+/// \\brief Return a NullType instance\n std::shared_ptr<DataType> ARROW_EXPORT null();\n+/// \\brief Return a BooleanType instance\n std::shared_ptr<DataType> ARROW_EXPORT boolean();\n+/// \\brief Return a Int8Type instance\n std::shared_ptr<DataType> ARROW_EXPORT int8();\n+/// \\brief Return a Int16Type instance\n std::shared_ptr<DataType> ARROW_EXPORT int16();\n+/// \\brief Return a Int32Type instance\n std::shared_ptr<DataType> ARROW_EXPORT int32();\n+/// \\brief Return a Int64Type instance\n std::shared_ptr<DataType> ARROW_EXPORT int64();\n+/// \\brief Return a UInt8Type instance\n std::shared_ptr<DataType> ARROW_EXPORT uint8();\n+/// \\brief Return a UInt16Type instance\n std::shared_ptr<DataType> ARROW_EXPORT uint16();\n+/// \\brief Return a UInt32Type instance\n std::shared_ptr<DataType> ARROW_EXPORT uint32();\n+/// \\brief Return a UInt64Type instance\n std::shared_ptr<DataType> ARROW_EXPORT uint64();\n+/// \\brief Return a HalfFloatType instance\n std::shared_ptr<DataType> ARROW_EXPORT float16();\n+/// \\brief Return a FloatType instance\n std::shared_ptr<DataType> ARROW_EXPORT float32();\n+/// \\brief Return a DoubleType instance\n std::shared_ptr<DataType> ARROW_EXPORT float64();\n+/// \\brief Return a StringType instance\n std::shared_ptr<DataType> ARROW_EXPORT utf8();\n+/// \\brief Return a BinaryType instance\n std::shared_ptr<DataType> ARROW_EXPORT binary();\n-\n+/// \\brief Return a Date32Type instance\n std::shared_ptr<DataType> ARROW_EXPORT date32();\n+/// \\brief Return a Date64Type instance\n std::shared_ptr<DataType> ARROW_EXPORT date64();\n-std::shared_ptr<DataType> ARROW_EXPORT decimal_type(int precision, int scale);\n \n Review comment:\n   Note this function isn't defined anywhere AFAICT.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-26T14:58:28.182+0000",
                    "updated": "2018-09-26T14:58:28.182+0000",
                    "started": "2018-09-26T14:58:28.181+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "148161",
                    "issueId": "13181694"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13181694/worklog/148166",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2633: ARROW-3136: [C++] Clean up public API\nURL: https://github.com/apache/arrow/pull/2633#discussion_r220607189\n \n \n\n ##########\n File path: cpp/src/arrow/type_fwd.h\n ##########\n @@ -135,26 +135,42 @@ using IntervalArray = NumericArray<IntervalType>;\n \n // ----------------------------------------------------------------------\n // (parameter-free) Factory functions\n+// Other factory functions are in type.h\n \n+/// \\brief Return a NullType instance\n std::shared_ptr<DataType> ARROW_EXPORT null();\n+/// \\brief Return a BooleanType instance\n std::shared_ptr<DataType> ARROW_EXPORT boolean();\n+/// \\brief Return a Int8Type instance\n std::shared_ptr<DataType> ARROW_EXPORT int8();\n+/// \\brief Return a Int16Type instance\n std::shared_ptr<DataType> ARROW_EXPORT int16();\n+/// \\brief Return a Int32Type instance\n std::shared_ptr<DataType> ARROW_EXPORT int32();\n+/// \\brief Return a Int64Type instance\n std::shared_ptr<DataType> ARROW_EXPORT int64();\n+/// \\brief Return a UInt8Type instance\n std::shared_ptr<DataType> ARROW_EXPORT uint8();\n+/// \\brief Return a UInt16Type instance\n std::shared_ptr<DataType> ARROW_EXPORT uint16();\n+/// \\brief Return a UInt32Type instance\n std::shared_ptr<DataType> ARROW_EXPORT uint32();\n+/// \\brief Return a UInt64Type instance\n std::shared_ptr<DataType> ARROW_EXPORT uint64();\n+/// \\brief Return a HalfFloatType instance\n std::shared_ptr<DataType> ARROW_EXPORT float16();\n+/// \\brief Return a FloatType instance\n std::shared_ptr<DataType> ARROW_EXPORT float32();\n+/// \\brief Return a DoubleType instance\n std::shared_ptr<DataType> ARROW_EXPORT float64();\n+/// \\brief Return a StringType instance\n std::shared_ptr<DataType> ARROW_EXPORT utf8();\n+/// \\brief Return a BinaryType instance\n std::shared_ptr<DataType> ARROW_EXPORT binary();\n-\n+/// \\brief Return a Date32Type instance\n std::shared_ptr<DataType> ARROW_EXPORT date32();\n+/// \\brief Return a Date64Type instance\n std::shared_ptr<DataType> ARROW_EXPORT date64();\n-std::shared_ptr<DataType> ARROW_EXPORT decimal_type(int precision, int scale);\n \n Review comment:\n   There is the `arrow::decimal(p, s)` so that's enough\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-26T15:17:51.792+0000",
                    "updated": "2018-09-26T15:17:51.792+0000",
                    "started": "2018-09-26T15:17:51.791+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "148166",
                    "issueId": "13181694"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13181694/worklog/148181",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #2633: ARROW-3136: [C++] Clean up public API\nURL: https://github.com/apache/arrow/pull/2633#issuecomment-424779384\n \n \n   The R task fails, I think it's unrelated but I'm not sure.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-26T16:19:22.554+0000",
                    "updated": "2018-09-26T16:19:22.554+0000",
                    "started": "2018-09-26T16:19:22.552+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "148181",
                    "issueId": "13181694"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13181694/worklog/148182",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2633: ARROW-3136: [C++] Clean up public API\nURL: https://github.com/apache/arrow/pull/2633#issuecomment-424781087\n \n \n   It's unrelated. Let me try to fix that -- I swore that the R build passed in that PR but I must have misread it\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-26T16:24:18.491+0000",
                    "updated": "2018-09-26T16:24:18.491+0000",
                    "started": "2018-09-26T16:24:18.490+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "148182",
                    "issueId": "13181694"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13181694/worklog/148186",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2633: ARROW-3136: [C++] Clean up public API\nURL: https://github.com/apache/arrow/pull/2633#issuecomment-424782535\n \n \n   See https://github.com/apache/arrow/pull/2635. I will merge that once the build runs, then rebase this so we can check that R is OK after your changes\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-26T16:28:30.756+0000",
                    "updated": "2018-09-26T16:28:30.756+0000",
                    "started": "2018-09-26T16:28:30.755+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "148186",
                    "issueId": "13181694"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13181694/worklog/148190",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #2633: ARROW-3136: [C++] Clean up public API\nURL: https://github.com/apache/arrow/pull/2633#issuecomment-424786229\n \n \n   AppVeyor build at https://ci.appveyor.com/project/ApacheSoftwareFoundation/arrow/build/1.0.8109\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-26T16:39:19.893+0000",
                    "updated": "2018-09-26T16:39:19.893+0000",
                    "started": "2018-09-26T16:39:19.892+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "148190",
                    "issueId": "13181694"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13181694/worklog/148726",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #2633: ARROW-3136: [C++] Clean up public API\nURL: https://github.com/apache/arrow/pull/2633#issuecomment-425076164\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/2633?src=pr&el=h1) Report\n   > Merging [#2633](https://codecov.io/gh/apache/arrow/pull/2633?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/d54f13d86631d59311d790b5f83d64680538cd24?src=pr&el=desc) will **increase** coverage by `1.02%`.\n   > The diff coverage is `97.22%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/2633/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/2633?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #2633      +/-   ##\n   ==========================================\n   + Coverage    87.2%   88.23%   +1.02%     \n   ==========================================\n     Files         381      319      -62     \n     Lines       59196    55483    -3713     \n   ==========================================\n   - Hits        51624    48957    -2667     \n   + Misses       7502     6526     -976     \n   + Partials       70        0      -70\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/2633?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [cpp/src/parquet/column\\_writer.h](https://codecov.io/gh/apache/arrow/pull/2633/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wYXJxdWV0L2NvbHVtbl93cml0ZXIuaA==) | `70.58% <\u00f8> (\u00f8)` | :arrow_up: |\n   | [cpp/src/parquet/file\\_reader.cc](https://codecov.io/gh/apache/arrow/pull/2633/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wYXJxdWV0L2ZpbGVfcmVhZGVyLmNj) | `95.39% <\u00f8> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/util/logging.cc](https://codecov.io/gh/apache/arrow/pull/2633/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL2xvZ2dpbmcuY2M=) | `86.66% <\u00f8> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/array.cc](https://codecov.io/gh/apache/arrow/pull/2633/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9hcnJheS5jYw==) | `85.77% <\u00f8> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/util/bit-util.h](https://codecov.io/gh/apache/arrow/pull/2633/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL2JpdC11dGlsLmg=) | `98.81% <\u00f8> (\u00f8)` | :arrow_up: |\n   | [cpp/src/parquet/column\\_reader.h](https://codecov.io/gh/apache/arrow/pull/2633/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wYXJxdWV0L2NvbHVtbl9yZWFkZXIuaA==) | `91.2% <\u00f8> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/util/compression-test.cc](https://codecov.io/gh/apache/arrow/pull/2633/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL2NvbXByZXNzaW9uLXRlc3QuY2M=) | `100% <\u00f8> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/util/checked\\_cast.h](https://codecov.io/gh/apache/arrow/pull/2633/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL2NoZWNrZWRfY2FzdC5o) | `100% <\u00f8> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/python/serialize.cc](https://codecov.io/gh/apache/arrow/pull/2633/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9weXRob24vc2VyaWFsaXplLmNj) | `89.64% <\u00f8> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/python/deserialize.cc](https://codecov.io/gh/apache/arrow/pull/2633/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9weXRob24vZGVzZXJpYWxpemUuY2M=) | `91.2% <\u00f8> (\u00f8)` | :arrow_up: |\n   | ... and [125 more](https://codecov.io/gh/apache/arrow/pull/2633/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/2633?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/2633?src=pr&el=footer). Last update [d54f13d...9b78db6](https://codecov.io/gh/apache/arrow/pull/2633?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-27T12:43:09.835+0000",
                    "updated": "2018-09-27T12:43:09.835+0000",
                    "started": "2018-09-27T12:43:09.835+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "148726",
                    "issueId": "13181694"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13181694/worklog/148728",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #2633: ARROW-3136: [C++] Clean up public API\nURL: https://github.com/apache/arrow/pull/2633#issuecomment-425078999\n \n \n   AppVeyor builds: https://ci.appveyor.com/project/pitrou/arrow/build/1.0.766 and https://ci.appveyor.com/project/pitrou/arrow/build/1.0.767. I'm gonna merge.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-27T12:52:41.266+0000",
                    "updated": "2018-09-27T12:52:41.266+0000",
                    "started": "2018-09-27T12:52:41.266+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "148728",
                    "issueId": "13181694"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13181694/worklog/148729",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou closed pull request #2633: ARROW-3136: [C++] Clean up public API\nURL: https://github.com/apache/arrow/pull/2633\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/cpp/src/arrow/adapters/orc/adapter.cc b/cpp/src/arrow/adapters/orc/adapter.cc\nindex 9fdeb9c2ed..de803d5ba6 100644\n--- a/cpp/src/arrow/adapters/orc/adapter.cc\n+++ b/cpp/src/arrow/adapters/orc/adapter.cc\n@@ -50,6 +50,9 @@\n namespace liborc = orc;\n \n namespace arrow {\n+\n+using internal::checked_cast;\n+\n namespace adapters {\n namespace orc {\n \ndiff --git a/cpp/src/arrow/array-test.cc b/cpp/src/arrow/array-test.cc\nindex bec5a99947..f5153aa0ce 100644\n--- a/cpp/src/arrow/array-test.cc\n+++ b/cpp/src/arrow/array-test.cc\n@@ -42,6 +42,8 @@ namespace arrow {\n using std::string;\n using std::vector;\n \n+using internal::checked_cast;\n+\n namespace {\n // used to prevent compiler optimizing away side-effect-less statements\n volatile int throw_away = 0;\ndiff --git a/cpp/src/arrow/array.cc b/cpp/src/arrow/array.cc\nindex 6222e37faf..26abc336fb 100644\n--- a/cpp/src/arrow/array.cc\n+++ b/cpp/src/arrow/array.cc\n@@ -40,6 +40,11 @@\n \n namespace arrow {\n \n+using internal::BitmapAnd;\n+using internal::checked_cast;\n+using internal::CopyBitmap;\n+using internal::CountSetBits;\n+\n std::shared_ptr<ArrayData> ArrayData::Make(const std::shared_ptr<DataType>& type,\n                                            int64_t length,\n                                            std::vector<std::shared_ptr<Buffer>>&& buffers,\ndiff --git a/cpp/src/arrow/array.h b/cpp/src/arrow/array.h\nindex a2d1d5ecf2..70ceb8a9a6 100644\n--- a/cpp/src/arrow/array.h\n+++ b/cpp/src/arrow/array.h\n@@ -317,6 +317,7 @@ static inline std::ostream& operator<<(std::ostream& os, const Array& x) {\n   return os;\n }\n \n+/// Base class for non-nested arrays\n class ARROW_EXPORT FlatArray : public Array {\n  protected:\n   using Array::Array;\n@@ -338,7 +339,7 @@ class ARROW_EXPORT NullArray : public FlatArray {\n   }\n };\n \n-/// Base class for fixed-size logical types\n+/// Base class for arrays of fixed-size logical types\n class ARROW_EXPORT PrimitiveArray : public FlatArray {\n  public:\n   PrimitiveArray(const std::shared_ptr<DataType>& type, int64_t length,\n@@ -394,6 +395,7 @@ class ARROW_EXPORT NumericArray : public PrimitiveArray {\n   using PrimitiveArray::PrimitiveArray;\n };\n \n+/// Concrete Array class for boolean data\n class ARROW_EXPORT BooleanArray : public PrimitiveArray {\n  public:\n   using TypeClass = BooleanType;\n@@ -416,6 +418,7 @@ class ARROW_EXPORT BooleanArray : public PrimitiveArray {\n // ----------------------------------------------------------------------\n // ListArray\n \n+/// Concrete Array class for list data\n class ARROW_EXPORT ListArray : public Array {\n  public:\n   using TypeClass = ListType;\n@@ -473,6 +476,7 @@ class ARROW_EXPORT ListArray : public Array {\n // ----------------------------------------------------------------------\n // Binary and String\n \n+/// Concrete Array class for variable-size binary data\n class ARROW_EXPORT BinaryArray : public FlatArray {\n  public:\n   using TypeClass = BinaryType;\n@@ -540,6 +544,7 @@ class ARROW_EXPORT BinaryArray : public FlatArray {\n   const uint8_t* raw_data_;\n };\n \n+/// Concrete Array class for variable-size string (utf-8) data\n class ARROW_EXPORT StringArray : public BinaryArray {\n  public:\n   using TypeClass = StringType;\n@@ -563,6 +568,7 @@ class ARROW_EXPORT StringArray : public BinaryArray {\n // ----------------------------------------------------------------------\n // Fixed width binary\n \n+/// Concrete Array class for fixed-size binary data\n class ARROW_EXPORT FixedSizeBinaryArray : public PrimitiveArray {\n  public:\n   using TypeClass = FixedSizeBinaryType;\n@@ -584,7 +590,8 @@ class ARROW_EXPORT FixedSizeBinaryArray : public PrimitiveArray {\n  protected:\n   inline void SetData(const std::shared_ptr<ArrayData>& data) {\n     this->PrimitiveArray::SetData(data);\n-    byte_width_ = checked_cast<const FixedSizeBinaryType&>(*type()).byte_width();\n+    byte_width_ =\n+        internal::checked_cast<const FixedSizeBinaryType&>(*type()).byte_width();\n   }\n \n   int32_t byte_width_;\n@@ -592,6 +599,8 @@ class ARROW_EXPORT FixedSizeBinaryArray : public PrimitiveArray {\n \n // ----------------------------------------------------------------------\n // Decimal128Array\n+\n+/// Concrete Array class for 128-bit decimal data\n class ARROW_EXPORT Decimal128Array : public FixedSizeBinaryArray {\n  public:\n   using TypeClass = Decimal128Type;\n@@ -610,6 +619,7 @@ using DecimalArray = Decimal128Array;\n // ----------------------------------------------------------------------\n // Struct\n \n+/// Concrete Array class for struct data\n class ARROW_EXPORT StructArray : public Array {\n  public:\n   using TypeClass = StructType;\n@@ -640,6 +650,7 @@ class ARROW_EXPORT StructArray : public Array {\n // ----------------------------------------------------------------------\n // Union\n \n+/// Concrete Array class for union data\n class ARROW_EXPORT UnionArray : public Array {\n  public:\n   using TypeClass = UnionType;\n@@ -694,7 +705,9 @@ class ARROW_EXPORT UnionArray : public Array {\n   const type_id_t* raw_type_ids() const { return raw_type_ids_ + data_->offset; }\n   const int32_t* raw_value_offsets() const { return raw_value_offsets_ + data_->offset; }\n \n-  UnionMode::type mode() const { return checked_cast<const UnionType&>(*type()).mode(); }\n+  UnionMode::type mode() const {\n+    return internal::checked_cast<const UnionType&>(*type()).mode();\n+  }\n \n   // Return the given field as an individual array.\n   // For sparse unions, the returned array has its offset, length and null\n@@ -718,21 +731,23 @@ class ARROW_EXPORT UnionArray : public Array {\n // ----------------------------------------------------------------------\n // DictionaryArray (categorical and dictionary-encoded in memory)\n \n-// A dictionary array contains an array of non-negative integers (the\n-// \"dictionary indices\") along with a data type containing a \"dictionary\"\n-// corresponding to the distinct values represented in the data.\n-//\n-// For example, the array\n-//\n-//   [\"foo\", \"bar\", \"foo\", \"bar\", \"foo\", \"bar\"]\n-//\n-// with dictionary [\"bar\", \"foo\"], would have dictionary array representation\n-//\n-//   indices: [1, 0, 1, 0, 1, 0]\n-//   dictionary: [\"bar\", \"foo\"]\n-//\n-// The indices in principle may have any integer type (signed or unsigned),\n-// though presently data in IPC exchanges must be signed int32.\n+/// \\brief Concrete Array class for dictionary data\n+///\n+/// A dictionary array contains an array of non-negative integers (the\n+/// \"dictionary indices\") along with a data type containing a \"dictionary\"\n+/// corresponding to the distinct values represented in the data.\n+///\n+/// For example, the array\n+///\n+///   [\"foo\", \"bar\", \"foo\", \"bar\", \"foo\", \"bar\"]\n+///\n+/// with dictionary [\"bar\", \"foo\"], would have dictionary array representation\n+///\n+///   indices: [1, 0, 1, 0, 1, 0]\n+///   dictionary: [\"bar\", \"foo\"]\n+///\n+/// The indices in principle may have any integer type (signed or unsigned),\n+/// though presently data in IPC exchanges must be signed int32.\n class ARROW_EXPORT DictionaryArray : public Array {\n  public:\n   using TypeClass = DictionaryType;\ndiff --git a/cpp/src/arrow/builder.cc b/cpp/src/arrow/builder.cc\nindex 677f2fd256..2210dd30cd 100644\n--- a/cpp/src/arrow/builder.cc\n+++ b/cpp/src/arrow/builder.cc\n@@ -47,6 +47,7 @@\n namespace arrow {\n \n using internal::AdaptiveIntBuilderBase;\n+using internal::checked_cast;\n \n namespace {\n \ndiff --git a/cpp/src/arrow/builder.h b/cpp/src/arrow/builder.h\nindex 96741974f4..1347cae3eb 100644\n--- a/cpp/src/arrow/builder.h\n+++ b/cpp/src/arrow/builder.h\n@@ -310,7 +310,7 @@ class ARROW_EXPORT PrimitiveBuilder : public ArrayBuilder {\n   template <typename ValuesIter, typename ValidIter>\n   typename std::enable_if<!std::is_pointer<ValidIter>::value, Status>::type AppendValues(\n       ValuesIter values_begin, ValuesIter values_end, ValidIter valid_begin) {\n-    static_assert(!is_null_pointer<ValidIter>::value,\n+    static_assert(!internal::is_null_pointer<ValidIter>::value,\n                   \"Don't pass a NULLPTR directly as valid_begin, use the 2-argument \"\n                   \"version instead\");\n     int64_t length = static_cast<int64_t>(std::distance(values_begin, values_end));\n@@ -727,7 +727,7 @@ class ARROW_EXPORT BooleanBuilder : public ArrayBuilder {\n   template <typename ValuesIter, typename ValidIter>\n   typename std::enable_if<!std::is_pointer<ValidIter>::value, Status>::type AppendValues(\n       ValuesIter values_begin, ValuesIter values_end, ValidIter valid_begin) {\n-    static_assert(!is_null_pointer<ValidIter>::value,\n+    static_assert(!internal::is_null_pointer<ValidIter>::value,\n                   \"Don't pass a NULLPTR directly as valid_begin, use the 2-argument \"\n                   \"version instead\");\n     int64_t length = static_cast<int64_t>(std::distance(values_begin, values_end));\ndiff --git a/cpp/src/arrow/compare.cc b/cpp/src/arrow/compare.cc\nindex 87016ba719..9ed202deb7 100644\n--- a/cpp/src/arrow/compare.cc\n+++ b/cpp/src/arrow/compare.cc\n@@ -35,6 +35,9 @@\n \n namespace arrow {\n \n+using internal::BitmapEquals;\n+using internal::checked_cast;\n+\n // ----------------------------------------------------------------------\n // Public method implementations\n \ndiff --git a/cpp/src/arrow/compute/context.cc b/cpp/src/arrow/compute/context.cc\nindex ab2b595f74..82c0c238ae 100644\n--- a/cpp/src/arrow/compute/context.cc\n+++ b/cpp/src/arrow/compute/context.cc\n@@ -26,7 +26,7 @@ namespace arrow {\n namespace compute {\n \n FunctionContext::FunctionContext(MemoryPool* pool)\n-    : pool_(pool), cpu_info_(CpuInfo::GetInstance()) {}\n+    : pool_(pool), cpu_info_(internal::CpuInfo::GetInstance()) {}\n \n MemoryPool* FunctionContext::memory_pool() const { return pool_; }\n \ndiff --git a/cpp/src/arrow/compute/context.h b/cpp/src/arrow/compute/context.h\nindex 7df61e6b0d..48dd57f064 100644\n--- a/cpp/src/arrow/compute/context.h\n+++ b/cpp/src/arrow/compute/context.h\n@@ -27,7 +27,9 @@\n \n namespace arrow {\n \n+namespace internal {\n class CpuInfo;\n+}  // namespace internal\n \n namespace compute {\n \n@@ -63,12 +65,12 @@ class ARROW_EXPORT FunctionContext {\n   /// \\brief Return the current status of the context\n   const Status& status() const { return status_; }\n \n-  CpuInfo* cpu_info() const { return cpu_info_; }\n+  internal::CpuInfo* cpu_info() const { return cpu_info_; }\n \n  private:\n   Status status_;\n   MemoryPool* pool_;\n-  CpuInfo* cpu_info_;\n+  internal::CpuInfo* cpu_info_;\n };\n \n }  // namespace compute\ndiff --git a/cpp/src/arrow/compute/kernels/boolean.cc b/cpp/src/arrow/compute/kernels/boolean.cc\nindex 64853be178..d51b5d47e0 100644\n--- a/cpp/src/arrow/compute/kernels/boolean.cc\n+++ b/cpp/src/arrow/compute/kernels/boolean.cc\n@@ -24,6 +24,14 @@\n #include <vector>\n \n namespace arrow {\n+\n+using internal::BitmapAnd;\n+using internal::BitmapOr;\n+using internal::BitmapXor;\n+using internal::CopyBitmap;\n+using internal::CountSetBits;\n+using internal::InvertBitmap;\n+\n namespace compute {\n \n class InvertKernel : public UnaryKernel {\ndiff --git a/cpp/src/arrow/compute/kernels/cast.cc b/cpp/src/arrow/compute/kernels/cast.cc\nindex 639f3f85c4..c9e2bdb1ed 100644\n--- a/cpp/src/arrow/compute/kernels/cast.cc\n+++ b/cpp/src/arrow/compute/kernels/cast.cc\n@@ -71,6 +71,10 @@\n #endif  // ARROW_EXTRA_ERROR_CONTEXT\n \n namespace arrow {\n+\n+using internal::checked_cast;\n+using internal::CopyBitmap;\n+\n namespace compute {\n \n constexpr int64_t kMillisecondsInDay = 86400000;\ndiff --git a/cpp/src/arrow/compute/kernels/hash.cc b/cpp/src/arrow/compute/kernels/hash.cc\nindex 212f788eda..51e0a08bfe 100644\n--- a/cpp/src/arrow/compute/kernels/hash.cc\n+++ b/cpp/src/arrow/compute/kernels/hash.cc\n@@ -35,6 +35,9 @@\n #include \"arrow/util/hash.h\"\n \n namespace arrow {\n+\n+using internal::checked_cast;\n+\n namespace compute {\n \n // TODO(wesm): Enable top-level dispatch to SSE4 hashing if it is enabled\ndiff --git a/cpp/src/arrow/flight/flight-benchmark.cc b/cpp/src/arrow/flight/flight-benchmark.cc\nindex 1110ec3b4c..898d015431 100644\n--- a/cpp/src/arrow/flight/flight-benchmark.cc\n+++ b/cpp/src/arrow/flight/flight-benchmark.cc\n@@ -43,9 +43,11 @@ DEFINE_int32(records_per_batch, 4096, \"Total records per batch within stream\");\n \n namespace perf = arrow::flight::perf;\n \n-using ThreadPool = ::arrow::internal::ThreadPool;\n-\n namespace arrow {\n+\n+using internal::StopWatch;\n+using internal::ThreadPool;\n+\n namespace flight {\n \n struct PerformanceStats {\ndiff --git a/cpp/src/arrow/io/io-memory-test.cc b/cpp/src/arrow/io/io-memory-test.cc\nindex 67f3cf5473..9751f17a82 100644\n--- a/cpp/src/arrow/io/io-memory-test.cc\n+++ b/cpp/src/arrow/io/io-memory-test.cc\n@@ -32,6 +32,9 @@\n #include \"arrow/util/checked_cast.h\"\n \n namespace arrow {\n+\n+using internal::checked_cast;\n+\n namespace io {\n \n class TestBufferOutputStream : public ::testing::Test {\ndiff --git a/cpp/src/arrow/io/io-readahead-test.cc b/cpp/src/arrow/io/io-readahead-test.cc\nindex fa0a138def..b1b7b43955 100644\n--- a/cpp/src/arrow/io/io-readahead-test.cc\n+++ b/cpp/src/arrow/io/io-readahead-test.cc\n@@ -33,6 +33,9 @@\n #include \"arrow/util/checked_cast.h\"\n \n namespace arrow {\n+\n+using internal::checked_cast;\n+\n namespace io {\n namespace internal {\n \ndiff --git a/cpp/src/arrow/ipc/feather-test.cc b/cpp/src/arrow/ipc/feather-test.cc\nindex c5badc3f14..1ee36d7c87 100644\n--- a/cpp/src/arrow/ipc/feather-test.cc\n+++ b/cpp/src/arrow/ipc/feather-test.cc\n@@ -34,6 +34,9 @@\n #include \"arrow/util/checked_cast.h\"\n \n namespace arrow {\n+\n+using internal::checked_cast;\n+\n namespace ipc {\n namespace feather {\n \ndiff --git a/cpp/src/arrow/ipc/feather.cc b/cpp/src/arrow/ipc/feather.cc\nindex 1cd3007f36..eb7e19e32a 100644\n--- a/cpp/src/arrow/ipc/feather.cc\n+++ b/cpp/src/arrow/ipc/feather.cc\n@@ -43,6 +43,9 @@\n #include \"arrow/visitor.h\"\n \n namespace arrow {\n+\n+using internal::checked_cast;\n+\n namespace ipc {\n namespace feather {\n \ndiff --git a/cpp/src/arrow/ipc/ipc-read-write-test.cc b/cpp/src/arrow/ipc/ipc-read-write-test.cc\nindex f8e29f50ac..55c5f409ea 100644\n--- a/cpp/src/arrow/ipc/ipc-read-write-test.cc\n+++ b/cpp/src/arrow/ipc/ipc-read-write-test.cc\n@@ -42,6 +42,9 @@\n #include \"arrow/util/checked_cast.h\"\n \n namespace arrow {\n+\n+using internal::checked_cast;\n+\n namespace ipc {\n \n using BatchVector = std::vector<std::shared_ptr<RecordBatch>>;\ndiff --git a/cpp/src/arrow/ipc/json-internal.cc b/cpp/src/arrow/ipc/json-internal.cc\nindex d58bc964cc..c235fd2261 100644\n--- a/cpp/src/arrow/ipc/json-internal.cc\n+++ b/cpp/src/arrow/ipc/json-internal.cc\n@@ -40,6 +40,9 @@\n #include \"arrow/visitor_inline.h\"\n \n namespace arrow {\n+\n+using internal::checked_cast;\n+\n namespace ipc {\n namespace internal {\n namespace json {\ndiff --git a/cpp/src/arrow/ipc/metadata-internal.cc b/cpp/src/arrow/ipc/metadata-internal.cc\nindex 3d9b97ca9b..5ac0735c2b 100644\n--- a/cpp/src/arrow/ipc/metadata-internal.cc\n+++ b/cpp/src/arrow/ipc/metadata-internal.cc\n@@ -46,6 +46,7 @@\n namespace arrow {\n \n namespace flatbuf = org::apache::arrow::flatbuf;\n+using internal::checked_cast;\n \n namespace ipc {\n namespace internal {\ndiff --git a/cpp/src/arrow/ipc/writer.cc b/cpp/src/arrow/ipc/writer.cc\nindex 7568bfd092..5fcc2b0a21 100644\n--- a/cpp/src/arrow/ipc/writer.cc\n+++ b/cpp/src/arrow/ipc/writer.cc\n@@ -42,6 +42,10 @@\n #include \"arrow/util/logging.h\"\n \n namespace arrow {\n+\n+using internal::checked_cast;\n+using internal::CopyBitmap;\n+\n namespace ipc {\n \n using internal::FileBlock;\ndiff --git a/cpp/src/arrow/pretty_print.cc b/cpp/src/arrow/pretty_print.cc\nindex 141b0a447c..09d8edf77a 100644\n--- a/cpp/src/arrow/pretty_print.cc\n+++ b/cpp/src/arrow/pretty_print.cc\n@@ -35,6 +35,8 @@\n \n namespace arrow {\n \n+using internal::checked_cast;\n+\n class PrettyPrinter {\n  public:\n   PrettyPrinter(int indent, int indent_size, int window, std::ostream* sink)\ndiff --git a/cpp/src/arrow/python/arrow_to_pandas.cc b/cpp/src/arrow/python/arrow_to_pandas.cc\nindex 6a142cd7e3..a7d98da6b3 100644\n--- a/cpp/src/arrow/python/arrow_to_pandas.cc\n+++ b/cpp/src/arrow/python/arrow_to_pandas.cc\n@@ -56,6 +56,10 @@\n #include \"arrow/python/util/datetime.h\"\n \n namespace arrow {\n+\n+using internal::checked_cast;\n+using internal::ParallelFor;\n+\n namespace py {\n \n using internal::kNanosecondsInDay;\ndiff --git a/cpp/src/arrow/python/deserialize.cc b/cpp/src/arrow/python/deserialize.cc\nindex 3bf23d75c7..f44b3f5107 100644\n--- a/cpp/src/arrow/python/deserialize.cc\n+++ b/cpp/src/arrow/python/deserialize.cc\n@@ -45,6 +45,9 @@\n #include \"arrow/python/util/datetime.h\"\n \n namespace arrow {\n+\n+using internal::checked_cast;\n+\n namespace py {\n \n Status CallDeserializeCallback(PyObject* context, PyObject* value,\ndiff --git a/cpp/src/arrow/python/helpers.cc b/cpp/src/arrow/python/helpers.cc\nindex 8aa78f80c9..2f43db6505 100644\n--- a/cpp/src/arrow/python/helpers.cc\n+++ b/cpp/src/arrow/python/helpers.cc\n@@ -33,6 +33,9 @@\n #include <arrow/api.h>\n \n namespace arrow {\n+\n+using internal::checked_cast;\n+\n namespace py {\n \n #define GET_PRIMITIVE_TYPE(NAME, FACTORY) \\\ndiff --git a/cpp/src/arrow/python/numpy_to_arrow.cc b/cpp/src/arrow/python/numpy_to_arrow.cc\nindex ece00c286e..37141d7642 100644\n--- a/cpp/src/arrow/python/numpy_to_arrow.cc\n+++ b/cpp/src/arrow/python/numpy_to_arrow.cc\n@@ -57,6 +57,10 @@\n #include \"arrow/python/util/datetime.h\"\n \n namespace arrow {\n+\n+using internal::checked_cast;\n+using internal::CopyBitmap;\n+\n namespace py {\n \n using internal::NumPyTypeSize;\ndiff --git a/cpp/src/arrow/python/python-test.cc b/cpp/src/arrow/python/python-test.cc\nindex 70bbe0085a..2d15ce45b3 100644\n--- a/cpp/src/arrow/python/python-test.cc\n+++ b/cpp/src/arrow/python/python-test.cc\n@@ -33,6 +33,9 @@\n #include \"arrow/util/checked_cast.h\"\n \n namespace arrow {\n+\n+using internal::checked_cast;\n+\n namespace py {\n \n TEST(PyBuffer, InvalidInputObject) {\ndiff --git a/cpp/src/arrow/python/python_to_arrow.cc b/cpp/src/arrow/python/python_to_arrow.cc\nindex 783abd80f2..e42ac51c78 100644\n--- a/cpp/src/arrow/python/python_to_arrow.cc\n+++ b/cpp/src/arrow/python/python_to_arrow.cc\n@@ -47,6 +47,9 @@\n #include \"arrow/python/util/datetime.h\"\n \n namespace arrow {\n+\n+using internal::checked_cast;\n+\n namespace py {\n \n // ----------------------------------------------------------------------\ndiff --git a/cpp/src/arrow/python/serialize.cc b/cpp/src/arrow/python/serialize.cc\nindex 92a6519f11..b711ad41d5 100644\n--- a/cpp/src/arrow/python/serialize.cc\n+++ b/cpp/src/arrow/python/serialize.cc\n@@ -50,6 +50,9 @@\n constexpr int32_t kMaxRecursionDepth = 100;\n \n namespace arrow {\n+\n+using internal::checked_cast;\n+\n namespace py {\n \n /// A Sequence is a heterogeneous collections of elements. It can contain\ndiff --git a/cpp/src/arrow/table_builder-test.cc b/cpp/src/arrow/table_builder-test.cc\nindex 32d4bdb68b..74f5ce0969 100644\n--- a/cpp/src/arrow/table_builder-test.cc\n+++ b/cpp/src/arrow/table_builder-test.cc\n@@ -33,6 +33,8 @@\n \n namespace arrow {\n \n+using internal::checked_cast;\n+\n class TestRecordBatchBuilder : public TestBase {\n  public:\n };\ndiff --git a/cpp/src/arrow/table_builder.h b/cpp/src/arrow/table_builder.h\nindex 33a0705243..bd6b32bdcf 100644\n--- a/cpp/src/arrow/table_builder.h\n+++ b/cpp/src/arrow/table_builder.h\n@@ -66,7 +66,7 @@ class ARROW_EXPORT RecordBatchBuilder {\n   /// \\return pointer to template type\n   template <typename T>\n   T* GetFieldAs(int i) {\n-    return checked_cast<T*>(raw_field_builders_[i]);\n+    return internal::checked_cast<T*>(raw_field_builders_[i]);\n   }\n \n   /// \\brief Finish current batch and optionally reset\ndiff --git a/cpp/src/arrow/tensor.cc b/cpp/src/arrow/tensor.cc\nindex b0b2b4b1f0..7de7558342 100644\n--- a/cpp/src/arrow/tensor.cc\n+++ b/cpp/src/arrow/tensor.cc\n@@ -32,6 +32,8 @@\n \n namespace arrow {\n \n+using internal::checked_cast;\n+\n static void ComputeRowMajorStrides(const FixedWidthType& type,\n                                    const std::vector<int64_t>& shape,\n                                    std::vector<int64_t>* strides) {\ndiff --git a/cpp/src/arrow/type-test.cc b/cpp/src/arrow/type-test.cc\nindex 16f0538ea5..6291cf611c 100644\n--- a/cpp/src/arrow/type-test.cc\n+++ b/cpp/src/arrow/type-test.cc\n@@ -34,6 +34,8 @@ using std::vector;\n \n namespace arrow {\n \n+using internal::checked_cast;\n+\n TEST(TestField, Basics) {\n   Field f0(\"f0\", int32());\n   Field f0_nn(\"f0\", int32(), false);\ndiff --git a/cpp/src/arrow/type.cc b/cpp/src/arrow/type.cc\nindex 51c4bbf88d..21df342686 100644\n--- a/cpp/src/arrow/type.cc\n+++ b/cpp/src/arrow/type.cc\n@@ -34,6 +34,8 @@\n \n namespace arrow {\n \n+using internal::checked_cast;\n+\n bool Field::HasMetadata() const {\n   return (metadata_ != nullptr) && (metadata_->size() > 0);\n }\ndiff --git a/cpp/src/arrow/type.h b/cpp/src/arrow/type.h\nindex f5d2e533e8..8688c2a070 100644\n--- a/cpp/src/arrow/type.h\n+++ b/cpp/src/arrow/type.h\n@@ -38,10 +38,8 @@ namespace arrow {\n \n /// \\brief Main data type enumeration\n ///\n-/// Data types in this library are all *logical*. They can be expressed as\n-/// either a primitive physical type (bytes or bits of some fixed size), a\n-/// nested type consisting of other data types, or another data type (e.g. a\n-/// timestamp encoded as an int64)\n+/// This enumeration provides a quick way to interrogate the category\n+/// of a DataType instance.\n struct Type {\n   enum type {\n     /// A NULL type having no physical storage\n@@ -134,6 +132,15 @@ struct Type {\n   };\n };\n \n+/// \\brief Base class for all data types\n+///\n+/// Data types in this library are all *logical*. They can be expressed as\n+/// either a primitive physical type (bytes or bits of some fixed size), a\n+/// nested type consisting of other data types, or another data type (e.g. a\n+/// timestamp encoded as an int64).\n+///\n+/// Simple datatypes may be entirely described by their Type id, but\n+/// complex datatypes are usually parametric.\n class ARROW_EXPORT DataType {\n  public:\n   explicit DataType(Type::type id) : id_(id) {}\n@@ -178,6 +185,7 @@ inline std::ostream& operator<<(std::ostream& os, const DataType& type) {\n   return os;\n }\n \n+/// \\brief Base class for all fixed-width data types\n class ARROW_EXPORT FixedWidthType : public DataType {\n  public:\n   using DataType::DataType;\n@@ -185,22 +193,26 @@ class ARROW_EXPORT FixedWidthType : public DataType {\n   virtual int bit_width() const = 0;\n };\n \n+/// \\brief Base class for all data types representing primitive values\n class ARROW_EXPORT PrimitiveCType : public FixedWidthType {\n  public:\n   using FixedWidthType::FixedWidthType;\n };\n \n+/// \\brief Base class for all numeric data types\n class ARROW_EXPORT Number : public PrimitiveCType {\n  public:\n   using PrimitiveCType::PrimitiveCType;\n };\n \n+/// \\brief Base class for all integral data types\n class ARROW_EXPORT Integer : public Number {\n  public:\n   using Number::Number;\n   virtual bool is_signed() const = 0;\n };\n \n+/// \\brief Base class for all floating-point data types\n class ARROW_EXPORT FloatingPoint : public Number {\n  public:\n   using Number::Number;\n@@ -208,8 +220,7 @@ class ARROW_EXPORT FloatingPoint : public Number {\n   virtual Precision precision() const = 0;\n };\n \n-/// \\class ParametricType\n-/// \\brief A superclass for types having additional metadata\n+/// \\brief Base class for all parametric data types\n class ParametricType {};\n \n class ARROW_EXPORT NestedType : public DataType, public ParametricType {\n@@ -219,8 +230,13 @@ class ARROW_EXPORT NestedType : public DataType, public ParametricType {\n \n class NoExtraMeta {};\n \n-// A field is a piece of metadata that includes (for now) a name and a data\n-// type\n+/// \\brief The combination of a field name and data type, with optional metadata\n+///\n+/// Fields are used to describe the individual constituents of a\n+/// nested DataType or a Schema.\n+///\n+/// A field's metadata is represented by a KeyValueMetadata instance,\n+/// which holds arbitrary key-value pairs.\n class ARROW_EXPORT Field {\n  public:\n   Field(const std::string& name, const std::shared_ptr<DataType>& type,\n@@ -274,7 +290,7 @@ class ARROW_EXPORT CTypeImpl : public BASE {\n   int bit_width() const override { return static_cast<int>(sizeof(C_TYPE) * CHAR_BIT); }\n \n   Status Accept(TypeVisitor* visitor) const override {\n-    return visitor->Visit(checked_cast<const DERIVED&>(*this));\n+    return visitor->Visit(internal::checked_cast<const DERIVED&>(*this));\n   }\n \n   std::string ToString() const override { return this->name(); }\n@@ -287,6 +303,7 @@ class IntegerTypeImpl : public detail::CTypeImpl<DERIVED, Integer, TYPE_ID, C_TY\n \n }  // namespace detail\n \n+/// Concrete type class for always-null data\n class ARROW_EXPORT NullType : public DataType, public NoExtraMeta {\n  public:\n   static constexpr Type::type type_id = Type::NA;\n@@ -299,6 +316,7 @@ class ARROW_EXPORT NullType : public DataType, public NoExtraMeta {\n   std::string name() const override { return \"null\"; }\n };\n \n+/// Concrete type class for boolean data\n class ARROW_EXPORT BooleanType : public FixedWidthType, public NoExtraMeta {\n  public:\n   static constexpr Type::type type_id = Type::BOOL;\n@@ -312,54 +330,63 @@ class ARROW_EXPORT BooleanType : public FixedWidthType, public NoExtraMeta {\n   std::string name() const override { return \"bool\"; }\n };\n \n+/// Concrete type class for unsigned 8-bit integer data\n class ARROW_EXPORT UInt8Type\n     : public detail::IntegerTypeImpl<UInt8Type, Type::UINT8, uint8_t> {\n  public:\n   std::string name() const override { return \"uint8\"; }\n };\n \n+/// Concrete type class for signed 8-bit integer data\n class ARROW_EXPORT Int8Type\n     : public detail::IntegerTypeImpl<Int8Type, Type::INT8, int8_t> {\n  public:\n   std::string name() const override { return \"int8\"; }\n };\n \n+/// Concrete type class for unsigned 16-bit integer data\n class ARROW_EXPORT UInt16Type\n     : public detail::IntegerTypeImpl<UInt16Type, Type::UINT16, uint16_t> {\n  public:\n   std::string name() const override { return \"uint16\"; }\n };\n \n+/// Concrete type class for signed 16-bit integer data\n class ARROW_EXPORT Int16Type\n     : public detail::IntegerTypeImpl<Int16Type, Type::INT16, int16_t> {\n  public:\n   std::string name() const override { return \"int16\"; }\n };\n \n+/// Concrete type class for unsigned 32-bit integer data\n class ARROW_EXPORT UInt32Type\n     : public detail::IntegerTypeImpl<UInt32Type, Type::UINT32, uint32_t> {\n  public:\n   std::string name() const override { return \"uint32\"; }\n };\n \n+/// Concrete type class for signed 32-bit integer data\n class ARROW_EXPORT Int32Type\n     : public detail::IntegerTypeImpl<Int32Type, Type::INT32, int32_t> {\n  public:\n   std::string name() const override { return \"int32\"; }\n };\n \n+/// Concrete type class for unsigned 64-bit integer data\n class ARROW_EXPORT UInt64Type\n     : public detail::IntegerTypeImpl<UInt64Type, Type::UINT64, uint64_t> {\n  public:\n   std::string name() const override { return \"uint64\"; }\n };\n \n+/// Concrete type class for signed 64-bit integer data\n class ARROW_EXPORT Int64Type\n     : public detail::IntegerTypeImpl<Int64Type, Type::INT64, int64_t> {\n  public:\n   std::string name() const override { return \"int64\"; }\n };\n \n+/// Concrete type class for 16-bit floating-point data\n class ARROW_EXPORT HalfFloatType\n     : public detail::CTypeImpl<HalfFloatType, FloatingPoint, Type::HALF_FLOAT, uint16_t> {\n  public:\n@@ -367,6 +394,7 @@ class ARROW_EXPORT HalfFloatType\n   std::string name() const override { return \"halffloat\"; }\n };\n \n+/// Concrete type class for 32-bit floating-point data (C \"float\")\n class ARROW_EXPORT FloatType\n     : public detail::CTypeImpl<FloatType, FloatingPoint, Type::FLOAT, float> {\n  public:\n@@ -374,6 +402,7 @@ class ARROW_EXPORT FloatType\n   std::string name() const override { return \"float\"; }\n };\n \n+/// Concrete type class for 64-bit floating-point data (C \"double\")\n class ARROW_EXPORT DoubleType\n     : public detail::CTypeImpl<DoubleType, FloatingPoint, Type::DOUBLE, double> {\n  public:\n@@ -381,6 +410,11 @@ class ARROW_EXPORT DoubleType\n   std::string name() const override { return \"double\"; }\n };\n \n+/// \\brief Concrete type class for list data\n+///\n+/// List data is nested data where each value is a variable number of\n+/// child items.  Lists can be recursively nested, for example\n+/// list(list(int32)).\n class ARROW_EXPORT ListType : public NestedType {\n  public:\n   static constexpr Type::type type_id = Type::LIST;\n@@ -403,7 +437,7 @@ class ARROW_EXPORT ListType : public NestedType {\n   std::string name() const override { return \"list\"; }\n };\n \n-// BinaryType type is represents lists of 1-byte values.\n+/// \\brief Concrete type class for variable-size binary data\n class ARROW_EXPORT BinaryType : public DataType, public NoExtraMeta {\n  public:\n   static constexpr Type::type type_id = Type::BINARY;\n@@ -419,7 +453,7 @@ class ARROW_EXPORT BinaryType : public DataType, public NoExtraMeta {\n   explicit BinaryType(Type::type logical_type) : DataType(logical_type) {}\n };\n \n-// BinaryType type is represents lists of 1-byte values.\n+/// \\brief Concrete type class for fixed-size binary data\n class ARROW_EXPORT FixedSizeBinaryType : public FixedWidthType, public ParametricType {\n  public:\n   static constexpr Type::type type_id = Type::FIXED_SIZE_BINARY;\n@@ -440,7 +474,7 @@ class ARROW_EXPORT FixedSizeBinaryType : public FixedWidthType, public Parametri\n   int32_t byte_width_;\n };\n \n-// UTF-8 encoded strings\n+/// \\brief Concrete type class for variable-size string data, utf8-encoded\n class ARROW_EXPORT StringType : public BinaryType {\n  public:\n   static constexpr Type::type type_id = Type::STRING;\n@@ -452,6 +486,7 @@ class ARROW_EXPORT StringType : public BinaryType {\n   std::string name() const override { return \"utf8\"; }\n };\n \n+/// \\brief Concrete type class for struct data\n class ARROW_EXPORT StructType : public NestedType {\n  public:\n   static constexpr Type::type type_id = Type::STRUCT;\n@@ -476,6 +511,7 @@ class ARROW_EXPORT StructType : public NestedType {\n   mutable std::unordered_map<std::string, int> name_to_index_;\n };\n \n+/// \\brief Base type class for (fixed-size) decimal data\n class ARROW_EXPORT DecimalType : public FixedSizeBinaryType {\n  public:\n   explicit DecimalType(int32_t byte_width, int32_t precision, int32_t scale)\n@@ -491,6 +527,7 @@ class ARROW_EXPORT DecimalType : public FixedSizeBinaryType {\n   int32_t scale_;\n };\n \n+/// \\brief Concrete type class for 128-bit decimal data\n class ARROW_EXPORT Decimal128Type : public DecimalType {\n  public:\n   static constexpr Type::type type_id = Type::DECIMAL;\n@@ -507,6 +544,7 @@ struct UnionMode {\n   enum type { SPARSE, DENSE };\n };\n \n+/// \\brief Concrete type class for union data\n class ARROW_EXPORT UnionType : public NestedType {\n  public:\n   static constexpr Type::type type_id = Type::UNION;\n@@ -537,6 +575,7 @@ class ARROW_EXPORT UnionType : public NestedType {\n \n enum class DateUnit : char { DAY = 0, MILLI = 1 };\n \n+/// \\brief Base type class for date data\n class ARROW_EXPORT DateType : public FixedWidthType {\n  public:\n   DateUnit unit() const { return unit_; }\n@@ -546,7 +585,7 @@ class ARROW_EXPORT DateType : public FixedWidthType {\n   DateUnit unit_;\n };\n \n-/// Date as int32_t days since UNIX epoch\n+/// Concrete type class for 32-bit date data (as number of days since UNIX epoch)\n class ARROW_EXPORT Date32Type : public DateType {\n  public:\n   static constexpr Type::type type_id = Type::DATE32;\n@@ -563,7 +602,7 @@ class ARROW_EXPORT Date32Type : public DateType {\n   std::string name() const override { return \"date32\"; }\n };\n \n-/// Date as int64_t milliseconds since UNIX epoch\n+/// Concrete type class for 64-bit date data (as number of milliseconds since UNIX epoch)\n class ARROW_EXPORT Date64Type : public DateType {\n  public:\n   static constexpr Type::type type_id = Type::DATE64;\n@@ -602,6 +641,7 @@ static inline std::ostream& operator<<(std::ostream& os, TimeUnit::type unit) {\n   return os;\n }\n \n+/// Base type class for time data\n class ARROW_EXPORT TimeType : public FixedWidthType, public ParametricType {\n  public:\n   TimeUnit::type unit() const { return unit_; }\n@@ -693,6 +733,7 @@ class ARROW_EXPORT IntervalType : public FixedWidthType {\n // ----------------------------------------------------------------------\n // DictionaryType (for categorical or dictionary-encoded data)\n \n+/// Concrete type class for dictionary data\n class ARROW_EXPORT DictionaryType : public FixedWidthType {\n  public:\n   static constexpr Type::type type_id = Type::DICTIONARY;\n@@ -789,55 +830,58 @@ class ARROW_EXPORT Schema {\n };\n \n // ----------------------------------------------------------------------\n-// Factory functions\n+// Parametric factory functions\n+// Other factory functions are in type_fwd.h\n \n-/// \\brief Make an instance of FixedSizeBinaryType\n+/// \\brief Create a FixedSizeBinaryType instance\n ARROW_EXPORT\n std::shared_ptr<DataType> fixed_size_binary(int32_t byte_width);\n \n-/// \\brief Make an instance of DecimalType\n+/// \\brief Create a Decimal128Type instance\n ARROW_EXPORT\n std::shared_ptr<DataType> decimal(int32_t precision, int32_t scale);\n \n-/// \\brief Make an instance of ListType\n+/// \\brief Create a ListType instance from its child Field type\n ARROW_EXPORT\n std::shared_ptr<DataType> list(const std::shared_ptr<Field>& value_type);\n \n-/// \\brief Make an instance of ListType\n+/// \\brief Create a ListType instance from its child DataType\n ARROW_EXPORT\n std::shared_ptr<DataType> list(const std::shared_ptr<DataType>& value_type);\n \n-/// \\brief Make an instance of TimestampType\n+/// \\brief Create a TimestampType instance from its unit\n ARROW_EXPORT\n std::shared_ptr<DataType> timestamp(TimeUnit::type unit);\n \n-/// \\brief Make an instance of TimestampType\n+/// \\brief Create a TimestampType instance from its unit and timezone\n ARROW_EXPORT\n std::shared_ptr<DataType> timestamp(TimeUnit::type unit, const std::string& timezone);\n \n-/// \\brief Create an instance of 32-bit time type\n+/// \\brief Create a 32-bit time type instance\n+///\n /// Unit can be either SECOND or MILLI\n std::shared_ptr<DataType> ARROW_EXPORT time32(TimeUnit::type unit);\n \n-/// \\brief Create an instance of 64-bit time type\n+/// \\brief Create a 64-bit time type instance\n+///\n /// Unit can be either MICRO or NANO\n std::shared_ptr<DataType> ARROW_EXPORT time64(TimeUnit::type unit);\n \n-/// \\brief Create an instance of Struct type\n+/// \\brief Create a StructType instance\n std::shared_ptr<DataType> ARROW_EXPORT\n struct_(const std::vector<std::shared_ptr<Field>>& fields);\n \n-/// \\brief Create an instance of Union type\n+/// \\brief Create a UnionType instance\n std::shared_ptr<DataType> ARROW_EXPORT\n union_(const std::vector<std::shared_ptr<Field>>& child_fields,\n        const std::vector<uint8_t>& type_codes, UnionMode::type mode = UnionMode::SPARSE);\n \n-/// \\brief Create and instance of Union type\n+/// \\brief Create a UnionType instance\n std::shared_ptr<DataType> ARROW_EXPORT\n union_(const std::vector<std::shared_ptr<Array>>& children,\n        UnionMode::type mode = UnionMode::SPARSE);\n \n-/// \\brief Create an instance of Dictionary type\n+/// \\brief Create a DictionaryType instance\n std::shared_ptr<DataType> ARROW_EXPORT\n dictionary(const std::shared_ptr<DataType>& index_type,\n            const std::shared_ptr<Array>& values, bool ordered = false);\ndiff --git a/cpp/src/arrow/type_fwd.h b/cpp/src/arrow/type_fwd.h\nindex 9d8a23ce07..dbbe7092b4 100644\n--- a/cpp/src/arrow/type_fwd.h\n+++ b/cpp/src/arrow/type_fwd.h\n@@ -135,26 +135,42 @@ using IntervalArray = NumericArray<IntervalType>;\n \n // ----------------------------------------------------------------------\n // (parameter-free) Factory functions\n+// Other factory functions are in type.h\n \n+/// \\brief Return a NullType instance\n std::shared_ptr<DataType> ARROW_EXPORT null();\n+/// \\brief Return a BooleanType instance\n std::shared_ptr<DataType> ARROW_EXPORT boolean();\n+/// \\brief Return a Int8Type instance\n std::shared_ptr<DataType> ARROW_EXPORT int8();\n+/// \\brief Return a Int16Type instance\n std::shared_ptr<DataType> ARROW_EXPORT int16();\n+/// \\brief Return a Int32Type instance\n std::shared_ptr<DataType> ARROW_EXPORT int32();\n+/// \\brief Return a Int64Type instance\n std::shared_ptr<DataType> ARROW_EXPORT int64();\n+/// \\brief Return a UInt8Type instance\n std::shared_ptr<DataType> ARROW_EXPORT uint8();\n+/// \\brief Return a UInt16Type instance\n std::shared_ptr<DataType> ARROW_EXPORT uint16();\n+/// \\brief Return a UInt32Type instance\n std::shared_ptr<DataType> ARROW_EXPORT uint32();\n+/// \\brief Return a UInt64Type instance\n std::shared_ptr<DataType> ARROW_EXPORT uint64();\n+/// \\brief Return a HalfFloatType instance\n std::shared_ptr<DataType> ARROW_EXPORT float16();\n+/// \\brief Return a FloatType instance\n std::shared_ptr<DataType> ARROW_EXPORT float32();\n+/// \\brief Return a DoubleType instance\n std::shared_ptr<DataType> ARROW_EXPORT float64();\n+/// \\brief Return a StringType instance\n std::shared_ptr<DataType> ARROW_EXPORT utf8();\n+/// \\brief Return a BinaryType instance\n std::shared_ptr<DataType> ARROW_EXPORT binary();\n-\n+/// \\brief Return a Date32Type instance\n std::shared_ptr<DataType> ARROW_EXPORT date32();\n+/// \\brief Return a Date64Type instance\n std::shared_ptr<DataType> ARROW_EXPORT date64();\n-std::shared_ptr<DataType> ARROW_EXPORT decimal_type(int precision, int scale);\n \n }  // namespace arrow\n \ndiff --git a/cpp/src/arrow/util/bit-stream-utils.h b/cpp/src/arrow/util/bit-stream-utils.h\nindex c6b345a872..ff215e488b 100644\n--- a/cpp/src/arrow/util/bit-stream-utils.h\n+++ b/cpp/src/arrow/util/bit-stream-utils.h\n@@ -30,6 +30,7 @@\n #include \"arrow/util/macros.h\"\n \n namespace arrow {\n+namespace BitUtil {\n \n /// Utility class to write bit/byte streams.  This class can write data to either be\n /// bit packed or byte aligned (and a single stream that has a mix of both).\n@@ -403,6 +404,7 @@ inline bool BitReader::GetZigZagVlqInt(int32_t* v) {\n   return true;\n }\n \n+}  // namespace BitUtil\n }  // namespace arrow\n \n #endif  // ARROW_UTIL_BIT_STREAM_UTILS_H\ndiff --git a/cpp/src/arrow/util/bit-util-benchmark.cc b/cpp/src/arrow/util/bit-util-benchmark.cc\nindex 541f863695..beb48df278 100644\n--- a/cpp/src/arrow/util/bit-util-benchmark.cc\n+++ b/cpp/src/arrow/util/bit-util-benchmark.cc\n@@ -26,6 +26,9 @@\n #include \"arrow/util/bit-util.h\"\n \n namespace arrow {\n+\n+using internal::CopyBitmap;\n+\n namespace BitUtil {\n \n // A naive bitmap reader implementation, meant as a baseline against\ndiff --git a/cpp/src/arrow/util/bit-util-test.cc b/cpp/src/arrow/util/bit-util-test.cc\nindex 29ac2aa319..86c493382d 100644\n--- a/cpp/src/arrow/util/bit-util-test.cc\n+++ b/cpp/src/arrow/util/bit-util-test.cc\n@@ -39,6 +39,13 @@\n \n namespace arrow {\n \n+using internal::BitmapAnd;\n+using internal::BitmapOr;\n+using internal::BitmapXor;\n+using internal::CopyBitmap;\n+using internal::CountSetBits;\n+using internal::InvertBitmap;\n+\n template <class BitmapWriter>\n void WriteVectorToWriter(BitmapWriter& writer, const std::vector<int> values) {\n   for (const auto& value : values) {\n@@ -738,9 +745,9 @@ TEST(BitUtil, RoundUpToPowerOf2) {\n }\n \n static void TestZigZag(int32_t v) {\n-  uint8_t buffer[BitReader::MAX_VLQ_BYTE_LEN];\n-  BitWriter writer(buffer, sizeof(buffer));\n-  BitReader reader(buffer, sizeof(buffer));\n+  uint8_t buffer[BitUtil::BitReader::MAX_VLQ_BYTE_LEN];\n+  BitUtil::BitWriter writer(buffer, sizeof(buffer));\n+  BitUtil::BitReader reader(buffer, sizeof(buffer));\n   writer.PutZigZagVlqInt(v);\n   int32_t result;\n   EXPECT_TRUE(reader.GetZigZagVlqInt(&result));\ndiff --git a/cpp/src/arrow/util/bit-util.cc b/cpp/src/arrow/util/bit-util.cc\nindex 604fba459b..a28d27f069 100644\n--- a/cpp/src/arrow/util/bit-util.cc\n+++ b/cpp/src/arrow/util/bit-util.cc\n@@ -35,9 +35,7 @@\n #include \"arrow/util/logging.h\"\n \n namespace arrow {\n-\n namespace BitUtil {\n-\n namespace {\n \n void FillBitsFromBytes(const std::vector<uint8_t>& bytes, uint8_t* bits) {\n@@ -66,6 +64,8 @@ Status BytesToBits(const std::vector<uint8_t>& bytes, MemoryPool* pool,\n \n }  // namespace BitUtil\n \n+namespace internal {\n+\n int64_t CountSetBits(const uint8_t* data, int64_t bit_offset, int64_t length) {\n   constexpr int64_t pop_len = sizeof(uint64_t) * 8;\n \n@@ -333,4 +333,5 @@ Status BitmapXor(MemoryPool* pool, const uint8_t* left, int64_t left_offset,\n       pool, left, left_offset, right, right_offset, length, out_offset, out_buffer);\n }\n \n+}  // namespace internal\n }  // namespace arrow\ndiff --git a/cpp/src/arrow/util/bit-util.h b/cpp/src/arrow/util/bit-util.h\nindex 871636f50c..a22ff0fc4b 100644\n--- a/cpp/src/arrow/util/bit-util.h\n+++ b/cpp/src/arrow/util/bit-util.h\n@@ -246,26 +246,26 @@ static inline void ByteSwap(void* dst, const void* src, int len) {\n \n // Convert to little/big endian format from the machine's native endian format.\n #if ARROW_LITTLE_ENDIAN\n-template <typename T, typename = EnableIfIsOneOf<T, int64_t, uint64_t, int32_t, uint32_t,\n-                                                 int16_t, uint16_t>>\n+template <typename T, typename = internal::EnableIfIsOneOf<T, int64_t, uint64_t, int32_t,\n+                                                           uint32_t, int16_t, uint16_t>>\n static inline T ToBigEndian(T value) {\n   return ByteSwap(value);\n }\n \n-template <typename T, typename = EnableIfIsOneOf<T, int64_t, uint64_t, int32_t, uint32_t,\n-                                                 int16_t, uint16_t>>\n+template <typename T, typename = internal::EnableIfIsOneOf<T, int64_t, uint64_t, int32_t,\n+                                                           uint32_t, int16_t, uint16_t>>\n static inline T ToLittleEndian(T value) {\n   return value;\n }\n #else\n-template <typename T, typename = EnableIfIsOneOf<T, int64_t, uint64_t, int32_t, uint32_t,\n-                                                 int16_t, uint16_t>>\n+template <typename T, typename = internal::EnableIfIsOneOf<T, int64_t, uint64_t, int32_t,\n+                                                           uint32_t, int16_t, uint16_t>>\n static inline T ToBigEndian(T value) {\n   return value;\n }\n \n-template <typename T, typename = EnableIfIsOneOf<T, int64_t, uint64_t, int32_t, uint32_t,\n-                                                 int16_t, uint16_t>>\n+template <typename T, typename = internal::EnableIfIsOneOf<T, int64_t, uint64_t, int32_t,\n+                                                           uint32_t, int16_t, uint16_t>>\n static inline T ToLittleEndian(T value) {\n   return ByteSwap(value);\n }\n@@ -273,26 +273,26 @@ static inline T ToLittleEndian(T value) {\n \n // Convert from big/little endian format to the machine's native endian format.\n #if ARROW_LITTLE_ENDIAN\n-template <typename T, typename = EnableIfIsOneOf<T, int64_t, uint64_t, int32_t, uint32_t,\n-                                                 int16_t, uint16_t>>\n+template <typename T, typename = internal::EnableIfIsOneOf<T, int64_t, uint64_t, int32_t,\n+                                                           uint32_t, int16_t, uint16_t>>\n static inline T FromBigEndian(T value) {\n   return ByteSwap(value);\n }\n \n-template <typename T, typename = EnableIfIsOneOf<T, int64_t, uint64_t, int32_t, uint32_t,\n-                                                 int16_t, uint16_t>>\n+template <typename T, typename = internal::EnableIfIsOneOf<T, int64_t, uint64_t, int32_t,\n+                                                           uint32_t, int16_t, uint16_t>>\n static inline T FromLittleEndian(T value) {\n   return value;\n }\n #else\n-template <typename T, typename = EnableIfIsOneOf<T, int64_t, uint64_t, int32_t, uint32_t,\n-                                                 int16_t, uint16_t>>\n+template <typename T, typename = internal::EnableIfIsOneOf<T, int64_t, uint64_t, int32_t,\n+                                                           uint32_t, int16_t, uint16_t>>\n static inline T FromBigEndian(T value) {\n   return value;\n }\n \n-template <typename T, typename = EnableIfIsOneOf<T, int64_t, uint64_t, int32_t, uint32_t,\n-                                                 int16_t, uint16_t>>\n+template <typename T, typename = internal::EnableIfIsOneOf<T, int64_t, uint64_t, int32_t,\n+                                                           uint32_t, int16_t, uint16_t>>\n static inline T FromLittleEndian(T value) {\n   return ByteSwap(value);\n }\n@@ -552,8 +552,6 @@ void GenerateBitsUnrolled(uint8_t* bitmap, int64_t start_offset, int64_t length,\n   }\n }\n \n-}  // namespace internal\n-\n // ----------------------------------------------------------------------\n // Bitmap utilities\n \n@@ -636,6 +634,7 @@ Status BitmapXor(MemoryPool* pool, const uint8_t* left, int64_t left_offset,\n                  const uint8_t* right, int64_t right_offset, int64_t length,\n                  int64_t out_offset, std::shared_ptr<Buffer>* out_buffer);\n \n+}  // namespace internal\n }  // namespace arrow\n \n #endif  // ARROW_UTIL_BIT_UTIL_H\ndiff --git a/cpp/src/arrow/util/checked-cast-test.cc b/cpp/src/arrow/util/checked-cast-test.cc\nindex 4dc8438fdf..1045038db6 100644\n--- a/cpp/src/arrow/util/checked-cast-test.cc\n+++ b/cpp/src/arrow/util/checked-cast-test.cc\n@@ -22,6 +22,7 @@\n #include \"arrow/util/checked_cast.h\"\n \n namespace arrow {\n+namespace internal {\n \n class Foo {\n  public:\n@@ -68,4 +69,5 @@ TEST(CheckedCast, TestInvalidSubclassCast) {\n #endif\n }\n \n+}  // namespace internal\n }  // namespace arrow\ndiff --git a/cpp/src/arrow/util/checked_cast.h b/cpp/src/arrow/util/checked_cast.h\nindex d3714d8627..33cc0418fe 100644\n--- a/cpp/src/arrow/util/checked_cast.h\n+++ b/cpp/src/arrow/util/checked_cast.h\n@@ -21,6 +21,7 @@\n #include <type_traits>\n \n namespace arrow {\n+namespace internal {\n \n template <typename OutputType, typename InputType>\n inline OutputType checked_cast(InputType&& value) {\n@@ -37,6 +38,7 @@ inline OutputType checked_cast(InputType&& value) {\n #endif\n }\n \n+}  // namespace internal\n }  // namespace arrow\n \n #endif  // ARROW_CAST_H\ndiff --git a/cpp/src/arrow/util/compression-test.cc b/cpp/src/arrow/util/compression-test.cc\nindex 6d8192bad2..11f99e37cb 100644\n--- a/cpp/src/arrow/util/compression-test.cc\n+++ b/cpp/src/arrow/util/compression-test.cc\n@@ -29,6 +29,7 @@ using std::string;\n using std::vector;\n \n namespace arrow {\n+namespace util {\n \n template <Compression::type CODEC>\n void CheckCodecRoundtrip(const vector<uint8_t>& data) {\n@@ -88,4 +89,5 @@ TEST(TestCompressors, ZSTD) { CheckCodec<Compression::ZSTD>(); }\n \n TEST(TestCompressors, Lz4) { CheckCodec<Compression::LZ4>(); }\n \n+}  // namespace util\n }  // namespace arrow\ndiff --git a/cpp/src/arrow/util/compression.cc b/cpp/src/arrow/util/compression.cc\nindex bead6ffc32..459034afc3 100644\n--- a/cpp/src/arrow/util/compression.cc\n+++ b/cpp/src/arrow/util/compression.cc\n@@ -42,6 +42,7 @@\n #include \"arrow/status.h\"\n \n namespace arrow {\n+namespace util {\n \n Codec::~Codec() {}\n \n@@ -92,4 +93,5 @@ Status Codec::Create(Compression::type codec_type, std::unique_ptr<Codec>* resul\n   return Status::OK();\n }\n \n+}  // namespace util\n }  // namespace arrow\ndiff --git a/cpp/src/arrow/util/compression.h b/cpp/src/arrow/util/compression.h\nindex de3837ec72..8c6d7b7131 100644\n--- a/cpp/src/arrow/util/compression.h\n+++ b/cpp/src/arrow/util/compression.h\n@@ -30,6 +30,8 @@ struct Compression {\n   enum type { UNCOMPRESSED, SNAPPY, GZIP, BROTLI, ZSTD, LZ4, LZO };\n };\n \n+namespace util {\n+\n class ARROW_EXPORT Codec {\n  public:\n   virtual ~Codec();\n@@ -48,6 +50,7 @@ class ARROW_EXPORT Codec {\n   virtual const char* name() const = 0;\n };\n \n+}  // namespace util\n }  // namespace arrow\n \n #endif\ndiff --git a/cpp/src/arrow/util/compression_brotli.cc b/cpp/src/arrow/util/compression_brotli.cc\nindex 196c19a660..3dcaf9903b 100644\n--- a/cpp/src/arrow/util/compression_brotli.cc\n+++ b/cpp/src/arrow/util/compression_brotli.cc\n@@ -28,6 +28,7 @@\n #include \"arrow/util/macros.h\"\n \n namespace arrow {\n+namespace util {\n \n // ----------------------------------------------------------------------\n // Brotli implementation\n@@ -61,4 +62,5 @@ Status BrotliCodec::Compress(int64_t input_len, const uint8_t* input,\n   return Status::OK();\n }\n \n+}  // namespace util\n }  // namespace arrow\ndiff --git a/cpp/src/arrow/util/compression_brotli.h b/cpp/src/arrow/util/compression_brotli.h\nindex 89e979d957..23fb3210f2 100644\n--- a/cpp/src/arrow/util/compression_brotli.h\n+++ b/cpp/src/arrow/util/compression_brotli.h\n@@ -25,6 +25,7 @@\n #include \"arrow/util/visibility.h\"\n \n namespace arrow {\n+namespace util {\n \n // Brotli codec.\n class ARROW_EXPORT BrotliCodec : public Codec {\n@@ -40,6 +41,7 @@ class ARROW_EXPORT BrotliCodec : public Codec {\n   const char* name() const override { return \"brotli\"; }\n };\n \n+}  // namespace util\n }  // namespace arrow\n \n #endif  // ARROW_UTIL_COMPRESSION_BROTLI_H\ndiff --git a/cpp/src/arrow/util/compression_lz4.cc b/cpp/src/arrow/util/compression_lz4.cc\nindex 23a5c398b6..58228f5508 100644\n--- a/cpp/src/arrow/util/compression_lz4.cc\n+++ b/cpp/src/arrow/util/compression_lz4.cc\n@@ -25,6 +25,7 @@\n #include \"arrow/util/macros.h\"\n \n namespace arrow {\n+namespace util {\n \n // ----------------------------------------------------------------------\n // Lz4 implementation\n@@ -57,4 +58,5 @@ Status Lz4Codec::Compress(int64_t input_len, const uint8_t* input,\n   return Status::OK();\n }\n \n+}  // namespace util\n }  // namespace arrow\ndiff --git a/cpp/src/arrow/util/compression_lz4.h b/cpp/src/arrow/util/compression_lz4.h\nindex 4ef9c58dc6..2b7b999cfa 100644\n--- a/cpp/src/arrow/util/compression_lz4.h\n+++ b/cpp/src/arrow/util/compression_lz4.h\n@@ -25,6 +25,7 @@\n #include \"arrow/util/visibility.h\"\n \n namespace arrow {\n+namespace util {\n \n // Lz4 codec.\n class ARROW_EXPORT Lz4Codec : public Codec {\n@@ -40,6 +41,7 @@ class ARROW_EXPORT Lz4Codec : public Codec {\n   const char* name() const override { return \"lz4\"; }\n };\n \n+}  // namespace util\n }  // namespace arrow\n \n #endif  // ARROW_UTIL_COMPRESSION_LZ4_H\ndiff --git a/cpp/src/arrow/util/compression_snappy.cc b/cpp/src/arrow/util/compression_snappy.cc\nindex 2edaef7cf4..0f58f18037 100644\n--- a/cpp/src/arrow/util/compression_snappy.cc\n+++ b/cpp/src/arrow/util/compression_snappy.cc\n@@ -28,6 +28,7 @@\n using std::size_t;\n \n namespace arrow {\n+namespace util {\n \n // ----------------------------------------------------------------------\n // Snappy implementation\n@@ -59,4 +60,5 @@ Status SnappyCodec::Compress(int64_t input_len, const uint8_t* input,\n   return Status::OK();\n }\n \n+}  // namespace util\n }  // namespace arrow\ndiff --git a/cpp/src/arrow/util/compression_snappy.h b/cpp/src/arrow/util/compression_snappy.h\nindex 1db21656b8..fcbb689914 100644\n--- a/cpp/src/arrow/util/compression_snappy.h\n+++ b/cpp/src/arrow/util/compression_snappy.h\n@@ -25,6 +25,7 @@\n #include \"arrow/util/visibility.h\"\n \n namespace arrow {\n+namespace util {\n \n class ARROW_EXPORT SnappyCodec : public Codec {\n  public:\n@@ -39,6 +40,7 @@ class ARROW_EXPORT SnappyCodec : public Codec {\n   const char* name() const override { return \"snappy\"; }\n };\n \n+}  // namespace util\n }  // namespace arrow\n \n #endif  // ARROW_UTIL_COMPRESSION_SNAPPY_H\ndiff --git a/cpp/src/arrow/util/compression_zlib.cc b/cpp/src/arrow/util/compression_zlib.cc\nindex 3a520240ec..f1e9fb1d20 100644\n--- a/cpp/src/arrow/util/compression_zlib.cc\n+++ b/cpp/src/arrow/util/compression_zlib.cc\n@@ -30,6 +30,7 @@\n #include \"arrow/util/logging.h\"\n \n namespace arrow {\n+namespace util {\n \n // ----------------------------------------------------------------------\n // gzip implementation\n@@ -249,4 +250,5 @@ Status GZipCodec::Compress(int64_t input_length, const uint8_t* input,\n \n const char* GZipCodec::name() const { return \"gzip\"; }\n \n+}  // namespace util\n }  // namespace arrow\ndiff --git a/cpp/src/arrow/util/compression_zlib.h b/cpp/src/arrow/util/compression_zlib.h\nindex 0a7b0cea15..1e66728b84 100644\n--- a/cpp/src/arrow/util/compression_zlib.h\n+++ b/cpp/src/arrow/util/compression_zlib.h\n@@ -26,6 +26,7 @@\n #include \"arrow/util/visibility.h\"\n \n namespace arrow {\n+namespace util {\n \n // GZip codec.\n class ARROW_EXPORT GZipCodec : public Codec {\n@@ -56,6 +57,7 @@ class ARROW_EXPORT GZipCodec : public Codec {\n   std::unique_ptr<GZipCodecImpl> impl_;\n };\n \n+}  // namespace util\n }  // namespace arrow\n \n #endif  // ARROW_UTIL_COMPRESSION_ZLIB_H\ndiff --git a/cpp/src/arrow/util/compression_zstd.cc b/cpp/src/arrow/util/compression_zstd.cc\nindex 20306f48ef..4b9feee7e1 100644\n--- a/cpp/src/arrow/util/compression_zstd.cc\n+++ b/cpp/src/arrow/util/compression_zstd.cc\n@@ -28,6 +28,7 @@\n using std::size_t;\n \n namespace arrow {\n+namespace util {\n \n // ----------------------------------------------------------------------\n // ZSTD implementation\n@@ -59,4 +60,5 @@ Status ZSTDCodec::Compress(int64_t input_len, const uint8_t* input,\n   return Status::OK();\n }\n \n+}  // namespace util\n }  // namespace arrow\ndiff --git a/cpp/src/arrow/util/compression_zstd.h b/cpp/src/arrow/util/compression_zstd.h\nindex 946393df5f..8ebfc2acf4 100644\n--- a/cpp/src/arrow/util/compression_zstd.h\n+++ b/cpp/src/arrow/util/compression_zstd.h\n@@ -25,6 +25,7 @@\n #include \"arrow/util/visibility.h\"\n \n namespace arrow {\n+namespace util {\n \n // ZSTD codec.\n class ARROW_EXPORT ZSTDCodec : public Codec {\n@@ -40,6 +41,7 @@ class ARROW_EXPORT ZSTDCodec : public Codec {\n   const char* name() const override { return \"zstd\"; }\n };\n \n+}  // namespace util\n }  // namespace arrow\n \n #endif  // ARROW_UTIL_COMPRESSION_ZSTD_H\ndiff --git a/cpp/src/arrow/util/cpu-info.cc b/cpp/src/arrow/util/cpu-info.cc\nindex 5a29ef5fae..3f3488217c 100644\n--- a/cpp/src/arrow/util/cpu-info.cc\n+++ b/cpp/src/arrow/util/cpu-info.cc\n@@ -55,6 +55,7 @@ using boost::algorithm::trim;\n using std::max;\n \n namespace arrow {\n+namespace internal {\n \n static struct {\n   std::string name;\n@@ -319,4 +320,5 @@ void CpuInfo::SetDefaultCacheSize() {\n #endif\n }\n \n+}  // namespace internal\n }  // namespace arrow\ndiff --git a/cpp/src/arrow/util/cpu-info.h b/cpp/src/arrow/util/cpu-info.h\nindex dee6a5243c..714d7ac5bc 100644\n--- a/cpp/src/arrow/util/cpu-info.h\n+++ b/cpp/src/arrow/util/cpu-info.h\n@@ -27,6 +27,7 @@\n #include \"arrow/util/visibility.h\"\n \n namespace arrow {\n+namespace internal {\n \n /// CpuInfo is an interface to query for cpu information at runtime.  The caller can\n /// ask for the sizes of the caches and what hardware features are supported.\n@@ -94,6 +95,7 @@ class ARROW_EXPORT CpuInfo {\n   std::string model_name_;\n };\n \n+}  // namespace internal\n }  // namespace arrow\n \n #endif  // ARROW_UTIL_CPU_INFO_H\ndiff --git a/cpp/src/arrow/util/decimal.h b/cpp/src/arrow/util/decimal.h\nindex 72803623f4..6378488c30 100644\n--- a/cpp/src/arrow/util/decimal.h\n+++ b/cpp/src/arrow/util/decimal.h\n@@ -138,7 +138,7 @@ class ARROW_EXPORT Decimal128 {\n   Status Rescale(int32_t original_scale, int32_t new_scale, Decimal128* out) const;\n \n   /// \\brief Convert to a signed integer\n-  template <typename T, typename = EnableIfIsOneOf<T, int32_t, int64_t>>\n+  template <typename T, typename = internal::EnableIfIsOneOf<T, int32_t, int64_t>>\n   Status ToInteger(T* out) const {\n     constexpr auto min_value = std::numeric_limits<T>::min();\n     constexpr auto max_value = std::numeric_limits<T>::max();\ndiff --git a/cpp/src/arrow/util/logging-test.cc b/cpp/src/arrow/util/logging-test.cc\nindex f682bb6c2f..98efc4ae61 100644\n--- a/cpp/src/arrow/util/logging-test.cc\n+++ b/cpp/src/arrow/util/logging-test.cc\n@@ -26,6 +26,7 @@\n // https://github.com/ray-project/ray/blob/master/src/ray/util/logging_test.cc.\n \n namespace arrow {\n+namespace util {\n \n int64_t current_time_ms() {\n   std::chrono::milliseconds ms_since_epoch =\n@@ -101,6 +102,7 @@ TEST(LogPerfTest, PerfTest) {\n   ArrowLog::ShutDownArrowLog();\n }\n \n+}  // namespace util\n }  // namespace arrow\n \n int main(int argc, char** argv) {\ndiff --git a/cpp/src/arrow/util/logging.cc b/cpp/src/arrow/util/logging.cc\nindex 41d3fa98ca..b135d11f92 100644\n--- a/cpp/src/arrow/util/logging.cc\n+++ b/cpp/src/arrow/util/logging.cc\n@@ -28,6 +28,7 @@\n #endif\n \n namespace arrow {\n+namespace util {\n \n // This code is adapted from\n // https://github.com/ray-project/ray/blob/master/src/ray/util/logging.cc.\n@@ -78,7 +79,7 @@ class CerrLog {\n #ifdef ARROW_USE_GLOG\n typedef google::LogMessage LoggingProvider;\n #else\n-typedef arrow::CerrLog LoggingProvider;\n+typedef CerrLog LoggingProvider;\n #endif\n \n ArrowLogLevel ArrowLog::severity_threshold_ = ArrowLogLevel::ARROW_INFO;\n@@ -186,4 +187,5 @@ ArrowLog::~ArrowLog() {\n   }\n }\n \n+}  // namespace util\n }  // namespace arrow\ndiff --git a/cpp/src/arrow/util/logging.h b/cpp/src/arrow/util/logging.h\nindex b9266c3e49..4cce700db9 100644\n--- a/cpp/src/arrow/util/logging.h\n+++ b/cpp/src/arrow/util/logging.h\n@@ -25,6 +25,7 @@\n #include \"arrow/util/visibility.h\"\n \n namespace arrow {\n+namespace util {\n \n enum class ArrowLogLevel : int {\n   ARROW_DEBUG = -1,\n@@ -34,16 +35,16 @@ enum class ArrowLogLevel : int {\n   ARROW_FATAL = 3\n };\n \n-#define ARROW_LOG_INTERNAL(level) ::arrow::ArrowLog(__FILE__, __LINE__, level)\n-#define ARROW_LOG(level) ARROW_LOG_INTERNAL(::arrow::ArrowLogLevel::ARROW_##level)\n+#define ARROW_LOG_INTERNAL(level) ::arrow::util::ArrowLog(__FILE__, __LINE__, level)\n+#define ARROW_LOG(level) ARROW_LOG_INTERNAL(::arrow::util::ArrowLogLevel::ARROW_##level)\n #define ARROW_IGNORE_EXPR(expr) ((void)(expr))\n \n #define ARROW_CHECK(condition)                                                         \\\n-  (condition)                                                                          \\\n-      ? ARROW_IGNORE_EXPR(0)                                                           \\\n-      : ::arrow::Voidify() &                                                           \\\n-            ::arrow::ArrowLog(__FILE__, __LINE__, ::arrow::ArrowLogLevel::ARROW_FATAL) \\\n-                << \" Check failed: \" #condition \" \"\n+  (condition) ? ARROW_IGNORE_EXPR(0)                                                   \\\n+              : ::arrow::util::Voidify() &                                             \\\n+                    ::arrow::util::ArrowLog(__FILE__, __LINE__,                        \\\n+                                            ::arrow::util::ArrowLogLevel::ARROW_FATAL) \\\n+                        << \" Check failed: \" #condition \" \"\n \n // If 'to_call' returns a bad status, CHECK immediately with a logged message\n // of 'msg' followed by the status.\n@@ -58,35 +59,35 @@ enum class ArrowLogLevel : int {\n #define ARROW_CHECK_OK(s) ARROW_CHECK_OK_PREPEND(s, \"Bad status\")\n \n #ifdef NDEBUG\n-#define ARROW_DFATAL arrow::ArrowLogLevel::ARROW_WARNING\n+#define ARROW_DFATAL ::arrow::util::ArrowLogLevel::ARROW_WARNING\n \n #define DCHECK(condition)       \\\n   ARROW_IGNORE_EXPR(condition); \\\n-  while (false) ::arrow::ArrowLogBase()\n+  while (false) ::arrow::util::ArrowLogBase()\n #define DCHECK_OK(status)    \\\n   ARROW_IGNORE_EXPR(status); \\\n-  while (false) ::arrow::ArrowLogBase()\n+  while (false) ::arrow::util::ArrowLogBase()\n #define DCHECK_EQ(val1, val2) \\\n   ARROW_IGNORE_EXPR(val1);    \\\n-  while (false) ::arrow::ArrowLogBase()\n+  while (false) ::arrow::util::ArrowLogBase()\n #define DCHECK_NE(val1, val2) \\\n   ARROW_IGNORE_EXPR(val1);    \\\n-  while (false) ::arrow::ArrowLogBase()\n+  while (false) ::arrow::util::ArrowLogBase()\n #define DCHECK_LE(val1, val2) \\\n   ARROW_IGNORE_EXPR(val1);    \\\n-  while (false) ::arrow::ArrowLogBase()\n+  while (false) ::arrow::util::ArrowLogBase()\n #define DCHECK_LT(val1, val2) \\\n   ARROW_IGNORE_EXPR(val1);    \\\n-  while (false) ::arrow::ArrowLogBase()\n+  while (false) ::arrow::util::ArrowLogBase()\n #define DCHECK_GE(val1, val2) \\\n   ARROW_IGNORE_EXPR(val1);    \\\n-  while (false) ::arrow::ArrowLogBase()\n+  while (false) ::arrow::util::ArrowLogBase()\n #define DCHECK_GT(val1, val2) \\\n   ARROW_IGNORE_EXPR(val1);    \\\n-  while (false) ::arrow::ArrowLogBase()\n+  while (false) ::arrow::util::ArrowLogBase()\n \n #else\n-#define ARROW_DFATAL arrow::ArrowLogLevel::ARROW_FATAL\n+#define ARROW_DFATAL ::arrow::util::ArrowLogLevel::ARROW_FATAL\n \n #define DCHECK(condition) ARROW_CHECK(condition)\n #define DCHECK_OK(status) (ARROW_CHECK((status).ok()) << (status).message())\n@@ -179,6 +180,7 @@ class ARROW_EXPORT Voidify {\n   void operator&(ArrowLogBase&) {}\n };\n \n+}  // namespace util\n }  // namespace arrow\n \n #endif  // ARROW_UTIL_LOGGING_H\ndiff --git a/cpp/src/arrow/util/parallel.h b/cpp/src/arrow/util/parallel.h\nindex 156679e2e4..8caba5f1f0 100644\n--- a/cpp/src/arrow/util/parallel.h\n+++ b/cpp/src/arrow/util/parallel.h\n@@ -27,6 +27,7 @@\n #include \"arrow/util/thread-pool.h\"\n \n namespace arrow {\n+namespace internal {\n \n // A parallelizer that takes a `Status(int)` function and calls it with\n // arguments between 0 and `num_tasks - 1`, on an arbitrary number of threads.\n@@ -88,6 +89,7 @@ Status ParallelFor(int nthreads, int num_tasks, FUNCTION&& func) {\n   return Status::OK();\n }\n \n+}  // namespace internal\n }  // namespace arrow\n \n #endif\ndiff --git a/cpp/src/arrow/util/rle-encoding-test.cc b/cpp/src/arrow/util/rle-encoding-test.cc\nindex a6583bd20a..8838261865 100644\n--- a/cpp/src/arrow/util/rle-encoding-test.cc\n+++ b/cpp/src/arrow/util/rle-encoding-test.cc\n@@ -33,6 +33,7 @@\n using std::vector;\n \n namespace arrow {\n+namespace util {\n \n const int MAX_WIDTH = 32;\n \n@@ -40,7 +41,7 @@ TEST(BitArray, TestBool) {\n   const int len = 8;\n   uint8_t buffer[len];\n \n-  BitWriter writer(buffer, len);\n+  BitUtil::BitWriter writer(buffer, len);\n \n   // Write alternating 0's and 1's\n   for (int i = 0; i < 8; ++i) {\n@@ -73,7 +74,7 @@ TEST(BitArray, TestBool) {\n   EXPECT_EQ((int)buffer[1], BOOST_BINARY(1 1 0 0 1 1 0 0));\n \n   // Use the reader and validate\n-  BitReader reader(buffer, len);\n+  BitUtil::BitReader reader(buffer, len);\n   for (int i = 0; i < 8; ++i) {\n     bool val = false;\n     bool result = reader.GetValue(1, &val);\n@@ -106,7 +107,7 @@ void TestBitArrayValues(int bit_width, int num_vals) {\n   const uint64_t mod = bit_width == 64 ? 1 : 1LL << bit_width;\n \n   std::vector<uint8_t> buffer(len);\n-  BitWriter writer(buffer.data(), len);\n+  BitUtil::BitWriter writer(buffer.data(), len);\n   for (int i = 0; i < num_vals; ++i) {\n     bool result = writer.PutValue(i % mod, bit_width);\n     EXPECT_TRUE(result);\n@@ -114,7 +115,7 @@ void TestBitArrayValues(int bit_width, int num_vals) {\n   writer.Flush();\n   EXPECT_EQ(writer.bytes_written(), len);\n \n-  BitReader reader(buffer.data(), len);\n+  BitUtil::BitReader reader(buffer.data(), len);\n   for (int i = 0; i < num_vals; ++i) {\n     int64_t val = 0;\n     bool result = reader.GetValue(bit_width, &val);\n@@ -140,7 +141,7 @@ TEST(BitArray, TestMixed) {\n   uint8_t buffer[len];\n   bool parity = true;\n \n-  BitWriter writer(buffer, len);\n+  BitUtil::BitWriter writer(buffer, len);\n   for (int i = 0; i < len; ++i) {\n     bool result;\n     if (i % 2 == 0) {\n@@ -154,7 +155,7 @@ TEST(BitArray, TestMixed) {\n   writer.Flush();\n \n   parity = true;\n-  BitReader reader(buffer, len);\n+  BitUtil::BitReader reader(buffer, len);\n   for (int i = 0; i < len; ++i) {\n     bool result;\n     if (i % 2 == 0) {\n@@ -465,4 +466,5 @@ TEST(BitRle, Overflow) {\n   }\n }\n \n+}  // namespace util\n }  // namespace arrow\ndiff --git a/cpp/src/arrow/util/rle-encoding.h b/cpp/src/arrow/util/rle-encoding.h\nindex 418788afe3..a97543d5be 100644\n--- a/cpp/src/arrow/util/rle-encoding.h\n+++ b/cpp/src/arrow/util/rle-encoding.h\n@@ -29,6 +29,7 @@\n #include \"arrow/util/macros.h\"\n \n namespace arrow {\n+namespace util {\n \n /// Utility classes to do run length encoding (RLE) for fixed bit width values.  If runs\n /// are sufficiently long, RLE is used, otherwise, the values are just bit-packed\n@@ -126,7 +127,7 @@ class RleDecoder {\n                              int64_t valid_bits_offset);\n \n  protected:\n-  BitReader bit_reader_;\n+  BitUtil::BitReader bit_reader_;\n   /// Number of bits needed to encode the value. Must be between 0 and 64.\n   int bit_width_;\n   uint64_t current_value_;\n@@ -172,8 +173,8 @@ class RleEncoder {\n         1 +\n         static_cast<int>(BitUtil::BytesForBits(MAX_VALUES_PER_LITERAL_RUN * bit_width));\n     /// Up to MAX_VLQ_BYTE_LEN indicator and a single 'bit_width' value.\n-    int max_repeated_run_size =\n-        BitReader::MAX_VLQ_BYTE_LEN + static_cast<int>(BitUtil::BytesForBits(bit_width));\n+    int max_repeated_run_size = BitUtil::BitReader::MAX_VLQ_BYTE_LEN +\n+                                static_cast<int>(BitUtil::BytesForBits(bit_width));\n     return std::max(max_literal_run_size, max_repeated_run_size);\n   }\n \n@@ -241,7 +242,7 @@ class RleEncoder {\n   const int bit_width_;\n \n   /// Underlying buffer.\n-  BitWriter bit_writer_;\n+  BitUtil::BitWriter bit_writer_;\n \n   /// If true, the buffer is full and subsequent Put()'s will fail.\n   bool buffer_full_;\n@@ -596,6 +597,7 @@ inline void RleEncoder::Clear() {\n   bit_writer_.Clear();\n }\n \n+}  // namespace util\n }  // namespace arrow\n \n #endif  // ARROW_UTIL_RLE_ENCODING_H\ndiff --git a/cpp/src/arrow/util/stopwatch.h b/cpp/src/arrow/util/stopwatch.h\nindex f16c2ec482..e90d0ba4f9 100644\n--- a/cpp/src/arrow/util/stopwatch.h\n+++ b/cpp/src/arrow/util/stopwatch.h\n@@ -26,6 +26,7 @@\n #include <iostream>\n \n namespace arrow {\n+namespace internal {\n \n uint64_t CurrentTime() {\n   timespec time;\n@@ -46,4 +47,5 @@ class StopWatch {\n   uint64_t start_;\n };\n \n+}  // namespace internal\n }  // namespace arrow\ndiff --git a/cpp/src/arrow/util/thread-pool.h b/cpp/src/arrow/util/thread-pool.h\nindex c6c7071bf9..4cc746d307 100644\n--- a/cpp/src/arrow/util/thread-pool.h\n+++ b/cpp/src/arrow/util/thread-pool.h\n@@ -37,13 +37,21 @@\n \n namespace arrow {\n \n-// Get the number of worker threads used by the process-global thread pool\n-// for CPU-bound tasks.  This is an idealized number, the actual number\n-// may lag a bit.\n+/// \\brief Get the capacity of the global thread pool\n+///\n+/// Return the number of worker threads in the thread pool to which\n+/// Arrow dispatches various CPU-bound tasks.  This is an ideal number,\n+/// not necessarily the exact number of threads at a given point in time.\n+///\n+/// You can change this number using SetCpuThreadPoolCapacity().\n ARROW_EXPORT int GetCpuThreadPoolCapacity();\n \n-// Set the number of worker threads used by the process-global thread pool\n-// for CPU-bound tasks.\n+/// \\brief Set the capacity of the global thread pool\n+///\n+/// Set the number of worker threads int the thread pool to which\n+/// Arrow dispatches various CPU-bound tasks.\n+///\n+/// The current number is returned by GetCpuThreadPoolCapacity().\n ARROW_EXPORT Status SetCpuThreadPoolCapacity(int threads);\n \n namespace internal {\ndiff --git a/cpp/src/arrow/util/type_traits.h b/cpp/src/arrow/util/type_traits.h\nindex 289748ad7a..570f648678 100644\n--- a/cpp/src/arrow/util/type_traits.h\n+++ b/cpp/src/arrow/util/type_traits.h\n@@ -21,6 +21,7 @@\n #include <type_traits>\n \n namespace arrow {\n+namespace internal {\n \n /// \\brief Metafunction to allow checking if a type matches any of another set of types\n template <typename...>\n@@ -41,6 +42,7 @@ template <typename T>\n struct is_null_pointer : std::is_same<std::nullptr_t, typename std::remove_cv<T>::type> {\n };\n \n+}  // namespace internal\n }  // namespace arrow\n \n #endif  // ARROW_UTIL_TYPE_TRAITS_H\ndiff --git a/cpp/src/arrow/visitor_inline.h b/cpp/src/arrow/visitor_inline.h\nindex ae5307b731..8bc01bfd10 100644\n--- a/cpp/src/arrow/visitor_inline.h\n+++ b/cpp/src/arrow/visitor_inline.h\n@@ -30,7 +30,7 @@ namespace arrow {\n \n #define TYPE_VISIT_INLINE(TYPE_CLASS) \\\n   case TYPE_CLASS::type_id:           \\\n-    return visitor->Visit(checked_cast<const TYPE_CLASS&>(type));\n+    return visitor->Visit(internal::checked_cast<const TYPE_CLASS&>(type));\n \n template <typename VISITOR>\n inline Status VisitTypeInline(const DataType& type, VISITOR* visitor) {\n@@ -69,10 +69,11 @@ inline Status VisitTypeInline(const DataType& type, VISITOR* visitor) {\n \n #undef TYPE_VISIT_INLINE\n \n-#define ARRAY_VISIT_INLINE(TYPE_CLASS) \\\n-  case TYPE_CLASS::type_id:            \\\n-    return visitor->Visit(             \\\n-        checked_cast<const typename TypeTraits<TYPE_CLASS>::ArrayType&>(array));\n+#define ARRAY_VISIT_INLINE(TYPE_CLASS)                                             \\\n+  case TYPE_CLASS::type_id:                                                        \\\n+    return visitor->Visit(                                                         \\\n+        internal::checked_cast<const typename TypeTraits<TYPE_CLASS>::ArrayType&>( \\\n+            array));\n \n template <typename VISITOR>\n inline Status VisitArrayInline(const Array& array, VISITOR* visitor) {\ndiff --git a/cpp/src/parquet/column_reader.cc b/cpp/src/parquet/column_reader.cc\nindex 173292ecdd..7fbf9babd7 100644\n--- a/cpp/src/parquet/column_reader.cc\n+++ b/cpp/src/parquet/column_reader.cc\n@@ -52,7 +52,8 @@ int LevelDecoder::SetData(Encoding::type encoding, int16_t max_level,\n       num_bytes = *reinterpret_cast<const int32_t*>(data);\n       const uint8_t* decoder_data = data + sizeof(int32_t);\n       if (!rle_decoder_) {\n-        rle_decoder_.reset(new ::arrow::RleDecoder(decoder_data, num_bytes, bit_width_));\n+        rle_decoder_.reset(\n+            new ::arrow::util::RleDecoder(decoder_data, num_bytes, bit_width_));\n       } else {\n         rle_decoder_->Reset(decoder_data, num_bytes, bit_width_);\n       }\n@@ -62,7 +63,7 @@ int LevelDecoder::SetData(Encoding::type encoding, int16_t max_level,\n       num_bytes =\n           static_cast<int32_t>(BitUtil::BytesForBits(num_buffered_values * bit_width_));\n       if (!bit_packed_decoder_) {\n-        bit_packed_decoder_.reset(new ::arrow::BitReader(data, num_bytes));\n+        bit_packed_decoder_.reset(new ::arrow::BitUtil::BitReader(data, num_bytes));\n       } else {\n         bit_packed_decoder_->Reset(data, num_bytes);\n       }\n@@ -123,7 +124,7 @@ class SerializedPageReader : public PageReader {\n   std::shared_ptr<Page> current_page_;\n \n   // Compression codec to use.\n-  std::unique_ptr<::arrow::Codec> decompressor_;\n+  std::unique_ptr<::arrow::util::Codec> decompressor_;\n   std::shared_ptr<ResizableBuffer> decompression_buffer_;\n \n   // Maximum allowed page size\ndiff --git a/cpp/src/parquet/column_reader.h b/cpp/src/parquet/column_reader.h\nindex d1b4d2ef50..960f2107df 100644\n--- a/cpp/src/parquet/column_reader.h\n+++ b/cpp/src/parquet/column_reader.h\n@@ -44,8 +44,13 @@\n \n namespace arrow {\n \n+namespace BitUtil {\n class BitReader;\n+}  // namespace BitUtil\n+\n+namespace util {\n class RleDecoder;\n+}  // namespace util\n \n }  // namespace arrow\n \n@@ -76,8 +81,8 @@ class PARQUET_EXPORT LevelDecoder {\n   int bit_width_;\n   int num_values_remaining_;\n   Encoding::type encoding_;\n-  std::unique_ptr<::arrow::RleDecoder> rle_decoder_;\n-  std::unique_ptr<::arrow::BitReader> bit_packed_decoder_;\n+  std::unique_ptr<::arrow::util::RleDecoder> rle_decoder_;\n+  std::unique_ptr<::arrow::BitUtil::BitReader> bit_packed_decoder_;\n };\n \n // Abstract page iterator interface. This way, we can feed column pages to the\ndiff --git a/cpp/src/parquet/column_writer.cc b/cpp/src/parquet/column_writer.cc\nindex 9c7a39bfed..a45613f1b9 100644\n--- a/cpp/src/parquet/column_writer.cc\n+++ b/cpp/src/parquet/column_writer.cc\n@@ -34,8 +34,8 @@\n \n namespace parquet {\n \n-using BitWriter = ::arrow::BitWriter;\n-using RleEncoder = ::arrow::RleEncoder;\n+using BitWriter = ::arrow::BitUtil::BitWriter;\n+using RleEncoder = ::arrow::util::RleEncoder;\n \n LevelEncoder::LevelEncoder() {}\n LevelEncoder::~LevelEncoder() {}\n@@ -271,7 +271,7 @@ class SerializedPageWriter : public PageWriter {\n   int64_t total_compressed_size_;\n \n   // Compression codec to use.\n-  std::unique_ptr<::arrow::Codec> compressor_;\n+  std::unique_ptr<::arrow::util::Codec> compressor_;\n };\n \n // This implementation of the PageWriter writes to the final sink on Close .\ndiff --git a/cpp/src/parquet/column_writer.h b/cpp/src/parquet/column_writer.h\nindex e3bfcf0ae1..457c532bb2 100644\n--- a/cpp/src/parquet/column_writer.h\n+++ b/cpp/src/parquet/column_writer.h\n@@ -34,8 +34,13 @@\n \n namespace arrow {\n \n+namespace BitUtil {\n class BitWriter;\n+}  // namespace BitUtil\n+\n+namespace util {\n class RleEncoder;\n+}  // namespace util\n \n }  // namespace arrow\n \n@@ -67,8 +72,8 @@ class PARQUET_EXPORT LevelEncoder {\n   int bit_width_;\n   int rle_length_;\n   Encoding::type encoding_;\n-  std::unique_ptr<::arrow::RleEncoder> rle_encoder_;\n-  std::unique_ptr<::arrow::BitWriter> bit_packed_encoder_;\n+  std::unique_ptr<::arrow::util::RleEncoder> rle_encoder_;\n+  std::unique_ptr<::arrow::BitUtil::BitWriter> bit_packed_encoder_;\n };\n \n class PageWriter {\ndiff --git a/cpp/src/parquet/encoding-internal.h b/cpp/src/parquet/encoding-internal.h\nindex 0bfd26fbda..93d4993004 100644\n--- a/cpp/src/parquet/encoding-internal.h\n+++ b/cpp/src/parquet/encoding-internal.h\n@@ -143,7 +143,7 @@ class PlainDecoder<BooleanType> : public Decoder<BooleanType> {\n \n   virtual void SetData(int num_values, const uint8_t* data, int len) {\n     num_values_ = num_values;\n-    bit_reader_ = ::arrow::BitReader(data, len);\n+    bit_reader_ = BitUtil::BitReader(data, len);\n   }\n \n   // Two flavors of bool decoding\n@@ -175,7 +175,7 @@ class PlainDecoder<BooleanType> : public Decoder<BooleanType> {\n   }\n \n  private:\n-  ::arrow::BitReader bit_reader_;\n+  BitUtil::BitReader bit_reader_;\n };\n \n // ----------------------------------------------------------------------\n@@ -210,7 +210,7 @@ class PlainEncoder<BooleanType> : public Encoder<BooleanType> {\n         bits_available_(kInMemoryDefaultCapacity * 8),\n         bits_buffer_(AllocateBuffer(pool, kInMemoryDefaultCapacity)),\n         values_sink_(new InMemoryOutputStream(pool)) {\n-    bit_writer_.reset(new ::arrow::BitWriter(bits_buffer_->mutable_data(),\n+    bit_writer_.reset(new BitUtil::BitWriter(bits_buffer_->mutable_data(),\n                                              static_cast<int>(bits_buffer_->size())));\n   }\n \n@@ -274,7 +274,7 @@ class PlainEncoder<BooleanType> : public Encoder<BooleanType> {\n \n  protected:\n   int bits_available_;\n-  std::unique_ptr<::arrow::BitWriter> bit_writer_;\n+  std::unique_ptr<BitUtil::BitWriter> bit_writer_;\n   std::shared_ptr<ResizableBuffer> bits_buffer_;\n   std::unique_ptr<InMemoryOutputStream> values_sink_;\n };\n@@ -341,7 +341,7 @@ class DictionaryDecoder : public Decoder<Type> {\n     uint8_t bit_width = *data;\n     ++data;\n     --len;\n-    idx_decoder_ = ::arrow::RleDecoder(data, len, bit_width);\n+    idx_decoder_ = ::arrow::util::RleDecoder(data, len, bit_width);\n   }\n \n   int Decode(T* buffer, int max_values) override {\n@@ -376,7 +376,7 @@ class DictionaryDecoder : public Decoder<Type> {\n   // pointers).\n   std::shared_ptr<ResizableBuffer> byte_array_data_;\n \n-  ::arrow::RleDecoder idx_decoder_;\n+  ::arrow::util::RleDecoder idx_decoder_;\n };\n \n template <typename Type>\n@@ -468,7 +468,7 @@ class DictEncoder : public Encoder<DType> {\n         dict_encoded_size_(0),\n         type_length_(desc->type_length()) {\n     hash_slots_.Assign(hash_table_size_, HASH_SLOT_EMPTY);\n-    cpu_info_ = ::arrow::CpuInfo::GetInstance();\n+    cpu_info_ = ::arrow::internal::CpuInfo::GetInstance();\n   }\n \n   ~DictEncoder() override { DCHECK(buffered_indices_.empty()); }\n@@ -487,9 +487,9 @@ class DictEncoder : public Encoder<DType> {\n     // an extra \"RleEncoder::MinBufferSize\" bytes. These extra bytes won't be used\n     // but not reserving them would cause the encoder to fail.\n     return 1 +\n-           ::arrow::RleEncoder::MaxBufferSize(\n+           ::arrow::util::RleEncoder::MaxBufferSize(\n                bit_width(), static_cast<int>(buffered_indices_.size())) +\n-           ::arrow::RleEncoder::MinBufferSize(bit_width());\n+           ::arrow::util::RleEncoder::MinBufferSize(bit_width());\n   }\n \n   /// The minimum bit width required to encode the currently buffered indices.\n@@ -580,7 +580,7 @@ class DictEncoder : public Encoder<DType> {\n   // For ByteArray / FixedLenByteArray data. Not owned\n   ChunkedAllocator* pool_;\n \n-  ::arrow::CpuInfo* cpu_info_;\n+  ::arrow::internal::CpuInfo* cpu_info_;\n \n   /// Size of the table. Must be a power of 2.\n   int hash_table_size_;\n@@ -791,7 +791,7 @@ inline int DictEncoder<DType>::WriteIndices(uint8_t* buffer, int buffer_len) {\n   ++buffer;\n   --buffer_len;\n \n-  ::arrow::RleEncoder encoder(buffer, buffer_len, bit_width());\n+  ::arrow::util::RleEncoder encoder(buffer, buffer_len, bit_width());\n   for (int index : buffered_indices_) {\n     if (!encoder.Put(index)) return -1;\n   }\n@@ -819,7 +819,7 @@ class DeltaBitPackDecoder : public Decoder<DType> {\n \n   virtual void SetData(int num_values, const uint8_t* data, int len) {\n     num_values_ = num_values;\n-    decoder_ = ::arrow::BitReader(data, len);\n+    decoder_ = BitUtil::BitReader(data, len);\n     values_current_block_ = 0;\n     values_current_mini_block_ = 0;\n   }\n@@ -885,7 +885,7 @@ class DeltaBitPackDecoder : public Decoder<DType> {\n   }\n \n   ::arrow::MemoryPool* pool_;\n-  ::arrow::BitReader decoder_;\n+  BitUtil::BitReader decoder_;\n   int32_t values_current_block_;\n   int32_t num_mini_blocks_;\n   uint64_t values_per_mini_block_;\ndiff --git a/cpp/src/parquet/file-deserialize-test.cc b/cpp/src/parquet/file-deserialize-test.cc\nindex b766eedf55..31acbf1656 100644\n--- a/cpp/src/parquet/file-deserialize-test.cc\n+++ b/cpp/src/parquet/file-deserialize-test.cc\n@@ -196,7 +196,7 @@ TEST_F(TestPageSerde, Compression) {\n     test::random_bytes(page_size, 0, &faux_data[i]);\n   }\n   for (auto codec_type : codec_types) {\n-    std::unique_ptr<::arrow::Codec> codec = GetCodecFromArrow(codec_type);\n+    auto codec = GetCodecFromArrow(codec_type);\n \n     std::vector<uint8_t> buffer;\n     for (int i = 0; i < num_pages; ++i) {\ndiff --git a/cpp/src/parquet/file_reader.cc b/cpp/src/parquet/file_reader.cc\nindex ea518fd988..5be1a86234 100644\n--- a/cpp/src/parquet/file_reader.cc\n+++ b/cpp/src/parquet/file_reader.cc\n@@ -41,12 +41,6 @@\n \n using std::string;\n \n-namespace arrow {\n-\n-class Codec;\n-\n-}  // namespace arrow\n-\n namespace parquet {\n \n // PARQUET-978: Minimize footer reads by reading 64 KB from the end of the file\ndiff --git a/cpp/src/parquet/util/memory.cc b/cpp/src/parquet/util/memory.cc\nindex 5c76cd8a67..fde424aafe 100644\n--- a/cpp/src/parquet/util/memory.cc\n+++ b/cpp/src/parquet/util/memory.cc\n@@ -32,31 +32,32 @@\n #include \"parquet/types.h\"\n \n using arrow::MemoryPool;\n+using arrow::util::Codec;\n \n namespace parquet {\n \n-std::unique_ptr<::arrow::Codec> GetCodecFromArrow(Compression::type codec) {\n-  std::unique_ptr<::arrow::Codec> result;\n+std::unique_ptr<Codec> GetCodecFromArrow(Compression::type codec) {\n+  std::unique_ptr<Codec> result;\n   switch (codec) {\n     case Compression::UNCOMPRESSED:\n       break;\n     case Compression::SNAPPY:\n-      PARQUET_THROW_NOT_OK(::arrow::Codec::Create(::arrow::Compression::SNAPPY, &result));\n+      PARQUET_THROW_NOT_OK(Codec::Create(::arrow::Compression::SNAPPY, &result));\n       break;\n     case Compression::GZIP:\n-      PARQUET_THROW_NOT_OK(::arrow::Codec::Create(::arrow::Compression::GZIP, &result));\n+      PARQUET_THROW_NOT_OK(Codec::Create(::arrow::Compression::GZIP, &result));\n       break;\n     case Compression::LZO:\n-      PARQUET_THROW_NOT_OK(::arrow::Codec::Create(::arrow::Compression::LZO, &result));\n+      PARQUET_THROW_NOT_OK(Codec::Create(::arrow::Compression::LZO, &result));\n       break;\n     case Compression::BROTLI:\n-      PARQUET_THROW_NOT_OK(::arrow::Codec::Create(::arrow::Compression::BROTLI, &result));\n+      PARQUET_THROW_NOT_OK(Codec::Create(::arrow::Compression::BROTLI, &result));\n       break;\n     case Compression::LZ4:\n-      PARQUET_THROW_NOT_OK(::arrow::Codec::Create(::arrow::Compression::LZ4, &result));\n+      PARQUET_THROW_NOT_OK(Codec::Create(::arrow::Compression::LZ4, &result));\n       break;\n     case Compression::ZSTD:\n-      PARQUET_THROW_NOT_OK(::arrow::Codec::Create(::arrow::Compression::ZSTD, &result));\n+      PARQUET_THROW_NOT_OK(Codec::Create(::arrow::Compression::ZSTD, &result));\n       break;\n     default:\n       break;\ndiff --git a/cpp/src/parquet/util/memory.h b/cpp/src/parquet/util/memory.h\nindex 2eadb33268..cccafe8cb3 100644\n--- a/cpp/src/parquet/util/memory.h\n+++ b/cpp/src/parquet/util/memory.h\n@@ -37,15 +37,17 @@\n #include \"parquet/util/visibility.h\"\n \n namespace arrow {\n+namespace util {\n \n class Codec;\n \n+}  // namespace util\n }  // namespace arrow\n \n namespace parquet {\n \n PARQUET_EXPORT\n-std::unique_ptr<::arrow::Codec> GetCodecFromArrow(Compression::type codec);\n+std::unique_ptr<::arrow::util::Codec> GetCodecFromArrow(Compression::type codec);\n \n static constexpr int64_t kInMemoryDefaultCapacity = 1024;\n \ndiff --git a/cpp/src/plasma/store.cc b/cpp/src/plasma/store.cc\nindex 8a7cd3e6bc..cc0623cde2 100644\n--- a/cpp/src/plasma/store.cc\n+++ b/cpp/src/plasma/store.cc\n@@ -66,6 +66,9 @@ using arrow::gpu::CudaContext;\n using arrow::gpu::CudaDeviceManager;\n #endif\n \n+using arrow::util::ArrowLog;\n+using arrow::util::ArrowLogLevel;\n+\n namespace fb = plasma::flatbuf;\n \n namespace plasma {\n@@ -895,8 +898,8 @@ void StartServer(char* socket_name, int64_t system_memory, std::string plasma_di\n }  // namespace plasma\n \n int main(int argc, char* argv[]) {\n-  arrow::ArrowLog::StartArrowLog(argv[0], arrow::ArrowLogLevel::ARROW_INFO);\n-  arrow::ArrowLog::InstallFailureSignalHandler();\n+  ArrowLog::StartArrowLog(argv[0], ArrowLogLevel::ARROW_INFO);\n+  ArrowLog::InstallFailureSignalHandler();\n   char* socket_name = nullptr;\n   // Directory where plasma memory mapped files are stored.\n   std::string plasma_directory;\n@@ -986,6 +989,6 @@ int main(int argc, char* argv[]) {\n   plasma::g_runner->Shutdown();\n   plasma::g_runner = nullptr;\n \n-  arrow::ArrowLog::ShutDownArrowLog();\n+  ArrowLog::ShutDownArrowLog();\n   return 0;\n }\ndiff --git a/python/pyarrow/includes/libarrow.pxd b/python/pyarrow/includes/libarrow.pxd\nindex 4b37cf8dbd..766811715a 100644\n--- a/python/pyarrow/includes/libarrow.pxd\n+++ b/python/pyarrow/includes/libarrow.pxd\n@@ -1080,7 +1080,7 @@ cdef extern from 'arrow/util/compression.h' namespace 'arrow' nogil:\n         CompressionType_ZSTD\" arrow::Compression::ZSTD\"\n         CompressionType_LZ4\" arrow::Compression::LZ4\"\n \n-    cdef cppclass CCodec\" arrow::Codec\":\n+    cdef cppclass CCodec\" arrow::util::Codec\":\n         @staticmethod\n         CStatus Create(CompressionType codec, unique_ptr[CCodec]* out)\n \ndiff --git a/python/pyarrow/tensorflow/plasma_op.cc b/python/pyarrow/tensorflow/plasma_op.cc\nindex 7b0e80f140..15ae0dc69b 100644\n--- a/python/pyarrow/tensorflow/plasma_op.cc\n+++ b/python/pyarrow/tensorflow/plasma_op.cc\n@@ -60,7 +60,8 @@ static tf::mutex d2h_stream_mu;\n // parallelization.\n \n int64_t get_byte_width(const arrow::DataType& dtype) {\n-  return arrow::checked_cast<const arrow::FixedWidthType&>(dtype).bit_width() / CHAR_BIT;\n+  return arrow::internal::checked_cast<const arrow::FixedWidthType&>(dtype)\n+      .bit_width() / CHAR_BIT;\n }\n \n // Put:  tf.Tensor -> plasma.\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-27T12:53:16.643+0000",
                    "updated": "2018-09-27T12:53:16.643+0000",
                    "started": "2018-09-27T12:53:16.643+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "148729",
                    "issueId": "13181694"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 6000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@39382317[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@76e93168[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3bc6e4dd[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@49be0bc[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@27ab434b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@163db7cb[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1a5159dd[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@4194d42b[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3c586649[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@47201de6[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@57af3b6e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@30fd883c[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 6000,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Sep 27 12:53:09 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-09-27T12:53:09.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3136/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2018-08-28T18:47:47.000+0000",
        "updated": "2018-09-27T12:53:16.000+0000",
        "timeoriginalestimate": null,
        "description": "There are a lot of internal classes, types, and functions in the public API docs\r\n\r\nhttp://arrow.apache.org/docs/cpp/namespacearrow.html\r\n\r\nit would be more helpful to move some of these to {{internal::}} namespace or otherwise hide them from doxygen",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "1h 40m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 6000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Clean up arrow:: public API",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13181694/comment/16630361",
                    "id": "16630361",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 2633\n[https://github.com/apache/arrow/pull/2633]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2018-09-27T12:53:09.154+0000",
                    "updated": "2018-09-27T12:53:09.154+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|i3xilb:",
        "customfield_12314139": null
    }
}