{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13348208",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13348208",
    "key": "ARROW-11058",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12348823",
                "id": "12348823",
                "description": "",
                "name": "3.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-01-25"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
            "name": "andygrove",
            "key": "andygrove",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
            },
            "displayName": "Andy Grove",
            "active": true,
            "timeZone": "America/Denver"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12335005",
                "id": "12335005",
                "name": "Rust - DataFusion"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
            "name": "andygrove",
            "key": "andygrove",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
            },
            "displayName": "Andy Grove",
            "active": true,
            "timeZone": "America/Denver"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
            "name": "andygrove",
            "key": "andygrove",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
            },
            "displayName": "Andy Grove",
            "active": true,
            "timeZone": "America/Denver"
        },
        "aggregateprogress": {
            "progress": 12000,
            "total": 12000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 12000,
            "total": 12000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-11058/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 20,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13348208/worklog/529202",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #9043:\nURL: https://github.com/apache/arrow/pull/9043#issuecomment-752185807\n\n\n   @jorgecarleitao @alamb @Dandandan fyi  \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-29T18:02:43.708+0000",
                    "updated": "2020-12-29T18:02:43.708+0000",
                    "started": "2020-12-29T18:02:43.708+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "529202",
                    "issueId": "13348208"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13348208/worklog/529203",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #9043:\nURL: https://github.com/apache/arrow/pull/9043#issuecomment-752188671\n\n\n   https://issues.apache.org/jira/browse/ARROW-11058\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-29T18:10:19.046+0000",
                    "updated": "2020-12-29T18:10:19.046+0000",
                    "started": "2020-12-29T18:10:19.045+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "529203",
                    "issueId": "13348208"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13348208/worklog/529214",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Dandandan commented on a change in pull request #9043:\nURL: https://github.com/apache/arrow/pull/9043#discussion_r549804455\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/planner.rs\n##########\n@@ -110,6 +111,16 @@ impl DefaultPhysicalPlanner {\n             // leaf node, children cannot be replaced\n             Ok(plan.clone())\n         } else {\n+            // wrap filter in coalesce batches\n+            let plan = if plan.as_any().downcast_ref::<FilterExec>().is_some() {\n+                let target_batch_size = ctx_state.config.batch_size;\n+                Arc::new(CoalesceBatchesExec::new(plan.clone(), target_batch_size))\n\nReview comment:\n       I guess this could at some point be part of a cost based on optimization based on the nr. of rows and selectivity of the filters?\r\n   Would it also make sense to wrap joins in the coalescebatchexec, as it can also reduce/increase the size of the batches? E.g. what is/would be the effect on tcph query 5?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-29T18:27:27.599+0000",
                    "updated": "2020-12-29T18:27:27.599+0000",
                    "started": "2020-12-29T18:27:27.598+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "529214",
                    "issueId": "13348208"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13348208/worklog/529215",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on a change in pull request #9043:\nURL: https://github.com/apache/arrow/pull/9043#discussion_r549804742\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/planner.rs\n##########\n@@ -110,6 +111,16 @@ impl DefaultPhysicalPlanner {\n             // leaf node, children cannot be replaced\n             Ok(plan.clone())\n         } else {\n+            // wrap filter in coalesce batches\n+            let plan = if plan.as_any().downcast_ref::<FilterExec>().is_some() {\n+                let target_batch_size = ctx_state.config.batch_size;\n+                Arc::new(CoalesceBatchesExec::new(plan.clone(), target_batch_size))\n\nReview comment:\n       Very good points. I did not think about join output.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-29T18:28:40.822+0000",
                    "updated": "2020-12-29T18:28:40.822+0000",
                    "started": "2020-12-29T18:28:40.821+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "529215",
                    "issueId": "13348208"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13348208/worklog/529223",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Dandandan commented on pull request #9043:\nURL: https://github.com/apache/arrow/pull/9043#issuecomment-752197412\n\n\n   LGTM \ud83d\udc4d  \ud83d\ude0e very nice speedup, good to see it also works on the bigger batch sizes (so it's not only because of the \"problematic\" join). I think it is a nice building block which we can decide to use in optimizations.\r\n   We should still look at improving the join implementation, although this hides the problem quite a bit.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-29T18:35:07.972+0000",
                    "updated": "2020-12-29T18:35:07.972+0000",
                    "started": "2020-12-29T18:35:07.972+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "529223",
                    "issueId": "13348208"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13348208/worklog/529232",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on a change in pull request #9043:\nURL: https://github.com/apache/arrow/pull/9043#discussion_r549808136\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/planner.rs\n##########\n@@ -110,6 +111,16 @@ impl DefaultPhysicalPlanner {\n             // leaf node, children cannot be replaced\n             Ok(plan.clone())\n         } else {\n+            // wrap filter in coalesce batches\n+            let plan = if plan.as_any().downcast_ref::<FilterExec>().is_some() {\n+                let target_batch_size = ctx_state.config.batch_size;\n+                Arc::new(CoalesceBatchesExec::new(plan.clone(), target_batch_size))\n\nReview comment:\n       I filed https://issues.apache.org/jira/browse/ARROW-11068 to wrap join output and also to make this mechanism more generic.\r\n   \r\n   Rather than hard-code a list of operators that need to be wrapped, we should find a more generic mechanism so that plans can declare if their input and/or output batches should be coalesced (similar to how we handle partitioning) and this would allow custom operators outside of DataFusion to benefit from this optimization.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-29T18:40:26.746+0000",
                    "updated": "2020-12-29T18:40:26.746+0000",
                    "started": "2020-12-29T18:40:26.746+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "529232",
                    "issueId": "13348208"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13348208/worklog/529233",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #9043:\nURL: https://github.com/apache/arrow/pull/9043#issuecomment-752200447\n\n\n   > We should still look at improving the join implementation, although this hides the problem quite a bit.\r\n   \r\n   https://issues.apache.org/jira/browse/ARROW-11030 is the tracking issue for the MutableArrayData performance issue\r\n   \r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-29T18:44:06.337+0000",
                    "updated": "2020-12-29T18:44:06.337+0000",
                    "started": "2020-12-29T18:44:06.337+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "529233",
                    "issueId": "13348208"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13348208/worklog/529235",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #9043:\nURL: https://github.com/apache/arrow/pull/9043#discussion_r549810301\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/coalesce_batches.rs\n##########\n@@ -0,0 +1,204 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! CoalesceBatchesExec combines small batches into larger batches for more efficient use of\n+//! vectorized processing by upstream operators.\n+\n+use std::any::Any;\n+use std::pin::Pin;\n+use std::sync::Arc;\n+use std::task::{Context, Poll};\n+\n+use crate::error::{DataFusionError, Result};\n+use crate::physical_plan::{\n+    ExecutionPlan, Partitioning, RecordBatchStream, SendableRecordBatchStream,\n+};\n+\n+use arrow::array::{make_array, MutableArrayData};\n+use arrow::datatypes::SchemaRef;\n+use arrow::error::Result as ArrowResult;\n+use arrow::record_batch::RecordBatch;\n+use async_trait::async_trait;\n+use futures::stream::{Stream, StreamExt};\n+use log::debug;\n+\n+/// CoalesceBatchesExec combines small batches into larger batches for more efficient use of\n+/// vectorized processing by upstream operators.\n+#[derive(Debug)]\n+pub struct CoalesceBatchesExec {\n+    /// The input plan\n+    input: Arc<dyn ExecutionPlan>,\n+    /// Minimum number of rows for coalesces batches\n+    target_batch_size: usize,\n+}\n+\n+impl CoalesceBatchesExec {\n+    /// Create a new CoalesceBatchesExec\n+    pub fn new(input: Arc<dyn ExecutionPlan>, target_batch_size: usize) -> Self {\n+        Self {\n+            input,\n+            target_batch_size,\n+        }\n+    }\n+}\n+\n+#[async_trait]\n+impl ExecutionPlan for CoalesceBatchesExec {\n+    /// Return a reference to Any that can be used for downcasting\n+    fn as_any(&self) -> &dyn Any {\n+        self\n+    }\n+\n+    /// Get the schema for this execution plan\n+    fn schema(&self) -> SchemaRef {\n+        // The coalesce batches operator does not make any changes to the schema of its input\n+        self.input.schema()\n+    }\n+\n+    fn children(&self) -> Vec<Arc<dyn ExecutionPlan>> {\n+        vec![self.input.clone()]\n+    }\n+\n+    /// Get the output partitioning of this plan\n+    fn output_partitioning(&self) -> Partitioning {\n+        // The coalesce batches operator does not make any changes to the partitioning of its input\n+        self.input.output_partitioning()\n+    }\n+\n+    fn with_new_children(\n+        &self,\n+        children: Vec<Arc<dyn ExecutionPlan>>,\n+    ) -> Result<Arc<dyn ExecutionPlan>> {\n+        match children.len() {\n+            1 => Ok(Arc::new(CoalesceBatchesExec::new(\n+                children[0].clone(),\n+                self.target_batch_size,\n+            ))),\n+            _ => Err(DataFusionError::Internal(\n+                \"CoalesceBatchesExec wrong number of children\".to_string(),\n+            )),\n+        }\n+    }\n+\n+    async fn execute(&self, partition: usize) -> Result<SendableRecordBatchStream> {\n+        Ok(Box::pin(CoalesceBatchesStream {\n+            input: self.input.execute(partition).await?,\n+            schema: self.input.schema().clone(),\n+            target_batch_size: self.target_batch_size.clone(),\n+            buffer: Vec::new(),\n+            buffered_rows: 0,\n+        }))\n+    }\n+}\n+\n+struct CoalesceBatchesStream {\n+    /// The input plan\n+    input: SendableRecordBatchStream,\n+    /// The input schema\n+    schema: SchemaRef,\n+    /// Minimum number of rows for coalesces batches\n+    target_batch_size: usize,\n+    /// Buffered batches\n+    buffer: Vec<RecordBatch>,\n+    /// Buffered row count\n+    buffered_rows: usize,\n+}\n+\n+impl Stream for CoalesceBatchesStream {\n+    type Item = ArrowResult<RecordBatch>;\n+\n+    fn poll_next(\n+        mut self: Pin<&mut Self>,\n+        cx: &mut Context<'_>,\n+    ) -> Poll<Option<Self::Item>> {\n+        loop {\n+            let input_batch = self.input.poll_next_unpin(cx);\n+            match input_batch {\n+                Poll::Ready(x) => match x {\n+                    Some(Ok(ref batch)) => {\n+                        if batch.num_rows() >= self.target_batch_size\n+                            && self.buffer.is_empty()\n+                        {\n+                            return Poll::Ready(Some(Ok(batch.clone())));\n+                        } else {\n+                            // add to the buffered batches (if non-empty)\n+                            if batch.num_rows() > 0 {\n+                                self.buffer.push(batch.clone());\n+                                self.buffered_rows += batch.num_rows();\n+                            }\n+                            // check to see if we have enough batches yet\n+                            if self.buffered_rows >= self.target_batch_size {\n+                                // combine the batches and return\n+                                let mut arrays =\n+                                    Vec::with_capacity(self.schema.fields().len());\n+                                for i in 0..self.schema.fields().len() {\n+                                    let source_arrays = self\n+                                        .buffer\n+                                        .iter()\n+                                        .map(|batch| batch.column(i).data_ref().as_ref())\n+                                        .collect();\n+                                    let mut array_data = MutableArrayData::new(\n+                                        source_arrays,\n+                                        true,\n+                                        self.buffered_rows,\n+                                    );\n+                                    for j in 0..self.buffer.len() {\n+                                        array_data.extend(\n+                                            j,\n+                                            0,\n+                                            self.buffer[j].num_rows(),\n+                                        );\n+                                    }\n+                                    let data = array_data.freeze();\n+                                    arrays.push(make_array(Arc::new(data)));\n\nReview comment:\n       I think that this operation is equivalent to `arrow::compute::kernels::concat::concat`, which we may use instead for simplicity (and in case we optimize `concat`.\r\n   \r\n   Note that this operation is also done in the sort node, where we merge all batches from all partitions in a single batch.\r\n   \n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-29T18:50:14.607+0000",
                    "updated": "2020-12-29T18:50:14.607+0000",
                    "started": "2020-12-29T18:50:14.606+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "529235",
                    "issueId": "13348208"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13348208/worklog/529238",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #9043:\nURL: https://github.com/apache/arrow/pull/9043#issuecomment-752205145\n\n\n   I just realized I missed a case (we need to send any remaining buffered batches when the input has no more batches) and have changed this to a draft. I am also working on tests.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-29T18:58:19.436+0000",
                    "updated": "2020-12-29T18:58:19.436+0000",
                    "started": "2020-12-29T18:58:19.435+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "529238",
                    "issueId": "13348208"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13348208/worklog/529254",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #9043:\nURL: https://github.com/apache/arrow/pull/9043#issuecomment-752226157\n\n\n   This is ready for review now\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-29T20:11:50.070+0000",
                    "updated": "2020-12-29T20:11:50.070+0000",
                    "started": "2020-12-29T20:11:50.069+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "529254",
                    "issueId": "13348208"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13348208/worklog/529273",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Dandandan commented on a change in pull request #9043:\nURL: https://github.com/apache/arrow/pull/9043#discussion_r549859868\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/coalesce_batches.rs\n##########\n@@ -0,0 +1,295 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! CoalesceBatchesExec combines small batches into larger batches for more efficient use of\n+//! vectorized processing by upstream operators.\n+\n+use std::any::Any;\n+use std::pin::Pin;\n+use std::sync::Arc;\n+use std::task::{Context, Poll};\n+\n+use crate::error::{DataFusionError, Result};\n+use crate::physical_plan::{\n+    ExecutionPlan, Partitioning, RecordBatchStream, SendableRecordBatchStream,\n+};\n+\n+use arrow::compute::kernels::concat::concat;\n+use arrow::datatypes::SchemaRef;\n+use arrow::error::Result as ArrowResult;\n+use arrow::record_batch::RecordBatch;\n+use async_trait::async_trait;\n+use futures::stream::{Stream, StreamExt};\n+use log::debug;\n+\n+/// CoalesceBatchesExec combines small batches into larger batches for more efficient use of\n+/// vectorized processing by upstream operators.\n+#[derive(Debug)]\n+pub struct CoalesceBatchesExec {\n+    /// The input plan\n+    input: Arc<dyn ExecutionPlan>,\n+    /// Minimum number of rows for coalesces batches\n+    target_batch_size: usize,\n+}\n+\n+impl CoalesceBatchesExec {\n+    /// Create a new CoalesceBatchesExec\n+    pub fn new(input: Arc<dyn ExecutionPlan>, target_batch_size: usize) -> Self {\n+        Self {\n+            input,\n+            target_batch_size,\n+        }\n+    }\n+}\n+\n+#[async_trait]\n+impl ExecutionPlan for CoalesceBatchesExec {\n+    /// Return a reference to Any that can be used for downcasting\n+    fn as_any(&self) -> &dyn Any {\n+        self\n+    }\n+\n+    /// Get the schema for this execution plan\n+    fn schema(&self) -> SchemaRef {\n+        // The coalesce batches operator does not make any changes to the schema of its input\n+        self.input.schema()\n+    }\n+\n+    fn children(&self) -> Vec<Arc<dyn ExecutionPlan>> {\n+        vec![self.input.clone()]\n+    }\n+\n+    /// Get the output partitioning of this plan\n+    fn output_partitioning(&self) -> Partitioning {\n+        // The coalesce batches operator does not make any changes to the partitioning of its input\n+        self.input.output_partitioning()\n+    }\n+\n+    fn with_new_children(\n+        &self,\n+        children: Vec<Arc<dyn ExecutionPlan>>,\n+    ) -> Result<Arc<dyn ExecutionPlan>> {\n+        match children.len() {\n+            1 => Ok(Arc::new(CoalesceBatchesExec::new(\n+                children[0].clone(),\n+                self.target_batch_size,\n+            ))),\n+            _ => Err(DataFusionError::Internal(\n+                \"CoalesceBatchesExec wrong number of children\".to_string(),\n+            )),\n+        }\n+    }\n+\n+    async fn execute(&self, partition: usize) -> Result<SendableRecordBatchStream> {\n+        Ok(Box::pin(CoalesceBatchesStream {\n+            input: self.input.execute(partition).await?,\n+            schema: self.input.schema().clone(),\n+            target_batch_size: self.target_batch_size.clone(),\n+            buffer: Vec::new(),\n+            buffered_rows: 0,\n+        }))\n+    }\n+}\n+\n+struct CoalesceBatchesStream {\n+    /// The input plan\n+    input: SendableRecordBatchStream,\n+    /// The input schema\n+    schema: SchemaRef,\n+    /// Minimum number of rows for coalesces batches\n+    target_batch_size: usize,\n+    /// Buffered batches\n+    buffer: Vec<RecordBatch>,\n+    /// Buffered row count\n+    buffered_rows: usize,\n+}\n+\n+impl Stream for CoalesceBatchesStream {\n+    type Item = ArrowResult<RecordBatch>;\n+\n+    fn poll_next(\n+        mut self: Pin<&mut Self>,\n+        cx: &mut Context<'_>,\n+    ) -> Poll<Option<Self::Item>> {\n+        loop {\n+            let input_batch = self.input.poll_next_unpin(cx);\n+            match input_batch {\n+                Poll::Ready(x) => match x {\n+                    Some(Ok(ref batch)) => {\n+                        if batch.num_rows() >= self.target_batch_size\n+                            && self.buffer.is_empty()\n+                        {\n+                            return Poll::Ready(Some(Ok(batch.clone())));\n+                        } else if batch.num_rows() == 0 {\n+                            // discard empty batches\n+                        } else {\n+                            // add to the buffered batches\n+                            self.buffer.push(batch.clone());\n+                            self.buffered_rows += batch.num_rows();\n+                            // check to see if we have enough batches yet\n+                            if self.buffered_rows >= self.target_batch_size {\n\nReview comment:\n       Would it make sense too to make batches *smaller* or split them if they are bigger than the target batch size (e.g. for increased parallelism), or do we for now only want to grow them for now?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-29T21:43:31.697+0000",
                    "updated": "2020-12-29T21:43:31.697+0000",
                    "started": "2020-12-29T21:43:31.697+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "529273",
                    "issueId": "13348208"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13348208/worklog/529282",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Dandandan commented on a change in pull request #9043:\nURL: https://github.com/apache/arrow/pull/9043#discussion_r549861337\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/mod.rs\n##########\n@@ -104,6 +104,26 @@ pub async fn collect(plan: Arc<dyn ExecutionPlan>) -> Result<Vec<RecordBatch>> {\n     }\n }\n \n+/// Execute the [ExecutionPlan] and collect the results in memory\n+pub async fn collect_partitioned(\n+    plan: Arc<dyn ExecutionPlan>,\n+) -> Result<Vec<Vec<RecordBatch>>> {\n+    match plan.output_partitioning().partition_count() {\n+        0 => Ok(vec![]),\n+        1 => {\n+            let it = plan.execute(0).await?;\n+            Ok(vec![common::collect(it).await?])\n+        }\n+        _ => {\n+            let mut partitions = vec![];\n+            for i in 0..plan.output_partitioning().partition_count() {\n\nReview comment:\n       Could bind this to a variable and reuse it in the code?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-29T21:49:06.645+0000",
                    "updated": "2020-12-29T21:49:06.645+0000",
                    "started": "2020-12-29T21:49:06.645+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "529282",
                    "issueId": "13348208"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13348208/worklog/529283",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Dandandan commented on a change in pull request #9043:\nURL: https://github.com/apache/arrow/pull/9043#discussion_r549861337\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/mod.rs\n##########\n@@ -104,6 +104,26 @@ pub async fn collect(plan: Arc<dyn ExecutionPlan>) -> Result<Vec<RecordBatch>> {\n     }\n }\n \n+/// Execute the [ExecutionPlan] and collect the results in memory\n+pub async fn collect_partitioned(\n+    plan: Arc<dyn ExecutionPlan>,\n+) -> Result<Vec<Vec<RecordBatch>>> {\n+    match plan.output_partitioning().partition_count() {\n+        0 => Ok(vec![]),\n+        1 => {\n+            let it = plan.execute(0).await?;\n+            Ok(vec![common::collect(it).await?])\n+        }\n+        _ => {\n+            let mut partitions = vec![];\n+            for i in 0..plan.output_partitioning().partition_count() {\n\nReview comment:\n       Could bind this partition count to a variable and reuse it in the code?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-29T21:49:39.672+0000",
                    "updated": "2020-12-29T21:49:39.672+0000",
                    "started": "2020-12-29T21:49:39.672+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "529283",
                    "issueId": "13348208"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13348208/worklog/529287",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Dandandan commented on pull request #9043:\nURL: https://github.com/apache/arrow/pull/9043#issuecomment-752253432\n\n\n   Looks great. Added one question that I think could be done in the future and 1 style comment. But in general LGTM, awesome!\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-29T21:51:43.912+0000",
                    "updated": "2020-12-29T21:51:43.912+0000",
                    "started": "2020-12-29T21:51:43.912+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "529287",
                    "issueId": "13348208"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13348208/worklog/529325",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on a change in pull request #9043:\nURL: https://github.com/apache/arrow/pull/9043#discussion_r549891877\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/coalesce_batches.rs\n##########\n@@ -0,0 +1,295 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! CoalesceBatchesExec combines small batches into larger batches for more efficient use of\n+//! vectorized processing by upstream operators.\n+\n+use std::any::Any;\n+use std::pin::Pin;\n+use std::sync::Arc;\n+use std::task::{Context, Poll};\n+\n+use crate::error::{DataFusionError, Result};\n+use crate::physical_plan::{\n+    ExecutionPlan, Partitioning, RecordBatchStream, SendableRecordBatchStream,\n+};\n+\n+use arrow::compute::kernels::concat::concat;\n+use arrow::datatypes::SchemaRef;\n+use arrow::error::Result as ArrowResult;\n+use arrow::record_batch::RecordBatch;\n+use async_trait::async_trait;\n+use futures::stream::{Stream, StreamExt};\n+use log::debug;\n+\n+/// CoalesceBatchesExec combines small batches into larger batches for more efficient use of\n+/// vectorized processing by upstream operators.\n+#[derive(Debug)]\n+pub struct CoalesceBatchesExec {\n+    /// The input plan\n+    input: Arc<dyn ExecutionPlan>,\n+    /// Minimum number of rows for coalesces batches\n+    target_batch_size: usize,\n+}\n+\n+impl CoalesceBatchesExec {\n+    /// Create a new CoalesceBatchesExec\n+    pub fn new(input: Arc<dyn ExecutionPlan>, target_batch_size: usize) -> Self {\n+        Self {\n+            input,\n+            target_batch_size,\n+        }\n+    }\n+}\n+\n+#[async_trait]\n+impl ExecutionPlan for CoalesceBatchesExec {\n+    /// Return a reference to Any that can be used for downcasting\n+    fn as_any(&self) -> &dyn Any {\n+        self\n+    }\n+\n+    /// Get the schema for this execution plan\n+    fn schema(&self) -> SchemaRef {\n+        // The coalesce batches operator does not make any changes to the schema of its input\n+        self.input.schema()\n+    }\n+\n+    fn children(&self) -> Vec<Arc<dyn ExecutionPlan>> {\n+        vec![self.input.clone()]\n+    }\n+\n+    /// Get the output partitioning of this plan\n+    fn output_partitioning(&self) -> Partitioning {\n+        // The coalesce batches operator does not make any changes to the partitioning of its input\n+        self.input.output_partitioning()\n+    }\n+\n+    fn with_new_children(\n+        &self,\n+        children: Vec<Arc<dyn ExecutionPlan>>,\n+    ) -> Result<Arc<dyn ExecutionPlan>> {\n+        match children.len() {\n+            1 => Ok(Arc::new(CoalesceBatchesExec::new(\n+                children[0].clone(),\n+                self.target_batch_size,\n+            ))),\n+            _ => Err(DataFusionError::Internal(\n+                \"CoalesceBatchesExec wrong number of children\".to_string(),\n+            )),\n+        }\n+    }\n+\n+    async fn execute(&self, partition: usize) -> Result<SendableRecordBatchStream> {\n+        Ok(Box::pin(CoalesceBatchesStream {\n+            input: self.input.execute(partition).await?,\n+            schema: self.input.schema().clone(),\n+            target_batch_size: self.target_batch_size.clone(),\n+            buffer: Vec::new(),\n+            buffered_rows: 0,\n+        }))\n+    }\n+}\n+\n+struct CoalesceBatchesStream {\n+    /// The input plan\n+    input: SendableRecordBatchStream,\n+    /// The input schema\n+    schema: SchemaRef,\n+    /// Minimum number of rows for coalesces batches\n+    target_batch_size: usize,\n+    /// Buffered batches\n+    buffer: Vec<RecordBatch>,\n+    /// Buffered row count\n+    buffered_rows: usize,\n+}\n+\n+impl Stream for CoalesceBatchesStream {\n+    type Item = ArrowResult<RecordBatch>;\n+\n+    fn poll_next(\n+        mut self: Pin<&mut Self>,\n+        cx: &mut Context<'_>,\n+    ) -> Poll<Option<Self::Item>> {\n+        loop {\n+            let input_batch = self.input.poll_next_unpin(cx);\n+            match input_batch {\n+                Poll::Ready(x) => match x {\n+                    Some(Ok(ref batch)) => {\n+                        if batch.num_rows() >= self.target_batch_size\n+                            && self.buffer.is_empty()\n+                        {\n+                            return Poll::Ready(Some(Ok(batch.clone())));\n+                        } else if batch.num_rows() == 0 {\n+                            // discard empty batches\n+                        } else {\n+                            // add to the buffered batches\n+                            self.buffer.push(batch.clone());\n+                            self.buffered_rows += batch.num_rows();\n+                            // check to see if we have enough batches yet\n+                            if self.buffered_rows >= self.target_batch_size {\n\nReview comment:\n       Currently, we use partitioning as the unit of parallelism (which I think makes sense) and we recently added the repartition operator which can increase or decrease parallelism.\r\n   \r\n   I'm not sure if we will need the ability to split batches. The only use case I can think of right now would be if we had kernels that had limits on the size of batches that they could process for some reason.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-30T00:00:31.148+0000",
                    "updated": "2020-12-30T00:00:31.148+0000",
                    "started": "2020-12-30T00:00:31.148+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "529325",
                    "issueId": "13348208"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13348208/worklog/529478",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on a change in pull request #9043:\nURL: https://github.com/apache/arrow/pull/9043#discussion_r550163355\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/planner.rs\n##########\n@@ -110,6 +111,16 @@ impl DefaultPhysicalPlanner {\n             // leaf node, children cannot be replaced\n             Ok(plan.clone())\n         } else {\n+            // wrap filter in coalesce batches\n+            let plan = if plan.as_any().downcast_ref::<FilterExec>().is_some() {\n+                let target_batch_size = ctx_state.config.batch_size;\n\nReview comment:\n       I wonder if a heuristic like `config.batch_size / 2` might be faster -- by setting it to `batch_size` we'll end up copying data if even a single row from a batch is filtered. \n\n##########\nFile path: rust/datafusion/src/physical_plan/coalesce_batches.rs\n##########\n@@ -0,0 +1,295 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! CoalesceBatchesExec combines small batches into larger batches for more efficient use of\n+//! vectorized processing by upstream operators.\n+\n+use std::any::Any;\n+use std::pin::Pin;\n+use std::sync::Arc;\n+use std::task::{Context, Poll};\n+\n+use crate::error::{DataFusionError, Result};\n+use crate::physical_plan::{\n+    ExecutionPlan, Partitioning, RecordBatchStream, SendableRecordBatchStream,\n+};\n+\n+use arrow::compute::kernels::concat::concat;\n+use arrow::datatypes::SchemaRef;\n+use arrow::error::Result as ArrowResult;\n+use arrow::record_batch::RecordBatch;\n+use async_trait::async_trait;\n+use futures::stream::{Stream, StreamExt};\n+use log::debug;\n+\n+/// CoalesceBatchesExec combines small batches into larger batches for more efficient use of\n+/// vectorized processing by upstream operators.\n+#[derive(Debug)]\n+pub struct CoalesceBatchesExec {\n+    /// The input plan\n+    input: Arc<dyn ExecutionPlan>,\n+    /// Minimum number of rows for coalesces batches\n+    target_batch_size: usize,\n+}\n+\n+impl CoalesceBatchesExec {\n+    /// Create a new CoalesceBatchesExec\n+    pub fn new(input: Arc<dyn ExecutionPlan>, target_batch_size: usize) -> Self {\n+        Self {\n+            input,\n+            target_batch_size,\n+        }\n+    }\n+}\n+\n+#[async_trait]\n+impl ExecutionPlan for CoalesceBatchesExec {\n+    /// Return a reference to Any that can be used for downcasting\n+    fn as_any(&self) -> &dyn Any {\n+        self\n+    }\n+\n+    /// Get the schema for this execution plan\n+    fn schema(&self) -> SchemaRef {\n+        // The coalesce batches operator does not make any changes to the schema of its input\n+        self.input.schema()\n+    }\n+\n+    fn children(&self) -> Vec<Arc<dyn ExecutionPlan>> {\n+        vec![self.input.clone()]\n+    }\n+\n+    /// Get the output partitioning of this plan\n+    fn output_partitioning(&self) -> Partitioning {\n+        // The coalesce batches operator does not make any changes to the partitioning of its input\n+        self.input.output_partitioning()\n+    }\n+\n+    fn with_new_children(\n+        &self,\n+        children: Vec<Arc<dyn ExecutionPlan>>,\n+    ) -> Result<Arc<dyn ExecutionPlan>> {\n+        match children.len() {\n+            1 => Ok(Arc::new(CoalesceBatchesExec::new(\n+                children[0].clone(),\n+                self.target_batch_size,\n+            ))),\n+            _ => Err(DataFusionError::Internal(\n+                \"CoalesceBatchesExec wrong number of children\".to_string(),\n+            )),\n+        }\n+    }\n+\n+    async fn execute(&self, partition: usize) -> Result<SendableRecordBatchStream> {\n+        Ok(Box::pin(CoalesceBatchesStream {\n+            input: self.input.execute(partition).await?,\n+            schema: self.input.schema().clone(),\n+            target_batch_size: self.target_batch_size.clone(),\n+            buffer: Vec::new(),\n+            buffered_rows: 0,\n+        }))\n+    }\n+}\n+\n+struct CoalesceBatchesStream {\n+    /// The input plan\n+    input: SendableRecordBatchStream,\n+    /// The input schema\n+    schema: SchemaRef,\n+    /// Minimum number of rows for coalesces batches\n+    target_batch_size: usize,\n+    /// Buffered batches\n+    buffer: Vec<RecordBatch>,\n+    /// Buffered row count\n+    buffered_rows: usize,\n+}\n+\n+impl Stream for CoalesceBatchesStream {\n+    type Item = ArrowResult<RecordBatch>;\n+\n+    fn poll_next(\n+        mut self: Pin<&mut Self>,\n+        cx: &mut Context<'_>,\n+    ) -> Poll<Option<Self::Item>> {\n+        loop {\n+            let input_batch = self.input.poll_next_unpin(cx);\n+            match input_batch {\n+                Poll::Ready(x) => match x {\n+                    Some(Ok(ref batch)) => {\n+                        if batch.num_rows() >= self.target_batch_size\n+                            && self.buffer.is_empty()\n+                        {\n+                            return Poll::Ready(Some(Ok(batch.clone())));\n\nReview comment:\n       This has the effect that it can reorder the output rows from this operator. I think that is fine, but it should probably be noted somewhere (so that when we get to optimizations related to sorting we know this operation as written will not preserve the input order)\n\n##########\nFile path: rust/datafusion/src/physical_plan/planner.rs\n##########\n@@ -110,6 +111,16 @@ impl DefaultPhysicalPlanner {\n             // leaf node, children cannot be replaced\n             Ok(plan.clone())\n         } else {\n+            // wrap filter in coalesce batches\n+            let plan = if plan.as_any().downcast_ref::<FilterExec>().is_some() {\n+                let target_batch_size = ctx_state.config.batch_size;\n+                Arc::new(CoalesceBatchesExec::new(plan.clone(), target_batch_size))\n\nReview comment:\n       The issue with Cost based optimizers is that invariably they get it wrong sometimes (e.g. the selectivity is mis calculated due to correlations in the data or nulls or something).\r\n   \r\n   I think state of the art in optimizers is to delay as many such decisions to runtime as possible (when the actual cardinalities are known).\r\n   \r\n   So in this case, rather than figuring out which output operators to wrap, I suggest we do something like wrap *all* operators with coalesce, or maybe  update the `Filter` operation itself to do this coalescing internally when it is preparing its output and avoid the copy entirely\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-30T11:36:34.943+0000",
                    "updated": "2020-12-30T11:36:34.943+0000",
                    "started": "2020-12-30T11:36:34.943+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "529478",
                    "issueId": "13348208"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13348208/worklog/529518",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on a change in pull request #9043:\nURL: https://github.com/apache/arrow/pull/9043#discussion_r550216625\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/coalesce_batches.rs\n##########\n@@ -0,0 +1,295 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! CoalesceBatchesExec combines small batches into larger batches for more efficient use of\n+//! vectorized processing by upstream operators.\n+\n+use std::any::Any;\n+use std::pin::Pin;\n+use std::sync::Arc;\n+use std::task::{Context, Poll};\n+\n+use crate::error::{DataFusionError, Result};\n+use crate::physical_plan::{\n+    ExecutionPlan, Partitioning, RecordBatchStream, SendableRecordBatchStream,\n+};\n+\n+use arrow::compute::kernels::concat::concat;\n+use arrow::datatypes::SchemaRef;\n+use arrow::error::Result as ArrowResult;\n+use arrow::record_batch::RecordBatch;\n+use async_trait::async_trait;\n+use futures::stream::{Stream, StreamExt};\n+use log::debug;\n+\n+/// CoalesceBatchesExec combines small batches into larger batches for more efficient use of\n+/// vectorized processing by upstream operators.\n+#[derive(Debug)]\n+pub struct CoalesceBatchesExec {\n+    /// The input plan\n+    input: Arc<dyn ExecutionPlan>,\n+    /// Minimum number of rows for coalesces batches\n+    target_batch_size: usize,\n+}\n+\n+impl CoalesceBatchesExec {\n+    /// Create a new CoalesceBatchesExec\n+    pub fn new(input: Arc<dyn ExecutionPlan>, target_batch_size: usize) -> Self {\n+        Self {\n+            input,\n+            target_batch_size,\n+        }\n+    }\n+}\n+\n+#[async_trait]\n+impl ExecutionPlan for CoalesceBatchesExec {\n+    /// Return a reference to Any that can be used for downcasting\n+    fn as_any(&self) -> &dyn Any {\n+        self\n+    }\n+\n+    /// Get the schema for this execution plan\n+    fn schema(&self) -> SchemaRef {\n+        // The coalesce batches operator does not make any changes to the schema of its input\n+        self.input.schema()\n+    }\n+\n+    fn children(&self) -> Vec<Arc<dyn ExecutionPlan>> {\n+        vec![self.input.clone()]\n+    }\n+\n+    /// Get the output partitioning of this plan\n+    fn output_partitioning(&self) -> Partitioning {\n+        // The coalesce batches operator does not make any changes to the partitioning of its input\n+        self.input.output_partitioning()\n+    }\n+\n+    fn with_new_children(\n+        &self,\n+        children: Vec<Arc<dyn ExecutionPlan>>,\n+    ) -> Result<Arc<dyn ExecutionPlan>> {\n+        match children.len() {\n+            1 => Ok(Arc::new(CoalesceBatchesExec::new(\n+                children[0].clone(),\n+                self.target_batch_size,\n+            ))),\n+            _ => Err(DataFusionError::Internal(\n+                \"CoalesceBatchesExec wrong number of children\".to_string(),\n+            )),\n+        }\n+    }\n+\n+    async fn execute(&self, partition: usize) -> Result<SendableRecordBatchStream> {\n+        Ok(Box::pin(CoalesceBatchesStream {\n+            input: self.input.execute(partition).await?,\n+            schema: self.input.schema().clone(),\n+            target_batch_size: self.target_batch_size.clone(),\n+            buffer: Vec::new(),\n+            buffered_rows: 0,\n+        }))\n+    }\n+}\n+\n+struct CoalesceBatchesStream {\n+    /// The input plan\n+    input: SendableRecordBatchStream,\n+    /// The input schema\n+    schema: SchemaRef,\n+    /// Minimum number of rows for coalesces batches\n+    target_batch_size: usize,\n+    /// Buffered batches\n+    buffer: Vec<RecordBatch>,\n+    /// Buffered row count\n+    buffered_rows: usize,\n+}\n+\n+impl Stream for CoalesceBatchesStream {\n+    type Item = ArrowResult<RecordBatch>;\n+\n+    fn poll_next(\n+        mut self: Pin<&mut Self>,\n+        cx: &mut Context<'_>,\n+    ) -> Poll<Option<Self::Item>> {\n+        loop {\n+            let input_batch = self.input.poll_next_unpin(cx);\n+            match input_batch {\n+                Poll::Ready(x) => match x {\n+                    Some(Ok(ref batch)) => {\n+                        if batch.num_rows() >= self.target_batch_size\n+                            && self.buffer.is_empty()\n+                        {\n+                            return Poll::Ready(Some(Ok(batch.clone())));\n\nReview comment:\n       Why would this change the ordering within a single partition? The intent was to produce the rows in the same order they are received.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-30T14:39:52.029+0000",
                    "updated": "2020-12-30T14:39:52.029+0000",
                    "started": "2020-12-30T14:39:52.029+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "529518",
                    "issueId": "13348208"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13348208/worklog/529519",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on a change in pull request #9043:\nURL: https://github.com/apache/arrow/pull/9043#discussion_r550217442\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/planner.rs\n##########\n@@ -110,6 +111,16 @@ impl DefaultPhysicalPlanner {\n             // leaf node, children cannot be replaced\n             Ok(plan.clone())\n         } else {\n+            // wrap filter in coalesce batches\n+            let plan = if plan.as_any().downcast_ref::<FilterExec>().is_some() {\n+                let target_batch_size = ctx_state.config.batch_size;\n\nReview comment:\n       I actually wanted a separate config for this but I would like to do this once we have https://issues.apache.org/jira/browse/ARROW-11059 (which I would like to try and get in for 3.0.0).\r\n   \r\n   I think changing it to half the batch size for now could make sense. I will push that change to this PR.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-30T14:42:17.307+0000",
                    "updated": "2020-12-30T14:42:17.307+0000",
                    "started": "2020-12-30T14:42:17.307+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "529519",
                    "issueId": "13348208"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13348208/worklog/529558",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove closed pull request #9043:\nURL: https://github.com/apache/arrow/pull/9043\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-30T16:56:59.375+0000",
                    "updated": "2020-12-30T16:56:59.375+0000",
                    "started": "2020-12-30T16:56:59.375+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "529558",
                    "issueId": "13348208"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13348208/worklog/529573",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on a change in pull request #9043:\nURL: https://github.com/apache/arrow/pull/9043#discussion_r550271524\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/coalesce_batches.rs\n##########\n@@ -0,0 +1,295 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! CoalesceBatchesExec combines small batches into larger batches for more efficient use of\n+//! vectorized processing by upstream operators.\n+\n+use std::any::Any;\n+use std::pin::Pin;\n+use std::sync::Arc;\n+use std::task::{Context, Poll};\n+\n+use crate::error::{DataFusionError, Result};\n+use crate::physical_plan::{\n+    ExecutionPlan, Partitioning, RecordBatchStream, SendableRecordBatchStream,\n+};\n+\n+use arrow::compute::kernels::concat::concat;\n+use arrow::datatypes::SchemaRef;\n+use arrow::error::Result as ArrowResult;\n+use arrow::record_batch::RecordBatch;\n+use async_trait::async_trait;\n+use futures::stream::{Stream, StreamExt};\n+use log::debug;\n+\n+/// CoalesceBatchesExec combines small batches into larger batches for more efficient use of\n+/// vectorized processing by upstream operators.\n+#[derive(Debug)]\n+pub struct CoalesceBatchesExec {\n+    /// The input plan\n+    input: Arc<dyn ExecutionPlan>,\n+    /// Minimum number of rows for coalesces batches\n+    target_batch_size: usize,\n+}\n+\n+impl CoalesceBatchesExec {\n+    /// Create a new CoalesceBatchesExec\n+    pub fn new(input: Arc<dyn ExecutionPlan>, target_batch_size: usize) -> Self {\n+        Self {\n+            input,\n+            target_batch_size,\n+        }\n+    }\n+}\n+\n+#[async_trait]\n+impl ExecutionPlan for CoalesceBatchesExec {\n+    /// Return a reference to Any that can be used for downcasting\n+    fn as_any(&self) -> &dyn Any {\n+        self\n+    }\n+\n+    /// Get the schema for this execution plan\n+    fn schema(&self) -> SchemaRef {\n+        // The coalesce batches operator does not make any changes to the schema of its input\n+        self.input.schema()\n+    }\n+\n+    fn children(&self) -> Vec<Arc<dyn ExecutionPlan>> {\n+        vec![self.input.clone()]\n+    }\n+\n+    /// Get the output partitioning of this plan\n+    fn output_partitioning(&self) -> Partitioning {\n+        // The coalesce batches operator does not make any changes to the partitioning of its input\n+        self.input.output_partitioning()\n+    }\n+\n+    fn with_new_children(\n+        &self,\n+        children: Vec<Arc<dyn ExecutionPlan>>,\n+    ) -> Result<Arc<dyn ExecutionPlan>> {\n+        match children.len() {\n+            1 => Ok(Arc::new(CoalesceBatchesExec::new(\n+                children[0].clone(),\n+                self.target_batch_size,\n+            ))),\n+            _ => Err(DataFusionError::Internal(\n+                \"CoalesceBatchesExec wrong number of children\".to_string(),\n+            )),\n+        }\n+    }\n+\n+    async fn execute(&self, partition: usize) -> Result<SendableRecordBatchStream> {\n+        Ok(Box::pin(CoalesceBatchesStream {\n+            input: self.input.execute(partition).await?,\n+            schema: self.input.schema().clone(),\n+            target_batch_size: self.target_batch_size.clone(),\n+            buffer: Vec::new(),\n+            buffered_rows: 0,\n+        }))\n+    }\n+}\n+\n+struct CoalesceBatchesStream {\n+    /// The input plan\n+    input: SendableRecordBatchStream,\n+    /// The input schema\n+    schema: SchemaRef,\n+    /// Minimum number of rows for coalesces batches\n+    target_batch_size: usize,\n+    /// Buffered batches\n+    buffer: Vec<RecordBatch>,\n+    /// Buffered row count\n+    buffered_rows: usize,\n+}\n+\n+impl Stream for CoalesceBatchesStream {\n+    type Item = ArrowResult<RecordBatch>;\n+\n+    fn poll_next(\n+        mut self: Pin<&mut Self>,\n+        cx: &mut Context<'_>,\n+    ) -> Poll<Option<Self::Item>> {\n+        loop {\n+            let input_batch = self.input.poll_next_unpin(cx);\n+            match input_batch {\n+                Poll::Ready(x) => match x {\n+                    Some(Ok(ref batch)) => {\n+                        if batch.num_rows() >= self.target_batch_size\n+                            && self.buffer.is_empty()\n+                        {\n+                            return Poll::Ready(Some(Ok(batch.clone())));\n\nReview comment:\n       Whoops -- that was my mistake -- I didn't see the condition of `self.buffer.is_empty()` -- in that case I agree that the rows remain ordered\r\n   \r\n   I guess I was thinking ahead to an operator that only copies data when needed rather than always. Too fancy. Sorry for the noise\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-30T17:34:15.492+0000",
                    "updated": "2020-12-30T17:34:15.492+0000",
                    "started": "2020-12-30T17:34:15.492+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "529573",
                    "issueId": "13348208"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 12000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@6f4257d2[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@61d7d4a0[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@791edf6c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@26b3763b[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3c1f04bd[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@47dc8fe0[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@48b6cdc8[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@7589684b[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@31f7b0ab[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@12779afa[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6c51cdf1[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@52a42b00[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 12000,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Dec 30 18:17:01 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-12-30T16:56:48.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-11058/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2020-12-29T02:46:34.000+0000",
        "updated": "2020-12-30T18:17:01.000+0000",
        "timeoriginalestimate": null,
        "description": "When we have a FilterExec in the plan, it can produce lots of small batches and we therefore lose efficiency of vectorized operations.\r\n\r\nWe should implement a new CoalesceBatchExec and wrap every FilterExec with one of these so that small batches can be recombined into larger batches to improve the efficiency of upstream operators.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "3h 20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 12000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Rust] [DataFusion] Implement \"coalesce batches\" operator",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13348208/comment/17255835",
                    "id": "17255835",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorgecarleitao",
                        "name": "jorgecarleitao",
                        "key": "jorgecarleitao",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=jorgecarleitao&avatarId=43827",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jorgecarleitao&avatarId=43827",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jorgecarleitao&avatarId=43827",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jorgecarleitao&avatarId=43827"
                        },
                        "displayName": "Jorge Leit\u00e3o",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "This aspect of datafusion is a bit unclear atm: in datafusion, it seems that we have two types of \"buckets\": parts and batches, while in spark there is only parts (via partitioning). In spark, the partitioning tradeoff is related to higher parallelism vs slower exchanges, but I can't find the equivalent tradeoff with number of batches per part in datafusion.\r\n\r\n6 months ago, my hypothesis was that partitioning would be used for inter-process parallelism, while batches would be used for intra-process parallelism. My idea at the time was: there is a stream of parts, and each part is an iterator of batches: batch execution runs in rayon, and each part is a future and part of a stream (via Tokio, potentially in another machine). In this design, the two \"buckets\" represent different parts of parallelism: thread parallelism and process parallelism (e.g. cross-machine), that in a single machine would be run by two different thread pools.\r\n\r\nBut since we use a stream of batches and a stream of parts, I can't think of a way to differentiate them. E.g. let's say that we implement the \"coalesce batches\". When does using it is expected to improve performance? When should we add them in the optimizer?\r\n\r\nMore quantitatively: given N rows, in spark we can distribute them in P parts, while in datafusion we can distribute them in P parts and B batches. In spark, P deals with parallelism in very specific ways (higher P => higher parallelism and more tasks). In DataFusion, it is a bit unclear how the tuple (P,B) leads to one or the other, and what is the reason we have P and B in the first place (since they all run on the same thread pool and both are async).\r\n\r\nAFAIK B is not necessarily related to vectorization, as the vectorization (at least on the CPU level) happens at much smaller chunks (lane size). B does not lead to higher parallelism also: since they are part of a stream, there is no way to run two batches from a single part in parallel, as we need to finish the execution of one before the start of the next.\r\n\r\nThis aspect of parallelism in datafusion was clear to me 6 months ago but became unclear when we converted the recordbatchreader to a stream.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorgecarleitao",
                        "name": "jorgecarleitao",
                        "key": "jorgecarleitao",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=jorgecarleitao&avatarId=43827",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jorgecarleitao&avatarId=43827",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jorgecarleitao&avatarId=43827",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jorgecarleitao&avatarId=43827"
                        },
                        "displayName": "Jorge Leit\u00e3o",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2020-12-29T06:28:58.074+0000",
                    "updated": "2020-12-29T06:30:24.617+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13348208/comment/17256096",
                    "id": "17256096",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "body": "[~jorgecarleitao]\r\n\r\nI think that the PR [https://github.com/apache/arrow/pull/9043] will help explain this, but Apache Spark actually does do something very similar. Spark has partitions which are the unit of parallelism (either on threads or executors) and each partition is an iterator[T].\r\n\r\nSpark supports row-based (Iterator[Row]) and column-based operators (Iterator[ColumnarBatch]) operators out-the-box although most of the built-in operators are row-based. Spark will insert transitions as required to convert between row and column-based operators.\r\n\r\nBecause filters can produce empty batches or batches with a single or small number of rows, we lose some efficiency both with SIMD and also just due to per-batch overheads in particular kernels (as we have seen with MutableArrayData). \r\n\r\nSmall batches can also be inefficient when writing out to Parquet because we lose the benefits of compression to some degree, so this is another use case where we would want to coalesce them.\r\n\r\nCoalescing batches is especially important for GPU if we ever add support for that because the cost of an operation on GPU is the same (once data is loaded) regardless of how many items it is operating on, so it is beneficial to operate on as much data in parallel as possible.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "created": "2020-12-29T18:21:54.866+0000",
                    "updated": "2020-12-29T18:21:54.866+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13348208/comment/17256132",
                    "id": "17256132",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorgecarleitao",
                        "name": "jorgecarleitao",
                        "key": "jorgecarleitao",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=jorgecarleitao&avatarId=43827",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jorgecarleitao&avatarId=43827",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jorgecarleitao&avatarId=43827",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jorgecarleitao&avatarId=43827"
                        },
                        "displayName": "Jorge Leit\u00e3o",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Thank you so much for your explanation, [~andygrove] . I agree with that.\r\n\r\nMaybe this is too obvious and I am just not knowledgeable here: what is the problem with P = B? I.e. what do we gain from having both a batch size and number of parts, instead of having just one batch per part?\r\n\r\nI am asking this because it seems to me that we have a fragmentation problem: we start with a bunch of contiguous blocks of memory, and as we operate on them, we fragement / filter them in smaller and smaller parts, that, at some point, make them slow to operate individually (and we defragment via coalesces to bring them back together). Just like in a OS.\r\n\r\nWith (P,B), we need to deal with fragmentation both at the partition level and batch level: we need to worry about having a partition that is balanced (in number of rows per part), and also have each part balanced (in number of rows per batch on each part).\r\n\r\nWouldn't be simpler if P=B, where we only need to worry about fragmentation of parts (and coalesce parts)? I suspect that that would be too simple, i.e. I am missing the benefit of the extra degree of freedom (P,B) vs (P=B).\r\n\r\n\u00a0\r\n\r\n\u00a0",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorgecarleitao",
                        "name": "jorgecarleitao",
                        "key": "jorgecarleitao",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=jorgecarleitao&avatarId=43827",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jorgecarleitao&avatarId=43827",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jorgecarleitao&avatarId=43827",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jorgecarleitao&avatarId=43827"
                        },
                        "displayName": "Jorge Leit\u00e3o",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2020-12-29T19:12:48.125+0000",
                    "updated": "2020-12-29T19:12:48.125+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13348208/comment/17256604",
                    "id": "17256604",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "body": "Issue resolved by pull request 9043\n[https://github.com/apache/arrow/pull/9043]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "created": "2020-12-30T16:56:48.895+0000",
                    "updated": "2020-12-30T16:56:48.895+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13348208/comment/17256640",
                    "id": "17256640",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "body": "I can see your argument [~jorgecarleitao]\r\n\r\nI can see how we could parallelize operations across batches within one or more partition in some cases rather than repartitioning to increase parallelism.\r\n\r\nIf an operator requires its input to be in a specific order we would need to fall back to single-threaded behavior per partition though (SortMergeJoin, SortAggregate, etc).\r\n\r\nIt is possible I am just too familiar with how this is normally done in other query engines but I see partitions as the unit of parallelism and batches are just there so we can do vectorized processing and we need to manage the size of the batches for efficient processing (this is more important on GPU than CPU though).\r\n\r\nI think if/when we get to distributed queries in DataFusion, the partition model is even more important, especially when reading Parquet files that are partitioned based on keys, so we keep processing of related data together in the same partitions/nodes.\r\n\r\nI'd be interested to hear what others have to say on all of this, of course.\r\n\r\n\u00a0\r\n\r\n\u00a0\r\n\r\n\u00a0",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "created": "2020-12-30T18:17:01.471+0000",
                    "updated": "2020-12-30T18:17:01.471+0000"
                }
            ],
            "maxResults": 5,
            "total": 5,
            "startAt": 0
        },
        "customfield_12311820": "0|z0lw00:",
        "customfield_12314139": null
    }
}