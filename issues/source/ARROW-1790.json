{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13117432",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13117432",
    "key": "ARROW-1790",
    "fields": {
        "fixVersions": [],
        "resolution": null,
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": null,
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
            "description": "The issue is open and ready for the assignee to start work on it.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
            "name": "Open",
            "id": "1",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                "id": 2,
                "key": "new",
                "colorName": "blue-gray",
                "name": "To Do"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328932",
                "id": "12328932",
                "name": "Format"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 17400,
            "total": 17400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 17400,
            "total": 17400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1790/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 31,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13117432/worklog/206258",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3785: ARROW-1790: Proposal to c-like struct.\nURL: https://github.com/apache/arrow/pull/3785\n \n \n   Some things worth discussing:\r\n   1.  General design.\r\n   2.  Should higher level fixed width logical types (e.g. time, timestamp be included).\r\n   On the other size is UTF-8 to high level?\r\n   3.  Should offset be overridable to allow for field overlap (numpy seems allow this)\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-01T06:06:59.816+0000",
                    "updated": "2019-03-01T06:06:59.816+0000",
                    "started": "2019-03-01T06:06:59.815+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "206258",
                    "issueId": "13117432"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13117432/worklog/206318",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #3785: ARROW-1790: [Format] Proposal for c-like struct.\nURL: https://github.com/apache/arrow/pull/3785#discussion_r261529262\n \n \n\n ##########\n File path: format/Schema.fbs\n ##########\n @@ -187,6 +187,103 @@ table Interval {\n   unit: IntervalUnit;\n }\n \n+\n+/// ----------------------------------------------------------------------\n+/// user defined key value pairs to add custom metadata to arrow\n+/// key namespacing is the responsibility of the user\n+\n+table KeyValue {\n+  key: string;\n+  value: string;\n+}\n+\n+/// ------------------------------------------------------------------------\n+/// Types used to represent a packed c-like structs.  These are experimental\n+/// and maybe subject to change.\n+/// IMPORTANT: COMPATIBILITY MAY BE BROKEN IN FUTURE release.\n+/// They are not required to be implemented.\n+\n+/// Similar to a c-union, takes the byte-width\n+/// of its longest sub-type.  To record type of union\n+/// use the \"tagged union\" pattern.\n+table PackedUnion {\n+}\n+\n+/// A binary string of a maximum size.  Fields are layed out as\n+/// [length][UTF8 bytes].  The number of bytes used is maxSize +\n+/// lengthType.bitWidth/8.\n+table PackedBinary {\n+  /// Maximum number of bytes (not characters) used.  This\n+  /// amount of bytes will always be used.\n+  maxSize: int;\n+\n+  /// If not set all binary data are of maxSize.  If set use specified\n \n Review comment:\n   What does \"not set\" mean?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-01T09:26:46.028+0000",
                    "updated": "2019-03-01T09:26:46.028+0000",
                    "started": "2019-03-01T09:26:46.027+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "206318",
                    "issueId": "13117432"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13117432/worklog/206319",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #3785: ARROW-1790: [Format] Proposal for c-like struct.\nURL: https://github.com/apache/arrow/pull/3785#discussion_r261529875\n \n \n\n ##########\n File path: format/Schema.fbs\n ##########\n @@ -187,6 +187,103 @@ table Interval {\n   unit: IntervalUnit;\n }\n \n+\n+/// ----------------------------------------------------------------------\n+/// user defined key value pairs to add custom metadata to arrow\n+/// key namespacing is the responsibility of the user\n+\n+table KeyValue {\n+  key: string;\n+  value: string;\n+}\n+\n+/// ------------------------------------------------------------------------\n+/// Types used to represent a packed c-like structs.  These are experimental\n+/// and maybe subject to change.\n+/// IMPORTANT: COMPATIBILITY MAY BE BROKEN IN FUTURE release.\n+/// They are not required to be implemented.\n+\n+/// Similar to a c-union, takes the byte-width\n+/// of its longest sub-type.  To record type of union\n+/// use the \"tagged union\" pattern.\n+table PackedUnion {\n \n Review comment:\n   Not sure this should be in the first version of this spec.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-01T09:26:46.105+0000",
                    "updated": "2019-03-01T09:26:46.105+0000",
                    "started": "2019-03-01T09:26:46.104+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "206319",
                    "issueId": "13117432"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13117432/worklog/206320",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #3785: ARROW-1790: [Format] Proposal for c-like struct.\nURL: https://github.com/apache/arrow/pull/3785#discussion_r261529597\n \n \n\n ##########\n File path: format/Schema.fbs\n ##########\n @@ -187,6 +187,103 @@ table Interval {\n   unit: IntervalUnit;\n }\n \n+\n+/// ----------------------------------------------------------------------\n+/// user defined key value pairs to add custom metadata to arrow\n+/// key namespacing is the responsibility of the user\n+\n+table KeyValue {\n+  key: string;\n+  value: string;\n+}\n+\n+/// ------------------------------------------------------------------------\n+/// Types used to represent a packed c-like structs.  These are experimental\n+/// and maybe subject to change.\n+/// IMPORTANT: COMPATIBILITY MAY BE BROKEN IN FUTURE release.\n+/// They are not required to be implemented.\n+\n+/// Similar to a c-union, takes the byte-width\n+/// of its longest sub-type.  To record type of union\n+/// use the \"tagged union\" pattern.\n+table PackedUnion {\n+}\n+\n+/// A binary string of a maximum size.  Fields are layed out as\n+/// [length][UTF8 bytes].  The number of bytes used is maxSize +\n+/// lengthType.bitWidth/8.\n+table PackedBinary {\n+  /// Maximum number of bytes (not characters) used.  This\n+  /// amount of bytes will always be used.\n+  maxSize: int;\n+\n+  /// If not set all binary data are of maxSize.  If set use specified\n+  /// numeric type to specify a length less then or equal to\n+  /// max size.\n+  lengthType: Int;\n \n Review comment:\n   Hmm... how does an int denote a numeric type? What is the encoding?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-01T09:26:46.112+0000",
                    "updated": "2019-03-01T09:26:46.112+0000",
                    "started": "2019-03-01T09:26:46.112+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "206320",
                    "issueId": "13117432"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13117432/worklog/206321",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #3785: ARROW-1790: [Format] Proposal for c-like struct.\nURL: https://github.com/apache/arrow/pull/3785#discussion_r261530508\n \n \n\n ##########\n File path: format/Schema.fbs\n ##########\n @@ -187,6 +187,103 @@ table Interval {\n   unit: IntervalUnit;\n }\n \n+\n+/// ----------------------------------------------------------------------\n+/// user defined key value pairs to add custom metadata to arrow\n+/// key namespacing is the responsibility of the user\n+\n+table KeyValue {\n+  key: string;\n+  value: string;\n+}\n+\n+/// ------------------------------------------------------------------------\n+/// Types used to represent a packed c-like structs.  These are experimental\n+/// and maybe subject to change.\n+/// IMPORTANT: COMPATIBILITY MAY BE BROKEN IN FUTURE release.\n+/// They are not required to be implemented.\n+\n+/// Similar to a c-union, takes the byte-width\n+/// of its longest sub-type.  To record type of union\n+/// use the \"tagged union\" pattern.\n+table PackedUnion {\n+}\n+\n+/// A binary string of a maximum size.  Fields are layed out as\n+/// [length][UTF8 bytes].  The number of bytes used is maxSize +\n+/// lengthType.bitWidth/8.\n+table PackedBinary {\n+  /// Maximum number of bytes (not characters) used.  This\n+  /// amount of bytes will always be used.\n+  maxSize: int;\n+\n+  /// If not set all binary data are of maxSize.  If set use specified\n+  /// numeric type to specify a length less then or equal to\n+  /// max size.\n+  lengthType: Int;\n+}\n+\n+\n+/// A UTF-8 string of a maximum size.  Fields are layed out as\n+/// [length][UTF8 bytes].  The number of bytes used is maxSize +\n+/// lengthType.bitWidth/8.\n+table PackedUtf8 {\n+  /// Maximum number of bytes (not characters) used.  This\n+  /// amount of bytes will always be used.\n+  maxSize: int;\n+\n+  /// If not set all strings are maxSize.  If set use specified\n+  /// numeric type to specify a length less then or equal to\n+  /// max size.\n+  lengthType: Int;\n+}\n+\n+// Supported types for PackedStructs.\n+union PackedType {\n+  /// Booleans use 1 byte, 0 is defined as false, all other\n+  /// values are true.\n+  Bool,\n+  Int,\n+  FloatingPoint,\n+  FixedSizeList,\n+  FixedSizeBinary,\n+  PackedBinary,\n+  PackedUnion,\n+  PackedUtf8,\n+  /// For nested structs.\n \n Review comment:\n   Hmm... can you explain what this means?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-01T09:26:46.129+0000",
                    "updated": "2019-03-01T09:26:46.129+0000",
                    "started": "2019-03-01T09:26:46.129+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "206321",
                    "issueId": "13117432"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13117432/worklog/206322",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #3785: ARROW-1790: [Format] Proposal for c-like struct.\nURL: https://github.com/apache/arrow/pull/3785#discussion_r261531399\n \n \n\n ##########\n File path: format/Schema.fbs\n ##########\n @@ -187,6 +187,103 @@ table Interval {\n   unit: IntervalUnit;\n }\n \n+\n+/// ----------------------------------------------------------------------\n+/// user defined key value pairs to add custom metadata to arrow\n+/// key namespacing is the responsibility of the user\n+\n+table KeyValue {\n+  key: string;\n+  value: string;\n+}\n+\n+/// ------------------------------------------------------------------------\n+/// Types used to represent a packed c-like structs.  These are experimental\n+/// and maybe subject to change.\n+/// IMPORTANT: COMPATIBILITY MAY BE BROKEN IN FUTURE release.\n+/// They are not required to be implemented.\n+\n+/// Similar to a c-union, takes the byte-width\n+/// of its longest sub-type.  To record type of union\n+/// use the \"tagged union\" pattern.\n+table PackedUnion {\n+}\n+\n+/// A binary string of a maximum size.  Fields are layed out as\n+/// [length][UTF8 bytes].  The number of bytes used is maxSize +\n+/// lengthType.bitWidth/8.\n+table PackedBinary {\n+  /// Maximum number of bytes (not characters) used.  This\n+  /// amount of bytes will always be used.\n+  maxSize: int;\n+\n+  /// If not set all binary data are of maxSize.  If set use specified\n+  /// numeric type to specify a length less then or equal to\n+  /// max size.\n+  lengthType: Int;\n+}\n+\n+\n+/// A UTF-8 string of a maximum size.  Fields are layed out as\n+/// [length][UTF8 bytes].  The number of bytes used is maxSize +\n+/// lengthType.bitWidth/8.\n+table PackedUtf8 {\n+  /// Maximum number of bytes (not characters) used.  This\n+  /// amount of bytes will always be used.\n+  maxSize: int;\n+\n+  /// If not set all strings are maxSize.  If set use specified\n+  /// numeric type to specify a length less then or equal to\n+  /// max size.\n+  lengthType: Int;\n+}\n+\n+// Supported types for PackedStructs.\n+union PackedType {\n+  /// Booleans use 1 byte, 0 is defined as false, all other\n+  /// values are true.\n+  Bool,\n+  Int,\n+  FloatingPoint,\n+  FixedSizeList,\n+  FixedSizeBinary,\n+  PackedBinary,\n+  PackedUnion,\n+  PackedUtf8,\n+  /// For nested structs.\n+  Struct_\n+}\n+\n+// A field in a packed struct.\n+table PackedStructField {\n+  // Name is not required, in i.e. a List\n+  name: string;\n+\n+  // This is the type of the decoded value if the field is dictionary encoded\n+  type: PackedType;\n+\n+  // Number of bytes to reserve after this field.\n+  padding: int = 0;\n+\n+  // children apply only to Nested data types like Struct, List and Union\n+  children: [PackedStructField];\n+\n+  // User-defined metadata\n+  custom_metadata: [ KeyValue ];\n+}\n+\n+// A \"c\"-like struct object that has a fixed byte-width\n+// for each slot in the array.  The slot is layed out by doing\n+// a depth first traversal of all PackedStructFields and placing\n+// them one after another.\n+table PackedStruct {\n+  fields : [ PackedStructField ];\n+  /// Number in size in bytes of each slot. This serves\n \n Review comment:\n   Including padding?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-01T09:26:46.210+0000",
                    "updated": "2019-03-01T09:26:46.210+0000",
                    "started": "2019-03-01T09:26:46.210+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "206322",
                    "issueId": "13117432"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13117432/worklog/206323",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #3785: ARROW-1790: [Format] Proposal for c-like struct.\nURL: https://github.com/apache/arrow/pull/3785#discussion_r261530890\n \n \n\n ##########\n File path: format/Schema.fbs\n ##########\n @@ -187,6 +187,103 @@ table Interval {\n   unit: IntervalUnit;\n }\n \n+\n+/// ----------------------------------------------------------------------\n+/// user defined key value pairs to add custom metadata to arrow\n+/// key namespacing is the responsibility of the user\n+\n+table KeyValue {\n+  key: string;\n+  value: string;\n+}\n+\n+/// ------------------------------------------------------------------------\n+/// Types used to represent a packed c-like structs.  These are experimental\n+/// and maybe subject to change.\n+/// IMPORTANT: COMPATIBILITY MAY BE BROKEN IN FUTURE release.\n+/// They are not required to be implemented.\n+\n+/// Similar to a c-union, takes the byte-width\n+/// of its longest sub-type.  To record type of union\n+/// use the \"tagged union\" pattern.\n+table PackedUnion {\n+}\n+\n+/// A binary string of a maximum size.  Fields are layed out as\n+/// [length][UTF8 bytes].  The number of bytes used is maxSize +\n+/// lengthType.bitWidth/8.\n+table PackedBinary {\n+  /// Maximum number of bytes (not characters) used.  This\n+  /// amount of bytes will always be used.\n+  maxSize: int;\n+\n+  /// If not set all binary data are of maxSize.  If set use specified\n+  /// numeric type to specify a length less then or equal to\n+  /// max size.\n+  lengthType: Int;\n+}\n+\n+\n+/// A UTF-8 string of a maximum size.  Fields are layed out as\n+/// [length][UTF8 bytes].  The number of bytes used is maxSize +\n+/// lengthType.bitWidth/8.\n+table PackedUtf8 {\n+  /// Maximum number of bytes (not characters) used.  This\n+  /// amount of bytes will always be used.\n+  maxSize: int;\n+\n+  /// If not set all strings are maxSize.  If set use specified\n+  /// numeric type to specify a length less then or equal to\n+  /// max size.\n+  lengthType: Int;\n+}\n+\n+// Supported types for PackedStructs.\n+union PackedType {\n+  /// Booleans use 1 byte, 0 is defined as false, all other\n+  /// values are true.\n+  Bool,\n+  Int,\n+  FloatingPoint,\n+  FixedSizeList,\n+  FixedSizeBinary,\n+  PackedBinary,\n+  PackedUnion,\n+  PackedUtf8,\n+  /// For nested structs.\n+  Struct_\n \n Review comment:\n   Why the underscore? Also, we use \"struct\" for something else. Perhaps \"Nested\"?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-01T09:26:46.217+0000",
                    "updated": "2019-03-01T09:26:46.217+0000",
                    "started": "2019-03-01T09:26:46.217+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "206323",
                    "issueId": "13117432"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13117432/worklog/206324",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #3785: ARROW-1790: [Format] Proposal for c-like struct.\nURL: https://github.com/apache/arrow/pull/3785#discussion_r261531069\n \n \n\n ##########\n File path: format/Schema.fbs\n ##########\n @@ -187,6 +187,103 @@ table Interval {\n   unit: IntervalUnit;\n }\n \n+\n+/// ----------------------------------------------------------------------\n+/// user defined key value pairs to add custom metadata to arrow\n+/// key namespacing is the responsibility of the user\n+\n+table KeyValue {\n+  key: string;\n+  value: string;\n+}\n+\n+/// ------------------------------------------------------------------------\n+/// Types used to represent a packed c-like structs.  These are experimental\n+/// and maybe subject to change.\n+/// IMPORTANT: COMPATIBILITY MAY BE BROKEN IN FUTURE release.\n+/// They are not required to be implemented.\n+\n+/// Similar to a c-union, takes the byte-width\n+/// of its longest sub-type.  To record type of union\n+/// use the \"tagged union\" pattern.\n+table PackedUnion {\n+}\n+\n+/// A binary string of a maximum size.  Fields are layed out as\n+/// [length][UTF8 bytes].  The number of bytes used is maxSize +\n+/// lengthType.bitWidth/8.\n+table PackedBinary {\n+  /// Maximum number of bytes (not characters) used.  This\n+  /// amount of bytes will always be used.\n+  maxSize: int;\n+\n+  /// If not set all binary data are of maxSize.  If set use specified\n+  /// numeric type to specify a length less then or equal to\n+  /// max size.\n+  lengthType: Int;\n+}\n+\n+\n+/// A UTF-8 string of a maximum size.  Fields are layed out as\n+/// [length][UTF8 bytes].  The number of bytes used is maxSize +\n+/// lengthType.bitWidth/8.\n+table PackedUtf8 {\n+  /// Maximum number of bytes (not characters) used.  This\n+  /// amount of bytes will always be used.\n+  maxSize: int;\n+\n+  /// If not set all strings are maxSize.  If set use specified\n+  /// numeric type to specify a length less then or equal to\n+  /// max size.\n+  lengthType: Int;\n+}\n+\n+// Supported types for PackedStructs.\n+union PackedType {\n+  /// Booleans use 1 byte, 0 is defined as false, all other\n+  /// values are true.\n+  Bool,\n+  Int,\n+  FloatingPoint,\n+  FixedSizeList,\n+  FixedSizeBinary,\n+  PackedBinary,\n+  PackedUnion,\n+  PackedUtf8,\n+  /// For nested structs.\n+  Struct_\n+}\n+\n+// A field in a packed struct.\n+table PackedStructField {\n+  // Name is not required, in i.e. a List\n+  name: string;\n+\n+  // This is the type of the decoded value if the field is dictionary encoded\n+  type: PackedType;\n+\n+  // Number of bytes to reserve after this field.\n+  padding: int = 0;\n+\n+  // children apply only to Nested data types like Struct, List and Union\n \n Review comment:\n   FixedSizeList and PackedUnion\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-01T09:26:46.235+0000",
                    "updated": "2019-03-01T09:26:46.235+0000",
                    "started": "2019-03-01T09:26:46.234+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "206324",
                    "issueId": "13117432"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13117432/worklog/206325",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #3785: ARROW-1790: [Format] Proposal for c-like struct.\nURL: https://github.com/apache/arrow/pull/3785#discussion_r261531232\n \n \n\n ##########\n File path: format/Schema.fbs\n ##########\n @@ -187,6 +187,103 @@ table Interval {\n   unit: IntervalUnit;\n }\n \n+\n+/// ----------------------------------------------------------------------\n+/// user defined key value pairs to add custom metadata to arrow\n+/// key namespacing is the responsibility of the user\n+\n+table KeyValue {\n+  key: string;\n+  value: string;\n+}\n+\n+/// ------------------------------------------------------------------------\n+/// Types used to represent a packed c-like structs.  These are experimental\n+/// and maybe subject to change.\n+/// IMPORTANT: COMPATIBILITY MAY BE BROKEN IN FUTURE release.\n+/// They are not required to be implemented.\n+\n+/// Similar to a c-union, takes the byte-width\n+/// of its longest sub-type.  To record type of union\n+/// use the \"tagged union\" pattern.\n+table PackedUnion {\n+}\n+\n+/// A binary string of a maximum size.  Fields are layed out as\n+/// [length][UTF8 bytes].  The number of bytes used is maxSize +\n+/// lengthType.bitWidth/8.\n+table PackedBinary {\n+  /// Maximum number of bytes (not characters) used.  This\n+  /// amount of bytes will always be used.\n+  maxSize: int;\n+\n+  /// If not set all binary data are of maxSize.  If set use specified\n+  /// numeric type to specify a length less then or equal to\n+  /// max size.\n+  lengthType: Int;\n+}\n+\n+\n+/// A UTF-8 string of a maximum size.  Fields are layed out as\n+/// [length][UTF8 bytes].  The number of bytes used is maxSize +\n+/// lengthType.bitWidth/8.\n+table PackedUtf8 {\n+  /// Maximum number of bytes (not characters) used.  This\n+  /// amount of bytes will always be used.\n+  maxSize: int;\n+\n+  /// If not set all strings are maxSize.  If set use specified\n+  /// numeric type to specify a length less then or equal to\n+  /// max size.\n+  lengthType: Int;\n+}\n+\n+// Supported types for PackedStructs.\n+union PackedType {\n+  /// Booleans use 1 byte, 0 is defined as false, all other\n+  /// values are true.\n+  Bool,\n+  Int,\n+  FloatingPoint,\n+  FixedSizeList,\n+  FixedSizeBinary,\n+  PackedBinary,\n+  PackedUnion,\n+  PackedUtf8,\n+  /// For nested structs.\n+  Struct_\n+}\n+\n+// A field in a packed struct.\n+table PackedStructField {\n+  // Name is not required, in i.e. a List\n+  name: string;\n+\n+  // This is the type of the decoded value if the field is dictionary encoded\n \n Review comment:\n   I don't understand why dictionary encoding is mentioned here?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-01T09:26:46.342+0000",
                    "updated": "2019-03-01T09:26:46.342+0000",
                    "started": "2019-03-01T09:26:46.341+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "206325",
                    "issueId": "13117432"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13117432/worklog/206497",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3785: ARROW-1790: [Format] Proposal for c-like struct.\nURL: https://github.com/apache/arrow/pull/3785#discussion_r261667949\n \n \n\n ##########\n File path: format/Schema.fbs\n ##########\n @@ -187,6 +187,103 @@ table Interval {\n   unit: IntervalUnit;\n }\n \n+\n+/// ----------------------------------------------------------------------\n+/// user defined key value pairs to add custom metadata to arrow\n+/// key namespacing is the responsibility of the user\n+\n+table KeyValue {\n+  key: string;\n+  value: string;\n+}\n+\n+/// ------------------------------------------------------------------------\n+/// Types used to represent a packed c-like structs.  These are experimental\n+/// and maybe subject to change.\n+/// IMPORTANT: COMPATIBILITY MAY BE BROKEN IN FUTURE release.\n+/// They are not required to be implemented.\n+\n+/// Similar to a c-union, takes the byte-width\n+/// of its longest sub-type.  To record type of union\n+/// use the \"tagged union\" pattern.\n+table PackedUnion {\n+}\n+\n+/// A binary string of a maximum size.  Fields are layed out as\n+/// [length][UTF8 bytes].  The number of bytes used is maxSize +\n+/// lengthType.bitWidth/8.\n+table PackedBinary {\n+  /// Maximum number of bytes (not characters) used.  This\n+  /// amount of bytes will always be used.\n+  maxSize: int;\n+\n+  /// If not set all binary data are of maxSize.  If set use specified\n \n Review comment:\n   Since this is a  flabtbuffer Table type, I thought one option was for it to be nullable (i.e. not set).  Is this not the case.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-01T16:24:41.586+0000",
                    "updated": "2019-03-01T16:24:41.586+0000",
                    "started": "2019-03-01T16:24:41.585+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "206497",
                    "issueId": "13117432"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13117432/worklog/206498",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3785: ARROW-1790: [Format] Proposal for c-like struct.\nURL: https://github.com/apache/arrow/pull/3785#discussion_r261667949\n \n \n\n ##########\n File path: format/Schema.fbs\n ##########\n @@ -187,6 +187,103 @@ table Interval {\n   unit: IntervalUnit;\n }\n \n+\n+/// ----------------------------------------------------------------------\n+/// user defined key value pairs to add custom metadata to arrow\n+/// key namespacing is the responsibility of the user\n+\n+table KeyValue {\n+  key: string;\n+  value: string;\n+}\n+\n+/// ------------------------------------------------------------------------\n+/// Types used to represent a packed c-like structs.  These are experimental\n+/// and maybe subject to change.\n+/// IMPORTANT: COMPATIBILITY MAY BE BROKEN IN FUTURE release.\n+/// They are not required to be implemented.\n+\n+/// Similar to a c-union, takes the byte-width\n+/// of its longest sub-type.  To record type of union\n+/// use the \"tagged union\" pattern.\n+table PackedUnion {\n+}\n+\n+/// A binary string of a maximum size.  Fields are layed out as\n+/// [length][UTF8 bytes].  The number of bytes used is maxSize +\n+/// lengthType.bitWidth/8.\n+table PackedBinary {\n+  /// Maximum number of bytes (not characters) used.  This\n+  /// amount of bytes will always be used.\n+  maxSize: int;\n+\n+  /// If not set all binary data are of maxSize.  If set use specified\n \n Review comment:\n   Since this is a  flabtbuffer Table type, I thought one option was for it to be nullable (i.e. not set).  Is this not the case?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-01T16:24:47.886+0000",
                    "updated": "2019-03-01T16:24:47.886+0000",
                    "started": "2019-03-01T16:24:47.886+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "206498",
                    "issueId": "13117432"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13117432/worklog/206503",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3785: ARROW-1790: [Format] Proposal for c-like struct.\nURL: https://github.com/apache/arrow/pull/3785#discussion_r261669621\n \n \n\n ##########\n File path: format/Schema.fbs\n ##########\n @@ -187,6 +187,103 @@ table Interval {\n   unit: IntervalUnit;\n }\n \n+\n+/// ----------------------------------------------------------------------\n+/// user defined key value pairs to add custom metadata to arrow\n+/// key namespacing is the responsibility of the user\n+\n+table KeyValue {\n+  key: string;\n+  value: string;\n+}\n+\n+/// ------------------------------------------------------------------------\n+/// Types used to represent a packed c-like structs.  These are experimental\n+/// and maybe subject to change.\n+/// IMPORTANT: COMPATIBILITY MAY BE BROKEN IN FUTURE release.\n+/// They are not required to be implemented.\n+\n+/// Similar to a c-union, takes the byte-width\n+/// of its longest sub-type.  To record type of union\n+/// use the \"tagged union\" pattern.\n+table PackedUnion {\n \n Review comment:\n   I'm ok leaving it out.   I'm also leaning toward leaving out the PackedBinary and PackedUtf fields since it is easier to add then remove in flatbuffers.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-01T16:29:05.264+0000",
                    "updated": "2019-03-01T16:29:05.264+0000",
                    "started": "2019-03-01T16:29:05.264+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "206503",
                    "issueId": "13117432"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13117432/worklog/206506",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3785: ARROW-1790: [Format] Proposal for c-like struct.\nURL: https://github.com/apache/arrow/pull/3785#discussion_r261670180\n \n \n\n ##########\n File path: format/Schema.fbs\n ##########\n @@ -187,6 +187,103 @@ table Interval {\n   unit: IntervalUnit;\n }\n \n+\n+/// ----------------------------------------------------------------------\n+/// user defined key value pairs to add custom metadata to arrow\n+/// key namespacing is the responsibility of the user\n+\n+table KeyValue {\n+  key: string;\n+  value: string;\n+}\n+\n+/// ------------------------------------------------------------------------\n+/// Types used to represent a packed c-like structs.  These are experimental\n+/// and maybe subject to change.\n+/// IMPORTANT: COMPATIBILITY MAY BE BROKEN IN FUTURE release.\n+/// They are not required to be implemented.\n+\n+/// Similar to a c-union, takes the byte-width\n+/// of its longest sub-type.  To record type of union\n+/// use the \"tagged union\" pattern.\n+table PackedUnion {\n+}\n+\n+/// A binary string of a maximum size.  Fields are layed out as\n+/// [length][UTF8 bytes].  The number of bytes used is maxSize +\n+/// lengthType.bitWidth/8.\n+table PackedBinary {\n+  /// Maximum number of bytes (not characters) used.  This\n+  /// amount of bytes will always be used.\n+  maxSize: int;\n+\n+  /// If not set all binary data are of maxSize.  If set use specified\n+  /// numeric type to specify a length less then or equal to\n+  /// max size.\n+  lengthType: Int;\n \n Review comment:\n   This is the same Int type used above.  I was imaging same encoding as the rest of the the values (governed by endianness at a higher level).  I will add some more documentation here.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-01T16:30:32.960+0000",
                    "updated": "2019-03-01T16:30:32.960+0000",
                    "started": "2019-03-01T16:30:32.959+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "206506",
                    "issueId": "13117432"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13117432/worklog/206508",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3785: ARROW-1790: [Format] Proposal for c-like struct.\nURL: https://github.com/apache/arrow/pull/3785#discussion_r261670629\n \n \n\n ##########\n File path: format/Schema.fbs\n ##########\n @@ -187,6 +187,103 @@ table Interval {\n   unit: IntervalUnit;\n }\n \n+\n+/// ----------------------------------------------------------------------\n+/// user defined key value pairs to add custom metadata to arrow\n+/// key namespacing is the responsibility of the user\n+\n+table KeyValue {\n+  key: string;\n+  value: string;\n+}\n+\n+/// ------------------------------------------------------------------------\n+/// Types used to represent a packed c-like structs.  These are experimental\n+/// and maybe subject to change.\n+/// IMPORTANT: COMPATIBILITY MAY BE BROKEN IN FUTURE release.\n+/// They are not required to be implemented.\n+\n+/// Similar to a c-union, takes the byte-width\n+/// of its longest sub-type.  To record type of union\n+/// use the \"tagged union\" pattern.\n+table PackedUnion {\n+}\n+\n+/// A binary string of a maximum size.  Fields are layed out as\n+/// [length][UTF8 bytes].  The number of bytes used is maxSize +\n+/// lengthType.bitWidth/8.\n+table PackedBinary {\n+  /// Maximum number of bytes (not characters) used.  This\n+  /// amount of bytes will always be used.\n+  maxSize: int;\n+\n+  /// If not set all binary data are of maxSize.  If set use specified\n+  /// numeric type to specify a length less then or equal to\n+  /// max size.\n+  lengthType: Int;\n+}\n+\n+\n+/// A UTF-8 string of a maximum size.  Fields are layed out as\n+/// [length][UTF8 bytes].  The number of bytes used is maxSize +\n+/// lengthType.bitWidth/8.\n+table PackedUtf8 {\n+  /// Maximum number of bytes (not characters) used.  This\n+  /// amount of bytes will always be used.\n+  maxSize: int;\n+\n+  /// If not set all strings are maxSize.  If set use specified\n+  /// numeric type to specify a length less then or equal to\n+  /// max size.\n+  lengthType: Int;\n+}\n+\n+// Supported types for PackedStructs.\n+union PackedType {\n+  /// Booleans use 1 byte, 0 is defined as false, all other\n+  /// values are true.\n+  Bool,\n+  Int,\n+  FloatingPoint,\n+  FixedSizeList,\n+  FixedSizeBinary,\n+  PackedBinary,\n+  PackedUnion,\n+  PackedUtf8,\n+  /// For nested structs.\n+  Struct_\n \n Review comment:\n   The _ is because Struct is a keyword in flatbuffers.   I was trying to avoid creating new types if possible.  But I could go either way, would like to get a second opinion on this.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-01T16:31:45.795+0000",
                    "updated": "2019-03-01T16:31:45.795+0000",
                    "started": "2019-03-01T16:31:45.795+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "206508",
                    "issueId": "13117432"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13117432/worklog/206511",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3785: ARROW-1790: [Format] Proposal for c-like struct.\nURL: https://github.com/apache/arrow/pull/3785#discussion_r261671244\n \n \n\n ##########\n File path: format/Schema.fbs\n ##########\n @@ -187,6 +187,103 @@ table Interval {\n   unit: IntervalUnit;\n }\n \n+\n+/// ----------------------------------------------------------------------\n+/// user defined key value pairs to add custom metadata to arrow\n+/// key namespacing is the responsibility of the user\n+\n+table KeyValue {\n+  key: string;\n+  value: string;\n+}\n+\n+/// ------------------------------------------------------------------------\n+/// Types used to represent a packed c-like structs.  These are experimental\n+/// and maybe subject to change.\n+/// IMPORTANT: COMPATIBILITY MAY BE BROKEN IN FUTURE release.\n+/// They are not required to be implemented.\n+\n+/// Similar to a c-union, takes the byte-width\n+/// of its longest sub-type.  To record type of union\n+/// use the \"tagged union\" pattern.\n+table PackedUnion {\n+}\n+\n+/// A binary string of a maximum size.  Fields are layed out as\n+/// [length][UTF8 bytes].  The number of bytes used is maxSize +\n+/// lengthType.bitWidth/8.\n+table PackedBinary {\n+  /// Maximum number of bytes (not characters) used.  This\n+  /// amount of bytes will always be used.\n+  maxSize: int;\n+\n+  /// If not set all binary data are of maxSize.  If set use specified\n+  /// numeric type to specify a length less then or equal to\n+  /// max size.\n+  lengthType: Int;\n+}\n+\n+\n+/// A UTF-8 string of a maximum size.  Fields are layed out as\n+/// [length][UTF8 bytes].  The number of bytes used is maxSize +\n+/// lengthType.bitWidth/8.\n+table PackedUtf8 {\n+  /// Maximum number of bytes (not characters) used.  This\n+  /// amount of bytes will always be used.\n+  maxSize: int;\n+\n+  /// If not set all strings are maxSize.  If set use specified\n+  /// numeric type to specify a length less then or equal to\n+  /// max size.\n+  lengthType: Int;\n+}\n+\n+// Supported types for PackedStructs.\n+union PackedType {\n+  /// Booleans use 1 byte, 0 is defined as false, all other\n+  /// values are true.\n+  Bool,\n+  Int,\n+  FloatingPoint,\n+  FixedSizeList,\n+  FixedSizeBinary,\n+  PackedBinary,\n+  PackedUnion,\n+  PackedUtf8,\n+  /// For nested structs.\n \n Review comment:\n   I was thinking this allows for\r\n   struct {\r\n     int a;\r\n     struct {\r\n        int b;\r\n        int c;\r\n     }\r\n   }\r\n   \r\n   Does that make sense.  Any thoughts on how that should be described (or maybe just include that example?)\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-01T16:33:20.598+0000",
                    "updated": "2019-03-01T16:33:20.598+0000",
                    "started": "2019-03-01T16:33:20.597+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "206511",
                    "issueId": "13117432"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13117432/worklog/206512",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3785: ARROW-1790: [Format] Proposal for c-like struct.\nURL: https://github.com/apache/arrow/pull/3785#discussion_r261671688\n \n \n\n ##########\n File path: format/Schema.fbs\n ##########\n @@ -187,6 +187,103 @@ table Interval {\n   unit: IntervalUnit;\n }\n \n+\n+/// ----------------------------------------------------------------------\n+/// user defined key value pairs to add custom metadata to arrow\n+/// key namespacing is the responsibility of the user\n+\n+table KeyValue {\n+  key: string;\n+  value: string;\n+}\n+\n+/// ------------------------------------------------------------------------\n+/// Types used to represent a packed c-like structs.  These are experimental\n+/// and maybe subject to change.\n+/// IMPORTANT: COMPATIBILITY MAY BE BROKEN IN FUTURE release.\n+/// They are not required to be implemented.\n+\n+/// Similar to a c-union, takes the byte-width\n+/// of its longest sub-type.  To record type of union\n+/// use the \"tagged union\" pattern.\n+table PackedUnion {\n+}\n+\n+/// A binary string of a maximum size.  Fields are layed out as\n+/// [length][UTF8 bytes].  The number of bytes used is maxSize +\n+/// lengthType.bitWidth/8.\n+table PackedBinary {\n+  /// Maximum number of bytes (not characters) used.  This\n+  /// amount of bytes will always be used.\n+  maxSize: int;\n+\n+  /// If not set all binary data are of maxSize.  If set use specified\n+  /// numeric type to specify a length less then or equal to\n+  /// max size.\n+  lengthType: Int;\n+}\n+\n+\n+/// A UTF-8 string of a maximum size.  Fields are layed out as\n+/// [length][UTF8 bytes].  The number of bytes used is maxSize +\n+/// lengthType.bitWidth/8.\n+table PackedUtf8 {\n+  /// Maximum number of bytes (not characters) used.  This\n+  /// amount of bytes will always be used.\n+  maxSize: int;\n+\n+  /// If not set all strings are maxSize.  If set use specified\n+  /// numeric type to specify a length less then or equal to\n+  /// max size.\n+  lengthType: Int;\n+}\n+\n+// Supported types for PackedStructs.\n+union PackedType {\n+  /// Booleans use 1 byte, 0 is defined as false, all other\n+  /// values are true.\n+  Bool,\n+  Int,\n+  FloatingPoint,\n+  FixedSizeList,\n+  FixedSizeBinary,\n+  PackedBinary,\n+  PackedUnion,\n+  PackedUtf8,\n+  /// For nested structs.\n+  Struct_\n+}\n+\n+// A field in a packed struct.\n+table PackedStructField {\n+  // Name is not required, in i.e. a List\n+  name: string;\n+\n+  // This is the type of the decoded value if the field is dictionary encoded\n \n Review comment:\n   copy and paste bug.  Updated.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-01T16:34:17.654+0000",
                    "updated": "2019-03-01T16:34:17.654+0000",
                    "started": "2019-03-01T16:34:17.653+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "206512",
                    "issueId": "13117432"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13117432/worklog/206513",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3785: ARROW-1790: [Format] Proposal for c-like struct.\nURL: https://github.com/apache/arrow/pull/3785#discussion_r261671809\n \n \n\n ##########\n File path: format/Schema.fbs\n ##########\n @@ -187,6 +187,103 @@ table Interval {\n   unit: IntervalUnit;\n }\n \n+\n+/// ----------------------------------------------------------------------\n+/// user defined key value pairs to add custom metadata to arrow\n+/// key namespacing is the responsibility of the user\n+\n+table KeyValue {\n+  key: string;\n+  value: string;\n+}\n+\n+/// ------------------------------------------------------------------------\n+/// Types used to represent a packed c-like structs.  These are experimental\n+/// and maybe subject to change.\n+/// IMPORTANT: COMPATIBILITY MAY BE BROKEN IN FUTURE release.\n+/// They are not required to be implemented.\n+\n+/// Similar to a c-union, takes the byte-width\n+/// of its longest sub-type.  To record type of union\n+/// use the \"tagged union\" pattern.\n+table PackedUnion {\n+}\n+\n+/// A binary string of a maximum size.  Fields are layed out as\n+/// [length][UTF8 bytes].  The number of bytes used is maxSize +\n+/// lengthType.bitWidth/8.\n+table PackedBinary {\n+  /// Maximum number of bytes (not characters) used.  This\n+  /// amount of bytes will always be used.\n+  maxSize: int;\n+\n+  /// If not set all binary data are of maxSize.  If set use specified\n+  /// numeric type to specify a length less then or equal to\n+  /// max size.\n+  lengthType: Int;\n+}\n+\n+\n+/// A UTF-8 string of a maximum size.  Fields are layed out as\n+/// [length][UTF8 bytes].  The number of bytes used is maxSize +\n+/// lengthType.bitWidth/8.\n+table PackedUtf8 {\n+  /// Maximum number of bytes (not characters) used.  This\n+  /// amount of bytes will always be used.\n+  maxSize: int;\n+\n+  /// If not set all strings are maxSize.  If set use specified\n+  /// numeric type to specify a length less then or equal to\n+  /// max size.\n+  lengthType: Int;\n+}\n+\n+// Supported types for PackedStructs.\n+union PackedType {\n+  /// Booleans use 1 byte, 0 is defined as false, all other\n+  /// values are true.\n+  Bool,\n+  Int,\n+  FloatingPoint,\n+  FixedSizeList,\n+  FixedSizeBinary,\n+  PackedBinary,\n+  PackedUnion,\n+  PackedUtf8,\n+  /// For nested structs.\n+  Struct_\n+}\n+\n+// A field in a packed struct.\n+table PackedStructField {\n+  // Name is not required, in i.e. a List\n+  name: string;\n+\n+  // This is the type of the decoded value if the field is dictionary encoded\n+  type: PackedType;\n+\n+  // Number of bytes to reserve after this field.\n+  padding: int = 0;\n+\n+  // children apply only to Nested data types like Struct, List and Union\n+  children: [PackedStructField];\n+\n+  // User-defined metadata\n+  custom_metadata: [ KeyValue ];\n+}\n+\n+// A \"c\"-like struct object that has a fixed byte-width\n+// for each slot in the array.  The slot is layed out by doing\n+// a depth first traversal of all PackedStructFields and placing\n+// them one after another.\n+table PackedStruct {\n+  fields : [ PackedStructField ];\n+  /// Number in size in bytes of each slot. This serves\n \n Review comment:\n   Yes reworded a little bit.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-01T16:34:31.477+0000",
                    "updated": "2019-03-01T16:34:31.477+0000",
                    "started": "2019-03-01T16:34:31.476+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "206513",
                    "issueId": "13117432"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13117432/worklog/206515",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #3785: ARROW-1790: [Format] Proposal for c-like struct.\nURL: https://github.com/apache/arrow/pull/3785#discussion_r261672455\n \n \n\n ##########\n File path: format/Schema.fbs\n ##########\n @@ -187,6 +187,103 @@ table Interval {\n   unit: IntervalUnit;\n }\n \n+\n+/// ----------------------------------------------------------------------\n+/// user defined key value pairs to add custom metadata to arrow\n+/// key namespacing is the responsibility of the user\n+\n+table KeyValue {\n+  key: string;\n+  value: string;\n+}\n+\n+/// ------------------------------------------------------------------------\n+/// Types used to represent a packed c-like structs.  These are experimental\n+/// and maybe subject to change.\n+/// IMPORTANT: COMPATIBILITY MAY BE BROKEN IN FUTURE release.\n+/// They are not required to be implemented.\n+\n+/// Similar to a c-union, takes the byte-width\n+/// of its longest sub-type.  To record type of union\n+/// use the \"tagged union\" pattern.\n+table PackedUnion {\n+}\n+\n+/// A binary string of a maximum size.  Fields are layed out as\n+/// [length][UTF8 bytes].  The number of bytes used is maxSize +\n+/// lengthType.bitWidth/8.\n+table PackedBinary {\n+  /// Maximum number of bytes (not characters) used.  This\n+  /// amount of bytes will always be used.\n+  maxSize: int;\n+\n+  /// If not set all binary data are of maxSize.  If set use specified\n \n Review comment:\n   Ah, I don't know. Sorry :-/\r\n   @wesm \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-01T16:36:04.829+0000",
                    "updated": "2019-03-01T16:36:04.829+0000",
                    "started": "2019-03-01T16:36:04.828+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "206515",
                    "issueId": "13117432"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13117432/worklog/206517",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #3785: ARROW-1790: [Format] Proposal for c-like struct.\nURL: https://github.com/apache/arrow/pull/3785#discussion_r261672780\n \n \n\n ##########\n File path: format/Schema.fbs\n ##########\n @@ -187,6 +187,103 @@ table Interval {\n   unit: IntervalUnit;\n }\n \n+\n+/// ----------------------------------------------------------------------\n+/// user defined key value pairs to add custom metadata to arrow\n+/// key namespacing is the responsibility of the user\n+\n+table KeyValue {\n+  key: string;\n+  value: string;\n+}\n+\n+/// ------------------------------------------------------------------------\n+/// Types used to represent a packed c-like structs.  These are experimental\n+/// and maybe subject to change.\n+/// IMPORTANT: COMPATIBILITY MAY BE BROKEN IN FUTURE release.\n+/// They are not required to be implemented.\n+\n+/// Similar to a c-union, takes the byte-width\n+/// of its longest sub-type.  To record type of union\n+/// use the \"tagged union\" pattern.\n+table PackedUnion {\n+}\n+\n+/// A binary string of a maximum size.  Fields are layed out as\n+/// [length][UTF8 bytes].  The number of bytes used is maxSize +\n+/// lengthType.bitWidth/8.\n+table PackedBinary {\n+  /// Maximum number of bytes (not characters) used.  This\n+  /// amount of bytes will always be used.\n+  maxSize: int;\n+\n+  /// If not set all binary data are of maxSize.  If set use specified\n+  /// numeric type to specify a length less then or equal to\n+  /// max size.\n+  lengthType: Int;\n \n Review comment:\n   More precisely: this field encodes a _type_, right? (it's called `lengthType`, not `length`). My question is how that type is encoded.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-01T16:36:57.649+0000",
                    "updated": "2019-03-01T16:36:57.649+0000",
                    "started": "2019-03-01T16:36:57.648+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "206517",
                    "issueId": "13117432"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13117432/worklog/206519",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #3785: ARROW-1790: [Format] Proposal for c-like struct.\nURL: https://github.com/apache/arrow/pull/3785#discussion_r261673039\n \n \n\n ##########\n File path: format/Schema.fbs\n ##########\n @@ -187,6 +187,103 @@ table Interval {\n   unit: IntervalUnit;\n }\n \n+\n+/// ----------------------------------------------------------------------\n+/// user defined key value pairs to add custom metadata to arrow\n+/// key namespacing is the responsibility of the user\n+\n+table KeyValue {\n+  key: string;\n+  value: string;\n+}\n+\n+/// ------------------------------------------------------------------------\n+/// Types used to represent a packed c-like structs.  These are experimental\n+/// and maybe subject to change.\n+/// IMPORTANT: COMPATIBILITY MAY BE BROKEN IN FUTURE release.\n+/// They are not required to be implemented.\n+\n+/// Similar to a c-union, takes the byte-width\n+/// of its longest sub-type.  To record type of union\n+/// use the \"tagged union\" pattern.\n+table PackedUnion {\n+}\n+\n+/// A binary string of a maximum size.  Fields are layed out as\n+/// [length][UTF8 bytes].  The number of bytes used is maxSize +\n+/// lengthType.bitWidth/8.\n+table PackedBinary {\n+  /// Maximum number of bytes (not characters) used.  This\n+  /// amount of bytes will always be used.\n+  maxSize: int;\n+\n+  /// If not set all binary data are of maxSize.  If set use specified\n+  /// numeric type to specify a length less then or equal to\n+  /// max size.\n+  lengthType: Int;\n+}\n+\n+\n+/// A UTF-8 string of a maximum size.  Fields are layed out as\n+/// [length][UTF8 bytes].  The number of bytes used is maxSize +\n+/// lengthType.bitWidth/8.\n+table PackedUtf8 {\n+  /// Maximum number of bytes (not characters) used.  This\n+  /// amount of bytes will always be used.\n+  maxSize: int;\n+\n+  /// If not set all strings are maxSize.  If set use specified\n+  /// numeric type to specify a length less then or equal to\n+  /// max size.\n+  lengthType: Int;\n+}\n+\n+// Supported types for PackedStructs.\n+union PackedType {\n+  /// Booleans use 1 byte, 0 is defined as false, all other\n+  /// values are true.\n+  Bool,\n+  Int,\n+  FloatingPoint,\n+  FixedSizeList,\n+  FixedSizeBinary,\n+  PackedBinary,\n+  PackedUnion,\n+  PackedUtf8,\n+  /// For nested structs.\n \n Review comment:\n   Ah, right. The thing is \"struct\" already means a Arrow struct type. So you should clarify \"nested packed structs\", IMHO.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-01T16:37:35.858+0000",
                    "updated": "2019-03-01T16:37:35.858+0000",
                    "started": "2019-03-01T16:37:35.858+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "206519",
                    "issueId": "13117432"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 17400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@75a78485[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@57163136[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@32a950b9[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@5450585b[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4a339b7b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@2ab76641[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5263d736[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@4a7dfa1[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5219640d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@430d9561[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@f1b2051[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@35fbbcc4[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 17400,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Feb 18 04:49:40 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": null,
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1790/watchers",
            "watchCount": 7,
            "isWatching": false
        },
        "created": "2017-11-09T23:57:30.000+0000",
        "updated": "2021-06-21T22:41:26.000+0000",
        "timeoriginalestimate": null,
        "description": "This would embed data like\r\n\r\n{code}\r\nstruct Point {\r\n  double x;\r\n  double y;\r\n  double z;\r\n};\r\n{code}\r\n\r\nHere the struct could be embedded in a {{FixedSizeBinary}} with width 24. This is similar to structured data types in NumPy and other libraries",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "4h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 17400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Format] Define logical data type that represents a \"packed C struct\" composed from other fixed-size primitive types",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13117432/comment/16758067",
                    "id": "16758067",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield%40gmail.com",
                        "name": "emkornfield@gmail.com",
                        "key": "emkornfield@gmail.com",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Micah Kornfield",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Would any of the following be in scope:\r\n\r\n\u00a0 \u00a0 - structs in scope\u00a0\r\n\r\n\u00a0 \u00a0 \u00a0-Fixed size unions\u00a0 \u00a0\r\n\r\n\u00a0 \u00a0 \u00a0 - Fixed size strings (i.e. allow string up to X-bytes), similar questions of lists of other types.\r\n\r\n\u00a0\r\n\r\nThe more complicated we make it probably the longer it will take to have cross language support.\r\n\r\n\u00a0\r\n\r\nThis likely has some potential overlap with a canonical row based format as well.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield%40gmail.com",
                        "name": "emkornfield@gmail.com",
                        "key": "emkornfield@gmail.com",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Micah Kornfield",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2019-02-01T08:05:43.016+0000",
                    "updated": "2019-02-01T08:05:43.016+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13117432/comment/16945173",
                    "id": "16945173",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield%40gmail.com",
                        "name": "emkornfield@gmail.com",
                        "key": "emkornfield@gmail.com",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Micah Kornfield",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "@wesm do you think this is something we still want to support natively or would it be better for extension types?\u00a0\u00a0",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield%40gmail.com",
                        "name": "emkornfield@gmail.com",
                        "key": "emkornfield@gmail.com",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Micah Kornfield",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2019-10-05T22:43:51.358+0000",
                    "updated": "2019-10-05T22:43:51.358+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13117432/comment/16945186",
                    "id": "16945186",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "It still seems pretty useful, but we should have a further discussion about it",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-10-06T00:02:56.551+0000",
                    "updated": "2019-10-06T00:02:56.551+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13117432/comment/17285909",
                    "id": "17285909",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Given that users don't seem to actively ask for such a datatype, should we keep this open?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2021-02-17T15:57:08.480+0000",
                    "updated": "2021-02-17T15:57:08.480+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13117432/comment/17286268",
                    "id": "17286268",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield",
                        "name": "emkornfield",
                        "key": "emkornfield",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Micah Kornfield",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "I agree we can probably come back to it.\u00a0\u00a0",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield",
                        "name": "emkornfield",
                        "key": "emkornfield",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Micah Kornfield",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2021-02-18T04:49:40.225+0000",
                    "updated": "2021-02-18T04:49:40.225+0000"
                }
            ],
            "maxResults": 5,
            "total": 5,
            "startAt": 0
        },
        "customfield_12311820": "0|i3mmcv:",
        "customfield_12314139": null
    }
}