{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13246374",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13246374",
    "key": "ARROW-6001",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12350591",
                "id": "12350591",
                "description": "",
                "name": "7.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-02-03"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
            "name": "Minor",
            "id": "4"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12566744",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12566744",
                "type": {
                    "id": "12310000",
                    "name": "Duplicate",
                    "inward": "is duplicated by",
                    "outward": "duplicates",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310000"
                },
                "outwardIssue": {
                    "id": "13204560",
                    "key": "ARROW-4032",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13204560",
                    "fields": {
                        "summary": "[Python] New pyarrow.Table functions: from_pydict(), from_pylist() and to_pylist()",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                            "name": "Closed",
                            "id": "6",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
                            "name": "Minor",
                            "id": "4"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/3",
                            "id": "3",
                            "description": "A task that needs to be done.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21148&avatarType=issuetype",
                            "name": "Task",
                            "subtask": false,
                            "avatarId": 21148
                        }
                    }
                }
            },
            {
                "id": "12566114",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12566114",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "outwardIssue": {
                    "id": "13228642",
                    "key": "ARROW-5178",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13228642",
                    "fields": {
                        "summary": "[Python] Allow creating Table from Python dict",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=alenka",
            "name": "alenka",
            "key": "alenkaf",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34058",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34058",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34058",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34058"
            },
            "displayName": "Alenka Frim",
            "active": true,
            "timeZone": "Europe/Ljubljana"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328936",
                "id": "12328936",
                "name": "Python"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=davlee1972%40yahoo.com",
            "name": "davlee1972@yahoo.com",
            "key": "davlee1972@yahoo.com",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "David Lee",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=davlee1972%40yahoo.com",
            "name": "davlee1972@yahoo.com",
            "key": "davlee1972@yahoo.com",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "David Lee",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "aggregateprogress": {
            "progress": 17400,
            "total": 17400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 17400,
            "total": 17400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-6001/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 29,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13246374/worklog/699277",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "AlenkaF opened a new pull request #12010:\nURL: https://github.com/apache/arrow/pull/12010\n\n\n   Add `to_pylist` and `from_pylist` to `Table` and `RecordBatch`.\r\n   \r\n   `to_pylist` returns a list of dicts\r\n   `from_pylist` returns Table/RecordBatch from a list of dicts (named mapping in the code)\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-21T09:39:10.250+0000",
                    "updated": "2021-12-21T09:39:10.250+0000",
                    "started": "2021-12-21T09:39:10.250+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "699277",
                    "issueId": "13246374"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13246374/worklog/699278",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #12010:\nURL: https://github.com/apache/arrow/pull/12010#issuecomment-998622442\n\n\n   https://issues.apache.org/jira/browse/ARROW-6001\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-21T09:39:23.229+0000",
                    "updated": "2021-12-21T09:39:23.229+0000",
                    "started": "2021-12-21T09:39:23.229+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "699278",
                    "issueId": "13246374"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13246374/worklog/699469",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amol- commented on a change in pull request #12010:\nURL: https://github.com/apache/arrow/pull/12010#discussion_r773251719\n\n\n\n##########\nFile path: python/pyarrow/table.pxi\n##########\n@@ -1016,6 +1058,21 @@ cdef class RecordBatch(_PandasConvertible):\n             entries.append((name, column))\n         return ordered_dict(entries)\n \n+    def to_pylist(self):\n+        \"\"\"\n+        Convert the RecordBatch to a list of dictionaries.\n+\n+        Returns\n+        -------\n+        list\n+        \"\"\"\n+        entries = []\n+        for i in range(self.batch.num_columns()):\n+            name = bytes(self.batch.column_name(i)).decode('utf8')\n+            column = self[i].to_pylist()\n+            entries.append({name: column})\n\nReview comment:\n       Given this might involve thousand of columns I think there is value in building it as a list comprehension, it's generally faster than multiple appends.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-21T15:53:42.486+0000",
                    "updated": "2021-12-21T15:53:42.486+0000",
                    "started": "2021-12-21T15:53:42.486+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "699469",
                    "issueId": "13246374"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13246374/worklog/699473",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amol- commented on a change in pull request #12010:\nURL: https://github.com/apache/arrow/pull/12010#discussion_r773255388\n\n\n\n##########\nFile path: python/pyarrow/table.pxi\n##########\n@@ -1838,6 +1953,36 @@ cdef class Table(_PandasConvertible):\n \n         return ordered_dict(entries)\n \n+    def to_pylist(self):\n+        \"\"\"\n+        Convert the Table to a list of dictionaries.\n+\n+        Returns\n+        -------\n+        list\n+\n+        Examples\n+        --------\n+        >>> import pyarrow as pa\n+        >>> table = pa.table([\n+        ...     pa.array([1, 2]),\n+        ...     pa.array([\"a\", \"b\"])\n+        ... ], names=[\"int\", \"str\"])\n+        >>> table.to_pylist()\n+        [{'int': [1, 2]}, {'str': ['a', 'b']}]\n+        \"\"\"\n+        cdef:\n+            size_t i\n+            size_t num_columns = self.table.num_columns()\n+            list entries = []\n+            ChunkedArray column\n+\n+        for i in range(num_columns):\n+            column = self.column(i)\n+            entries.append({self.field(i).name: column.to_pylist()})\n\nReview comment:\n       `self.itercolumns` should do the trickk for you, also the returned columns has `_name` attribute, so you don't need to look into the field.\r\n   \r\n   Last I suggest we use a list comprehension to speed up the building\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-21T15:58:07.660+0000",
                    "updated": "2021-12-21T15:58:07.660+0000",
                    "started": "2021-12-21T15:58:07.660+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "699473",
                    "issueId": "13246374"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13246374/worklog/699477",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amol- commented on a change in pull request #12010:\nURL: https://github.com/apache/arrow/pull/12010#discussion_r773257529\n\n\n\n##########\nFile path: python/pyarrow/table.pxi\n##########\n@@ -2436,6 +2581,52 @@ def _from_pydict(cls, mapping, schema, metadata):\n         raise TypeError('Schema must be an instance of pyarrow.Schema')\n \n \n+def _from_pylist(cls, mapping, schema, metadata):\n+    \"\"\"\n+    Construct a Table/RecordBatch from Arrow arrays or columns.\n+\n+    Parameters\n+    ----------\n+    cls : Class Table/RecordBatch\n+    mapping : list of dicts or Mappings\n+        A mapping of strings to Arrays or Python lists.\n+    schema : Schema, default None\n+        If not passed, will be inferred from the Mapping values.\n+    metadata : dict or Mapping, default None\n+        Optional metadata for the schema (if inferred).\n+\n+    Returns\n+    -------\n+    Table/RecordBatch\n+    \"\"\"\n+\n+    arrays = []\n+    if schema is None:\n+        names = []\n+        for item in mapping:\n+            name = list(item.keys())[0]\n+            names.append(name)\n+            arrays.append(asarray(item[name]))\n+        return cls.from_arrays(arrays, names, metadata=metadata)\n+    elif isinstance(schema, Schema):\n+        for field in schema:\n+            value = [v.get(field.name) for v in mapping]\n+            v = next((i for i in value if i is not None), None)\n+            if v is None:\n+                present = [list(v.keys())[0] for v in mapping]\n+                missing = [n for n in schema.names if n not in present]\n+                raise KeyError(\n+                    \"The passed mapping doesn't contain the \"\n+                    \"following field(s) of the schema: {}\".\n+                    format(', '.join(missing))\n+                )\n\nReview comment:\n       I think this is a check that we should do in `from_arrays` if we want to do it. \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-21T16:00:37.760+0000",
                    "updated": "2021-12-21T16:00:37.760+0000",
                    "started": "2021-12-21T16:00:37.759+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "699477",
                    "issueId": "13246374"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13246374/worklog/699854",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "AlenkaF commented on a change in pull request #12010:\nURL: https://github.com/apache/arrow/pull/12010#discussion_r773716559\n\n\n\n##########\nFile path: python/pyarrow/table.pxi\n##########\n@@ -2436,6 +2581,52 @@ def _from_pydict(cls, mapping, schema, metadata):\n         raise TypeError('Schema must be an instance of pyarrow.Schema')\n \n \n+def _from_pylist(cls, mapping, schema, metadata):\n+    \"\"\"\n+    Construct a Table/RecordBatch from Arrow arrays or columns.\n+\n+    Parameters\n+    ----------\n+    cls : Class Table/RecordBatch\n+    mapping : list of dicts or Mappings\n+        A mapping of strings to Arrays or Python lists.\n+    schema : Schema, default None\n+        If not passed, will be inferred from the Mapping values.\n+    metadata : dict or Mapping, default None\n+        Optional metadata for the schema (if inferred).\n+\n+    Returns\n+    -------\n+    Table/RecordBatch\n+    \"\"\"\n+\n+    arrays = []\n+    if schema is None:\n+        names = []\n+        for item in mapping:\n+            name = list(item.keys())[0]\n+            names.append(name)\n+            arrays.append(asarray(item[name]))\n+        return cls.from_arrays(arrays, names, metadata=metadata)\n+    elif isinstance(schema, Schema):\n+        for field in schema:\n+            value = [v.get(field.name) for v in mapping]\n+            v = next((i for i in value if i is not None), None)\n+            if v is None:\n+                present = [list(v.keys())[0] for v in mapping]\n+                missing = [n for n in schema.names if n not in present]\n+                raise KeyError(\n+                    \"The passed mapping doesn't contain the \"\n+                    \"following field(s) of the schema: {}\".\n+                    format(', '.join(missing))\n+                )\n\nReview comment:\n       In the `_sanitize_arrays` which is called from `from_arrays` there is a check for the length of `schema` and `arrays`. So in any case an error would be raised but I think it is good we keep this one, same to [`_from_pydict`](https://github.com/apache/arrow/blob/14c04906fdf143d893f8c9d484cb0cd2b6f3f42b/python/pyarrow/table.pxi#L2572-L2576), as it is more informative.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-22T09:01:50.147+0000",
                    "updated": "2021-12-22T09:01:50.147+0000",
                    "started": "2021-12-22T09:01:50.147+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "699854",
                    "issueId": "13246374"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13246374/worklog/700478",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on a change in pull request #12010:\nURL: https://github.com/apache/arrow/pull/12010#discussion_r774453135\n\n\n\n##########\nFile path: python/pyarrow/table.pxi\n##########\n@@ -671,13 +671,55 @@ cdef class RecordBatch(_PandasConvertible):\n         Returns\n         -------\n         RecordBatch\n+\n+        Examples\n+        --------\n+        >>> import pyarrow as pa\n+        >>> pydict = {'int': [1, 2], 'str': ['a', 'b']}\n+        >>> pa.RecordBatch.from_pydict(pydict)\n+        pyarrow.RecordBatch\n+        int: int64\n+        str: string\n         \"\"\"\n \n         return _from_pydict(cls=RecordBatch,\n                             mapping=mapping,\n                             schema=schema,\n                             metadata=metadata)\n \n+    @staticmethod\n+    def from_pylist(mapping, schema=None, metadata=None):\n+        \"\"\"\n+        Construct a RecordBatch from Arrow arrays or columns.\n+\n+        Parameters\n+        ----------\n+        mapping : list of dicts or Mappings\n+            A mapping of strings to Arrays or Python lists.\n+        schema : Schema, default None\n+            If not passed, will be inferred from the Mapping values.\n+        metadata : dict or Mapping, default None\n+            Optional metadata for the schema (if inferred).\n+\n+        Returns\n+        -------\n+        RecordBatch\n+\n+        Examples\n+        --------\n+        >>> import pyarrow as pa\n+        >>> pylist = [{'int': [1, 2]}, {'str': ['a', 'b']}]\n+        >>> pa.RecordBatch.from_pylist(pylist)\n\nReview comment:\n       This is the same example as for `from_pydict`, that's maybe a copy paste leftover?\n\n##########\nFile path: python/pyarrow/table.pxi\n##########\n@@ -671,13 +671,55 @@ cdef class RecordBatch(_PandasConvertible):\n         Returns\n         -------\n         RecordBatch\n+\n+        Examples\n+        --------\n+        >>> import pyarrow as pa\n+        >>> pydict = {'int': [1, 2], 'str': ['a', 'b']}\n+        >>> pa.RecordBatch.from_pydict(pydict)\n+        pyarrow.RecordBatch\n+        int: int64\n+        str: string\n         \"\"\"\n \n         return _from_pydict(cls=RecordBatch,\n                             mapping=mapping,\n                             schema=schema,\n                             metadata=metadata)\n \n+    @staticmethod\n+    def from_pylist(mapping, schema=None, metadata=None):\n+        \"\"\"\n+        Construct a RecordBatch from Arrow arrays or columns.\n+\n+        Parameters\n+        ----------\n+        mapping : list of dicts or Mappings\n+            A mapping of strings to Arrays or Python lists.\n+        schema : Schema, default None\n+            If not passed, will be inferred from the Mapping values.\n+        metadata : dict or Mapping, default None\n+            Optional metadata for the schema (if inferred).\n+\n+        Returns\n+        -------\n+        RecordBatch\n+\n+        Examples\n+        --------\n+        >>> import pyarrow as pa\n+        >>> pylist = [{'int': [1, 2]}, {'str': ['a', 'b']}]\n+        >>> pa.RecordBatch.from_pylist(pylist)\n\nReview comment:\n       Actually, I see the difference now (this is a list of separate dict per column instead of a single dict). But, I think this is actually not exactly what we want here. Or at least, my expectation was to be able to handle an input like:\r\n   \r\n   ```\r\n   pylist = [{'int': 1, 'str'; 'a'}, {'int': 2, 'str': 'b'}]\r\n   ```\r\n   \r\n   So also a list of dict, but differently organized (one dict per row, instead of one dict per column)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-23T10:01:19.524+0000",
                    "updated": "2021-12-23T10:01:19.524+0000",
                    "started": "2021-12-23T10:01:19.524+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "700478",
                    "issueId": "13246374"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13246374/worklog/700511",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amol- commented on a change in pull request #12010:\nURL: https://github.com/apache/arrow/pull/12010#discussion_r774506470\n\n\n\n##########\nFile path: python/pyarrow/table.pxi\n##########\n@@ -671,13 +671,55 @@ cdef class RecordBatch(_PandasConvertible):\n         Returns\n         -------\n         RecordBatch\n+\n+        Examples\n+        --------\n+        >>> import pyarrow as pa\n+        >>> pydict = {'int': [1, 2], 'str': ['a', 'b']}\n+        >>> pa.RecordBatch.from_pydict(pydict)\n+        pyarrow.RecordBatch\n+        int: int64\n+        str: string\n         \"\"\"\n \n         return _from_pydict(cls=RecordBatch,\n                             mapping=mapping,\n                             schema=schema,\n                             metadata=metadata)\n \n+    @staticmethod\n+    def from_pylist(mapping, schema=None, metadata=None):\n+        \"\"\"\n+        Construct a RecordBatch from Arrow arrays or columns.\n+\n+        Parameters\n+        ----------\n+        mapping : list of dicts or Mappings\n+            A mapping of strings to Arrays or Python lists.\n+        schema : Schema, default None\n+            If not passed, will be inferred from the Mapping values.\n+        metadata : dict or Mapping, default None\n+            Optional metadata for the schema (if inferred).\n+\n+        Returns\n+        -------\n+        RecordBatch\n+\n+        Examples\n+        --------\n+        >>> import pyarrow as pa\n+        >>> pylist = [{'int': [1, 2]}, {'str': ['a', 'b']}]\n+        >>> pa.RecordBatch.from_pylist(pylist)\n\nReview comment:\n       Agree, As a user I would personally find more obvious that it accepts a list of rows whhen building a RecordBatch or Table. \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-23T11:26:52.154+0000",
                    "updated": "2021-12-23T11:26:52.154+0000",
                    "started": "2021-12-23T11:26:52.154+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "700511",
                    "issueId": "13246374"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13246374/worklog/700517",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "AlenkaF commented on a change in pull request #12010:\nURL: https://github.com/apache/arrow/pull/12010#discussion_r774511196\n\n\n\n##########\nFile path: python/pyarrow/table.pxi\n##########\n@@ -671,13 +671,55 @@ cdef class RecordBatch(_PandasConvertible):\n         Returns\n         -------\n         RecordBatch\n+\n+        Examples\n+        --------\n+        >>> import pyarrow as pa\n+        >>> pydict = {'int': [1, 2], 'str': ['a', 'b']}\n+        >>> pa.RecordBatch.from_pydict(pydict)\n+        pyarrow.RecordBatch\n+        int: int64\n+        str: string\n         \"\"\"\n \n         return _from_pydict(cls=RecordBatch,\n                             mapping=mapping,\n                             schema=schema,\n                             metadata=metadata)\n \n+    @staticmethod\n+    def from_pylist(mapping, schema=None, metadata=None):\n+        \"\"\"\n+        Construct a RecordBatch from Arrow arrays or columns.\n+\n+        Parameters\n+        ----------\n+        mapping : list of dicts or Mappings\n+            A mapping of strings to Arrays or Python lists.\n+        schema : Schema, default None\n+            If not passed, will be inferred from the Mapping values.\n+        metadata : dict or Mapping, default None\n+            Optional metadata for the schema (if inferred).\n+\n+        Returns\n+        -------\n+        RecordBatch\n+\n+        Examples\n+        --------\n+        >>> import pyarrow as pa\n+        >>> pylist = [{'int': [1, 2]}, {'str': ['a', 'b']}]\n+        >>> pa.RecordBatch.from_pylist(pylist)\n\nReview comment:\n       Thanks for the additional explanation! Will correct (in the 2022 I think =)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-23T11:36:05.248+0000",
                    "updated": "2021-12-23T11:36:05.248+0000",
                    "started": "2021-12-23T11:36:05.247+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "700517",
                    "issueId": "13246374"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13246374/worklog/703335",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "AlenkaF commented on pull request #12010:\nURL: https://github.com/apache/arrow/pull/12010#issuecomment-1004884636\n\n\n   I have corrected the code so that `pylist` is meant to be structured as a list of dicts, one dict per row. If the column name is missing from the schema or from the data, `None` is put in.\r\n   \r\n   If the schema is not given in `from_pylist(),` the keys from the first dictionary are used to define the names of the columns in the Table/RecordBatch.\r\n   \r\n   Also I saw that there are only a few examples added in the [docstrings](https://arrow.apache.org/docs/python/generated/pyarrow.Table.html#pyarrow.Table). I think they are a great way to understand the codebase as they are easy to locate and to use. I would be happy to add them as a part of the [Documentation Improvements](https://issues.apache.org/jira/browse/ARROW-13407) or as a separate JIRA issue.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-04T15:01:50.650+0000",
                    "updated": "2022-01-04T15:01:50.650+0000",
                    "started": "2022-01-04T15:01:50.650+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "703335",
                    "issueId": "13246374"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13246374/worklog/703366",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amol- commented on a change in pull request #12010:\nURL: https://github.com/apache/arrow/pull/12010#discussion_r778175902\n\n\n\n##########\nFile path: python/pyarrow/table.pxi\n##########\n@@ -2442,6 +2602,46 @@ def _from_pydict(cls, mapping, schema, metadata):\n         raise TypeError('Schema must be an instance of pyarrow.Schema')\n \n \n+def _from_pylist(cls, mapping, schema, metadata):\n+    \"\"\"\n+    Construct a Table/RecordBatch from list of dictionary of rows.\n+\n+    Parameters\n+    ----------\n+    cls : Class Table/RecordBatch\n+    mapping : list of dicts of rows\n+        A mapping of strings to row values.\n+    schema : Schema, default None\n+        If not passed, will be inferred from the Mapping values.\n+    metadata : dict or Mapping, default None\n+        Optional metadata for the schema (if inferred).\n+\n+    Returns\n+    -------\n+    Table/RecordBatch\n+    \"\"\"\n+\n+    arrays = []\n+    if schema is None:\n+        names = []\n+        if mapping:\n+            names = list(mapping[0].keys())\n+        for n in names:\n+            v = [i[n] if n in i else None for i in mapping]\n+            arrays.append(asarray(v))\n+        return cls.from_arrays(arrays, names, metadata=metadata)\n+    else:\n+        if isinstance(schema, Schema):\n+            for n in schema.names:\n+                v = [i[n] if n in i else None for i in mapping]\n+                n_type = schema.types[schema.get_field_index(n)]\n+                arrays.append(asarray(v, type=n_type))\n\nReview comment:\n       I think this will actually crash when `v` is `None`. `asarray` seems to crash when invoked `asarray(None)`\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-04T15:35:12.367+0000",
                    "updated": "2022-01-04T15:35:12.367+0000",
                    "started": "2022-01-04T15:35:12.367+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "703366",
                    "issueId": "13246374"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13246374/worklog/703367",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amol- commented on a change in pull request #12010:\nURL: https://github.com/apache/arrow/pull/12010#discussion_r778175902\n\n\n\n##########\nFile path: python/pyarrow/table.pxi\n##########\n@@ -2442,6 +2602,46 @@ def _from_pydict(cls, mapping, schema, metadata):\n         raise TypeError('Schema must be an instance of pyarrow.Schema')\n \n \n+def _from_pylist(cls, mapping, schema, metadata):\n+    \"\"\"\n+    Construct a Table/RecordBatch from list of dictionary of rows.\n+\n+    Parameters\n+    ----------\n+    cls : Class Table/RecordBatch\n+    mapping : list of dicts of rows\n+        A mapping of strings to row values.\n+    schema : Schema, default None\n+        If not passed, will be inferred from the Mapping values.\n+    metadata : dict or Mapping, default None\n+        Optional metadata for the schema (if inferred).\n+\n+    Returns\n+    -------\n+    Table/RecordBatch\n+    \"\"\"\n+\n+    arrays = []\n+    if schema is None:\n+        names = []\n+        if mapping:\n+            names = list(mapping[0].keys())\n+        for n in names:\n+            v = [i[n] if n in i else None for i in mapping]\n+            arrays.append(asarray(v))\n+        return cls.from_arrays(arrays, names, metadata=metadata)\n+    else:\n+        if isinstance(schema, Schema):\n+            for n in schema.names:\n+                v = [i[n] if n in i else None for i in mapping]\n+                n_type = schema.types[schema.get_field_index(n)]\n+                arrays.append(asarray(v, type=n_type))\n\nReview comment:\n       I think this will actually crash when `v` is `None`. `asarray` seems to crash when invoked `asarray(None)`.\r\n   \r\n   Guess the same applies to https://github.com/apache/arrow/pull/12010/files#diff-cede36e8e2e0eb6e6e1ee21745db9687174527f463520c6e6d8b9e8f957bf304R2631\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-04T15:35:35.241+0000",
                    "updated": "2022-01-04T15:35:35.241+0000",
                    "started": "2022-01-04T15:35:35.240+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "703367",
                    "issueId": "13246374"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13246374/worklog/703843",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "AlenkaF commented on a change in pull request #12010:\nURL: https://github.com/apache/arrow/pull/12010#discussion_r778695741\n\n\n\n##########\nFile path: python/pyarrow/table.pxi\n##########\n@@ -2442,6 +2602,46 @@ def _from_pydict(cls, mapping, schema, metadata):\n         raise TypeError('Schema must be an instance of pyarrow.Schema')\n \n \n+def _from_pylist(cls, mapping, schema, metadata):\n+    \"\"\"\n+    Construct a Table/RecordBatch from list of dictionary of rows.\n+\n+    Parameters\n+    ----------\n+    cls : Class Table/RecordBatch\n+    mapping : list of dicts of rows\n+        A mapping of strings to row values.\n+    schema : Schema, default None\n+        If not passed, will be inferred from the Mapping values.\n+    metadata : dict or Mapping, default None\n+        Optional metadata for the schema (if inferred).\n+\n+    Returns\n+    -------\n+    Table/RecordBatch\n+    \"\"\"\n+\n+    arrays = []\n+    if schema is None:\n+        names = []\n+        if mapping:\n+            names = list(mapping[0].keys())\n+        for n in names:\n+            v = [i[n] if n in i else None for i in mapping]\n+            arrays.append(asarray(v))\n+        return cls.from_arrays(arrays, names, metadata=metadata)\n+    else:\n+        if isinstance(schema, Schema):\n+            for n in schema.names:\n+                v = [i[n] if n in i else None for i in mapping]\n+                n_type = schema.types[schema.get_field_index(n)]\n+                arrays.append(asarray(v, type=n_type))\n\nReview comment:\n       The test for the case where schema names are missing from the pylist is added in this PR and it passes:\r\n   https://github.com/apache/arrow/blob/19f212f4f7af0f7720d79a927c4850849da77678/python/pyarrow/tests/test_table.py#L1525-L1538\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-05T10:09:13.033+0000",
                    "updated": "2022-01-05T10:09:13.033+0000",
                    "started": "2022-01-05T10:09:13.033+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "703843",
                    "issueId": "13246374"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13246374/worklog/703932",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amol- commented on a change in pull request #12010:\nURL: https://github.com/apache/arrow/pull/12010#discussion_r778812702\n\n\n\n##########\nFile path: python/pyarrow/table.pxi\n##########\n@@ -2442,6 +2602,46 @@ def _from_pydict(cls, mapping, schema, metadata):\n         raise TypeError('Schema must be an instance of pyarrow.Schema')\n \n \n+def _from_pylist(cls, mapping, schema, metadata):\n+    \"\"\"\n+    Construct a Table/RecordBatch from list of dictionary of rows.\n+\n+    Parameters\n+    ----------\n+    cls : Class Table/RecordBatch\n+    mapping : list of dicts of rows\n+        A mapping of strings to row values.\n+    schema : Schema, default None\n+        If not passed, will be inferred from the Mapping values.\n+    metadata : dict or Mapping, default None\n+        Optional metadata for the schema (if inferred).\n+\n+    Returns\n+    -------\n+    Table/RecordBatch\n+    \"\"\"\n+\n+    arrays = []\n+    if schema is None:\n+        names = []\n+        if mapping:\n+            names = list(mapping[0].keys())\n+        for n in names:\n+            v = [i[n] if n in i else None for i in mapping]\n+            arrays.append(asarray(v))\n+        return cls.from_arrays(arrays, names, metadata=metadata)\n+    else:\n+        if isinstance(schema, Schema):\n+            for n in schema.names:\n+                v = [i[n] if n in i else None for i in mapping]\n+                n_type = schema.types[schema.get_field_index(n)]\n+                arrays.append(asarray(v, type=n_type))\n\nReview comment:\n       Right, my misunderstanding was that we could end up with `v=None`, but rereading the code block I see that we would actually end up with `v=[None, None, None]` which is fine.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-05T13:21:47.906+0000",
                    "updated": "2022-01-05T13:21:47.906+0000",
                    "started": "2022-01-05T13:21:47.906+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "703932",
                    "issueId": "13246374"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13246374/worklog/705925",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on a change in pull request #12010:\nURL: https://github.com/apache/arrow/pull/12010#discussion_r781008612\n\n\n\n##########\nFile path: python/pyarrow/table.pxi\n##########\n@@ -2442,6 +2602,46 @@ def _from_pydict(cls, mapping, schema, metadata):\n         raise TypeError('Schema must be an instance of pyarrow.Schema')\n \n \n+def _from_pylist(cls, mapping, schema, metadata):\n+    \"\"\"\n+    Construct a Table/RecordBatch from list of dictionary of rows.\n+\n+    Parameters\n+    ----------\n+    cls : Class Table/RecordBatch\n+    mapping : list of dicts of rows\n+        A mapping of strings to row values.\n+    schema : Schema, default None\n+        If not passed, will be inferred from the Mapping values.\n\nReview comment:\n       Maybe you can specify here that it will be inferred from the _first_ row (also in the actual user facing docstrings above)\n\n##########\nFile path: python/pyarrow/table.pxi\n##########\n@@ -671,13 +671,61 @@ cdef class RecordBatch(_PandasConvertible):\n         Returns\n         -------\n         RecordBatch\n+\n+        Examples\n+        --------\n+        >>> import pyarrow as pa\n+        >>> pydict = {'int': [1, 2], 'str': ['a', 'b']}\n+        >>> pa.RecordBatch.from_pydict(pydict)\n+        pyarrow.RecordBatch\n+        int: int64\n+        str: string\n         \"\"\"\n \n         return _from_pydict(cls=RecordBatch,\n                             mapping=mapping,\n                             schema=schema,\n                             metadata=metadata)\n \n+    @staticmethod\n+    def from_pylist(mapping, schema=None, metadata=None):\n+        \"\"\"\n+        Construct a RecordBatch from list of dictionary of rows.\n\nReview comment:\n       ```suggestion\r\n           Construct a RecordBatch from list of rows / dictionaries.\r\n   ```\r\n   \r\n   Each dictionary represents a row, so \"dictionary of rows\" sounds a bit strange (\"dictionary of row values\" could be strictly speaking more correct, but I still find that not super clear)\n\n##########\nFile path: python/pyarrow/table.pxi\n##########\n@@ -1016,6 +1064,28 @@ cdef class RecordBatch(_PandasConvertible):\n             entries.append((name, column))\n         return ordered_dict(entries)\n \n+    def to_pylist(self, index=None):\n+        \"\"\"\n+        Convert the RecordBatch to a list of dictionaries of rows.\n+\n+        Parameters\n+        ----------\n+        index: list\n+            A list of column names to index.\n\nReview comment:\n       Is this `index` keyword needed? (it's to select a subset of columns to export) Eg `to_pydict` doesn't have it (we should probably add it there as well if we want to keep it)\r\n   \r\n   We have nowadays the `select()` method, so it is relatively straightforward to do `table.select([...]-.to_pylist()` instead of `table.to_pylist(index=[...])`. \r\n   Or if we keep it, I would call it something else as `index`, but for example rather `columns=[..]`.\n\n##########\nFile path: python/pyarrow/table.pxi\n##########\n@@ -2442,6 +2602,46 @@ def _from_pydict(cls, mapping, schema, metadata):\n         raise TypeError('Schema must be an instance of pyarrow.Schema')\n \n \n+def _from_pylist(cls, mapping, schema, metadata):\n+    \"\"\"\n+    Construct a Table/RecordBatch from list of dictionary of rows.\n+\n+    Parameters\n+    ----------\n+    cls : Class Table/RecordBatch\n+    mapping : list of dicts of rows\n+        A mapping of strings to row values.\n+    schema : Schema, default None\n+        If not passed, will be inferred from the Mapping values.\n+    metadata : dict or Mapping, default None\n+        Optional metadata for the schema (if inferred).\n+\n+    Returns\n+    -------\n+    Table/RecordBatch\n+    \"\"\"\n+\n+    arrays = []\n+    if schema is None:\n+        names = []\n+        if mapping:\n+            names = list(mapping[0].keys())\n+        for n in names:\n+            v = [i[n] if n in i else None for i in mapping]\n+            arrays.append(asarray(v))\n+        return cls.from_arrays(arrays, names, metadata=metadata)\n+    else:\n+        if isinstance(schema, Schema):\n+            for n in schema.names:\n+                v = [i[n] if n in i else None for i in mapping]\n+                n_type = schema.types[schema.get_field_index(n)]\n+                arrays.append(asarray(v, type=n_type))\n\nReview comment:\n       The `asarray` with the type from the schema also gets done inside `from_arrays`, so it might be unnecessary to do it here as well\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-10T09:28:08.352+0000",
                    "updated": "2022-01-10T09:28:08.352+0000",
                    "started": "2022-01-10T09:28:08.352+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "705925",
                    "issueId": "13246374"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13246374/worklog/706002",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "AlenkaF commented on a change in pull request #12010:\nURL: https://github.com/apache/arrow/pull/12010#discussion_r781106452\n\n\n\n##########\nFile path: python/pyarrow/table.pxi\n##########\n@@ -1016,6 +1064,28 @@ cdef class RecordBatch(_PandasConvertible):\n             entries.append((name, column))\n         return ordered_dict(entries)\n \n+    def to_pylist(self, index=None):\n+        \"\"\"\n+        Convert the RecordBatch to a list of dictionaries of rows.\n+\n+        Parameters\n+        ----------\n+        index: list\n+            A list of column names to index.\n\nReview comment:\n       Thanks for all the info! Will remove it - I thought it would be good to have it before =)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-10T11:21:15.284+0000",
                    "updated": "2022-01-10T11:21:15.284+0000",
                    "started": "2022-01-10T11:21:15.284+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "706002",
                    "issueId": "13246374"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13246374/worklog/706076",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "AlenkaF commented on a change in pull request #12010:\nURL: https://github.com/apache/arrow/pull/12010#discussion_r781171676\n\n\n\n##########\nFile path: python/pyarrow/table.pxi\n##########\n@@ -671,13 +671,61 @@ cdef class RecordBatch(_PandasConvertible):\n         Returns\n         -------\n         RecordBatch\n+\n+        Examples\n+        --------\n+        >>> import pyarrow as pa\n+        >>> pydict = {'int': [1, 2], 'str': ['a', 'b']}\n+        >>> pa.RecordBatch.from_pydict(pydict)\n+        pyarrow.RecordBatch\n+        int: int64\n+        str: string\n         \"\"\"\n \n         return _from_pydict(cls=RecordBatch,\n                             mapping=mapping,\n                             schema=schema,\n                             metadata=metadata)\n \n+    @staticmethod\n+    def from_pylist(mapping, schema=None, metadata=None):\n+        \"\"\"\n+        Construct a RecordBatch from list of dictionary of rows.\n\nReview comment:\n       Totally agree. +1 for the suggestion.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-10T13:02:14.482+0000",
                    "updated": "2022-01-10T13:02:14.482+0000",
                    "started": "2022-01-10T13:02:14.482+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "706076",
                    "issueId": "13246374"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13246374/worklog/706174",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on a change in pull request #12010:\nURL: https://github.com/apache/arrow/pull/12010#discussion_r781223239\n\n\n\n##########\nFile path: python/pyarrow/table.pxi\n##########\n@@ -1016,6 +1065,21 @@ cdef class RecordBatch(_PandasConvertible):\n             entries.append((name, column))\n         return ordered_dict(entries)\n \n+    def to_pylist(self):\n+        \"\"\"\n+        Convert the RecordBatch to a list of rows / dictionaries.\n+\n+        Returns\n+        -------\n+        list\n+        \"\"\"\n+\n+        pydict = self.to_pydict()\n+        names = self.schema.names\n+        pylist = [{column: pydict[column][row] if column in pydict else None for column in names}\n+                  for row in range(self.num_rows)]\n\nReview comment:\n       ```suggestion\r\n           pylist = [{column: pydict[column][row] for column in names} \r\n                     for row in range(self.num_rows)]\r\n   ```\r\n   \r\n   I think this can be simplified now, as each `column` value of `names` is guaranteed to be in the `pydict`, since `names` is coming from the schema.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-10T14:10:32.310+0000",
                    "updated": "2022-01-10T14:10:32.310+0000",
                    "started": "2022-01-10T14:10:32.310+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "706174",
                    "issueId": "13246374"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13246374/worklog/706177",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on a change in pull request #12010:\nURL: https://github.com/apache/arrow/pull/12010#discussion_r781224257\n\n\n\n##########\nFile path: python/pyarrow/table.pxi\n##########\n@@ -2442,6 +2589,46 @@ def _from_pydict(cls, mapping, schema, metadata):\n         raise TypeError('Schema must be an instance of pyarrow.Schema')\n \n \n+def _from_pylist(cls, mapping, schema, metadata):\n+    \"\"\"\n+    Construct a Table/RecordBatch from list of rows / dictionaries.\n+\n+    Parameters\n+    ----------\n+    cls : Class Table/RecordBatch\n+    mapping : list of dicts of rows\n+        A mapping of strings to row values.\n+    schema : Schema, default None\n+        If not passed, will be inferred from the first row of the\n+        mapping values.\n+    metadata : dict or Mapping, default None\n+        Optional metadata for the schema (if inferred).\n+\n+    Returns\n+    -------\n+    Table/RecordBatch\n+    \"\"\"\n+\n+    arrays = []\n+    if schema is None:\n+        names = []\n+        if mapping:\n+            names = list(mapping[0].keys())\n+        for n in names:\n+            v = [i[n] if n in i else None for i in mapping]\n\nReview comment:\n       ```suggestion\r\n               v = [row[n] if n in row else None for row in mapping]\r\n   ```\r\n   \r\n   (small suggestion that makes it maybe a bit more readable)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-10T14:11:53.876+0000",
                    "updated": "2022-01-10T14:11:53.876+0000",
                    "started": "2022-01-10T14:11:53.876+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "706177",
                    "issueId": "13246374"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13246374/worklog/706178",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on a change in pull request #12010:\nURL: https://github.com/apache/arrow/pull/12010#discussion_r781224600\n\n\n\n##########\nFile path: python/pyarrow/table.pxi\n##########\n@@ -2442,6 +2589,46 @@ def _from_pydict(cls, mapping, schema, metadata):\n         raise TypeError('Schema must be an instance of pyarrow.Schema')\n \n \n+def _from_pylist(cls, mapping, schema, metadata):\n+    \"\"\"\n+    Construct a Table/RecordBatch from list of rows / dictionaries.\n+\n+    Parameters\n+    ----------\n+    cls : Class Table/RecordBatch\n+    mapping : list of dicts of rows\n+        A mapping of strings to row values.\n+    schema : Schema, default None\n+        If not passed, will be inferred from the first row of the\n+        mapping values.\n+    metadata : dict or Mapping, default None\n+        Optional metadata for the schema (if inferred).\n+\n+    Returns\n+    -------\n+    Table/RecordBatch\n+    \"\"\"\n+\n+    arrays = []\n+    if schema is None:\n+        names = []\n+        if mapping:\n+            names = list(mapping[0].keys())\n+        for n in names:\n+            v = [i[n] if n in i else None for i in mapping]\n+            arrays.append(v)\n+        return cls.from_arrays(arrays, names, metadata=metadata)\n+    else:\n+        if isinstance(schema, Schema):\n+            for n in schema.names:\n+                v = [i[n] if n in i else None for i in mapping]\n\nReview comment:\n       ```suggestion\r\n                   v = [row[n] if n in row else None for row in mapping]\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-10T14:12:06.964+0000",
                    "updated": "2022-01-10T14:12:06.964+0000",
                    "started": "2022-01-10T14:12:06.963+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "706178",
                    "issueId": "13246374"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 17400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@1489e18a[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4bf30c21[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@41abcbd8[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@126a55c8[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3933138c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@c968013[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@137c7f52[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@53f8ace0[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@72f67a60[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@4ad8ea35[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3aae8ad3[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@2ca7aeca[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 17400,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Jan 11 13:35:41 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-01-11T13:35:41.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-6001/watchers",
            "watchCount": 5,
            "isWatching": false
        },
        "created": "2019-07-22T17:39:11.000+0000",
        "updated": "2022-01-12T20:51:58.000+0000",
        "timeoriginalestimate": null,
        "description": "I noticed that pyarrow.Table.to_pydict() exists, but pyarrow.Table.from_pydict() doesn't exist. There is a proposed ticket to create one, but it doesn't take into account\u00a0potential mismatches between column order and number of columns.\r\n\r\nI'm\u00a0including some code I've written which I've been using to handle arrow conversions to ordered dictionaries and\u00a0lists of dictionaries.. I've also included an example where this can be used to speed up pandas.to_dict() by a factor of 6x.\r\n\r\n\u00a0\r\n{code:java}\r\ndef from_pylist(pylist, names=None, schema=None, safe=True):\r\n\u00a0\u00a0\u00a0 \"\"\"\r\n\u00a0\u00a0\u00a0 Converts a python list of dictionaries to a pyarrow table\r\n\u00a0\u00a0\u00a0 :param pylist: pylist list of dictionaries\r\n\u00a0\u00a0\u00a0 :param names: list of column names\r\n\u00a0\u00a0\u00a0 :param schema: pyarrow schema\r\n\u00a0\u00a0\u00a0 :param safe: True or False\r\n\u00a0\u00a0\u00a0 :return: arrow table\r\n\u00a0\u00a0\u00a0 \"\"\"\r\n\u00a0\u00a0\u00a0 arrow_columns = list()\r\n\u00a0\u00a0\u00a0 if schema:\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 for column in schema.names:\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 arrow_columns.append(pa.array([v[column] if column in v else None for v in pylist], safe=safe, type=schema.types[schema.get_field_index(column)]))\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 arrow_table = pa.Table.from_arrays(arrow_columns, schema.names)\r\n\u00a0\u00a0\u00a0 else:\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 for column in names:\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 arrow_columns.append(pa.array([v[column] if column in v else None for v in pylist], safe=safe))\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 arrow_table = pa.Table.from_arrays(arrow_columns, names)\r\n\u00a0\u00a0\u00a0 return arrow_table\r\n\r\ndef to_pylist(arrow_table, index_columns=None):\r\n\u00a0\u00a0\u00a0 \"\"\"\r\n\u00a0\u00a0\u00a0 Converts a pyarrow table to a python list of dictionaries\r\n\u00a0\u00a0\u00a0 :param arrow_table: arrow table\r\n\u00a0\u00a0\u00a0 :param index_columns: columns to index\r\n\u00a0\u00a0\u00a0 :return: python list of dictionaries\r\n\u00a0\u00a0\u00a0 \"\"\"\r\n\u00a0\u00a0\u00a0 pydict = arrow_table.to_pydict()\r\n\u00a0\u00a0\u00a0 if index_columns:\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 columns = arrow_table.schema.names\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 columns.append(\"_index\")\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 pylist = [{column: tuple([pydict[index_column][row] for index_column in index_columns]) if column == '_index' else pydict[column][row] for column in columns} for row in range(arrow_table.num_rows)]\r\n\u00a0\u00a0\u00a0 else:\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 pylist = [{column: pydict[column][row] for column in arrow_table.schema.names} for row in range(arrow_table.num_rows)]\r\n\u00a0\u00a0\u00a0 return pylist\r\n\r\ndef from_pydict(pydict, names=None, schema=None, safe=True):\r\n\u00a0\u00a0\u00a0 \"\"\"\r\n\u00a0\u00a0\u00a0 Converts a pyarrow table to a python ordered dictionary\r\n\u00a0\u00a0\u00a0 :param pydict: ordered dictionary\r\n\u00a0\u00a0\u00a0 :param names: list of column names\r\n\u00a0\u00a0\u00a0 :param schema: pyarrow schema\r\n\u00a0\u00a0\u00a0 :param safe: True or False\r\n\u00a0\u00a0\u00a0 :return: arrow table\r\n\u00a0\u00a0\u00a0 \"\"\"\r\n\u00a0\u00a0\u00a0 arrow_columns = list()\r\n\u00a0\u00a0\u00a0 dict_columns = list(pydict.keys())\r\n\u00a0\u00a0\u00a0 if schema:\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 for column in schema.names:\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if column in pydict:\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 arrow_columns.append(pa.array(pydict[column], safe=safe, type=schema.types[schema.get_field_index(column)]))\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 else:\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 arrow_columns.append(pa.array([None] * len(pydict[dict_columns[0]]), safe=safe, type=schema.types[schema.get_field_index(column)]))\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 arrow_table = pa.Table.from_arrays(arrow_columns, schema.names)\r\n\u00a0\u00a0\u00a0 else:\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if not names:\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 names = dict_columns\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 for column in names:\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if column in dict_columns:\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 arrow_columns.append(pa.array(pydict[column], safe=safe))\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 else:\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 arrow_columns.append(pa.array([None] * len(pydict[dict_columns[0]]), safe=safe))\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 arrow_table = pa.Table.from_arrays(arrow_columns, names)\r\n\u00a0\u00a0\u00a0 return arrow_table\r\n\r\ndef get_indexed_values(arrow_table, index_columns):\r\n\u00a0\u00a0\u00a0 \"\"\"\r\n\u00a0\u00a0\u00a0 returns back a set of unique values for a list of columns.\r\n\u00a0\u00a0\u00a0 :param arrow_table: arrow_table\r\n\u00a0\u00a0\u00a0 :param index_columns: list of column names\r\n\u00a0\u00a0\u00a0 :return: set of tuples\r\n\u00a0\u00a0\u00a0 \"\"\"\r\n\u00a0\u00a0\u00a0 pydict = arrow_table.to_pydict()\r\n\u00a0\u00a0\u00a0 index_set = set([tuple([pydict[index_column][row] for index_column in index_columns]) for row in range(arrow_table.num_rows)])\r\n\u00a0\u00a0\u00a0 return index_set\r\n{code}\r\nHere are my benchmarks using pandas to arrow to python vs of pandas.to_dict()\r\n\r\n\u00a0\r\n{code:java}\r\n# benchmark panda conversion to python objects\r\nprint('**benchmark 1 million rows**')\r\nstart_time = time.time()\r\npython_df1 = panda_df1.to_dict(orient='records')\r\ntotal_time = time.time() - start_time\r\nprint(\"pandas to python: \" + str(total_time))\r\n\r\nstart_time = time.time()\r\narrow_df1 = pa.Table.from_pandas(panda_df1)\r\npydict = arrow_df1.to_pydict()\r\npython_df1 = [{column: pydict[column][row] for column in arrow_df1.schema.names} for row in range(arrow_df1.num_rows)]\r\ntotal_time = time.time() - start_time\r\nprint(\"pandas to arrow to python: \" + str(total_time))\r\n\r\nprint('**benchmark 4 million rows**')\r\nstart_time = time.time()\r\npython_df4 = panda_df4.to_dict(orient='records')\r\ntotal_time = time.time() - start_time\r\nprint(\"pandas to python:: \" + str(total_time))\r\n\r\nstart_time = time.time()\r\narrow_df4 = pa.Table.from_pandas(panda_df4)\r\npydict = arrow_df4.to_pydict()\r\npython_df4 = [{column: pydict[column][row] for column in arrow_df4.schema.names} for row in range(arrow_df4.num_rows)]\r\ntotal_time = time.time() - start_time\r\nprint(\"pandas to arrow to python: \" + str(total_time))\r\n{code}\r\n\u00a0\u00a0\r\n{code:java}\r\n**benchmark 1 million rows**\r\npandas to python: 13.204811334609985\r\npandas to arrow to python: 2.00173282623291\r\n**benchmark 4 million rows**\r\npandas to python:: 51.655067682266235\r\npandas to arrow to python: 8.562284231185913\r\n{code}",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "4h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 17400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Python] Add from_pylist() and to_pylist() to pyarrow.Table to convert list of records",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13246374/comment/16890340",
                    "id": "16890340",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Hm, so we have {{Table.from_pydict}} \r\n\r\nhttps://github.com/apache/arrow/blob/master/python/pyarrow/table.pxi#L1021\r\n\r\nI think {{Table.from_arrays}} could be improved to accept other Python sequences. Can we split up this ticket into the different improvements you're proposing (and clarify how what you're saying is different from the existing {{Table.from_pydict}} function)?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-07-22T17:43:18.007+0000",
                    "updated": "2019-07-22T17:43:18.007+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13246374/comment/16890345",
                    "id": "16890345",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=davlee1972%40yahoo.com",
                        "name": "davlee1972@yahoo.com",
                        "key": "davlee1972@yahoo.com",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Lee",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "Current implementation",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=davlee1972%40yahoo.com",
                        "name": "davlee1972@yahoo.com",
                        "key": "davlee1972@yahoo.com",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Lee",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2019-07-22T17:46:07.920+0000",
                    "updated": "2019-07-22T17:46:07.920+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13246374/comment/16890398",
                    "id": "16890398",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Also cc [~jorisvandenbossche]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2019-07-22T18:56:40.011+0000",
                    "updated": "2019-07-22T18:56:40.011+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13246374/comment/16891152",
                    "id": "16891152",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=davlee1972%40yahoo.com",
                        "name": "davlee1972@yahoo.com",
                        "key": "davlee1972@yahoo.com",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Lee",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "\u00a0\r\n\r\nTable.from_dict in 0.14.1 looks fine. The code I originally reviewed iterated through the ordered dictionary keys instead of the schema field\u00a0names.\r\n\r\nHere's some testing samples for to_pylist() and from_pylist()\r\n\r\n\u00a0\r\n{code:java}\r\ntest_schema = pa.schema([\r\n pa.field('id', pa.int16()),\r\n pa.field('struct_test', pa.list_(pa.struct([pa.field(\"child_id\", pa.int16()), pa.field(\"child_name\", pa.string())]))),\r\n pa.field('list_test', pa.list_(pa.int16()))\r\n])\r\ntest_data = [\r\n{'id': 1, 'struct_test': [{'child_id': 11, 'child_name': '_11'}, {'child_id': 12, 'child_name': '_12'}], 'list_test': [1,2,3]},\r\n{'id': 2, 'struct_test': [{'child_id': 21, 'child_name': '_21'}], 'list_test': [4,5]} \r\n]\r\ntest_tbl = from_pylist(test_data, schema = test_schema)\r\ntest_list = to_pylist(test_tbl)\r\ntest_tbl\r\ntest_list\r\n{code}\r\n\u00a0",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=davlee1972%40yahoo.com",
                        "name": "davlee1972@yahoo.com",
                        "key": "davlee1972@yahoo.com",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Lee",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2019-07-23T15:37:16.417+0000",
                    "updated": "2019-07-23T15:37:16.417+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13246374/comment/16896870",
                    "id": "16896870",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "body": "See also ARROW-4032 for similar discussion (I closed that one to not have duplicate issues).\r\n\r\nSince we have now {{to_pydict}} / {{from_pydict}}, repurposing this issue to focus on the to/from list of dicts usecase.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "created": "2019-07-31T07:47:18.882+0000",
                    "updated": "2019-07-31T07:47:18.882+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13246374/comment/16896888",
                    "id": "16896888",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "body": "I think the functionality to convert to / from a list of dicts (a \"list of records\") is something nice to have in pyarrow. The question is then where to fit it in or how to call the new method.\r\n\r\n{quote}I think {{Table.from_arrays}} could be improved to accept other Python sequences{quote}\r\n\r\nI personally would not add such functionality to {{from_arrays}}, which is working column-wise (the arrays you pass make up the columns of the resulting Table). That's a well defined scope, and I would keep functionality to convert row-wise input data in a separate function.\r\n\r\nFor {{from_pydict}}, it is similar: that function also currently works column-wise.\r\n\r\nSo I think new methods such as {{from_pylist}} / {{to_pylist}} is the better approach.  \r\nI am only not fully sure about the name \"pylist\", as that name does not directly reflect that it is a list of rows as dicts (it could also be a list of column-wise arrays). In pandas, this is basically called `from_records`, but the \"records\" could also be confusing in arrow context given that we have RecordBatches (although a method to convert a list of that is already called {{from_batches}}).",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "created": "2019-07-31T07:58:16.693+0000",
                    "updated": "2019-07-31T07:58:16.693+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13246374/comment/17201548",
                    "id": "17201548",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "I think calling this {{from_pylist}}/{{to_pylist}} is fine. I would expect it to mean \"a list of individual rows\".\r\n\r\nHowever, a question remains: does {{to_pylist}} return a list of tuples or a list of dicts?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2020-09-24T14:02:12.263+0000",
                    "updated": "2020-09-24T14:02:12.263+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13246374/comment/17472723",
                    "id": "17472723",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "body": "Issue resolved by pull request 12010\n[https://github.com/apache/arrow/pull/12010]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "created": "2022-01-11T13:35:41.991+0000",
                    "updated": "2022-01-11T13:35:41.991+0000"
                }
            ],
            "maxResults": 8,
            "total": 8,
            "startAt": 0
        },
        "customfield_12311820": "0|z04wl4:",
        "customfield_12314139": null
    }
}