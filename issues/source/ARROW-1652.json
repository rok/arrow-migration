{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13107262",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13107262",
    "key": "ARROW-1652",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12341352",
                "id": "12341352",
                "name": "0.8.0",
                "archived": false,
                "released": true,
                "releaseDate": "2017-12-18"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "Performance",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": null,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=paul.e.taylor",
            "name": "paul.e.taylor",
            "key": "paul.e.taylor",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Paul Taylor",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12332552",
                "id": "12332552",
                "name": "JavaScript"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": null,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bhulette",
            "name": "bhulette",
            "key": "bhulette",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Brian Hulette",
            "active": true,
            "timeZone": "America/Vancouver"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bhulette",
            "name": "bhulette",
            "key": "bhulette",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Brian Hulette",
            "active": true,
            "timeZone": "America/Vancouver"
        },
        "aggregateprogress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1652/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 0,
            "worklogs": []
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": null,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@70c6f99b[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@40c5555e[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@748e453b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@1e8b9151[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@71d8df17[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@59f4e5e5[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5fd5c47d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@1d16d7cf[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2a01831d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@54a48075[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@25a340b0[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@e204364[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": null,
        "customfield_12312520": null,
        "customfield_12312521": "Fri Nov 03 21:45:08 UTC 2017",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2017-11-03T21:45:08.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1652/watchers",
            "watchCount": 4,
            "isWatching": false
        },
        "created": "2017-10-05T15:27:54.000+0000",
        "updated": "2017-11-03T21:45:08.000+0000",
        "timeoriginalestimate": null,
        "description": "CompositeVector should have a {{batch(..)}} function that returns a BatchVector",
        "customfield_10010": null,
        "timetracking": {},
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[JS] Separate Vector into BatchVector and CompositeVector",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13107262/comment/16193049",
                    "id": "16193049",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bhulette",
                        "name": "bhulette",
                        "key": "bhulette",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Brian Hulette",
                        "active": true,
                        "timeZone": "America/Vancouver"
                    },
                    "body": "I started working on implementing this change, I'll try to put up a PR for it tomorrow so that [~paul.e.taylor] can take a look",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bhulette",
                        "name": "bhulette",
                        "key": "bhulette",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Brian Hulette",
                        "active": true,
                        "timeZone": "America/Vancouver"
                    },
                    "created": "2017-10-05T15:30:35.441+0000",
                    "updated": "2017-10-05T15:30:35.441+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13107262/comment/16197777",
                    "id": "16197777",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=paul.e.taylor",
                        "name": "paul.e.taylor",
                        "key": "paul.e.taylor",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Paul Taylor",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "[~bhulette] yes, it's worth revisiting how the batch lookup happens.\r\n\r\nThe reason {{get}} doesn't take a batch hint currently is that without inspecting the loaded batches before iteration, the iterator would need to do the batch lookup on each item anyway:\r\n\r\n{code}\r\nfor (let index = 0; index < vector.length; ++index) {\r\n  vector.get(index, vector.findBatch(index)); // <-- hypothetical `get` that takes a batch hint\r\n}\r\n{code}\r\n\r\nAlso, I measured the cost of a variant of {{get}} that returns a tuple of {{[value, batchIndex]}}, and it was much slower than incurring the batch-lookup cost each time. The best we could do is expose the batches, so an external iterator could increment the batch hint based on the index being iterated:\r\n\r\n{code}\r\nlet batches = vector.batches();\r\nlet iterated = 0, index = -1, batch = -1;\r\nwhile (++index < vector.length) {\r\n  if (iterated >= index) {\r\n    iterated += batches[++batch].length;\r\n  }\r\n  vector.get(index - iterated, batch);\r\n}\r\n{code}\r\n\r\nBut this approach also has a number of drawbacks:\r\n\r\n1. Forcing the iterator to do this every time isn't very ergonomic\r\n2. It's only helpful for contiguous iterations (from {{start}} < {{index}} < {{end}}). Random lookups will still have to reverse-lookup the batch index from the item index each get call\r\n\r\nThe [Vector iterators|https://github.com/apache/arrow/blob/master/js/src/vector/typed.ts#L78] don't have to do the batch index lookup, since they always iterate in a defined order:\r\n\r\n{code}\r\n// Always iterates from 0 -> length, faster than calling `get()` in a loop\r\nfor (let x of vector) { }\r\n{code}\r\n\r\nAssuming contiguous iteration, we could add {{skip()}}/{{skipLast()}} and {{take()}}/{{takeLast()}} methods, which return a clone of the Vector with trimmed internal batches list. This would only require {{subarray}} calls on the first/last TypedArrays, so still zero-copy:\r\n\r\n{code}\r\nfor (let x of vector.skip(10).take(10)) { // <-- iterate indexes 10 through 20\r\n}\r\n{code}\r\n\r\nI also want to call out that {{Vector.range()}} taking a batch hint is a bit of slight-of-hand to accommodate the [ListVectorBase|(https://github.com/apache/arrow/blob/master/js/src/vector/list.ts#L43] offset lookups. The ListVector {{from}} and {{to}} offsets are relative to the RecordBatch they were introduced, so passing the batch index into the slice method causes slice to lookup the {{from}} and {{to}} offsets relative to the batch they're from, instead of adjusting them relative to all the batches:\r\n\r\n{code}\r\n[{   /* RecordBatch 0 */\r\n  offsets: [0, 5, 10],\r\n  values: \"hellobrian\"\r\n}, { /* RecordBatch 1 */\r\n  offsets: [0, 4, 8],\r\n  values: \"frompaul\"\r\n}]\r\n// vector.get(2) decomposes to:\r\n// vector.values.slice(0, 4, 1) <-- offsets 0, 4 in RecordBatch 1\r\n{code}",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=paul.e.taylor",
                        "name": "paul.e.taylor",
                        "key": "paul.e.taylor",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Paul Taylor",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2017-10-09T22:18:07.417+0000",
                    "updated": "2017-10-09T22:26:46.529+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13107262/comment/16197919",
                    "id": "16197919",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bhulette",
                        "name": "bhulette",
                        "key": "bhulette",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Brian Hulette",
                        "active": true,
                        "timeZone": "America/Vancouver"
                    },
                    "body": "[~paul.e.taylor] all good points. My primary goal with this ticket (and ARROW-1651) is just to improve performance when iterating over multiple vectors simultaneously using a {{Table}}. Currently, the {{*rows}} iterator just defers to each Vector's {{get(i)}} function for every index, which makes for a lot of batch lookups when scanning all of the data. The Vector iterators don't help since they can't be used simultaneously across multiple Vectors (or can they? is there something like python's {{zip}} that we could use?)\r\n\r\nIf the {{Table}} required that each of it's vectors have the same batches, and stored that in a {{batches}} array, [{{*rows}}|https://github.com/apache/arrow/blob/master/js/src/table.ts#L50] could just iterate over each batch, and then over each index within it.\r\n{code}\r\n*rows() {\r\n    for (let batch of this.batches) {\r\n       for (idx = 0; idx < batch; ++idx) {\r\n          yield this._columns.map(function(c) { return c.get(idx, batch); });\r\n       }\r\n    }\r\n}\r\n{code}\r\nObviously there would need to be bounds-checking for {{startRow}} and {{endRow}} as well, but that wouldn't be hard to implement by tracking an overall index.\r\n\r\nThe batch hint could be an optional parameter on {{Vector.get(..)}}. That way no one is forced to use it, and random access would be more intuitive. Or it could be an entirely separate function {{Vector.getFromBatch(i, batch)}}.\r\n\r\nMy end goal here is just improving performance when iterating over multiple vectors, so if anyone has other ideas on how to do that I'd be happy to ditch this idea. Maybe there's some way to use multiple Vector iterators simultaneously that I'm missing?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bhulette",
                        "name": "bhulette",
                        "key": "bhulette",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Brian Hulette",
                        "active": true,
                        "timeZone": "America/Vancouver"
                    },
                    "created": "2017-10-10T00:14:41.218+0000",
                    "updated": "2017-10-10T00:14:41.218+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13107262/comment/16204747",
                    "id": "16204747",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bhulette",
                        "name": "bhulette",
                        "key": "bhulette",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Brian Hulette",
                        "active": true,
                        "timeZone": "America/Vancouver"
                    },
                    "body": "Finally put up that PR I promised: https://github.com/apache/arrow/pull/1200",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bhulette",
                        "name": "bhulette",
                        "key": "bhulette",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Brian Hulette",
                        "active": true,
                        "timeZone": "America/Vancouver"
                    },
                    "created": "2017-10-14T17:24:44.889+0000",
                    "updated": "2017-10-14T17:24:44.889+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13107262/comment/16205094",
                    "id": "16205094",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Github user trxcllnt commented on the issue:\n\n    https://github.com/apache/arrow/pull/1200\n  \n    @wesm yep we have coverage [ready to go](https://github.com/apache/arrow/blob/master/js/package.json#L21), but [commented out](https://github.com/apache/arrow/blob/master/ci/travis_script_js.sh#L28) in the CI script until we set up something like coveralls.\r\n    @TheNeuralBit sorry I haven't responded to your comments on [1652](https://issues.apache.org/jira/browse/ARROW-1652) yet, I'll do that right now.\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-10-15T11:25:18.493+0000",
                    "updated": "2017-10-15T11:25:18.493+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13107262/comment/16205278",
                    "id": "16205278",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=paul.e.taylor",
                        "name": "paul.e.taylor",
                        "key": "paul.e.taylor",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Paul Taylor",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "[~bhulette] \r\n{quote}\r\nThe Vector iterators don't help since they can't be used simultaneously across multiple Vectors (or can they? is there something like python's zip that we could use?)\r\n{quote}\r\n\r\nYeah totally. I've been using [IxJS|https://github.com/ReactiveX/IxJS] for this, it's basically a lazy version of {{lodash}} for Iterables and AsyncIterables from the team that did the Enumerable and Observable extension methods in C#. The Ix operators work on any JS Iterable type, so they work with the JS Vectors. You can use the operators in a functional style, or cast the Vectors to Iterables and work with a full prototype (which I find is easier with intellisense):\r\n\r\n{code:javascript}\r\nimport * as fs from 'fs';\r\nimport { Table } from 'apache-arrow';\r\nimport { zip } from 'ix/iterable/zip';\r\nimport { AsyncSink, AsyncIterable } from 'ix';\r\n\r\nlet tables = AsyncIterable\r\n  .from(fs\r\n    .createReadStream('table.arrow')\r\n    .pipe(new AsyncSink()))\r\n  .toArray()\r\n  .map((buffers) => Table.from(...buffers));\r\n\r\nfor await (let table of tables) {\r\n  let colA = table.getColumn('A');\r\n  let colB = table.getColumn('B');\r\n  for (let [a, b] of zip(colA, colB)) {\r\n    console.log(a + b);\r\n  }\r\n}\r\n{code}\r\n\r\nIt's also helpful when you're working with a streaming source:\r\n\r\n{code:javascript}\r\nimport { zip } from 'ix/iterable/zip';\r\nimport { readBuffers } from 'apache-arrow';\r\nimport { AsyncSink, AsyncIterable } from 'ix';\r\n\r\nlet vectors = AsyncIterable\r\n  .from(fetch('http://some-resource.arrow'))\r\n  .flatMap(({ body }) => await body.getReader().pipeTo(new AsyncSink()))\r\n  .toArray() // todo: `readBuffersAsync`, so we don't have to aggregate the stream here\r\n  .flatMap((buffers) => readBuffers(...buffers))\r\n\r\nfor await (let [colA, colB] of vectors) {\r\n  for (let sum of zip(([a, b]) => a + b, colA, colB)) {\r\n    console.log(sum);\r\n  }\r\n}\r\n{code}\r\n\r\nIn addition to zip, there's a ton of other useful columnar transforms like scan, map, filter, reduce, min/max/groupBy, inner/outer/groupJoin, distinctUntilChanged, and operations for converting between sync/async Iterables. Pretty slick.\r\n\r\n{quote}\r\nIf the Table required that each of it's vectors have the same batches, and stored that in a batches array, *rows could just iterate over each batch, and then over each index within it.\r\n{quote}\r\n\r\nYou're absolutely right, I threw the {{*rows()}} iterator in at the last minute b/c it looked good in a gist. Ideally it would zip the columns. The whole Table thing deserves a make over :-)\r\n\r\n{quote}\r\nThe most significant changes are in {{ListVector}} and {{IndexVector}}, because I removed the {{returnWithBatchIndex}} argument and made some tweaks to the way offset vectors are handled (Rather than subtracting batch when accessing data, use {{length - 1}} to reduce {{index}} while iterating)\r\n{quote}\r\n\r\nGod that's awesome, thanks for seeing that! I spent nearly a day debugging that until I noticed they were always off by {{batch}} many. It didn't even occur to me to subtract 1 while iterating \ud83d\ude02.\r\n\r\n{quote}\r\nThe batch hint could be an optional parameter on Vector.get(..). That way no one is forced to use it, and random access would be more intuitive. Or it could be an entirely separate function Vector.getFromBatch(i, batch).\r\n{quote}\r\n\r\nYeah sorry I forgot to mention in my previous comment that I [originally had a batch hint in get|https://github.com/graphistry/arrow/blame/05372ddf3be33847ebce9f7458ee59e7ada1b15a/src/vectors/typed.ts#L42], almost identical to your PR \ud83d\ude05. As I was working through the tests I realized the batch hint doesn't always compose across Vectors. Considering how heavily composition is employed in the Vector design, {{get}} should always be idempotent with respect to its iterator form.\r\n\r\nFor example, cloning a Vector and pairing it with a new validity Vector could result in the vectors having different internal batch structures. In this case the parent could call the ValidityVector's {{get}} with the wrong indexes, batch hints, or both. I could be mistaken, but I think applies to all the composed types (StructVector, ListVectorBase, DictionaryVector)? Unfortunately this tight coupling does exist between the ListVectorBase and its offset Vector. I didn't see an alternative given the memory layout, so I made it an internal implementation detail. It would be great to change that it if possible.\r\n\r\n{quote}\r\nMy end goal here is just improving performance when iterating over multiple vectors, so if anyone has other ideas on how to do that I'd be happy to ditch this idea. Maybe there's some way to use multiple Vector iterators simultaneously that I'm missing?\r\n{quote}\r\n\r\nI'm with you 100%, speed is the name of the game.\r\n\r\nLast weekend I benchmarked iterating 25MM Float32s across 22 batches (in turbofan) to see if I could make the reverse {{index -> batch}} lookup faster:\r\n\r\n- a for-loop with hint takes ~340ms\r\n- the way {{get}} works today takes ~750ms\r\n- regular iterators take ~700ms (avoiding intermediate {{IteratorResult}} allocations gets that down to ~640ms range)\r\n- a straight memcpy takes ~100ms\r\n- a special forward-only iterator function (that allows skipping ahead but not back) takes ~350ms\r\n- skip list and sparse array were both total disasters in the ~5-10s range\r\n\r\nThese ratios seem in line with the Arrow performance tests. While I share your opinions on speed, the JIT is famously difficult to predict. I think our energy will be better applied writing Arrow-optimized iteration operators (filter/skip/take, sort, groupBy) that cleverly cache intermediate indexes and make liberal use of zero-copy slicing than attempting to micro-optimize the difference between {{for}} and {{for...of}} loops.\r\n\r\nDoes that all sound reasonable or am I way off base?\r\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=paul.e.taylor",
                        "name": "paul.e.taylor",
                        "key": "paul.e.taylor",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Paul Taylor",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2017-10-15T19:40:33.293+0000",
                    "updated": "2017-10-15T19:43:58.253+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13107262/comment/16211707",
                    "id": "16211707",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Github user TheNeuralBit commented on the issue:\n\n    https://github.com/apache/arrow/pull/1200\n  \n    @wesm I think this may be irrelevant now based on our new plans for the `Vector` class\r\n    @trxcllnt what do you think? Maybe ARROW-1652 should be changed to \"add batch vector accessor\" and include your planned changes\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-10-19T20:43:27.405+0000",
                    "updated": "2017-10-19T20:43:27.405+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13107262/comment/16211722",
                    "id": "16211722",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Github user trxcllnt commented on the issue:\n\n    https://github.com/apache/arrow/pull/1200\n  \n    @TheNeuralBit yeah that works for me, that way it's still tracked \n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-10-19T20:56:21.210+0000",
                    "updated": "2017-10-19T20:56:21.210+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13107262/comment/16211727",
                    "id": "16211727",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Github user TheNeuralBit closed the pull request at:\n\n    https://github.com/apache/arrow/pull/1200\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-10-19T20:59:42.115+0000",
                    "updated": "2017-10-19T20:59:42.115+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13107262/comment/16234357",
                    "id": "16234357",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "TheNeuralBit commented on a change in pull request #1273: ARROW-1652: [JS] housekeeping, vector cleanup\nURL: https://github.com/apache/arrow/pull/1273#discussion_r148275559\n \n \n\n ##########\n File path: js/src/reader/arrow.ts\n ##########\n @@ -47,22 +48,27 @@ export function* readBuffers(...bytes: Array<Uint8Array | Buffer | string>) {\n     const dictionaries: Dictionaries = {};\n     const byteBuffers = bytes.map(toByteBuffer);\n     for (let { schema, batch } of readRecords(...byteBuffers)) {\n-        let vectors: Vector<any>[] = [];\n+        let vectors: Column<any>[] = [];\n         let state = { nodeIndex: 0, bufferIndex: 0 };\n-        let index = -1, fieldsLength = schema.fieldsLength();\n+        let fieldsLength = schema.fieldsLength();\n+        let index = -1, field: Field, vector: Vector<any>;\n         if (batch.id) {\n             // A dictionary batch only contain a single vector. Traverse each\n             // field and its children until we find one that uses this dictionary\n             while (++index < fieldsLength) {\n-                let vector = readDictionary(schema.fields(index), batch, state, dictionaries);\n-                if (vector) {\n-                    dictionaries[batch.id] = dictionaries[batch.id] && dictionaries[batch.id].concat(vector) || vector;\n-                    break;\n+                if (field = schema.fields(index)!) {\n \n Review comment:\n   Is the `!` and if-test here necessary because of strict mode?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-01T16:50:21.676+0000",
                    "updated": "2017-11-01T16:50:21.676+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13107262/comment/16234358",
                    "id": "16234358",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "TheNeuralBit commented on a change in pull request #1273: ARROW-1652: [JS] housekeeping, vector cleanup\nURL: https://github.com/apache/arrow/pull/1273#discussion_r148290098\n \n \n\n ##########\n File path: js/src/types/vector/date.ts\n ##########\n @@ -0,0 +1,29 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import { TypedVector } from './typed';\n+\n+export class DateVector extends TypedVector<Date, Uint32Array> {\n+    get(index: number): Date {\n+        return new Date(4294967296   * /* 2^32 */\n \n Review comment:\n   :+1: for getting rid of `Math.pow(2,32)`\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-01T16:50:21.678+0000",
                    "updated": "2017-11-01T16:50:21.678+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13107262/comment/16234359",
                    "id": "16234359",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "TheNeuralBit commented on a change in pull request #1273: ARROW-1652: [JS] housekeeping, vector cleanup\nURL: https://github.com/apache/arrow/pull/1273#discussion_r148291752\n \n \n\n ##########\n File path: js/src/types/vector/traits.ts\n ##########\n @@ -0,0 +1,69 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import { BoolVector } from './bool';\n+import { Vector, Column } from '../types';\n+import * as Schema_ from '../../format/Schema_generated';\n+import * as Message_ from '../../format/Message_generated';\n+import Type = Schema_.org.apache.arrow.flatbuf.Type;\n+import Field = Schema_.org.apache.arrow.flatbuf.Field;\n+import FieldNode = Message_.org.apache.arrow.flatbuf.FieldNode;\n+\n+type Ctor<TArgv> = new (argv: TArgv) => Vector;\n+\n+export const nullable = <T extends Vector, TArgv>(superclass: new (argv: TArgv) => T) =>\n \n Review comment:\n   Maybe these should be `makeNullable/Readable` or `mixinNullable/Readable` to be a little more clear?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-01T16:50:21.691+0000",
                    "updated": "2017-11-01T16:50:21.691+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13107262/comment/16234360",
                    "id": "16234360",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "TheNeuralBit commented on a change in pull request #1273: ARROW-1652: [JS] housekeeping, vector cleanup\nURL: https://github.com/apache/arrow/pull/1273#discussion_r148311928\n \n \n\n ##########\n File path: js/src/types/table/table.ts\n ##########\n @@ -0,0 +1,63 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import { Row } from './row';\n+import { toString } from './toString';\n+import { VirtualVector } from '../vector/virtual';\n+import { Vector, Column, Struct } from '../types';\n+\n+export interface TableVector {\n+    toString(): string;\n+    toString(index: boolean): string;\n+    toString(options: { index: boolean }): string;\n+}\n+\n+export class TableVector extends Vector<TableRow> implements Struct<string> {\n+    readonly length: number;\n+    readonly columns: Column[];\n+    constructor(argv: { columns: Column[] }) {\n+        super();\n+        this.columns = argv.columns || [];\n+        if (!this.length) {\n+            this.length = Math.max(...this.columns.map((col) => col.length)) | 0;\n+        }\n+    }\n+    get(index: number): TableRow {\n+        return new TableRow(this, index);\n+    }\n+    col(name: string) {\n+        return this.columns.find((col) => col.name === name) || null;\n+    }\n \n Review comment:\n   d'oh nevermind just noticed that `columns` is exposed, so no one should be tempted to use `table.col(table.key(i))`, but its still true that the `Row` can't access table columns by index.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-01T16:50:21.728+0000",
                    "updated": "2017-11-01T16:50:21.728+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13107262/comment/16234361",
                    "id": "16234361",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "TheNeuralBit commented on a change in pull request #1273: ARROW-1652: [JS] housekeeping, vector cleanup\nURL: https://github.com/apache/arrow/pull/1273#discussion_r148307041\n \n \n\n ##########\n File path: js/src/types/vector/virtual.ts\n ##########\n @@ -0,0 +1,129 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import { TypedVector } from './typed';\n+import { Vector, Column, TypedArray, TypedArrayConstructor } from '../types';\n+\n+export class VirtualVector<T> implements Column<T> {\n+    readonly name: string;\n+    readonly type: string;\n+    readonly length: number;\n+    readonly vectors: Vector<T>[];\n+    readonly offsets: Uint32Array;\n+    readonly ArrayType: ArrayConstructor | TypedArrayConstructor;\n+    constructor(ArrayType: ArrayConstructor | TypedArrayConstructor, ...vectors: Vector<T>[]) {\n+        this.vectors = vectors;\n+        this.ArrayType = ArrayType;\n+        this.name = (vectors[0] as any).name;\n+        this.type = (vectors[0] as any).type;\n+        this.length = vectors.reduce((sum, vec) => sum + vec.length, 0);\n+        this.offsets = Uint32Array.from(vectors.reduce((sums, vector, index) => [...sums, vector.length + sums[index]], [0]));\n+    }\n+    *[Symbol.iterator]() {\n+        for (const vector of this.vectors) {\n+            yield* vector;\n+        }\n+    }\n+    get nullable() {\n+        return (this.vectors as Column<T>[]).some((vec) => vec.nullable);\n+    }\n+    get nullCount() {\n+        return (this.vectors as Column<T>[]).reduce((sum, v) => sum + v.nullCount | 0, 0);\n+    }\n+    get metadata() {\n+        return new Map<string, string>(\n+            (this.vectors as Column<T>[]).reduce((entries, v) => [\n+                ...entries, ...v.metadata.entries()\n+            ], [] as [string, string][])\n+        );\n+    }\n+    get(index: number) {\n+        return findIndex(this.offsets, index) ? this.vectors[_vector].get(_offset) : null;\n+    }\n+    concat(...vectors: Vector<T>[]) {\n+        return new VirtualVector(this.ArrayType, ...this.vectors, ...vectors);\n+    }\n+    slice(begin?: number, end?: number) {\n+        const ArrayType = this.ArrayType as any;\n+        // clamp begin and end values between the virtual length\n+        clampRange(this.length, begin!, end);\n+        const from = _from, total = _total;\n+        // find the start vector index and adjusted value index offset\n+        if (!findIndex(this.offsets, from)) { return new ArrayType(0); }\n+        const set = ArrayType === Array ? arraySet : typedArraySet as any;\n+        let index = _vector, vectors = this.vectors as TypedVector<T, TypedArray>[];\n+        let vector = vectors[index], source = vector.slice(_offset, _offset + total), target = source;\n+        // Perf optimization: if the first slice contains all the values we're looking for,\n+        // we don't have to copy values to a target Array. If we're slicing a TypedArray,\n+        // this is a significant improvement as we avoid the memcpy \ud83c\udf89\n+        if ((source.length / vector.stride | 0) < total) {\n+            let vectorsLength = vectors.length;\n+            let count = 0, length = 0, sources = [];\n+            do {\n+                sources.push(source);\n+                length += source.length;\n+                count += (source.length / vector.stride | 0);\n+            } while (\n+                (count  < total) &&\n+                (vector = vectors[index = (++index % vectorsLength)]) &&\n+                (source = vector.slice(0, Math.min(vector.length, total - count)))\n+            );\n+            target = new ArrayType(length);\n+            for (let i = -1, j = 0, n = sources.length; ++i < n;) {\n+                j = set(sources[i], target, j);\n+            }\n+        }\n+        return target;\n+    }\n+}\n+\n+let _from = -1, _total = -1;\n+function clampRange(length: number, start: number, end?: number) {\n \n Review comment:\n   I guess this `_from`, `_total` is just a more efficient way to return multiple values?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-01T16:50:22.002+0000",
                    "updated": "2017-11-01T16:50:22.002+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13107262/comment/16234362",
                    "id": "16234362",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "TheNeuralBit commented on a change in pull request #1273: ARROW-1652: [JS] housekeeping, vector cleanup\nURL: https://github.com/apache/arrow/pull/1273#discussion_r148285192\n \n \n\n ##########\n File path: js/src/types/table/row.ts\n ##########\n @@ -0,0 +1,56 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import { Vector, Struct } from '../types';\n+import { VirtualVector } from '../vector/virtual';\n+\n+export class Row<TKey extends string | number> extends Vector {\n+    readonly row: number;\n+    readonly table: Struct<TKey>;\n+    [Symbol.toStringTag]() { return 'Row'; }\n+    constructor(table: Struct<TKey>, row: number) {\n+        super();\n+        this.row = row;\n+        this.table = table;\n+    }\n+    get length() { return this.table.length; }\n+    get<T = any>(key: TKey) {\n+        const col = this.table.col(key as TKey);\n+        return col ? col.get(this.row) as T : null;\n+    }\n \n Review comment:\n   I know I sound like a broken record - but I'd still like it if accessing multiple columns from a `Row` resulted in just one batch lookup if the vectors all share the same internal batch structure. I think this refactor should make that a lot easier though! There could be an `AlignedRow` class that `StructVector.get()` (or some sub-class/mix-in) returns under certain conditions.\r\n   \r\n   I'll make a JIRA if you concur\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-01T16:50:22.109+0000",
                    "updated": "2017-11-01T16:50:22.109+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13107262/comment/16234363",
                    "id": "16234363",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "TheNeuralBit commented on a change in pull request #1273: ARROW-1652: [JS] housekeeping, vector cleanup\nURL: https://github.com/apache/arrow/pull/1273#discussion_r148275854\n \n \n\n ##########\n File path: js/perf/index.js\n ##########\n @@ -16,12 +16,10 @@\n // under the License.\n \n // Use the ES5 UMD target as perf baseline\n-// ES6/7 iterators are faster in turbofan, but something about the\n-// ES5 transpilation (rewriting let and const to var?) JITs better\n-const { Table, readBuffers } = require('../dist/Arrow');\n+// const { Table, readBuffers } = require('../targets/es5/umd');\n // const { Table, readBuffers } = require('../targets/es5/cjs');\n+const { Table, readBuffers } = require('../targets/es2015/umd');\n // const { Table, readBuffers } = require('../targets/es2015/cjs');\n \n Review comment:\n   Would it be possible to run perf tests on each target automatically like the unit tests? Obviously doesn't need to happen now, just curious\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-01T16:50:22.151+0000",
                    "updated": "2017-11-01T16:50:22.151+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13107262/comment/16234364",
                    "id": "16234364",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "TheNeuralBit commented on a change in pull request #1273: ARROW-1652: [JS] housekeeping, vector cleanup\nURL: https://github.com/apache/arrow/pull/1273#discussion_r148288303\n \n \n\n ##########\n File path: js/src/types/table/table.ts\n ##########\n @@ -0,0 +1,63 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import { Row } from './row';\n+import { toString } from './toString';\n+import { VirtualVector } from '../vector/virtual';\n+import { Vector, Column, Struct } from '../types';\n+\n+export interface TableVector {\n+    toString(): string;\n+    toString(index: boolean): string;\n+    toString(options: { index: boolean }): string;\n+}\n+\n+export class TableVector extends Vector<TableRow> implements Struct<string> {\n+    readonly length: number;\n+    readonly columns: Column[];\n+    constructor(argv: { columns: Column[] }) {\n+        super();\n+        this.columns = argv.columns || [];\n+        if (!this.length) {\n+            this.length = Math.max(...this.columns.map((col) => col.length)) | 0;\n+        }\n+    }\n+    get(index: number): TableRow {\n+        return new TableRow(this, index);\n+    }\n+    col(name: string) {\n+        return this.columns.find((col) => col.name === name) || null;\n+    }\n \n Review comment:\n   Do you think it would make sense to allow accessing columns by index here? As much as I like the elegance of `TableVector` as a `Struct<string>` and `StructVector` as a `Struct<number>`, I wouldn't want users to try to accomplish access by index on their own with `table.col(table.key(i))`, when we could do it much faster with `this.columns[index]`. It could also save repeated calls to `columns.find()` from `Row.get()`.\r\n   \r\n   Maybe `TableVector` could implement `Struct<string|number>`, then `col(key: string|number)` could take the appropriate action based on type?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-01T16:50:22.167+0000",
                    "updated": "2017-11-01T16:50:22.167+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13107262/comment/16234387",
                    "id": "16234387",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "trxcllnt commented on a change in pull request #1273: ARROW-1652: [JS] housekeeping, vector cleanup\nURL: https://github.com/apache/arrow/pull/1273#discussion_r148320507\n \n \n\n ##########\n File path: js/src/reader/arrow.ts\n ##########\n @@ -47,22 +48,27 @@ export function* readBuffers(...bytes: Array<Uint8Array | Buffer | string>) {\n     const dictionaries: Dictionaries = {};\n     const byteBuffers = bytes.map(toByteBuffer);\n     for (let { schema, batch } of readRecords(...byteBuffers)) {\n-        let vectors: Vector<any>[] = [];\n+        let vectors: Column<any>[] = [];\n         let state = { nodeIndex: 0, bufferIndex: 0 };\n-        let index = -1, fieldsLength = schema.fieldsLength();\n+        let fieldsLength = schema.fieldsLength();\n+        let index = -1, field: Field, vector: Vector<any>;\n         if (batch.id) {\n             // A dictionary batch only contain a single vector. Traverse each\n             // field and its children until we find one that uses this dictionary\n             while (++index < fieldsLength) {\n-                let vector = readDictionary(schema.fields(index), batch, state, dictionaries);\n-                if (vector) {\n-                    dictionaries[batch.id] = dictionaries[batch.id] && dictionaries[batch.id].concat(vector) || vector;\n-                    break;\n+                if (field = schema.fields(index)!) {\n \n Review comment:\n   Yeah. The bang notation forces the type checker to drop nulls, but at runtime it can still be null\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-01T17:03:41.447+0000",
                    "updated": "2017-11-01T17:03:41.447+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13107262/comment/16234524",
                    "id": "16234524",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "trxcllnt commented on a change in pull request #1273: ARROW-1652: [JS] housekeeping, vector cleanup\nURL: https://github.com/apache/arrow/pull/1273#discussion_r148343615\n \n \n\n ##########\n File path: js/src/types/table/row.ts\n ##########\n @@ -0,0 +1,56 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import { Vector, Struct } from '../types';\n+import { VirtualVector } from '../vector/virtual';\n+\n+export class Row<TKey extends string | number> extends Vector {\n+    readonly row: number;\n+    readonly table: Struct<TKey>;\n+    [Symbol.toStringTag]() { return 'Row'; }\n+    constructor(table: Struct<TKey>, row: number) {\n+        super();\n+        this.row = row;\n+        this.table = table;\n+    }\n+    get length() { return this.table.length; }\n+    get<T = any>(key: TKey) {\n+        const col = this.table.col(key as TKey);\n+        return col ? col.get(this.row) as T : null;\n+    }\n \n Review comment:\n   @TheNeuralBit yeah, I'm open to ideas here. Perhaps the best approach here is to do away with the distinction between table/struct, and make `get()` and `key()` take column indexes, and `col()` take a column name. Also fwiw when a Row's `this.table` is a StructVector, the `table.col(key)` call [access the columns Array](https://github.com/trxcllnt/arrow/blob/vector-cleanup/js/src/types/table/struct.ts#L43) by index, which (if I understand correctly) sounds like what you're looking for here?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-01T18:25:26.923+0000",
                    "updated": "2017-11-01T18:25:26.923+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13107262/comment/16234530",
                    "id": "16234530",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "trxcllnt commented on a change in pull request #1273: ARROW-1652: [JS] housekeeping, vector cleanup\nURL: https://github.com/apache/arrow/pull/1273#discussion_r148344970\n \n \n\n ##########\n File path: js/src/types/vector/traits.ts\n ##########\n @@ -0,0 +1,69 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import { BoolVector } from './bool';\n+import { Vector, Column } from '../types';\n+import * as Schema_ from '../../format/Schema_generated';\n+import * as Message_ from '../../format/Message_generated';\n+import Type = Schema_.org.apache.arrow.flatbuf.Type;\n+import Field = Schema_.org.apache.arrow.flatbuf.Field;\n+import FieldNode = Message_.org.apache.arrow.flatbuf.FieldNode;\n+\n+type Ctor<TArgv> = new (argv: TArgv) => Vector;\n+\n+export const nullable = <T extends Vector, TArgv>(superclass: new (argv: TArgv) => T) =>\n \n Review comment:\n   Yep, totally cool w/ me. Not super happy with `readable` as a name, but I wanted to stick to normal mixin naming conventions, and readable really intends to mixin vector metadata from the Arrow reader. The Java implementation has `FieldVector`, so I considered `mixinField` and `mixinNullable`. Of course if we want to switch from verbs to nouns, `fieldMixin` and `nullableMixin` also have a nice ring.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-01T18:30:20.059+0000",
                    "updated": "2017-11-01T18:30:20.059+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13107262/comment/16234541",
                    "id": "16234541",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "trxcllnt commented on a change in pull request #1273: ARROW-1652: [JS] housekeeping, vector cleanup\nURL: https://github.com/apache/arrow/pull/1273#discussion_r148343615\n \n \n\n ##########\n File path: js/src/types/table/row.ts\n ##########\n @@ -0,0 +1,56 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import { Vector, Struct } from '../types';\n+import { VirtualVector } from '../vector/virtual';\n+\n+export class Row<TKey extends string | number> extends Vector {\n+    readonly row: number;\n+    readonly table: Struct<TKey>;\n+    [Symbol.toStringTag]() { return 'Row'; }\n+    constructor(table: Struct<TKey>, row: number) {\n+        super();\n+        this.row = row;\n+        this.table = table;\n+    }\n+    get length() { return this.table.length; }\n+    get<T = any>(key: TKey) {\n+        const col = this.table.col(key as TKey);\n+        return col ? col.get(this.row) as T : null;\n+    }\n \n Review comment:\n   @TheNeuralBit yeah, I'm open to ideas here. Perhaps the best approach here is to do away with the distinction between table/struct, and make `get()` and `key()` take column indexes, and `col()` take a column name. Also fwiw when a Row's `this.table` is a StructVector, the `table.col(key)` call [accesses the columns Array](https://github.com/trxcllnt/arrow/blob/vector-cleanup/js/src/types/table/struct.ts#L43) by index, which (if I understand correctly) sounds like what you're looking for here?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-01T18:36:18.987+0000",
                    "updated": "2017-11-01T18:36:18.987+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13107262/comment/16234699",
                    "id": "16234699",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "trxcllnt commented on a change in pull request #1273: ARROW-1652: [JS] housekeeping, vector cleanup\nURL: https://github.com/apache/arrow/pull/1273#discussion_r148376483\n \n \n\n ##########\n File path: js/src/types/vector/virtual.ts\n ##########\n @@ -0,0 +1,129 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import { TypedVector } from './typed';\n+import { Vector, Column, TypedArray, TypedArrayConstructor } from '../types';\n+\n+export class VirtualVector<T> implements Column<T> {\n+    readonly name: string;\n+    readonly type: string;\n+    readonly length: number;\n+    readonly vectors: Vector<T>[];\n+    readonly offsets: Uint32Array;\n+    readonly ArrayType: ArrayConstructor | TypedArrayConstructor;\n+    constructor(ArrayType: ArrayConstructor | TypedArrayConstructor, ...vectors: Vector<T>[]) {\n+        this.vectors = vectors;\n+        this.ArrayType = ArrayType;\n+        this.name = (vectors[0] as any).name;\n+        this.type = (vectors[0] as any).type;\n+        this.length = vectors.reduce((sum, vec) => sum + vec.length, 0);\n+        this.offsets = Uint32Array.from(vectors.reduce((sums, vector, index) => [...sums, vector.length + sums[index]], [0]));\n+    }\n+    *[Symbol.iterator]() {\n+        for (const vector of this.vectors) {\n+            yield* vector;\n+        }\n+    }\n+    get nullable() {\n+        return (this.vectors as Column<T>[]).some((vec) => vec.nullable);\n+    }\n+    get nullCount() {\n+        return (this.vectors as Column<T>[]).reduce((sum, v) => sum + v.nullCount | 0, 0);\n+    }\n+    get metadata() {\n+        return new Map<string, string>(\n+            (this.vectors as Column<T>[]).reduce((entries, v) => [\n+                ...entries, ...v.metadata.entries()\n+            ], [] as [string, string][])\n+        );\n+    }\n+    get(index: number) {\n+        return findIndex(this.offsets, index) ? this.vectors[_vector].get(_offset) : null;\n+    }\n+    concat(...vectors: Vector<T>[]) {\n+        return new VirtualVector(this.ArrayType, ...this.vectors, ...vectors);\n+    }\n+    slice(begin?: number, end?: number) {\n+        const ArrayType = this.ArrayType as any;\n+        // clamp begin and end values between the virtual length\n+        clampRange(this.length, begin!, end);\n+        const from = _from, total = _total;\n+        // find the start vector index and adjusted value index offset\n+        if (!findIndex(this.offsets, from)) { return new ArrayType(0); }\n+        const set = ArrayType === Array ? arraySet : typedArraySet as any;\n+        let index = _vector, vectors = this.vectors as TypedVector<T, TypedArray>[];\n+        let vector = vectors[index], source = vector.slice(_offset, _offset + total), target = source;\n+        // Perf optimization: if the first slice contains all the values we're looking for,\n+        // we don't have to copy values to a target Array. If we're slicing a TypedArray,\n+        // this is a significant improvement as we avoid the memcpy \ud83c\udf89\n+        if ((source.length / vector.stride | 0) < total) {\n+            let vectorsLength = vectors.length;\n+            let count = 0, length = 0, sources = [];\n+            do {\n+                sources.push(source);\n+                length += source.length;\n+                count += (source.length / vector.stride | 0);\n+            } while (\n+                (count  < total) &&\n+                (vector = vectors[index = (++index % vectorsLength)]) &&\n+                (source = vector.slice(0, Math.min(vector.length, total - count)))\n+            );\n+            target = new ArrayType(length);\n+            for (let i = -1, j = 0, n = sources.length; ++i < n;) {\n+                j = set(sources[i], target, j);\n+            }\n+        }\n+        return target;\n+    }\n+}\n+\n+let _from = -1, _total = -1;\n+function clampRange(length: number, start: number, end?: number) {\n \n Review comment:\n   Yeah, essentially to avoid the tuple allocation. We might be inhibiting the JITs ability to inline these calls (but maybe not, since they're local to the module). I checked the CC/Uglify output of the return version, and neither of them inline the calls. Will test perf of both locally to see if there's any difference. \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-01T20:34:41.021+0000",
                    "updated": "2017-11-01T20:34:41.021+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13107262/comment/16235775",
                    "id": "16235775",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "TheNeuralBit commented on a change in pull request #1273: ARROW-1652: [JS] housekeeping, vector cleanup\nURL: https://github.com/apache/arrow/pull/1273#discussion_r148540215\n \n \n\n ##########\n File path: js/src/types/table/row.ts\n ##########\n @@ -0,0 +1,56 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import { Vector, Struct } from '../types';\n+import { VirtualVector } from '../vector/virtual';\n+\n+export class Row<TKey extends string | number> extends Vector {\n+    readonly row: number;\n+    readonly table: Struct<TKey>;\n+    [Symbol.toStringTag]() { return 'Row'; }\n+    constructor(table: Struct<TKey>, row: number) {\n+        super();\n+        this.row = row;\n+        this.table = table;\n+    }\n+    get length() { return this.table.length; }\n+    get<T = any>(key: TKey) {\n+        const col = this.table.col(key as TKey);\n+        return col ? col.get(this.row) as T : null;\n+    }\n \n Review comment:\n   @trxcllnt actually what I'm getting at here is something like the following:\r\n   ```\r\n   let row = table.get(row_index);\r\n   let a = row.get('column_a'), b = row.get('column_b');\r\n   ```\r\n   Each `get` call would result in a batch lookup in both the `column_a` and `column_b` VirtualVectors even if the batch structure for both vectors is the same. I'm just suggesting there could be a sub-class of `Row` that handles that case. It could do the batch lookup once for the first call to `get` and re-use it as a batch hint on subsequent calls.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-02T14:00:17.221+0000",
                    "updated": "2017-11-02T14:00:17.221+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13107262/comment/16235792",
                    "id": "16235792",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "TheNeuralBit commented on a change in pull request #1273: ARROW-1652: [JS] housekeeping, vector cleanup\nURL: https://github.com/apache/arrow/pull/1273#discussion_r148543271\n \n \n\n ##########\n File path: js/src/types/table/row.ts\n ##########\n @@ -0,0 +1,56 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import { Vector, Struct } from '../types';\n+import { VirtualVector } from '../vector/virtual';\n+\n+export class Row<TKey extends string | number> extends Vector {\n+    readonly row: number;\n+    readonly table: Struct<TKey>;\n+    [Symbol.toStringTag]() { return 'Row'; }\n+    constructor(table: Struct<TKey>, row: number) {\n+        super();\n+        this.row = row;\n+        this.table = table;\n+    }\n+    get length() { return this.table.length; }\n+    get<T = any>(key: TKey) {\n+        const col = this.table.col(key as TKey);\n+        return col ? col.get(this.row) as T : null;\n+    }\n \n Review comment:\n   I think your suggestion to change `get()` and `key()` to take column indexes does apply to my other comment on the `TableVector` though. I'll respond there.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-02T14:11:13.979+0000",
                    "updated": "2017-11-02T14:11:13.979+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13107262/comment/16235801",
                    "id": "16235801",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "TheNeuralBit commented on a change in pull request #1273: ARROW-1652: [JS] housekeeping, vector cleanup\nURL: https://github.com/apache/arrow/pull/1273#discussion_r148545546\n \n \n\n ##########\n File path: js/src/types/table/table.ts\n ##########\n @@ -0,0 +1,63 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import { Row } from './row';\n+import { toString } from './toString';\n+import { VirtualVector } from '../vector/virtual';\n+import { Vector, Column, Struct } from '../types';\n+\n+export interface TableVector {\n+    toString(): string;\n+    toString(index: boolean): string;\n+    toString(options: { index: boolean }): string;\n+}\n+\n+export class TableVector extends Vector<TableRow> implements Struct<string> {\n+    readonly length: number;\n+    readonly columns: Column[];\n+    constructor(argv: { columns: Column[] }) {\n+        super();\n+        this.columns = argv.columns || [];\n+        if (!this.length) {\n+            this.length = Math.max(...this.columns.map((col) => col.length)) | 0;\n+        }\n+    }\n+    get(index: number): TableRow {\n+        return new TableRow(this, index);\n+    }\n+    col(name: string) {\n+        return this.columns.find((col) => col.name === name) || null;\n+    }\n \n Review comment:\n   > @TheNeuralBit yeah, I'm open to ideas here. Perhaps the best approach here is to do away with the distinction between table/struct, and make get() and key() take column indexes, and col() take a column name. Also fwiw when a Row's this.table is a StructVector, the table.col(key) call accesses the columns Array by index, which (if I understand correctly) sounds like what you're looking for here?\r\n   \r\n   Yeah that is what I'm getting at here - it would be great if there was a way for `Row` to access columns by index (as well as by name).\r\n   And actually now that I think about it, `StructVector` should have column names for its children, since they're specified [as a list of Fields in the Schema](https://github.com/apache/arrow/blob/master/format/Schema.fbs#L286). So your suggestion to remove the distinction completely makes a lot of sense.\r\n   \r\n   I'd be fine with leaving this PR as-is and opening another ticket for that task.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-02T14:19:15.239+0000",
                    "updated": "2017-11-02T14:19:15.239+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13107262/comment/16235806",
                    "id": "16235806",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "TheNeuralBit commented on a change in pull request #1273: ARROW-1652: [JS] housekeeping, vector cleanup\nURL: https://github.com/apache/arrow/pull/1273#discussion_r148546390\n \n \n\n ##########\n File path: js/src/types/vector/traits.ts\n ##########\n @@ -0,0 +1,69 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import { BoolVector } from './bool';\n+import { Vector, Column } from '../types';\n+import * as Schema_ from '../../format/Schema_generated';\n+import * as Message_ from '../../format/Message_generated';\n+import Type = Schema_.org.apache.arrow.flatbuf.Type;\n+import Field = Schema_.org.apache.arrow.flatbuf.Field;\n+import FieldNode = Message_.org.apache.arrow.flatbuf.FieldNode;\n+\n+type Ctor<TArgv> = new (argv: TArgv) => Vector;\n+\n+export const nullable = <T extends Vector, TArgv>(superclass: new (argv: TArgv) => T) =>\n \n Review comment:\n   `fieldMixin` and `nullableMixin` sound good to me\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-02T14:22:00.509+0000",
                    "updated": "2017-11-02T14:22:00.509+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13107262/comment/16235821",
                    "id": "16235821",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "trxcllnt commented on a change in pull request #1273: ARROW-1652: [JS] housekeeping, vector cleanup\nURL: https://github.com/apache/arrow/pull/1273#discussion_r148550653\n \n \n\n ##########\n File path: js/src/types/table/table.ts\n ##########\n @@ -0,0 +1,63 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import { Row } from './row';\n+import { toString } from './toString';\n+import { VirtualVector } from '../vector/virtual';\n+import { Vector, Column, Struct } from '../types';\n+\n+export interface TableVector {\n+    toString(): string;\n+    toString(index: boolean): string;\n+    toString(options: { index: boolean }): string;\n+}\n+\n+export class TableVector extends Vector<TableRow> implements Struct<string> {\n+    readonly length: number;\n+    readonly columns: Column[];\n+    constructor(argv: { columns: Column[] }) {\n+        super();\n+        this.columns = argv.columns || [];\n+        if (!this.length) {\n+            this.length = Math.max(...this.columns.map((col) => col.length)) | 0;\n+        }\n+    }\n+    get(index: number): TableRow {\n+        return new TableRow(this, index);\n+    }\n+    col(name: string) {\n+        return this.columns.find((col) => col.name === name) || null;\n+    }\n \n Review comment:\n   @TheNeuralBit I did that yesterday on my flight, and only just got the chance to [push it up](https://github.com/apache/arrow/pull/1273/commits/48c6ca48bb3490cd5d931420288c9d9e5b5c90bb) as you were commenting! One issue I ran into with accessing columns by name is columns aren't required to have names, so it's not reliable. Also yeah I misunderstood what you were asking about the Table, we should be able to special case for rows across columns from the same batch.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-02T14:35:38.521+0000",
                    "updated": "2017-11-02T14:35:38.521+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13107262/comment/16237702",
                    "id": "16237702",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "trxcllnt commented on issue #1273: ARROW-1652: [JS] housekeeping, vector cleanup\nURL: https://github.com/apache/arrow/pull/1273#issuecomment-341729162\n \n \n   @wesm just checking, are you waiting on me to merge this? if so, is there a PR merge script or process I should follow?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-03T15:03:34.273+0000",
                    "updated": "2017-11-03T15:03:34.273+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13107262/comment/16237800",
                    "id": "16237800",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on issue #1273: ARROW-1652: [JS] housekeeping, vector cleanup\nURL: https://github.com/apache/arrow/pull/1273#issuecomment-341745497\n \n \n   @trxcllnt see the README inhttps://github.com/apache/arrow/tree/master/dev. I can merge this later today once the build is green if you aren't all set up to push commits yet\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-03T15:55:56.167+0000",
                    "updated": "2017-11-03T15:55:56.167+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13107262/comment/16237801",
                    "id": "16237801",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on issue #1273: ARROW-1652: [JS] housekeeping, vector cleanup\nURL: https://github.com/apache/arrow/pull/1273#issuecomment-341745497\n \n \n   @trxcllnt see the README in https://github.com/apache/arrow/tree/master/dev. I can merge this later today once the build is green if you aren't all set up to push commits yet\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-03T15:56:00.251+0000",
                    "updated": "2017-11-03T15:56:00.251+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13107262/comment/16238436",
                    "id": "16238436",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm closed pull request #1273: ARROW-1652: [JS] housekeeping, vector cleanup\nURL: https://github.com/apache/arrow/pull/1273\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/js/.gitignore b/js/.gitignore\nindex 6d0f88d19..88c612d8f 100644\n--- a/js/.gitignore\n+++ b/js/.gitignore\n@@ -18,6 +18,7 @@\n # Logs\n logs\n *.log\n+.esm-cache\n npm-debug.log*\n yarn-debug.log*\n yarn-error.log*\n@@ -57,10 +58,6 @@ build/Release\n node_modules/\n jspm_packages/\n \n-# Typescript declaration files\n-types/\n-typings/\n-\n # Optional npm cache directory\n .npm\n \n@@ -85,6 +82,4 @@ package-lock.json\n \n # compilation targets\n dist\n-targets/es5\n-targets/es2015\n-targets/esnext\n+targets\ndiff --git a/js/closure-compiler-scripts/text-encoding.js b/js/closure-compiler-scripts/text-encoding.js\nindex ca9154f88..398883ab9 100644\n--- a/js/closure-compiler-scripts/text-encoding.js\n+++ b/js/closure-compiler-scripts/text-encoding.js\n@@ -11,7 +11,7 @@\n // Utilities\n //\n \n-goog.module(\"module$text_encoding\");\n+goog.module(\"module$text_encoding_utf_8\");\n goog.module.declareLegacyNamespace();\n /**\n  * @param {number} a The number to test.\ndiff --git a/js/gulp/argv.js b/js/gulp/argv.js\nnew file mode 100644\nindex 000000000..33553704e\n--- /dev/null\n+++ b/js/gulp/argv.js\n@@ -0,0 +1,36 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+const argv = require(`command-line-args`)([\n+    { name: `all`, alias: `a`, type: Boolean },\n+    { name: 'update', alias: 'u', type: Boolean },\n+    { name: 'verbose', alias: 'v', type: Boolean },\n+    { name: `target`, type: String, defaultValue: `` },\n+    { name: `module`, type: String, defaultValue: `` },\n+    { name: `coverage`, type: Boolean, defaultValue: false },\n+    { name: `targets`, alias: `t`, type: String, multiple: true, defaultValue: [] },\n+    { name: `modules`, alias: `m`, type: String, multiple: true, defaultValue: [] }\n+]);\n+\n+const { targets, modules } = argv;\n+\n+argv.target && !targets.length && targets.push(argv.target);\n+argv.module && !modules.length && modules.push(argv.module);\n+(argv.all || !targets.length) && targets.push(`all`);\n+(argv.all || !modules.length) && modules.push(`all`);\n+\n+module.exports = { argv, targets, modules };\n\\ No newline at end of file\ndiff --git a/js/gulp/arrow-task.js b/js/gulp/arrow-task.js\nnew file mode 100644\nindex 000000000..d160ecb0e\n--- /dev/null\n+++ b/js/gulp/arrow-task.js\n@@ -0,0 +1,57 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+const {\n+    mainExport, gCCLanguageNames,\n+    targetDir, observableFromStreams\n+} = require('./util');\n+\n+const gulp = require('gulp');\n+const path = require('path');\n+const gulpRename = require(`gulp-rename`);\n+const { memoizeTask } = require('./memoize-task');\n+const { Observable, ReplaySubject } = require('rxjs');\n+\n+const arrowTask = ((cache) => memoizeTask(cache, function copyMain(target, format) {\n+    const out = targetDir(target), srcGlob = `src/**/*`;\n+    const es5Glob = `${targetDir(`es5`, `cjs`)}/**/*.js`;\n+    const esmGlob = `${targetDir(`es2015`, `esm`)}/**/*.js`;\n+    const es5UmdGlob = `${targetDir(`es5`, `umd`)}/**/*.js`;\n+    const es5UmdMaps = `${targetDir(`es5`, `umd`)}/**/*.map`;\n+    const es2015UmdGlob = `${targetDir(`es2015`, `umd`)}/**/*.js`;\n+    const es2015UmdMaps = `${targetDir(`es2015`, `umd`)}/**/*.map`;\n+    const ch_ext = (ext) => gulpRename((p) => { p.extname = ext; });\n+    const append = (ap) => gulpRename((p) => { p.basename += ap; });\n+    return Observable.forkJoin(\n+      observableFromStreams(gulp.src(srcGlob), gulp.dest(out)), // copy src ts files\n+      observableFromStreams(gulp.src(es5Glob), gulp.dest(out)), // copy es5 cjs files\n+      observableFromStreams(gulp.src(esmGlob), ch_ext(`.mjs`), gulp.dest(out)), // copy es2015 esm files and rename to `.mjs`\n+      observableFromStreams(gulp.src(es5UmdGlob), append(`.es5.min`), gulp.dest(out)), // copy es5 umd files and add `.min`\n+      observableFromStreams(gulp.src(es5UmdMaps),                     gulp.dest(out)), // copy es5 umd sourcemap files, but don't rename\n+      observableFromStreams(gulp.src(es2015UmdGlob), append(`.es2015.min`), gulp.dest(out)), // copy es2015 umd files and add `.es6.min`\n+      observableFromStreams(gulp.src(es2015UmdMaps),                        gulp.dest(out)), // copy es2015 umd sourcemap files, but don't rename\n+    ).publish(new ReplaySubject()).refCount();\n+}))({});\n+\n+const arrowTSTask = ((cache) => memoizeTask(cache, function copyTS(target, format) {\n+    return observableFromStreams(gulp.src(`src/**/*`), gulp.dest(targetDir(target, format)));\n+}))({});\n+  \n+  \n+module.exports = arrowTask;\n+module.exports.arrowTask = arrowTask;\n+module.exports.arrowTSTask = arrowTSTask;\n\\ No newline at end of file\ndiff --git a/js/gulp/build-task.js b/js/gulp/build-task.js\nnew file mode 100644\nindex 000000000..01152e662\n--- /dev/null\n+++ b/js/gulp/build-task.js\n@@ -0,0 +1,35 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+const { npmPkgName } = require('./util');\n+const { memoizeTask } = require('./memoize-task');\n+\n+const uglifyTask = require('./uglify-task');\n+const closureTask = require('./closure-task');\n+const typescriptTask = require('./typescript-task');\n+const { arrowTask, arrowTSTask } = require('./arrow-task');\n+\n+const buildTask = ((cache) => memoizeTask(cache, function build(target, format, ...args) {\n+    return target === npmPkgName               ? arrowTask(target, format, ...args)()\n+         : target === `ts`                     ? arrowTSTask(target, format, ...args)()\n+         : format === `umd` ? target === `es5` ? closureTask(target, format, ...args)()\n+                                               : uglifyTask(target, format, ...args)()\n+                                               : typescriptTask(target, format, ...args)();\n+}))({});\n+\n+module.exports = buildTask;\n+module.exports.buildTask = buildTask;\n\\ No newline at end of file\ndiff --git a/js/gulp/clean-task.js b/js/gulp/clean-task.js\nnew file mode 100644\nindex 000000000..d6c90f463\n--- /dev/null\n+++ b/js/gulp/clean-task.js\n@@ -0,0 +1,31 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+const del = require('del');\n+const { targetDir } = require('./util');\n+const { memoizeTask } = require('./memoize-task');\n+const { Observable, ReplaySubject } = require('rxjs');\n+\n+const cleanTask = ((cache) => memoizeTask(cache, function clean(target, format) {\n+    return Observable\n+        .from(del(`${targetDir(target, format)}/**`))\n+        .catch((e) => Observable.empty())\n+        .multicast(new ReplaySubject()).refCount();\n+}))({});\n+\n+module.exports = cleanTask;\n+module.exports.cleanTask = cleanTask;\n\\ No newline at end of file\ndiff --git a/js/gulp/closure-task.js b/js/gulp/closure-task.js\nnew file mode 100644\nindex 000000000..950bf40e2\n--- /dev/null\n+++ b/js/gulp/closure-task.js\n@@ -0,0 +1,91 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+const {\n+    targetDir,\n+    mainExport,\n+    gCCLanguageNames,\n+    UMDSourceTargets,\n+    observableFromStreams\n+} = require('./util');\n+\n+const gulp = require('gulp');\n+const path = require('path');\n+const sourcemaps = require('gulp-sourcemaps');\n+const { memoizeTask } = require('./memoize-task');\n+const { Observable, ReplaySubject } = require('rxjs');\n+const closureCompiler = require('google-closure-compiler').gulp();\n+\n+const closureTask = ((cache) => memoizeTask(cache, function closure(target, format) {\n+    const src = targetDir(target, `cls`);\n+    const out = targetDir(target, format);\n+    const entry = path.join(src, mainExport);\n+    const externs = path.join(src, `${mainExport}.externs`);\n+    return observableFromStreams(\n+        gulp.src([\n+/*   external libs first --> */ `closure-compiler-scripts/*.js`,\n+/*    then sources glob --> */ `${src}/**/*.js`,\n+/* and exclusions last --> */ `!${src}/format/*.js`,\n+                              `!${src}/Arrow.externs.js`,\n+        ], { base: `./` }),\n+        sourcemaps.init(),\n+        closureCompiler(createClosureArgs(entry, externs)),\n+        // rename the sourcemaps from *.js.map files to *.min.js.map\n+        sourcemaps.write(`.`, { mapFile: (mapPath) => mapPath.replace(`.js.map`, `.${target}.min.js.map`) }),\n+        gulp.dest(out)\n+    ).publish(new ReplaySubject()).refCount();\n+}))({});\n+\n+const createClosureArgs = (entry, externs) => ({\n+    third_party: true,\n+    warning_level: `QUIET`,\n+    dependency_mode: `LOOSE`,\n+    rewrite_polyfills: false,\n+    externs: `${externs}.js`,\n+    entry_point: `${entry}.js`,\n+    // formatting: `PRETTY_PRINT`,\n+    compilation_level: `ADVANCED`,\n+    assume_function_wrapper: true,\n+    js_output_file: `${mainExport}.js`,\n+    language_in: gCCLanguageNames[`es2015`],\n+    language_out: gCCLanguageNames[`es5`],\n+    output_wrapper:\n+`// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+(function (global, factory) {\n+    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n+    typeof define === 'function' && define.amd ? define(['exports'], factory) :\n+    (factory(global.Arrow = global.Arrow || {}));\n+}(this, (function (exports) {%output%}.bind(this))));`\n+});\n+\n+module.exports = closureTask;\n+module.exports.closureTask = closureTask;\ndiff --git a/js/gulp/memoize-task.js b/js/gulp/memoize-task.js\nnew file mode 100644\nindex 000000000..0b0fc843c\n--- /dev/null\n+++ b/js/gulp/memoize-task.js\n@@ -0,0 +1,30 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+const { taskName } = require('./util');\n+\n+const memoizeTask = ((cache, taskFn) => ((target, format, ...args) => {\n+    // Give the memoized fn a displayName so gulp's output is easier to follow.\n+    const fn = () => (\n+      cache[taskName(target, format)] || (\n+      cache[taskName(target, format)] = taskFn(target, format, ...args)));\n+    fn.displayName = `${taskFn.name || ``}:${taskName(target, format, ...args)}:task`;\n+    return fn;\n+}));\n+\n+module.exports = memoizeTask;\n+module.exports.memoizeTask = memoizeTask;\n\\ No newline at end of file\ndiff --git a/js/gulp/package-task.js b/js/gulp/package-task.js\nnew file mode 100644\nindex 000000000..7b4b15a33\n--- /dev/null\n+++ b/js/gulp/package-task.js\n@@ -0,0 +1,75 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+const {\n+    metadataFiles, packageJSONFields,\n+    mainExport, npmPkgName, npmOrgName,\n+    targetDir, packageName, observableFromStreams\n+} = require('./util');\n+\n+const gulp = require('gulp');\n+const { memoizeTask } = require('./memoize-task');\n+const { Observable, ReplaySubject } = require('rxjs');\n+const gulpJsonTransform = require('gulp-json-transform');\n+\n+const packageTask = ((cache) => memoizeTask(cache, function bundle(target, format) {\n+    const out = targetDir(target, format);\n+    const jsonTransform = gulpJsonTransform(target === npmPkgName ? createMainPackageJson(target, format) :\n+                                            target === `ts`       ? createTypeScriptPackageJson(target, format)\n+                                                                  : createScopedPackageJSON(target, format),\n+                                            2);\n+    return Observable.forkJoin(\n+      observableFromStreams(gulp.src(metadataFiles), gulp.dest(out)), // copy metadata files\n+      observableFromStreams(gulp.src(`package.json`), jsonTransform, gulp.dest(out)) // write packageJSONs\n+    ).publish(new ReplaySubject()).refCount();\n+}))({});\n+\n+module.exports = packageTask;\n+module.exports.packageTask = packageTask;\n+\n+const createMainPackageJson = (target, format) => (orig) => ({\n+    ...createTypeScriptPackageJson(target, format)(orig),\n+    name: npmPkgName,\n+    main: mainExport,\n+    module: `${mainExport}.mjs`,\n+    browser: `${mainExport}.es5.min.js`,\n+    [`browser:es2015`]: `${mainExport}.es2015.min.js`,\n+    [`@std/esm`]: { esm: `mjs` },\n+});\n+  \n+const createTypeScriptPackageJson = (target, format) => (orig) => ({\n+    ...createScopedPackageJSON(target, format)(orig),\n+    main: `${mainExport}.ts`, types: `${mainExport}.ts`\n+});\n+  \n+const createScopedPackageJSON = (target, format) => (({ name, ...orig }) =>\n+    conditionallyAddStandardESMEntry(target, format)(\n+      packageJSONFields.reduce(\n+        (xs, key) => ({ ...xs, [key]: xs[key] || orig[key] }),\n+        { name: `${npmOrgName}/${packageName(target, format)}`,\n+          version: undefined, main: `${mainExport}.js`, types: `${mainExport}.d.ts`,\n+          browser: undefined, [`browser:es2015`]: undefined, module: undefined, [`@std/esm`]: undefined }\n+      )\n+    )\n+);\n+  \n+const conditionallyAddStandardESMEntry = (target, format) => (packageJSON) => (\n+    format !== `esm`\n+      ? packageJSON\n+      : { ...packageJSON, [`@std/esm`]: { esm: `js` } }\n+);\n+  \n\\ No newline at end of file\ndiff --git a/js/gulp/test-task.js b/js/gulp/test-task.js\nnew file mode 100644\nindex 000000000..b46b2bb14\n--- /dev/null\n+++ b/js/gulp/test-task.js\n@@ -0,0 +1,44 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+const path = require('path');\n+const child_process = require(`child_process`);\n+const { argv } = require('./argv');\n+const { memoizeTask } = require('./memoize-task');\n+\n+const jestArgv = [];\n+argv.update && jestArgv.push(`-u`);\n+argv.verbose && jestArgv.push(`--verbose`);\n+argv.coverage && jestArgv.push(`--coverage`);\n+\n+const debugArgv = [`--runInBand`, `--env`, `jest-environment-node-debug`];\n+const jest = require.resolve(path.join(`..`, `node_modules`, `.bin`, `jest`));\n+\n+const testTask = ((cache, execArgv, testOptions) => memoizeTask(cache, function test(target, format, debug = false) {\n+    const opts = Object.assign({}, testOptions);\n+    const args = !debug ? [...execArgv] : [...debugArgv, ...execArgv];\n+    opts.env = Object.assign({}, opts.env, { TEST_TARGET: target, TEST_MODULE: format });\n+    return !debug ?\n+        child_process.spawn(jest, args, opts) :\n+        child_process.exec(`node --inspect-brk ${jest} ${args.join(` `)}`, opts);\n+}))({}, jestArgv, {\n+    env: Object.assign({}, process.env),\n+    stdio: [`ignore`, `inherit`, `inherit`],\n+});\n+\n+module.exports = testTask;\n+module.exports.testTask = testTask;\ndiff --git a/js/gulp/typescript-task.js b/js/gulp/typescript-task.js\nnew file mode 100644\nindex 000000000..2c6684666\n--- /dev/null\n+++ b/js/gulp/typescript-task.js\n@@ -0,0 +1,43 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+const {\n+    targetDir, tsconfigName, observableFromStreams\n+} = require('./util');\n+\n+const gulp = require('gulp');\n+const path = require('path');\n+const ts = require(`gulp-typescript`);\n+const sourcemaps = require('gulp-sourcemaps');\n+const { memoizeTask } = require('./memoize-task');\n+const { Observable, ReplaySubject } = require('rxjs');\n+\n+const typescriptTask = ((cache) => memoizeTask(cache, function typescript(target, format) {\n+    const out = targetDir(target, format);\n+    const tsconfigFile = `tsconfig.${tsconfigName(target, format)}.json`;\n+    const tsProject = ts.createProject(path.join(`tsconfig`, tsconfigFile), { typescript: require(`typescript`) });\n+    const { stream: { js, dts } } = observableFromStreams(\n+      tsProject.src(), sourcemaps.init(),\n+      tsProject(ts.reporter.fullReporter(true))\n+    );\n+    const writeDTypes = observableFromStreams(dts, gulp.dest(out));\n+    const writeJS = observableFromStreams(js, sourcemaps.write(), gulp.dest(out));\n+    return Observable.forkJoin(writeDTypes, writeJS).publish(new ReplaySubject()).refCount();\n+}))({});\n+  \n+module.exports = typescriptTask;\n+module.exports.typescriptTask = typescriptTask;\n\\ No newline at end of file\ndiff --git a/js/gulp/uglify-task.js b/js/gulp/uglify-task.js\nnew file mode 100644\nindex 000000000..804d45045\n--- /dev/null\n+++ b/js/gulp/uglify-task.js\n@@ -0,0 +1,113 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+const {\n+    targetDir,\n+    mainExport,\n+    ESKeywords,\n+    UMDSourceTargets,\n+    uglifyLanguageNames,\n+    observableFromStreams\n+} = require('./util');\n+\n+const path = require('path');\n+const webpack = require(`webpack`);\n+const { memoizeTask } = require('./memoize-task');\n+const { Observable, ReplaySubject } = require('rxjs');\n+const UglifyJSPlugin = require(`uglifyjs-webpack-plugin`);\n+const esmRequire = require(`@std/esm`)(module, { cjs: true, esm: `js` });\n+\n+const uglifyTask = ((cache, commonConfig) => memoizeTask(cache, function uglifyJS(target, format) {\n+\n+    const sourceTarget = UMDSourceTargets[target];\n+    const PublicNames = reservePublicNames(sourceTarget, `cls`);\n+    const out = targetDir(target, format), src = targetDir(sourceTarget, `cls`);\n+\n+    const targetConfig = { ...commonConfig,\n+        output: { ...commonConfig.output,\n+             path: path.resolve(`./${out}`) } };\n+\n+    const webpackConfigs = [\n+        [mainExport, PublicNames]\n+    ].map(([entry, reserved]) => ({\n+        ...targetConfig,\n+        name: entry,\n+        entry: { [entry]: path.resolve(`${src}/${entry}.js`) },\n+        plugins: [\n+            ...(targetConfig.plugins || []),\n+            new webpack.SourceMapDevToolPlugin({\n+                filename: `[name].${target}.min.js.map`,\n+                moduleFilenameTemplate: ({ resourcePath }) =>\n+                    resourcePath\n+                        .replace(/\\s/, `_`)\n+                        .replace(/\\.\\/node_modules\\//, ``)\n+            }),\n+            new UglifyJSPlugin({\n+                sourceMap: true,\n+                uglifyOptions: {\n+                    ecma: uglifyLanguageNames[target],\n+                    compress: { unsafe: true },\n+                    output: { comments: false, beautify: false },\n+                    mangle: { eval: true, safari10: true, // <-- Works around a Safari 10 bug: // https://github.com/mishoo/UglifyJS2/issues/1753\n+                        properties: { reserved, keep_quoted: true }\n+                    }\n+                },\n+            })\n+        ]\n+    }));\n+\n+    const compilers = webpack(webpackConfigs);\n+    return Observable\n+            .bindNodeCallback(compilers.run.bind(compilers))()\n+            .multicast(new ReplaySubject()).refCount();\n+}))({}, {\n+    resolve: { mainFields: [`module`, `main`] },\n+    module: { rules: [{ test: /\\.js$/, enforce: `pre`, use: [`source-map-loader`] }] },\n+    output: { filename: '[name].js', library: mainExport, libraryTarget: `umd`, umdNamedDefine: true },\n+});\n+\n+module.exports = uglifyTask;\n+module.exports.uglifyTask = uglifyTask;\n+\n+const reservePublicNames = ((ESKeywords) => function reservePublicNames(target, format) {\n+    const publicModulePath = `../${targetDir(target, format)}/${mainExport}.js`;\n+    return [\n+        ...ESKeywords,\n+        ...reserveExportedNames(esmRequire(publicModulePath))\n+    ];\n+})(ESKeywords);\n+\n+// Reflect on the Arrow modules to come up with a list of keys to save from Uglify's\n+// mangler. Assume all the non-inherited static and prototype members of the Arrow\n+// module and its direct exports are public, and should be preserved through minification.\n+const reserveExportedNames = (entryModule) => (\n+    Object\n+        .getOwnPropertyNames(entryModule)\n+        .filter((name) => (\n+            typeof entryModule[name] === `object` ||\n+            typeof entryModule[name] === `function`\n+        ))\n+        .map((name) => [name, entryModule[name]])\n+        .reduce((reserved, [name, value]) => {\n+            const fn = function() {};\n+            const ownKeys = value && Object.getOwnPropertyNames(value) || [];\n+            const protoKeys = typeof value === `function` && Object.getOwnPropertyNames(value.prototype) || [];\n+            const publicNames = [...ownKeys, ...protoKeys].filter((x) => x !== `default` && x !== `undefined` && !(x in fn));\n+            return [...reserved, name, ...publicNames];\n+        }, []\n+    )\n+);\ndiff --git a/js/gulp/util.js b/js/gulp/util.js\nnew file mode 100644\nindex 000000000..21ffc3127\n--- /dev/null\n+++ b/js/gulp/util.js\n@@ -0,0 +1,152 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+const path = require(`path`);\n+const pump = require(`pump`);\n+const { Observable, ReplaySubject } = require('rxjs');\n+\n+const mainExport = `Arrow`;\n+const npmPkgName = `apache-arrow`;\n+const npmOrgName = `@${npmPkgName}`;\n+\n+const releasesRootDir = `targets`;\n+const knownTargets = [`es5`, `es2015`, `esnext`];\n+const knownModules = [`cjs`, `esm`, `cls`, `umd`];\n+const moduleFormatsToSkipCombosOf = { cls: true };\n+const metadataFiles = [`LICENSE`, `README.md`];\n+const packageJSONFields = [\n+  `version`, `license`, `description`,\n+  `author`, `homepage`, `repository`,\n+  `bugs`, `keywords`,  `dependencies`\n+];\n+\n+// see: https://github.com/google/closure-compiler/blob/c1372b799d94582eaf4b507a4a22558ff26c403c/src/com/google/javascript/jscomp/CompilerOptions.java#L2988\n+const gCCLanguageNames = {\n+    es5: `ECMASCRIPT5`,\n+ es2015: `ECMASCRIPT_2015`,\n+ es2016: `ECMASCRIPT_2016`,\n+ es2017: `ECMASCRIPT_2017`,\n+ esnext: `ECMASCRIPT_NEXT`\n+};\n+\n+const UMDSourceTargets = {\n+    es5: `es5`,\n+ es2015: `es2015`,\n+ es2016: `es2015`,\n+ es2017: `es2015`,\n+ esnext: `es2015`\n+};\n+\n+const uglifyLanguageNames = {\n+    es5: 5, es2015: 6,\n+ es2016: 7, es2017: 8,\n+ esnext: 8 // <--- ?\n+};\n+\n+// ES7+ keywords Uglify shouldn't mangle\n+// Hardcoded here since some are from ES7+, others are\n+// only defined in interfaces, so difficult to get by reflection.\n+const ESKeywords = [\n+    // PropertyDescriptors\n+    `configurable`, `enumerable`,\n+    // IteratorResult, Symbol.asyncIterator\n+    `done`, `value`, `Symbol.asyncIterator`, `asyncIterator`,\n+    // AsyncObserver\n+    `values`, `hasError`, `hasCompleted`,`errorValue`, `closed`,\n+    // Observable/Subscription/Scheduler\n+    `next`, `error`, `complete`, `subscribe`, `unsubscribe`, `isUnsubscribed`,\n+    // EventTarget\n+    `addListener`, `removeListener`, `addEventListener`, `removeEventListener`,\n+    // Arrow properties\n+    `low`, `high`, `data`, `index`, `field`, `validity`, `columns`, `fieldNode`, `subarray`,\n+];\n+\n+function taskName(target, format) {\n+    return !format ? target : `${target}:${format}`;\n+}\n+\n+function packageName(target, format) {\n+    return !format ? target : `${target}-${format}`;\n+}\n+\n+function tsconfigName(target, format) {\n+    return !format ? target : `${target}.${format}`;\n+}\n+\n+function targetDir(target, format) {\n+    return path.join(releasesRootDir, ...(!format ? [target] : [target, format]));\n+}\n+\n+function logAndDie(e) {\n+    if (e) {\n+        console.error(e);\n+        process.exit(1);\n+    }\n+}\n+\n+function observableFromStreams(...streams) {\n+    const pumped = streams.length <= 1 ? streams[0]\n+        : pump(...streams, logAndDie);\n+    const fromEvent = Observable.fromEvent.bind(null, pumped);\n+    const streamObs = fromEvent(`data`)\n+               .merge(fromEvent(`error`).flatMap((e) => Observable.throw(e)))\n+           .takeUntil(fromEvent(`end`).merge(fromEvent(`close`)))\n+           .defaultIfEmpty(`empty stream`)\n+           .multicast(new ReplaySubject()).refCount();\n+    streamObs.stream = pumped;\n+    streamObs.observable = streamObs;\n+    return streamObs;\n+}\n+\n+function* combinations(_targets, _modules) {\n+\n+    const targets = known(knownTargets, _targets || [`all`]);\n+    const modules = known(knownModules, _modules || [`all`]);\n+\n+    if (_targets[0] === `all` && _modules[0] === `all`) {\n+        yield [`ts`, ``];\n+        yield [npmPkgName, ``];\n+    }        \n+    \n+    for (const format of modules) {\n+        for (const target of targets) {\n+            yield [target, format];\n+        }\n+    }\n+\n+    function known(known, values) {\n+        return ~values.indexOf(`all`)\n+            ? known\n+            : Object.keys(\n+                values.reduce((map, arg) => ((\n+                    (known.indexOf(arg) !== -1) &&\n+                    (map[arg.toLowerCase()] = true)\n+                    || true) && map\n+                ), {})\n+            ).sort((a, b) => known.indexOf(a) - known.indexOf(b));\n+    }\n+}\n+    \n+module.exports = {\n+\n+    mainExport, npmPkgName, npmOrgName, metadataFiles, packageJSONFields,\n+\n+    knownTargets, knownModules, moduleFormatsToSkipCombosOf,\n+    ESKeywords, gCCLanguageNames, UMDSourceTargets, uglifyLanguageNames,\n+\n+    taskName, packageName, tsconfigName, targetDir, combinations, observableFromStreams,\n+};\n\\ No newline at end of file\ndiff --git a/js/gulpfile.js b/js/gulpfile.js\nindex 9f8e564bd..4cf0342c3 100644\n--- a/js/gulpfile.js\n+++ b/js/gulpfile.js\n@@ -15,278 +15,92 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-const del = require(`del`);\n-const gulp = require(`gulp`);\n-const path = require(`path`);\n-const pump = require(`pump`);\n-const ts = require(`gulp-typescript`);\n-const streamMerge = require(`merge2`);\n-const sourcemaps = require(`gulp-sourcemaps`);\n-const child_process = require(`child_process`);\n-const gulpJsonTransform = require(`gulp-json-transform`);\n-const closureCompiler = require(`google-closure-compiler`).gulp();\n-\n-const knownTargets = [`es5`, `es2015`, `esnext`];\n-const knownModules = [`cjs`, `esm`, `cls`, `umd`];\n-\n-// see: https://github.com/google/closure-compiler/blob/c1372b799d94582eaf4b507a4a22558ff26c403c/src/com/google/javascript/jscomp/CompilerOptions.java#L2988\n-const gCCTargets = {\n-    es5: `ECMASCRIPT5`,\n-    es2015: `ECMASCRIPT_2015`,\n-    es2016: `ECMASCRIPT_2016`,\n-    es2017: `ECMASCRIPT_2017`,\n-    esnext: `ECMASCRIPT_NEXT`\n-};\n-\n-const tsProjects = [];\n-const argv = require(`command-line-args`)([\n-    { name: `all`, alias: `a`, type: Boolean },\n-    { name: 'update', alias: 'u', type: Boolean },\n-    { name: 'verbose', alias: 'v', type: Boolean },\n-    { name: `target`, type: String, defaultValue: `` },\n-    { name: `module`, type: String, defaultValue: `` },\n-    { name: `coverage`, type: Boolean, defaultValue: false },\n-    { name: `targets`, alias: `t`, type: String, multiple: true, defaultValue: [] },\n-    { name: `modules`, alias: `m`, type: String, multiple: true, defaultValue: [] }\n-]);\n-\n-const { targets, modules } = argv;\n-\n-argv.target && !targets.length && targets.push(argv.target);\n-argv.module && !modules.length && modules.push(argv.module);\n-(argv.all || !targets.length) && targets.push(`all`);\n-(argv.all || !modules.length) && modules.push(`all`);\n-\n-for (const [target, format] of combinations([`all`, `all`])) {\n-    const combo = `${target}:${format}`;\n-    gulp.task(`test:${combo}`, gulp.series(testTask(target, format, combo, `targets/${target}/${format}`)));\n-    gulp.task(`clean:${combo}`, gulp.series(cleanTask(target, format, combo, `targets/${target}/${format}`)));\n-    gulp.task(`build:${combo}`, gulp.series(buildTask(target, format, combo, `targets/${target}/${format}`)));\n-    gulp.task(`bundle:${combo}`, gulp.series(bundleTask(target, format, combo, `targets/${target}/${format}`)));\n-    gulp.task(`package:${combo}`, gulp.series(packageTask(target, format, combo, `targets/${target}/${format}`)));\n-    gulp.task(`test:debug:${combo}`, gulp.series(testTask(target, format, combo, `targets/${target}/${format}`, true)));\n+const del = require('del');\n+const gulp = require('gulp');\n+const path = require('path');\n+const { Observable } = require('rxjs');\n+const testsTask = require('./gulp/test-task');\n+const buildTask = require('./gulp/build-task');\n+const cleanTask = require('./gulp/clean-task');\n+const packageTask = require('./gulp/package-task');\n+const { targets, modules } = require('./gulp/argv');\n+const {\n+    targetDir,\n+    taskName, combinations,\n+    knownTargets, knownModules,\n+    npmPkgName, UMDSourceTargets,\n+    moduleFormatsToSkipCombosOf\n+} = require('./gulp/util');\n+\n+for (const [target, format] of combinations([`all`], [`all`])) {\n+    const task = taskName(target, format);\n+    gulp.task(`clean:${task}`, cleanTask(target, format));\n+    gulp.task( `test:${task}`, testsTask(target, format));\n+    gulp.task(`debug:${task}`, testsTask(target, format, true));\n+    gulp.task(`build:${task}`, gulp.series(`clean:${task}`,\n+                                            buildTask(target, format),\n+                                            packageTask(target, format)));\n }\n \n-gulp.task(`test`, gulp.series(runTaskCombos(`test`)));\n-gulp.task(`clean`, gulp.parallel(runTaskCombos(`clean`)));\n-gulp.task(`build`, gulp.parallel(runTaskCombos(`build`)));\n-gulp.task(`bundle`, gulp.parallel(runTaskCombos(`bundle`)));\n-gulp.task(`package`, gulp.parallel(runTaskCombos(`package`)));\n-gulp.task(`test:debug`, gulp.series(runTaskCombos(`test:debug`)));\n-gulp.task(`default`, gulp.task(`package`));\n-\n-function runTaskCombos(name) {\n-    const combos = [];\n+// The UMD bundles build temporary es5/6/next targets via TS,\n+// then run the TS source through either closure-compiler or\n+// uglify, so we special case that here.\n+knownTargets.forEach((target) =>\n+    gulp.task(`build:${target}:umd`,\n+        gulp.series(\n+            gulp.parallel(\n+                cleanTask(target, `umd`),\n+                cleanTask(UMDSourceTargets[target], `cls`),\n+            ),\n+            buildTask(UMDSourceTargets[target], `cls`),\n+            buildTask(target, `umd`), packageTask(target, `umd`)\n+        )\n+    )\n+);\n+\n+// The main \"apache-arrow\" module builds the es5/cjs, es5/umd,\n+// es2015/esm, es2015/umd, and ts targets, then copies and\n+// renames the compiled output into the apache-arrow folder\n+gulp.task(`build:${npmPkgName}`,\n+    gulp.series(\n+        cleanTask(npmPkgName),\n+        gulp.parallel(\n+            `build:${taskName(`es5`, `cjs`)}`,\n+            `build:${taskName(`es5`, `umd`)}`,\n+            `build:${taskName(`es2015`, `esm`)}`,\n+            `build:${taskName(`es2015`, `umd`)}`\n+        ),\n+        buildTask(npmPkgName), packageTask(npmPkgName)\n+    )\n+);\n+\n+\n+function gulpConcurrent(tasks) {\n+    return () => Observable.bindCallback((tasks, cb) => gulp.parallel(tasks)(cb))(tasks);\n+}\n+  \n+const buildConcurrent = (tasks) => () =>\n+    gulpConcurrent(tasks)()\n+        .concat(Observable\n+            .defer(() => Observable\n+            .merge(...knownTargets.map((target) =>\n+                del(`${targetDir(target, `cls`)}/**`)))));\n+  \n+gulp.task( `test`, gulp.series(getTasks(`test`)));\n+gulp.task(`debug`, gulp.series(getTasks(`debug`)));\n+gulp.task(`clean`, gulp.parallel(getTasks(`clean`)));\n+gulp.task(`build`, buildConcurrent(getTasks(`build`)));\n+gulp.task(`default`,  gulp.series(`build`, `test`));\n+  \n+function getTasks(name) {\n+    const tasks = [];\n+    if (targets.indexOf(`ts`) !== -1) tasks.push(`${name}:ts`);\n+    if (targets.indexOf(npmPkgName) !== -1) tasks.push(`${name}:${npmPkgName}`);\n     for (const [target, format] of combinations(targets, modules)) {\n-        if (format === `cls`) {\n+        if (moduleFormatsToSkipCombosOf[format] && name === `test`) {\n             continue;\n         }\n-        combos.push(`${name}:${target}:${format}`);\n-    }\n-    return combos;\n-}\n-\n-function cleanTask(target, format, taskName, outDir) {\n-    return function cleanTask() {\n-        const globs = [`${outDir}/**`];\n-        if (target === `es5` && format === `cjs`) {\n-            globs.push(`types`, `typings`);\n-        }\n-        return del(globs);\n-    };\n-}\n-\n-function buildTask(target, format, taskName, outDir) {\n-    return format === `umd`\n-        ? closureTask(target, format, taskName, outDir)\n-        : typescriptTask(target, format, taskName, outDir);\n-}\n-\n-function bundleTask(target, format, taskName, outDir) {\n-    return function bundleTask() {\n-        return streamMerge([\n-            pump(gulp.src([`LICENSE`, `README.md`]), gulp.dest(outDir), onError),\n-            pump(\n-                gulp.src(`package.json`),\n-                gulpJsonTransform((orig) => [\n-                    `version`, `description`, `keywords`,\n-                    `repository`, `author`, `homepage`, `bugs`, `license`,\n-                    `dependencies`, `peerDependencies`\n-                ].reduce((copy, key) => (\n-                    (copy[key] = orig[key]) && copy || copy\n-                ), {\n-                    main: `Arrow.js`,\n-                    types: `Arrow.d.ts`,\n-                    typings: `Arrow.d.ts`,\n-                    name: `@apache-arrow/${target}-${format}`\n-                }), 2),\n-                gulp.dest(outDir),\n-                onError\n-            )\n-        ]);\n-    }\n-}\n-\n-function packageTask(target, format, taskName, outDir) {\n-    return [`build:${taskName}`, `bundle:${taskName}`];\n-}\n-\n-function testTask(target, format, taskName, outDir, debug) {\n-    const jestOptions = !debug ? [] : [\n-        `--runInBand`, `--env`, `jest-environment-node-debug`];\n-    argv.update && jestOptions.unshift(`-u`);\n-    argv.verbose && jestOptions.unshift(`--verbose`);\n-    argv.coverage && jestOptions.unshift(`--coverage`);\n-    const jestPath = `./node_modules/.bin/jest`;\n-    const debugOpts = jestOptions.join(' ');\n-    const spawnOptions = {\n-        stdio: [`ignore`, `inherit`, `inherit`],\n-        env: Object.assign({}, process.env, {\n-            TEST_TARGET: target, TEST_MODULE: format\n-        })\n-    };\n-    return function testTask() {\n-        return !debug ?\n-            child_process.spawn(jestPath, jestOptions, spawnOptions) :\n-            child_process.exec(`node --inspect-brk ${jestPath} ${debugOpts}`, spawnOptions);\n-    }\n-}\n-\n-function closureTask(target, format, taskName, outDir) {\n-    const clsTarget = `es5`;\n-    const googleRoot = `targets/${clsTarget}/cls`;\n-    const languageIn = clsTarget === `es5` ? `es2015` : clsTarget;\n-    return [\n-        [`clean:${taskName}`, `build:${clsTarget}:cls`],\n-        function closureTask() {\n-            return closureStream(\n-                closureSrcs(),\n-                closureCompiler(closureArgs())\n-            ).on('end', () => del([`targets/${target}/cls/**`]));\n-        }\n-    ];\n-    function closureSrcs() {\n-        return gulp.src([\n-            `closure-compiler-scripts/*.js`,\n-            `${googleRoot}/**/*.js`,\n-            `!${googleRoot}/format/*.js`,\n-            `!${googleRoot}/Arrow.externs.js`,\n-        ], { base: `./` });\n-    }\n-    function closureStream(sources, compiler) {\n-        const streams = [\n-            sources,\n-            sourcemaps.init(),\n-            compiler,\n-            sourcemaps.write('.'),\n-            gulp.dest(outDir)\n-        ];\n-        // copy the ES5 UMD bundle to dist\n-        if (target === `es5`) {\n-            streams.push(gulp.dest(`dist`));\n-        }\n-        return pump(...streams, onError);\n-    }\n-    function closureArgs() {\n-        return {\n-            third_party: true,\n-            externs: `${googleRoot}/Arrow.externs.js`,\n-            warning_level: `QUIET`,\n-            dependency_mode: `LOOSE`,\n-            rewrite_polyfills: false,\n-            // formatting: `PRETTY_PRINT`,\n-            compilation_level: `ADVANCED`,\n-            assume_function_wrapper: true,\n-            js_output_file: `Arrow.js`,\n-            language_in: gCCTargets[languageIn],\n-            language_out: gCCTargets[clsTarget],\n-            entry_point: `${googleRoot}/Arrow.js`,\n-            output_wrapper:\n-`// Licensed to the Apache Software Foundation (ASF) under one\n-// or more contributor license agreements.  See the NOTICE file\n-// distributed with this work for additional information\n-// regarding copyright ownership.  The ASF licenses this file\n-// to you under the Apache License, Version 2.0 (the\n-// \"License\"); you may not use this file except in compliance\n-// with the License.  You may obtain a copy of the License at\n-//\n-//   http://www.apache.org/licenses/LICENSE-2.0\n-//\n-// Unless required by applicable law or agreed to in writing,\n-// software distributed under the License is distributed on an\n-// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-// KIND, either express or implied.  See the License for the\n-// specific language governing permissions and limitations\n-// under the License.\n-(function (global, factory) {\n-    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n-    typeof define === 'function' && define.amd ? define(['exports'], factory) :\n-    (factory(global.Arrow = global.Arrow || {}));\n-}(this, (function (exports) {%output%}.bind(this))));`\n-        };\n-    }\n-}\n-\n-function typescriptTask(target, format, taskName, outDir) {\n-    return [\n-        [`clean:${taskName}`],\n-        function typescriptTask() {\n-            const tsconfigPath = `tsconfig/tsconfig.${target}.${format}.json`;\n-            let { js, dts } = tsProjects.find((p) => p.target === target && p.format === format) || {};\n-            if (!js || !dts) {\n-                let tsProject = ts.createProject(tsconfigPath);\n-                ({ js, dts } = pump(\n-                    tsProject.src(),\n-                    sourcemaps.init(),\n-                    tsProject(ts.reporter.fullReporter(true)),\n-                    onError\n-                ));\n-                dts = [dts, gulp.dest(outDir)];\n-                js = [js, sourcemaps.write(), gulp.dest(outDir)];\n-                // copy types to the root\n-                if (target === `es5` && format === `cjs`) {\n-                    dts.push(gulp.dest(`types`));\n-                }\n-                tsProjects.push({\n-                    target, format,\n-                    js: js = pump(...js, onError),\n-                    dts: dts = pump(...dts, onError)\n-                });\n-            }\n-            return streamMerge([ dts, js ]);\n-        }\n-    ];\n-}\n-\n-function* combinations(_targets, _modules) {\n-\n-    const targets = known(knownTargets, _targets || [`all`]);\n-    const modules = known(knownModules, _modules || [`all`]);\n-\n-    for (const format of modules) {\n-        for (const target of targets) {\n-            yield [target, format];\n-        }\n-    }\n-\n-    function known(known, values) {\n-        return ~values.indexOf(`all`)\n-            ? known\n-            : Object.keys(\n-                values.reduce((map, arg) => ((\n-                    (known.indexOf(arg) !== -1) &&\n-                    (map[arg.toLowerCase()] = true)\n-                    || true) && map\n-                ), {})\n-            ).sort((a, b) => known.indexOf(a) - known.indexOf(b));\n+        tasks.push(`${name}:${taskName(target, format)}`);\n     }\n+    return tasks.length && tasks || [(done) => done()];\n }\n-\n-function onError(err) {\n-    if (typeof err === 'number') {\n-        process.exit(err);\n-    } else if (err) {\n-        console.error(err.stack || err.toString());\n-        process.exit(1);\n-    }\n-}\n\\ No newline at end of file\ndiff --git a/js/package.json b/js/package.json\nindex 03687a8b2..ba93a3468 100644\n--- a/js/package.json\n+++ b/js/package.json\n@@ -14,18 +14,18 @@\n     \"test\": \"gulp test\",\n     \"build\": \"gulp build\",\n     \"clean\": \"gulp clean\",\n+    \"debug\": \"gulp debug\",\n     \"bundle\": \"gulp bundle\",\n     \"package\": \"gulp package\",\n     \"perf\": \"node ./perf/index.js\",\n-    \"test:debug\": \"gulp test:debug\",\n     \"test:coverage\": \"gulp test -t esnext -m esm --coverage\",\n     \"validate\": \"npm-run-all clean lint build test bundle\",\n     \"lerna:publish\": \"lerna exec --bail=false npm publish\",\n     \"prepublishOnly\": \"sh ./prepublish.sh\",\n     \"doc\": \"shx rm -rf ./doc && esdoc\",\n     \"lint\": \"npm-run-all -p lint:*\",\n-    \"lint:src\": \"tslint --fix --type-check -p tsconfig.json -c tslint.json \\\"src/**/*.ts\\\"\",\n-    \"lint:test\": \"tslint --fix --type-check -p test/tsconfig.json -c tslint.json \\\"test/**/*.ts\\\"\"\n+    \"lint:src\": \"tslint --fix --project -p tsconfig.json -c tslint.json \\\"src/**/*.ts\\\"\",\n+    \"lint:test\": \"tslint --fix --project -p test/tsconfig.json -c tslint.json \\\"test/**/*.ts\\\"\"\n   },\n   \"repository\": {\n     \"type\": \"git\",\n@@ -50,7 +50,6 @@\n     \"README.md\"\n   ],\n   \"peerDependencies\": {\n-    \"tslib\": \"~1.7.1\",\n     \"command-line-usage\": \"4.0.1\"\n   },\n   \"dependencies\": {\n@@ -58,38 +57,44 @@\n     \"text-encoding\": \"0.6.4\"\n   },\n   \"devDependencies\": {\n-    \"@types/flatbuffers\": \"1.6.4\",\n-    \"@types/jest\": \"20.0.8\",\n-    \"@types/node\": \"^8.0.24\",\n+    \"@std/esm\": \"0.12.5\",\n+    \"@types/flatbuffers\": \"1.6.5\",\n+    \"@types/jest\": \"21.1.5\",\n+    \"@types/node\": \"8.0.47\",\n     \"@types/text-encoding\": \"0.0.32\",\n     \"benchmark\": \"2.1.4\",\n-    \"coveralls\": \"2.13.1\",\n     \"command-line-args\": \"4.0.7\",\n+    \"coveralls\": \"3.0.0\",\n     \"del\": \"3.0.0\",\n     \"esdoc\": \"1.0.3\",\n     \"esdoc-standard-plugin\": \"1.0.0\",\n     \"google-closure-compiler\": \"20170910.0.0\",\n     \"gulp\": \"github:gulpjs/gulp#4.0\",\n-    \"gulp-json-transform\": \"0.4.2\",\n+    \"gulp-json-transform\": \"0.4.5\",\n+    \"gulp-rename\": \"1.2.2\",\n     \"gulp-sourcemaps\": \"2.6.1\",\n-    \"gulp-typescript\": \"3.2.2\",\n-    \"jest\": \"21.1.0\",\n+    \"gulp-typescript\": \"3.2.3\",\n+    \"jest\": \"21.2.1\",\n     \"jest-environment-node-debug\": \"2.0.0\",\n     \"json\": \"9.0.6\",\n-    \"lerna\": \"2.2.0\",\n-    \"lint-staged\": \"4.2.1\",\n+    \"lerna\": \"2.5.0\",\n+    \"lint-staged\": \"4.3.0\",\n     \"merge2\": \"1.2.0\",\n     \"mkdirp\": \"0.5.1\",\n     \"npm-run-all\": \"4.1.1\",\n     \"pump\": \"1.0.2\",\n     \"rimraf\": \"2.6.2\",\n+    \"rxjs\": \"5.5.2\",\n     \"shx\": \"0.2.2\",\n+    \"source-map-loader\": \"0.2.3\",\n     \"text-encoding-utf-8\": \"1.0.1\",\n     \"trash\": \"4.1.0\",\n-    \"ts-jest\": \"21.0.1\",\n-    \"tslib\": \"1.7.1\",\n-    \"tslint\": \"5.7.0\",\n-    \"typescript\": \"2.5.2\"\n+    \"ts-jest\": \"21.1.4\",\n+    \"tslib\": \"1.8.0\",\n+    \"tslint\": \"5.8.0\",\n+    \"typescript\": \"2.6.1\",\n+    \"uglifyjs-webpack-plugin\": \"1.0.1\",\n+    \"webpack\": \"3.8.1\"\n   },\n   \"lint-staged\": {\n     \"*.@(ts)\": [\ndiff --git a/js/perf/index.js b/js/perf/index.js\nindex 669f69012..3a2ed9677 100644\n--- a/js/perf/index.js\n+++ b/js/perf/index.js\n@@ -16,12 +16,10 @@\n // under the License.\n \n // Use the ES5 UMD target as perf baseline\n-// ES6/7 iterators are faster in turbofan, but something about the\n-// ES5 transpilation (rewriting let and const to var?) JITs better\n-const { Table, readBuffers } = require('../dist/Arrow');\n+// const { Table, readBuffers } = require('../targets/es5/umd');\n // const { Table, readBuffers } = require('../targets/es5/cjs');\n+const { Table, readBuffers } = require('../targets/es2015/umd');\n // const { Table, readBuffers } = require('../targets/es2015/cjs');\n-// const { Table, readBuffers } = require('../targets/esnext/cjs');\n \n const Benchmark = require('benchmark');\n const arrowTestConfigurations = require('./config');\n@@ -35,12 +33,12 @@ for (let [name, ...buffers] of arrowTestConfigurations) {\n     const getByIndexSuite = new Benchmark.Suite(`Get ${name} values by index`, { async: true });\n     parseSuite.add(createFromTableTest(name, buffers));\n     parseSuite.add(createReadBuffersTest(name, buffers));\n-    for (const vector of Table.from(...buffers).cols()) {\n+    for (const vector of Table.from(...buffers).columns) {\n         sliceSuite.add(createSliceTest(vector));\n         iterateSuite.add(createIterateTest(vector));\n         getByIndexSuite.add(createGetByIndexTest(vector));\n     }\n-    suites.push(parseSuite, sliceSuite, getByIndexSuite, iterateSuite);\n+    suites.push(getByIndexSuite, iterateSuite, sliceSuite, parseSuite);\n }\n \n console.log('Running apache-arrow performance tests...\\n');\ndiff --git a/js/src/Arrow.externs.ts b/js/src/Arrow.externs.ts\nindex 7289d6d27..c23930271 100644\n--- a/js/src/Arrow.externs.ts\n+++ b/js/src/Arrow.externs.ts\n@@ -24,23 +24,30 @@\n Symbol.iterator;\n /** @type {symbol} */\n Symbol.asyncIterator;\n-let Table = function() {};\n+\n+let RowVector = function() {};\n /** @type {?} */\n-Table.prototype.length;\n+RowVector.prototype.toJSON;\n /** @type {?} */\n-Table.prototype.rows;\n+RowVector.prototype.toArray;\n /** @type {?} */\n-Table.prototype.cols;\n+RowVector.prototype.toObject;\n /** @type {?} */\n-Table.prototype.getRow;\n+RowVector.prototype.toString;\n+\n+let Table = function() {};\n+/** @type {?} */\n+(<any> Table).from;\n /** @type {?} */\n-Table.prototype.getCell;\n+Table.prototype.columns;\n /** @type {?} */\n-Table.prototype.getCellAt;\n+Table.prototype.length;\n /** @type {?} */\n-Table.prototype.getColumn;\n+Table.prototype.col;\n /** @type {?} */\n-Table.prototype.getColumnAt;\n+Table.prototype.key;\n+/** @type {?} */\n+Table.prototype.select;\n /** @type {?} */\n Table.prototype.toString;\n \n@@ -52,24 +59,26 @@ Vector.prototype.name;\n /** @type {?} */\n Vector.prototype.type;\n /** @type {?} */\n-Vector.prototype.props;\n-/** @type {?} */\n Vector.prototype.get;\n /** @type {?} */\n Vector.prototype.concat;\n /** @type {?} */\n Vector.prototype.slice;\n-\n-let TypedVector = function() {};\n /** @type {?} */\n-TypedVector.prototype.arrayType;\n+Vector.prototype.metadata;\n+/** @type {?} */\n+Vector.prototype.nullable;\n+/** @type {?} */\n+Vector.prototype.nullCount;\n \n-let ValidityVector = function() {};\n+let BoolVector = function() {};\n+/** @type {?} */\n+(<any> BoolVector).pack;\n /** @type {?} */\n-(<any> ValidityVector).pack;\n+BoolVector.prototype.set;\n \n let DictionaryVector = function() {};\n /** @type {?} */\n-DictionaryVector.prototype.index;\n+DictionaryVector.prototype.getKey;\n /** @type {?} */\n-DictionaryVector.prototype.value;\n+DictionaryVector.prototype.getValue;\ndiff --git a/js/src/Arrow.ts b/js/src/Arrow.ts\nindex ea8a5c3e1..319655088 100644\n--- a/js/src/Arrow.ts\n+++ b/js/src/Arrow.ts\n@@ -15,44 +15,45 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-import { Table } from './table';\n import { readBuffers } from './reader/arrow';\n-import { Vector } from './vector/vector';\n-import { StructVector } from './vector/struct';\n-import { DictionaryVector } from './vector/dictionary';\n-import { ListVector, Utf8Vector, FixedSizeListVector } from './vector/list';\n-import {\n-    TypedVector, BitVector,\n-    DateVector, IndexVector,\n-    Int8Vector, Int16Vector,\n-    Int32Vector, Int64Vector,\n-    Uint8Vector, Uint16Vector,\n-    Uint32Vector, Uint64Vector,\n-    Float32Vector, Float64Vector,\n-} from './vector/typed';\n \n-export {\n-    Table, readBuffers,\n-    Vector,\n-    BitVector,\n-    ListVector,\n-    Utf8Vector,\n-    DateVector,\n-    IndexVector,\n+import { Vector } from './types/types';\n+import { ListVector } from './types/list';\n+import { Utf8Vector } from './types/utf8';\n+import { BoolVector } from './types/vector/bool';\n+import { DateVector } from './types/vector/date';\n+import { RowVector } from './types/table/row';\n+import { TableVector } from './types/table/table';\n+import { StructVector } from './types/table/struct';\n+import { DictionaryVector } from './types/dictionary';\n+import { FixedSizeListVector } from './types/fixedsizelist';\n+import { LongVector, Int64Vector, Uint64Vector, } from './types/vector/long';\n+import {\n     TypedVector,\n     Int8Vector,\n     Int16Vector,\n     Int32Vector,\n-    Int64Vector,\n     Uint8Vector,\n     Uint16Vector,\n     Uint32Vector,\n-    Uint64Vector,\n     Float32Vector,\n-    Float64Vector,\n-    StructVector,\n+    Float64Vector\n+} from './types/vector/typed';\n+\n+import './types/table/from';\n+\n+export {\n+    Vector,\n+    readBuffers,\n     DictionaryVector,\n-    FixedSizeListVector,\n+    RowVector as Row,\n+    TableVector as Table,\n+    StructVector, Utf8Vector,\n+    ListVector, FixedSizeListVector,\n+    BoolVector, TypedVector, LongVector,\n+    DateVector, Float32Vector, Float64Vector,\n+    Int8Vector, Int16Vector, Int32Vector, Int64Vector,\n+    Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector,\n };\n \n /* These exports are needed for the closure umd targets */\n@@ -60,15 +61,18 @@ try {\n     const Arrow = eval('exports');\n     if (typeof Arrow === 'object') {\n         // string indexers tell closure compiler not to rename these properties\n-        Arrow['Table'] = Table;\n-        Arrow['readBuffers'] = readBuffers;\n         Arrow['Vector'] = Vector;\n-        Arrow['BitVector'] = BitVector;\n-        Arrow['ListVector'] = ListVector;\n+        Arrow['Table'] = TableVector;\n+        Arrow['readBuffers'] = readBuffers;\n+        Arrow['BoolVector'] = BoolVector;\n         Arrow['Utf8Vector'] = Utf8Vector;\n-        Arrow['DateVector'] = DateVector;\n-        Arrow['IndexVector'] = IndexVector;\n+        Arrow['ListVector'] = ListVector;\n+        Arrow['StructVector'] = StructVector;\n+        Arrow['DictionaryVector'] = DictionaryVector;\n+        Arrow['FixedSizeListVector'] = FixedSizeListVector;\n+        Arrow['LongVector'] = LongVector;\n         Arrow['TypedVector'] = TypedVector;\n+        Arrow['DateVector'] = DateVector;\n         Arrow['Int8Vector'] = Int8Vector;\n         Arrow['Int16Vector'] = Int16Vector;\n         Arrow['Int32Vector'] = Int32Vector;\n@@ -79,9 +83,6 @@ try {\n         Arrow['Uint64Vector'] = Uint64Vector;\n         Arrow['Float32Vector'] = Float32Vector;\n         Arrow['Float64Vector'] = Float64Vector;\n-        Arrow['StructVector'] = StructVector;\n-        Arrow['DictionaryVector'] = DictionaryVector;\n-        Arrow['FixedSizeListVector'] = FixedSizeListVector;\n     }\n } catch (e) { /* not the UMD bundle */ }\n /* end closure exports */\ndiff --git a/js/src/reader/arrow.ts b/js/src/reader/arrow.ts\nindex dbb6acd0e..033bfecae 100644\n--- a/js/src/reader/arrow.ts\n+++ b/js/src/reader/arrow.ts\n@@ -18,17 +18,18 @@\n import { flatbuffers } from 'flatbuffers';\n import * as Schema_ from '../format/Schema_generated';\n import * as Message_ from '../format/Message_generated';\n+export import Schema = Schema_.org.apache.arrow.flatbuf.Schema;\n+export import RecordBatch = Message_.org.apache.arrow.flatbuf.RecordBatch;\n \n import { readFile } from './file';\n import { readStream } from './stream';\n import { readVector } from './vector';\n-import { Vector } from '../vector/vector';\n import { readDictionary } from './dictionary';\n+import { Vector, Column } from '../types/types';\n \n import ByteBuffer = flatbuffers.ByteBuffer;\n-export import Schema = Schema_.org.apache.arrow.flatbuf.Schema;\n-export import RecordBatch = Message_.org.apache.arrow.flatbuf.RecordBatch;\n-export type Dictionaries = { [k: string]: Vector<any> };\n+import Field = Schema_.org.apache.arrow.flatbuf.Field;\n+export type Dictionaries = { [k: string]: Vector<any> } | null;\n export type IteratorState = { nodeIndex: number; bufferIndex: number };\n \n export function* readRecords(...bytes: ByteBuffer[]) {\n@@ -47,22 +48,27 @@ export function* readBuffers(...bytes: Array<Uint8Array | Buffer | string>) {\n     const dictionaries: Dictionaries = {};\n     const byteBuffers = bytes.map(toByteBuffer);\n     for (let { schema, batch } of readRecords(...byteBuffers)) {\n-        let vectors: Vector<any>[] = [];\n+        let vectors: Column<any>[] = [];\n         let state = { nodeIndex: 0, bufferIndex: 0 };\n-        let index = -1, fieldsLength = schema.fieldsLength();\n+        let fieldsLength = schema.fieldsLength();\n+        let index = -1, field: Field, vector: Vector<any>;\n         if (batch.id) {\n             // A dictionary batch only contain a single vector. Traverse each\n             // field and its children until we find one that uses this dictionary\n             while (++index < fieldsLength) {\n-                let vector = readDictionary(schema.fields(index), batch, state, dictionaries);\n-                if (vector) {\n-                    dictionaries[batch.id] = dictionaries[batch.id] && dictionaries[batch.id].concat(vector) || vector;\n-                    break;\n+                if (field = schema.fields(index)!) {\n+                    if (vector = readDictionary<any>(field, batch, state, dictionaries)!) {\n+                        dictionaries[batch.id] = dictionaries[batch.id] && dictionaries[batch.id].concat(vector) || vector;\n+                        break;\n+                    }\n                 }\n             }\n         } else {\n             while (++index < fieldsLength) {\n-                vectors[index] = readVector(schema.fields(index), batch, state, dictionaries);\n+                if ((field = schema.fields(index)!) &&\n+                    (vector = readVector<any>(field, batch, state, dictionaries)!)) {\n+                    vectors[index] = vector as Column<any>;\n+                }\n             }\n             yield vectors;\n         }\ndiff --git a/js/src/reader/dictionary.ts b/js/src/reader/dictionary.ts\nindex 93a9ba76b..0c58ace3b 100644\n--- a/js/src/reader/dictionary.ts\n+++ b/js/src/reader/dictionary.ts\n@@ -17,22 +17,20 @@\n \n import { readVector } from './vector';\n import { MessageBatch } from './message';\n+import { DictionaryVector } from '../types/dictionary';\n import * as Schema_ from '../format/Schema_generated';\n import { IteratorState, Dictionaries } from './arrow';\n import Field = Schema_.org.apache.arrow.flatbuf.Field;\n \n-export function readDictionary(field: Field | null,\n-                               batch: MessageBatch,\n-                               iterator: IteratorState,\n-                               dictionaries: Dictionaries) {\n-    let id: string, encoding = field && field.dictionary();\n+export function readDictionary<T>(field: Field, batch: MessageBatch, iterator: IteratorState, dictionaries: Dictionaries): DictionaryVector<T> | null {\n+    let vector: DictionaryVector<T> | null, id, encoding = field.dictionary();\n     if (encoding && batch.id === (id = encoding.id().toFloat64().toString())) {\n-        return readVector(field, batch, iterator, null);\n+        return readVector<T>(field, batch, iterator, null) as DictionaryVector<T>;\n     }\n-    for (let i = -1, n = field && field.childrenLength() || 0; ++i < n;) {\n-        let vector = readDictionary(field.children(i), batch, iterator, dictionaries);\n-        if (vector) {\n+    for (let i = -1, n = field.childrenLength() | 0; ++i < n;) {\n+        if (vector = readDictionary<T>(field.children(i)!, batch, iterator, dictionaries)) {\n             return vector;\n         }\n     }\n+    return null;\n }\ndiff --git a/js/src/reader/file.ts b/js/src/reader/file.ts\nindex b05b99a5e..bd60b4763 100644\n--- a/js/src/reader/file.ts\n+++ b/js/src/reader/file.ts\n@@ -58,9 +58,12 @@ export function* readFile(...bbs: ByteBuffer[]) {\n             throw new Error('Invalid file');\n         }\n         bb.setPosition(footerOffset - footerLength);\n-        let footer = Footer.getRootAsFooter(bb), schema = footer.schema();\n+        let schema, footer = Footer.getRootAsFooter(bb);\n+        if (!(schema = footer.schema()!)) {\n+            return;\n+        }\n         for (let i = -1, n = footer.dictionariesLength(); ++i < n;) {\n-            let block = footer.dictionaries(i);\n+            let block = footer.dictionaries(i)!;\n             bb.setPosition(block.offset().low);\n             for (let batch of readMessageBatches(bb)) {\n                 yield { schema, batch };\n@@ -68,7 +71,7 @@ export function* readFile(...bbs: ByteBuffer[]) {\n             }\n         }\n         for (let i = -1, n = footer.recordBatchesLength(); ++i < n;) {\n-            const block = footer.recordBatches(i);\n+            const block = footer.recordBatches(i)!;\n             bb.setPosition(block.offset().low);\n             for (let batch of readMessageBatches(bb)) {\n                 yield { schema, batch };\ndiff --git a/js/src/reader/message.ts b/js/src/reader/message.ts\nindex 5472f1083..6c8a96902 100644\n--- a/js/src/reader/message.ts\n+++ b/js/src/reader/message.ts\n@@ -46,13 +46,13 @@ export function* readMessageBatches(bb: ByteBuffer) {\n     let bytes = bb.bytes();\n     for (let message of readMessages(bb)) {\n         let type = message.headerType();\n-        let id: string, data: RecordBatch;\n+        let id: string | void, data: RecordBatch;\n         if (type === MessageHeader.RecordBatch) {\n-            data = message.header(new RecordBatch());\n+            data = message.header(new RecordBatch())!;\n         } else if (type === MessageHeader.DictionaryBatch) {\n-            let header = message.header(new DictionaryBatch());\n+            let header = message.header(new DictionaryBatch())!;\n             id = header.id().toFloat64().toString();\n-            data = header.data();\n+            data = header.data()!;\n         } else {\n             continue;\n         }\ndiff --git a/js/src/reader/stream.ts b/js/src/reader/stream.ts\nindex 9869f633d..2062b1a8c 100644\n--- a/js/src/reader/stream.ts\n+++ b/js/src/reader/stream.ts\n@@ -30,8 +30,8 @@ export function* readStream(...bbs: ByteBuffer[]) {\n         throw new Error('Invalid Arrow Stream');\n     }\n     for (const message of readMessages(bbs[0])) {\n-        if (message.headerType() === MessageHeader.Schema) {\n-            const schema = message.header(new Schema());\n+        let schema: Schema;\n+        if (message.headerType() === MessageHeader.Schema && (schema = message.header(new Schema())!)) {\n             for (const bb of bbs) {\n                 for (const batch of readMessageBatches(bb)) {\n                     yield { schema, batch };\ndiff --git a/js/src/reader/vector.ts b/js/src/reader/vector.ts\nindex 3b6663be8..4d3321833 100644\n--- a/js/src/reader/vector.ts\n+++ b/js/src/reader/vector.ts\n@@ -17,22 +17,28 @@\n \n import { flatbuffers } from 'flatbuffers';\n import { MessageBatch } from './message';\n-import { Vector } from '../vector/vector';\n import * as Schema_ from '../format/Schema_generated';\n-import { StructVector } from '../vector/struct';\n+import * as Message_ from '../format/Message_generated';\n import { IteratorState, Dictionaries } from './arrow';\n-import { DictionaryVector } from '../vector/dictionary';\n-import { Utf8Vector, ListVector, FixedSizeListVector } from '../vector/list';\n import {\n-    TypedArray, TypedArrayCtor, IntArray, FloatArray,\n+    Vector, Column,\n+    IntArray, FloatArray,\n+    TypedArray, TypedArrayConstructor,\n+} from '../types/types';\n+\n+import {\n+    DictionaryVector,\n+    Utf8Vector, StructVector,\n+    ListVector, FixedSizeListVector,\n+    DateVector, Float32Vector, Float64Vector,\n     Int8Vector, Int16Vector, Int32Vector, Int64Vector,\n     Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector,\n-    Float32Vector, Float64Vector, IndexVector, DateVector,\n-} from '../vector/typed';\n+} from '../types/arrow';\n \n import Int = Schema_.org.apache.arrow.flatbuf.Int;\n import Type = Schema_.org.apache.arrow.flatbuf.Type;\n import Field = Schema_.org.apache.arrow.flatbuf.Field;\n+import FieldNode = Message_.org.apache.arrow.flatbuf.FieldNode;\n import Precision = Schema_.org.apache.arrow.flatbuf.Precision;\n import VectorType = Schema_.org.apache.arrow.flatbuf.VectorType;\n import VectorLayout = Schema_.org.apache.arrow.flatbuf.VectorLayout;\n@@ -40,31 +46,33 @@ import FixedSizeList = Schema_.org.apache.arrow.flatbuf.FixedSizeList;\n import FloatingPoint = Schema_.org.apache.arrow.flatbuf.FloatingPoint;\n import DictionaryEncoding = Schema_.org.apache.arrow.flatbuf.DictionaryEncoding;\n \n-export function readVector(field: Field, batch: MessageBatch, state: IteratorState, dictionaries: Dictionaries) {\n-    return readDictionaryVector(field, batch, state, dictionaries) ||\n-                readTypedVector(field, batch, state, dictionaries);\n+export function readVector<T>(field: Field, batch: MessageBatch, state: IteratorState, dictionaries: Dictionaries): Column<T> | DictionaryVector<T> | null {\n+    return readDictionaryVector<T>(field, batch, state, dictionaries) ||\n+                readTypedVector<T>(field, batch, state, dictionaries);\n }\n \n-function readTypedVector(field: Field, batch: MessageBatch, iterator: IteratorState, dictionaries: Dictionaries) {\n+function readTypedVector<T>(field: Field, batch: MessageBatch, iterator: IteratorState, dictionaries: Dictionaries): Column<T> | DictionaryVector<T> | null {\n     let typeType = field.typeType(), readTyped = typedVectorReaders[typeType];\n     if (!readTyped) {\n         throw new Error('Unrecognized vector name \"' + Type[typeType] + '\" type \"' + typeType + '\"');\n     }\n-    return readTyped(field, batch, iterator, dictionaries);\n+    return readTyped(field, batch, iterator, dictionaries) as Column<T>;\n }\n \n-function readDictionaryVector(field: Field, batch: MessageBatch, iterator: IteratorState, dictionaries: Dictionaries) {\n-    let encoding: DictionaryEncoding | null;\n-    if (dictionaries && (encoding = field.dictionary())) {\n-        let id = encoding.id().toFloat64().toString();\n-        let fieldType =  encoding.indexType() ||\n+function readDictionaryVector<T>(field: Field, batch: MessageBatch, iterator: IteratorState, dictionaries: Dictionaries): DictionaryVector<T> | null {\n+    let data: Vector<any>, encoding: DictionaryEncoding;\n+    if (dictionaries &&\n+        (encoding = field.dictionary()!) &&\n+        (data = dictionaries[encoding.id().toFloat64().toString()])) {\n+        let indexType =  encoding.indexType() ||\n             /* a dictionary index defaults to signed 32 bit int if unspecified */\n             { bitWidth: () => 32, isSigned: () => true };\n         // workaround for https://issues.apache.org/jira/browse/ARROW-1363\n-        let indexField = createSyntheticDictionaryIndexField(field, fieldType);\n-        let index = readIntVector(indexField, batch, iterator, null, fieldType);\n-        return DictionaryVector.create(field, index.length, index, dictionaries[id]);\n+        let indexField = createSyntheticDictionaryIndexField(field, indexType);\n+        let keys = readIntVector(indexField, batch, iterator, null, indexType)!;\n+        return new DictionaryVector<T>({ data, keys: keys! });\n     }\n+    return null;\n }\n \n const IntViews    = [Int8Array,    Int16Array,   Int32Array,   Int32Array  ];\n@@ -74,39 +82,54 @@ const Uint8Views  = [Uint8Array,   Uint8Array,   Uint8Array,   Uint8Array  ];\n const Uint32Views = [Uint32Array,  Uint32Array,  Uint32Array,  Uint32Array ];\n const FloatViews  = [Int8Array,    Int16Array,   Float32Array, Float64Array];\n \n-const createIntDataViews = createDataView.bind(null, IntViews, null);\n-const createUintDataViews = createDataView.bind(null, UintViews, null);\n-const createDateDataViews = createDataView.bind(null, Uint32Views, null);\n-const createFloatDataViews = createDataView.bind(null, FloatViews, null);\n-const createNestedDataViews = createDataView.bind(null, Uint32Views, null);\n-const createValidityDataViews = createDataView.bind(null, Uint8Views, null);\n-const createUtf8DataViews = createDataView.bind(null, Uint8Views, Int32Views);\n+const createIntDataViews = createTypedArray.bind(null, IntViews, null);\n+const createUintDataViews = createTypedArray.bind(null, UintViews, null);\n+const createDateDataViews = createTypedArray.bind(null, Uint32Views, null);\n+const createFloatDataViews = createTypedArray.bind(null, FloatViews, null);\n+const createNestedDataViews = createTypedArray.bind(null, Uint32Views, null);\n+const createValidityDataViews = createTypedArray.bind(null, Uint8Views, null);\n+const createUtf8DataViews = createTypedArray.bind(null, Uint8Views, Int32Views);\n \n+// Define as computed properties for closure-compiler\n const floatVectors = {\n+    [Precision.HALF]: Float32Vector,\n     [Precision.SINGLE]: Float32Vector,\n-    [Precision.DOUBLE]: Float64Vector\n-};\n+    [Precision.DOUBLE]: Float64Vector,\n+} as { [k: number]: any };\n+\n+// and again as string-indexed keys for Uglify...\n+floatVectors[Precision['HALF']] = Float32Vector;\n+floatVectors[Precision['SINGLE']] = Float32Vector;\n+floatVectors[Precision['DOUBLE']] = Float64Vector;\n+\n const intVectors = [\n     [/* unsigned */ Uint8Vector,   /* signed */ Int8Vector ],\n     [/* unsigned */ Uint16Vector,  /* signed */ Int16Vector],\n     [/* unsigned */ Uint32Vector,  /* signed */ Int32Vector],\n     [/* unsigned */ Uint64Vector,  /* signed */ Int64Vector]\n-];\n+] as any[][];\n \n-function readIntVector(field: Field, batch: MessageBatch, iterator: IteratorState, dictionaries: Dictionaries, fieldType?: FieldType) {\n-    let type = (fieldType || field.type(new Int()));\n+function readIntVector(field: Field, batch: MessageBatch, iterator: IteratorState, dictionaries: Dictionaries, primitiveType?: PrimitiveType) {\n+    let type = (primitiveType || field.type(new Int())!);\n     return type.isSigned() ?\n         read_IntVector(field, batch, iterator, dictionaries, type) :\n         readUintVector(field, batch, iterator, dictionaries, type);\n }\n \n-const read_IntVector = readVectorLayout<number, IntArray>(createIntDataViews, createIntVector);\n-const readUintVector = readVectorLayout<number, IntArray>(createUintDataViews, createIntVector);\n-function createIntVector(field, length, data, validity, offsets, fieldType, batch, iterator, dictionaries) {\n-    let type = fieldType || field.type(new Int()), bitWidth = type.bitWidth();\n-    let Vector = valueForBitWidth(bitWidth, intVectors)[+type.isSigned()];\n-    return Vector.create(field, length, validity, data || offsets);\n-    // ----------------------------------------------- \ud83d\udc46:\n+function read_IntVector(field: Field, batch: MessageBatch, iterator: IteratorState, dictionaries: Dictionaries, primitiveType?: PrimitiveType) {\n+    return readVectorLayout(createIntDataViews, createIntVector, field, batch, iterator, dictionaries, primitiveType);\n+}\n+\n+function readUintVector(field: Field, batch: MessageBatch, iterator: IteratorState, dictionaries: Dictionaries, primitiveType?: PrimitiveType) {\n+    return readVectorLayout(createUintDataViews, createIntVector, field, batch, iterator, dictionaries, primitiveType);\n+}\n+\n+function createIntVector(argv: VectorFactoryArgv<IntArray>) {\n+    let { field, fieldNode, data, validity, offsets, primitiveType } = argv;\n+    let type = primitiveType || field.type(new Int())!, bitWidth = type.bitWidth();\n+    let IntVector = valueForBitWidth(bitWidth, intVectors)[+type.isSigned()];\n+    return new IntVector({ fieldNode, field, validity, data: data! || offsets! });\n+    // ---------------------------------------------------- \ud83d\udc46:\n     // Workaround for https://issues.apache.org/jira/browse/ARROW-1363\n     // This bug causes dictionary encoded vector indicies' IntVector data\n     // buffers to be tagged as VectorType.OFFSET (0) in the field metadata\n@@ -118,68 +141,58 @@ function createIntVector(field, length, data, validity, offsets, fieldType, batc\n     // the offset buffer is the data, because IntVectors don't have offsets.\n }\n \n-const readFloatVector = readVectorLayout<number, FloatArray>(\n-    createFloatDataViews,\n-    (field, length, data, validity, offsets, fieldType, batch, iterator, dictionaries) => {\n-        let type = field.type(new FloatingPoint());\n-        let Vector = floatVectors[type.precision()];\n-        return Vector.create(field, length, validity, data);\n-    }\n-);\n+function bindVectorReader<T extends TypedArray, V>(createBufferView: BufferViewFactory<T>, createVector: VectorFactory<T, V>) {\n+    return function readVector(field: Field, batch: MessageBatch, iterator: IteratorState, dictionaries: Dictionaries, primitiveType?: PrimitiveType) {\n+        return readVectorLayout(createBufferView, createVector, field, batch, iterator, dictionaries, primitiveType);\n+    };\n+}\n \n-const readDateVector = readVectorLayout<Date, Uint32Array>(\n-    createDateDataViews,\n-    (field, length, data, validity, offsets, fieldType, batch, iterator, dictionaries) => {\n-        return DateVector.create(field, length, validity, data);\n-    }\n-);\n+const readFloatVector = bindVectorReader(createFloatDataViews, ({ field, fieldNode, data, validity }: VectorFactoryArgv<FloatArray>) => {\n+    const type = field.type(new FloatingPoint())!;\n+    const FloatVector = floatVectors[type.precision()];\n+    return new FloatVector({ field, fieldNode, validity, data: data! });\n+});\n \n-const readUtf8Vector = readVectorLayout<string, Uint8Array>(\n-    createUtf8DataViews,\n-    (field, length, data, validity, offsets, fieldType, batch, iterator, dictionaries) => {\n-        let offsetsAdjusted = new Int32Array(offsets.buffer, offsets.byteOffset, length + 1);\n-        return Utf8Vector.create(\n-            field, length, validity,\n-            Uint8Vector.create(field, data.length, null, data),\n-            IndexVector.create(field, length + 1, null, offsetsAdjusted)\n-        );\n-    }\n-);\n+const readDateVector = bindVectorReader(createDateDataViews, ({ field, fieldNode, data, validity }: VectorFactoryArgv<Uint32Array>) => {\n+    return new DateVector({ field, fieldNode, validity, data: data! });\n+});\n \n-const readListVector = readVectorLayout<any[], Uint32Array>(\n-    createNestedDataViews,\n-    (field, length, data, validity, offsets, fieldType, batch, iterator, dictionaries) => {\n-        let offsetsAdjusted = new Int32Array(offsets.buffer, offsets.byteOffset, length + 1);\n-        return ListVector.create(\n-            field, length, validity,\n-            readVector(field.children(0), batch, iterator, dictionaries),\n-            IndexVector.create(field, length + 1, null, offsetsAdjusted)\n-        );\n-    }\n-);\n+const readUtf8Vector = bindVectorReader(createUtf8DataViews, ({ field, fieldNode, data, offsets, validity }: VectorFactoryArgv<Uint8Array>) => {\n+    return new Utf8Vector({\n+        field, fieldNode,\n+        values: new ListVector({\n+            validity,\n+            offsets: offsets as Int32Array,\n+            values: new Uint8Vector({ data: data! })\n+        }) as any as Vector<Uint8Array | null>\n+    });\n+});\n \n-const readFixedSizeListVector = readVectorLayout<any[], Uint32Array>(\n-    createNestedDataViews,\n-    (field, length, data, validity, offsets, fieldType, batch, iterator, dictionaries) => {\n-        let size = field.type(new FixedSizeList()).listSize();\n-        return FixedSizeListVector.create(\n-            field, length, size, validity,\n-            readVector(field.children(0), batch, iterator, dictionaries)\n-        );\n-    }\n-);\n+const readListVector = bindVectorReader(createNestedDataViews, ({ field, fieldNode, offsets, validity, iterator, messageBatch, dictionaries }: VectorFactoryArgv<TypedArray>) => {\n+    return new ListVector({\n+        field, fieldNode, validity,\n+        offsets: offsets! as Int32Array,\n+        values: readVector(field.children(0)!, messageBatch, iterator, dictionaries)!\n+    });\n+});\n \n-const readStructVector = readVectorLayout<any[], ArrayLike<any>>(\n-    createNestedDataViews,\n-    (field, length, data, validity, offsets, fieldType, batch, iterator, dictionaries) => {\n-        let vectors: Vector<any>[] = [];\n-        for (let i = -1, n = field.childrenLength(); ++i < n;) {\n-            vectors[i] = readVector(field.children(i), batch, iterator, dictionaries);\n-        }\n-        return StructVector.create(field, length, validity, ...vectors);\n+const readFixedSizeListVector = bindVectorReader(createNestedDataViews, ({ field, fieldNode, validity, iterator, messageBatch, dictionaries }: VectorFactoryArgv<Uint32Array>) => {\n+    return new FixedSizeListVector({\n+        field, fieldNode, validity,\n+        listSize: field.type(new FixedSizeList())!.listSize(),\n+        values: readVector(field.children(0)!, messageBatch, iterator, dictionaries)!\n+    });\n+});\n+\n+const readStructVector = bindVectorReader(createNestedDataViews, ({ field, fieldNode, validity, iterator, messageBatch, dictionaries }: VectorFactoryArgv<ArrayLike<any>>) => {\n+    let columns: Column<any>[] = [];\n+    for (let i = -1, n = field.childrenLength(); ++i < n;) {\n+        columns[i] = readVector<any>(field.children(i)!, messageBatch, iterator, dictionaries) as Column<any>;\n     }\n-);\n+    return new StructVector({ field, fieldNode, validity, columns });\n+});\n \n+// Define as computed properties for closure-compiler\n const typedVectorReaders = {\n     [Type.Int]: readIntVector,\n     [Type.Date]: readDateVector,\n@@ -188,60 +201,73 @@ const typedVectorReaders = {\n     [Type.Struct_]: readStructVector,\n     [Type.FloatingPoint]: readFloatVector,\n     [Type.FixedSizeList]: readFixedSizeListVector,\n-};\n+} as { [k: number]: (...args: any[]) => Vector | null };\n+\n+// and again as string-indexed keys for Uglify...\n+typedVectorReaders[Type['Int']] = readIntVector;\n+typedVectorReaders[Type['Date']] = readDateVector;\n+typedVectorReaders[Type['List']] = readListVector;\n+typedVectorReaders[Type['Utf8']] = readUtf8Vector;\n+typedVectorReaders[Type['Struct_']] = readStructVector;\n+typedVectorReaders[Type['FloatingPoint']] = readFloatVector;\n+typedVectorReaders[Type['FixedSizeList']] = readFixedSizeListVector;\n+\n+type VectorFactory<T, V> = (argv: VectorFactoryArgv<T>) => V;\n+type PrimitiveType = { bitWidth(): number; isSigned(): boolean };\n+type BufferViewFactory<T extends TypedArray> = (batch: MessageBatch, type: VectorType, bitWidth: number, offset: number, length: number) => T;\n \n-type FieldType = { bitWidth(): number; isSigned(): boolean };\n-type dataViewFactory<V = TypedArray> = (batch: MessageBatch, type: VectorType, bitWidth: number, offset: number, length: number) => V;\n-type vectorFactory<TList, V = Vector<any>> = (field: Field,\n-                                              length: number,\n-                                              data: TList,\n-                                              nulls: Uint8Array,\n-                                              offsets: TypedArray,\n-                                              fieldType: FieldType,\n-                                              chunk: MessageBatch,\n-                                              iterable: IteratorState,\n-                                              dictionaries: Dictionaries) => V;\n+interface VectorFactoryArgv<T> {\n+    field: Field;\n+    fieldNode: FieldNode;\n+    iterator: IteratorState;\n+    dictionaries: Dictionaries;\n+    messageBatch: MessageBatch;\n+    data?: T;\n+    offsets?: TypedArray;\n+    validity?: Uint8Array;\n+    primitiveType?: PrimitiveType;\n+}\n \n-function readVectorLayout<T, TList>(createDataView: dataViewFactory<TList>, createVector: vectorFactory<TList, Vector<T>>) {\n-    return function readLayout(\n-            field: Field,\n-            chunk: MessageBatch,\n-            iterator: IteratorState,\n-            dictionaries: Dictionaries,\n-            integerFieldType?: FieldType\n-    ) {\n-        let batch = chunk.data;\n-        let layoutLength = field.layoutLength();\n-        let node = batch.nodes(iterator.nodeIndex++);\n-        let data: TList, offsets: any, validity: Uint8Array;\n-        let type, bitWidth, bufferLength, nodeLength = node.length().low;\n-        for (let i = -1; ++i < layoutLength;) {\n-            let layout = field.layout(i);\n-            let buffer = batch.buffers(iterator.bufferIndex++);\n-            if ((type = layout.type()) === VectorType.TYPE ||\n-                (bufferLength = buffer.length().low) <= 0  ||\n-                (bitWidth = layout.bitWidth()) <= 0) {\n-                continue;\n-            } else if (type === VectorType.DATA) {\n-                data = createDataView(chunk, type, bitWidth, buffer.offset().low, bufferLength);\n-            } else if (type === VectorType.OFFSET) {\n-                offsets = createDataView(chunk, type, bitWidth, buffer.offset().low, bufferLength);\n-            } else if (node.nullCount().low > 0) {\n-                validity = createValidityDataViews(chunk, type, bitWidth, buffer.offset().low, nodeLength);\n-            }\n+function readVectorLayout<T extends TypedArray, V>(\n+    createBufferView: BufferViewFactory<T>, createVector: VectorFactory<T, V>,\n+    field: Field, messageBatch: MessageBatch, iterator: IteratorState, dictionaries: Dictionaries, primitiveType?: PrimitiveType\n+) {\n+    let fieldNode: FieldNode, recordBatch = messageBatch.data;\n+    if (!(fieldNode = recordBatch.nodes(iterator.nodeIndex)!)) {\n+        return null;\n+    }\n+    iterator.nodeIndex += 1;\n+    let type, bitWidth, layout, buffer, bufferLength;\n+    let data: T | undefined, offsets: TypedArray | undefined, validity: Uint8Array | undefined;\n+    for (let i = -1, n = field.layoutLength(); ++i < n;) {\n+        if (!(layout = field.layout(i)!) ||\n+            !(buffer = recordBatch.buffers(iterator.bufferIndex)!)) {\n+            continue;\n         }\n-        return createVector(field, nodeLength, data, validity, offsets, integerFieldType, chunk, iterator, dictionaries);\n-    };\n+        iterator.bufferIndex += 1;\n+        if ((type = layout.type()) === VectorType.TYPE ||\n+            (bufferLength = buffer.length().low) <= 0  ||\n+            (bitWidth = layout.bitWidth()) <= 0) {\n+            continue;\n+        } else if (type === VectorType.DATA) {\n+            data = createBufferView(messageBatch, type, bitWidth, buffer.offset().low, bufferLength);\n+        } else if (type === VectorType.OFFSET) {\n+            offsets = createBufferView(messageBatch, type, bitWidth, buffer.offset().low, bufferLength);\n+        } else if (fieldNode.nullCount().low > 0) {\n+            validity = createValidityDataViews(messageBatch, type, bitWidth, buffer.offset().low, fieldNode.length().low);\n+        }\n+    }\n+    return createVector({ data, offsets, validity, field, fieldNode, iterator, messageBatch, dictionaries, primitiveType });\n }\n \n-function createDataView(\n-    dataViews: TypedArrayCtor<any>[], offsetViews: TypedArrayCtor<any>[] | null,\n+function createTypedArray(\n+    bufferViews: TypedArrayConstructor[], offsetViews: TypedArrayConstructor[] | null,\n     batch: MessageBatch, type: VectorType, bitWidth: number, offset: number, length: number\n ) {\n     const buffer = batch.bytes.buffer;\n     const byteLength = buffer.byteLength;\n     const byteOffset = batch.offset + offset;\n-    const DataViewType = valueForBitWidth(bitWidth, type === VectorType.OFFSET && offsetViews || dataViews);\n+    const DataViewType = valueForBitWidth(bitWidth, type === VectorType.OFFSET && offsetViews || bufferViews);\n     const dataViewLength = ((byteOffset + length) <= byteLength\n         ? length\n         : byteLength - byteOffset\n@@ -249,12 +275,12 @@ function createDataView(\n     return new DataViewType(buffer, byteOffset, dataViewLength);\n }\n \n-function valueForBitWidth(bitWidth: number, values: any[]) {\n+function valueForBitWidth<T>(bitWidth: number, values: T[]) {\n     return values[bitWidth >> 4] || values[3];\n }\n \n-function createSyntheticDictionaryIndexField(field: Field, type: FieldType) {\n-    let layouts = [];\n+function createSyntheticDictionaryIndexField(field: Field, type: PrimitiveType) {\n+    let layouts = [] as VectorLayout[];\n     let builder = new flatbuffers.Builder();\n     if (field.nullable()) {\n         VectorLayout.startVectorLayout(builder);\n@@ -270,7 +296,7 @@ function createSyntheticDictionaryIndexField(field: Field, type: FieldType) {\n     builder.finish(VectorLayout.endVectorLayout(builder));\n     layouts.push(VectorLayout.getRootAsVectorLayout(builder.dataBuffer()));\n     return Object.create(field, {\n-        layout: { value(i) { return layouts[i]; } },\n+        layout: { value(i: number) { return layouts[i]; } },\n         layoutLength: { value() { return layouts.length; } }\n     });\n-}\n\\ No newline at end of file\n+}\ndiff --git a/js/src/table.ts b/js/src/table.ts\ndeleted file mode 100644\nindex 5e781054d..000000000\n--- a/js/src/table.ts\n+++ /dev/null\n@@ -1,143 +0,0 @@\n-// Licensed to the Apache Software Foundation (ASF) under one\n-// or more contributor license agreements.  See the NOTICE file\n-// distributed with this work for additional information\n-// regarding copyright ownership.  The ASF licenses this file\n-// to you under the Apache License, Version 2.0 (the\n-// \"License\"); you may not use this file except in compliance\n-// with the License.  You may obtain a copy of the License at\n-//\n-//   http://www.apache.org/licenses/LICENSE-2.0\n-//\n-// Unless required by applicable law or agreed to in writing,\n-// software distributed under the License is distributed on an\n-// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-// KIND, either express or implied.  See the License for the\n-// specific language governing permissions and limitations\n-// under the License.\n-\n-import { readBuffers } from './reader/arrow';\n-import { StructVector } from './vector/struct';\n-import { Vector, sliceToRangeArgs } from './vector/vector';\n-\n-export type RowObject = { [k: string]: any };\n-\n-export class Table implements Iterable<Map<string, any>> {\n-    public length: number;\n-    protected _columns: Vector<any>[];\n-    protected _columnsMap: { [k: string]: Vector<any> };\n-    static from(...bytes: Array<Uint8Array | Buffer | string>) {\n-        let columns: Vector<any>[];\n-        for (let vectors of readBuffers(...bytes)) {\n-            columns = !columns ? vectors : columns.map((v, i) => v.concat(vectors[i]));\n-        }\n-        return new Table(columns);\n-    }\n-    static fromStruct(vector: StructVector) {\n-        return new Table((<any> vector).vectors);\n-    }\n-    constructor(columns: Vector<any>[]) {\n-        this._columns = columns || [];\n-        this.length = Math.max(...this._columns.map((v) => v.length));\n-        this._columnsMap = this._columns.reduce((map, vec) => {\n-            return (map[vec.name] = vec) && map || map;\n-        }, <any> {});\n-    }\n-    *[Symbol.iterator]() {\n-        for (let cols = this._columns, i = -1, n = this.length; ++i < n;) {\n-            yield rowAsMap(i, cols);\n-        }\n-    }\n-    *rows(startRow?: number | boolean, endRow?: number | boolean, compact?: boolean) {\n-        let start = startRow as number, end = endRow as number;\n-        if (typeof startRow === 'boolean') {\n-            compact = startRow;\n-            start = end;\n-            end = undefined;\n-        } else if (typeof endRow === 'boolean') {\n-            compact = endRow;\n-            end = undefined;\n-        }\n-        let rowIndex = -1, { length } = this;\n-        const [rowOffset, rowsTotal] = sliceToRangeArgs(length, start, end);\n-        while (++rowIndex < rowsTotal) {\n-            yield this.getRow((rowIndex + rowOffset) % length, compact);\n-        }\n-    }\n-    *cols(startCol?: number, endCol?: number) {\n-        for (const column of this._columns.slice(startCol, endCol)) {\n-            yield column;\n-        }\n-    }\n-    getRow(rowIndex: number): RowObject;\n-    getRow(rowIndex: number, compact: boolean): Array<any>;\n-    getRow(rowIndex: number, compact?: boolean) {\n-        return (compact && rowAsArray || rowAsObject)(rowIndex, this._columns);\n-    }\n-    getCell<T extends any>(columnName: string, rowIndex: number) {\n-        return this.getColumn<Vector<T>>(columnName).get(rowIndex);\n-    }\n-    getCellAt<T extends any>(columnIndex: number, rowIndex: number) {\n-        return this.getColumnAt<Vector<T>>(columnIndex).get(rowIndex);\n-    }\n-    getColumn<T extends Vector<any>>(columnName: string) {\n-        return this._columnsMap[columnName] as T;\n-    }\n-    getColumnAt<T extends Vector<any>>(columnIndex: number) {\n-        return this._columns[columnIndex] as T;\n-    }\n-    toString(): string;\n-    toString(index: boolean): string;\n-    toString(options: { index: boolean }): string;\n-    toString(options?: any) {\n-        const index = typeof options === 'object' ? options && !!options.index\n-                    : typeof options === 'boolean' ? !!options\n-                    : false;\n-        const { length } = this;\n-        if (length <= 0) { return ''; }\n-        const maxColumnWidths = [];\n-        const rows = new Array(length + 1);\n-        rows[0] = this._columns.map((c) => c.name);\n-        index && rows[0].unshift('Index');\n-        for (let i = -1, n = rows.length - 1; ++i < n;) {\n-            rows[i + 1] = this.getRow(i, true);\n-            index && rows[i + 1].unshift(i);\n-        }\n-        // Pass one to convert to strings and count max column widths\n-        for (let i = -1, n = rows.length; ++i < n;) {\n-            const row = rows[i];\n-            for (let j = -1, k = row.length; ++j < k;) {\n-                const val = row[j] = `${row[j]}`;\n-                maxColumnWidths[j] = !maxColumnWidths[j]\n-                    ? val.length\n-                    : Math.max(maxColumnWidths[j], val.length);\n-            }\n-        }\n-        // Pass two to pad each one to max column width\n-        for (let i = -1, n = rows.length; ++i < n;) {\n-            const row = rows[i];\n-            for (let j = -1, k = row.length; ++j < k;) {\n-                row[j] = leftPad(row[j], ' ', maxColumnWidths[j]);\n-            }\n-            rows[i] = row.join(', ');\n-        }\n-        return rows.join('\\n');\n-    }\n-}\n-\n-Table.prototype.length = 0;\n-\n-function leftPad(str, fill, n) {\n-    return (new Array(n + 1).join(fill) + str).slice(-1 * n);\n-}\n-\n-function rowAsMap(row: number, columns: Vector<any>[]) {\n-    return columns.reduce((map, vector) => map.set(vector.name, vector.get(row)), new Map());\n-}\n-\n-function rowAsObject(rowIndex: number, columns: Vector<any>[]) {\n-    return columns.reduce((row, vector) => (row[vector.name] = vector.get(rowIndex)) && row || row, Object.create(null));\n-}\n-\n-function rowAsArray(rowIndex: number, columns: Vector<any>[]) {\n-    return columns.reduce((row, vector, columnIndex) => (row[columnIndex] = vector.get(rowIndex)) && row || row, new Array(columns.length));\n-}\ndiff --git a/js/src/text-encoding-utf-8.d.ts b/js/src/text-encoding-utf-8.d.ts\nnew file mode 100644\nindex 000000000..68ba4dfd9\n--- /dev/null\n+++ b/js/src/text-encoding-utf-8.d.ts\n@@ -0,0 +1,4 @@\n+declare module 'text-encoding-utf-8' {\n+    import * as TextEncoding from 'text-encoding';\n+    export = TextEncoding;\n+}\ndiff --git a/js/src/types/arrow.ts b/js/src/types/arrow.ts\nnew file mode 100644\nindex 000000000..e18f5da4f\n--- /dev/null\n+++ b/js/src/types/arrow.ts\n@@ -0,0 +1,88 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import * as Schema_ from '../format/Schema_generated';\n+import * as Message_ from '../format/Message_generated';\n+import Field = Schema_.org.apache.arrow.flatbuf.Field;\n+import FieldNode = Message_.org.apache.arrow.flatbuf.FieldNode;\n+\n+import { BoolVector } from './vector/bool';\n+import { DictionaryVector } from './dictionary';\n+import { nullableMixin, fieldMixin } from './vector/traits';\n+import { ListVector as ListVectorBase } from './list';\n+import { Utf8Vector as Utf8VectorBase } from './utf8';\n+import { Vector, Column, TypedArray } from './types';\n+import { DateVector as DateVectorBase } from './vector/date';\n+import { TableVector as TableVectorBase } from './table/table';\n+import { StructVector as StructVectorBase } from './table/struct';\n+import { FixedSizeListVector as FixedSizeListVectorBase } from './fixedsizelist';\n+import {\n+    LongVector as LongVectorBase,\n+    Int64Vector as Int64VectorBase,\n+    Uint64Vector as Uint64VectorBase,\n+} from './vector/long';\n+import {\n+    TypedVector,\n+    Int8Vector as Int8VectorBase,\n+    Int16Vector as Int16VectorBase,\n+    Int32Vector as Int32VectorBase,\n+    Uint8Vector as Uint8VectorBase,\n+    Uint16Vector as Uint16VectorBase,\n+    Uint32Vector as Uint32VectorBase,\n+    Float32Vector as Float32VectorBase,\n+    Float64Vector as Float64VectorBase,\n+} from './vector/typed';\n+\n+export { TypedArray, TypedVector };\n+export { Column, BoolVector, DictionaryVector };\n+export class ListVector extends MixinArrowTraits(ListVectorBase) {}\n+export class Utf8Vector extends MixinArrowTraits(Utf8VectorBase) {}\n+export class TableVector extends MixinArrowTraits(TableVectorBase) {}\n+export class StructVector extends MixinArrowTraits(StructVectorBase) {}\n+export class FixedSizeListVector extends MixinArrowTraits(FixedSizeListVectorBase) {}\n+export class DateVector extends MixinArrowTraits(DateVectorBase) {}\n+export class LongVector extends MixinArrowTraits(LongVectorBase) {}\n+export class Int8Vector extends MixinArrowTraits(Int8VectorBase) {}\n+export class Int16Vector extends MixinArrowTraits(Int16VectorBase) {}\n+export class Int32Vector extends MixinArrowTraits(Int32VectorBase) {}\n+export class Int64Vector extends MixinArrowTraits(Int64VectorBase) {}\n+export class Uint8Vector extends MixinArrowTraits(Uint8VectorBase) {}\n+export class Uint16Vector extends MixinArrowTraits(Uint16VectorBase) {}\n+export class Uint32Vector extends MixinArrowTraits(Uint32VectorBase) {}\n+export class Uint64Vector extends MixinArrowTraits(Uint64VectorBase) {}\n+export class Float32Vector extends MixinArrowTraits(Float32VectorBase) {}\n+export class Float64Vector extends MixinArrowTraits(Float64VectorBase) {}\n+\n+export function MixinArrowTraits<T extends Vector<any>, TArgv>(BaseVector: new (argv: TArgv) => T) {\n+    const FieldVector = fieldMixin(BaseVector);\n+    const NullableVector = nullableMixin(BaseVector);\n+    const NullableFieldVector = nullableMixin(FieldVector);\n+    return function(this: any, argv: TArgv & (object | { validity: Uint8Array } | { field: Field, fieldNode: FieldNode })) {\n+        return new ((!isFieldArgv(argv) ? !isNullableArgv(argv) ?\n+            BaseVector : NullableVector : !isNullableArgv(argv) ?\n+            FieldVector : NullableFieldVector\n+        ) as any)(argv);\n+    } as any as { new (argv: TArgv & (object | { validity: Uint8Array } | { field: Field, fieldNode: FieldNode })): T };\n+}\n+\n+function isFieldArgv(x: any): x is { field: Field, fieldNode: FieldNode } {\n+    return x && x.field instanceof Field && x.fieldNode instanceof FieldNode;\n+}\n+\n+function isNullableArgv(x: any): x is { validity: Uint8Array } {\n+    return x && x.validity && ArrayBuffer.isView(x.validity) && x.validity instanceof Uint8Array;\n+}\ndiff --git a/js/src/types/dictionary.ts b/js/src/types/dictionary.ts\nnew file mode 100644\nindex 000000000..cafa75331\n--- /dev/null\n+++ b/js/src/types/dictionary.ts\n@@ -0,0 +1,58 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import { Vector, Column } from './types';\n+import { VirtualVector } from './vector/virtual';\n+\n+export interface DictionaryVector<T> extends Vector<T> {\n+    getValue(key: number): T;\n+    getKey(index: number): number;\n+}\n+\n+export class DictionaryVector<T> extends Vector<T> implements Column<T>, DictionaryVector<T> {\n+    readonly data: Vector<T>;\n+    readonly keys: Column<number>;\n+    constructor(argv: { data: Vector<T>, keys: Vector<number> }) {\n+        super();\n+        this.data = argv.data;\n+        this.keys = argv.keys as Column<number>;\n+    }\n+    get name () { return this.keys.name; }\n+    get type () { return this.keys.type; }\n+    get length () { return this.keys.length; }\n+    get metadata () { return this.keys.metadata; }\n+    get nullable () { return this.keys.nullable; }\n+    get nullCount () { return this.keys.nullCount; }\n+    get(index: number) {\n+        return this.getValue(this.getKey(index)!);\n+    }\n+    getKey(index: number) {\n+        return this.keys.get(index);\n+    }\n+    getValue(key: number) {\n+        return this.data.get(key);\n+    }\n+    concat(...vectors: Vector<T>[]): Vector<T> {\n+        return new VirtualVector(Array, this, ...vectors);\n+    }\n+    *[Symbol.iterator]() {\n+        const { data, keys } = this;\n+        for (let i = -1, n = keys.length; ++i < n;) {\n+            yield data.get(keys.get(i)!);\n+        }\n+    }\n+}\ndiff --git a/js/src/vector/struct.ts b/js/src/types/fixedsizelist.ts\nsimilarity index 53%\nrename from js/src/vector/struct.ts\nrename to js/src/types/fixedsizelist.ts\nindex e59ac91e9..6311d891d 100644\n--- a/js/src/vector/struct.ts\n+++ b/js/src/types/fixedsizelist.ts\n@@ -15,25 +15,21 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-import { Vector } from './vector';\n-import { BitVector, ValidityArgs } from './typed';\n+import { List, Vector } from './types';\n+import { VirtualVector } from './vector/virtual';\n \n-export class StructVector extends Vector<any[]> {\n-    protected vectors: Vector<any>[];\n-    constructor(validity: ValidityArgs, ...vectors: Vector<any>[]) {\n+export class FixedSizeListVector<T, TArray extends List<T>> extends Vector<TArray> {\n+    readonly listSize: number;\n+    readonly values: Vector<T>;\n+    constructor(argv: { listSize: number, values: Vector<T> }) {\n         super();\n-        this.vectors = vectors;\n-        this.length = Math.max(0, ...vectors.map((v) => v.length));\n-        validity && (this.validity = BitVector.from(validity));\n+        this.values = argv.values;\n+        this.listSize = argv.listSize;\n     }\n     get(index: number) {\n-        return this.validity.get(index) ? this.vectors.map((v) => v.get(index)) : null;\n+        return this.values.slice<TArray>(this.listSize * index, this.listSize * (index + 1));\n     }\n-    concat(vector: StructVector) {\n-        return StructVector.from(this,\n-            this.length + vector.length,\n-            this.validity.concat(vector.validity),\n-            ...this.vectors.map((v, i) => v.concat(vector.vectors[i]))\n-        );\n+    concat(...vectors: Vector<TArray>[]): Vector<TArray> {\n+        return new VirtualVector(Array, this, ...vectors);\n     }\n }\ndiff --git a/js/src/types/list.ts b/js/src/types/list.ts\nnew file mode 100644\nindex 000000000..ca9170b59\n--- /dev/null\n+++ b/js/src/types/list.ts\n@@ -0,0 +1,35 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import { List, Vector } from './types';\n+import { VirtualVector } from './vector/virtual';\n+\n+export class ListVector<T, TArray extends List<T>> extends Vector<TArray> {\n+    readonly offsets: Int32Array;\n+    readonly values: Vector<T>;\n+    constructor(argv: { offsets: Int32Array, values: Vector<T> }) {\n+        super();\n+        this.values = argv.values;\n+        this.offsets = argv.offsets;\n+    }\n+    get(index: number) {\n+        return this.values.slice<TArray>(this.offsets[index], this.offsets[index + 1]);\n+    }\n+    concat(...vectors: Vector<TArray>[]): Vector<TArray> {\n+        return new VirtualVector(Array, this, ...vectors);\n+    }\n+}\n\\ No newline at end of file\ndiff --git a/js/src/types/table/from.ts b/js/src/types/table/from.ts\nnew file mode 100644\nindex 000000000..ae0755961\n--- /dev/null\n+++ b/js/src/types/table/from.ts\n@@ -0,0 +1,34 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import { Column } from '../types';\n+import { TableVector } from './table';\n+import { readBuffers } from '../../reader/arrow';\n+\n+export function fromBuffers(...bytes: Array<Uint8Array | Buffer | string>) {\n+    let columns: Column<any>[] = null as any;\n+    for (let vectors of readBuffers(...bytes)) {\n+        columns = !columns ? vectors : columns.map((v, i) => v.concat(vectors[i]) as Column<any>);\n+    }\n+    return new TableVector({ columns });\n+}\n+\n+TableVector.from = fromBuffers;\n+\n+declare module './table' {\n+    namespace TableVector { export let from: typeof fromBuffers; }\n+}\n\\ No newline at end of file\ndiff --git a/js/src/types/table/row.ts b/js/src/types/table/row.ts\nnew file mode 100644\nindex 000000000..432cfd736\n--- /dev/null\n+++ b/js/src/types/table/row.ts\n@@ -0,0 +1,61 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import { Row, Vector, Struct } from '../types';\n+import { VirtualVector } from '../vector/virtual';\n+\n+export class RowVector<T = any> extends Vector<T> implements Row<T> {\n+    readonly row: number;\n+    readonly length: number;\n+    readonly table: Struct<T>;\n+    [Symbol.toStringTag]() { return 'Row'; }\n+    constructor(table: Struct<T>, row: number) {\n+        super();\n+        this.row = row;\n+        this.table = table;\n+        this.length = table.columns.length;\n+    }\n+    get(index: number) {\n+        const col = this.table.columns[index];\n+        return col ? col.get(this.row) as T : null;\n+    }\n+    col(key: string) {\n+        const col = this.table.col(key);\n+        return col ? col.get(this.row) as T : null;\n+    }\n+    *[Symbol.iterator]() {\n+        const { row } = this;\n+        for (const col of this.table.columns) {\n+            yield col ? col.get(row) : null;\n+        }\n+    }\n+    concat(...rows: Vector<T>[]): Vector<T> {\n+        return new VirtualVector(Array, this, ...rows as any[]);\n+    }\n+    toArray() { return [...this]; }\n+    toJSON() { return this.toArray(); }\n+    toString() { return `Row [${this.length})` }\n+    toObject(): Record<string, any> {\n+        const { row } = this, map = Object.create(null);\n+        for (const col of this.table.columns) {\n+            if (col && col.name) {\n+                map[col.name] = col.get(row);\n+            }\n+        }\n+        return map;\n+    }\n+}\ndiff --git a/js/src/types/table/struct.ts b/js/src/types/table/struct.ts\nnew file mode 100644\nindex 000000000..de6a3a056\n--- /dev/null\n+++ b/js/src/types/table/struct.ts\n@@ -0,0 +1,63 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import { RowVector } from './row';\n+import { toString } from './toString';\n+import { VirtualVector } from '../vector/virtual';\n+import { Row, Vector, Column, Struct } from '../types';\n+\n+export interface StructVector {\n+    toString(): string;\n+    toString(index: boolean): string;\n+    toString(options: { index: boolean }): string;\n+}\n+\n+export class StructVector<T = any> extends Vector<Row<T>> implements Struct<T> {\n+    readonly length: number;\n+    readonly columns: Column[];\n+    constructor(argv: { columns: Column[] }) {\n+        super();\n+        this.columns = argv.columns || [];\n+        if (!this.length) {\n+            this.length = Math.max(...this.columns.map((col) => col.length)) | 0;\n+        }\n+    }\n+    get(index: number): StructRow<T> {\n+        return new StructRow(this, index);\n+    }\n+    col(name: string) {\n+        return this.columns.find((col) => col.name === name) || null;\n+    }\n+    key(index: number) {\n+        return this.columns[index] ? this.columns[index].name : null;\n+    }\n+    select(...columns: string[]) {\n+        return new StructVector({ columns: columns.map((name) => this.col(name)!) });\n+    }\n+    concat(...structs: Vector<Row<T>>[]): Vector<Row<T>> {\n+        return new VirtualVector(Array, this, ...structs as any[]);\n+    }\n+    toString(x?: any) {\n+        return toString(this, x);\n+    }\n+}\n+\n+export class StructRow<T> extends RowVector<T> {\n+    toString() {\n+        return JSON.stringify(this);\n+    }\n+}\n\\ No newline at end of file\ndiff --git a/js/src/types/table/table.ts b/js/src/types/table/table.ts\nnew file mode 100644\nindex 000000000..d9074dec2\n--- /dev/null\n+++ b/js/src/types/table/table.ts\n@@ -0,0 +1,30 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import { StructVector, StructRow } from './struct';\n+\n+export class TableVector<T> extends StructVector<T> {\n+    get(index: number): TableRow<T> {\n+        return new TableRow(this, index);\n+    }\n+}\n+\n+export class TableRow<T> extends StructRow<T> {\n+    toString() {\n+        return this.toArray().map((x) => JSON.stringify(x)).join(', ');\n+    }\n+}\n\\ No newline at end of file\ndiff --git a/js/src/types/table/toString.ts b/js/src/types/table/toString.ts\nnew file mode 100644\nindex 000000000..85b23ca24\n--- /dev/null\n+++ b/js/src/types/table/toString.ts\n@@ -0,0 +1,40 @@\n+import { Struct } from '../types';\n+\n+export function toString<T>(source: Struct<T>, options?: any) {\n+    const index = typeof options === 'object' ? options && !!options.index\n+                : typeof options === 'boolean' ? !!options\n+                : false;\n+    const { length } = source;\n+    if (length <= 0) { return ''; }\n+    const rows = new Array(length + 1);\n+    const maxColumnWidths = [] as number[];\n+    rows[0] = source.columns.map((_, i) => source.key(i));\n+    index && rows[0].unshift('Index');\n+    for (let i = -1, n = rows.length - 1; ++i < n;) {\n+        rows[i + 1] = [...source.get(i)!];\n+        index && rows[i + 1].unshift(i);\n+    }\n+    // Pass one to convert to strings and count max column widths\n+    for (let i = -1, n = rows.length; ++i < n;) {\n+        const row = rows[i];\n+        for (let j = -1, k = row.length; ++j < k;) {\n+            const val = row[j] = `${row[j]}`;\n+            maxColumnWidths[j] = !maxColumnWidths[j]\n+                ? val.length\n+                : Math.max(maxColumnWidths[j], val.length);\n+        }\n+    }\n+    // Pass two to pad each one to max column width\n+    for (let i = -1, n = rows.length; ++i < n;) {\n+        const row = rows[i];\n+        for (let j = -1, k = row.length; ++j < k;) {\n+            row[j] = leftPad(row[j], ' ', maxColumnWidths[j]);\n+        }\n+        rows[i] = row.join(', ');\n+    }\n+    return rows.join('\\n');\n+}\n+\n+function leftPad(str: string, fill: string, n: number) {\n+    return (new Array(n + 1).join(fill) + str).slice(-1 * n);\n+}\ndiff --git a/js/src/types/types.ts b/js/src/types/types.ts\nnew file mode 100644\nindex 000000000..f732bc097\n--- /dev/null\n+++ b/js/src/types/types.ts\n@@ -0,0 +1,98 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import * as Schema_ from '../format/Schema_generated';\n+import Type = Schema_.org.apache.arrow.flatbuf.Type;\n+\n+export interface TypedArrayConstructor<T extends TypedArray = TypedArray> {\n+    readonly prototype: T;\n+    readonly BYTES_PER_ELEMENT: number;\n+    new (length: number): T;\n+    new (elements: Iterable<number>): T;\n+    new (arrayOrArrayBuffer: ArrayLike<number> | ArrayBufferLike): T;\n+    new (buffer: ArrayBufferLike, byteOffset: number, length?: number): T;\n+}\n+\n+export interface TypedArray extends Iterable<number> {\n+    [index: number]: number;\n+    readonly length: number;\n+    readonly byteLength: number;\n+    readonly byteOffset: number;\n+    readonly buffer: ArrayBufferLike;\n+    readonly BYTES_PER_ELEMENT: number;\n+    [Symbol.iterator](): IterableIterator<number>;\n+    slice(start?: number, end?: number): TypedArray;\n+    subarray(begin: number, end?: number): TypedArray;\n+    set(array: ArrayLike<number>, offset?: number): void;\n+}\n+\n+export type FloatArray = Float32Array | Float64Array;\n+export type IntArray = Int8Array | Int16Array | Int32Array;\n+export type UintArray = Uint8ClampedArray | Uint8Array | Uint16Array | Uint32Array;\n+\n+export type List<T> = T[] | TypedArray;\n+\n+export interface Vector<T = any> extends Iterable<T | null> {\n+    readonly length: number;\n+    get(index: number): T | null;\n+    concat(...vectors: Vector<T>[]): Vector<T>;\n+    slice<R = T[]>(start?: number, end?: number): R;\n+}\n+\n+export interface Row<T = any> extends Vector<T> {\n+    col(key: string): T | null;\n+}\n+\n+export interface Column<T = any> extends Vector<T> {\n+    readonly name: string;\n+    readonly type: string;\n+    readonly nullable: boolean;\n+    readonly nullCount: number;\n+    readonly metadata: Map<string, string>;\n+}\n+\n+export interface Struct<T = any> extends Vector<Row<T>> {\n+    readonly columns: Column[];\n+    key(key: number): string | null;\n+    col(key: string): Column | null;\n+    select(...columns: string[]): Struct<T>;\n+    concat(...structs: Vector<Row<T>>[]): Vector<Row<T>>;\n+}\n+\n+export class Vector<T = any> implements Vector<T> {\n+    slice<R = T[]>(start?: number, end?: number): R {\n+        let { length } = this, from = start! | 0;\n+        let to = end === undefined ? length : Math.max(end | 0, from);\n+        let result = new Array<T | null>(to - Math.min(from, to));\n+        for (let i = -1, n = result.length; ++i < n;) {\n+            result[i] = this.get(i + from);\n+        }\n+        return result as any;\n+    }\n+    *[Symbol.iterator]() {\n+        for (let i = -1, n = this.length; ++i < n;) {\n+            yield this.get(i);\n+        }\n+    }\n+}\n+\n+(Vector.prototype as any).name = '';\n+(Vector.prototype as any).type = Type[0];\n+(Vector.prototype as any).stride = 1;\n+(Vector.prototype as any).nullable = !1;\n+(Vector.prototype as any).nullCount = 0;\n+(Vector.prototype as any).metadata = new Map();\ndiff --git a/js/src/vector/dictionary.ts b/js/src/types/utf8.ts\nsimilarity index 50%\nrename from js/src/vector/dictionary.ts\nrename to js/src/types/utf8.ts\nindex de811eaf5..178704f61 100644\n--- a/js/src/vector/dictionary.ts\n+++ b/js/src/types/utf8.ts\n@@ -15,37 +15,26 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-import { Vector } from './vector';\n+import { Vector } from './types';\n+import { TextDecoder } from 'text-encoding-utf-8';\n+import { VirtualVector } from './vector/virtual';\n \n-export class DictionaryVector<T> extends Vector<T> {\n-    protected data: Vector<T>;\n-    protected keys: Vector<number>;\n-    constructor(index: Vector<number>, dictionary: Vector<T>) {\n+const decoder = new TextDecoder('utf-8');\n+\n+export class Utf8Vector extends Vector<string> {\n+    readonly values: Vector<Uint8Array | null>;\n+    constructor(argv: { values: Vector<Uint8Array | null> }) {\n         super();\n-        this.keys = index;\n-        this.data = dictionary;\n-        this.length = index && index.length || 0;\n-    }\n-    index(index: number) {\n-        return this.keys.get(index);\n-    }\n-    value(index: number) {\n-        return this.data.get(index);\n+        this.values = argv.values;\n     }\n     get(index: number) {\n-        return this.value(this.index(index));\n+        const chars = this.getCodePoints(index);\n+        return chars ? decoder.decode(chars) : null;\n     }\n-    concat(vector: DictionaryVector<T>) {\n-        return DictionaryVector.from(this,\n-            this.length + vector.length,\n-            this.keys.concat(vector.keys),\n-            this.data\n-        );\n+    getCodePoints(index: number) {\n+        return this.values.get(index);\n     }\n-    *[Symbol.iterator]() {\n-        let { data } = this;\n-        for (const loc of this.keys) {\n-            yield data.get(loc);\n-        }\n+    concat(...vectors: Vector<string>[]): Vector<string> {\n+        return new VirtualVector(Array, this, ...vectors);\n     }\n }\ndiff --git a/js/src/types/vector/bool.ts b/js/src/types/vector/bool.ts\nnew file mode 100644\nindex 000000000..b2eea81f8\n--- /dev/null\n+++ b/js/src/types/vector/bool.ts\n@@ -0,0 +1,55 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import { TypedVector } from './typed';\n+\n+export interface BoolVector extends TypedVector<boolean, Uint8Array> {\n+    set(index: number, value: boolean): void;\n+}\n+\n+export class BoolVector extends TypedVector<boolean, Uint8Array> {\n+    static pack = pack;\n+    get(index: number) {\n+        return (this.data[index >> 3] & 1 << index % 8) !== 0;\n+    }\n+    set(index: number, value: boolean) {\n+        if (index > -1 === false) {\n+            return;\n+        } else if (value) {\n+            this.data[index >> 3] |=  (1 << (index % 8));\n+        } else {\n+            this.data[index >> 3] &= ~(1 << (index % 8));\n+        }\n+    }\n+}\n+\n+export function pack(values: Iterable<any>) {\n+    let xs = [], n, i = 0;\n+    let bit = 0, byte = 0;\n+    for (const value of values) {\n+        value && (byte |= 1 << bit);\n+        if (++bit === 8) {\n+            xs[i++] = byte;\n+            byte = bit = 0;\n+        }\n+    }\n+    if (i === 0 || bit > 0) { xs[i++] = byte; }\n+    if (i % 8 && (n = i + 8 - i % 8)) {\n+        do { xs[i] = 0; } while (++i < n);\n+    }\n+    return new Uint8Array(xs);\n+}\ndiff --git a/js/src/types/vector/date.ts b/js/src/types/vector/date.ts\nnew file mode 100644\nindex 000000000..82dc82e64\n--- /dev/null\n+++ b/js/src/types/vector/date.ts\n@@ -0,0 +1,29 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import { TypedVector } from './typed';\n+\n+export class DateVector extends TypedVector<Date, Uint32Array> {\n+    get(index: number): Date {\n+        return new Date(4294967296   * /* 2^32 */\n+            (super.get(index * 2 + 1) as any) + /* high */\n+            (super.get(index * 2) as any)       /*  low */\n+        );\n+    }\n+}\n+\n+(DateVector.prototype as any).stride = 2;\ndiff --git a/js/src/types/vector/long.ts b/js/src/types/vector/long.ts\nnew file mode 100644\nindex 000000000..de8eb0c13\n--- /dev/null\n+++ b/js/src/types/vector/long.ts\n@@ -0,0 +1,35 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import { TypedVector } from './typed';\n+import { TypedArray } from '../types';\n+import { flatbuffers } from 'flatbuffers';\n+import Long = flatbuffers.Long;\n+\n+export class LongVector<T extends TypedArray> extends TypedVector<Long, T> {\n+    get(index: number) {\n+        return new Long(\n+            super.get(index * 2) as any,    /*  low */\n+            super.get(index * 2 + 1) as any /* high */\n+        );\n+    }\n+}\n+\n+(LongVector.prototype as any).stride = 2;\n+\n+export class Int64Vector extends LongVector<Int32Array> {}\n+export class Uint64Vector extends LongVector<Uint32Array> {}\n\\ No newline at end of file\ndiff --git a/js/src/types/vector/traits.ts b/js/src/types/vector/traits.ts\nnew file mode 100644\nindex 000000000..872c40b64\n--- /dev/null\n+++ b/js/src/types/vector/traits.ts\n@@ -0,0 +1,69 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import { BoolVector } from './bool';\n+import { Vector, Column } from '../types';\n+import * as Schema_ from '../../format/Schema_generated';\n+import * as Message_ from '../../format/Message_generated';\n+import Type = Schema_.org.apache.arrow.flatbuf.Type;\n+import Field = Schema_.org.apache.arrow.flatbuf.Field;\n+import FieldNode = Message_.org.apache.arrow.flatbuf.FieldNode;\n+\n+type Ctor<TArgv> = new (argv: TArgv) => Vector;\n+\n+export const nullableMixin = <T extends Vector, TArgv>(superclass: new (argv: TArgv) => T) =>\n+    class extends (superclass as Ctor<TArgv>) {\n+        readonly validity: Vector<boolean>;\n+        constructor(argv: TArgv & { validity: Uint8Array }) {\n+            super(argv);\n+            this.validity = new BoolVector({ data: argv.validity });\n+        }\n+        get(index: number) {\n+            return this.validity.get(index) ? super.get(index) : null;\n+        }\n+    };\n+\n+export const fieldMixin = <T extends Vector, TArgv>(superclass: new (argv: TArgv) => T) =>\n+    class extends (superclass as Ctor<TArgv>) implements Column {\n+        readonly field: Field;\n+        readonly type: string;\n+        readonly length: number;\n+        readonly stride: number;\n+        readonly nullable: boolean;\n+        readonly nullCount: number;\n+        readonly fieldNode: FieldNode;\n+        constructor(argv: TArgv & { field: Field, fieldNode: FieldNode }) {\n+            super(argv);\n+            const { field, fieldNode } = argv;\n+            this.field = field;\n+            this.fieldNode = fieldNode;\n+            this.nullable = field.nullable();\n+            this.type = Type[field.typeType()];\n+            this.nullCount = fieldNode.nullCount().low;\n+            this.length = (fieldNode.length().low / this.stride) | 0;\n+        }\n+        get name() { return this.field.name()!; }\n+        get metadata()  {\n+            const { field } = this, data = new Map<string, string>();\n+            for (let entry, key, i = -1, n = field && field.customMetadataLength() | 0; ++i < n;) {\n+                if ((entry = field.customMetadata(i)) && (key = entry.key()) != null) {\n+                    data.set(key, entry.value()!);\n+                }\n+            }\n+            return data;\n+        }\n+    };\ndiff --git a/js/src/types/vector/typed.ts b/js/src/types/vector/typed.ts\nnew file mode 100644\nindex 000000000..fc093f2cb\n--- /dev/null\n+++ b/js/src/types/vector/typed.ts\n@@ -0,0 +1,57 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import { Vector } from '../types';\n+import { VirtualVector } from './virtual';\n+import { TypedArray, TypedArrayConstructor } from '../types';\n+\n+export interface TypedVector<T, TArray extends TypedArray> {\n+    slice(start?: number, end?: number): TArray;\n+}\n+\n+export class TypedVector<T, TArray extends TypedArray> extends Vector<T> {\n+    readonly data: TArray;\n+    readonly stride: number;\n+    readonly length: number;\n+    constructor(argv: { data: TArray } | TArray) {\n+        super();\n+        const data = ArrayBuffer.isView(argv) ? argv : argv.data;\n+        this.length = ((this.data = data).length / this.stride) | 0;\n+    }\n+    get(index: number): T | null {\n+        return this.data[index] as any;\n+    }\n+    concat(...vectors: Vector<T>[]): Vector<T> {\n+        return new VirtualVector(this.data.constructor as TypedArrayConstructor, this, ...vectors);\n+    }\n+    slice(start?: number, end?: number) {\n+        const { data, stride } = this, from = start! | 0;\n+        const to = end === undefined ? data.length : Math.max(end | 0, from);\n+        return data.subarray(Math.min(from, to) * stride | 0, to * stride | 0);\n+    }\n+}\n+\n+(TypedVector.prototype as any).stride = 1;\n+\n+export class Int8Vector extends TypedVector<number, Int8Array> {}\n+export class Int16Vector extends TypedVector<number, Int16Array> {}\n+export class Int32Vector extends TypedVector<number, Int32Array> {}\n+export class Uint8Vector extends TypedVector<number, Uint8Array> {}\n+export class Uint16Vector extends TypedVector<number, Uint16Array> {}\n+export class Uint32Vector extends TypedVector<number, Uint32Array> {}\n+export class Float32Vector extends TypedVector<number, Float32Array> {}\n+export class Float64Vector extends TypedVector<number, Float64Array> {}\ndiff --git a/js/src/types/vector/virtual.ts b/js/src/types/vector/virtual.ts\nnew file mode 100644\nindex 000000000..7f56012dc\n--- /dev/null\n+++ b/js/src/types/vector/virtual.ts\n@@ -0,0 +1,129 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import { TypedVector } from './typed';\n+import { Vector, Column, TypedArray, TypedArrayConstructor } from '../types';\n+\n+export class VirtualVector<T> implements Column<T> {\n+    readonly name: string;\n+    readonly type: string;\n+    readonly length: number;\n+    readonly vectors: Vector<T>[];\n+    readonly offsets: Uint32Array;\n+    readonly ArrayType: ArrayConstructor | TypedArrayConstructor;\n+    constructor(ArrayType: ArrayConstructor | TypedArrayConstructor, ...vectors: Vector<T>[]) {\n+        this.vectors = vectors;\n+        this.ArrayType = ArrayType;\n+        this.name = (vectors[0] as any).name;\n+        this.type = (vectors[0] as any).type;\n+        this.length = vectors.reduce((sum, vec) => sum + vec.length, 0);\n+        this.offsets = Uint32Array.from(vectors.reduce((sums, vector, index) => [...sums, vector.length + sums[index]], [0]));\n+    }\n+    *[Symbol.iterator]() {\n+        for (const vector of this.vectors) {\n+            yield* vector;\n+        }\n+    }\n+    get nullable() {\n+        return (this.vectors as Column<T>[]).some((vec) => vec.nullable);\n+    }\n+    get nullCount() {\n+        return (this.vectors as Column<T>[]).reduce((sum, v) => sum + v.nullCount | 0, 0);\n+    }\n+    get metadata() {\n+        return new Map<string, string>(\n+            (this.vectors as Column<T>[]).reduce((entries, v) => [\n+                ...entries, ...v.metadata.entries()\n+            ], [] as [string, string][])\n+        );\n+    }\n+    get(index: number) {\n+        return findIndex(this.offsets, index) ? this.vectors[_vector].get(_offset) : null;\n+    }\n+    concat(...vectors: Vector<T>[]) {\n+        return new VirtualVector(this.ArrayType, ...this.vectors, ...vectors);\n+    }\n+    slice(begin?: number, end?: number) {\n+        const ArrayType = this.ArrayType as any;\n+        // clamp begin and end values between the virtual length\n+        clampRange(this.length, begin!, end);\n+        const from = _from, total = _total;\n+        // find the start vector index and adjusted value index offset\n+        if (!findIndex(this.offsets, from)) { return new ArrayType(0); }\n+        const set = ArrayType === Array ? arraySet : typedArraySet as any;\n+        let index = _vector, vectors = this.vectors as TypedVector<T, TypedArray>[];\n+        let vector = vectors[index], source = vector.slice(_offset, _offset + total), target = source;\n+        // Perf optimization: if the first slice contains all the values we're looking for,\n+        // we don't have to copy values to a target Array. If we're slicing a TypedArray,\n+        // this is a significant improvement as we avoid the memcpy \ud83c\udf89\n+        if ((source.length / vector.stride | 0) < total) {\n+            let vectorsLength = vectors.length;\n+            let count = 0, length = 0, sources = [];\n+            do {\n+                sources.push(source);\n+                length += source.length;\n+                count += (source.length / vector.stride | 0);\n+            } while (\n+                (count  < total) &&\n+                (vector = vectors[index = (++index % vectorsLength)]) &&\n+                (source = vector.slice(0, Math.min(vector.length, total - count)))\n+            );\n+            target = new ArrayType(length);\n+            for (let i = -1, j = 0, n = sources.length; ++i < n;) {\n+                j = set(sources[i], target, j);\n+            }\n+        }\n+        return target;\n+    }\n+}\n+\n+let _from = -1, _total = -1;\n+function clampRange(length: number, start: number, end?: number) {\n+    let total = length, from = start || 0;\n+    let to = end === end && typeof end == 'number' ? end : total;\n+    if (to < 0) { to = total + to; }\n+    if (from < 0) { from = total - (from * -1) % total; }\n+    if (to < from) { from = to; to = start; }\n+    _from = from;\n+    _total = !isFinite(total = (to - from)) || total < 0 ? 0 : total;\n+}\n+\n+let _offset = -1, _vector = -1;\n+function findIndex(offsets: Uint32Array, index: number) {\n+    let offset = 0, left = 0, middle = 0, right = offsets.length - 1;\n+    while (index < offsets[right] && index >= (offset = offsets[left])) {\n+        if (left + 1 === right) {\n+            _vector = left;\n+            _offset = index - offset;\n+            return true;\n+        }\n+        middle = left + ((right - left) / 2) | 0;\n+        index >= offsets[middle] ? (left = middle) : (right = middle);\n+    }\n+    return false;\n+}\n+\n+function arraySet<T>(source: T[], target: T[], index: number) {\n+    for (let i = 0, n = source.length; i < n;) {\n+        target[index++] = source[i++];\n+    }\n+    return index;\n+}\n+\n+function typedArraySet(source: TypedArray, target: TypedArray, index: number) {\n+    return target.set(source, index) || index + source.length;\n+}\ndiff --git a/js/src/vector/list.ts b/js/src/vector/list.ts\ndeleted file mode 100644\nindex 7360d968b..000000000\n--- a/js/src/vector/list.ts\n+++ /dev/null\n@@ -1,108 +0,0 @@\n-// Licensed to the Apache Software Foundation (ASF) under one\n-// or more contributor license agreements.  See the NOTICE file\n-// distributed with this work for additional information\n-// regarding copyright ownership.  The ASF licenses this file\n-// to you under the Apache License, Version 2.0 (the\n-// \"License\"); you may not use this file except in compliance\n-// with the License.  You may obtain a copy of the License at\n-//\n-//   http://www.apache.org/licenses/LICENSE-2.0\n-//\n-// Unless required by applicable law or agreed to in writing,\n-// software distributed under the License is distributed on an\n-// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-// KIND, either express or implied.  See the License for the\n-// specific language governing permissions and limitations\n-// under the License.\n-\n-import { Vector } from './vector';\n-import { TextDecoder } from 'text-encoding';\n-import { IndexVector, BitVector, ValidityArgs } from './typed';\n-\n-export class ListVectorBase<T> extends Vector<T> {\n-    protected values: Vector<T>;\n-    protected offsets: IndexVector;\n-    constructor(validity: ValidityArgs, values: Vector<any>, offsets: IndexVector) {\n-        super();\n-        this.values = values;\n-        this.offsets = offsets;\n-        validity && (this.validity = BitVector.from(validity));\n-    }\n-    get(index: number) {\n-        let batch, from, to, { offsets } = this;\n-        if (!this.validity.get(index) ||\n-            /* return null if `to` is null */\n-            ((to = offsets.get(index + 1)) === null) || !(\n-            /*\n-            return null if `batch` is less than than 0. this check is placed\n-            second to avoid creating the [from, batch] tuple if `to` is null\n-            */\n-            ([from, batch] = offsets.get(index, true) as number[]) && batch > -1)) {\n-            return null;\n-        }\n-        return this.values.slice(from, to, batch) as any;\n-    }\n-    concat(vector: ListVectorBase<T>) {\n-        return (this.constructor as typeof ListVectorBase).from(this,\n-            this.length + vector.length,\n-            this.validity.concat(vector.validity),\n-            this.values.concat(vector.values),\n-            this.offsets.concat(vector.offsets)\n-        );\n-    }\n-    *[Symbol.iterator]() {\n-        let v, r1, r2, { values } = this;\n-        let it = this.offsets[Symbol.iterator]();\n-        let iv = this.validity[Symbol.iterator]();\n-        while (!(v = iv.next()).done && !(r1 = it.next()).done && !(r2 = it.next()).done) {\n-            yield !v.value ? null : values.slice(r1.value[0], r2.value, r1.value[1]) as any;\n-        }\n-    }\n-}\n-\n-export class ListVector<T> extends ListVectorBase<T[]> {}\n-export class Utf8Vector extends ListVectorBase<string> {\n-    protected static decoder = new TextDecoder(`utf-8`);\n-    get(index: number) {\n-        let chars = super.get(index) as any;\n-        return chars ? Utf8Vector.decoder.decode(chars) : null;\n-    }\n-    *[Symbol.iterator]() {\n-        let decoder = Utf8Vector.decoder;\n-        for (const chars of super[Symbol.iterator]()) {\n-            yield !chars ? null : decoder.decode(chars);\n-        }\n-    }\n-}\n-\n-export class FixedSizeListVector<T> extends Vector<T[]> {\n-    protected size: number;\n-    protected values: Vector<T>;\n-    constructor(size: number, validity: ValidityArgs, values: Vector<T>) {\n-        super();\n-        this.values = values;\n-        this.size = Math.abs(size | 0) || 1;\n-        validity && (this.validity = BitVector.from(validity));\n-    }\n-    get(index: number) {\n-        return !this.validity.get(index) ? null : this.values.slice(\n-            this.size * index, this.size * (index + 1)\n-        ) as T[];\n-    }\n-    concat(vector: FixedSizeListVector<T>) {\n-        return FixedSizeListVector.from(this,\n-            this.length + vector.length,\n-            this.size,\n-            this.validity.concat(vector.validity),\n-            this.values.concat(vector.values)\n-        );\n-    }\n-    *[Symbol.iterator]() {\n-        let v, i = -1;\n-        let { size, length, values } = this;\n-        let iv = this.validity[Symbol.iterator]();\n-        while (!(v = iv.next()).done && ++i < length) {\n-            yield !v.value ? null : values.slice(size * i, size * (i + 1)) as T[];\n-        }\n-    }\n-}\ndiff --git a/js/src/vector/typed.ts b/js/src/vector/typed.ts\ndeleted file mode 100644\nindex b38812e07..000000000\n--- a/js/src/vector/typed.ts\n+++ /dev/null\n@@ -1,326 +0,0 @@\n-// Licensed to the Apache Software Foundation (ASF) under one\n-// or more contributor license agreements.  See the NOTICE file\n-// distributed with this work for additional information\n-// regarding copyright ownership.  The ASF licenses this file\n-// to you under the Apache License, Version 2.0 (the\n-// \"License\"); you may not use this file except in compliance\n-// with the License.  You may obtain a copy of the License at\n-//\n-//   http://www.apache.org/licenses/LICENSE-2.0\n-//\n-// Unless required by applicable law or agreed to in writing,\n-// software distributed under the License is distributed on an\n-// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-// KIND, either express or implied.  See the License for the\n-// specific language governing permissions and limitations\n-// under the License.\n-\n-import { Vector } from './vector';\n-import { flatbuffers } from 'flatbuffers';\n-\n-import Long = flatbuffers.Long;\n-\n-export type VArray<T = any> = {\n-    [k: number]: T; length: number;\n-    constructor: VArrayCtor<VArray<T>>;\n-};\n-\n-export type VArrayCtor<VArray> = {\n-    readonly prototype: VArray;\n-    BYTES_PER_ELEMENT?: number;\n-    new(...args: any[]): VArray;\n-};\n-\n-export class VirtualVector<T, TArrayType = VArray<T>> extends Vector<T> {\n-    protected lists: TArrayType[];\n-    protected _arrayType: VArrayCtor<TArrayType>;\n-    public get arrayType() { return this._arrayType; }\n-    constructor(...lists: TArrayType[]) {\n-        super();\n-        this.lists = lists.filter(Boolean);\n-    }\n-    get(index: number): T {\n-        /* inlined `findVirtual` impl */\n-        let rows, length, lists = this.lists;\n-        for (let batch = -1;\n-            (rows = lists[++batch]) &&\n-            (length = rows.length) <= index &&\n-            0 <= (index -= length);) {}\n-        return rows && -1 < index ? rows[index] : null;\n-    }\n-    protected range(from: number, total: number, batch?: number) {\n-        /* inlined `findVirtual` impl */\n-        let rows, local = from, length;\n-        let { lists, _arrayType } = this;\n-        for (batch = (batch || 0) - 1;\n-            (rows = lists[++batch]) &&\n-            (length = rows.length) <= local &&\n-            0 <= (local -= length);) {}\n-        if (rows && local > -1) {\n-            let index = 0, listsLength = lists.length;\n-            let set: any = Array.isArray(rows) ? arraySet : typedArraySet;\n-            let slice = _arrayType['prototype']['subarray'] || _arrayType['prototype']['slice'];\n-            let source = slice.call(rows, local, local + total), target = source;\n-            // Perf optimization: if the first slice contains all the values we're looking for,\n-            // we don't have to copy values to a target Array. If we're slicing a TypedArray,\n-            // this is a significant improvement as we avoid the memcpy \ud83c\udf89\n-            if (source.length < total) {\n-                target = new _arrayType(total);\n-                while ((index = set(source, target, index)) < total) {\n-                    rows = lists[batch = ((batch + 1) % listsLength)];\n-                    source = slice.call(rows, 0, Math.min(rows.length, total - index));\n-                }\n-            }\n-            return target as any;\n-        }\n-        return new _arrayType(0);\n-    }\n-    *[Symbol.iterator]() {\n-        let index = -1, { lists, length } = this;\n-        for (let outer = -1, n = lists.length; ++outer < n;) {\n-            let list = lists[outer] as any;\n-            for (let inner = -1, k = list.length; ++index < length && ++inner < k;) {\n-                yield list[inner];\n-            }\n-        }\n-    }\n-}\n-\n-export type ValidityArgs = Vector<boolean> | Uint8Array;\n-export class BitVector extends VirtualVector<boolean, Uint8Array> {\n-    static constant: Vector<boolean> = new (class ValidVector extends Vector<boolean> {\n-        get() { return true; }\n-        *[Symbol.iterator]() {\n-            do { yield true; } while (true);\n-        }\n-    })();\n-    static from(src: any) {\n-        return src instanceof BitVector   ? src\n-             : src === BitVector.constant ? src\n-             : src instanceof Uint8Array       ? new BitVector(src)\n-             : src instanceof Array            ? new BitVector(BitVector.pack(src))\n-             : src instanceof Vector           ? new BitVector(BitVector.pack(src))\n-                                               : BitVector.constant as Vector<any>;\n-    }\n-    static pack(values: Iterable<any>) {\n-        let xs = [], n, i = 0;\n-        let bit = 0, byte = 0;\n-        for (const value of values) {\n-            value && (byte |= 1 << bit);\n-            if (++bit === 8) {\n-                xs[i++] = byte;\n-                byte = bit = 0;\n-            }\n-        }\n-        if (i === 0 || bit > 0) { xs[i++] = byte; }\n-        if (i % 8 && (n = n = i + 8 - i % 8)) {\n-            do { xs[i] = 0; } while (++i < n);\n-        }\n-        return new Uint8Array(xs);\n-    }\n-    constructor(...lists: Uint8Array[]) {\n-        super(...lists);\n-        this.length = this.lists.reduce((l, xs) => l + xs['length'], 0);\n-    }\n-    get(index: number) {\n-        /* inlined `findVirtual` impl */\n-        let rows, length, lists = this.lists;\n-        for (let batch = -1;\n-            (rows = lists[++batch]) &&\n-            (length = rows.length) <= index &&\n-            0 <= (index -= length);) {}\n-        return !(!rows || index < 0 || (rows[index >> 3 | 0] & 1 << index % 8) === 0);\n-    }\n-    set(index: number, value: boolean) {\n-        /* inlined `findVirtual` impl */\n-        let rows, length, lists = this.lists;\n-        for (let batch = -1;\n-            (rows = lists[++batch]) &&\n-            (length = rows.length) <= index &&\n-            0 <= (index -= length);) {}\n-        if (rows && index > -1) {\n-            value\n-                ? (rows[index >> 3 | 0] |=  (1 << (index % 8)))\n-                : (rows[index >> 3 | 0] &= ~(1 << (index % 8)));\n-        }\n-    }\n-    concat(vector: BitVector) {\n-        return new BitVector(...this.lists, ...vector.lists);\n-    }\n-    *[Symbol.iterator]() {\n-        for (const byte of super[Symbol.iterator]()) {\n-            for (let i = -1; ++i < 8;) {\n-                yield (byte & 1 << i) !== 0;\n-            }\n-        }\n-    }\n-}\n-\n-export class TypedVector<T, TArrayType> extends VirtualVector<T, TArrayType> {\n-    constructor(validity: ValidityArgs, ...lists: TArrayType[]) {\n-        super(...lists);\n-        validity && (this.validity = BitVector.from(validity));\n-    }\n-    concat(vector: TypedVector<T, TArrayType>) {\n-        return (this.constructor as typeof TypedVector).from(this,\n-            this.length + vector.length,\n-            this.validity.concat(vector.validity),\n-            ...this.lists, ...vector.lists\n-        );\n-    }\n-}\n-\n-export class DateVector extends TypedVector<Date, Uint32Array> {\n-    get(index: number) {\n-        return !this.validity.get(index) ? null : new Date(\n-            Math.pow(2, 32) *\n-                <any> super.get(2 * index + 1) +\n-                <any> super.get(2 * index)\n-        );\n-    }\n-    *[Symbol.iterator]() {\n-        let v, low, high;\n-        let it = super[Symbol.iterator]();\n-        let iv = this.validity[Symbol.iterator]();\n-        while (!(v = iv.next()).done && !(low = it.next()).done && !(high = it.next()).done) {\n-            yield !v.value ? null : new Date(Math.pow(2, 32) * high.value + low.value);\n-        }\n-    }\n-}\n-\n-export class IndexVector extends TypedVector<number | number[], Int32Array> {\n-    get(index: number, returnWithBatchIndex = false) {\n-        /* inlined `findVirtual` impl */\n-        let rows, length, batch = -1, lists = this.lists;\n-        for (;\n-            (rows = lists[++batch]) &&\n-            (length = rows.length) <= index &&\n-            0 <= (index -= length);) {}\n-        return !returnWithBatchIndex\n-            ? (rows && -1 < index ? rows[index + batch] : null) as number\n-            : (rows && -1 < index ? [rows[index + batch], batch] : [0, -1]) as number[];\n-    }\n-    *[Symbol.iterator]() {\n-        // Alternate between iterating a tuple of [from, batch], and to. The from\n-        // and to values are relative to the record batch they're defined in, so\n-        // `ListVectorBase` needs to know the right batch to read.\n-        let xs = new Int32Array(2), { lists } = this;\n-        for (let i = -1, n = lists.length; ++i < n;) {\n-            let list = lists[i] as any;\n-            for (let j = -1, k = list.length - 1; ++j < k;) {\n-                xs[1] = i;\n-                xs[0] = list[j];\n-                yield xs;\n-                yield list[j + 1];\n-            }\n-        }\n-    }\n-}\n-\n-export class ByteVector<TList> extends TypedVector<number, TList> {\n-    get(index: number) {\n-        return this.validity.get(index) ? super.get(index) : null;\n-    }\n-    *[Symbol.iterator]() {\n-        let v, r, { validity } = this;\n-        let it = super[Symbol.iterator]();\n-        // fast path the case of no nulls\n-        if (validity === BitVector.constant) {\n-            yield* it;\n-        } else {\n-            let iv = validity[Symbol.iterator]();\n-            while (!(v = iv.next()).done && !(r = it.next()).done) {\n-                yield !v.value ? null : r.value;\n-            }\n-        }\n-    }\n-}\n-\n-export class LongVector<TList> extends TypedVector<Long, TList> {\n-    get(index: number) {\n-        return !this.validity.get(index) ? null : new Long(\n-            <any> super.get(index * 2),     /* low */\n-            <any> super.get(index * 2 + 1) /* high */\n-        );\n-    }\n-    *[Symbol.iterator]() {\n-        let v, low, high;\n-        let it = super[Symbol.iterator]();\n-        let iv = this.validity[Symbol.iterator]();\n-        while (!(v = iv.next()).done && !(low = it.next()).done && !(high = it.next()).done) {\n-            yield !v.value ? null : new Long(low.value, high.value);\n-        }\n-    }\n-}\n-\n-export class Int8Vector    extends ByteVector<Int8Array>    {}\n-export class Int16Vector   extends ByteVector<Int16Array>   {}\n-export class Int32Vector   extends ByteVector<Int32Array>   {}\n-export class Int64Vector   extends LongVector<Int32Array>   {}\n-export class Uint8Vector   extends ByteVector<Uint8Array>   {}\n-export class Uint16Vector  extends ByteVector<Uint16Array>  {}\n-export class Uint32Vector  extends ByteVector<Uint32Array>  {}\n-export class Uint64Vector  extends LongVector<Uint32Array>  {}\n-export class Float32Vector extends ByteVector<Float32Array> {}\n-export class Float64Vector extends ByteVector<Float64Array> {}\n-\n-LongVector.prototype.stride = 2;\n-(Vector.prototype as any).lists = [];\n-(Vector.prototype as any).validity = BitVector.constant;\n-(VirtualVector.prototype as any)._arrayType = Array;\n-(BitVector.prototype as any)._arrayType = Uint8Array;\n-(Int8Vector.prototype as any)._arrayType = Int8Array;\n-(Int16Vector.prototype as any)._arrayType = Int16Array;\n-(Int32Vector.prototype as any)._arrayType = Int32Array;\n-(Int64Vector.prototype as any)._arrayType = Int32Array;\n-(Uint8Vector.prototype as any)._arrayType = Uint8Array;\n-(Uint16Vector.prototype as any)._arrayType = Uint16Array;\n-(Uint32Vector.prototype as any)._arrayType = Uint32Array;\n-(Uint64Vector.prototype as any)._arrayType = Uint32Array;\n-(DateVector.prototype as any)._arrayType = Uint32Array;\n-(IndexVector.prototype as any)._arrayType = Int32Array;\n-(Float32Vector.prototype as any)._arrayType = Float32Array;\n-(Float64Vector.prototype as any)._arrayType = Float64Array;\n-\n-function arraySet<T>(source: Array<T>, target: Array<T>, index: number) {\n-    for (let i = 0, n = source.length; i < n;) {\n-        target[index++] = source[i++];\n-    }\n-    return index;\n-}\n-\n-function typedArraySet(source: TypedArray, target: TypedArray, index: number) {\n-    return target.set(source, index) || index + source.length;\n-}\n-\n-// Rather than eat the iterator cost, we've inlined this function into the relevant functions\n-// function* findVirtual<TList>(index: number, lists: TList[], batch?: number) {\n-//     let rows, length;\n-//     for (batch = (batch || 0) - 1;\n-//         (rows = lists[++batch]) &&\n-//         (length = rows.length) <= index &&\n-//         0 <= (index -= length);) {}\n-//     return rows && -1 < index ? yield [rows, index, batch] : null;\n-// }\n-\n-export type TypedArrayCtor<T extends TypedArray> = {\n-    readonly prototype: T;\n-    readonly BYTES_PER_ELEMENT: number;\n-    new(length: number): T;\n-    new(array: ArrayLike<number>): T;\n-    new(buffer: ArrayBufferLike, byteOffset?: number, length?: number): T;\n-};\n-\n-export type FloatArray = Float32Array | Float64Array;\n-export type IntArray = Int8Array | Int16Array | Int32Array | Uint8ClampedArray | Uint8Array | Uint16Array | Uint32Array;\n-\n-export type TypedArray = (\n-            Int8Array        |\n-            Uint8Array       |\n-            Int16Array       |\n-            Int32Array       |\n-            Uint16Array      |\n-            Uint32Array      |\n-            Float32Array     |\n-            Float64Array     |\n-            Uint8ClampedArray);\ndiff --git a/js/src/vector/vector.ts b/js/src/vector/vector.ts\ndeleted file mode 100644\nindex 1f39f87cb..000000000\n--- a/js/src/vector/vector.ts\n+++ /dev/null\n@@ -1,91 +0,0 @@\n-// Licensed to the Apache Software Foundation (ASF) under one\n-// or more contributor license agreements.  See the NOTICE file\n-// distributed with this work for additional information\n-// regarding copyright ownership.  The ASF licenses this file\n-// to you under the Apache License, Version 2.0 (the\n-// \"License\"); you may not use this file except in compliance\n-// with the License.  You may obtain a copy of the License at\n-//\n-//   http://www.apache.org/licenses/LICENSE-2.0\n-//\n-// Unless required by applicable law or agreed to in writing,\n-// software distributed under the License is distributed on an\n-// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-// KIND, either express or implied.  See the License for the\n-// specific language governing permissions and limitations\n-// under the License.\n-\n-import * as Schema_ from '../format/Schema_generated';\n-export import Type = Schema_.org.apache.arrow.flatbuf.Type;\n-export import Field = Schema_.org.apache.arrow.flatbuf.Field;\n-\n-export function sliceToRangeArgs(length: number, start: number, end?: number) {\n-    let total = length, from = start || 0;\n-    let to = end === end && typeof end == 'number' ? end : total;\n-    if (to < 0) { to = total + to; }\n-    if (from < 0) { from = total - (from * -1) % total; }\n-    if (to < from) { from = to; to = start; }\n-    total = !isFinite(total = (to - from)) || total < 0 ? 0 : total;\n-    return [from, total];\n-}\n-\n-export class Vector<T> implements Iterable<T> {\n-    static defaultName = '';\n-    static defaultProps = new Map();\n-    static defaultType = Type[Type.NONE];\n-    static create<T = any>(field: Field, length: number, ...args: any[]) {\n-        let vector = new this<T>(...args), m;\n-        vector.length = length;\n-        vector.name = field.name();\n-        vector.type = Type[field.typeType()];\n-        if ((m = field.customMetadataLength()) > 0) {\n-            let entry, i = 0, data = vector.props = new Map();\n-            do {\n-                entry = field.customMetadata(i);\n-                data[entry.key()] = entry.value();\n-            } while (++i < m);\n-        }\n-        return vector;\n-    }\n-    static from<T = any>(source: Vector<T>, length: number, ...args: any[]) {\n-        let vector = new this<T>(...args);\n-        vector.length = length;\n-        source.name !== Vector.defaultName && (vector.name = source.name);\n-        source.type !== Vector.defaultType && (vector.type = source.type);\n-        source.props !== Vector.defaultProps && (vector.props = source.props);\n-        return vector;\n-    }\n-    public name: string;\n-    public type: string;\n-    public length: number;\n-    public stride: number;\n-    public props: Map<PropertyKey, any>;\n-    protected validity: Vector<boolean>;\n-    get(index: number): T { return null; }\n-    concat(vector: Vector<T>) { return vector; }\n-    slice<R = T>(start?: number, end?: number, batch?: number) {\n-        const { stride } = this;\n-        const [offset, length] = sliceToRangeArgs(\n-            stride * this.length, stride * (start || 0), stride * end\n-        );\n-        return this.range<R>(offset, length, batch);\n-    }\n-    protected range<R = T>(index: number, length: number, batch?: number) {\n-        const result = new Array<R>(length);\n-        for (let i = -1, n = this.length; ++i < length;) {\n-            result[i] = this.get((i + index) % n) as any;\n-        }\n-        return result as Iterable<R>;\n-    }\n-    *[Symbol.iterator]() {\n-        for (let i = -1, n = this.length; ++i < n;) {\n-            yield this.get(i);\n-        }\n-    }\n-}\n-\n-Vector.prototype.length = 0;\n-Vector.prototype.stride = 1;\n-Vector.prototype.name = Vector.defaultName;\n-Vector.prototype.type = Vector.defaultType;\n-Vector.prototype.props = Vector.defaultProps;\ndiff --git a/js/test/Arrow.ts b/js/test/Arrow.ts\nindex 3f29c5409..722781db6 100644\n--- a/js/test/Arrow.ts\n+++ b/js/test/Arrow.ts\n@@ -18,9 +18,9 @@\n /* tslint:disable */\n // Dynamically load an Ix target build based on command line arguments\n \n-const target = process.env.TEST_TARGET;\n-const format = process.env.TEST_MODULE;\n-const resolve = require('path').resolve;\n+const path = require('path');\n+const target = process.env.TEST_TARGET!;\n+const format = process.env.TEST_MODULE!;\n \n // these are duplicated in the gulpfile :<\n const targets = [`es5`, `es2015`, `esnext`];\n@@ -30,21 +30,24 @@ function throwInvalidImportError(name: string, value: string, values: string[])\n     throw new Error('Unrecognized ' + name + ' \\'' + value + '\\'. Please run tests with \\'--' + name + ' <any of ' + values.join(', ') + '>\\'');\n }\n \n-if (!~targets.indexOf(target)) throwInvalidImportError('target', target, targets);\n-if (!~formats.indexOf(format)) throwInvalidImportError('module', format, formats);\n+let modulePath = ``;\n \n-let Arrow: any = require(resolve(`./targets/${target}/${format}/Arrow.js`));\n+if (target === `ts` || target === `apache-arrow`) modulePath = target;\n+else if (!~targets.indexOf(target)) throwInvalidImportError('target', target, targets);\n+else if (!~formats.indexOf(format)) throwInvalidImportError('module', format, formats);\n+else modulePath = path.join(target, format);\n+\n+let Arrow: any = require(path.resolve(`./targets`, modulePath, `Arrow`));\n \n import {\n     Table as Table_,\n-    readBuffers as readBuffers_,\n     Vector as Vector_,\n-    BitVector as BitVector_,\n+    readBuffers as readBuffers_,\n+    BoolVector as BoolVector_,\n+    TypedVector as TypedVector_,\n     ListVector as ListVector_,\n     Utf8Vector as Utf8Vector_,\n     DateVector as DateVector_,\n-    IndexVector as IndexVector_,\n-    TypedVector as TypedVector_,\n     Int8Vector as Int8Vector_,\n     Int16Vector as Int16Vector_,\n     Int32Vector as Int32Vector_,\n@@ -61,14 +64,13 @@ import {\n } from '../src/Arrow';\n \n export let Table = Arrow.Table as typeof Table_;\n-export let readBuffers = Arrow.readBuffers as typeof readBuffers_;\n export let Vector = Arrow.Vector as typeof Vector_;\n-export let BitVector = Arrow.BitVector as typeof BitVector_;\n+export let readBuffers = Arrow.readBuffers as typeof readBuffers_;\n+export let BoolVector = Arrow.BoolVector as typeof BoolVector_;\n+export let TypedVector = Arrow.TypedVector as typeof TypedVector_;\n export let ListVector = Arrow.ListVector as typeof ListVector_;\n export let Utf8Vector = Arrow.Utf8Vector as typeof Utf8Vector_;\n export let DateVector = Arrow.DateVector as typeof DateVector_;\n-export let IndexVector = Arrow.IndexVector as typeof IndexVector_;\n-export let TypedVector = Arrow.TypedVector as typeof TypedVector_;\n export let Int8Vector = Arrow.Int8Vector as typeof Int8Vector_;\n export let Int16Vector = Arrow.Int16Vector as typeof Int16Vector_;\n export let Int32Vector = Arrow.Int32Vector as typeof Int32Vector_;\ndiff --git a/js/test/__snapshots__/table-tests.ts.snap b/js/test/__snapshots__/table-tests.ts.snap\nindex a7fb9c5a6..401b992d9 100644\n--- a/js/test/__snapshots__/table-tests.ts.snap\n+++ b/js/test/__snapshots__/table-tests.ts.snap\n@@ -118,19 +118,19 @@ Array [\n `;\n \n exports[`dictionary file Arrow Table toString() prints a pretty Table 1`] = `\n-\"                                       example-csv\n-Hermione,25,-53.235599517822266,40.231998443603516\n-                   Severus,30,-62.22999954223633,3\n-                   Harry,20,23,-100.23652648925781\"\n+\"                                                     example-csv\n+[\\\\\"Hermione\\\\\",25,{\\\\\"0\\\\\":-53.235599517822266,\\\\\"1\\\\\":40.231998443603516}]\n+                   [\\\\\"Severus\\\\\",30,{\\\\\"0\\\\\":-62.22999954223633,\\\\\"1\\\\\":3}]\n+                   [\\\\\"Harry\\\\\",20,{\\\\\"0\\\\\":23,\\\\\"1\\\\\":-100.23652648925781}]\"\n `;\n \n exports[`dictionary file Arrow Table toString() prints an empty Table 1`] = `\"\"`;\n \n exports[`dictionary file Arrow Table toString({ index: true }) prints a pretty Table with an Index column 1`] = `\n-\"Index,                                        example-csv\n-    0, Hermione,25,-53.235599517822266,40.231998443603516\n-    1,                    Severus,30,-62.22999954223633,3\n-    2,                    Harry,20,23,-100.23652648925781\"\n+\"Index,                                                      example-csv\n+    0, [\\\\\"Hermione\\\\\",25,{\\\\\"0\\\\\":-53.235599517822266,\\\\\"1\\\\\":40.231998443603516}]\n+    1,                    [\\\\\"Severus\\\\\",30,{\\\\\"0\\\\\":-62.22999954223633,\\\\\"1\\\\\":3}]\n+    2,                    [\\\\\"Harry\\\\\",20,{\\\\\"0\\\\\":23,\\\\\"1\\\\\":-100.23652648925781}]\"\n `;\n \n exports[`dictionary stream Arrow Table creates a Table from Arrow buffers 1`] = `\"example-csv\"`;\n@@ -251,19 +251,19 @@ Array [\n `;\n \n exports[`dictionary stream Arrow Table toString() prints a pretty Table 1`] = `\n-\"                                       example-csv\n-Hermione,25,-53.235599517822266,40.231998443603516\n-                   Severus,30,-62.22999954223633,3\n-                   Harry,20,23,-100.23652648925781\"\n+\"                                                     example-csv\n+[\\\\\"Hermione\\\\\",25,{\\\\\"0\\\\\":-53.235599517822266,\\\\\"1\\\\\":40.231998443603516}]\n+                   [\\\\\"Severus\\\\\",30,{\\\\\"0\\\\\":-62.22999954223633,\\\\\"1\\\\\":3}]\n+                   [\\\\\"Harry\\\\\",20,{\\\\\"0\\\\\":23,\\\\\"1\\\\\":-100.23652648925781}]\"\n `;\n \n exports[`dictionary stream Arrow Table toString() prints an empty Table 1`] = `\"\"`;\n \n exports[`dictionary stream Arrow Table toString({ index: true }) prints a pretty Table with an Index column 1`] = `\n-\"Index,                                        example-csv\n-    0, Hermione,25,-53.235599517822266,40.231998443603516\n-    1,                    Severus,30,-62.22999954223633,3\n-    2,                    Harry,20,23,-100.23652648925781\"\n+\"Index,                                                      example-csv\n+    0, [\\\\\"Hermione\\\\\",25,{\\\\\"0\\\\\":-53.235599517822266,\\\\\"1\\\\\":40.231998443603516}]\n+    1,                    [\\\\\"Severus\\\\\",30,{\\\\\"0\\\\\":-62.22999954223633,\\\\\"1\\\\\":3}]\n+    2,                    [\\\\\"Harry\\\\\",20,{\\\\\"0\\\\\":23,\\\\\"1\\\\\":-100.23652648925781}]\"\n `;\n \n exports[`dictionary2 file Arrow Table creates a Table from Arrow buffers 1`] = `\"struct\"`;\n@@ -353,17 +353,17 @@ Array [\n `;\n \n exports[`dictionary2 file Arrow Table toString() prints a pretty Table 1`] = `\n-\"                                                                                      struct\n- a0fb47f9-f8fb-4403-a64a-786d7611f8ef,Airbus,1502880750,32.45663833618164,1.8712350130081177\n-50fb46f4-fefa-42c1-919c-0121974cdd00,Boeing,1502880750,38.766666412353516,-4.181231498718262\"\n+\"                                                                                                      struct\n+ [\\\\\"a0fb47f9-f8fb-4403-a64a-786d7611f8ef\\\\\",\\\\\"Airbus\\\\\",1502880750,{\\\\\"0\\\\\":32.45663833618164,\\\\\"1\\\\\":1.8712350130081177}]\n+[\\\\\"50fb46f4-fefa-42c1-919c-0121974cdd00\\\\\",\\\\\"Boeing\\\\\",1502880750,{\\\\\"0\\\\\":38.766666412353516,\\\\\"1\\\\\":-4.181231498718262}]\"\n `;\n \n exports[`dictionary2 file Arrow Table toString() prints an empty Table 1`] = `\"\"`;\n \n exports[`dictionary2 file Arrow Table toString({ index: true }) prints a pretty Table with an Index column 1`] = `\n-\"Index,                                                                                       struct\n-    0,  a0fb47f9-f8fb-4403-a64a-786d7611f8ef,Airbus,1502880750,32.45663833618164,1.8712350130081177\n-    1, 50fb46f4-fefa-42c1-919c-0121974cdd00,Boeing,1502880750,38.766666412353516,-4.181231498718262\"\n+\"Index,                                                                                                       struct\n+    0,  [\\\\\"a0fb47f9-f8fb-4403-a64a-786d7611f8ef\\\\\",\\\\\"Airbus\\\\\",1502880750,{\\\\\"0\\\\\":32.45663833618164,\\\\\"1\\\\\":1.8712350130081177}]\n+    1, [\\\\\"50fb46f4-fefa-42c1-919c-0121974cdd00\\\\\",\\\\\"Boeing\\\\\",1502880750,{\\\\\"0\\\\\":38.766666412353516,\\\\\"1\\\\\":-4.181231498718262}]\"\n `;\n \n exports[`multi_dictionary file Arrow Table creates a Table from Arrow buffers 1`] = `\"struct\"`;\n@@ -459,17 +459,17 @@ Array [\n `;\n \n exports[`multi_dictionary file Arrow Table toString() prints a pretty Table 1`] = `\n-\"                                                                                            struct\n- a0fb47f9-f8fb-4403-a64a-786d7611f8ef,12345,Airbus,1502880750,32.45663833618164,1.8712350130081177\n-50fb46f4-fefa-42c1-919c-0121974cdd00,67890,Boeing,1502880750,38.766666412353516,-4.181231498718262\"\n+\"                                                                                                              struct\n+ [\\\\\"a0fb47f9-f8fb-4403-a64a-786d7611f8ef\\\\\",\\\\\"12345\\\\\",\\\\\"Airbus\\\\\",1502880750,{\\\\\"0\\\\\":32.45663833618164,\\\\\"1\\\\\":1.8712350130081177}]\n+[\\\\\"50fb46f4-fefa-42c1-919c-0121974cdd00\\\\\",\\\\\"67890\\\\\",\\\\\"Boeing\\\\\",1502880750,{\\\\\"0\\\\\":38.766666412353516,\\\\\"1\\\\\":-4.181231498718262}]\"\n `;\n \n exports[`multi_dictionary file Arrow Table toString() prints an empty Table 1`] = `\"\"`;\n \n exports[`multi_dictionary file Arrow Table toString({ index: true }) prints a pretty Table with an Index column 1`] = `\n-\"Index,                                                                                             struct\n-    0,  a0fb47f9-f8fb-4403-a64a-786d7611f8ef,12345,Airbus,1502880750,32.45663833618164,1.8712350130081177\n-    1, 50fb46f4-fefa-42c1-919c-0121974cdd00,67890,Boeing,1502880750,38.766666412353516,-4.181231498718262\"\n+\"Index,                                                                                                               struct\n+    0,  [\\\\\"a0fb47f9-f8fb-4403-a64a-786d7611f8ef\\\\\",\\\\\"12345\\\\\",\\\\\"Airbus\\\\\",1502880750,{\\\\\"0\\\\\":32.45663833618164,\\\\\"1\\\\\":1.8712350130081177}]\n+    1, [\\\\\"50fb46f4-fefa-42c1-919c-0121974cdd00\\\\\",\\\\\"67890\\\\\",\\\\\"Boeing\\\\\",1502880750,{\\\\\"0\\\\\":38.766666412353516,\\\\\"1\\\\\":-4.181231498718262}]\"\n `;\n \n exports[`multipart count Arrow Table creates a Table from Arrow buffers 1`] = `\"row_count\"`;\n@@ -1373,47 +1373,47 @@ Array [\n `;\n \n exports[`struct file Arrow Table toString() prints a pretty Table 1`] = `\n-\"  struct_nullable\n-             null\n-         ,MhRNxD4\n-137773603,3F9HBxK\n-410361374,aVd88fp\n-             null\n-         ,3loZrRf\n-             null\n-             null\n-                ,\n-                ,\n-             null\n-         ,78SLiRw\n-             null\n-             null\n-         ,0ilsf82\n-         ,LjS9MbU\n-                ,\"\n+\"      struct_nullable\n+                 null\n+     [null,\\\\\"MhRNxD4\\\\\"]\n+[137773603,\\\\\"3F9HBxK\\\\\"]\n+[410361374,\\\\\"aVd88fp\\\\\"]\n+                 null\n+     [null,\\\\\"3loZrRf\\\\\"]\n+                 null\n+                 null\n+          [null,null]\n+          [null,null]\n+                 null\n+     [null,\\\\\"78SLiRw\\\\\"]\n+                 null\n+                 null\n+     [null,\\\\\"0ilsf82\\\\\"]\n+     [null,\\\\\"LjS9MbU\\\\\"]\n+          [null,null]\"\n `;\n \n exports[`struct file Arrow Table toString() prints an empty Table 1`] = `\"\"`;\n \n exports[`struct file Arrow Table toString({ index: true }) prints a pretty Table with an Index column 1`] = `\n-\"Index,   struct_nullable\n-    0,              null\n-    1,          ,MhRNxD4\n-    2, 137773603,3F9HBxK\n-    3, 410361374,aVd88fp\n-    4,              null\n-    5,          ,3loZrRf\n-    6,              null\n-    7,              null\n-    8,                 ,\n-    9,                 ,\n-   10,              null\n-   11,          ,78SLiRw\n-   12,              null\n-   13,              null\n-   14,          ,0ilsf82\n-   15,          ,LjS9MbU\n-   16,                 ,\"\n+\"Index,       struct_nullable\n+    0,                  null\n+    1,      [null,\\\\\"MhRNxD4\\\\\"]\n+    2, [137773603,\\\\\"3F9HBxK\\\\\"]\n+    3, [410361374,\\\\\"aVd88fp\\\\\"]\n+    4,                  null\n+    5,      [null,\\\\\"3loZrRf\\\\\"]\n+    6,                  null\n+    7,                  null\n+    8,           [null,null]\n+    9,           [null,null]\n+   10,                  null\n+   11,      [null,\\\\\"78SLiRw\\\\\"]\n+   12,                  null\n+   13,                  null\n+   14,      [null,\\\\\"0ilsf82\\\\\"]\n+   15,      [null,\\\\\"LjS9MbU\\\\\"]\n+   16,           [null,null]\"\n `;\n \n exports[`struct stream Arrow Table creates a Table from Arrow buffers 1`] = `\"struct_nullable\"`;\n@@ -1771,45 +1771,45 @@ Array [\n `;\n \n exports[`struct stream Arrow Table toString() prints a pretty Table 1`] = `\n-\"  struct_nullable\n-             null\n-         ,MhRNxD4\n-137773603,3F9HBxK\n-410361374,aVd88fp\n-             null\n-         ,3loZrRf\n-             null\n-             null\n-                ,\n-                ,\n-             null\n-         ,78SLiRw\n-             null\n-             null\n-         ,0ilsf82\n-         ,LjS9MbU\n-                ,\"\n+\"      struct_nullable\n+                 null\n+     [null,\\\\\"MhRNxD4\\\\\"]\n+[137773603,\\\\\"3F9HBxK\\\\\"]\n+[410361374,\\\\\"aVd88fp\\\\\"]\n+                 null\n+     [null,\\\\\"3loZrRf\\\\\"]\n+                 null\n+                 null\n+          [null,null]\n+          [null,null]\n+                 null\n+     [null,\\\\\"78SLiRw\\\\\"]\n+                 null\n+                 null\n+     [null,\\\\\"0ilsf82\\\\\"]\n+     [null,\\\\\"LjS9MbU\\\\\"]\n+          [null,null]\"\n `;\n \n exports[`struct stream Arrow Table toString() prints an empty Table 1`] = `\"\"`;\n \n exports[`struct stream Arrow Table toString({ index: true }) prints a pretty Table with an Index column 1`] = `\n-\"Index,   struct_nullable\n-    0,              null\n-    1,          ,MhRNxD4\n-    2, 137773603,3F9HBxK\n-    3, 410361374,aVd88fp\n-    4,              null\n-    5,          ,3loZrRf\n-    6,              null\n-    7,              null\n-    8,                 ,\n-    9,                 ,\n-   10,              null\n-   11,          ,78SLiRw\n-   12,              null\n-   13,              null\n-   14,          ,0ilsf82\n-   15,          ,LjS9MbU\n-   16,                 ,\"\n+\"Index,       struct_nullable\n+    0,                  null\n+    1,      [null,\\\\\"MhRNxD4\\\\\"]\n+    2, [137773603,\\\\\"3F9HBxK\\\\\"]\n+    3, [410361374,\\\\\"aVd88fp\\\\\"]\n+    4,                  null\n+    5,      [null,\\\\\"3loZrRf\\\\\"]\n+    6,                  null\n+    7,                  null\n+    8,           [null,null]\n+    9,           [null,null]\n+   10,                  null\n+   11,      [null,\\\\\"78SLiRw\\\\\"]\n+   12,                  null\n+   13,                  null\n+   14,      [null,\\\\\"0ilsf82\\\\\"]\n+   15,      [null,\\\\\"LjS9MbU\\\\\"]\n+   16,           [null,null]\"\n `;\ndiff --git a/js/test/table-tests.ts b/js/test/table-tests.ts\nindex c84029915..d0d70059e 100644\n--- a/js/test/table-tests.ts\n+++ b/js/test/table-tests.ts\n@@ -23,7 +23,7 @@ for (let [name, ...buffers] of arrowTestConfigurations) {\n         test(`creates a Table from Arrow buffers`, () => {\n             expect.hasAssertions();\n             const table = Table.from(...buffers);\n-            for (const vector of table.cols()) {\n+            for (const vector of table.columns) {\n                 expect(vector.name).toMatchSnapshot();\n                 expect(vector.type).toMatchSnapshot();\n                 expect(vector.length).toMatchSnapshot();\n@@ -35,7 +35,7 @@ for (let [name, ...buffers] of arrowTestConfigurations) {\n         test(`vector iterators report the same values as get`, () => {\n             expect.hasAssertions();\n             const table = Table.from(...buffers);\n-            for (const vector of table.cols()) {\n+            for (const vector of table.columns) {\n                 let i = -1, n = vector.length;\n                 for (let v of vector) {\n                     expect(++i).toBeLessThan(n);\n@@ -46,12 +46,13 @@ for (let [name, ...buffers] of arrowTestConfigurations) {\n         });\n         test(`batch and Table Vectors report the same values`, () => {\n             expect.hasAssertions();\n-            let rowsTotal = 0, table = Table.from(...buffers);\n+            let rowsTotal = 0;\n+            let table = Table.from(...buffers);\n             for (let vectors of readBuffers(...buffers)) {\n                 let rowsNow = Math.max(...vectors.map((v) => v.length));\n                 for (let vi = -1, vn = vectors.length; ++vi < vn;) {\n                     let v1 = vectors[vi];\n-                    let v2 = table.getColumnAt(vi);\n+                    let v2 = table.columns[vi];\n                     expect(v1.name).toEqual(v2.name);\n                     expect(v1.type).toEqual(v2.type);\n                     for (let i = -1, n = v1.length; ++i < n;) {\n@@ -64,15 +65,15 @@ for (let [name, ...buffers] of arrowTestConfigurations) {\n         test(`enumerates Table rows`, () => {\n             expect.hasAssertions();\n             const table = Table.from(...buffers);\n-            for (const row of table.rows()) {\n-                expect(row).toMatchSnapshot();\n+            for (const row of table) {\n+                expect(row!.toObject()).toMatchSnapshot();\n             }\n         });\n         test(`enumerates Table rows compact`, () => {\n             expect.hasAssertions();\n             const table = Table.from(...buffers);\n-            for (const row of table.rows(true)) {\n-                expect(row).toMatchSnapshot();\n+            for (const row of table) {\n+                expect(row!.toArray()).toMatchSnapshot();\n             }\n         });\n         test(`toString() prints an empty Table`, () => {\ndiff --git a/js/test/test-config.ts b/js/test/test-config.ts\nindex b31ff11ad..89de1cc6c 100644\n--- a/js/test/test-config.ts\n+++ b/js/test/test-config.ts\n@@ -20,7 +20,7 @@ import * as path from 'path';\n const arrowFormats = ['file', 'stream'];\n const arrowFileNames = ['simple', 'struct', 'dictionary', 'dictionary2', 'multi_dictionary'];\n const multipartArrows = ['count', 'latlong', 'origins'];\n-export let arrowTestConfigurations = [];\n+export let arrowTestConfigurations = [] as (string | Buffer)[][];\n \n arrowTestConfigurations = arrowFormats.reduce((configs, format) => {\n     return arrowFileNames.reduce((configs, name) => {\ndiff --git a/js/test/vector-tests.ts b/js/test/vector-tests.ts\nindex 0c9ef4404..0eca2327b 100644\n--- a/js/test/vector-tests.ts\n+++ b/js/test/vector-tests.ts\n@@ -18,7 +18,7 @@\n import { flatbuffers } from 'flatbuffers';\n import Long = flatbuffers.Long;\n import {\n-    BitVector,\n+    BoolVector,\n     TypedVector,\n     Int64Vector,\n     Uint64Vector,\n@@ -32,22 +32,34 @@ import {\n     Float64Vector,\n } from './Arrow';\n \n-const LongVectors = { Int64Vector, Uint64Vector };\n-const ByteVectors = { Int8Vector, Int16Vector, Int32Vector, Uint8Vector, Uint16Vector, Uint32Vector, Float32Vector, Float64Vector };\n+const LongVectors = {\n+    Int64Vector: [Int64Vector, Int32Array],\n+    Uint64Vector: [Uint64Vector, Uint32Array]\n+};\n \n-const longVectors = toMap<typeof TypedVector>(LongVectors, Object.keys(LongVectors));\n-const byteVectors = toMap<typeof TypedVector>(ByteVectors, Object.keys(ByteVectors));\n+const TypedVectors = {\n+    Int8Vector: [Int8Vector, Int8Array],\n+    Int16Vector: [Int16Vector, Int16Array],\n+    Int32Vector: [Int32Vector, Int32Array],\n+    Uint8Vector: [Uint8Vector, Uint8Array],\n+    Uint16Vector: [Uint16Vector, Uint16Array],\n+    Uint32Vector: [Uint32Vector, Uint32Array],\n+    Float32Vector: [Float32Vector, Float32Array],\n+    Float64Vector: [Float64Vector, Float64Array]\n+};\n+\n+const longVectors = toMap<[typeof TypedVector, any]>(LongVectors, Object.keys(LongVectors));\n+const byteVectors = toMap<[typeof TypedVector, any]>(TypedVectors, Object.keys(TypedVectors));\n const bytes = Array.from(\n     { length: 5 },\n     () => Uint8Array.from(\n         { length: 64 },\n         () => Math.random() * 255 | 0));\n \n-describe(`BitVector`, () => {\n-    const vector = new BitVector(new Uint8Array([27, 0, 0, 0, 0, 0, 0, 0]));\n+describe(`BoolVector`, () => {\n+    const vector = new BoolVector({ data: new Uint8Array([27, 0, 0, 0, 0, 0, 0, 0]) });\n     const values = [true, true, false, true, true, false, false, false];\n     const n = values.length;\n-    vector.length = 1;\n     test(`gets expected values`, () => {\n         let i = -1;\n         while (++i < n) {\n@@ -62,11 +74,11 @@ describe(`BitVector`, () => {\n         }\n     });\n     test(`can set values to true and false`, () => {\n-        const v = new BitVector(new Uint8Array([27, 0, 0, 0, 0, 0, 0, 0]));\n+        const v = new BoolVector({ data: new Uint8Array([27, 0, 0, 0, 0, 0, 0, 0]) });\n         const expected1 = [true, true, false, true, true, false, false, false];\n         const expected2 = [true, true,  true, true, true, false, false, false];\n         const expected3 = [true, true, false, false, false, false, true, true];\n-        function validate(expected) {\n+        function validate(expected: boolean[]) {\n             for (let i = -1; ++i < n;) {\n                 expect(v.get(i)).toEqual(expected[i]);\n             }\n@@ -88,40 +100,42 @@ describe(`BitVector`, () => {\n         validate(expected1);\n     });\n     test(`packs 0 values`, () => {\n-        expect(BitVector.pack([])).toEqual(\n+        expect(BoolVector.pack([])).toEqual(\n             new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0]));\n     });\n     test(`packs 3 values`, () => {\n-        expect(BitVector.pack([\n+        expect(BoolVector.pack([\n             true, false, true\n         ])).toEqual(new Uint8Array([5, 0, 0, 0, 0, 0, 0, 0]));\n     });\n     test(`packs 8 values`, () => {\n-        expect(BitVector.pack([\n+        expect(BoolVector.pack([\n             true, true, false, true, true, false, false, false\n         ])).toEqual(new Uint8Array([27, 0, 0, 0, 0, 0, 0, 0]));\n     });\n     test(`packs 25 values`, () => {\n-        expect(BitVector.pack([\n+        expect(BoolVector.pack([\n             true, true, false, true, true, false, false, false,\n             false, false, false, true, true, false, true, true,\n             false\n         ])).toEqual(new Uint8Array([27, 216, 0, 0, 0, 0, 0, 0]));\n     });\n     test(`from with boolean Array packs values`, () => {\n-        expect(BitVector.from([\n-            true, false, true\n-        ]).slice()).toEqual(new Uint8Array([5, 0, 0, 0, 0, 0, 0, 0]));\n+        expect(new BoolVector({\n+            data: BoolVector.pack([true, false, true])\n+        }).slice()).toEqual(new Uint8Array([5, 0, 0, 0, 0, 0, 0, 0]));\n     });\n });\n \n-for (const [VectorName, VectorType] of longVectors) {\n-    const ArrayType = VectorType.prototype.arrayType;\n+for (const [VectorName, [VectorType, ArrayType]] of longVectors) {\n     describe(`${VectorName}`, () => {\n         const values = concatTyped(ArrayType, ...bytes);\n-        const bLists = bytes.map((b) => new ArrayType(b.buffer));\n-        const vector = new VectorType(null, ...bLists);\n-        const n = vector.length = values.length * 0.5;\n+        const vector = bytes\n+            .map((b) => new VectorType<Long, any>({\n+                data: new ArrayType(b.buffer)\n+            }))\n+            .reduce((v: any, v2) => v.concat(v2));\n+        const n = values.length * 0.5;\n         test(`gets expected values`, () => {\n             let i = -1;\n             while (++i < n) {\n@@ -161,13 +175,16 @@ for (const [VectorName, VectorType] of longVectors) {\n     });\n }\n \n-for (const [VectorName, VectorType] of byteVectors) {\n-    const ArrayType = VectorType.prototype.arrayType;\n+for (const [VectorName, [VectorType, ArrayType]] of byteVectors) {\n     describe(`${VectorName}`, () => {\n         const values = concatTyped(ArrayType, ...bytes);\n-        const bLists = bytes.map((b) => new ArrayType(b.buffer));\n-        const vector = new VectorType(null, ...bLists);\n-        const n = vector.length = values.length;\n+        const vector = bytes\n+            .map((b) => new VectorType<number, any>({\n+                data: new ArrayType(b.buffer)\n+            }))\n+            .reduce((v: any, v2) => v.concat(v2));\n+\n+        const n = values.length;\n         test(`gets expected values`, () => {\n             let i = -1;\n             while (++i < n) {\n@@ -212,9 +229,9 @@ function toMap<T>(entries: any, keys: string[]) {\n }\n \n function concatTyped(ArrayType: any, ...bytes: any[]) {\n-    const BPM = ArrayType.BYTES_PER_ELEMENT;\n+    const BPE = ArrayType.BYTES_PER_ELEMENT;\n     return bytes.reduce((v, bytes) => {\n-        const l = bytes.byteLength / BPM;\n+        const l = bytes.byteLength / BPE;\n         const a = new ArrayType(v.length + l);\n         const b = new ArrayType(bytes.buffer);\n         a.set(v);\ndiff --git a/js/tsconfig/tsconfig.base.json b/js/tsconfig/tsconfig.base.json\nindex 4a46ed1f0..8b8210198 100644\n--- a/js/tsconfig/tsconfig.base.json\n+++ b/js/tsconfig/tsconfig.base.json\n@@ -3,23 +3,33 @@\n   \"include\": [\"../src/**/*.ts\"],\n   \"compileOnSave\": false,\n   \"compilerOptions\": {\n-    \"lib\": [\"dom\", \"esnext\", \"esnext.asynciterable\"],\n+\n+    /* Basic stuff */\n     \"moduleResolution\": \"node\",\n+    \"lib\": [\"dom\", \"esnext\", \"esnext.asynciterable\"],\n+\n+    /* Control what is emitted */\n+    \"declaration\": true,\n+    \"noEmitOnError\": true,\n+    \"removeComments\": false,\n+    \"downlevelIteration\": true,\n+\n+    /* Create inline sourcemaps with sources */\n     \"sourceMap\": false,\n     \"inlineSources\": true,\n     \"inlineSourceMap\": true,\n-    \"declaration\": true,\n-    \"skipLibCheck\": true,\n+\n+    /* The most restrictive settings possible */\n+    \"strict\": true,\n+    \"skipLibCheck\": false,\n     \"importHelpers\": true,\n     \"noEmitHelpers\": true,\n-    \"noImplicitAny\": false,\n-    \"noEmitOnError\": false,\n-    \"noImplicitThis\": true,\n+    \"noImplicitAny\": true,\n     \"noUnusedLocals\": true,\n-    \"removeComments\": false,\n-    \"downlevelIteration\": true,\n-    \"noImplicitUseStrict\": true,\n-    \"preserveConstEnums\": false,\n+    \"noImplicitReturns\": true,\n+    \"allowUnusedLabels\": false,\n+    \"noUnusedParameters\": true,\n+    \"allowUnreachableCode\": false,\n     \"noFallthroughCasesInSwitch\": true,\n     \"forceConsistentCasingInFileNames\": true\n   }\ndiff --git a/js/tsconfig/tsconfig.es2015.cls.json b/js/tsconfig/tsconfig.es2015.cls.json\nindex 11ccc04d5..fccacb349 100644\n--- a/js/tsconfig/tsconfig.es2015.cls.json\n+++ b/js/tsconfig/tsconfig.es2015.cls.json\n@@ -4,7 +4,8 @@\n   \"compilerOptions\": {\n     \"target\": \"ES2015\",\n     \"module\": \"es2015\",\n+    \"declaration\": false,\n     \"noEmitHelpers\": true,\n-    \"importHelpers\": false\n+    \"importHelpers\": true\n   }\n }\ndiff --git a/js/tsconfig/tsconfig.es5.cls.json b/js/tsconfig/tsconfig.es5.cls.json\nindex 55f7ea52c..6e6f213b4 100644\n--- a/js/tsconfig/tsconfig.es5.cls.json\n+++ b/js/tsconfig/tsconfig.es5.cls.json\n@@ -4,6 +4,7 @@\n   \"compilerOptions\": {\n     \"target\": \"ES5\",\n     \"module\": \"es2015\",\n+    \"declaration\": false,\n     \"noEmitHelpers\": true,\n     \"importHelpers\": false\n   }\ndiff --git a/js/tsconfig/tsconfig.esnext.cls.json b/js/tsconfig/tsconfig.esnext.cls.json\nindex 009a5ac10..03206c9d7 100644\n--- a/js/tsconfig/tsconfig.esnext.cls.json\n+++ b/js/tsconfig/tsconfig.esnext.cls.json\n@@ -4,7 +4,8 @@\n   \"compilerOptions\": {\n     \"target\": \"ESNEXT\",\n     \"module\": \"es2015\",\n+    \"declaration\": false,\n     \"noEmitHelpers\": true,\n-    \"importHelpers\": false\n+    \"importHelpers\": true\n   }\n }\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-03T21:45:06.894+0000",
                    "updated": "2017-11-03T21:45:06.894+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13107262/comment/16238437",
                    "id": "16238437",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 1273\n[https://github.com/apache/arrow/pull/1273]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2017-11-03T21:45:08.757+0000",
                    "updated": "2017-11-03T21:45:08.757+0000"
                }
            ],
            "maxResults": 32,
            "total": 32,
            "startAt": 0
        },
        "customfield_12311820": "0|i3kx6n:",
        "customfield_12314139": null
    }
}