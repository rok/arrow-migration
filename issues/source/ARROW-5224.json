{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13230513",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13230513",
    "key": "ARROW-5224",
    "fields": {
        "fixVersions": [],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/10011",
            "id": "10011",
            "description": "Won't Do",
            "name": "Won't Do"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
            "name": "Minor",
            "id": "4"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12559830",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12559830",
                "type": {
                    "id": "10032",
                    "name": "Blocker",
                    "inward": "is blocked by",
                    "outward": "blocks",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10032"
                },
                "inwardIssue": {
                    "id": "13229753",
                    "key": "ARROW-5206",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13229753",
                    "fields": {
                        "summary": "[Java] Add APIs in MessageSerializer to directly serialize/deserialize ArrowBuf",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                            "name": "Closed",
                            "id": "6",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
                            "name": "Minor",
                            "id": "4"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": null,
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
            "name": "Closed",
            "id": "6",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328933",
                "id": "12328933",
                "name": "Java"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=tianchen92",
            "name": "tianchen92",
            "key": "tianchen92",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=tianchen92&avatarId=40800",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=tianchen92&avatarId=40800",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=tianchen92&avatarId=40800",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=tianchen92&avatarId=40800"
            },
            "displayName": "Ji Liu",
            "active": true,
            "timeZone": "Asia/Gaza"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=tianchen92",
            "name": "tianchen92",
            "key": "tianchen92",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=tianchen92&avatarId=40800",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=tianchen92&avatarId=40800",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=tianchen92&avatarId=40800",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=tianchen92&avatarId=40800"
            },
            "displayName": "Ji Liu",
            "active": true,
            "timeZone": "Asia/Gaza"
        },
        "aggregateprogress": {
            "progress": 10800,
            "total": 10800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 10800,
            "total": 10800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-5224/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 20,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13230513/worklog/239660",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "tianchen92 commented on pull request #4280: ARROW-5224: [Java] Add APIs for supporting directly serialize/deserialize ValueVector\nURL: https://github.com/apache/arrow/pull/4280\n \n \n   related to [ARROW-5224](https://issues.apache.org/jira/browse/ARROW-5224).\r\n   \r\n   There is no API to directly serialize/deserialize ValueVector. The only way to implement this is to put a single FieldVector in VectorSchemaRoot and convert it to ArrowRecordBatch, and the deserialize process is as well. \r\n   \r\n   Provide a utility class to implement this may be better, I know all serializations should follow IPC format so that data can be shared between different Arrow implementations. But for users who only use Java API and want to do some further optimization, this seem to be no problem and we could provide them a more option.\r\n   \r\n   This may take some benefits for Java user who only use ValueVector rather than IPC series classes such as ArrowReordBatch:\r\n   \r\n   We could do some shuffle optimization such as compression and some encoding algorithm for numerical type which could greatly improve performance.\r\n   Do serialize/deserialize with the actual buffer size within vector since the buffer size is power of 2 which is actually bigger than it really need.\r\n   Reduce data conversion(VectorSchemaRoot, ArrowRecordBatch etc) to make it user-friendly.\r\n    \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-09T09:13:38.263+0000",
                    "updated": "2019-05-09T09:13:38.263+0000",
                    "started": "2019-05-09T09:13:38.262+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "239660",
                    "issueId": "13230513"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13230513/worklog/240813",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "tianchen92 commented on pull request #4280: ARROW-5224: [Java] Add APIs for supporting directly serialize/deserialize ValueVector\nURL: https://github.com/apache/arrow/pull/4280\n \n \n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-13T02:44:41.075+0000",
                    "updated": "2019-05-13T02:44:41.075+0000",
                    "started": "2019-05-13T02:44:41.072+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "240813",
                    "issueId": "13230513"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13230513/worklog/240814",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "tianchen92 commented on pull request #4280: ARROW-5224: [Java] Add APIs for supporting directly serialize/deserialize ValueVector\nURL: https://github.com/apache/arrow/pull/4280\n \n \n   related to [ARROW-5224](https://issues.apache.org/jira/browse/ARROW-5224).\r\n   \r\n   There is no API to directly serialize/deserialize ValueVector. The only way to implement this is to put a single FieldVector in VectorSchemaRoot and convert it to ArrowRecordBatch, and the deserialize process is as well. \r\n   \r\n   Provide a utility class to implement this may be better, I know all serializations should follow IPC format so that data can be shared between different Arrow implementations. But for users who only use Java API and want to do some further optimization, this seem to be no problem and we could provide them a more option.\r\n   \r\n   This may take some benefits for Java user who only use ValueVector rather than IPC series classes such as ArrowReordBatch:\r\n   \r\n   We could do some shuffle optimization such as compression and some encoding algorithm for numerical type which could greatly improve performance.\r\n   Do serialize/deserialize with the actual buffer size within vector since the buffer size is power of 2 which is actually bigger than it really need.\r\n   Reduce data conversion(VectorSchemaRoot, ArrowRecordBatch etc) to make it user-friendly.\r\n    \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-13T02:44:43.635+0000",
                    "updated": "2019-05-13T02:44:43.635+0000",
                    "started": "2019-05-13T02:44:43.635+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "240814",
                    "issueId": "13230513"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13230513/worklog/240815",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "tianchen92 commented on issue #4280: ARROW-5224: [Java] Add APIs for supporting directly serialize/deserialize ValueVector\nURL: https://github.com/apache/arrow/pull/4280#issuecomment-491657904\n \n \n   cc @BryanCutler , could you please take a look? thanks\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-13T02:45:11.673+0000",
                    "updated": "2019-05-13T02:45:11.673+0000",
                    "started": "2019-05-13T02:45:11.672+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "240815",
                    "issueId": "13230513"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13230513/worklog/240829",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #4280: ARROW-5224: [Java] Add APIs for supporting directly serialize/deserialize ValueVector\nURL: https://github.com/apache/arrow/pull/4280#discussion_r283180438\n \n \n\n ##########\n File path: java/vector/src/test/java/org/apache/arrow/vector/util/TestFieldVectorUtility.java\n ##########\n @@ -0,0 +1,92 @@\n+package org.apache.arrow.vector.util;\n+\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.arrow.vector.IntVector;\n+import org.apache.arrow.vector.VarCharVector;\n+import org.apache.arrow.vector.ipc.ReadChannel;\n+import org.apache.arrow.vector.ipc.WriteChannel;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.nio.channels.Channels;\n+\n+public class TestFieldVectorUtility {\n+\n+  private BufferAllocator allocator;\n+\n+  @Before\n+  public void init() {\n+    allocator = new RootAllocator(Long.MAX_VALUE);\n+  }\n+\n+  @After\n+  public void terminate() throws Exception {\n+    allocator.close();\n+  }\n+\n+  @Test\n+  public void testBaseFixedWidthVector() throws Exception {\n+    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n+    WriteChannel out = new WriteChannel(Channels.newChannel(outputStream));\n+\n+    final int valueCount = 1000;\n+\n+    IntVector vector = new IntVector(\"f0\", allocator);\n+    vector.setValueCount(valueCount);\n+    for (int i = 0; i < valueCount; i++) {\n+      vector.set(i, i);\n+    }\n+    FieldVectorUtility.serializeFieldVector(out, vector);\n+\n+\n+    ByteArrayInputStream inputStream = new ByteArrayInputStream(outputStream.toByteArray());\n+    ReadChannel in = new ReadChannel(Channels.newChannel(inputStream));\n+\n+    IntVector deserialized = new IntVector(\"f0\", allocator);\n+    FieldVectorUtility.deserializeFieldVector(in, deserialized);\n+\n+    assertEquals(deserialized.getValueCount(), valueCount);\n+    assertEquals(deserialized.get(10), 10);\n+\n+    vector.clear();\n+    deserialized.clear();\n+\n+  }\n+\n+  @Test\n+  public void testBaseVariableWidthVector() throws Exception {\n+    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n+    WriteChannel out = new WriteChannel(Channels.newChannel(outputStream));\n+\n+    final int valueCount = 1000;\n+\n+    VarCharVector vector = new VarCharVector(\"f0\", allocator);\n+    vector.setInitialCapacity(valueCount, 8);\n+    vector.allocateNew();\n+    vector.setValueCount(valueCount);\n+    for (int i = 0; i < valueCount; i++) {\n+      vector.set(i, new Text(\"test\" + i));\n+    }\n+    FieldVectorUtility.serializeFieldVector(out, vector);\n+\n+\n+    ByteArrayInputStream inputStream = new ByteArrayInputStream(outputStream.toByteArray());\n+    ReadChannel in = new ReadChannel(Channels.newChannel(inputStream));\n+\n+    VarCharVector deserialized = new VarCharVector(\"f0\", allocator);\n+    FieldVectorUtility.deserializeFieldVector(in, deserialized);\n+\n+    assertEquals(valueCount, deserialized.getValueCount());\n+    assertEquals(\"test10\", deserialized.getObject(10).toString());\n+\n+    vector.clear();\n \n Review comment:\n   are these needed?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-13T03:58:32.670+0000",
                    "updated": "2019-05-13T03:58:32.670+0000",
                    "started": "2019-05-13T03:58:32.669+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "240829",
                    "issueId": "13230513"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13230513/worklog/240830",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #4280: ARROW-5224: [Java] Add APIs for supporting directly serialize/deserialize ValueVector\nURL: https://github.com/apache/arrow/pull/4280#discussion_r283180275\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/util/FieldVectorUtility.java\n ##########\n @@ -0,0 +1,121 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.vector.util;\n+\n+import io.netty.buffer.ArrowBuf;\n+import org.apache.arrow.vector.BaseFixedWidthVector;\n+import org.apache.arrow.vector.BaseVariableWidthVector;\n+import org.apache.arrow.vector.FieldVector;\n+import org.apache.arrow.vector.ipc.ReadChannel;\n+import org.apache.arrow.vector.ipc.WriteChannel;\n+import org.apache.arrow.vector.ipc.message.MessageSerializer;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Utility class for FieldVector.\n+ */\n+public class FieldVectorUtility {\n+\n \n Review comment:\n   this should have a private constructor.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-13T03:58:32.812+0000",
                    "updated": "2019-05-13T03:58:32.812+0000",
                    "started": "2019-05-13T03:58:32.811+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "240830",
                    "issueId": "13230513"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13230513/worklog/240831",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #4280: ARROW-5224: [Java] Add APIs for supporting directly serialize/deserialize ValueVector\nURL: https://github.com/apache/arrow/pull/4280#discussion_r283180337\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/util/FieldVectorUtility.java\n ##########\n @@ -0,0 +1,121 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.vector.util;\n+\n+import io.netty.buffer.ArrowBuf;\n+import org.apache.arrow.vector.BaseFixedWidthVector;\n+import org.apache.arrow.vector.BaseVariableWidthVector;\n+import org.apache.arrow.vector.FieldVector;\n+import org.apache.arrow.vector.ipc.ReadChannel;\n+import org.apache.arrow.vector.ipc.WriteChannel;\n+import org.apache.arrow.vector.ipc.message.MessageSerializer;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Utility class for FieldVector.\n+ */\n+public class FieldVectorUtility {\n \n Review comment:\n   I think FieldVectorSerdes or FieldVectorSerdeUtilitiy would be a better name for this class.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-13T03:58:32.857+0000",
                    "updated": "2019-05-13T03:58:32.857+0000",
                    "started": "2019-05-13T03:58:32.857+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "240831",
                    "issueId": "13230513"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13230513/worklog/240832",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #4280: ARROW-5224: [Java] Add APIs for supporting directly serialize/deserialize ValueVector\nURL: https://github.com/apache/arrow/pull/4280#discussion_r283180747\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/util/FieldVectorUtility.java\n ##########\n @@ -0,0 +1,121 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.vector.util;\n+\n+import io.netty.buffer.ArrowBuf;\n+import org.apache.arrow.vector.BaseFixedWidthVector;\n+import org.apache.arrow.vector.BaseVariableWidthVector;\n+import org.apache.arrow.vector.FieldVector;\n+import org.apache.arrow.vector.ipc.ReadChannel;\n+import org.apache.arrow.vector.ipc.WriteChannel;\n+import org.apache.arrow.vector.ipc.message.MessageSerializer;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Utility class for FieldVector.\n+ */\n+public class FieldVectorUtility {\n+\n+  public static void serializeFieldVector(WriteChannel out, FieldVector vector) throws IOException {\n+    int valueCount = vector.getValueCount();\n+    byte[] reuseIntBytes = new byte[4];\n+    MessageSerializer.intToBytes(valueCount, reuseIntBytes);\n+    out.write(reuseIntBytes);\n+    ArrowBuf dataBuffer = vector.getDataBuffer();\n+    ArrowBuf validityBuffer = vector.getValidityBuffer();\n+\n+    int validityBufferCapacity = (valueCount + 7) >> 3;\n \n Review comment:\n   there are already utility methods that have this implementation can you use one of them?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-13T03:58:33.127+0000",
                    "updated": "2019-05-13T03:58:33.127+0000",
                    "started": "2019-05-13T03:58:33.126+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "240832",
                    "issueId": "13230513"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13230513/worklog/240833",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #4280: ARROW-5224: [Java] Add APIs for supporting directly serialize/deserialize ValueVector\nURL: https://github.com/apache/arrow/pull/4280#discussion_r283180518\n \n \n\n ##########\n File path: java/vector/src/test/java/org/apache/arrow/vector/util/TestFieldVectorUtility.java\n ##########\n @@ -0,0 +1,92 @@\n+package org.apache.arrow.vector.util;\n+\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.arrow.vector.IntVector;\n+import org.apache.arrow.vector.VarCharVector;\n+import org.apache.arrow.vector.ipc.ReadChannel;\n+import org.apache.arrow.vector.ipc.WriteChannel;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.nio.channels.Channels;\n+\n+public class TestFieldVectorUtility {\n+\n+  private BufferAllocator allocator;\n+\n+  @Before\n+  public void init() {\n+    allocator = new RootAllocator(Long.MAX_VALUE);\n+  }\n+\n+  @After\n+  public void terminate() throws Exception {\n+    allocator.close();\n+  }\n+\n+  @Test\n+  public void testBaseFixedWidthVector() throws Exception {\n+    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n+    WriteChannel out = new WriteChannel(Channels.newChannel(outputStream));\n+\n+    final int valueCount = 1000;\n+\n+    IntVector vector = new IntVector(\"f0\", allocator);\n+    vector.setValueCount(valueCount);\n+    for (int i = 0; i < valueCount; i++) {\n+      vector.set(i, i);\n+    }\n+    FieldVectorUtility.serializeFieldVector(out, vector);\n+\n+\n+    ByteArrayInputStream inputStream = new ByteArrayInputStream(outputStream.toByteArray());\n+    ReadChannel in = new ReadChannel(Channels.newChannel(inputStream));\n+\n+    IntVector deserialized = new IntVector(\"f0\", allocator);\n+    FieldVectorUtility.deserializeFieldVector(in, deserialized);\n+\n+    assertEquals(deserialized.getValueCount(), valueCount);\n+    assertEquals(deserialized.get(10), 10);\n+\n+    vector.clear();\n \n Review comment:\n   are these needed?  \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-13T03:58:33.201+0000",
                    "updated": "2019-05-13T03:58:33.201+0000",
                    "started": "2019-05-13T03:58:33.200+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "240833",
                    "issueId": "13230513"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13230513/worklog/240834",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #4280: ARROW-5224: [Java] Add APIs for supporting directly serialize/deserialize ValueVector\nURL: https://github.com/apache/arrow/pull/4280#discussion_r283180668\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/util/FieldVectorUtility.java\n ##########\n @@ -0,0 +1,121 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.vector.util;\n+\n+import io.netty.buffer.ArrowBuf;\n+import org.apache.arrow.vector.BaseFixedWidthVector;\n+import org.apache.arrow.vector.BaseVariableWidthVector;\n+import org.apache.arrow.vector.FieldVector;\n+import org.apache.arrow.vector.ipc.ReadChannel;\n+import org.apache.arrow.vector.ipc.WriteChannel;\n+import org.apache.arrow.vector.ipc.message.MessageSerializer;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Utility class for FieldVector.\n \n Review comment:\n   please describe the on the wire format this class serializes to and deserializes from (that might also affect the class name).\r\n   \r\n   Please describe that this this isn't part of the official arrow standand.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-13T03:58:33.235+0000",
                    "updated": "2019-05-13T03:58:33.235+0000",
                    "started": "2019-05-13T03:58:33.234+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "240834",
                    "issueId": "13230513"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13230513/worklog/240835",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #4280: ARROW-5224: [Java] Add APIs for supporting directly serialize/deserialize ValueVector\nURL: https://github.com/apache/arrow/pull/4280#discussion_r283180930\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/util/FieldVectorUtility.java\n ##########\n @@ -0,0 +1,121 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.vector.util;\n+\n+import io.netty.buffer.ArrowBuf;\n+import org.apache.arrow.vector.BaseFixedWidthVector;\n+import org.apache.arrow.vector.BaseVariableWidthVector;\n+import org.apache.arrow.vector.FieldVector;\n+import org.apache.arrow.vector.ipc.ReadChannel;\n+import org.apache.arrow.vector.ipc.WriteChannel;\n+import org.apache.arrow.vector.ipc.message.MessageSerializer;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Utility class for FieldVector.\n+ */\n+public class FieldVectorUtility {\n+\n+  public static void serializeFieldVector(WriteChannel out, FieldVector vector) throws IOException {\n+    int valueCount = vector.getValueCount();\n+    byte[] reuseIntBytes = new byte[4];\n+    MessageSerializer.intToBytes(valueCount, reuseIntBytes);\n+    out.write(reuseIntBytes);\n+    ArrowBuf dataBuffer = vector.getDataBuffer();\n+    ArrowBuf validityBuffer = vector.getValidityBuffer();\n+\n+    int validityBufferCapacity = (valueCount + 7) >> 3;\n+\n+    if (vector instanceof BaseFixedWidthVector) {\n+\n+      int dataBufferCapacity = vector.getBufferSizeFor(valueCount) - validityBufferCapacity;\n+\n+      MessageSerializer.intToBytes(dataBufferCapacity, reuseIntBytes);\n+      out.write(reuseIntBytes);\n+      MessageSerializer.intToBytes(validityBufferCapacity, reuseIntBytes);\n+      out.write(reuseIntBytes);\n+\n+      out.write(dataBuffer.slice(0, dataBufferCapacity));\n+      out.write(validityBuffer.slice(0, validityBufferCapacity));\n+\n+    } else if (vector instanceof BaseVariableWidthVector) {\n+      ArrowBuf offsetBuffer = vector.getOffsetBuffer();\n+      int offsetBufferCapacity = (valueCount + 1) * BaseVariableWidthVector.OFFSET_WIDTH;\n+      int dataBufferCapacity = offsetBuffer.getInt(valueCount * 4);\n+\n+      MessageSerializer.intToBytes(dataBufferCapacity, reuseIntBytes);\n+      out.write(reuseIntBytes);\n+      MessageSerializer.intToBytes(validityBufferCapacity, reuseIntBytes);\n+      out.write(reuseIntBytes);\n+      MessageSerializer.intToBytes(offsetBufferCapacity, reuseIntBytes);\n+      out.write(reuseIntBytes);\n+\n+      out.write(dataBuffer.slice(0, dataBufferCapacity));\n+      out.write(validityBuffer.slice(0, validityBufferCapacity));\n+      out.write(offsetBuffer.slice(0, offsetBufferCapacity));\n+    } else {\n+      //TODO support other type\n+      throw new UnsupportedOperationException(\"Unsupported FieldVector:\" + vector.getField().getName());\n+    }\n+  }\n+\n+  public static void deserializeFieldVector(ReadChannel in, FieldVector vector) throws IOException {\n \n Review comment:\n   javadoc.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-13T03:58:33.261+0000",
                    "updated": "2019-05-13T03:58:33.261+0000",
                    "started": "2019-05-13T03:58:33.260+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "240835",
                    "issueId": "13230513"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13230513/worklog/240836",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #4280: ARROW-5224: [Java] Add APIs for supporting directly serialize/deserialize ValueVector\nURL: https://github.com/apache/arrow/pull/4280#discussion_r283180897\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/util/FieldVectorUtility.java\n ##########\n @@ -0,0 +1,121 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.vector.util;\n+\n+import io.netty.buffer.ArrowBuf;\n+import org.apache.arrow.vector.BaseFixedWidthVector;\n+import org.apache.arrow.vector.BaseVariableWidthVector;\n+import org.apache.arrow.vector.FieldVector;\n+import org.apache.arrow.vector.ipc.ReadChannel;\n+import org.apache.arrow.vector.ipc.WriteChannel;\n+import org.apache.arrow.vector.ipc.message.MessageSerializer;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Utility class for FieldVector.\n+ */\n+public class FieldVectorUtility {\n+\n+  public static void serializeFieldVector(WriteChannel out, FieldVector vector) throws IOException {\n \n Review comment:\n   javadoc\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-13T03:58:33.341+0000",
                    "updated": "2019-05-13T03:58:33.341+0000",
                    "started": "2019-05-13T03:58:33.339+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "240836",
                    "issueId": "13230513"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13230513/worklog/240837",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #4280: ARROW-5224: [Java] Add APIs for supporting directly serialize/deserialize ValueVector\nURL: https://github.com/apache/arrow/pull/4280#discussion_r283180977\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/util/FieldVectorUtility.java\n ##########\n @@ -0,0 +1,121 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.vector.util;\n+\n+import io.netty.buffer.ArrowBuf;\n+import org.apache.arrow.vector.BaseFixedWidthVector;\n+import org.apache.arrow.vector.BaseVariableWidthVector;\n+import org.apache.arrow.vector.FieldVector;\n+import org.apache.arrow.vector.ipc.ReadChannel;\n+import org.apache.arrow.vector.ipc.WriteChannel;\n+import org.apache.arrow.vector.ipc.message.MessageSerializer;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Utility class for FieldVector.\n+ */\n+public class FieldVectorUtility {\n+\n+  public static void serializeFieldVector(WriteChannel out, FieldVector vector) throws IOException {\n+    int valueCount = vector.getValueCount();\n+    byte[] reuseIntBytes = new byte[4];\n+    MessageSerializer.intToBytes(valueCount, reuseIntBytes);\n+    out.write(reuseIntBytes);\n \n Review comment:\n   sizeBytes might be a better name for this?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-13T03:58:33.363+0000",
                    "updated": "2019-05-13T03:58:33.363+0000",
                    "started": "2019-05-13T03:58:33.363+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "240837",
                    "issueId": "13230513"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13230513/worklog/240838",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #4280: ARROW-5224: [Java] Add APIs for supporting directly serialize/deserialize ValueVector\nURL: https://github.com/apache/arrow/pull/4280#discussion_r283180834\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/util/FieldVectorUtility.java\n ##########\n @@ -0,0 +1,121 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.vector.util;\n+\n+import io.netty.buffer.ArrowBuf;\n+import org.apache.arrow.vector.BaseFixedWidthVector;\n+import org.apache.arrow.vector.BaseVariableWidthVector;\n+import org.apache.arrow.vector.FieldVector;\n+import org.apache.arrow.vector.ipc.ReadChannel;\n+import org.apache.arrow.vector.ipc.WriteChannel;\n+import org.apache.arrow.vector.ipc.message.MessageSerializer;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Utility class for FieldVector.\n+ */\n+public class FieldVectorUtility {\n+\n+  public static void serializeFieldVector(WriteChannel out, FieldVector vector) throws IOException {\n+    int valueCount = vector.getValueCount();\n+    byte[] reuseIntBytes = new byte[4];\n+    MessageSerializer.intToBytes(valueCount, reuseIntBytes);\n+    out.write(reuseIntBytes);\n+    ArrowBuf dataBuffer = vector.getDataBuffer();\n+    ArrowBuf validityBuffer = vector.getValidityBuffer();\n+\n+    int validityBufferCapacity = (valueCount + 7) >> 3;\n+\n+    if (vector instanceof BaseFixedWidthVector) {\n+\n+      int dataBufferCapacity = vector.getBufferSizeFor(valueCount) - validityBufferCapacity;\n+\n+      MessageSerializer.intToBytes(dataBufferCapacity, reuseIntBytes);\n+      out.write(reuseIntBytes);\n+      MessageSerializer.intToBytes(validityBufferCapacity, reuseIntBytes);\n+      out.write(reuseIntBytes);\n+\n+      out.write(dataBuffer.slice(0, dataBufferCapacity));\n+      out.write(validityBuffer.slice(0, validityBufferCapacity));\n+\n+    } else if (vector instanceof BaseVariableWidthVector) {\n+      ArrowBuf offsetBuffer = vector.getOffsetBuffer();\n+      int offsetBufferCapacity = (valueCount + 1) * BaseVariableWidthVector.OFFSET_WIDTH;\n+      int dataBufferCapacity = offsetBuffer.getInt(valueCount * 4);\n+\n+      MessageSerializer.intToBytes(dataBufferCapacity, reuseIntBytes);\n+      out.write(reuseIntBytes);\n+      MessageSerializer.intToBytes(validityBufferCapacity, reuseIntBytes);\n+      out.write(reuseIntBytes);\n+      MessageSerializer.intToBytes(offsetBufferCapacity, reuseIntBytes);\n+      out.write(reuseIntBytes);\n+\n+      out.write(dataBuffer.slice(0, dataBufferCapacity));\n+      out.write(validityBuffer.slice(0, validityBufferCapacity));\n+      out.write(offsetBuffer.slice(0, offsetBufferCapacity));\n+    } else {\n+      //TODO support other type\n+      throw new UnsupportedOperationException(\"Unsupported FieldVector:\" + vector.getField().getName());\n \n Review comment:\n   are there any known limitations here, if so please document in javadoc.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-13T03:58:33.447+0000",
                    "updated": "2019-05-13T03:58:33.447+0000",
                    "started": "2019-05-13T03:58:33.435+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "240838",
                    "issueId": "13230513"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13230513/worklog/240844",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on issue #4280: ARROW-5224: [Java] Add APIs for supporting directly serialize/deserialize ValueVector\nURL: https://github.com/apache/arrow/pull/4280#issuecomment-491670772\n \n \n   I should be more specific.  There shouldn't be a Java only serialization format, as that is against the arrow philosophy if a new communication protocol is desired it should get consensus from the broader community (via a mailing list discussion) that we want to support it across all languages.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-13T04:20:00.489+0000",
                    "updated": "2019-05-13T04:20:00.489+0000",
                    "started": "2019-05-13T04:20:00.488+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "240844",
                    "issueId": "13230513"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13230513/worklog/240851",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "tianchen92 commented on issue #4280: ARROW-5224: [Java] Add APIs for supporting directly serialize/deserialize ValueVector\nURL: https://github.com/apache/arrow/pull/4280#issuecomment-491672878\n \n \n   @emkornfield Thanks very much for your comments. I know this is not not conforming to Arrow standard format as I described in [ARROW-5224](https://issues.apache.org/jira/browse/ARROW-5224). The inspiration for this comes from our usage of JAVA API, so we would like to provide another option for user to implement this (not in MessageSerializer).\r\n   Absolutely it's better to make it a new communication protocol and support all languages, but since it's not very complete for all types and maybe it's hard to add a communication. So before doing this, maybe we could provide a tricky utility in Java which not affect the Arrow standard format. What do you think? Could I resolve the comments mentioned above? Thanks very much.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-13T04:36:02.700+0000",
                    "updated": "2019-05-13T04:36:02.700+0000",
                    "started": "2019-05-13T04:36:02.699+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "240851",
                    "issueId": "13230513"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13230513/worklog/240979",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "tianchen92 commented on issue #4280: ARROW-5224: [Java] Add APIs for supporting directly serialize/deserialize ValueVector\nURL: https://github.com/apache/arrow/pull/4280#issuecomment-491672878\n \n \n   @emkornfield Thanks very much for your comments. I know this is not not conforming to Arrow standard format as I described in [ARROW-5224](https://issues.apache.org/jira/browse/ARROW-5224). The inspiration for this comes from our usage of JAVA API, so we would like to provide another option for user to implement this (not in MessageSerializer).\r\n   Absolutely it's better to make it a new communication protocol and support all languages, but since it's not very complete for all types and maybe it's hard to add a communication. So before doing this, maybe we could provide a tricky utility in Java which not affect the Arrow standard format. What do you think?\r\n   \r\n   I have updated this PR, please take a look. Thanks very much.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-13T09:38:16.568+0000",
                    "updated": "2019-05-13T09:38:16.568+0000",
                    "started": "2019-05-13T09:38:16.567+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "240979",
                    "issueId": "13230513"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13230513/worklog/247567",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on issue #4280: ARROW-5224: [Java] Add APIs for supporting directly serialize/deserialize ValueVector\nURL: https://github.com/apache/arrow/pull/4280#issuecomment-495312222\n \n \n   Note: https://issues.apache.org/jira/browse/ARROW-300 covers doing compression on buffers, maybe you can propose something there?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-23T17:31:15.899+0000",
                    "updated": "2019-05-23T17:31:15.899+0000",
                    "started": "2019-05-23T17:31:15.898+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "247567",
                    "issueId": "13230513"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13230513/worklog/247823",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "tianchen92 commented on issue #4280: ARROW-5224: [Java] Add APIs for supporting directly serialize/deserialize ValueVector\nURL: https://github.com/apache/arrow/pull/4280#issuecomment-495443385\n \n \n   @emkornfield Got it, thanks for your kind reminder.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-24T01:47:40.468+0000",
                    "updated": "2019-05-24T01:47:40.468+0000",
                    "started": "2019-05-24T01:47:40.467+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "247823",
                    "issueId": "13230513"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13230513/worklog/252890",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "tianchen92 commented on pull request #4280: ARROW-5224: [Java] Add APIs for supporting directly serialize/deserialize ValueVector\nURL: https://github.com/apache/arrow/pull/4280\n \n \n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-03T02:32:34.146+0000",
                    "updated": "2019-06-03T02:32:34.146+0000",
                    "started": "2019-06-03T02:32:34.145+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "252890",
                    "issueId": "13230513"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 10800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@7be6576f[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1fe96524[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2be08daf[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@7ff41db2[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3d1762f6[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@783b770e[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@57191053[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@8df8e8f[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@e594db0[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@2df9c872[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@32fdde16[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@46229530[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 10800,
        "customfield_12312520": null,
        "customfield_12312521": "Tue May 14 03:24:59 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-07-03T02:08:48.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-5224/watchers",
            "watchCount": 4,
            "isWatching": false
        },
        "created": "2019-04-28T02:49:56.000+0000",
        "updated": "2019-07-03T02:08:48.000+0000",
        "timeoriginalestimate": null,
        "description": "There is no API to directly serialize/deserialize ValueVector. The only way to implement this is to put a single FieldVector in VectorSchemaRoot and convert it to ArrowRecordBatch, and the deserialize process is as well.\u00a0\r\n\r\nProvide a utility class to implement this may be better, I know all serializations should follow IPC format so that data can be shared between different Arrow implementations. But for users who only use Java API and want to do some further optimization, this seem to be no problem and we could provide them a more option.\r\n\r\nThis may take some benefits for Java user who only use ValueVector rather than IPC series classes such as ArrowReordBatch:\r\n * We could do some shuffle optimization such as compression and some encoding algorithm for\u00a0numerical\u00a0type which could greatly improve performance.\r\n * Do serialize/deserialize with the actual buffer size within vector since the buffer size is power of 2 which is actually bigger than it really need.\r\n * Reduce data conversion(VectorSchemaRoot, ArrowRecordBatch etc) to make it user-friendly.\r\n\r\n\u00a0",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "3h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 10800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Java] Add APIs for supporting directly serialize/deserialize ValueVector",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13230513/comment/16838260",
                    "id": "16838260",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jnadeau",
                        "name": "jnadeau",
                        "key": "jnadeau",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Jacques Nadeau",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "What is the major downside of wrapping in a batch? It seems like we should probably just do that and not introduce new APIs & protocols.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jnadeau",
                        "name": "jnadeau",
                        "key": "jnadeau",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Jacques Nadeau",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2019-05-13T04:37:36.413+0000",
                    "updated": "2019-05-13T05:16:29.288+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13230513/comment/16838264",
                    "id": "16838264",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=tianchen92",
                        "name": "tianchen92",
                        "key": "tianchen92",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=tianchen92&avatarId=40800",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=tianchen92&avatarId=40800",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=tianchen92&avatarId=40800",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=tianchen92&avatarId=40800"
                        },
                        "displayName": "Ji Liu",
                        "active": true,
                        "timeZone": "Asia/Gaza"
                    },
                    "body": "[~jnadeau]\u00a0Thanks very much for your feedback. There are two aspects:\r\n\r\n1\u3001It seems hard to do some specific optimization with existing API, for example, encoding for int/long is a very useful optimization which could reduce shuffle data. And this is the major inspiration.\r\n\r\n2\u3001Not sure that ArrowBuf size within ValueVector is greater than its real size since it will allocate size of next power of 2\uff1fIf so, this is a waste for network.\r\n\r\n\u00a0\r\n\r\nWe propose to add a utility class to do implement this, making it easy to do some further optimization. This can be used as a option which will not break Arrow standard format.\r\n\r\n\u00a0",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=tianchen92",
                        "name": "tianchen92",
                        "key": "tianchen92",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=tianchen92&avatarId=40800",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=tianchen92&avatarId=40800",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=tianchen92&avatarId=40800",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=tianchen92&avatarId=40800"
                        },
                        "displayName": "Ji Liu",
                        "active": true,
                        "timeZone": "Asia/Gaza"
                    },
                    "created": "2019-05-13T04:47:31.293+0000",
                    "updated": "2019-05-13T04:53:03.256+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13230513/comment/16838295",
                    "id": "16838295",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield%40gmail.com",
                        "name": "emkornfield@gmail.com",
                        "key": "emkornfield@gmail.com",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Micah Kornfield",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "For #1, can you provide more details on the encoding you have in mind? \r\nFor #2 I believe that only used capacity [1] is written not what is allocated (which is the power of 2?)  If this isn't the case could you provide a unit test demonstrating the wasted space?\r\n\r\n[1]https://github.com/apache/arrow/blob/87feee3d941ee41fb39b25411e108bef40a55995/java/vector/src/main/java/org/apache/arrow/vector/ipc/WriteChannel.java#L93",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield%40gmail.com",
                        "name": "emkornfield@gmail.com",
                        "key": "emkornfield@gmail.com",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Micah Kornfield",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2019-05-13T06:07:33.589+0000",
                    "updated": "2019-05-13T06:07:33.589+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13230513/comment/16838299",
                    "id": "16838299",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=tianchen92",
                        "name": "tianchen92",
                        "key": "tianchen92",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=tianchen92&avatarId=40800",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=tianchen92&avatarId=40800",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=tianchen92&avatarId=40800",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=tianchen92&avatarId=40800"
                        },
                        "displayName": "Ji Liu",
                        "active": true,
                        "timeZone": "Asia/Gaza"
                    },
                    "body": "[~emkornfield@gmail.com] Thanks for your reply.\r\n\r\nFor #2 you are right.\r\n\r\nFor #1, for example, if we do encoding Int or BigInt type\u00a0 like\u00a0[https://en.wikipedia.org/wiki/LEB128], we need to read each value and reassemble byte, and the deserialize process as well. Can this be\u00a0achieved by existing implementation? Besides, is compression supported?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=tianchen92",
                        "name": "tianchen92",
                        "key": "tianchen92",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=tianchen92&avatarId=40800",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=tianchen92&avatarId=40800",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=tianchen92&avatarId=40800",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=tianchen92&avatarId=40800"
                        },
                        "displayName": "Ji Liu",
                        "active": true,
                        "timeZone": "Asia/Gaza"
                    },
                    "created": "2019-05-13T06:18:15.747+0000",
                    "updated": "2019-05-13T08:08:25.955+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13230513/comment/16838665",
                    "id": "16838665",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield%40gmail.com",
                        "name": "emkornfield@gmail.com",
                        "key": "emkornfield@gmail.com",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Micah Kornfield",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "For #1, this seems fairly application specific, so I think it would be best to either agree there is interest in supporting this across languages or to have it in a separate library.   But others on the mailing list might have separate opinions.  Also, do you have benchmarks showing that encoding improves performance or your system?  At least in some cases throughput declines and latency goes up due to the extra serialization and deserialization cost on each side of the wire.  Lastly, for compression you should be able to get decent compression by using a WriteableByteChannel that compresses things on the way out (e.g. https://github.com/xerial/snappy-java/blob/master/src/main/java/org/xerial/snappy/SnappyFramedOutputStream.java)",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield%40gmail.com",
                        "name": "emkornfield@gmail.com",
                        "key": "emkornfield@gmail.com",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Micah Kornfield",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2019-05-13T16:14:47.002+0000",
                    "updated": "2019-05-13T16:14:47.002+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13230513/comment/16838761",
                    "id": "16838761",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bryanc",
                        "name": "bryanc",
                        "key": "bryanc",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bryanc&avatarId=23479",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bryanc&avatarId=23479",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bryanc&avatarId=23479",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bryanc&avatarId=23479"
                        },
                        "displayName": "Bryan Cutler",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "[~tianchen92] could you encode the BigIntVector into a VarBinaryVector as LEB128 and then serialize that vector as an Arrow RecordBatch?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bryanc",
                        "name": "bryanc",
                        "key": "bryanc",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bryanc&avatarId=23479",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bryanc&avatarId=23479",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bryanc&avatarId=23479",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bryanc&avatarId=23479"
                        },
                        "displayName": "Bryan Cutler",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2019-05-13T18:00:41.172+0000",
                    "updated": "2019-05-13T18:00:41.172+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13230513/comment/16839020",
                    "id": "16839020",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=tianchen92",
                        "name": "tianchen92",
                        "key": "tianchen92",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=tianchen92&avatarId=40800",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=tianchen92&avatarId=40800",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=tianchen92&avatarId=40800",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=tianchen92&avatarId=40800"
                        },
                        "displayName": "Ji Liu",
                        "active": true,
                        "timeZone": "Asia/Gaza"
                    },
                    "body": "[~emkornfield@gmail.com] [~bryanc] Thanks for your comments. Sure we have tested the performance with encoding Arrow in our application, and it shows this will significantly reduce shuffle data with equal or even less E2E time (for Int and BigInt type).\u00a0\r\n\r\nI agree with [~bryanc], we could simply provide a utility class to encode BigIntVector into a VarBinaryVector(The only thing I'm worried about is whether multiple transformations will result in significant performance overhead). In this way, we won\u2018t break the existing APIs & protocol. I would like to work in this way and test the performance as well. If this works fine, we can further extend it to other languages.\r\n\r\nWhat do you think?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=tianchen92",
                        "name": "tianchen92",
                        "key": "tianchen92",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=tianchen92&avatarId=40800",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=tianchen92&avatarId=40800",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=tianchen92&avatarId=40800",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=tianchen92&avatarId=40800"
                        },
                        "displayName": "Ji Liu",
                        "active": true,
                        "timeZone": "Asia/Gaza"
                    },
                    "created": "2019-05-14T02:08:03.855+0000",
                    "updated": "2019-05-14T02:08:03.855+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13230513/comment/16839050",
                    "id": "16839050",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield%40gmail.com",
                        "name": "emkornfield@gmail.com",
                        "key": "emkornfield@gmail.com",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Micah Kornfield",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "[~tianchen92] my main concern with this change is that it shouldn't be a one-off for java.  If there is utility of these types of on the wire encodings we should come up with a supportable way to make them work across language implementations.  I think this is important to discuss on the mailing list directly (many people filter out JIRA/Pull requests).   Real performance numbers/benchmarks would be helpful in making the case to support this.  Also, I'm also curious if you measured to doing blackbox compression with something like snappy (the link I provided above) to see if there is still benefit of the encoding after applying compression, to the entire vector.\r\n\r\nIf we are going to make encodings supportable we should either extend Schema.fbs or use the custom metadata that is already built into the schema (https://github.com/apache/arrow/blob/master/format/Schema.fbs#L265) so encodings can be communicated across clients.  Again since convention/design needs to be agreed upon discussing on the mailing list is important.\r\n\r\nI think a utility class to  convert between BigIntVector and encoded VarBinaryVector could also be a potentially valuable contribution, but for this use-case I think you lose a lot of the value of encoding (you have a 4-byte overhead to keep track of the offsets per encoded entry).\r\n\r\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield%40gmail.com",
                        "name": "emkornfield@gmail.com",
                        "key": "emkornfield@gmail.com",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Micah Kornfield",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2019-05-14T03:24:59.671+0000",
                    "updated": "2019-05-14T03:24:59.671+0000"
                }
            ],
            "maxResults": 8,
            "total": 8,
            "startAt": 0
        },
        "customfield_12311820": "0|z027hc:",
        "customfield_12314139": null
    }
}