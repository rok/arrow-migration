{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13390078",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13390078",
    "key": "ARROW-13358",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12350323",
                "id": "12350323",
                "description": "",
                "name": "6.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-10-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "kernel",
            "pull-request-available",
            "types"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12622664",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12622664",
                "type": {
                    "id": "12310000",
                    "name": "Duplicate",
                    "inward": "is duplicated by",
                    "outward": "duplicates",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310000"
                },
                "inwardIssue": {
                    "id": "13399879",
                    "key": "ARROW-13932",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13399879",
                    "fields": {
                        "summary": "[C++] if_else kernel doesn't accept all types",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                            "name": "Closed",
                            "id": "6",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
                            "id": "1",
                            "description": "A problem which impairs or prevents the functions of the product.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
                            "name": "Bug",
                            "subtask": false,
                            "avatarId": 21133
                        }
                    }
                }
            },
            {
                "id": "12619436",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12619436",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "outwardIssue": {
                    "id": "13381940",
                    "key": "ARROW-12955",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13381940",
                    "fields": {
                        "summary": "[C++] Add additional type support for if_else kernel",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            },
            {
                "id": "12619563",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12619563",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "outwardIssue": {
                    "id": "13390776",
                    "key": "ARROW-13390",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13390776",
                    "fields": {
                        "summary": "[C++] Improve type support for 'coalesce' kernel",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            },
            {
                "id": "12623510",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12623510",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13402989",
                    "key": "ARROW-14105",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13402989",
                    "fields": {
                        "summary": "[C++] Reconcile type promotion rules between if_else, case_when, coalesce, select",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            },
            {
                "id": "12623855",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12623855",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13404130",
                    "key": "ARROW-14177",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13404130",
                    "fields": {
                        "summary": "[C++] Optimize dictionary support in kernels/Support nulls in DictionaryUnifier",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            },
            {
                "id": "12626241",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12626241",
                "type": {
                    "id": "10001",
                    "name": "dependent",
                    "inward": "is depended upon by",
                    "outward": "depends upon",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10001"
                },
                "inwardIssue": {
                    "id": "13411072",
                    "key": "ARROW-14659",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13411072",
                    "fields": {
                        "summary": "[R] Remove warning about factor conversion to string in if_else()",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
                            "id": "1",
                            "description": "A problem which impairs or prevents the functions of the product.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
                            "name": "Bug",
                            "subtask": false,
                            "avatarId": 21133
                        }
                    }
                }
            },
            {
                "id": "12627510",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12627510",
                "type": {
                    "id": "10001",
                    "name": "dependent",
                    "inward": "is depended upon by",
                    "outward": "depends upon",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10001"
                },
                "inwardIssue": {
                    "id": "13410942",
                    "key": "ARROW-14649",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13410942",
                    "fields": {
                        "summary": "[R] Include unused factor levels in coalesce() and if_else() output",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
                            "name": "Minor",
                            "id": "4"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
            "name": "lidavidm",
            "key": "lidavidm",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "David Li",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=niranda",
            "name": "niranda",
            "key": "niranda",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=39936",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=39936",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=39936",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=39936"
            },
            "displayName": "Niranda Perera",
            "active": true,
            "timeZone": "America/Indiana/Indianapolis"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=niranda",
            "name": "niranda",
            "key": "niranda",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=39936",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=39936",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=39936",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=39936"
            },
            "displayName": "Niranda Perera",
            "active": true,
            "timeZone": "America/Indiana/Indianapolis"
        },
        "aggregateprogress": {
            "progress": 9000,
            "total": 9000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 9000,
            "total": 9000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-13358/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 15,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13390078/worklog/654647",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #11218:\nURL: https://github.com/apache/arrow/pull/11218#issuecomment-926034157\n\n\n   https://issues.apache.org/jira/browse/ARROW-13358\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-23T17:59:53.244+0000",
                    "updated": "2021-09-23T17:59:53.244+0000",
                    "started": "2021-09-23T17:59:53.243+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "654647",
                    "issueId": "13390078"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13390078/worklog/654648",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #11218:\nURL: https://github.com/apache/arrow/pull/11218#discussion_r715031524\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/codegen_internal.cc\n##########\n@@ -158,26 +180,73 @@ std::shared_ptr<DataType> CommonNumeric(const ValueDescr* begin, size_t count) {\n   return int8();\n }\n \n-std::shared_ptr<DataType> CommonTimestamp(const std::vector<ValueDescr>& descrs) {\n+Status CheckCommonParameters(const ValueDescr* begin, size_t count) {\n\nReview comment:\n       Much of this will need to be reconciled with ARROW-13390/#11080.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-23T18:00:09.438+0000",
                    "updated": "2021-09-23T18:00:09.438+0000",
                    "started": "2021-09-23T18:00:09.438+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "654648",
                    "issueId": "13390078"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13390078/worklog/657059",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #11218:\nURL: https://github.com/apache/arrow/pull/11218#issuecomment-929963881\n\n\n   This needs rebasing now.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-29T08:38:28.241+0000",
                    "updated": "2021-09-29T08:38:28.241+0000",
                    "started": "2021-09-29T08:38:28.241+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "657059",
                    "issueId": "13390078"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13390078/worklog/657442",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #11218:\nURL: https://github.com/apache/arrow/pull/11218#issuecomment-930415232\n\n\n   Contains some changes from #11272 so if_else/case_when/coalesce have mostly similar implicit cast rules (though I will leave it to ARROW-14105 to fully unify these). I may also revisit the dictionary case here as it seems slow from test runtime; instead of unifying the dictionaries on-the-fly we should unify them up front and construct a transposition map. (If we copy the RHS to the output, we can use the existing function for transposing indices, and assuming unification preserves the first dictionary's indices exactly, we can then copy the LHS to the output without having to transpose again.)\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-29T18:01:16.637+0000",
                    "updated": "2021-09-29T18:01:16.637+0000",
                    "started": "2021-09-29T18:01:16.637+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "657442",
                    "issueId": "13390078"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13390078/worklog/657509",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #11218:\nURL: https://github.com/apache/arrow/pull/11218#issuecomment-930491528\n\n\n   Ah, the described optimization would require being able to unify dictionaries with nulls. Filed ARROW-14177 for now.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-29T19:49:23.009+0000",
                    "updated": "2021-09-29T19:49:23.009+0000",
                    "started": "2021-09-29T19:49:23.008+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "657509",
                    "issueId": "13390078"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13390078/worklog/657740",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #11218:\nURL: https://github.com/apache/arrow/pull/11218#issuecomment-929963881\n\n\n   This needs rebasing now.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-30T00:20:38.672+0000",
                    "updated": "2021-09-30T00:20:38.672+0000",
                    "started": "2021-09-30T00:20:38.672+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "657740",
                    "issueId": "13390078"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13390078/worklog/657781",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #11218:\nURL: https://github.com/apache/arrow/pull/11218#issuecomment-930415232\n\n\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-30T00:24:36.777+0000",
                    "updated": "2021-09-30T00:24:36.777+0000",
                    "started": "2021-09-30T00:24:36.776+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "657781",
                    "issueId": "13390078"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13390078/worklog/658376",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #11218:\nURL: https://github.com/apache/arrow/pull/11218#discussion_r719433410\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_if_else.cc\n##########\n@@ -989,23 +1123,41 @@ struct IfElseFunction : ScalarFunction {\n     RETURN_NOT_OK(CheckArity(*values));\n \n     using arrow::compute::detail::DispatchExactImpl;\n-    if (auto kernel = DispatchExactImpl(this, *values)) return kernel;\n+    // Do not DispatchExact here because it'll let through something like (bool,\n+    // timestamp[s], timestamp[s, \"UTC\"])\n \n     // if 0th descriptor is null, replace with bool\n     if (values->at(0).type->id() == Type::NA) {\n       values->at(0).type = boolean();\n     }\n \n     // if-else 0'th descriptor is bool, so skip it\n-    std::vector<ValueDescr> values_copy(values->begin() + 1, values->end());\n-    internal::EnsureDictionaryDecoded(&values_copy);\n-    internal::ReplaceNullWithOtherType(&values_copy);\n+    ValueDescr* left_arg = &(*values)[1];\n+    constexpr size_t num_args = 2;\n \n-    if (auto type = internal::CommonNumeric(values_copy)) {\n-      internal::ReplaceTypes(type, &values_copy);\n+    internal::ReplaceNullWithOtherType(left_arg, num_args);\n+\n+    if (is_dictionary((*values)[1].type->id()) &&\n+        (*values)[1].type->Equals(*(*values)[2].type)) {\n\nReview comment:\n       Hmm, what about the other way round where the second type is a dict of the first type?\r\n   Can you add a comment?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_if_else.cc\n##########\n@@ -900,44 +896,182 @@ struct IfElseFunctor<Type, enable_if_fixed_size_binary<Type>> {\n     auto* out_values = out->buffers[1]->mutable_data() + out->offset * byte_width;\n \n     // copy right data to out_buff\n-    const util::string_view& right_data =\n-        internal::UnboxScalar<FixedSizeBinaryType>::Unbox(right);\n-    if (right_data.data()) {\n+    const uint8_t* right_data = UnboxBinaryScalar(right);\n+    if (right_data) {\n       for (int64_t i = 0; i < cond.length; i++) {\n-        std::memcpy(out_values + i * byte_width, right_data.data(), right_data.size());\n+        std::memcpy(out_values + i * byte_width, right_data, byte_width);\n       }\n     }\n \n     // selectively copy values from left data\n-    const util::string_view& left_data =\n-        internal::UnboxScalar<FixedSizeBinaryType>::Unbox(left);\n-\n+    const uint8_t* left_data = UnboxBinaryScalar(left);\n     RunIfElseLoop(cond, [&](int64_t data_offset, int64_t num_elems) {\n-      if (left_data.data()) {\n+      if (left_data) {\n         for (int64_t i = 0; i < num_elems; i++) {\n-          std::memcpy(out_values + (data_offset + i) * byte_width, left_data.data(),\n-                      left_data.size());\n+          std::memcpy(out_values + (data_offset + i) * byte_width, left_data, byte_width);\n         }\n       }\n     });\n \n     return Status::OK();\n   }\n \n-  static Result<int32_t> GetByteWidth(const DataType& left_type,\n-                                      const DataType& right_type) {\n-    int width = checked_cast<const FixedSizeBinaryType&>(left_type).byte_width();\n-    if (width == checked_cast<const FixedSizeBinaryType&>(right_type).byte_width()) {\n-      return width;\n+  template <typename T = Type>\n+  static enable_if_t<!is_decimal_type<T>::value, const uint8_t*> UnboxBinaryScalar(\n+      const Scalar& scalar) {\n+    return reinterpret_cast<const uint8_t*>(\n+        internal::UnboxScalar<FixedSizeBinaryType>::Unbox(scalar).data());\n+  }\n+\n+  template <typename T = Type>\n+  static enable_if_decimal<T, const uint8_t*> UnboxBinaryScalar(const Scalar& scalar) {\n+    return internal::UnboxScalar<T>::Unbox(scalar).native_endian_bytes();\n+  }\n+\n+  template <typename T = Type>\n+  static enable_if_t<!is_decimal_type<T>::value, Result<int32_t>> GetByteWidth(\n+      const DataType& left_type, const DataType& right_type) {\n+    const int32_t width =\n+        checked_cast<const FixedSizeBinaryType&>(left_type).byte_width();\n+    DCHECK_EQ(width, checked_cast<const FixedSizeBinaryType&>(right_type).byte_width());\n+    return width;\n+  }\n+\n+  template <typename T = Type>\n+  static enable_if_decimal<T, Result<int32_t>> GetByteWidth(const DataType& left_type,\n+                                                            const DataType& right_type) {\n+    const auto& left = checked_cast<const T&>(left_type);\n+    const auto& right = checked_cast<const T&>(right_type);\n+    DCHECK_EQ(left.precision(), right.precision());\n+    DCHECK_EQ(left.scale(), right.scale());\n+    return left.byte_width();\n+  }\n+};\n+\n+// Use builders for dictionaries - slower, but allows us to unify dictionaries\n+template <typename Type>\n+struct IfElseFunctor<\n+    Type, enable_if_t<is_nested_type<Type>::value || is_dictionary_type<Type>::value>> {\n+  // A - Array, S - Scalar, X = Array/Scalar\n+\n+  // SXX\n+  static Status Call(KernelContext* ctx, const BooleanScalar& cond, const Datum& left,\n+                     const Datum& right, Datum* out) {\n+    if (left.is_scalar() && right.is_scalar()) {\n+      if (cond.is_valid) {\n+        *out = cond.value ? left.scalar() : right.scalar();\n+      } else {\n+        *out = MakeNullScalar(left.type());\n+      }\n+      return Status::OK();\n+    }\n+    // either left or right is an array. Output is always an array\n+    int64_t out_arr_len = std::max(left.length(), right.length());\n+    if (!cond.is_valid) {\n+      // cond is null; just create a null array\n+      ARROW_ASSIGN_OR_RAISE(*out,\n+                            MakeArrayOfNull(left.type(), out_arr_len, ctx->memory_pool()))\n+      return Status::OK();\n+    }\n+\n+    const auto& valid_data = cond.value ? left : right;\n+    if (valid_data.is_array()) {\n+      *out = valid_data;\n     } else {\n-      return Status::Invalid(\"FixedSizeBinaryType byte_widths should be equal\");\n+      // valid data is a scalar that needs to be broadcasted\n+      ARROW_ASSIGN_OR_RAISE(*out, MakeArrayFromScalar(*valid_data.scalar(), out_arr_len,\n+                                                      ctx->memory_pool()));\n     }\n+    return Status::OK();\n+  }\n+\n+  //  AAA\n+  static Status Call(KernelContext* ctx, const ArrayData& cond, const ArrayData& left,\n+                     const ArrayData& right, ArrayData* out) {\n+    return RunLoop(\n\nReview comment:\n       It looks like this could be much more efficient if `RunLoop` batched runs of 0s and 1s.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_if_else.cc\n##########\n@@ -1031,7 +1183,16 @@ void AddPrimitiveIfElseKernels(const std::shared_ptr<ScalarFunction>& scalar_fun\n         internal::GenerateTypeAgnosticPrimitive<ResolveIfElseExec,\n                                                 /*AllocateMem=*/std::false_type>(*type);\n     // cond array needs to be boolean always\n-    ScalarKernel kernel({boolean(), type, type}, type, exec);\n+    std::shared_ptr<KernelSignature> sig;\n+    if (type->id() == Type::TIMESTAMP) {\n+      auto unit = checked_cast<const TimestampType&>(*type).unit();\n+      sig = KernelSignature::Make(\n+          {boolean(), match::TimestampTypeUnit(unit), match::TimestampTypeUnit(unit)},\n\nReview comment:\n       Wouldn't `CheckIdenticalTypes` later catch the differing units?\r\n   (also, the timezones should also be the same?)\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_if_else_test.cc\n##########\n@@ -140,12 +157,27 @@ void CheckWithDifferentShapes(const std::shared_ptr<Array>& cond,\n                 \"@\" + std::to_string(right_idx) + \"=\" + right_in.scalar()->ToString();\n           } else {\n             right_in = right_bcast = right;\n+            trace_right += \"=Array\";\n           }\n           SCOPED_TRACE(trace_right);\n \n-          ASSERT_OK_AND_ASSIGN(auto exp, IfElse(cond_bcast, left_bcast, right_bcast));\n+          Datum expected;\n           ASSERT_OK_AND_ASSIGN(auto actual, IfElse(cond_in, left_in, right_in));\n-          AssertDatumsEqual(exp, actual, /*verbose=*/true);\n+          if (mask & COND_SCALAR && mask & LEFT_SCALAR && mask & RIGHT_SCALAR) {\n\nReview comment:\n       Add parentheses to make this more readable, or `mask == (COND_SCALAR | LEFT_SCALAR | RIGHT_SCALAR)`?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_if_else.cc\n##########\n@@ -989,23 +1123,41 @@ struct IfElseFunction : ScalarFunction {\n     RETURN_NOT_OK(CheckArity(*values));\n \n     using arrow::compute::detail::DispatchExactImpl;\n-    if (auto kernel = DispatchExactImpl(this, *values)) return kernel;\n+    // Do not DispatchExact here because it'll let through something like (bool,\n+    // timestamp[s], timestamp[s, \"UTC\"])\n \n     // if 0th descriptor is null, replace with bool\n     if (values->at(0).type->id() == Type::NA) {\n       values->at(0).type = boolean();\n     }\n \n     // if-else 0'th descriptor is bool, so skip it\n-    std::vector<ValueDescr> values_copy(values->begin() + 1, values->end());\n-    internal::EnsureDictionaryDecoded(&values_copy);\n-    internal::ReplaceNullWithOtherType(&values_copy);\n+    ValueDescr* left_arg = &(*values)[1];\n+    constexpr size_t num_args = 2;\n \n-    if (auto type = internal::CommonNumeric(values_copy)) {\n-      internal::ReplaceTypes(type, &values_copy);\n+    internal::ReplaceNullWithOtherType(left_arg, num_args);\n+\n+    if (is_dictionary((*values)[1].type->id()) &&\n+        (*values)[1].type->Equals(*(*values)[2].type)) {\n+      auto kernel = DispatchExactImpl(this, *values);\n+      DCHECK(kernel);\n+      return kernel;\n     }\n \n-    std::move(values_copy.begin(), values_copy.end(), values->begin() + 1);\n+    internal::EnsureDictionaryDecoded(left_arg, num_args);\n+\n+    if (auto type = internal::CommonNumeric(left_arg, num_args)) {\n+      internal::ReplaceTypes(type, left_arg, num_args);\n+    }\n+    if (auto type = internal::CommonTemporal(left_arg, num_args)) {\n\nReview comment:\n       Shouldn't this be a chain of \"else if\"?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_if_else_test.cc\n##########\n@@ -103,7 +118,7 @@ void CheckWithDifferentShapes(const std::shared_ptr<Array>& cond,\n   auto len = left->length();\n \n   enum { COND_SCALAR = 1, LEFT_SCALAR = 2, RIGHT_SCALAR = 4 };\n-  for (int mask = 0; mask < (COND_SCALAR | LEFT_SCALAR | RIGHT_SCALAR); ++mask) {\n+  for (int mask = 1; mask <= (COND_SCALAR | LEFT_SCALAR | RIGHT_SCALAR); ++mask) {\n     for (int64_t cond_idx = 0; cond_idx < len; ++cond_idx) {\n\nReview comment:\n       Speaking of which, if `mask & COND_SCALAR` is false, this will loop `len` times doing the same thing?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_if_else_test.cc\n##########\n@@ -103,7 +118,7 @@ void CheckWithDifferentShapes(const std::shared_ptr<Array>& cond,\n   auto len = left->length();\n \n   enum { COND_SCALAR = 1, LEFT_SCALAR = 2, RIGHT_SCALAR = 4 };\n-  for (int mask = 0; mask < (COND_SCALAR | LEFT_SCALAR | RIGHT_SCALAR); ++mask) {\n+  for (int mask = 1; mask <= (COND_SCALAR | LEFT_SCALAR | RIGHT_SCALAR); ++mask) {\n     for (int64_t cond_idx = 0; cond_idx < len; ++cond_idx) {\n\nReview comment:\n       You could avoid that e.g.:\r\n   ```c++\r\n   std::vector<int64_t> array_indices{-1};  // sentinel\r\n   std::vector<int64_t> scalar_indices(len);\r\n   std::iota(scalar_indices.begin(), scalar_indices.end(), 0);\r\n   \r\n   auto make_input = [&](const std::shared_ptr<Array>& array, int64_t index,\r\n       Datum* input, Datum* input_bcast, std::string* trace) {\r\n     if (index >= 0) {\r\n        // Use scalar as input, broadcast it for expected result computation\r\n        ASSERT_OK_AND_ASSIGN(*input, array->GetScalar(index));\r\n        ASSERT_OK_AND_ASSIGN(*input_bcast, MakeArrayFromScalar(*input->scalar(), len));\r\n        *trace += \"...\":\r\n     } else {\r\n        // Use array as input\r\n        *input = *input_bcast = array;\r\n        *trace += \"=Array\";\r\n     }\r\n   };\r\n   \r\n   for (int mask = 1; mask <= (COND_SCALAR | LEFT_SCALAR | RIGHT_SCALAR); ++mask) {\r\n     for (const auto cond_idx : (mask & COND_SCALAR) ? scalar_indices : array_indices) {\r\n       Datum cond_in, cond_bcast;\r\n       std::string trace_cond = \"Cond\";\r\n       make_input(cond, cond_idx, &cond_in, &cond_bcast, &trace_cond);\r\n       for (const auto left_idx : (mask & LEFT_SCALAR) ? scalar_indices : array_indices) {\r\n         // etc.\r\n   ```\r\n   \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-30T14:18:20.168+0000",
                    "updated": "2021-09-30T14:18:20.168+0000",
                    "started": "2021-09-30T14:18:20.168+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "658376",
                    "issueId": "13390078"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13390078/worklog/658392",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #11218:\nURL: https://github.com/apache/arrow/pull/11218#discussion_r719475103\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_if_else.cc\n##########\n@@ -989,23 +1123,41 @@ struct IfElseFunction : ScalarFunction {\n     RETURN_NOT_OK(CheckArity(*values));\n \n     using arrow::compute::detail::DispatchExactImpl;\n-    if (auto kernel = DispatchExactImpl(this, *values)) return kernel;\n+    // Do not DispatchExact here because it'll let through something like (bool,\n+    // timestamp[s], timestamp[s, \"UTC\"])\n \n     // if 0th descriptor is null, replace with bool\n     if (values->at(0).type->id() == Type::NA) {\n       values->at(0).type = boolean();\n     }\n \n     // if-else 0'th descriptor is bool, so skip it\n-    std::vector<ValueDescr> values_copy(values->begin() + 1, values->end());\n-    internal::EnsureDictionaryDecoded(&values_copy);\n-    internal::ReplaceNullWithOtherType(&values_copy);\n+    ValueDescr* left_arg = &(*values)[1];\n+    constexpr size_t num_args = 2;\n \n-    if (auto type = internal::CommonNumeric(values_copy)) {\n-      internal::ReplaceTypes(type, &values_copy);\n+    internal::ReplaceNullWithOtherType(left_arg, num_args);\n+\n+    if (is_dictionary((*values)[1].type->id()) &&\n+        (*values)[1].type->Equals(*(*values)[2].type)) {\n\nReview comment:\n       The intent here is to check if both arguments are identical dictionary types, in which case we dispatch to the dictionary kernel; otherwise we continue on and dictionary-decode. This is a little confusing as written so I'll add a comment and refactor this.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-30T14:39:02.532+0000",
                    "updated": "2021-09-30T14:39:02.532+0000",
                    "started": "2021-09-30T14:39:02.531+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "658392",
                    "issueId": "13390078"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13390078/worklog/658398",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #11218:\nURL: https://github.com/apache/arrow/pull/11218#discussion_r719479881\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_if_else.cc\n##########\n@@ -1031,7 +1183,16 @@ void AddPrimitiveIfElseKernels(const std::shared_ptr<ScalarFunction>& scalar_fun\n         internal::GenerateTypeAgnosticPrimitive<ResolveIfElseExec,\n                                                 /*AllocateMem=*/std::false_type>(*type);\n     // cond array needs to be boolean always\n-    ScalarKernel kernel({boolean(), type, type}, type, exec);\n+    std::shared_ptr<KernelSignature> sig;\n+    if (type->id() == Type::TIMESTAMP) {\n+      auto unit = checked_cast<const TimestampType&>(*type).unit();\n+      sig = KernelSignature::Make(\n+          {boolean(), match::TimestampTypeUnit(unit), match::TimestampTypeUnit(unit)},\n\nReview comment:\n       Ah, the match here is because otherwise, the kernel for `timestamp[s]` doesn't match `timestamp[s, tz=...]` since the check is exact.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-30T14:44:02.378+0000",
                    "updated": "2021-09-30T14:44:02.378+0000",
                    "started": "2021-09-30T14:44:02.378+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "658398",
                    "issueId": "13390078"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13390078/worklog/658400",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #11218:\nURL: https://github.com/apache/arrow/pull/11218#discussion_r719480771\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_if_else.cc\n##########\n@@ -1031,7 +1183,16 @@ void AddPrimitiveIfElseKernels(const std::shared_ptr<ScalarFunction>& scalar_fun\n         internal::GenerateTypeAgnosticPrimitive<ResolveIfElseExec,\n                                                 /*AllocateMem=*/std::false_type>(*type);\n     // cond array needs to be boolean always\n-    ScalarKernel kernel({boolean(), type, type}, type, exec);\n+    std::shared_ptr<KernelSignature> sig;\n+    if (type->id() == Type::TIMESTAMP) {\n+      auto unit = checked_cast<const TimestampType&>(*type).unit();\n+      sig = KernelSignature::Make(\n+          {boolean(), match::TimestampTypeUnit(unit), match::TimestampTypeUnit(unit)},\n\nReview comment:\n       Mismatched timezones get caught by CheckIdenticalTypes. Mismatched units get either implicitly casted, or else you get NotImplemented if you have say `timestamp[s]` and `timestamp[ms, tz=America/Phoenix]` since no kernel is registsered for this combo. There are some tests for this.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-30T14:45:03.868+0000",
                    "updated": "2021-09-30T14:45:03.868+0000",
                    "started": "2021-09-30T14:45:03.867+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "658400",
                    "issueId": "13390078"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13390078/worklog/658499",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #11218:\nURL: https://github.com/apache/arrow/pull/11218#discussion_r719605721\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_if_else_test.cc\n##########\n@@ -103,7 +118,7 @@ void CheckWithDifferentShapes(const std::shared_ptr<Array>& cond,\n   auto len = left->length();\n \n   enum { COND_SCALAR = 1, LEFT_SCALAR = 2, RIGHT_SCALAR = 4 };\n-  for (int mask = 0; mask < (COND_SCALAR | LEFT_SCALAR | RIGHT_SCALAR); ++mask) {\n+  for (int mask = 1; mask <= (COND_SCALAR | LEFT_SCALAR | RIGHT_SCALAR); ++mask) {\n     for (int64_t cond_idx = 0; cond_idx < len; ++cond_idx) {\n\nReview comment:\n       Thanks, this makes things much more readable here.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-30T17:11:40.654+0000",
                    "updated": "2021-09-30T17:11:40.654+0000",
                    "started": "2021-09-30T17:11:40.654+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "658499",
                    "issueId": "13390078"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13390078/worklog/658502",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #11218:\nURL: https://github.com/apache/arrow/pull/11218#discussion_r719607062\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_if_else.cc\n##########\n@@ -900,44 +896,182 @@ struct IfElseFunctor<Type, enable_if_fixed_size_binary<Type>> {\n     auto* out_values = out->buffers[1]->mutable_data() + out->offset * byte_width;\n \n     // copy right data to out_buff\n-    const util::string_view& right_data =\n-        internal::UnboxScalar<FixedSizeBinaryType>::Unbox(right);\n-    if (right_data.data()) {\n+    const uint8_t* right_data = UnboxBinaryScalar(right);\n+    if (right_data) {\n       for (int64_t i = 0; i < cond.length; i++) {\n-        std::memcpy(out_values + i * byte_width, right_data.data(), right_data.size());\n+        std::memcpy(out_values + i * byte_width, right_data, byte_width);\n       }\n     }\n \n     // selectively copy values from left data\n-    const util::string_view& left_data =\n-        internal::UnboxScalar<FixedSizeBinaryType>::Unbox(left);\n-\n+    const uint8_t* left_data = UnboxBinaryScalar(left);\n     RunIfElseLoop(cond, [&](int64_t data_offset, int64_t num_elems) {\n-      if (left_data.data()) {\n+      if (left_data) {\n         for (int64_t i = 0; i < num_elems; i++) {\n-          std::memcpy(out_values + (data_offset + i) * byte_width, left_data.data(),\n-                      left_data.size());\n+          std::memcpy(out_values + (data_offset + i) * byte_width, left_data, byte_width);\n         }\n       }\n     });\n \n     return Status::OK();\n   }\n \n-  static Result<int32_t> GetByteWidth(const DataType& left_type,\n-                                      const DataType& right_type) {\n-    int width = checked_cast<const FixedSizeBinaryType&>(left_type).byte_width();\n-    if (width == checked_cast<const FixedSizeBinaryType&>(right_type).byte_width()) {\n-      return width;\n+  template <typename T = Type>\n+  static enable_if_t<!is_decimal_type<T>::value, const uint8_t*> UnboxBinaryScalar(\n+      const Scalar& scalar) {\n+    return reinterpret_cast<const uint8_t*>(\n+        internal::UnboxScalar<FixedSizeBinaryType>::Unbox(scalar).data());\n+  }\n+\n+  template <typename T = Type>\n+  static enable_if_decimal<T, const uint8_t*> UnboxBinaryScalar(const Scalar& scalar) {\n+    return internal::UnboxScalar<T>::Unbox(scalar).native_endian_bytes();\n+  }\n+\n+  template <typename T = Type>\n+  static enable_if_t<!is_decimal_type<T>::value, Result<int32_t>> GetByteWidth(\n+      const DataType& left_type, const DataType& right_type) {\n+    const int32_t width =\n+        checked_cast<const FixedSizeBinaryType&>(left_type).byte_width();\n+    DCHECK_EQ(width, checked_cast<const FixedSizeBinaryType&>(right_type).byte_width());\n+    return width;\n+  }\n+\n+  template <typename T = Type>\n+  static enable_if_decimal<T, Result<int32_t>> GetByteWidth(const DataType& left_type,\n+                                                            const DataType& right_type) {\n+    const auto& left = checked_cast<const T&>(left_type);\n+    const auto& right = checked_cast<const T&>(right_type);\n+    DCHECK_EQ(left.precision(), right.precision());\n+    DCHECK_EQ(left.scale(), right.scale());\n+    return left.byte_width();\n+  }\n+};\n+\n+// Use builders for dictionaries - slower, but allows us to unify dictionaries\n+template <typename Type>\n+struct IfElseFunctor<\n+    Type, enable_if_t<is_nested_type<Type>::value || is_dictionary_type<Type>::value>> {\n+  // A - Array, S - Scalar, X = Array/Scalar\n+\n+  // SXX\n+  static Status Call(KernelContext* ctx, const BooleanScalar& cond, const Datum& left,\n+                     const Datum& right, Datum* out) {\n+    if (left.is_scalar() && right.is_scalar()) {\n+      if (cond.is_valid) {\n+        *out = cond.value ? left.scalar() : right.scalar();\n+      } else {\n+        *out = MakeNullScalar(left.type());\n+      }\n+      return Status::OK();\n+    }\n+    // either left or right is an array. Output is always an array\n+    int64_t out_arr_len = std::max(left.length(), right.length());\n+    if (!cond.is_valid) {\n+      // cond is null; just create a null array\n+      ARROW_ASSIGN_OR_RAISE(*out,\n+                            MakeArrayOfNull(left.type(), out_arr_len, ctx->memory_pool()))\n+      return Status::OK();\n+    }\n+\n+    const auto& valid_data = cond.value ? left : right;\n+    if (valid_data.is_array()) {\n+      *out = valid_data;\n     } else {\n-      return Status::Invalid(\"FixedSizeBinaryType byte_widths should be equal\");\n+      // valid data is a scalar that needs to be broadcasted\n+      ARROW_ASSIGN_OR_RAISE(*out, MakeArrayFromScalar(*valid_data.scalar(), out_arr_len,\n+                                                      ctx->memory_pool()));\n     }\n+    return Status::OK();\n+  }\n+\n+  //  AAA\n+  static Status Call(KernelContext* ctx, const ArrayData& cond, const ArrayData& left,\n+                     const ArrayData& right, ArrayData* out) {\n+    return RunLoop(\n\nReview comment:\n       I updated this to use BitRunReader. I also made this kernel not templated, since it didn't depend on the type in the first place, and to skip PromoteNullsVisitor, since the builder computes the output bitmap (and since unions and dictionaries with nulls mean PromoteNullsVisitor calculates an invalid bitmap anyways).\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-30T17:13:40.737+0000",
                    "updated": "2021-09-30T17:13:40.737+0000",
                    "started": "2021-09-30T17:13:40.737+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "658502",
                    "issueId": "13390078"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13390078/worklog/659563",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #11218:\nURL: https://github.com/apache/arrow/pull/11218#discussion_r721367975\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_if_else.cc\n##########\n@@ -900,44 +896,182 @@ struct IfElseFunctor<Type, enable_if_fixed_size_binary<Type>> {\n     auto* out_values = out->buffers[1]->mutable_data() + out->offset * byte_width;\n \n     // copy right data to out_buff\n-    const util::string_view& right_data =\n-        internal::UnboxScalar<FixedSizeBinaryType>::Unbox(right);\n-    if (right_data.data()) {\n+    const uint8_t* right_data = UnboxBinaryScalar(right);\n+    if (right_data) {\n       for (int64_t i = 0; i < cond.length; i++) {\n-        std::memcpy(out_values + i * byte_width, right_data.data(), right_data.size());\n+        std::memcpy(out_values + i * byte_width, right_data, byte_width);\n       }\n     }\n \n     // selectively copy values from left data\n-    const util::string_view& left_data =\n-        internal::UnboxScalar<FixedSizeBinaryType>::Unbox(left);\n-\n+    const uint8_t* left_data = UnboxBinaryScalar(left);\n     RunIfElseLoop(cond, [&](int64_t data_offset, int64_t num_elems) {\n-      if (left_data.data()) {\n+      if (left_data) {\n         for (int64_t i = 0; i < num_elems; i++) {\n-          std::memcpy(out_values + (data_offset + i) * byte_width, left_data.data(),\n-                      left_data.size());\n+          std::memcpy(out_values + (data_offset + i) * byte_width, left_data, byte_width);\n         }\n       }\n     });\n \n     return Status::OK();\n   }\n \n-  static Result<int32_t> GetByteWidth(const DataType& left_type,\n-                                      const DataType& right_type) {\n-    int width = checked_cast<const FixedSizeBinaryType&>(left_type).byte_width();\n-    if (width == checked_cast<const FixedSizeBinaryType&>(right_type).byte_width()) {\n-      return width;\n+  template <typename T = Type>\n+  static enable_if_t<!is_decimal_type<T>::value, const uint8_t*> UnboxBinaryScalar(\n+      const Scalar& scalar) {\n+    return reinterpret_cast<const uint8_t*>(\n+        internal::UnboxScalar<FixedSizeBinaryType>::Unbox(scalar).data());\n+  }\n+\n+  template <typename T = Type>\n+  static enable_if_decimal<T, const uint8_t*> UnboxBinaryScalar(const Scalar& scalar) {\n+    return internal::UnboxScalar<T>::Unbox(scalar).native_endian_bytes();\n+  }\n+\n+  template <typename T = Type>\n+  static enable_if_t<!is_decimal_type<T>::value, Result<int32_t>> GetByteWidth(\n+      const DataType& left_type, const DataType& right_type) {\n+    const int32_t width =\n+        checked_cast<const FixedSizeBinaryType&>(left_type).byte_width();\n+    DCHECK_EQ(width, checked_cast<const FixedSizeBinaryType&>(right_type).byte_width());\n+    return width;\n+  }\n+\n+  template <typename T = Type>\n+  static enable_if_decimal<T, Result<int32_t>> GetByteWidth(const DataType& left_type,\n+                                                            const DataType& right_type) {\n+    const auto& left = checked_cast<const T&>(left_type);\n+    const auto& right = checked_cast<const T&>(right_type);\n+    DCHECK_EQ(left.precision(), right.precision());\n+    DCHECK_EQ(left.scale(), right.scale());\n+    return left.byte_width();\n+  }\n+};\n+\n+// Use builders for dictionaries - slower, but allows us to unify dictionaries\n+template <typename Type>\n+struct IfElseFunctor<\n+    Type, enable_if_t<is_nested_type<Type>::value || is_dictionary_type<Type>::value>> {\n+  // A - Array, S - Scalar, X = Array/Scalar\n+\n+  // SXX\n+  static Status Call(KernelContext* ctx, const BooleanScalar& cond, const Datum& left,\n+                     const Datum& right, Datum* out) {\n+    if (left.is_scalar() && right.is_scalar()) {\n+      if (cond.is_valid) {\n+        *out = cond.value ? left.scalar() : right.scalar();\n+      } else {\n+        *out = MakeNullScalar(left.type());\n+      }\n+      return Status::OK();\n+    }\n+    // either left or right is an array. Output is always an array\n+    int64_t out_arr_len = std::max(left.length(), right.length());\n+    if (!cond.is_valid) {\n+      // cond is null; just create a null array\n+      ARROW_ASSIGN_OR_RAISE(*out,\n+                            MakeArrayOfNull(left.type(), out_arr_len, ctx->memory_pool()))\n+      return Status::OK();\n+    }\n+\n+    const auto& valid_data = cond.value ? left : right;\n+    if (valid_data.is_array()) {\n+      *out = valid_data;\n     } else {\n-      return Status::Invalid(\"FixedSizeBinaryType byte_widths should be equal\");\n+      // valid data is a scalar that needs to be broadcasted\n+      ARROW_ASSIGN_OR_RAISE(*out, MakeArrayFromScalar(*valid_data.scalar(), out_arr_len,\n+                                                      ctx->memory_pool()));\n     }\n+    return Status::OK();\n+  }\n+\n+  //  AAA\n+  static Status Call(KernelContext* ctx, const ArrayData& cond, const ArrayData& left,\n+                     const ArrayData& right, ArrayData* out) {\n+    return RunLoop(\n\nReview comment:\n       Great, thank you!\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-04T13:32:25.992+0000",
                    "updated": "2021-10-04T13:32:25.992+0000",
                    "started": "2021-10-04T13:32:25.992+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "659563",
                    "issueId": "13390078"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13390078/worklog/659609",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou closed pull request #11218:\nURL: https://github.com/apache/arrow/pull/11218\n\n\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-04T14:44:13.827+0000",
                    "updated": "2021-10-04T14:44:13.827+0000",
                    "started": "2021-10-04T14:44:13.827+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "659609",
                    "issueId": "13390078"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 9000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@5d2ff5ba[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6f89957[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6289ba07[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@20f9a520[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@a7f9723[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@2727e8c[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2d04b547[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@4039d562[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@360994c9[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@279e1a9a[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2fb82da3[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@21a47ff3[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 9000,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Oct 04 14:44:04 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-10-04T14:44:04.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-13358/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2021-07-16T15:15:57.000+0000",
        "updated": "2021-11-29T20:31:19.000+0000",
        "timeoriginalestimate": null,
        "description": "If_else kernel requires following additional type support\u00a0\r\n * Decimal type (trivial as there's fixed sized binary support already)\r\n * Dict type\r\n * Union Type\r\n * Timestamp with time zone\r\n * Lists\r\n * Structs",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 9000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Extend type support for if_else kernel",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13390078/comment/17423980",
                    "id": "17423980",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 11218\n[https://github.com/apache/arrow/pull/11218]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2021-10-04T14:44:04.916+0000",
                    "updated": "2021-10-04T14:44:04.916+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0t0s8:",
        "customfield_12314139": null
    }
}