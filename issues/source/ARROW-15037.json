{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13416160",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13416160",
    "key": "ARROW-15037",
    "fields": {
        "fixVersions": [],
        "resolution": null,
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
            "name": "Minor",
            "id": "4"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": null,
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/3",
            "description": "This issue is being actively worked on at the moment by the assignee.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/inprogress.png",
            "name": "In Progress",
            "id": "3",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/4",
                "id": 4,
                "key": "indeterminate",
                "colorName": "yellow",
                "name": "In Progress"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12334712",
                "id": "12334712",
                "name": "C#"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=Zixi",
            "name": "Zixi",
            "key": "JIRAUSER281159",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34048",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34048",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34048",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34048"
            },
            "displayName": "Zixi Wang",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=Zixi",
            "name": "Zixi",
            "key": "JIRAUSER281159",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34048",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34048",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34048",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34048"
            },
            "displayName": "Zixi Wang",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "aggregateprogress": {
            "progress": 17400,
            "total": 17400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 17400,
            "total": 17400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-15037/votes",
            "votes": 1,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 29,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13416160/worklog/692915",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #11874:\nURL: https://github.com/apache/arrow/pull/11874#issuecomment-989303372\n\n\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-08T23:14:21.634+0000",
                    "updated": "2021-12-08T23:14:21.634+0000",
                    "started": "2021-12-08T23:14:21.634+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "692915",
                    "issueId": "13416160"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13416160/worklog/692916",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zixi-bwang commented on pull request #11874:\nURL: https://github.com/apache/arrow/pull/11874#issuecomment-989303855\n\n\n   > One quick question/suggestion: Can you add a small `README` to the example explaining what it is showing? Describe the scenario, etc.\r\n   \r\n   Hi @eerhardt, I added the readme also updated the example, please review.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-08T23:15:04.561+0000",
                    "updated": "2021-12-08T23:15:04.561+0000",
                    "started": "2021-12-08T23:15:04.561+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "692916",
                    "issueId": "13416160"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13416160/worklog/698046",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "eerhardt commented on a change in pull request #11874:\nURL: https://github.com/apache/arrow/pull/11874#discussion_r771593521\n\n\n\n##########\nFile path: csharp/examples/IoTExample/IoTExample.csproj\n##########\n@@ -0,0 +1,16 @@\n+\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n+\n+  <PropertyGroup>\n+    <OutputType>Exe</OutputType>\n+    <TargetFramework>netcoreapp2.1</TargetFramework>\n\nReview comment:\n       ```suggestion\r\n       <TargetFramework>netcoreapp3.1</TargetFramework>\r\n   ```\r\n   \r\n   2.1 is EOL'd. Can you update this to 3.1?\n\n##########\nFile path: csharp/examples/IoTExample/README.md\n##########\n@@ -0,0 +1,29 @@\n+\ufeff# .NET IoT Analytics\n+\n+## Introduction\n+\n+For Big Data problems, people will find that most of the technology and resources are for Java, Python, R, and Scala.\n+Unfortunately, it's not the same for C#. But with Apache Arrow, a language-agnostic data format, the gap between Big Data Technology and\n+.Net Enterprise Software Development can be bridged. \n+\n+## The original dataset is:\n+\n+[WISDM Smartphone and Smartwatch Activity and Biometrics Dataset Dataset](https://archive.ics.uci.edu/ml/datasets/WISDM+Smartphone+and+Smartwatch+Activity+and+Biometrics+Dataset+):\n+   Contains accelerometer and gyroscope time-series sensor data collected from a smartphone and smartwatch as 51 test subjects perform 18 activities for 3 minutes each.\n+\n+## The sample dataset used in this example is randomly generated in order to test arrow in large-scale data scenario\n+\n+The sample dataset includes activity data from 1000 participants from an activity recognition project.\n+Each participant performed each of the 18 activities for a total amount of one billion accelerometer data events\n+reported from smartphone and smartwatch.\n+\n+Timestamp is the time at which the sensor reported the reading.\n+X_Axis is the g-force acceleration along the x-axis.\n+Y_Axis is the g-force acceleration along the y-axis.\n+Z_Axis is the g-force acceleration along the z-axis.\n\nReview comment:\n       ```suggestion\r\n   * Timestamp is the time at which the sensor reported the reading.\r\n   * X_Axis is the g-force acceleration along the x-axis.\r\n   * Y_Axis is the g-force acceleration along the y-axis.\r\n   * Z_Axis is the g-force acceleration along the z-axis.\r\n   ```\r\n   \r\n   It may make this easier to read with bulleting.\n\n##########\nFile path: csharp/examples/IoTExample/Model/SampleDataset.cs\n##########\n@@ -0,0 +1,211 @@\n+\ufeff// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements. See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+using System;\n+using System.IO;\n+using System.Threading.Tasks;\n+using System.Diagnostics;\n+using System.Collections.Concurrent;\n+using System.Collections.Generic;\n+using Apache.Arrow;\n+using Apache.Arrow.Ipc;\n+using Apache.Arrow.Memory;\n+\n+namespace IoTExample\n+{\n+    public class SampleDataset\n+    {\n+        private int _size;\n+        private readonly int _inputs;\n+        private readonly int _capacity;\n+        private readonly BlockingCollection<SensorData> _rows;\n+\n+        private readonly List<int> _colSubjectId;\n+        private readonly List<string> _colActivityLabel;\n+        private readonly List<long> _colTimestamp;\n+        private readonly List<double> _colXAxis;\n+        private readonly List<double> _colYAxis;\n+        private readonly List<double> _colZAxis;\n+\n+        private readonly int _threshold = 1_000_000;\n+        private readonly List<RecordBatch> _recordBatches;\n+        private readonly MemoryAllocator _memoryAllocator;\n+\n+        public Dictionary<string, string> activityLabel = new Dictionary<string, string>()\n+            {\n+                {\"walking\", \"A\"},\n+                {\"jogging\", \"B\"},\n+                {\"stairs\", \"C\"},\n+                {\"sitting\", \"D\"},\n+                {\"standing\", \"E\"},\n+                {\"typing\", \"F\"},\n+                {\"teeth\", \"G\"},\n+                {\"soup\", \"H\"},\n+                {\"chips\", \"I\"},\n+                {\"pasta\", \"J\"},\n+                {\"drinking\", \"K\"},\n+                {\"sandwich\", \"L\"},\n+                {\"kicking\", \"M\"},\n+                {\"catch\", \"O\"},\n+                {\"dribbling\", \"P\"},\n+                {\"writing\", \"Q\"},\n+                {\"clapping\", \"R\"},\n+                {\"folding\", \"S\"},\n+            };\n+\n+        public SampleDataset(int inputs, int capacity)\n+        {\n+            _inputs = inputs;\n+            _capacity = capacity;\n+            _rows = new BlockingCollection<SensorData>(_capacity);\n+\n+            _colSubjectId = new List<int>(capacity);\n+            _colActivityLabel = new List<string>();\n+            _colTimestamp = new List<long>();\n+            _colXAxis = new List<double>();\n+            _colYAxis = new List<double>();\n+            _colZAxis = new List<double>();\n+\n+            _recordBatches = new List<RecordBatch>();\n+            _memoryAllocator = new NativeMemoryAllocator(alignment: 64);\n+        }\n+\n+        public void Produce()\n+        {\n+            Random rand = new Random();\n+            bool success;\n+\n+            List<string> keyList = new List<string>(activityLabel.Keys);\n+            int count = keyList.Count;\n+\n+            DateTime now = DateTime.Now;\n+            long unixTime = ((DateTimeOffset)now).ToUnixTimeSeconds();\n+\n+            while (_size < _inputs)\n+            {\n+                string randomKey = keyList[rand.Next(count)];\n+                string label = activityLabel[randomKey];\n+\n+                // generate missing values\n+                if (rand.Next(10_000) == 9_999)\n+                {\n+                    label = null;\n+                }\n+\n+                success = _rows.TryAdd(new SensorData\n+                {\n+                    subjectId = rand.Next(1000, 2001),\n+                    activityLabel = label,\n+                    timestamp = unixTime++,\n+                    x_Axis = rand.NextDouble(),\n+                    y_Axis = rand.NextDouble(),\n+                    z_Axis = rand.NextDouble(),\n+                }); \n+\n+                if (success)\n+                {\n+                    //Console.WriteLine($\"Enqueue Task 0\");\n+                    _size++;\n+                }\n+                else\n+                {\n+                    Console.WriteLine(\"Producing is blocked, percent completed is: {0}%\", Math.Round((double)_size / _inputs, 4) * 100);\n+                }\n+            }\n+\n+            _rows.CompleteAdding();\n+        }\n+\n+        public async void Consume()\n+        {\n+            while (!_rows.IsCompleted)\n+            {\n+                if (!_rows.TryTake(out SensorData item, 3000))\n+                {\n+                    Console.WriteLine(\"Consuming is blocked!\");\n+                }\n+                else\n+                {\n+                    //Console.WriteLine($\"Dequeue Task 1\");\n+                    if (item != null && item.subjectId != null)\n+                    {\n+                        _colSubjectId.Add((int)item.subjectId);\n+                        _colActivityLabel.Add(item.activityLabel);\n+                        _colTimestamp.Add((long)item.timestamp);\n+                        _colXAxis.Add((double)item.x_Axis);\n+                        _colYAxis.Add((double)item.y_Axis);\n+                        _colZAxis.Add((double)item.z_Axis);\n+                    }\n+                }\n+\n+                if (_colSubjectId.Count == _threshold)\n+                {\n+                    // Build a record batch using the Fluent API\n+                    var recordBatch = new RecordBatch.Builder(_memoryAllocator)\n+                        .Append(\"SubjectId\", false, col => col.Int32(array => array.AppendRange(_colSubjectId)))\n+                        .Append(\"ActivityLabel\", false, col => col.String(array => array.AppendRange(_colActivityLabel)))\n+                        .Append(\"Timestamp\", false, col => col.Int64(array => array.AppendRange(_colTimestamp)))\n+                        .Append(\"XAxis\", false, col => col.Double(array => array.AppendRange(_colXAxis)))\n+                        .Append(\"YAxis\", false, col => col.Double(array => array.AppendRange(_colYAxis)))\n+                        .Append(\"ZAxis\", false, col => col.Double(array => array.AppendRange(_colZAxis)))\n+                        .Build();\n+\n+                    _recordBatches.Add(recordBatch);\n+\n+                    _colSubjectId.Clear();\n+                    _colActivityLabel.Clear();\n+                    _colTimestamp.Clear();\n+                    _colXAxis.Clear();\n+                    _colYAxis.Clear();\n+                    _colZAxis.Clear();\n+                }\n+            }\n+        }\n+\n+        public async Task<bool> PersistData()\n+        {\n+            string time = DateTime.Now.ToString(\"yyyyMMdd_HHmmss\");\n+            Stopwatch stopwatch = new Stopwatch();\n+            stopwatch.Start();\n+\n+            Schema schema = _recordBatches[0].Schema;\n+            // Write record batch to a file\n+            using (var stream = File.OpenWrite(@\"c:\\temp\\data\\iotbigdata.arrow\"))\n\nReview comment:\n       If this path doesn't exist, you get an error at the end of the run:\r\n   \r\n   ```\r\n   Producing is blocked, percent completed is: 90%\r\n   Unhandled exception. System.IO.DirectoryNotFoundException: Could not find a part of the path 'c:\\temp\\data\\iotbigdata.arrow'.\r\n      at System.IO.FileStream.ValidateFileHandle(SafeFileHandle fileHandle)\r\n      at System.IO.FileStream.CreateFileOpenHandle(FileMode mode, FileShare share, FileOptions options)\r\n      at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options)\r\n      at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share)\r\n      at System.IO.File.OpenWrite(String path)\r\n      at IoTExample.SampleDataset.PersistData() in C:\\git\\arrow\\csharp\\examples\\IoTExample\\Model\\SampleDataset.cs:line 185\r\n      at IoTExample.Program.Main(String[] args) in C:\\git\\arrow\\csharp\\examples\\IoTExample\\Program.cs:line 42\r\n      at IoTExample.Program.<Main>(String[] args)\r\n   ```\r\n   \r\n   Maybe just write the file to the current directory?\n\n##########\nFile path: csharp/examples/IoTExample/Program.cs\n##########\n@@ -0,0 +1,71 @@\n+\ufeff// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements. See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+using System;\n+using System.IO;\n+using System.Threading.Tasks;\n+using Apache.Arrow.Ipc;\n+\n+namespace IoTExample\n+{\n+    class Program\n+    {\n+        public static int concurrencyLevel = 1;\n+        public static int totalInputs = 10_000_000;\n+        public static int queueCapacity = 1_000_000;\n+\n+        public static async Task Main(string[] args)\n+        {\n+            SampleDataset sd = new SampleDataset(totalInputs, queueCapacity);\n+\n+            Console.WriteLine(\"Receiving IoT data...\");\n+            Task t1 = Task.Run(() => sd.Produce());\n+\n+            Console.WriteLine(\"Transforming data...\");\n+            Task t2 = Task.Run(() => sd.Consume());\n+\n+            // Wait for all tasks to complete\n+            Task.WaitAll(t1, t2);\n+\n+            var success = await sd.PersistData();\n+\n+            if (!success)\n+                return;\n+\n+            Console.WriteLine(\"Reading arrow files...\");\n+            var stream = File.OpenRead(@\"c:\\temp\\data\\iotbigdata.arrow\");\n\nReview comment:\n       Since this path needs to be in sync with `PersistData`, it may make sense to declare it in one spot, and pass it into `SampleDataset`.\n\n##########\nFile path: csharp/examples/IoTExample/Model/SampleDataset.cs\n##########\n@@ -0,0 +1,211 @@\n+\ufeff// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements. See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+using System;\n+using System.IO;\n+using System.Threading.Tasks;\n+using System.Diagnostics;\n+using System.Collections.Concurrent;\n+using System.Collections.Generic;\n+using Apache.Arrow;\n+using Apache.Arrow.Ipc;\n+using Apache.Arrow.Memory;\n+\n+namespace IoTExample\n+{\n+    public class SampleDataset\n+    {\n+        private int _size;\n+        private readonly int _inputs;\n+        private readonly int _capacity;\n+        private readonly BlockingCollection<SensorData> _rows;\n+\n+        private readonly List<int> _colSubjectId;\n+        private readonly List<string> _colActivityLabel;\n+        private readonly List<long> _colTimestamp;\n+        private readonly List<double> _colXAxis;\n+        private readonly List<double> _colYAxis;\n+        private readonly List<double> _colZAxis;\n+\n+        private readonly int _threshold = 1_000_000;\n+        private readonly List<RecordBatch> _recordBatches;\n+        private readonly MemoryAllocator _memoryAllocator;\n+\n+        public Dictionary<string, string> activityLabel = new Dictionary<string, string>()\n+            {\n+                {\"walking\", \"A\"},\n+                {\"jogging\", \"B\"},\n+                {\"stairs\", \"C\"},\n+                {\"sitting\", \"D\"},\n+                {\"standing\", \"E\"},\n+                {\"typing\", \"F\"},\n+                {\"teeth\", \"G\"},\n+                {\"soup\", \"H\"},\n+                {\"chips\", \"I\"},\n+                {\"pasta\", \"J\"},\n+                {\"drinking\", \"K\"},\n+                {\"sandwich\", \"L\"},\n+                {\"kicking\", \"M\"},\n+                {\"catch\", \"O\"},\n+                {\"dribbling\", \"P\"},\n+                {\"writing\", \"Q\"},\n+                {\"clapping\", \"R\"},\n+                {\"folding\", \"S\"},\n+            };\n+\n+        public SampleDataset(int inputs, int capacity)\n+        {\n+            _inputs = inputs;\n+            _capacity = capacity;\n+            _rows = new BlockingCollection<SensorData>(_capacity);\n+\n+            _colSubjectId = new List<int>(capacity);\n+            _colActivityLabel = new List<string>();\n+            _colTimestamp = new List<long>();\n+            _colXAxis = new List<double>();\n+            _colYAxis = new List<double>();\n+            _colZAxis = new List<double>();\n+\n+            _recordBatches = new List<RecordBatch>();\n+            _memoryAllocator = new NativeMemoryAllocator(alignment: 64);\n+        }\n+\n+        public void Produce()\n+        {\n+            Random rand = new Random();\n+            bool success;\n+\n+            List<string> keyList = new List<string>(activityLabel.Keys);\n+            int count = keyList.Count;\n+\n+            DateTime now = DateTime.Now;\n+            long unixTime = ((DateTimeOffset)now).ToUnixTimeSeconds();\n+\n+            while (_size < _inputs)\n+            {\n+                string randomKey = keyList[rand.Next(count)];\n+                string label = activityLabel[randomKey];\n+\n+                // generate missing values\n+                if (rand.Next(10_000) == 9_999)\n+                {\n+                    label = null;\n+                }\n+\n+                success = _rows.TryAdd(new SensorData\n+                {\n+                    subjectId = rand.Next(1000, 2001),\n+                    activityLabel = label,\n+                    timestamp = unixTime++,\n+                    x_Axis = rand.NextDouble(),\n+                    y_Axis = rand.NextDouble(),\n+                    z_Axis = rand.NextDouble(),\n+                }); \n+\n+                if (success)\n+                {\n+                    //Console.WriteLine($\"Enqueue Task 0\");\n+                    _size++;\n+                }\n+                else\n+                {\n+                    Console.WriteLine(\"Producing is blocked, percent completed is: {0}%\", Math.Round((double)_size / _inputs, 4) * 100);\n+                }\n+            }\n+\n+            _rows.CompleteAdding();\n+        }\n+\n+        public async void Consume()\n+        {\n+            while (!_rows.IsCompleted)\n+            {\n+                if (!_rows.TryTake(out SensorData item, 3000))\n+                {\n+                    Console.WriteLine(\"Consuming is blocked!\");\n+                }\n+                else\n+                {\n+                    //Console.WriteLine($\"Dequeue Task 1\");\n+                    if (item != null && item.subjectId != null)\n+                    {\n+                        _colSubjectId.Add((int)item.subjectId);\n+                        _colActivityLabel.Add(item.activityLabel);\n+                        _colTimestamp.Add((long)item.timestamp);\n+                        _colXAxis.Add((double)item.x_Axis);\n+                        _colYAxis.Add((double)item.y_Axis);\n+                        _colZAxis.Add((double)item.z_Axis);\n+                    }\n+                }\n+\n+                if (_colSubjectId.Count == _threshold)\n+                {\n+                    // Build a record batch using the Fluent API\n+                    var recordBatch = new RecordBatch.Builder(_memoryAllocator)\n+                        .Append(\"SubjectId\", false, col => col.Int32(array => array.AppendRange(_colSubjectId)))\n+                        .Append(\"ActivityLabel\", false, col => col.String(array => array.AppendRange(_colActivityLabel)))\n+                        .Append(\"Timestamp\", false, col => col.Int64(array => array.AppendRange(_colTimestamp)))\n+                        .Append(\"XAxis\", false, col => col.Double(array => array.AppendRange(_colXAxis)))\n+                        .Append(\"YAxis\", false, col => col.Double(array => array.AppendRange(_colYAxis)))\n+                        .Append(\"ZAxis\", false, col => col.Double(array => array.AppendRange(_colZAxis)))\n+                        .Build();\n+\n+                    _recordBatches.Add(recordBatch);\n+\n+                    _colSubjectId.Clear();\n+                    _colActivityLabel.Clear();\n+                    _colTimestamp.Clear();\n+                    _colXAxis.Clear();\n+                    _colYAxis.Clear();\n+                    _colZAxis.Clear();\n+                }\n+            }\n+        }\n+\n+        public async Task<bool> PersistData()\n\nReview comment:\n       ```suggestion\r\n           public async Task PersistData()\r\n   ```\r\n   \r\n   This method never returns `false`. So you can just change it to return `Task` instead.\n\n##########\nFile path: csharp/examples/IoTExample/Model/SampleDataset.cs\n##########\n@@ -0,0 +1,211 @@\n+\ufeff// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements. See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+using System;\n+using System.IO;\n+using System.Threading.Tasks;\n+using System.Diagnostics;\n+using System.Collections.Concurrent;\n+using System.Collections.Generic;\n+using Apache.Arrow;\n+using Apache.Arrow.Ipc;\n+using Apache.Arrow.Memory;\n+\n+namespace IoTExample\n+{\n+    public class SampleDataset\n+    {\n+        private int _size;\n+        private readonly int _inputs;\n+        private readonly int _capacity;\n+        private readonly BlockingCollection<SensorData> _rows;\n+\n+        private readonly List<int> _colSubjectId;\n+        private readonly List<string> _colActivityLabel;\n+        private readonly List<long> _colTimestamp;\n+        private readonly List<double> _colXAxis;\n+        private readonly List<double> _colYAxis;\n+        private readonly List<double> _colZAxis;\n+\n+        private readonly int _threshold = 1_000_000;\n+        private readonly List<RecordBatch> _recordBatches;\n+        private readonly MemoryAllocator _memoryAllocator;\n+\n+        public Dictionary<string, string> activityLabel = new Dictionary<string, string>()\n+            {\n+                {\"walking\", \"A\"},\n+                {\"jogging\", \"B\"},\n+                {\"stairs\", \"C\"},\n+                {\"sitting\", \"D\"},\n+                {\"standing\", \"E\"},\n+                {\"typing\", \"F\"},\n+                {\"teeth\", \"G\"},\n+                {\"soup\", \"H\"},\n+                {\"chips\", \"I\"},\n+                {\"pasta\", \"J\"},\n+                {\"drinking\", \"K\"},\n+                {\"sandwich\", \"L\"},\n+                {\"kicking\", \"M\"},\n+                {\"catch\", \"O\"},\n+                {\"dribbling\", \"P\"},\n+                {\"writing\", \"Q\"},\n+                {\"clapping\", \"R\"},\n+                {\"folding\", \"S\"},\n+            };\n+\n+        public SampleDataset(int inputs, int capacity)\n+        {\n+            _inputs = inputs;\n+            _capacity = capacity;\n+            _rows = new BlockingCollection<SensorData>(_capacity);\n+\n+            _colSubjectId = new List<int>(capacity);\n+            _colActivityLabel = new List<string>();\n+            _colTimestamp = new List<long>();\n+            _colXAxis = new List<double>();\n+            _colYAxis = new List<double>();\n+            _colZAxis = new List<double>();\n+\n+            _recordBatches = new List<RecordBatch>();\n+            _memoryAllocator = new NativeMemoryAllocator(alignment: 64);\n+        }\n+\n+        public void Produce()\n+        {\n+            Random rand = new Random();\n+            bool success;\n+\n+            List<string> keyList = new List<string>(activityLabel.Keys);\n+            int count = keyList.Count;\n+\n+            DateTime now = DateTime.Now;\n+            long unixTime = ((DateTimeOffset)now).ToUnixTimeSeconds();\n+\n+            while (_size < _inputs)\n+            {\n+                string randomKey = keyList[rand.Next(count)];\n+                string label = activityLabel[randomKey];\n+\n+                // generate missing values\n+                if (rand.Next(10_000) == 9_999)\n+                {\n+                    label = null;\n+                }\n+\n+                success = _rows.TryAdd(new SensorData\n+                {\n+                    subjectId = rand.Next(1000, 2001),\n+                    activityLabel = label,\n+                    timestamp = unixTime++,\n+                    x_Axis = rand.NextDouble(),\n+                    y_Axis = rand.NextDouble(),\n+                    z_Axis = rand.NextDouble(),\n+                }); \n+\n+                if (success)\n+                {\n+                    //Console.WriteLine($\"Enqueue Task 0\");\n+                    _size++;\n+                }\n+                else\n+                {\n+                    Console.WriteLine(\"Producing is blocked, percent completed is: {0}%\", Math.Round((double)_size / _inputs, 4) * 100);\n+                }\n+            }\n+\n+            _rows.CompleteAdding();\n+        }\n+\n+        public async void Consume()\n+        {\n+            while (!_rows.IsCompleted)\n+            {\n+                if (!_rows.TryTake(out SensorData item, 3000))\n+                {\n+                    Console.WriteLine(\"Consuming is blocked!\");\n+                }\n+                else\n+                {\n+                    //Console.WriteLine($\"Dequeue Task 1\");\n\nReview comment:\n       ```suggestion\r\n   ```\n\n##########\nFile path: csharp/examples/IoTExample/Model/SampleDataset.cs\n##########\n@@ -0,0 +1,211 @@\n+\ufeff// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements. See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+using System;\n+using System.IO;\n+using System.Threading.Tasks;\n+using System.Diagnostics;\n+using System.Collections.Concurrent;\n+using System.Collections.Generic;\n+using Apache.Arrow;\n+using Apache.Arrow.Ipc;\n+using Apache.Arrow.Memory;\n+\n+namespace IoTExample\n+{\n+    public class SampleDataset\n+    {\n+        private int _size;\n+        private readonly int _inputs;\n+        private readonly int _capacity;\n+        private readonly BlockingCollection<SensorData> _rows;\n+\n+        private readonly List<int> _colSubjectId;\n+        private readonly List<string> _colActivityLabel;\n+        private readonly List<long> _colTimestamp;\n+        private readonly List<double> _colXAxis;\n+        private readonly List<double> _colYAxis;\n+        private readonly List<double> _colZAxis;\n+\n+        private readonly int _threshold = 1_000_000;\n+        private readonly List<RecordBatch> _recordBatches;\n+        private readonly MemoryAllocator _memoryAllocator;\n+\n+        public Dictionary<string, string> activityLabel = new Dictionary<string, string>()\n+            {\n+                {\"walking\", \"A\"},\n+                {\"jogging\", \"B\"},\n+                {\"stairs\", \"C\"},\n+                {\"sitting\", \"D\"},\n+                {\"standing\", \"E\"},\n+                {\"typing\", \"F\"},\n+                {\"teeth\", \"G\"},\n+                {\"soup\", \"H\"},\n+                {\"chips\", \"I\"},\n+                {\"pasta\", \"J\"},\n+                {\"drinking\", \"K\"},\n+                {\"sandwich\", \"L\"},\n+                {\"kicking\", \"M\"},\n+                {\"catch\", \"O\"},\n+                {\"dribbling\", \"P\"},\n+                {\"writing\", \"Q\"},\n+                {\"clapping\", \"R\"},\n+                {\"folding\", \"S\"},\n+            };\n+\n+        public SampleDataset(int inputs, int capacity)\n+        {\n+            _inputs = inputs;\n+            _capacity = capacity;\n+            _rows = new BlockingCollection<SensorData>(_capacity);\n+\n+            _colSubjectId = new List<int>(capacity);\n+            _colActivityLabel = new List<string>();\n+            _colTimestamp = new List<long>();\n+            _colXAxis = new List<double>();\n+            _colYAxis = new List<double>();\n+            _colZAxis = new List<double>();\n+\n+            _recordBatches = new List<RecordBatch>();\n+            _memoryAllocator = new NativeMemoryAllocator(alignment: 64);\n+        }\n+\n+        public void Produce()\n+        {\n+            Random rand = new Random();\n+            bool success;\n+\n+            List<string> keyList = new List<string>(activityLabel.Keys);\n+            int count = keyList.Count;\n+\n+            DateTime now = DateTime.Now;\n+            long unixTime = ((DateTimeOffset)now).ToUnixTimeSeconds();\n+\n+            while (_size < _inputs)\n+            {\n+                string randomKey = keyList[rand.Next(count)];\n+                string label = activityLabel[randomKey];\n+\n+                // generate missing values\n+                if (rand.Next(10_000) == 9_999)\n+                {\n+                    label = null;\n+                }\n+\n+                success = _rows.TryAdd(new SensorData\n+                {\n+                    subjectId = rand.Next(1000, 2001),\n+                    activityLabel = label,\n+                    timestamp = unixTime++,\n+                    x_Axis = rand.NextDouble(),\n+                    y_Axis = rand.NextDouble(),\n+                    z_Axis = rand.NextDouble(),\n+                }); \n+\n+                if (success)\n+                {\n+                    //Console.WriteLine($\"Enqueue Task 0\");\n+                    _size++;\n+                }\n+                else\n+                {\n+                    Console.WriteLine(\"Producing is blocked, percent completed is: {0}%\", Math.Round((double)_size / _inputs, 4) * 100);\n+                }\n+            }\n+\n+            _rows.CompleteAdding();\n+        }\n+\n+        public async void Consume()\n+        {\n+            while (!_rows.IsCompleted)\n+            {\n+                if (!_rows.TryTake(out SensorData item, 3000))\n+                {\n+                    Console.WriteLine(\"Consuming is blocked!\");\n+                }\n+                else\n+                {\n+                    //Console.WriteLine($\"Dequeue Task 1\");\n+                    if (item != null && item.subjectId != null)\n+                    {\n+                        _colSubjectId.Add((int)item.subjectId);\n+                        _colActivityLabel.Add(item.activityLabel);\n+                        _colTimestamp.Add((long)item.timestamp);\n+                        _colXAxis.Add((double)item.x_Axis);\n+                        _colYAxis.Add((double)item.y_Axis);\n+                        _colZAxis.Add((double)item.z_Axis);\n+                    }\n+                }\n+\n+                if (_colSubjectId.Count == _threshold)\n+                {\n+                    // Build a record batch using the Fluent API\n+                    var recordBatch = new RecordBatch.Builder(_memoryAllocator)\n+                        .Append(\"SubjectId\", false, col => col.Int32(array => array.AppendRange(_colSubjectId)))\n+                        .Append(\"ActivityLabel\", false, col => col.String(array => array.AppendRange(_colActivityLabel)))\n+                        .Append(\"Timestamp\", false, col => col.Int64(array => array.AppendRange(_colTimestamp)))\n+                        .Append(\"XAxis\", false, col => col.Double(array => array.AppendRange(_colXAxis)))\n+                        .Append(\"YAxis\", false, col => col.Double(array => array.AppendRange(_colYAxis)))\n+                        .Append(\"ZAxis\", false, col => col.Double(array => array.AppendRange(_colZAxis)))\n+                        .Build();\n+\n+                    _recordBatches.Add(recordBatch);\n+\n+                    _colSubjectId.Clear();\n+                    _colActivityLabel.Clear();\n+                    _colTimestamp.Clear();\n+                    _colXAxis.Clear();\n+                    _colYAxis.Clear();\n+                    _colZAxis.Clear();\n+                }\n+            }\n+        }\n+\n+        public async Task<bool> PersistData()\n+        {\n+            string time = DateTime.Now.ToString(\"yyyyMMdd_HHmmss\");\n\nReview comment:\n       ```suggestion\r\n   ```\r\n   \r\n   This variable doesn't appear to be used.\n\n##########\nFile path: csharp/examples/IoTExample/Model/SampleDataset.cs\n##########\n@@ -0,0 +1,211 @@\n+\ufeff// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements. See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+using System;\n+using System.IO;\n+using System.Threading.Tasks;\n+using System.Diagnostics;\n+using System.Collections.Concurrent;\n+using System.Collections.Generic;\n+using Apache.Arrow;\n+using Apache.Arrow.Ipc;\n+using Apache.Arrow.Memory;\n+\n+namespace IoTExample\n+{\n+    public class SampleDataset\n+    {\n+        private int _size;\n+        private readonly int _inputs;\n+        private readonly int _capacity;\n+        private readonly BlockingCollection<SensorData> _rows;\n+\n+        private readonly List<int> _colSubjectId;\n+        private readonly List<string> _colActivityLabel;\n+        private readonly List<long> _colTimestamp;\n+        private readonly List<double> _colXAxis;\n+        private readonly List<double> _colYAxis;\n+        private readonly List<double> _colZAxis;\n+\n+        private readonly int _threshold = 1_000_000;\n+        private readonly List<RecordBatch> _recordBatches;\n+        private readonly MemoryAllocator _memoryAllocator;\n+\n+        public Dictionary<string, string> activityLabel = new Dictionary<string, string>()\n+            {\n+                {\"walking\", \"A\"},\n+                {\"jogging\", \"B\"},\n+                {\"stairs\", \"C\"},\n+                {\"sitting\", \"D\"},\n+                {\"standing\", \"E\"},\n+                {\"typing\", \"F\"},\n+                {\"teeth\", \"G\"},\n+                {\"soup\", \"H\"},\n+                {\"chips\", \"I\"},\n+                {\"pasta\", \"J\"},\n+                {\"drinking\", \"K\"},\n+                {\"sandwich\", \"L\"},\n+                {\"kicking\", \"M\"},\n+                {\"catch\", \"O\"},\n+                {\"dribbling\", \"P\"},\n+                {\"writing\", \"Q\"},\n+                {\"clapping\", \"R\"},\n+                {\"folding\", \"S\"},\n+            };\n+\n+        public SampleDataset(int inputs, int capacity)\n+        {\n+            _inputs = inputs;\n+            _capacity = capacity;\n+            _rows = new BlockingCollection<SensorData>(_capacity);\n+\n+            _colSubjectId = new List<int>(capacity);\n+            _colActivityLabel = new List<string>();\n+            _colTimestamp = new List<long>();\n+            _colXAxis = new List<double>();\n+            _colYAxis = new List<double>();\n+            _colZAxis = new List<double>();\n+\n+            _recordBatches = new List<RecordBatch>();\n+            _memoryAllocator = new NativeMemoryAllocator(alignment: 64);\n+        }\n+\n+        public void Produce()\n+        {\n+            Random rand = new Random();\n+            bool success;\n+\n+            List<string> keyList = new List<string>(activityLabel.Keys);\n+            int count = keyList.Count;\n+\n+            DateTime now = DateTime.Now;\n+            long unixTime = ((DateTimeOffset)now).ToUnixTimeSeconds();\n+\n+            while (_size < _inputs)\n+            {\n+                string randomKey = keyList[rand.Next(count)];\n+                string label = activityLabel[randomKey];\n+\n+                // generate missing values\n+                if (rand.Next(10_000) == 9_999)\n+                {\n+                    label = null;\n+                }\n+\n+                success = _rows.TryAdd(new SensorData\n+                {\n+                    subjectId = rand.Next(1000, 2001),\n+                    activityLabel = label,\n+                    timestamp = unixTime++,\n+                    x_Axis = rand.NextDouble(),\n+                    y_Axis = rand.NextDouble(),\n+                    z_Axis = rand.NextDouble(),\n+                }); \n+\n+                if (success)\n+                {\n+                    //Console.WriteLine($\"Enqueue Task 0\");\n+                    _size++;\n+                }\n+                else\n+                {\n+                    Console.WriteLine(\"Producing is blocked, percent completed is: {0}%\", Math.Round((double)_size / _inputs, 4) * 100);\n+                }\n+            }\n+\n+            _rows.CompleteAdding();\n+        }\n+\n+        public async void Consume()\n\nReview comment:\n       This method doesn't need to be `async` since it doesn't `await` anything.\r\n   \r\n   Also - avoid `async void` methods in general. Always return `async Task`, if you can.\n\n##########\nFile path: csharp/examples/IoTExample/Model/SampleDataset.cs\n##########\n@@ -0,0 +1,211 @@\n+\ufeff// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements. See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+using System;\n+using System.IO;\n+using System.Threading.Tasks;\n+using System.Diagnostics;\n+using System.Collections.Concurrent;\n+using System.Collections.Generic;\n+using Apache.Arrow;\n+using Apache.Arrow.Ipc;\n+using Apache.Arrow.Memory;\n+\n+namespace IoTExample\n+{\n+    public class SampleDataset\n+    {\n+        private int _size;\n+        private readonly int _inputs;\n+        private readonly int _capacity;\n+        private readonly BlockingCollection<SensorData> _rows;\n\nReview comment:\n       Maybe since we are using `async` methods, can we change this to use [Channels](https://devblogs.microsoft.com/dotnet/an-introduction-to-system-threading-channels/) instead? They are very similar, but Channels was made with `async` in mind.\n\n##########\nFile path: csharp/examples/IoTExample/Model/SampleDataset.cs\n##########\n@@ -0,0 +1,211 @@\n+\ufeff// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements. See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+using System;\n+using System.IO;\n+using System.Threading.Tasks;\n+using System.Diagnostics;\n+using System.Collections.Concurrent;\n+using System.Collections.Generic;\n+using Apache.Arrow;\n+using Apache.Arrow.Ipc;\n+using Apache.Arrow.Memory;\n+\n+namespace IoTExample\n+{\n+    public class SampleDataset\n+    {\n+        private int _size;\n+        private readonly int _inputs;\n+        private readonly int _capacity;\n+        private readonly BlockingCollection<SensorData> _rows;\n+\n+        private readonly List<int> _colSubjectId;\n+        private readonly List<string> _colActivityLabel;\n+        private readonly List<long> _colTimestamp;\n+        private readonly List<double> _colXAxis;\n+        private readonly List<double> _colYAxis;\n+        private readonly List<double> _colZAxis;\n+\n+        private readonly int _threshold = 1_000_000;\n+        private readonly List<RecordBatch> _recordBatches;\n+        private readonly MemoryAllocator _memoryAllocator;\n+\n+        public Dictionary<string, string> activityLabel = new Dictionary<string, string>()\n+            {\n+                {\"walking\", \"A\"},\n+                {\"jogging\", \"B\"},\n+                {\"stairs\", \"C\"},\n+                {\"sitting\", \"D\"},\n+                {\"standing\", \"E\"},\n+                {\"typing\", \"F\"},\n+                {\"teeth\", \"G\"},\n+                {\"soup\", \"H\"},\n+                {\"chips\", \"I\"},\n+                {\"pasta\", \"J\"},\n+                {\"drinking\", \"K\"},\n+                {\"sandwich\", \"L\"},\n+                {\"kicking\", \"M\"},\n+                {\"catch\", \"O\"},\n+                {\"dribbling\", \"P\"},\n+                {\"writing\", \"Q\"},\n+                {\"clapping\", \"R\"},\n+                {\"folding\", \"S\"},\n+            };\n+\n+        public SampleDataset(int inputs, int capacity)\n+        {\n+            _inputs = inputs;\n+            _capacity = capacity;\n+            _rows = new BlockingCollection<SensorData>(_capacity);\n+\n+            _colSubjectId = new List<int>(capacity);\n+            _colActivityLabel = new List<string>();\n+            _colTimestamp = new List<long>();\n+            _colXAxis = new List<double>();\n+            _colYAxis = new List<double>();\n+            _colZAxis = new List<double>();\n+\n+            _recordBatches = new List<RecordBatch>();\n+            _memoryAllocator = new NativeMemoryAllocator(alignment: 64);\n+        }\n+\n+        public void Produce()\n+        {\n+            Random rand = new Random();\n+            bool success;\n+\n+            List<string> keyList = new List<string>(activityLabel.Keys);\n+            int count = keyList.Count;\n+\n+            DateTime now = DateTime.Now;\n+            long unixTime = ((DateTimeOffset)now).ToUnixTimeSeconds();\n+\n+            while (_size < _inputs)\n+            {\n+                string randomKey = keyList[rand.Next(count)];\n+                string label = activityLabel[randomKey];\n+\n+                // generate missing values\n+                if (rand.Next(10_000) == 9_999)\n+                {\n+                    label = null;\n+                }\n+\n+                success = _rows.TryAdd(new SensorData\n+                {\n+                    subjectId = rand.Next(1000, 2001),\n+                    activityLabel = label,\n+                    timestamp = unixTime++,\n+                    x_Axis = rand.NextDouble(),\n+                    y_Axis = rand.NextDouble(),\n+                    z_Axis = rand.NextDouble(),\n+                }); \n+\n+                if (success)\n+                {\n+                    //Console.WriteLine($\"Enqueue Task 0\");\n\nReview comment:\n       ```suggestion\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-17T18:31:46.572+0000",
                    "updated": "2021-12-17T18:31:46.572+0000",
                    "started": "2021-12-17T18:31:46.572+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "698046",
                    "issueId": "13416160"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13416160/worklog/698443",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zixi-bwang commented on a change in pull request #11874:\nURL: https://github.com/apache/arrow/pull/11874#discussion_r772068587\n\n\n\n##########\nFile path: csharp/examples/IoTExample/Model/SampleDataset.cs\n##########\n@@ -0,0 +1,211 @@\n+\ufeff// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements. See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+using System;\n+using System.IO;\n+using System.Threading.Tasks;\n+using System.Diagnostics;\n+using System.Collections.Concurrent;\n+using System.Collections.Generic;\n+using Apache.Arrow;\n+using Apache.Arrow.Ipc;\n+using Apache.Arrow.Memory;\n+\n+namespace IoTExample\n+{\n+    public class SampleDataset\n+    {\n+        private int _size;\n+        private readonly int _inputs;\n+        private readonly int _capacity;\n+        private readonly BlockingCollection<SensorData> _rows;\n\nReview comment:\n       Sure, I'll try to use Channel.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-20T04:07:55.199+0000",
                    "updated": "2021-12-20T04:07:55.199+0000",
                    "started": "2021-12-20T04:07:55.198+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "698443",
                    "issueId": "13416160"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13416160/worklog/699247",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zixi-bwang commented on a change in pull request #11874:\nURL: https://github.com/apache/arrow/pull/11874#discussion_r772884571\n\n\n\n##########\nFile path: csharp/examples/IoTExample/Model/SampleDataset.cs\n##########\n@@ -0,0 +1,211 @@\n+\ufeff// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements. See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+using System;\n+using System.IO;\n+using System.Threading.Tasks;\n+using System.Diagnostics;\n+using System.Collections.Concurrent;\n+using System.Collections.Generic;\n+using Apache.Arrow;\n+using Apache.Arrow.Ipc;\n+using Apache.Arrow.Memory;\n+\n+namespace IoTExample\n+{\n+    public class SampleDataset\n+    {\n+        private int _size;\n+        private readonly int _inputs;\n+        private readonly int _capacity;\n+        private readonly BlockingCollection<SensorData> _rows;\n\nReview comment:\n       The code has been refactored, please review.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-21T07:21:49.839+0000",
                    "updated": "2021-12-21T07:21:49.839+0000",
                    "started": "2021-12-21T07:21:49.838+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "699247",
                    "issueId": "13416160"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13416160/worklog/699518",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "eerhardt commented on a change in pull request #11874:\nURL: https://github.com/apache/arrow/pull/11874#discussion_r773296758\n\n\n\n##########\nFile path: csharp/examples/IoTExample/Model/SampleDataPipeline.cs\n##########\n@@ -0,0 +1,197 @@\n+\ufeff// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements. See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+using System;\n+using System.IO;\n+using System.Threading.Tasks;\n+using System.Collections.Generic;\n+using Apache.Arrow;\n+using Apache.Arrow.Ipc;\n+using Apache.Arrow.Memory;\n+using System.Threading.Channels;\n+using System.Threading;\n+using System.Collections.Concurrent;\n+\n+namespace IoTPipelineExample\n+{\n+    public class SampleDataPipeline\n+    {\n+        private int _size;\n+        private int _partitions;\n+        private readonly int _inputs;\n+        private readonly int _capacity;\n\nReview comment:\n       Is this field necessary?\n\n##########\nFile path: csharp/examples/IoTExample/Model/SampleDataPipeline.cs\n##########\n@@ -0,0 +1,197 @@\n+\ufeff// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements. See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+using System;\n+using System.IO;\n+using System.Threading.Tasks;\n+using System.Collections.Generic;\n+using Apache.Arrow;\n+using Apache.Arrow.Ipc;\n+using Apache.Arrow.Memory;\n+using System.Threading.Channels;\n+using System.Threading;\n+using System.Collections.Concurrent;\n+\n+namespace IoTPipelineExample\n+{\n+    public class SampleDataPipeline\n+    {\n+        private int _size;\n+        private int _partitions;\n+        private readonly int _inputs;\n+        private readonly int _capacity;\n+        private readonly Channel<SensorData> _channel;\n+        ChannelWriter<SensorData> _writer;\n+        ChannelReader<SensorData> _reader;\n+\n+        private readonly List<ConcurrentBag<int>> _colSubjectIdArrays;\n+        private readonly List<ConcurrentBag<string>> _colActivityLabelArrays;\n+        private readonly List<ConcurrentBag<long>> _colTimestampArrays;\n+        private readonly List<ConcurrentBag<double>> _colXAxisArrays;\n+        private readonly List<ConcurrentBag<double>> _colYAxisArrays;\n+        private readonly List<ConcurrentBag<double>> _colZAxisArrays;\n+\n+        public Dictionary<string, string> activityLabel = new Dictionary<string, string>()\n+            {\n+                {\"walking\", \"A\"},\n+                {\"jogging\", \"B\"},\n+                {\"stairs\", \"C\"},\n+                {\"sitting\", \"D\"},\n+                {\"standing\", \"E\"},\n+                {\"typing\", \"F\"},\n+                {\"teeth\", \"G\"},\n+                {\"soup\", \"H\"},\n+                {\"chips\", \"I\"},\n+                {\"pasta\", \"J\"},\n+                {\"drinking\", \"K\"},\n+                {\"sandwich\", \"L\"},\n+                {\"kicking\", \"M\"},\n+                {\"catch\", \"O\"},\n+                {\"dribbling\", \"P\"},\n+                {\"writing\", \"Q\"},\n+                {\"clapping\", \"R\"},\n+                {\"folding\", \"S\"},\n+            };\n+\n+        public SampleDataPipeline(int concurrencyLevel, int totalSensorData, int queueCapacity)\n+        {\n+            _partitions = concurrencyLevel;\n+            _inputs = totalSensorData;\n\nReview comment:\n       I find it confusing to use two different names here. Can we pick one and use it both for the field and the parameter?\n\n##########\nFile path: csharp/examples/IoTExample/Model/SampleDataPipeline.cs\n##########\n@@ -0,0 +1,197 @@\n+\ufeff// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements. See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+using System;\n+using System.IO;\n+using System.Threading.Tasks;\n+using System.Collections.Generic;\n+using Apache.Arrow;\n+using Apache.Arrow.Ipc;\n+using Apache.Arrow.Memory;\n+using System.Threading.Channels;\n+using System.Threading;\n+using System.Collections.Concurrent;\n+\n+namespace IoTPipelineExample\n+{\n+    public class SampleDataPipeline\n+    {\n+        private int _size;\n+        private int _partitions;\n+        private readonly int _inputs;\n+        private readonly int _capacity;\n+        private readonly Channel<SensorData> _channel;\n+        ChannelWriter<SensorData> _writer;\n+        ChannelReader<SensorData> _reader;\n+\n+        private readonly List<ConcurrentBag<int>> _colSubjectIdArrays;\n+        private readonly List<ConcurrentBag<string>> _colActivityLabelArrays;\n+        private readonly List<ConcurrentBag<long>> _colTimestampArrays;\n+        private readonly List<ConcurrentBag<double>> _colXAxisArrays;\n+        private readonly List<ConcurrentBag<double>> _colYAxisArrays;\n+        private readonly List<ConcurrentBag<double>> _colZAxisArrays;\n+\n+        public Dictionary<string, string> activityLabel = new Dictionary<string, string>()\n+            {\n+                {\"walking\", \"A\"},\n+                {\"jogging\", \"B\"},\n+                {\"stairs\", \"C\"},\n+                {\"sitting\", \"D\"},\n+                {\"standing\", \"E\"},\n+                {\"typing\", \"F\"},\n+                {\"teeth\", \"G\"},\n+                {\"soup\", \"H\"},\n+                {\"chips\", \"I\"},\n+                {\"pasta\", \"J\"},\n+                {\"drinking\", \"K\"},\n+                {\"sandwich\", \"L\"},\n+                {\"kicking\", \"M\"},\n+                {\"catch\", \"O\"},\n+                {\"dribbling\", \"P\"},\n+                {\"writing\", \"Q\"},\n+                {\"clapping\", \"R\"},\n+                {\"folding\", \"S\"},\n+            };\n+\n+        public SampleDataPipeline(int concurrencyLevel, int totalSensorData, int queueCapacity)\n+        {\n+            _partitions = concurrencyLevel;\n+            _inputs = totalSensorData;\n+            _capacity = queueCapacity;\n+            _channel = Channel.CreateBounded<SensorData>(_capacity);\n+            _writer = _channel.Writer;\n+            _reader = _channel.Reader;\n+\n+            _colSubjectIdArrays = new List<ConcurrentBag<int>>();\n+            _colActivityLabelArrays = new List<ConcurrentBag<string>>();\n+            _colTimestampArrays = new List<ConcurrentBag<long>>();\n+            _colXAxisArrays = new List<ConcurrentBag<double>>();\n+            _colYAxisArrays = new List<ConcurrentBag<double>>();\n+            _colZAxisArrays = new List<ConcurrentBag<double>>();\n+\n+            for (int i = 0; i < _partitions; i++)\n+            {\n+                _colSubjectIdArrays.Add(new ConcurrentBag<int>());\n\nReview comment:\n       ConcurrentBag is unordered. Meaning when you enumerate it, you can get the results in a different order than what they went in. Is that intended?\r\n   \r\n   https://docs.microsoft.com/en-us/dotnet/api/system.collections.concurrent.concurrentbag-1?view=net-6.0\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-21T17:00:18.810+0000",
                    "updated": "2021-12-21T17:00:18.810+0000",
                    "started": "2021-12-21T17:00:18.810+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "699518",
                    "issueId": "13416160"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13416160/worklog/699733",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zixi-bwang commented on a change in pull request #11874:\nURL: https://github.com/apache/arrow/pull/11874#discussion_r773548623\n\n\n\n##########\nFile path: csharp/examples/IoTExample/Model/SampleDataPipeline.cs\n##########\n@@ -0,0 +1,197 @@\n+\ufeff// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements. See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+using System;\n+using System.IO;\n+using System.Threading.Tasks;\n+using System.Collections.Generic;\n+using Apache.Arrow;\n+using Apache.Arrow.Ipc;\n+using Apache.Arrow.Memory;\n+using System.Threading.Channels;\n+using System.Threading;\n+using System.Collections.Concurrent;\n+\n+namespace IoTPipelineExample\n+{\n+    public class SampleDataPipeline\n+    {\n+        private int _size;\n+        private int _partitions;\n+        private readonly int _inputs;\n+        private readonly int _capacity;\n+        private readonly Channel<SensorData> _channel;\n+        ChannelWriter<SensorData> _writer;\n+        ChannelReader<SensorData> _reader;\n+\n+        private readonly List<ConcurrentBag<int>> _colSubjectIdArrays;\n+        private readonly List<ConcurrentBag<string>> _colActivityLabelArrays;\n+        private readonly List<ConcurrentBag<long>> _colTimestampArrays;\n+        private readonly List<ConcurrentBag<double>> _colXAxisArrays;\n+        private readonly List<ConcurrentBag<double>> _colYAxisArrays;\n+        private readonly List<ConcurrentBag<double>> _colZAxisArrays;\n+\n+        public Dictionary<string, string> activityLabel = new Dictionary<string, string>()\n+            {\n+                {\"walking\", \"A\"},\n+                {\"jogging\", \"B\"},\n+                {\"stairs\", \"C\"},\n+                {\"sitting\", \"D\"},\n+                {\"standing\", \"E\"},\n+                {\"typing\", \"F\"},\n+                {\"teeth\", \"G\"},\n+                {\"soup\", \"H\"},\n+                {\"chips\", \"I\"},\n+                {\"pasta\", \"J\"},\n+                {\"drinking\", \"K\"},\n+                {\"sandwich\", \"L\"},\n+                {\"kicking\", \"M\"},\n+                {\"catch\", \"O\"},\n+                {\"dribbling\", \"P\"},\n+                {\"writing\", \"Q\"},\n+                {\"clapping\", \"R\"},\n+                {\"folding\", \"S\"},\n+            };\n+\n+        public SampleDataPipeline(int concurrencyLevel, int totalSensorData, int queueCapacity)\n+        {\n+            _partitions = concurrencyLevel;\n+            _inputs = totalSensorData;\n+            _capacity = queueCapacity;\n+            _channel = Channel.CreateBounded<SensorData>(_capacity);\n+            _writer = _channel.Writer;\n+            _reader = _channel.Reader;\n+\n+            _colSubjectIdArrays = new List<ConcurrentBag<int>>();\n+            _colActivityLabelArrays = new List<ConcurrentBag<string>>();\n+            _colTimestampArrays = new List<ConcurrentBag<long>>();\n+            _colXAxisArrays = new List<ConcurrentBag<double>>();\n+            _colYAxisArrays = new List<ConcurrentBag<double>>();\n+            _colZAxisArrays = new List<ConcurrentBag<double>>();\n+\n+            for (int i = 0; i < _partitions; i++)\n+            {\n+                _colSubjectIdArrays.Add(new ConcurrentBag<int>());\n\nReview comment:\n       My intention was to find a data structure that has below characteristics:\r\n   \r\n   1. Inserting by row\r\n   2. Querying by column\r\n   3. The \"results in a different order than what they went in\" does not matter, but the kth item in one column should belong to the same row as the kth item in another column\r\n   4. So all of the column arrays can be appended to a RecordBatch\r\n   \r\n   It seems DataTable is a good candidate, or could you recommend other light weight data structures instead?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-22T01:54:48.443+0000",
                    "updated": "2021-12-22T01:54:48.443+0000",
                    "started": "2021-12-22T01:54:48.443+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "699733",
                    "issueId": "13416160"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13416160/worklog/701606",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "eerhardt commented on a change in pull request #11874:\nURL: https://github.com/apache/arrow/pull/11874#discussion_r776000123\n\n\n\n##########\nFile path: csharp/examples/IoTExample/Model/SampleDataPipeline.cs\n##########\n@@ -0,0 +1,197 @@\n+\ufeff// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements. See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+using System;\n+using System.IO;\n+using System.Threading.Tasks;\n+using System.Collections.Generic;\n+using Apache.Arrow;\n+using Apache.Arrow.Ipc;\n+using Apache.Arrow.Memory;\n+using System.Threading.Channels;\n+using System.Threading;\n+using System.Collections.Concurrent;\n+\n+namespace IoTPipelineExample\n+{\n+    public class SampleDataPipeline\n+    {\n+        private int _size;\n+        private int _partitions;\n+        private readonly int _inputs;\n+        private readonly int _capacity;\n+        private readonly Channel<SensorData> _channel;\n+        ChannelWriter<SensorData> _writer;\n+        ChannelReader<SensorData> _reader;\n+\n+        private readonly List<ConcurrentBag<int>> _colSubjectIdArrays;\n+        private readonly List<ConcurrentBag<string>> _colActivityLabelArrays;\n+        private readonly List<ConcurrentBag<long>> _colTimestampArrays;\n+        private readonly List<ConcurrentBag<double>> _colXAxisArrays;\n+        private readonly List<ConcurrentBag<double>> _colYAxisArrays;\n+        private readonly List<ConcurrentBag<double>> _colZAxisArrays;\n+\n+        public Dictionary<string, string> activityLabel = new Dictionary<string, string>()\n+            {\n+                {\"walking\", \"A\"},\n+                {\"jogging\", \"B\"},\n+                {\"stairs\", \"C\"},\n+                {\"sitting\", \"D\"},\n+                {\"standing\", \"E\"},\n+                {\"typing\", \"F\"},\n+                {\"teeth\", \"G\"},\n+                {\"soup\", \"H\"},\n+                {\"chips\", \"I\"},\n+                {\"pasta\", \"J\"},\n+                {\"drinking\", \"K\"},\n+                {\"sandwich\", \"L\"},\n+                {\"kicking\", \"M\"},\n+                {\"catch\", \"O\"},\n+                {\"dribbling\", \"P\"},\n+                {\"writing\", \"Q\"},\n+                {\"clapping\", \"R\"},\n+                {\"folding\", \"S\"},\n+            };\n+\n+        public SampleDataPipeline(int concurrencyLevel, int totalSensorData, int queueCapacity)\n+        {\n+            _partitions = concurrencyLevel;\n+            _inputs = totalSensorData;\n+            _capacity = queueCapacity;\n+            _channel = Channel.CreateBounded<SensorData>(_capacity);\n+            _writer = _channel.Writer;\n+            _reader = _channel.Reader;\n+\n+            _colSubjectIdArrays = new List<ConcurrentBag<int>>();\n+            _colActivityLabelArrays = new List<ConcurrentBag<string>>();\n+            _colTimestampArrays = new List<ConcurrentBag<long>>();\n+            _colXAxisArrays = new List<ConcurrentBag<double>>();\n+            _colYAxisArrays = new List<ConcurrentBag<double>>();\n+            _colZAxisArrays = new List<ConcurrentBag<double>>();\n+\n+            for (int i = 0; i < _partitions; i++)\n+            {\n+                _colSubjectIdArrays.Add(new ConcurrentBag<int>());\n\nReview comment:\n       > but the kth item in one column should belong to the same row as the kth item in another column\r\n   \r\n   Since a \"bag\" is unordered, there is no such thing as the \"kth item\". Notice there is no indexer. You can enumerate the items, but you aren't guaranteed the order they are returned.\r\n   \r\n   > It seems DataTable is a good candidate, or could you recommend other light weight data structures instead?\r\n   \r\n   I wouldn't use DataTable. Instead, I would eliminate the concurrency in `ReadFromChannel`. Have many \"writer\" threads all writing items to the channel. But then only have 1 \"reader\" thread that pulls items off the channel and writes them directly to a `RecordBatch.Builder`.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-28T17:06:00.435+0000",
                    "updated": "2021-12-28T17:06:00.435+0000",
                    "started": "2021-12-28T17:06:00.434+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "701606",
                    "issueId": "13416160"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13416160/worklog/702397",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zixi-bwang commented on a change in pull request #11874:\nURL: https://github.com/apache/arrow/pull/11874#discussion_r776838685\n\n\n\n##########\nFile path: csharp/examples/IoTExample/Model/SampleDataPipeline.cs\n##########\n@@ -0,0 +1,197 @@\n+\ufeff// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements. See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+using System;\n+using System.IO;\n+using System.Threading.Tasks;\n+using System.Collections.Generic;\n+using Apache.Arrow;\n+using Apache.Arrow.Ipc;\n+using Apache.Arrow.Memory;\n+using System.Threading.Channels;\n+using System.Threading;\n+using System.Collections.Concurrent;\n+\n+namespace IoTPipelineExample\n+{\n+    public class SampleDataPipeline\n+    {\n+        private int _size;\n+        private int _partitions;\n+        private readonly int _inputs;\n+        private readonly int _capacity;\n\nReview comment:\n       Not really, removed.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-30T19:05:00.221+0000",
                    "updated": "2021-12-30T19:05:00.221+0000",
                    "started": "2021-12-30T19:05:00.221+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "702397",
                    "issueId": "13416160"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13416160/worklog/702398",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zixi-bwang commented on a change in pull request #11874:\nURL: https://github.com/apache/arrow/pull/11874#discussion_r776838749\n\n\n\n##########\nFile path: csharp/examples/IoTExample/Model/SampleDataPipeline.cs\n##########\n@@ -0,0 +1,197 @@\n+\ufeff// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements. See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+using System;\n+using System.IO;\n+using System.Threading.Tasks;\n+using System.Collections.Generic;\n+using Apache.Arrow;\n+using Apache.Arrow.Ipc;\n+using Apache.Arrow.Memory;\n+using System.Threading.Channels;\n+using System.Threading;\n+using System.Collections.Concurrent;\n+\n+namespace IoTPipelineExample\n+{\n+    public class SampleDataPipeline\n+    {\n+        private int _size;\n+        private int _partitions;\n+        private readonly int _inputs;\n+        private readonly int _capacity;\n+        private readonly Channel<SensorData> _channel;\n+        ChannelWriter<SensorData> _writer;\n+        ChannelReader<SensorData> _reader;\n+\n+        private readonly List<ConcurrentBag<int>> _colSubjectIdArrays;\n+        private readonly List<ConcurrentBag<string>> _colActivityLabelArrays;\n+        private readonly List<ConcurrentBag<long>> _colTimestampArrays;\n+        private readonly List<ConcurrentBag<double>> _colXAxisArrays;\n+        private readonly List<ConcurrentBag<double>> _colYAxisArrays;\n+        private readonly List<ConcurrentBag<double>> _colZAxisArrays;\n+\n+        public Dictionary<string, string> activityLabel = new Dictionary<string, string>()\n+            {\n+                {\"walking\", \"A\"},\n+                {\"jogging\", \"B\"},\n+                {\"stairs\", \"C\"},\n+                {\"sitting\", \"D\"},\n+                {\"standing\", \"E\"},\n+                {\"typing\", \"F\"},\n+                {\"teeth\", \"G\"},\n+                {\"soup\", \"H\"},\n+                {\"chips\", \"I\"},\n+                {\"pasta\", \"J\"},\n+                {\"drinking\", \"K\"},\n+                {\"sandwich\", \"L\"},\n+                {\"kicking\", \"M\"},\n+                {\"catch\", \"O\"},\n+                {\"dribbling\", \"P\"},\n+                {\"writing\", \"Q\"},\n+                {\"clapping\", \"R\"},\n+                {\"folding\", \"S\"},\n+            };\n+\n+        public SampleDataPipeline(int concurrencyLevel, int totalSensorData, int queueCapacity)\n+        {\n+            _partitions = concurrencyLevel;\n+            _inputs = totalSensorData;\n\nReview comment:\n       Done.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-30T19:05:23.367+0000",
                    "updated": "2021-12-30T19:05:23.367+0000",
                    "started": "2021-12-30T19:05:23.366+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "702398",
                    "issueId": "13416160"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13416160/worklog/702399",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zixi-bwang commented on a change in pull request #11874:\nURL: https://github.com/apache/arrow/pull/11874#discussion_r776838863\n\n\n\n##########\nFile path: csharp/examples/IoTExample/Model/SampleDataset.cs\n##########\n@@ -0,0 +1,211 @@\n+\ufeff// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements. See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+using System;\n+using System.IO;\n+using System.Threading.Tasks;\n+using System.Diagnostics;\n+using System.Collections.Concurrent;\n+using System.Collections.Generic;\n+using Apache.Arrow;\n+using Apache.Arrow.Ipc;\n+using Apache.Arrow.Memory;\n+\n+namespace IoTExample\n+{\n+    public class SampleDataset\n+    {\n+        private int _size;\n+        private readonly int _inputs;\n+        private readonly int _capacity;\n+        private readonly BlockingCollection<SensorData> _rows;\n+\n+        private readonly List<int> _colSubjectId;\n+        private readonly List<string> _colActivityLabel;\n+        private readonly List<long> _colTimestamp;\n+        private readonly List<double> _colXAxis;\n+        private readonly List<double> _colYAxis;\n+        private readonly List<double> _colZAxis;\n+\n+        private readonly int _threshold = 1_000_000;\n+        private readonly List<RecordBatch> _recordBatches;\n+        private readonly MemoryAllocator _memoryAllocator;\n+\n+        public Dictionary<string, string> activityLabel = new Dictionary<string, string>()\n+            {\n+                {\"walking\", \"A\"},\n+                {\"jogging\", \"B\"},\n+                {\"stairs\", \"C\"},\n+                {\"sitting\", \"D\"},\n+                {\"standing\", \"E\"},\n+                {\"typing\", \"F\"},\n+                {\"teeth\", \"G\"},\n+                {\"soup\", \"H\"},\n+                {\"chips\", \"I\"},\n+                {\"pasta\", \"J\"},\n+                {\"drinking\", \"K\"},\n+                {\"sandwich\", \"L\"},\n+                {\"kicking\", \"M\"},\n+                {\"catch\", \"O\"},\n+                {\"dribbling\", \"P\"},\n+                {\"writing\", \"Q\"},\n+                {\"clapping\", \"R\"},\n+                {\"folding\", \"S\"},\n+            };\n+\n+        public SampleDataset(int inputs, int capacity)\n+        {\n+            _inputs = inputs;\n+            _capacity = capacity;\n+            _rows = new BlockingCollection<SensorData>(_capacity);\n+\n+            _colSubjectId = new List<int>(capacity);\n+            _colActivityLabel = new List<string>();\n+            _colTimestamp = new List<long>();\n+            _colXAxis = new List<double>();\n+            _colYAxis = new List<double>();\n+            _colZAxis = new List<double>();\n+\n+            _recordBatches = new List<RecordBatch>();\n+            _memoryAllocator = new NativeMemoryAllocator(alignment: 64);\n+        }\n+\n+        public void Produce()\n+        {\n+            Random rand = new Random();\n+            bool success;\n+\n+            List<string> keyList = new List<string>(activityLabel.Keys);\n+            int count = keyList.Count;\n+\n+            DateTime now = DateTime.Now;\n+            long unixTime = ((DateTimeOffset)now).ToUnixTimeSeconds();\n+\n+            while (_size < _inputs)\n+            {\n+                string randomKey = keyList[rand.Next(count)];\n+                string label = activityLabel[randomKey];\n+\n+                // generate missing values\n+                if (rand.Next(10_000) == 9_999)\n+                {\n+                    label = null;\n+                }\n+\n+                success = _rows.TryAdd(new SensorData\n+                {\n+                    subjectId = rand.Next(1000, 2001),\n+                    activityLabel = label,\n+                    timestamp = unixTime++,\n+                    x_Axis = rand.NextDouble(),\n+                    y_Axis = rand.NextDouble(),\n+                    z_Axis = rand.NextDouble(),\n+                }); \n+\n+                if (success)\n+                {\n+                    //Console.WriteLine($\"Enqueue Task 0\");\n+                    _size++;\n+                }\n+                else\n+                {\n+                    Console.WriteLine(\"Producing is blocked, percent completed is: {0}%\", Math.Round((double)_size / _inputs, 4) * 100);\n+                }\n+            }\n+\n+            _rows.CompleteAdding();\n+        }\n+\n+        public async void Consume()\n+        {\n+            while (!_rows.IsCompleted)\n+            {\n+                if (!_rows.TryTake(out SensorData item, 3000))\n+                {\n+                    Console.WriteLine(\"Consuming is blocked!\");\n+                }\n+                else\n+                {\n+                    //Console.WriteLine($\"Dequeue Task 1\");\n+                    if (item != null && item.subjectId != null)\n+                    {\n+                        _colSubjectId.Add((int)item.subjectId);\n+                        _colActivityLabel.Add(item.activityLabel);\n+                        _colTimestamp.Add((long)item.timestamp);\n+                        _colXAxis.Add((double)item.x_Axis);\n+                        _colYAxis.Add((double)item.y_Axis);\n+                        _colZAxis.Add((double)item.z_Axis);\n+                    }\n+                }\n+\n+                if (_colSubjectId.Count == _threshold)\n+                {\n+                    // Build a record batch using the Fluent API\n+                    var recordBatch = new RecordBatch.Builder(_memoryAllocator)\n+                        .Append(\"SubjectId\", false, col => col.Int32(array => array.AppendRange(_colSubjectId)))\n+                        .Append(\"ActivityLabel\", false, col => col.String(array => array.AppendRange(_colActivityLabel)))\n+                        .Append(\"Timestamp\", false, col => col.Int64(array => array.AppendRange(_colTimestamp)))\n+                        .Append(\"XAxis\", false, col => col.Double(array => array.AppendRange(_colXAxis)))\n+                        .Append(\"YAxis\", false, col => col.Double(array => array.AppendRange(_colYAxis)))\n+                        .Append(\"ZAxis\", false, col => col.Double(array => array.AppendRange(_colZAxis)))\n+                        .Build();\n+\n+                    _recordBatches.Add(recordBatch);\n+\n+                    _colSubjectId.Clear();\n+                    _colActivityLabel.Clear();\n+                    _colTimestamp.Clear();\n+                    _colXAxis.Clear();\n+                    _colYAxis.Clear();\n+                    _colZAxis.Clear();\n+                }\n+            }\n+        }\n+\n+        public async Task<bool> PersistData()\n+        {\n+            string time = DateTime.Now.ToString(\"yyyyMMdd_HHmmss\");\n+            Stopwatch stopwatch = new Stopwatch();\n+            stopwatch.Start();\n+\n+            Schema schema = _recordBatches[0].Schema;\n+            // Write record batch to a file\n+            using (var stream = File.OpenWrite(@\"c:\\temp\\data\\iotbigdata.arrow\"))\n\nReview comment:\n       Updated.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-30T19:05:46.601+0000",
                    "updated": "2021-12-30T19:05:46.601+0000",
                    "started": "2021-12-30T19:05:46.601+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "702399",
                    "issueId": "13416160"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13416160/worklog/702400",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zixi-bwang commented on a change in pull request #11874:\nURL: https://github.com/apache/arrow/pull/11874#discussion_r776838967\n\n\n\n##########\nFile path: csharp/examples/IoTExample/Model/SampleDataset.cs\n##########\n@@ -0,0 +1,211 @@\n+\ufeff// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements. See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+using System;\n+using System.IO;\n+using System.Threading.Tasks;\n+using System.Diagnostics;\n+using System.Collections.Concurrent;\n+using System.Collections.Generic;\n+using Apache.Arrow;\n+using Apache.Arrow.Ipc;\n+using Apache.Arrow.Memory;\n+\n+namespace IoTExample\n+{\n+    public class SampleDataset\n+    {\n+        private int _size;\n+        private readonly int _inputs;\n+        private readonly int _capacity;\n+        private readonly BlockingCollection<SensorData> _rows;\n+\n+        private readonly List<int> _colSubjectId;\n+        private readonly List<string> _colActivityLabel;\n+        private readonly List<long> _colTimestamp;\n+        private readonly List<double> _colXAxis;\n+        private readonly List<double> _colYAxis;\n+        private readonly List<double> _colZAxis;\n+\n+        private readonly int _threshold = 1_000_000;\n+        private readonly List<RecordBatch> _recordBatches;\n+        private readonly MemoryAllocator _memoryAllocator;\n+\n+        public Dictionary<string, string> activityLabel = new Dictionary<string, string>()\n+            {\n+                {\"walking\", \"A\"},\n+                {\"jogging\", \"B\"},\n+                {\"stairs\", \"C\"},\n+                {\"sitting\", \"D\"},\n+                {\"standing\", \"E\"},\n+                {\"typing\", \"F\"},\n+                {\"teeth\", \"G\"},\n+                {\"soup\", \"H\"},\n+                {\"chips\", \"I\"},\n+                {\"pasta\", \"J\"},\n+                {\"drinking\", \"K\"},\n+                {\"sandwich\", \"L\"},\n+                {\"kicking\", \"M\"},\n+                {\"catch\", \"O\"},\n+                {\"dribbling\", \"P\"},\n+                {\"writing\", \"Q\"},\n+                {\"clapping\", \"R\"},\n+                {\"folding\", \"S\"},\n+            };\n+\n+        public SampleDataset(int inputs, int capacity)\n+        {\n+            _inputs = inputs;\n+            _capacity = capacity;\n+            _rows = new BlockingCollection<SensorData>(_capacity);\n+\n+            _colSubjectId = new List<int>(capacity);\n+            _colActivityLabel = new List<string>();\n+            _colTimestamp = new List<long>();\n+            _colXAxis = new List<double>();\n+            _colYAxis = new List<double>();\n+            _colZAxis = new List<double>();\n+\n+            _recordBatches = new List<RecordBatch>();\n+            _memoryAllocator = new NativeMemoryAllocator(alignment: 64);\n+        }\n+\n+        public void Produce()\n+        {\n+            Random rand = new Random();\n+            bool success;\n+\n+            List<string> keyList = new List<string>(activityLabel.Keys);\n+            int count = keyList.Count;\n+\n+            DateTime now = DateTime.Now;\n+            long unixTime = ((DateTimeOffset)now).ToUnixTimeSeconds();\n+\n+            while (_size < _inputs)\n+            {\n+                string randomKey = keyList[rand.Next(count)];\n+                string label = activityLabel[randomKey];\n+\n+                // generate missing values\n+                if (rand.Next(10_000) == 9_999)\n+                {\n+                    label = null;\n+                }\n+\n+                success = _rows.TryAdd(new SensorData\n+                {\n+                    subjectId = rand.Next(1000, 2001),\n+                    activityLabel = label,\n+                    timestamp = unixTime++,\n+                    x_Axis = rand.NextDouble(),\n+                    y_Axis = rand.NextDouble(),\n+                    z_Axis = rand.NextDouble(),\n+                }); \n+\n+                if (success)\n+                {\n+                    //Console.WriteLine($\"Enqueue Task 0\");\n+                    _size++;\n+                }\n+                else\n+                {\n+                    Console.WriteLine(\"Producing is blocked, percent completed is: {0}%\", Math.Round((double)_size / _inputs, 4) * 100);\n+                }\n+            }\n+\n+            _rows.CompleteAdding();\n+        }\n+\n+        public async void Consume()\n\nReview comment:\n       Done.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-30T19:06:20.094+0000",
                    "updated": "2021-12-30T19:06:20.094+0000",
                    "started": "2021-12-30T19:06:20.094+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "702400",
                    "issueId": "13416160"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13416160/worklog/702406",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zixi-bwang commented on a change in pull request #11874:\nURL: https://github.com/apache/arrow/pull/11874#discussion_r776843933\n\n\n\n##########\nFile path: csharp/examples/IoTExample/Model/SampleDataPipeline.cs\n##########\n@@ -0,0 +1,197 @@\n+\ufeff// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements. See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+using System;\n+using System.IO;\n+using System.Threading.Tasks;\n+using System.Collections.Generic;\n+using Apache.Arrow;\n+using Apache.Arrow.Ipc;\n+using Apache.Arrow.Memory;\n+using System.Threading.Channels;\n+using System.Threading;\n+using System.Collections.Concurrent;\n+\n+namespace IoTPipelineExample\n+{\n+    public class SampleDataPipeline\n+    {\n+        private int _size;\n+        private int _partitions;\n+        private readonly int _inputs;\n+        private readonly int _capacity;\n+        private readonly Channel<SensorData> _channel;\n+        ChannelWriter<SensorData> _writer;\n+        ChannelReader<SensorData> _reader;\n+\n+        private readonly List<ConcurrentBag<int>> _colSubjectIdArrays;\n+        private readonly List<ConcurrentBag<string>> _colActivityLabelArrays;\n+        private readonly List<ConcurrentBag<long>> _colTimestampArrays;\n+        private readonly List<ConcurrentBag<double>> _colXAxisArrays;\n+        private readonly List<ConcurrentBag<double>> _colYAxisArrays;\n+        private readonly List<ConcurrentBag<double>> _colZAxisArrays;\n+\n+        public Dictionary<string, string> activityLabel = new Dictionary<string, string>()\n+            {\n+                {\"walking\", \"A\"},\n+                {\"jogging\", \"B\"},\n+                {\"stairs\", \"C\"},\n+                {\"sitting\", \"D\"},\n+                {\"standing\", \"E\"},\n+                {\"typing\", \"F\"},\n+                {\"teeth\", \"G\"},\n+                {\"soup\", \"H\"},\n+                {\"chips\", \"I\"},\n+                {\"pasta\", \"J\"},\n+                {\"drinking\", \"K\"},\n+                {\"sandwich\", \"L\"},\n+                {\"kicking\", \"M\"},\n+                {\"catch\", \"O\"},\n+                {\"dribbling\", \"P\"},\n+                {\"writing\", \"Q\"},\n+                {\"clapping\", \"R\"},\n+                {\"folding\", \"S\"},\n+            };\n+\n+        public SampleDataPipeline(int concurrencyLevel, int totalSensorData, int queueCapacity)\n+        {\n+            _partitions = concurrencyLevel;\n+            _inputs = totalSensorData;\n+            _capacity = queueCapacity;\n+            _channel = Channel.CreateBounded<SensorData>(_capacity);\n+            _writer = _channel.Writer;\n+            _reader = _channel.Reader;\n+\n+            _colSubjectIdArrays = new List<ConcurrentBag<int>>();\n+            _colActivityLabelArrays = new List<ConcurrentBag<string>>();\n+            _colTimestampArrays = new List<ConcurrentBag<long>>();\n+            _colXAxisArrays = new List<ConcurrentBag<double>>();\n+            _colYAxisArrays = new List<ConcurrentBag<double>>();\n+            _colZAxisArrays = new List<ConcurrentBag<double>>();\n+\n+            for (int i = 0; i < _partitions; i++)\n+            {\n+                _colSubjectIdArrays.Add(new ConcurrentBag<int>());\n\nReview comment:\n       I have refactored the code per your suggestion to use multiple writers and 1 reader only, and writes data directly to builder.\r\n   And I also modified the example to emulate below scenario:\r\n   \r\n   - There are around 9,000 sensors(subjects) in total\r\n   - Each sensor can send hundreds or thousands events during a short time of period\r\n   - When reading from channel, data is appended to each array builder hashed by SubjectId as the key of builderId\r\n   - When building RecordBatch, the array builders with the same builderId are built together\r\n   - The final Arrow file contains 9,000 RecordBatches \r\n   \r\n   Do you think this a good scenario for real world applications in terms of utilizing Arrow RecordBatch?\r\n   \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-30T19:26:36.304+0000",
                    "updated": "2021-12-30T19:26:36.304+0000",
                    "started": "2021-12-30T19:26:36.303+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "702406",
                    "issueId": "13416160"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13416160/worklog/702408",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zixi-bwang commented on a change in pull request #11874:\nURL: https://github.com/apache/arrow/pull/11874#discussion_r776843933\n\n\n\n##########\nFile path: csharp/examples/IoTExample/Model/SampleDataPipeline.cs\n##########\n@@ -0,0 +1,197 @@\n+\ufeff// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements. See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+using System;\n+using System.IO;\n+using System.Threading.Tasks;\n+using System.Collections.Generic;\n+using Apache.Arrow;\n+using Apache.Arrow.Ipc;\n+using Apache.Arrow.Memory;\n+using System.Threading.Channels;\n+using System.Threading;\n+using System.Collections.Concurrent;\n+\n+namespace IoTPipelineExample\n+{\n+    public class SampleDataPipeline\n+    {\n+        private int _size;\n+        private int _partitions;\n+        private readonly int _inputs;\n+        private readonly int _capacity;\n+        private readonly Channel<SensorData> _channel;\n+        ChannelWriter<SensorData> _writer;\n+        ChannelReader<SensorData> _reader;\n+\n+        private readonly List<ConcurrentBag<int>> _colSubjectIdArrays;\n+        private readonly List<ConcurrentBag<string>> _colActivityLabelArrays;\n+        private readonly List<ConcurrentBag<long>> _colTimestampArrays;\n+        private readonly List<ConcurrentBag<double>> _colXAxisArrays;\n+        private readonly List<ConcurrentBag<double>> _colYAxisArrays;\n+        private readonly List<ConcurrentBag<double>> _colZAxisArrays;\n+\n+        public Dictionary<string, string> activityLabel = new Dictionary<string, string>()\n+            {\n+                {\"walking\", \"A\"},\n+                {\"jogging\", \"B\"},\n+                {\"stairs\", \"C\"},\n+                {\"sitting\", \"D\"},\n+                {\"standing\", \"E\"},\n+                {\"typing\", \"F\"},\n+                {\"teeth\", \"G\"},\n+                {\"soup\", \"H\"},\n+                {\"chips\", \"I\"},\n+                {\"pasta\", \"J\"},\n+                {\"drinking\", \"K\"},\n+                {\"sandwich\", \"L\"},\n+                {\"kicking\", \"M\"},\n+                {\"catch\", \"O\"},\n+                {\"dribbling\", \"P\"},\n+                {\"writing\", \"Q\"},\n+                {\"clapping\", \"R\"},\n+                {\"folding\", \"S\"},\n+            };\n+\n+        public SampleDataPipeline(int concurrencyLevel, int totalSensorData, int queueCapacity)\n+        {\n+            _partitions = concurrencyLevel;\n+            _inputs = totalSensorData;\n+            _capacity = queueCapacity;\n+            _channel = Channel.CreateBounded<SensorData>(_capacity);\n+            _writer = _channel.Writer;\n+            _reader = _channel.Reader;\n+\n+            _colSubjectIdArrays = new List<ConcurrentBag<int>>();\n+            _colActivityLabelArrays = new List<ConcurrentBag<string>>();\n+            _colTimestampArrays = new List<ConcurrentBag<long>>();\n+            _colXAxisArrays = new List<ConcurrentBag<double>>();\n+            _colYAxisArrays = new List<ConcurrentBag<double>>();\n+            _colZAxisArrays = new List<ConcurrentBag<double>>();\n+\n+            for (int i = 0; i < _partitions; i++)\n+            {\n+                _colSubjectIdArrays.Add(new ConcurrentBag<int>());\n\nReview comment:\n       I have refactored the code per your suggestion to use multiple writers and 1 reader only, and writes data directly to builder.\r\n   And I also modified the example to emulate below scenario:\r\n   \r\n   - There are around 9,000 sensors(subjects) in total\r\n   - Each sensor can send hundreds or thousands events during a short time of period\r\n   - When reading from channel, data is appended to each array builder hashed by SubjectId as the key of builderId\r\n   - When building RecordBatch, the array builders with the same builderId are built together\r\n   - The final Arrow file contains 9,000 RecordBatches \r\n   \r\n   Do you think this is a good scenario for real world use cases in terms of utilizing Arrow RecordBatch?\r\n   \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-30T19:30:32.709+0000",
                    "updated": "2021-12-30T19:30:32.709+0000",
                    "started": "2021-12-30T19:30:32.707+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "702408",
                    "issueId": "13416160"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13416160/worklog/702597",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zixi-bwang commented on a change in pull request #11874:\nURL: https://github.com/apache/arrow/pull/11874#discussion_r776843933\n\n\n\n##########\nFile path: csharp/examples/IoTExample/Model/SampleDataPipeline.cs\n##########\n@@ -0,0 +1,197 @@\n+\ufeff// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements. See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+using System;\n+using System.IO;\n+using System.Threading.Tasks;\n+using System.Collections.Generic;\n+using Apache.Arrow;\n+using Apache.Arrow.Ipc;\n+using Apache.Arrow.Memory;\n+using System.Threading.Channels;\n+using System.Threading;\n+using System.Collections.Concurrent;\n+\n+namespace IoTPipelineExample\n+{\n+    public class SampleDataPipeline\n+    {\n+        private int _size;\n+        private int _partitions;\n+        private readonly int _inputs;\n+        private readonly int _capacity;\n+        private readonly Channel<SensorData> _channel;\n+        ChannelWriter<SensorData> _writer;\n+        ChannelReader<SensorData> _reader;\n+\n+        private readonly List<ConcurrentBag<int>> _colSubjectIdArrays;\n+        private readonly List<ConcurrentBag<string>> _colActivityLabelArrays;\n+        private readonly List<ConcurrentBag<long>> _colTimestampArrays;\n+        private readonly List<ConcurrentBag<double>> _colXAxisArrays;\n+        private readonly List<ConcurrentBag<double>> _colYAxisArrays;\n+        private readonly List<ConcurrentBag<double>> _colZAxisArrays;\n+\n+        public Dictionary<string, string> activityLabel = new Dictionary<string, string>()\n+            {\n+                {\"walking\", \"A\"},\n+                {\"jogging\", \"B\"},\n+                {\"stairs\", \"C\"},\n+                {\"sitting\", \"D\"},\n+                {\"standing\", \"E\"},\n+                {\"typing\", \"F\"},\n+                {\"teeth\", \"G\"},\n+                {\"soup\", \"H\"},\n+                {\"chips\", \"I\"},\n+                {\"pasta\", \"J\"},\n+                {\"drinking\", \"K\"},\n+                {\"sandwich\", \"L\"},\n+                {\"kicking\", \"M\"},\n+                {\"catch\", \"O\"},\n+                {\"dribbling\", \"P\"},\n+                {\"writing\", \"Q\"},\n+                {\"clapping\", \"R\"},\n+                {\"folding\", \"S\"},\n+            };\n+\n+        public SampleDataPipeline(int concurrencyLevel, int totalSensorData, int queueCapacity)\n+        {\n+            _partitions = concurrencyLevel;\n+            _inputs = totalSensorData;\n+            _capacity = queueCapacity;\n+            _channel = Channel.CreateBounded<SensorData>(_capacity);\n+            _writer = _channel.Writer;\n+            _reader = _channel.Reader;\n+\n+            _colSubjectIdArrays = new List<ConcurrentBag<int>>();\n+            _colActivityLabelArrays = new List<ConcurrentBag<string>>();\n+            _colTimestampArrays = new List<ConcurrentBag<long>>();\n+            _colXAxisArrays = new List<ConcurrentBag<double>>();\n+            _colYAxisArrays = new List<ConcurrentBag<double>>();\n+            _colZAxisArrays = new List<ConcurrentBag<double>>();\n+\n+            for (int i = 0; i < _partitions; i++)\n+            {\n+                _colSubjectIdArrays.Add(new ConcurrentBag<int>());\n\nReview comment:\n       I have refactored the code per your suggestion to use multiple writers and 1 reader only, and writes data directly to builder.\r\n   And I also modified the example to emulate below scenario:\r\n   \r\n   - There are around 9,000 sensors(subjects) in total\r\n   - Each sensor can send hundreds or thousands events during a short time of period\r\n   - When reading from channel, data is appended to each array builder hashed by SubjectId as the key of builderId\r\n   - When building RecordBatch, the array builders with the same builderId are built together\r\n   - The final Arrow file contains 9,000 RecordBatches \r\n   \r\n   Do you think this is a good scenario for real world use cases in terms of utilizing Arrow file and RecordBatch?\r\n   \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-31T17:48:17.176+0000",
                    "updated": "2021-12-31T17:48:17.176+0000",
                    "started": "2021-12-31T17:48:17.175+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "702597",
                    "issueId": "13416160"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13416160/worklog/703137",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "eerhardt commented on pull request #11874:\nURL: https://github.com/apache/arrow/pull/11874#issuecomment-1004434501\n\n\n   @zixi-bwang - some bad merge must have happened. This PR is now affecting A LOT of files. Can you fix it?\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-03T23:55:31.827+0000",
                    "updated": "2022-01-03T23:55:31.827+0000",
                    "started": "2022-01-03T23:55:31.827+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "703137",
                    "issueId": "13416160"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13416160/worklog/703190",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zixi-bwang commented on pull request #11874:\nURL: https://github.com/apache/arrow/pull/11874#issuecomment-1004527023\n\n\n   > @zixi-bwang - some bad merge must have happened. This PR is now affecting A LOT of files. Can you fix it?\r\n   \r\n   Not sure how to fix it, I'll have to close the PR then.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-04T04:50:21.675+0000",
                    "updated": "2022-01-04T04:50:21.675+0000",
                    "started": "2022-01-04T04:50:21.675+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "703190",
                    "issueId": "13416160"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13416160/worklog/703191",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zixi-bwang closed pull request #11874:\nURL: https://github.com/apache/arrow/pull/11874\n\n\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-04T04:50:24.535+0000",
                    "updated": "2022-01-04T04:50:24.535+0000",
                    "started": "2022-01-04T04:50:24.535+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "703191",
                    "issueId": "13416160"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13416160/worklog/703203",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zixi-bwang opened a new pull request #12068:\nURL: https://github.com/apache/arrow/pull/12068\n\n\n   \r\n   \r\n   This PR is the continuous work of the previous PR of #11874, which was closed due to some bad merge happened.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-04T06:22:31.524+0000",
                    "updated": "2022-01-04T06:22:31.524+0000",
                    "started": "2022-01-04T06:22:31.523+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "703203",
                    "issueId": "13416160"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13416160/worklog/703204",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #12068:\nURL: https://github.com/apache/arrow/pull/12068#issuecomment-1004556250\n\n\n   https://issues.apache.org/jira/browse/ARROW-15037\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-04T06:22:56.424+0000",
                    "updated": "2022-01-04T06:22:56.424+0000",
                    "started": "2022-01-04T06:22:56.424+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "703204",
                    "issueId": "13416160"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 17400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@6e9956e1[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4d6cbc67[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@175c23d7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@3ffb3adf[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@63059843[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@627abf74[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@144e6a77[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@720587e3[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3d8dce60[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@abb57ba[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6dc18948[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@33a5318c[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 17400,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Jul 12 14:04:31 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": null,
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-15037/watchers",
            "watchCount": 2,
            "isWatching": true
        },
        "created": "2021-12-08T23:12:04.000+0000",
        "updated": "2022-07-12T14:04:31.000+0000",
        "timeoriginalestimate": null,
        "description": "Added a C# code example for real-time analytics using Arrow as data format.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "4h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 17400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C#] Add an example to C#",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": "https://github.com/apache/arrow/pull/11874",
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13416160/comment/17565676",
                    "id": "17565676",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=toddfarmer",
                        "name": "toddfarmer",
                        "key": "JIRAUSER288796",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=39935",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=39935",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=39935",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=39935"
                        },
                        "displayName": "Todd Farmer",
                        "active": true,
                        "timeZone": "America/Boise"
                    },
                    "body": "This issue was last updated over 90 days ago, which may be an indication it is no longer being actively worked. To better reflect the current state, the issue is being unassigned. Please feel free to re-take assignment of the issue if it is being actively worked, or if you plan to start that work soon.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=toddfarmer",
                        "name": "toddfarmer",
                        "key": "JIRAUSER288796",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=39935",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=39935",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=39935",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=39935"
                        },
                        "displayName": "Todd Farmer",
                        "active": true,
                        "timeZone": "America/Boise"
                    },
                    "created": "2022-07-12T14:04:31.198+0000",
                    "updated": "2022-07-12T14:04:31.198+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0xhhs:",
        "customfield_12314139": null
    }
}