{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13384195",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13384195",
    "key": "ARROW-13097",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12349983",
                "id": "12349983",
                "description": "",
                "name": "5.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-07-28"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
            "name": "bkietz",
            "key": "bkietz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
            },
            "displayName": "Ben Kietzman",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
            "name": "bkietz",
            "key": "bkietz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
            },
            "displayName": "Ben Kietzman",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
            "name": "bkietz",
            "key": "bkietz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
            },
            "displayName": "Ben Kietzman",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 5400,
            "total": 5400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 5400,
            "total": 5400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-13097/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 9,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13384195/worklog/611871",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #10551:\nURL: https://github.com/apache/arrow/pull/10551#discussion_r653976569\n\n\n\n##########\nFile path: cpp/src/arrow/util/reflection_test.cc\n##########\n@@ -0,0 +1,121 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <gtest/gtest.h>\n+\n+#include \"arrow/util/reflection_internal.h\"\n+\n+namespace arrow {\n+namespace internal {\n+\n+// unmodified structure which we wish to reflect on:\n+struct Person {\n+  std::string name;\n+  int age;\n+};\n+\n+// enumeration of properties:\n+template <>\n+struct ReflectionTraits<Person> {\n+  using Properties = std::tuple<DataMember<Person, int, &Person::age>,\n\nReview comment:\n       It was intentional; I wanted to make clear that the ordering follows the trait and not the declaration in the struct. But in practice we'd probably always order identically. I'll switch them\n\n##########\nFile path: cpp/src/arrow/util/reflection_internal.h\n##########\n@@ -0,0 +1,192 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <array>\n+#include <string>\n+#include <tuple>\n+#include <utility>\n+\n+namespace arrow {\n+namespace internal {\n+\n+namespace detail {\n+\n+#ifdef _MSC_VER\n+#define ARROW_PRETTY_FUNCTION __FUNCSIG__\n+#else\n+#define ARROW_PRETTY_FUNCTION __PRETTY_FUNCTION__\n+#endif\n+\n+template <typename T>\n+const char* raw() {\n+  return ARROW_PRETTY_FUNCTION;\n+}\n+\n+template <typename T>\n+size_t raw_sizeof() {\n+  return sizeof(ARROW_PRETTY_FUNCTION);\n+}\n+\n+#undef ARROW_PRETTY_FUNCTION\n+\n+constexpr bool starts_with(char const* haystack, char const* needle) {\n+  return needle[0] == '\\0' ||\n\nReview comment:\n       Agreed\n\n##########\nFile path: cpp/src/arrow/util/reflection_internal.h\n##########\n@@ -0,0 +1,192 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <array>\n+#include <string>\n+#include <tuple>\n+#include <utility>\n+\n+namespace arrow {\n+namespace internal {\n+\n+namespace detail {\n+\n+#ifdef _MSC_VER\n+#define ARROW_PRETTY_FUNCTION __FUNCSIG__\n+#else\n+#define ARROW_PRETTY_FUNCTION __PRETTY_FUNCTION__\n+#endif\n+\n+template <typename T>\n+const char* raw() {\n\nReview comment:\n       https://gcc.gnu.org/bugzilla/show_bug.cgi?id=66639\r\n   Older GCC doesn't think __PRETTY_FUNCTION__ is constexpr. Shame, too: with constexpr it's possible to ensure the sliced-away portions of __PRETTY_FUNCTION__ don't make it into the object file\n\n##########\nFile path: cpp/src/arrow/util/reflection_internal.h\n##########\n@@ -0,0 +1,192 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <array>\n+#include <string>\n+#include <tuple>\n+#include <utility>\n+\n+namespace arrow {\n+namespace internal {\n+\n+namespace detail {\n+\n+#ifdef _MSC_VER\n+#define ARROW_PRETTY_FUNCTION __FUNCSIG__\n+#else\n+#define ARROW_PRETTY_FUNCTION __PRETTY_FUNCTION__\n+#endif\n+\n+template <typename T>\n+const char* raw() {\n\nReview comment:\n       https://gcc.gnu.org/bugzilla/show_bug.cgi?id=66639\r\n   Older GCC doesn't think `__PRETTY_FUNCTION__` is constexpr. Shame, too: with constexpr it's possible to ensure the sliced-away portions of `__PRETTY_FUNCTION__` don't make it into the object file\n\n##########\nFile path: cpp/src/arrow/util/reflection_internal.h\n##########\n@@ -0,0 +1,192 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <array>\n+#include <string>\n+#include <tuple>\n+#include <utility>\n+\n+namespace arrow {\n+namespace internal {\n+\n+namespace detail {\n+\n+#ifdef _MSC_VER\n+#define ARROW_PRETTY_FUNCTION __FUNCSIG__\n+#else\n+#define ARROW_PRETTY_FUNCTION __PRETTY_FUNCTION__\n+#endif\n+\n+template <typename T>\n+const char* raw() {\n+  return ARROW_PRETTY_FUNCTION;\n+}\n+\n+template <typename T>\n+size_t raw_sizeof() {\n+  return sizeof(ARROW_PRETTY_FUNCTION);\n+}\n+\n+#undef ARROW_PRETTY_FUNCTION\n+\n+constexpr bool starts_with(char const* haystack, char const* needle) {\n+  return needle[0] == '\\0' ||\n+         (haystack[0] == needle[0] && starts_with(haystack + 1, needle + 1));\n+}\n+\n+constexpr size_t search(char const* haystack, char const* needle) {\n+  return haystack[0] == '\\0' || starts_with(haystack, needle)\n+             ? 0\n+             : search(haystack + 1, needle) + 1;\n+}\n+\n+const size_t typename_prefix = search(raw<double>(), \"double\");\n+\n+template <typename T>\n+size_t struct_class_prefix() {\n+#ifdef _MSC_VER\n+  return starts_with(raw<T>() + typename_prefix, \"struct \")\n+             ? 7\n+             : starts_with(raw<T>() + typename_prefix, \"class \") ? 6 : 0;\n+#else\n+  return 0;\n+#endif\n+}\n+\n+template <typename T>\n+size_t typename_length() {\n+  // raw_sizeof<T>() - raw_sizeof<double>() ==\n+  //     (length of T's name) - strlen(\"double\")\n+  // (length of T's name) ==\n+  //     raw_sizeof<T>() - raw_sizeof<double>() + strlen(\"double\")\n+  return raw_sizeof<T>() - struct_class_prefix<T>() - raw_sizeof<double>() + 6;\n\nReview comment:\n       Sorry, the comment is trying to communicate the algebra of the situation. Pretty function can be thought of as string interpolation, like `\"const char* raw<T>() [with T = {}]\".format(typename)`. Compilers' format strings differ so we have to compute the length of the extraneous content by using a known typename, for which I chose \"double\". I know the length of `dbl_len = \"const char* raw<T>() [with T = {}]\".format('double')` is 6 more than the number of extraneous chars, so `extra_len = dbl_len - 6` which I can subtract from `len(\"const char* raw<T>() [with T = {}]\".format(typename))` to get the length of the type name\n\n##########\nFile path: cpp/src/arrow/util/reflection_internal.h\n##########\n@@ -0,0 +1,192 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <array>\n+#include <string>\n+#include <tuple>\n+#include <utility>\n+\n+namespace arrow {\n+namespace internal {\n+\n+namespace detail {\n+\n+#ifdef _MSC_VER\n+#define ARROW_PRETTY_FUNCTION __FUNCSIG__\n+#else\n+#define ARROW_PRETTY_FUNCTION __PRETTY_FUNCTION__\n+#endif\n+\n+template <typename T>\n+const char* raw() {\n+  return ARROW_PRETTY_FUNCTION;\n+}\n+\n+template <typename T>\n+size_t raw_sizeof() {\n+  return sizeof(ARROW_PRETTY_FUNCTION);\n+}\n+\n+#undef ARROW_PRETTY_FUNCTION\n+\n+constexpr bool starts_with(char const* haystack, char const* needle) {\n+  return needle[0] == '\\0' ||\n+         (haystack[0] == needle[0] && starts_with(haystack + 1, needle + 1));\n+}\n+\n+constexpr size_t search(char const* haystack, char const* needle) {\n+  return haystack[0] == '\\0' || starts_with(haystack, needle)\n+             ? 0\n+             : search(haystack + 1, needle) + 1;\n+}\n+\n+const size_t typename_prefix = search(raw<double>(), \"double\");\n+\n+template <typename T>\n+size_t struct_class_prefix() {\n+#ifdef _MSC_VER\n+  return starts_with(raw<T>() + typename_prefix, \"struct \")\n+             ? 7\n+             : starts_with(raw<T>() + typename_prefix, \"class \") ? 6 : 0;\n+#else\n+  return 0;\n+#endif\n+}\n+\n+template <typename T>\n+size_t typename_length() {\n+  // raw_sizeof<T>() - raw_sizeof<double>() ==\n+  //     (length of T's name) - strlen(\"double\")\n+  // (length of T's name) ==\n+  //     raw_sizeof<T>() - raw_sizeof<double>() + strlen(\"double\")\n+  return raw_sizeof<T>() - struct_class_prefix<T>() - raw_sizeof<double>() + 6;\n\nReview comment:\n       Again, would be much easier to read of I weren't trying to shoehorn this into something c++11 constexpr compatible\n\n##########\nFile path: cpp/src/arrow/util/reflection_internal.h\n##########\n@@ -0,0 +1,192 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <array>\n+#include <string>\n+#include <tuple>\n+#include <utility>\n+\n+namespace arrow {\n+namespace internal {\n+\n+namespace detail {\n+\n+#ifdef _MSC_VER\n+#define ARROW_PRETTY_FUNCTION __FUNCSIG__\n+#else\n+#define ARROW_PRETTY_FUNCTION __PRETTY_FUNCTION__\n+#endif\n+\n+template <typename T>\n+const char* raw() {\n+  return ARROW_PRETTY_FUNCTION;\n+}\n+\n+template <typename T>\n+size_t raw_sizeof() {\n+  return sizeof(ARROW_PRETTY_FUNCTION);\n+}\n+\n+#undef ARROW_PRETTY_FUNCTION\n+\n+constexpr bool starts_with(char const* haystack, char const* needle) {\n+  return needle[0] == '\\0' ||\n+         (haystack[0] == needle[0] && starts_with(haystack + 1, needle + 1));\n+}\n+\n+constexpr size_t search(char const* haystack, char const* needle) {\n+  return haystack[0] == '\\0' || starts_with(haystack, needle)\n+             ? 0\n+             : search(haystack + 1, needle) + 1;\n+}\n+\n+const size_t typename_prefix = search(raw<double>(), \"double\");\n+\n+template <typename T>\n+size_t struct_class_prefix() {\n+#ifdef _MSC_VER\n+  return starts_with(raw<T>() + typename_prefix, \"struct \")\n+             ? 7\n+             : starts_with(raw<T>() + typename_prefix, \"class \") ? 6 : 0;\n+#else\n+  return 0;\n+#endif\n+}\n+\n+template <typename T>\n+size_t typename_length() {\n+  // raw_sizeof<T>() - raw_sizeof<double>() ==\n+  //     (length of T's name) - strlen(\"double\")\n+  // (length of T's name) ==\n+  //     raw_sizeof<T>() - raw_sizeof<double>() + strlen(\"double\")\n+  return raw_sizeof<T>() - struct_class_prefix<T>() - raw_sizeof<double>() + 6;\n\nReview comment:\n       I'll add more comments.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-18T20:51:09.658+0000",
                    "updated": "2021-06-18T20:51:09.658+0000",
                    "started": "2021-06-18T20:51:09.658+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "611871",
                    "issueId": "13384195"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13384195/worklog/611935",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz opened a new pull request #10551:\nURL: https://github.com/apache/arrow/pull/10551\n\n\n   Provides `nameof<T>()` which yields a string representation of the name of `T`, as well as reflection for simple `struct`s, allowing generic get/set/nameof each member\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-18T20:59:47.932+0000",
                    "updated": "2021-06-18T20:59:47.932+0000",
                    "started": "2021-06-18T20:59:47.932+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "611935",
                    "issueId": "13384195"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13384195/worklog/611973",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #10551:\nURL: https://github.com/apache/arrow/pull/10551#discussion_r653957590\n\n\n\n##########\nFile path: cpp/src/arrow/util/reflection_test.cc\n##########\n@@ -0,0 +1,121 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <gtest/gtest.h>\n+\n+#include \"arrow/util/reflection_internal.h\"\n+\n+namespace arrow {\n+namespace internal {\n+\n+// unmodified structure which we wish to reflect on:\n+struct Person {\n+  std::string name;\n+  int age;\n+};\n+\n+// enumeration of properties:\n+template <>\n+struct ReflectionTraits<Person> {\n+  using Properties = std::tuple<DataMember<Person, int, &Person::age>,\n\nReview comment:\n       Is reversing the order intentional? It confused me for a bit below when I saw that the properties were in the opposite order of the struct until I looked here again.\n\n##########\nFile path: cpp/src/arrow/util/reflection_test.cc\n##########\n@@ -0,0 +1,121 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <gtest/gtest.h>\n+\n+#include \"arrow/util/reflection_internal.h\"\n+\n+namespace arrow {\n+namespace internal {\n+\n+// unmodified structure which we wish to reflect on:\n+struct Person {\n+  std::string name;\n+  int age;\n+};\n+\n+// enumeration of properties:\n+template <>\n+struct ReflectionTraits<Person> {\n+  using Properties = std::tuple<DataMember<Person, int, &Person::age>,\n\nReview comment:\n       Ah that's fine too - might just deserve a comment so it's clear what the intent was.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-18T21:04:21.801+0000",
                    "updated": "2021-06-18T21:04:21.801+0000",
                    "started": "2021-06-18T21:04:21.801+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "611973",
                    "issueId": "13384195"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13384195/worklog/612007",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #10551:\nURL: https://github.com/apache/arrow/pull/10551#issuecomment-863623497\n\n\n   Argh: membername is broken for MSVC https://ci.appveyor.com/project/ApacheSoftwareFoundation/arrow/builds/39649979/job/undvcpp9ynmsib1o#L902\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-18T21:08:39.329+0000",
                    "updated": "2021-06-18T21:08:39.329+0000",
                    "started": "2021-06-18T21:08:39.329+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "612007",
                    "issueId": "13384195"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13384195/worklog/612015",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz edited a comment on pull request #10551:\nURL: https://github.com/apache/arrow/pull/10551#issuecomment-863623497\n\n\n   Argh: membername is broken for MSVC https://ci.appveyor.com/project/ApacheSoftwareFoundation/arrow/builds/39649979/job/undvcpp9ynmsib1o#L902\r\n   \r\n   Specifically, it looks like `__FUNCSIG__` includes only the byte offset of a member pointer rather than the name https://godbolt.org/z/rPPd5WTMh\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-18T21:09:35.429+0000",
                    "updated": "2021-06-18T21:09:35.429+0000",
                    "started": "2021-06-18T21:09:35.429+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "612015",
                    "issueId": "13384195"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13384195/worklog/612080",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #10551:\nURL: https://github.com/apache/arrow/pull/10551#issuecomment-863554345\n\n\n   https://issues.apache.org/jira/browse/ARROW-13097\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-18T21:18:04.689+0000",
                    "updated": "2021-06-18T21:18:04.689+0000",
                    "started": "2021-06-18T21:18:04.689+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "612080",
                    "issueId": "13384195"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13384195/worklog/612128",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "dsunder commented on a change in pull request #10551:\nURL: https://github.com/apache/arrow/pull/10551#discussion_r654014167\n\n\n\n##########\nFile path: cpp/src/arrow/util/reflection_internal.h\n##########\n@@ -0,0 +1,192 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <array>\n+#include <string>\n+#include <tuple>\n+#include <utility>\n+\n+namespace arrow {\n+namespace internal {\n+\n+namespace detail {\n+\n+#ifdef _MSC_VER\n+#define ARROW_PRETTY_FUNCTION __FUNCSIG__\n+#else\n+#define ARROW_PRETTY_FUNCTION __PRETTY_FUNCTION__\n+#endif\n+\n+template <typename T>\n+const char* raw() {\n+  return ARROW_PRETTY_FUNCTION;\n+}\n+\n+template <typename T>\n+size_t raw_sizeof() {\n+  return sizeof(ARROW_PRETTY_FUNCTION);\n+}\n+\n+#undef ARROW_PRETTY_FUNCTION\n+\n+constexpr bool starts_with(char const* haystack, char const* needle) {\n+  return needle[0] == '\\0' ||\n\nReview comment:\n       Too bad we can't use c++17.  The use of recursion to define these simple `constexpr` functions makes me sad :(.\n\n##########\nFile path: cpp/src/arrow/util/reflection_internal.h\n##########\n@@ -0,0 +1,192 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <array>\n+#include <string>\n+#include <tuple>\n+#include <utility>\n+\n+namespace arrow {\n+namespace internal {\n+\n+namespace detail {\n+\n+#ifdef _MSC_VER\n+#define ARROW_PRETTY_FUNCTION __FUNCSIG__\n+#else\n+#define ARROW_PRETTY_FUNCTION __PRETTY_FUNCTION__\n+#endif\n+\n+template <typename T>\n+const char* raw() {\n\nReview comment:\n       `raw()` and `raw_sizeof()` are undescriptive names.  Consider renaming to `pretty_function_name()` and `prettty_function_name_size()`.  \r\n   \r\n   Is there a reason why these functions are not `constexpr`?  \n\n##########\nFile path: cpp/src/arrow/util/reflection_internal.h\n##########\n@@ -0,0 +1,192 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <array>\n+#include <string>\n+#include <tuple>\n+#include <utility>\n+\n+namespace arrow {\n+namespace internal {\n+\n+namespace detail {\n+\n+#ifdef _MSC_VER\n+#define ARROW_PRETTY_FUNCTION __FUNCSIG__\n+#else\n+#define ARROW_PRETTY_FUNCTION __PRETTY_FUNCTION__\n+#endif\n+\n+template <typename T>\n+const char* raw() {\n+  return ARROW_PRETTY_FUNCTION;\n+}\n+\n+template <typename T>\n+size_t raw_sizeof() {\n+  return sizeof(ARROW_PRETTY_FUNCTION);\n+}\n+\n+#undef ARROW_PRETTY_FUNCTION\n+\n+constexpr bool starts_with(char const* haystack, char const* needle) {\n+  return needle[0] == '\\0' ||\n+         (haystack[0] == needle[0] && starts_with(haystack + 1, needle + 1));\n+}\n+\n+constexpr size_t search(char const* haystack, char const* needle) {\n+  return haystack[0] == '\\0' || starts_with(haystack, needle)\n+             ? 0\n+             : search(haystack + 1, needle) + 1;\n+}\n+\n+const size_t typename_prefix = search(raw<double>(), \"double\");\n+\n+template <typename T>\n+size_t struct_class_prefix() {\n+#ifdef _MSC_VER\n+  return starts_with(raw<T>() + typename_prefix, \"struct \")\n+             ? 7\n+             : starts_with(raw<T>() + typename_prefix, \"class \") ? 6 : 0;\n+#else\n+  return 0;\n+#endif\n+}\n+\n+template <typename T>\n+size_t typename_length() {\n+  // raw_sizeof<T>() - raw_sizeof<double>() ==\n+  //     (length of T's name) - strlen(\"double\")\n+  // (length of T's name) ==\n+  //     raw_sizeof<T>() - raw_sizeof<double>() + strlen(\"double\")\n+  return raw_sizeof<T>() - struct_class_prefix<T>() - raw_sizeof<double>() + 6;\n\nReview comment:\n       Why does this return value need ```- raw_sizeof<double>() +6```?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-18T21:23:21.408+0000",
                    "updated": "2021-06-18T21:23:21.408+0000",
                    "started": "2021-06-18T21:23:21.407+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "612128",
                    "issueId": "13384195"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13384195/worklog/612829",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz closed pull request #10551:\nURL: https://github.com/apache/arrow/pull/10551\n\n\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-21T19:09:30.051+0000",
                    "updated": "2021-06-21T19:09:30.051+0000",
                    "started": "2021-06-21T19:09:30.050+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "612829",
                    "issueId": "13384195"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13384195/worklog/613165",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz closed pull request #10551:\nURL: https://github.com/apache/arrow/pull/10551\n\n\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-22T07:55:07.699+0000",
                    "updated": "2021-06-22T07:55:07.699+0000",
                    "started": "2021-06-22T07:55:07.699+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "613165",
                    "issueId": "13384195"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 5400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@61da9be4[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5449c7e6[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6f0ea7e2[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@75622b12[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2ae19cea[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@e2e28e[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1ac964c7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@7e97e637[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@583723c3[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@4fd65cd9[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1e68f6b8[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@5f0f1d1c[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 5400,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Jun 21 19:09:23 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-06-21T19:09:23.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-13097/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2021-06-16T16:01:06.000+0000",
        "updated": "2021-06-22T07:55:08.000+0000",
        "timeoriginalestimate": null,
        "description": "In cases such as ARROW-13025 it's advantageous to avoid boilerplate when dealing with objects which are basic structs of data members. A simple reflection utility (get/set the value of a data member, print the name of a member to string) would allow writing functionality generically in terms of a tuple of properties, greatly reducing boilerplate.\r\n\r\nSee a sketch of one such utility here https://gist.github.com/bkietz/7899f477e86df49f21ab17201c518d74",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "1.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 5400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Provide a simple reflection utility for {{struct}}s",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13384195/comment/17366796",
                    "id": "17366796",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
                        "name": "bkietz",
                        "key": "bkietz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
                        },
                        "displayName": "Ben Kietzman",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 10551\n[https://github.com/apache/arrow/pull/10551]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
                        "name": "bkietz",
                        "key": "bkietz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
                        },
                        "displayName": "Ben Kietzman",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-06-21T19:09:23.394+0000",
                    "updated": "2021-06-21T19:09:23.394+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0s0k8:",
        "customfield_12314139": null
    }
}