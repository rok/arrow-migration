{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13383738",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13383738",
    "key": "ARROW-13072",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12349983",
                "id": "12349983",
                "description": "",
                "name": "5.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-07-28"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12617342",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12617342",
                "type": {
                    "id": "12310460",
                    "name": "Child-Issue",
                    "inward": "is a child of",
                    "outward": "is a parent of",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310460"
                },
                "inwardIssue": {
                    "id": "13377986",
                    "key": "ARROW-12748",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377986",
                    "fields": {
                        "summary": "[C++] Arithmetic kernels for numeric arrays",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
            "name": "lidavidm",
            "key": "lidavidm",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "David Li",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
            "name": "lidavidm",
            "key": "lidavidm",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "David Li",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
            "name": "lidavidm",
            "key": "lidavidm",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "David Li",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 15600,
            "total": 15600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 15600,
            "total": 15600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-13072/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 26,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13383738/worklog/610890",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm opened a new pull request #10530:\nURL: https://github.com/apache/arrow/pull/10530\n\n\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-14T20:07:04.704+0000",
                    "updated": "2021-06-14T20:07:04.704+0000",
                    "started": "2021-06-14T20:07:04.704+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "610890",
                    "issueId": "13383738"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13383738/worklog/610891",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #10530:\nURL: https://github.com/apache/arrow/pull/10530#issuecomment-860958622\n\n\n   https://issues.apache.org/jira/browse/ARROW-13072\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-14T20:07:18.384+0000",
                    "updated": "2021-06-14T20:07:18.384+0000",
                    "started": "2021-06-14T20:07:18.384+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "610891",
                    "issueId": "13383738"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13383738/worklog/611111",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 commented on a change in pull request #10530:\nURL: https://github.com/apache/arrow/pull/10530#discussion_r651405645\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -397,6 +397,130 @@ struct PowerChecked {\n   }\n };\n \n+// Bitwise operations\n+\n+struct BitWiseNot {\n+  template <typename T, typename Arg>\n+  static T Call(KernelContext*, Arg arg, Status*) {\n+    return ~arg;\n+  }\n+};\n+\n+struct BitWiseAnd {\n+  template <typename T, typename Arg0, typename Arg1>\n+  static T Call(KernelContext*, Arg0 lhs, Arg1 rhs, Status*) {\n+    return lhs & rhs;\n+  }\n+};\n+\n+struct BitWiseOr {\n+  template <typename T, typename Arg0, typename Arg1>\n+  static T Call(KernelContext*, Arg0 lhs, Arg1 rhs, Status*) {\n+    return lhs | rhs;\n+  }\n+};\n+\n+struct BitWiseXor {\n+  template <typename T, typename Arg0, typename Arg1>\n+  static T Call(KernelContext*, Arg0 lhs, Arg1 rhs, Status*) {\n+    return lhs ^ rhs;\n+  }\n+};\n+\n+struct ShiftLeftLogical {\n+  template <typename T, typename Arg0, typename Arg1>\n+  static T Call(KernelContext*, Arg0 lhs, Arg1 rhs, Status*) {\n+    static_assert(std::is_same<T, Arg0>::value, \"\");\n+    return lhs << rhs;\n+  }\n+};\n+\n+// See SEI CERT C Coding Standard rule INT34-C\n+struct ShiftLeftLogicalChecked {\n+  template <typename T, typename Arg0, typename Arg1>\n+  static enable_if_unsigned_integer<T> Call(KernelContext*, Arg0 lhs, Arg1 rhs,\n+                                            Status* st) {\n+    static_assert(std::is_same<T, Arg0>::value, \"\");\n+    if (ARROW_PREDICT_FALSE(rhs < 0)) {\n+      *st = Status::Invalid(\"Both operands must be non-negative\");\n+      return lhs;\n+    }\n+    if (ARROW_PREDICT_FALSE(rhs >= std::numeric_limits<Arg0>::digits)) {\n+      *st = Status::Invalid(\"overflow\");\n+      return lhs;\n+    }\n+    return lhs << rhs;\n+  }\n+\n+  template <typename T, typename Arg0, typename Arg1>\n+  static enable_if_signed_integer<T> Call(KernelContext*, Arg0 lhs, Arg1 rhs,\n+                                          Status* st) {\n+    static_assert(std::is_same<T, Arg0>::value, \"\");\n+    if (ARROW_PREDICT_FALSE(lhs < 0 || rhs < 0)) {\n+      *st = Status::Invalid(\"Both operands must be non-negative\");\n+      return lhs;\n+    }\n+    if (ARROW_PREDICT_FALSE(rhs >= std::numeric_limits<Arg0>::digits)) {\n+      *st = Status::Invalid(\"overflow\");\n+      return lhs;\n+    }\n+    if (ARROW_PREDICT_FALSE(lhs > (std::numeric_limits<Arg0>::max() >> rhs))) {\n+      *st = Status::Invalid(\"overflow\");\n+      return lhs;\n+    }\n+    return lhs << rhs;\n+  }\n+};\n+\n+struct ShiftRightArithmetic {\n+  template <typename T, typename Arg0, typename Arg1>\n+  static T Call(KernelContext*, Arg0 lhs, Arg1 rhs, Status*) {\n+    using Signed = typename std::make_signed<Arg0>::type;\n+    static_assert(std::is_same<T, Arg0>::value, \"\");\n+    // N.B. this is implementation-defined but GCC and MSVC document\n+    // this as arithmetic right shift. References:\n+    // https://gcc.gnu.org/onlinedocs/gcc/Integers-implementation.html#Integers-implementation\n+    // https://docs.microsoft.com/en-us/cpp/cpp/left-shift-and-right-shift-operators-input-and-output?view=msvc-160#right-shifts\n+    // Clang doesn't document their behavior.\n+    return static_cast<T>(static_cast<Signed>(lhs) >> rhs);\n\nReview comment:\n       For unsigned char 128, arithmetic right shift 1 bit results to 192, looks a bit surprising.\r\n   Looks arithmetic right shift is more meaningful for signed integers, and logical right shift for unsigned integers.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -397,6 +397,130 @@ struct PowerChecked {\n   }\n };\n \n+// Bitwise operations\n+\n+struct BitWiseNot {\n+  template <typename T, typename Arg>\n+  static T Call(KernelContext*, Arg arg, Status*) {\n+    return ~arg;\n+  }\n+};\n+\n+struct BitWiseAnd {\n+  template <typename T, typename Arg0, typename Arg1>\n+  static T Call(KernelContext*, Arg0 lhs, Arg1 rhs, Status*) {\n+    return lhs & rhs;\n+  }\n+};\n+\n+struct BitWiseOr {\n+  template <typename T, typename Arg0, typename Arg1>\n+  static T Call(KernelContext*, Arg0 lhs, Arg1 rhs, Status*) {\n+    return lhs | rhs;\n+  }\n+};\n+\n+struct BitWiseXor {\n+  template <typename T, typename Arg0, typename Arg1>\n+  static T Call(KernelContext*, Arg0 lhs, Arg1 rhs, Status*) {\n+    return lhs ^ rhs;\n+  }\n+};\n+\n+struct ShiftLeftLogical {\n+  template <typename T, typename Arg0, typename Arg1>\n+  static T Call(KernelContext*, Arg0 lhs, Arg1 rhs, Status*) {\n+    static_assert(std::is_same<T, Arg0>::value, \"\");\n+    return lhs << rhs;\n\nReview comment:\n       Though it's not a checked kernel, I think it's still necessary to make sure no UB can happen.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-15T02:47:04.244+0000",
                    "updated": "2021-06-15T02:47:04.244+0000",
                    "started": "2021-06-15T02:47:04.244+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "611111",
                    "issueId": "13383738"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13383738/worklog/611219",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #10530:\nURL: https://github.com/apache/arrow/pull/10530#discussion_r651638280\n\n\n\n##########\nFile path: cpp/src/arrow/compute/api_scalar.h\n##########\n@@ -279,6 +279,45 @@ Result<Datum> Power(const Datum& left, const Datum& right,\n                     ArithmeticOptions options = ArithmeticOptions(),\n                     ExecContext* ctx = NULLPTR);\n \n+/// \\brief Left shift (logical) the left array by the right array. Array values must\n\nReview comment:\n       Since logical and arithmetic left shift are the same, is it useful to precise which one this is?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-15T09:59:02.208+0000",
                    "updated": "2021-06-15T09:59:02.208+0000",
                    "started": "2021-06-15T09:59:02.207+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "611219",
                    "issueId": "13383738"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13383738/worklog/611221",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #10530:\nURL: https://github.com/apache/arrow/pull/10530#discussion_r651641148\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -397,6 +397,130 @@ struct PowerChecked {\n   }\n };\n \n+// Bitwise operations\n+\n+struct BitWiseNot {\n+  template <typename T, typename Arg>\n+  static T Call(KernelContext*, Arg arg, Status*) {\n+    return ~arg;\n+  }\n+};\n+\n+struct BitWiseAnd {\n+  template <typename T, typename Arg0, typename Arg1>\n+  static T Call(KernelContext*, Arg0 lhs, Arg1 rhs, Status*) {\n+    return lhs & rhs;\n+  }\n+};\n+\n+struct BitWiseOr {\n+  template <typename T, typename Arg0, typename Arg1>\n+  static T Call(KernelContext*, Arg0 lhs, Arg1 rhs, Status*) {\n+    return lhs | rhs;\n+  }\n+};\n+\n+struct BitWiseXor {\n+  template <typename T, typename Arg0, typename Arg1>\n+  static T Call(KernelContext*, Arg0 lhs, Arg1 rhs, Status*) {\n+    return lhs ^ rhs;\n+  }\n+};\n+\n+struct ShiftLeftLogical {\n+  template <typename T, typename Arg0, typename Arg1>\n+  static T Call(KernelContext*, Arg0 lhs, Arg1 rhs, Status*) {\n+    static_assert(std::is_same<T, Arg0>::value, \"\");\n+    return lhs << rhs;\n+  }\n+};\n+\n+// See SEI CERT C Coding Standard rule INT34-C\n+struct ShiftLeftLogicalChecked {\n+  template <typename T, typename Arg0, typename Arg1>\n+  static enable_if_unsigned_integer<T> Call(KernelContext*, Arg0 lhs, Arg1 rhs,\n+                                            Status* st) {\n+    static_assert(std::is_same<T, Arg0>::value, \"\");\n+    if (ARROW_PREDICT_FALSE(rhs < 0)) {\n+      *st = Status::Invalid(\"Both operands must be non-negative\");\n+      return lhs;\n+    }\n+    if (ARROW_PREDICT_FALSE(rhs >= std::numeric_limits<Arg0>::digits)) {\n+      *st = Status::Invalid(\"overflow\");\n+      return lhs;\n+    }\n+    return lhs << rhs;\n+  }\n+\n+  template <typename T, typename Arg0, typename Arg1>\n+  static enable_if_signed_integer<T> Call(KernelContext*, Arg0 lhs, Arg1 rhs,\n+                                          Status* st) {\n+    static_assert(std::is_same<T, Arg0>::value, \"\");\n+    if (ARROW_PREDICT_FALSE(lhs < 0 || rhs < 0)) {\n+      *st = Status::Invalid(\"Both operands must be non-negative\");\n\nReview comment:\n       I don't understand why `lhs` cannot be negative? Left-shifting a negative number works fine (unless the value overflows, of course).\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-15T10:02:24.205+0000",
                    "updated": "2021-06-15T10:02:24.205+0000",
                    "started": "2021-06-15T10:02:24.205+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "611221",
                    "issueId": "13383738"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13383738/worklog/611222",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #10530:\nURL: https://github.com/apache/arrow/pull/10530#discussion_r651641754\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -397,6 +397,130 @@ struct PowerChecked {\n   }\n };\n \n+// Bitwise operations\n+\n+struct BitWiseNot {\n+  template <typename T, typename Arg>\n+  static T Call(KernelContext*, Arg arg, Status*) {\n+    return ~arg;\n+  }\n+};\n+\n+struct BitWiseAnd {\n+  template <typename T, typename Arg0, typename Arg1>\n+  static T Call(KernelContext*, Arg0 lhs, Arg1 rhs, Status*) {\n+    return lhs & rhs;\n+  }\n+};\n+\n+struct BitWiseOr {\n+  template <typename T, typename Arg0, typename Arg1>\n+  static T Call(KernelContext*, Arg0 lhs, Arg1 rhs, Status*) {\n+    return lhs | rhs;\n+  }\n+};\n+\n+struct BitWiseXor {\n+  template <typename T, typename Arg0, typename Arg1>\n+  static T Call(KernelContext*, Arg0 lhs, Arg1 rhs, Status*) {\n+    return lhs ^ rhs;\n+  }\n+};\n+\n+struct ShiftLeftLogical {\n+  template <typename T, typename Arg0, typename Arg1>\n+  static T Call(KernelContext*, Arg0 lhs, Arg1 rhs, Status*) {\n+    static_assert(std::is_same<T, Arg0>::value, \"\");\n+    return lhs << rhs;\n+  }\n+};\n+\n+// See SEI CERT C Coding Standard rule INT34-C\n+struct ShiftLeftLogicalChecked {\n+  template <typename T, typename Arg0, typename Arg1>\n+  static enable_if_unsigned_integer<T> Call(KernelContext*, Arg0 lhs, Arg1 rhs,\n+                                            Status* st) {\n+    static_assert(std::is_same<T, Arg0>::value, \"\");\n+    if (ARROW_PREDICT_FALSE(rhs < 0)) {\n+      *st = Status::Invalid(\"Both operands must be non-negative\");\n+      return lhs;\n+    }\n+    if (ARROW_PREDICT_FALSE(rhs >= std::numeric_limits<Arg0>::digits)) {\n+      *st = Status::Invalid(\"overflow\");\n+      return lhs;\n+    }\n+    return lhs << rhs;\n+  }\n+\n+  template <typename T, typename Arg0, typename Arg1>\n+  static enable_if_signed_integer<T> Call(KernelContext*, Arg0 lhs, Arg1 rhs,\n+                                          Status* st) {\n+    static_assert(std::is_same<T, Arg0>::value, \"\");\n+    if (ARROW_PREDICT_FALSE(lhs < 0 || rhs < 0)) {\n+      *st = Status::Invalid(\"Both operands must be non-negative\");\n+      return lhs;\n+    }\n+    if (ARROW_PREDICT_FALSE(rhs >= std::numeric_limits<Arg0>::digits)) {\n+      *st = Status::Invalid(\"overflow\");\n+      return lhs;\n+    }\n+    if (ARROW_PREDICT_FALSE(lhs > (std::numeric_limits<Arg0>::max() >> rhs))) {\n+      *st = Status::Invalid(\"overflow\");\n+      return lhs;\n+    }\n+    return lhs << rhs;\n+  }\n+};\n+\n+struct ShiftRightArithmetic {\n+  template <typename T, typename Arg0, typename Arg1>\n+  static T Call(KernelContext*, Arg0 lhs, Arg1 rhs, Status*) {\n+    using Signed = typename std::make_signed<Arg0>::type;\n+    static_assert(std::is_same<T, Arg0>::value, \"\");\n+    // N.B. this is implementation-defined but GCC and MSVC document\n+    // this as arithmetic right shift. References:\n+    // https://gcc.gnu.org/onlinedocs/gcc/Integers-implementation.html#Integers-implementation\n+    // https://docs.microsoft.com/en-us/cpp/cpp/left-shift-and-right-shift-operators-input-and-output?view=msvc-160#right-shifts\n+    // Clang doesn't document their behavior.\n+    return static_cast<T>(static_cast<Signed>(lhs) >> rhs);\n\nReview comment:\n       Agreed. I cannot understand the usefulness of this.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-15T10:03:20.483+0000",
                    "updated": "2021-06-15T10:03:20.483+0000",
                    "started": "2021-06-15T10:03:20.482+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "611222",
                    "issueId": "13383738"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13383738/worklog/611224",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #10530:\nURL: https://github.com/apache/arrow/pull/10530#discussion_r651642966\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic_test.cc\n##########\n@@ -299,6 +299,67 @@ class TestBinaryArithmeticUnsigned : public TestBinaryArithmeticIntegral<T> {};\n template <typename T>\n class TestBinaryArithmeticFloating : public TestBinaryArithmetic<T> {};\n \n+template <typename T>\n+class TestBitWiseArithmetic : public TestBase {\n+ protected:\n+  using ArrowType = T;\n+  using CType = typename ArrowType::c_type;\n+\n+  static std::shared_ptr<DataType> type_singleton() {\n+    return TypeTraits<ArrowType>::type_singleton();\n+  }\n+\n+  void AssertUnaryOp(const std::string& func, const std::vector<uint8_t>& args,\n+                     const std::vector<uint8_t>& expected) {\n+    auto input = ExpandByteArray(args);\n+    auto output = ExpandByteArray(expected);\n+    ASSERT_OK_AND_ASSIGN(Datum actual, CallFunction(func, {input}));\n+    ValidateAndAssertEqual(actual.make_array(), output);\n+    for (int64_t i = 0; i < output->length(); i++) {\n+      ASSERT_OK_AND_ASSIGN(Datum actual, CallFunction(func, {*input->GetScalar(i)}));\n+      const auto expected_scalar = *output->GetScalar(i);\n+      AssertScalarsEqual(*expected_scalar, *actual.scalar(), /*verbose=*/true);\n+    }\n+  }\n+\n+  void AssertBinaryOp(const std::string& func, const std::vector<uint8_t>& arg0,\n+                      const std::vector<uint8_t>& arg1,\n+                      const std::vector<uint8_t>& expected) {\n+    auto input0 = ExpandByteArray(arg0);\n+    auto input1 = ExpandByteArray(arg1);\n+    auto output = ExpandByteArray(expected);\n+    ASSERT_OK_AND_ASSIGN(Datum actual, CallFunction(func, {input0, input1}));\n+    ValidateAndAssertEqual(actual.make_array(), output);\n+    for (int64_t i = 0; i < output->length(); i++) {\n+      ASSERT_OK_AND_ASSIGN(Datum actual, CallFunction(func, {*input0->GetScalar(i),\n+                                                             *input1->GetScalar(i)}));\n+      const auto expected_scalar = *output->GetScalar(i);\n+      AssertScalarsEqual(*expected_scalar, *actual.scalar(), /*verbose=*/true);\n+    }\n+  }\n+\n+  // To make it easier to test different widths, tests give bytes which get repeated to\n+  // make an array of the actual type\n+  std::shared_ptr<Array> ExpandByteArray(const std::vector<uint8_t>& values) {\n+    constexpr size_t count = TypeTraits<ArrowType>::bytes_required(1);\n\nReview comment:\n       This is just `sizeof(CType)`?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-15T10:04:50.110+0000",
                    "updated": "2021-06-15T10:04:50.110+0000",
                    "started": "2021-06-15T10:04:50.109+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "611224",
                    "issueId": "13383738"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13383738/worklog/611226",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #10530:\nURL: https://github.com/apache/arrow/pull/10530#discussion_r651644229\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic_test.cc\n##########\n@@ -536,6 +707,57 @@ TYPED_TEST(TestBinaryArithmeticSigned, MulOverflowRaises) {\n   this->AssertBinop(Multiply, left, right, \"[2, null, null]\");\n }\n \n+TYPED_TEST(TestBinaryArithmeticSigned, ShiftLeftLogicalOverflowRaises) {\n\nReview comment:\n       From a code organization POV, I think it would be more helpful to gather all shift tests close to each other.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-15T10:06:37.156+0000",
                    "updated": "2021-06-15T10:06:37.156+0000",
                    "started": "2021-06-15T10:06:37.156+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "611226",
                    "issueId": "13383738"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13383738/worklog/611273",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #10530:\nURL: https://github.com/apache/arrow/pull/10530#discussion_r651715368\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -397,6 +397,130 @@ struct PowerChecked {\n   }\n };\n \n+// Bitwise operations\n+\n+struct BitWiseNot {\n+  template <typename T, typename Arg>\n+  static T Call(KernelContext*, Arg arg, Status*) {\n+    return ~arg;\n+  }\n+};\n+\n+struct BitWiseAnd {\n+  template <typename T, typename Arg0, typename Arg1>\n+  static T Call(KernelContext*, Arg0 lhs, Arg1 rhs, Status*) {\n+    return lhs & rhs;\n+  }\n+};\n+\n+struct BitWiseOr {\n+  template <typename T, typename Arg0, typename Arg1>\n+  static T Call(KernelContext*, Arg0 lhs, Arg1 rhs, Status*) {\n+    return lhs | rhs;\n+  }\n+};\n+\n+struct BitWiseXor {\n+  template <typename T, typename Arg0, typename Arg1>\n+  static T Call(KernelContext*, Arg0 lhs, Arg1 rhs, Status*) {\n+    return lhs ^ rhs;\n+  }\n+};\n+\n+struct ShiftLeftLogical {\n+  template <typename T, typename Arg0, typename Arg1>\n+  static T Call(KernelContext*, Arg0 lhs, Arg1 rhs, Status*) {\n+    static_assert(std::is_same<T, Arg0>::value, \"\");\n+    return lhs << rhs;\n+  }\n+};\n+\n+// See SEI CERT C Coding Standard rule INT34-C\n+struct ShiftLeftLogicalChecked {\n+  template <typename T, typename Arg0, typename Arg1>\n+  static enable_if_unsigned_integer<T> Call(KernelContext*, Arg0 lhs, Arg1 rhs,\n+                                            Status* st) {\n+    static_assert(std::is_same<T, Arg0>::value, \"\");\n+    if (ARROW_PREDICT_FALSE(rhs < 0)) {\n+      *st = Status::Invalid(\"Both operands must be non-negative\");\n+      return lhs;\n+    }\n+    if (ARROW_PREDICT_FALSE(rhs >= std::numeric_limits<Arg0>::digits)) {\n+      *st = Status::Invalid(\"overflow\");\n+      return lhs;\n+    }\n+    return lhs << rhs;\n+  }\n+\n+  template <typename T, typename Arg0, typename Arg1>\n+  static enable_if_signed_integer<T> Call(KernelContext*, Arg0 lhs, Arg1 rhs,\n+                                          Status* st) {\n+    static_assert(std::is_same<T, Arg0>::value, \"\");\n+    if (ARROW_PREDICT_FALSE(lhs < 0 || rhs < 0)) {\n+      *st = Status::Invalid(\"Both operands must be non-negative\");\n\nReview comment:\n       A left shift is undefined on a negative number.\r\n   \r\n   > if E1 has a signed type and non-negative value, and E1\u00d72^E2 is representable in the corresponding unsigned type of the result type, then that value, converted to the result type, is the resulting value; otherwise, the behavior is undefined\r\n   \r\n   [C++11 standard 5.8.2 (page 118)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3690.pdf) or see the [MSVC page](https://docs.microsoft.com/en-us/cpp/cpp/left-shift-and-right-shift-operators-input-and-output?view=msvc-160#left-shifts)\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -397,6 +397,130 @@ struct PowerChecked {\n   }\n };\n \n+// Bitwise operations\n+\n+struct BitWiseNot {\n+  template <typename T, typename Arg>\n+  static T Call(KernelContext*, Arg arg, Status*) {\n+    return ~arg;\n+  }\n+};\n+\n+struct BitWiseAnd {\n+  template <typename T, typename Arg0, typename Arg1>\n+  static T Call(KernelContext*, Arg0 lhs, Arg1 rhs, Status*) {\n+    return lhs & rhs;\n+  }\n+};\n+\n+struct BitWiseOr {\n+  template <typename T, typename Arg0, typename Arg1>\n+  static T Call(KernelContext*, Arg0 lhs, Arg1 rhs, Status*) {\n+    return lhs | rhs;\n+  }\n+};\n+\n+struct BitWiseXor {\n+  template <typename T, typename Arg0, typename Arg1>\n+  static T Call(KernelContext*, Arg0 lhs, Arg1 rhs, Status*) {\n+    return lhs ^ rhs;\n+  }\n+};\n+\n+struct ShiftLeftLogical {\n+  template <typename T, typename Arg0, typename Arg1>\n+  static T Call(KernelContext*, Arg0 lhs, Arg1 rhs, Status*) {\n+    static_assert(std::is_same<T, Arg0>::value, \"\");\n+    return lhs << rhs;\n+  }\n+};\n+\n+// See SEI CERT C Coding Standard rule INT34-C\n+struct ShiftLeftLogicalChecked {\n+  template <typename T, typename Arg0, typename Arg1>\n+  static enable_if_unsigned_integer<T> Call(KernelContext*, Arg0 lhs, Arg1 rhs,\n+                                            Status* st) {\n+    static_assert(std::is_same<T, Arg0>::value, \"\");\n+    if (ARROW_PREDICT_FALSE(rhs < 0)) {\n+      *st = Status::Invalid(\"Both operands must be non-negative\");\n+      return lhs;\n+    }\n+    if (ARROW_PREDICT_FALSE(rhs >= std::numeric_limits<Arg0>::digits)) {\n+      *st = Status::Invalid(\"overflow\");\n+      return lhs;\n+    }\n+    return lhs << rhs;\n+  }\n+\n+  template <typename T, typename Arg0, typename Arg1>\n+  static enable_if_signed_integer<T> Call(KernelContext*, Arg0 lhs, Arg1 rhs,\n+                                          Status* st) {\n+    static_assert(std::is_same<T, Arg0>::value, \"\");\n+    if (ARROW_PREDICT_FALSE(lhs < 0 || rhs < 0)) {\n+      *st = Status::Invalid(\"Both operands must be non-negative\");\n+      return lhs;\n+    }\n+    if (ARROW_PREDICT_FALSE(rhs >= std::numeric_limits<Arg0>::digits)) {\n+      *st = Status::Invalid(\"overflow\");\n+      return lhs;\n+    }\n+    if (ARROW_PREDICT_FALSE(lhs > (std::numeric_limits<Arg0>::max() >> rhs))) {\n+      *st = Status::Invalid(\"overflow\");\n+      return lhs;\n+    }\n+    return lhs << rhs;\n+  }\n+};\n+\n+struct ShiftRightArithmetic {\n+  template <typename T, typename Arg0, typename Arg1>\n+  static T Call(KernelContext*, Arg0 lhs, Arg1 rhs, Status*) {\n+    using Signed = typename std::make_signed<Arg0>::type;\n+    static_assert(std::is_same<T, Arg0>::value, \"\");\n+    // N.B. this is implementation-defined but GCC and MSVC document\n+    // this as arithmetic right shift. References:\n+    // https://gcc.gnu.org/onlinedocs/gcc/Integers-implementation.html#Integers-implementation\n+    // https://docs.microsoft.com/en-us/cpp/cpp/left-shift-and-right-shift-operators-input-and-output?view=msvc-160#right-shifts\n+    // Clang doesn't document their behavior.\n+    return static_cast<T>(static_cast<Signed>(lhs) >> rhs);\n\nReview comment:\n       Fair. I wanted to have it explicit which type of shift was being done but I can let it instead depend on the signedness of the input and condense it into a single kernel.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -397,6 +397,130 @@ struct PowerChecked {\n   }\n };\n \n+// Bitwise operations\n+\n+struct BitWiseNot {\n+  template <typename T, typename Arg>\n+  static T Call(KernelContext*, Arg arg, Status*) {\n+    return ~arg;\n+  }\n+};\n+\n+struct BitWiseAnd {\n+  template <typename T, typename Arg0, typename Arg1>\n+  static T Call(KernelContext*, Arg0 lhs, Arg1 rhs, Status*) {\n+    return lhs & rhs;\n+  }\n+};\n+\n+struct BitWiseOr {\n+  template <typename T, typename Arg0, typename Arg1>\n+  static T Call(KernelContext*, Arg0 lhs, Arg1 rhs, Status*) {\n+    return lhs | rhs;\n+  }\n+};\n+\n+struct BitWiseXor {\n+  template <typename T, typename Arg0, typename Arg1>\n+  static T Call(KernelContext*, Arg0 lhs, Arg1 rhs, Status*) {\n+    return lhs ^ rhs;\n+  }\n+};\n+\n+struct ShiftLeftLogical {\n+  template <typename T, typename Arg0, typename Arg1>\n+  static T Call(KernelContext*, Arg0 lhs, Arg1 rhs, Status*) {\n+    static_assert(std::is_same<T, Arg0>::value, \"\");\n+    return lhs << rhs;\n\nReview comment:\n       Good point, will fix.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-15T11:55:12.995+0000",
                    "updated": "2021-06-15T11:55:12.995+0000",
                    "started": "2021-06-15T11:55:12.994+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "611273",
                    "issueId": "13383738"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13383738/worklog/611285",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #10530:\nURL: https://github.com/apache/arrow/pull/10530#discussion_r651735435\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -397,6 +397,130 @@ struct PowerChecked {\n   }\n };\n \n+// Bitwise operations\n+\n+struct BitWiseNot {\n+  template <typename T, typename Arg>\n+  static T Call(KernelContext*, Arg arg, Status*) {\n+    return ~arg;\n+  }\n+};\n+\n+struct BitWiseAnd {\n+  template <typename T, typename Arg0, typename Arg1>\n+  static T Call(KernelContext*, Arg0 lhs, Arg1 rhs, Status*) {\n+    return lhs & rhs;\n+  }\n+};\n+\n+struct BitWiseOr {\n+  template <typename T, typename Arg0, typename Arg1>\n+  static T Call(KernelContext*, Arg0 lhs, Arg1 rhs, Status*) {\n+    return lhs | rhs;\n+  }\n+};\n+\n+struct BitWiseXor {\n+  template <typename T, typename Arg0, typename Arg1>\n+  static T Call(KernelContext*, Arg0 lhs, Arg1 rhs, Status*) {\n+    return lhs ^ rhs;\n+  }\n+};\n+\n+struct ShiftLeftLogical {\n+  template <typename T, typename Arg0, typename Arg1>\n+  static T Call(KernelContext*, Arg0 lhs, Arg1 rhs, Status*) {\n+    static_assert(std::is_same<T, Arg0>::value, \"\");\n+    return lhs << rhs;\n+  }\n+};\n+\n+// See SEI CERT C Coding Standard rule INT34-C\n+struct ShiftLeftLogicalChecked {\n+  template <typename T, typename Arg0, typename Arg1>\n+  static enable_if_unsigned_integer<T> Call(KernelContext*, Arg0 lhs, Arg1 rhs,\n+                                            Status* st) {\n+    static_assert(std::is_same<T, Arg0>::value, \"\");\n+    if (ARROW_PREDICT_FALSE(rhs < 0)) {\n+      *st = Status::Invalid(\"Both operands must be non-negative\");\n+      return lhs;\n+    }\n+    if (ARROW_PREDICT_FALSE(rhs >= std::numeric_limits<Arg0>::digits)) {\n+      *st = Status::Invalid(\"overflow\");\n+      return lhs;\n+    }\n+    return lhs << rhs;\n+  }\n+\n+  template <typename T, typename Arg0, typename Arg1>\n+  static enable_if_signed_integer<T> Call(KernelContext*, Arg0 lhs, Arg1 rhs,\n+                                          Status* st) {\n+    static_assert(std::is_same<T, Arg0>::value, \"\");\n+    if (ARROW_PREDICT_FALSE(lhs < 0 || rhs < 0)) {\n+      *st = Status::Invalid(\"Both operands must be non-negative\");\n\nReview comment:\n       Yawn. The C++ spec is completely stupid on this (just like the C spec).\r\n   \r\n   Left-shifting of negative numbers is well-defined in Python:\r\n   ```python\r\n   >>> -5 << 1\r\n   -10\r\n   >>> -5 << 3\r\n   -40\r\n   ```\r\n   Also in Java, where the definition is based on two's complement representation:\r\n   https://docs.oracle.com/javase/specs/jls/se7/html/jls-15.html#jls-15.19\r\n   \r\n   The Rust reference doesn't say anything about left-shifting of negative numbers (either [here](https://doc.rust-lang.org/reference/expressions/operator-expr.html#arithmetic-and-logical-binary-operators) or [there](https://doc.rust-lang.org/reference/behavior-considered-undefined.html)), but a quick test seems to work.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-15T12:22:21.178+0000",
                    "updated": "2021-06-15T12:22:21.178+0000",
                    "started": "2021-06-15T12:22:21.178+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "611285",
                    "issueId": "13383738"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13383738/worklog/611397",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #10530:\nURL: https://github.com/apache/arrow/pull/10530#discussion_r651908502\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -397,6 +397,130 @@ struct PowerChecked {\n   }\n };\n \n+// Bitwise operations\n+\n+struct BitWiseNot {\n+  template <typename T, typename Arg>\n+  static T Call(KernelContext*, Arg arg, Status*) {\n+    return ~arg;\n+  }\n+};\n+\n+struct BitWiseAnd {\n+  template <typename T, typename Arg0, typename Arg1>\n+  static T Call(KernelContext*, Arg0 lhs, Arg1 rhs, Status*) {\n+    return lhs & rhs;\n+  }\n+};\n+\n+struct BitWiseOr {\n+  template <typename T, typename Arg0, typename Arg1>\n+  static T Call(KernelContext*, Arg0 lhs, Arg1 rhs, Status*) {\n+    return lhs | rhs;\n+  }\n+};\n+\n+struct BitWiseXor {\n+  template <typename T, typename Arg0, typename Arg1>\n+  static T Call(KernelContext*, Arg0 lhs, Arg1 rhs, Status*) {\n+    return lhs ^ rhs;\n+  }\n+};\n+\n+struct ShiftLeftLogical {\n+  template <typename T, typename Arg0, typename Arg1>\n+  static T Call(KernelContext*, Arg0 lhs, Arg1 rhs, Status*) {\n+    static_assert(std::is_same<T, Arg0>::value, \"\");\n+    return lhs << rhs;\n+  }\n+};\n+\n+// See SEI CERT C Coding Standard rule INT34-C\n+struct ShiftLeftLogicalChecked {\n+  template <typename T, typename Arg0, typename Arg1>\n+  static enable_if_unsigned_integer<T> Call(KernelContext*, Arg0 lhs, Arg1 rhs,\n+                                            Status* st) {\n+    static_assert(std::is_same<T, Arg0>::value, \"\");\n+    if (ARROW_PREDICT_FALSE(rhs < 0)) {\n+      *st = Status::Invalid(\"Both operands must be non-negative\");\n+      return lhs;\n+    }\n+    if (ARROW_PREDICT_FALSE(rhs >= std::numeric_limits<Arg0>::digits)) {\n+      *st = Status::Invalid(\"overflow\");\n+      return lhs;\n+    }\n+    return lhs << rhs;\n+  }\n+\n+  template <typename T, typename Arg0, typename Arg1>\n+  static enable_if_signed_integer<T> Call(KernelContext*, Arg0 lhs, Arg1 rhs,\n+                                          Status* st) {\n+    static_assert(std::is_same<T, Arg0>::value, \"\");\n+    if (ARROW_PREDICT_FALSE(lhs < 0 || rhs < 0)) {\n+      *st = Status::Invalid(\"Both operands must be non-negative\");\n\nReview comment:\n       Should we also explicitly mask the shift amount (as Java specifies, and as x86 does - ARM does not)? Then the only check would be effectively that the shift amount is not negative.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-15T15:30:29.317+0000",
                    "updated": "2021-06-15T15:30:29.317+0000",
                    "started": "2021-06-15T15:30:29.317+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "611397",
                    "issueId": "13383738"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13383738/worklog/611423",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #10530:\nURL: https://github.com/apache/arrow/pull/10530#discussion_r651942644\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -397,6 +397,130 @@ struct PowerChecked {\n   }\n };\n \n+// Bitwise operations\n+\n+struct BitWiseNot {\n+  template <typename T, typename Arg>\n+  static T Call(KernelContext*, Arg arg, Status*) {\n+    return ~arg;\n+  }\n+};\n+\n+struct BitWiseAnd {\n+  template <typename T, typename Arg0, typename Arg1>\n+  static T Call(KernelContext*, Arg0 lhs, Arg1 rhs, Status*) {\n+    return lhs & rhs;\n+  }\n+};\n+\n+struct BitWiseOr {\n+  template <typename T, typename Arg0, typename Arg1>\n+  static T Call(KernelContext*, Arg0 lhs, Arg1 rhs, Status*) {\n+    return lhs | rhs;\n+  }\n+};\n+\n+struct BitWiseXor {\n+  template <typename T, typename Arg0, typename Arg1>\n+  static T Call(KernelContext*, Arg0 lhs, Arg1 rhs, Status*) {\n+    return lhs ^ rhs;\n+  }\n+};\n+\n+struct ShiftLeftLogical {\n+  template <typename T, typename Arg0, typename Arg1>\n+  static T Call(KernelContext*, Arg0 lhs, Arg1 rhs, Status*) {\n+    static_assert(std::is_same<T, Arg0>::value, \"\");\n+    return lhs << rhs;\n+  }\n+};\n+\n+// See SEI CERT C Coding Standard rule INT34-C\n+struct ShiftLeftLogicalChecked {\n+  template <typename T, typename Arg0, typename Arg1>\n+  static enable_if_unsigned_integer<T> Call(KernelContext*, Arg0 lhs, Arg1 rhs,\n+                                            Status* st) {\n+    static_assert(std::is_same<T, Arg0>::value, \"\");\n+    if (ARROW_PREDICT_FALSE(rhs < 0)) {\n+      *st = Status::Invalid(\"Both operands must be non-negative\");\n+      return lhs;\n+    }\n+    if (ARROW_PREDICT_FALSE(rhs >= std::numeric_limits<Arg0>::digits)) {\n+      *st = Status::Invalid(\"overflow\");\n+      return lhs;\n+    }\n+    return lhs << rhs;\n+  }\n+\n+  template <typename T, typename Arg0, typename Arg1>\n+  static enable_if_signed_integer<T> Call(KernelContext*, Arg0 lhs, Arg1 rhs,\n+                                          Status* st) {\n+    static_assert(std::is_same<T, Arg0>::value, \"\");\n+    if (ARROW_PREDICT_FALSE(lhs < 0 || rhs < 0)) {\n+      *st = Status::Invalid(\"Both operands must be non-negative\");\n\nReview comment:\n       There seems be no consensus among SQL databases. Let's err on the side of caution and return an error if the shift value is out bounds (including negative).\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-15T16:10:27.754+0000",
                    "updated": "2021-06-15T16:10:27.754+0000",
                    "started": "2021-06-15T16:10:27.754+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "611423",
                    "issueId": "13383738"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13383738/worklog/613957",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #10530:\nURL: https://github.com/apache/arrow/pull/10530#discussion_r656975199\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -454,6 +454,114 @@ struct PowerChecked {\n   }\n };\n \n+// Bitwise operations\n+\n+struct BitWiseNot {\n+  template <typename T, typename Arg>\n+  static T Call(KernelContext*, Arg arg, Status*) {\n+    return ~arg;\n+  }\n+};\n+\n+struct BitWiseAnd {\n+  template <typename T, typename Arg0, typename Arg1>\n+  static T Call(KernelContext*, Arg0 lhs, Arg1 rhs, Status*) {\n+    return lhs & rhs;\n+  }\n+};\n+\n+struct BitWiseOr {\n+  template <typename T, typename Arg0, typename Arg1>\n+  static T Call(KernelContext*, Arg0 lhs, Arg1 rhs, Status*) {\n+    return lhs | rhs;\n+  }\n+};\n+\n+struct BitWiseXor {\n+  template <typename T, typename Arg0, typename Arg1>\n+  static T Call(KernelContext*, Arg0 lhs, Arg1 rhs, Status*) {\n+    return lhs ^ rhs;\n+  }\n+};\n+\n+struct ShiftLeft {\n+  template <typename T, typename Arg0, typename Arg1>\n+  static T Call(KernelContext*, Arg0 lhs, Arg1 rhs, Status*) {\n+    using Unsigned = typename std::make_unsigned<Arg0>::type;\n+    static_assert(std::is_same<T, Arg0>::value, \"\");\n+    if (ARROW_PREDICT_FALSE(rhs < 0 || rhs >= std::numeric_limits<Arg0>::digits)) {\n+      return lhs;\n+    }\n+    return static_cast<T>(static_cast<Unsigned>(lhs) << static_cast<Unsigned>(rhs));\n+  }\n+};\n+\n+// See SEI CERT C Coding Standard rule INT34-C\n+struct ShiftLeftChecked {\n+  template <typename T, typename Arg0, typename Arg1>\n+  static enable_if_unsigned_integer<T> Call(KernelContext*, Arg0 lhs, Arg1 rhs,\n+                                            Status* st) {\n+    static_assert(std::is_same<T, Arg0>::value, \"\");\n+    if (ARROW_PREDICT_FALSE(rhs < 0)) {\n+      *st = Status::Invalid(\"shift must be non-negative\");\n+      return lhs;\n+    }\n+    if (ARROW_PREDICT_FALSE(rhs >= std::numeric_limits<Arg0>::digits)) {\n+      *st = Status::Invalid(\"overflow\");\n\nReview comment:\n       Can you make the error message more precise? A priori, it's not obvious which argument overflows.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-23T10:43:35.275+0000",
                    "updated": "2021-06-23T10:43:35.275+0000",
                    "started": "2021-06-23T10:43:35.274+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "613957",
                    "issueId": "13383738"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13383738/worklog/613958",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #10530:\nURL: https://github.com/apache/arrow/pull/10530#discussion_r656976462\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -820,6 +998,58 @@ const FunctionDoc pow_checked_doc{\n     (\"An error is returned when integer to negative integer power is encountered,\\n\"\n      \"or integer overflow is encountered.\"),\n     {\"base\", \"exponent\"}};\n+\n+const FunctionDoc bit_wise_not_doc{\n+    \"Bit-wise negate the arguments element-wise\", (\"This function never fails.\"), {\"x\"}};\n\nReview comment:\n       Is there any point in mentioning that the function never fails? This is true of several other functions as well.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-23T10:45:38.539+0000",
                    "updated": "2021-06-23T10:45:38.539+0000",
                    "started": "2021-06-23T10:45:38.539+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "613958",
                    "issueId": "13383738"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13383738/worklog/613960",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #10530:\nURL: https://github.com/apache/arrow/pull/10530#discussion_r656977485\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -454,6 +454,114 @@ struct PowerChecked {\n   }\n };\n \n+// Bitwise operations\n+\n+struct BitWiseNot {\n+  template <typename T, typename Arg>\n+  static T Call(KernelContext*, Arg arg, Status*) {\n+    return ~arg;\n+  }\n+};\n+\n+struct BitWiseAnd {\n+  template <typename T, typename Arg0, typename Arg1>\n+  static T Call(KernelContext*, Arg0 lhs, Arg1 rhs, Status*) {\n+    return lhs & rhs;\n+  }\n+};\n+\n+struct BitWiseOr {\n+  template <typename T, typename Arg0, typename Arg1>\n+  static T Call(KernelContext*, Arg0 lhs, Arg1 rhs, Status*) {\n+    return lhs | rhs;\n+  }\n+};\n+\n+struct BitWiseXor {\n+  template <typename T, typename Arg0, typename Arg1>\n+  static T Call(KernelContext*, Arg0 lhs, Arg1 rhs, Status*) {\n+    return lhs ^ rhs;\n+  }\n+};\n+\n+struct ShiftLeft {\n+  template <typename T, typename Arg0, typename Arg1>\n+  static T Call(KernelContext*, Arg0 lhs, Arg1 rhs, Status*) {\n+    using Unsigned = typename std::make_unsigned<Arg0>::type;\n+    static_assert(std::is_same<T, Arg0>::value, \"\");\n+    if (ARROW_PREDICT_FALSE(rhs < 0 || rhs >= std::numeric_limits<Arg0>::digits)) {\n+      return lhs;\n+    }\n+    return static_cast<T>(static_cast<Unsigned>(lhs) << static_cast<Unsigned>(rhs));\n+  }\n+};\n+\n+// See SEI CERT C Coding Standard rule INT34-C\n+struct ShiftLeftChecked {\n+  template <typename T, typename Arg0, typename Arg1>\n+  static enable_if_unsigned_integer<T> Call(KernelContext*, Arg0 lhs, Arg1 rhs,\n+                                            Status* st) {\n+    static_assert(std::is_same<T, Arg0>::value, \"\");\n+    if (ARROW_PREDICT_FALSE(rhs < 0)) {\n+      *st = Status::Invalid(\"shift must be non-negative\");\n+      return lhs;\n+    }\n+    if (ARROW_PREDICT_FALSE(rhs >= std::numeric_limits<Arg0>::digits)) {\n+      *st = Status::Invalid(\"overflow\");\n+      return lhs;\n+    }\n+    return lhs << rhs;\n\nReview comment:\n       It's a bit weird not to check for overflow here. Is it easily doable? (perhaps by checking that `(lhs << rhs) >> rhs == lhs`?)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-23T10:47:13.410+0000",
                    "updated": "2021-06-23T10:47:13.410+0000",
                    "started": "2021-06-23T10:47:13.410+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "613960",
                    "issueId": "13383738"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13383738/worklog/613992",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #10530:\nURL: https://github.com/apache/arrow/pull/10530#discussion_r657032193\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -454,6 +454,114 @@ struct PowerChecked {\n   }\n };\n \n+// Bitwise operations\n+\n+struct BitWiseNot {\n+  template <typename T, typename Arg>\n+  static T Call(KernelContext*, Arg arg, Status*) {\n+    return ~arg;\n+  }\n+};\n+\n+struct BitWiseAnd {\n+  template <typename T, typename Arg0, typename Arg1>\n+  static T Call(KernelContext*, Arg0 lhs, Arg1 rhs, Status*) {\n+    return lhs & rhs;\n+  }\n+};\n+\n+struct BitWiseOr {\n+  template <typename T, typename Arg0, typename Arg1>\n+  static T Call(KernelContext*, Arg0 lhs, Arg1 rhs, Status*) {\n+    return lhs | rhs;\n+  }\n+};\n+\n+struct BitWiseXor {\n+  template <typename T, typename Arg0, typename Arg1>\n+  static T Call(KernelContext*, Arg0 lhs, Arg1 rhs, Status*) {\n+    return lhs ^ rhs;\n+  }\n+};\n+\n+struct ShiftLeft {\n+  template <typename T, typename Arg0, typename Arg1>\n+  static T Call(KernelContext*, Arg0 lhs, Arg1 rhs, Status*) {\n+    using Unsigned = typename std::make_unsigned<Arg0>::type;\n+    static_assert(std::is_same<T, Arg0>::value, \"\");\n+    if (ARROW_PREDICT_FALSE(rhs < 0 || rhs >= std::numeric_limits<Arg0>::digits)) {\n+      return lhs;\n+    }\n+    return static_cast<T>(static_cast<Unsigned>(lhs) << static_cast<Unsigned>(rhs));\n+  }\n+};\n+\n+// See SEI CERT C Coding Standard rule INT34-C\n+struct ShiftLeftChecked {\n+  template <typename T, typename Arg0, typename Arg1>\n+  static enable_if_unsigned_integer<T> Call(KernelContext*, Arg0 lhs, Arg1 rhs,\n+                                            Status* st) {\n+    static_assert(std::is_same<T, Arg0>::value, \"\");\n+    if (ARROW_PREDICT_FALSE(rhs < 0)) {\n+      *st = Status::Invalid(\"shift must be non-negative\");\n+      return lhs;\n+    }\n+    if (ARROW_PREDICT_FALSE(rhs >= std::numeric_limits<Arg0>::digits)) {\n+      *st = Status::Invalid(\"overflow\");\n+      return lhs;\n+    }\n+    return lhs << rhs;\n\nReview comment:\n       I thought for shifts, usually it's desired to take the remainder if there would be overflow? Though [Wikipedia actually differentiates between arithmetic and logical left shift](https://en.wikipedia.org/wiki/Arithmetic_shift#Equivalence_of_arithmetic_and_logical_left_shifts_and_multiplication) here: the former raises overflow errors, the latter returns the modulo.\r\n   \r\n   (Also, I think it's just sufficient to check that (lhs << rhs) < lhs.)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-23T12:10:53.641+0000",
                    "updated": "2021-06-23T12:10:53.641+0000",
                    "started": "2021-06-23T12:10:53.641+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "613992",
                    "issueId": "13383738"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13383738/worklog/614002",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #10530:\nURL: https://github.com/apache/arrow/pull/10530#discussion_r657046638\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -454,6 +454,114 @@ struct PowerChecked {\n   }\n };\n \n+// Bitwise operations\n+\n+struct BitWiseNot {\n+  template <typename T, typename Arg>\n+  static T Call(KernelContext*, Arg arg, Status*) {\n+    return ~arg;\n+  }\n+};\n+\n+struct BitWiseAnd {\n+  template <typename T, typename Arg0, typename Arg1>\n+  static T Call(KernelContext*, Arg0 lhs, Arg1 rhs, Status*) {\n+    return lhs & rhs;\n+  }\n+};\n+\n+struct BitWiseOr {\n+  template <typename T, typename Arg0, typename Arg1>\n+  static T Call(KernelContext*, Arg0 lhs, Arg1 rhs, Status*) {\n+    return lhs | rhs;\n+  }\n+};\n+\n+struct BitWiseXor {\n+  template <typename T, typename Arg0, typename Arg1>\n+  static T Call(KernelContext*, Arg0 lhs, Arg1 rhs, Status*) {\n+    return lhs ^ rhs;\n+  }\n+};\n+\n+struct ShiftLeft {\n+  template <typename T, typename Arg0, typename Arg1>\n+  static T Call(KernelContext*, Arg0 lhs, Arg1 rhs, Status*) {\n+    using Unsigned = typename std::make_unsigned<Arg0>::type;\n+    static_assert(std::is_same<T, Arg0>::value, \"\");\n+    if (ARROW_PREDICT_FALSE(rhs < 0 || rhs >= std::numeric_limits<Arg0>::digits)) {\n+      return lhs;\n+    }\n+    return static_cast<T>(static_cast<Unsigned>(lhs) << static_cast<Unsigned>(rhs));\n+  }\n+};\n+\n+// See SEI CERT C Coding Standard rule INT34-C\n+struct ShiftLeftChecked {\n+  template <typename T, typename Arg0, typename Arg1>\n+  static enable_if_unsigned_integer<T> Call(KernelContext*, Arg0 lhs, Arg1 rhs,\n+                                            Status* st) {\n+    static_assert(std::is_same<T, Arg0>::value, \"\");\n+    if (ARROW_PREDICT_FALSE(rhs < 0)) {\n+      *st = Status::Invalid(\"shift must be non-negative\");\n+      return lhs;\n+    }\n+    if (ARROW_PREDICT_FALSE(rhs >= std::numeric_limits<Arg0>::digits)) {\n+      *st = Status::Invalid(\"overflow\");\n+      return lhs;\n+    }\n+    return lhs << rhs;\n\nReview comment:\n       In which context do people want to do left or right shifts exactly? That doesn't sound like a common data analysis task. @ianmcook \r\n   \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-23T12:30:40.440+0000",
                    "updated": "2021-06-23T12:30:40.440+0000",
                    "started": "2021-06-23T12:30:40.440+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "614002",
                    "issueId": "13383738"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13383738/worklog/614003",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #10530:\nURL: https://github.com/apache/arrow/pull/10530#discussion_r657046931\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -454,6 +454,114 @@ struct PowerChecked {\n   }\n };\n \n+// Bitwise operations\n+\n+struct BitWiseNot {\n+  template <typename T, typename Arg>\n+  static T Call(KernelContext*, Arg arg, Status*) {\n+    return ~arg;\n+  }\n+};\n+\n+struct BitWiseAnd {\n+  template <typename T, typename Arg0, typename Arg1>\n+  static T Call(KernelContext*, Arg0 lhs, Arg1 rhs, Status*) {\n+    return lhs & rhs;\n+  }\n+};\n+\n+struct BitWiseOr {\n+  template <typename T, typename Arg0, typename Arg1>\n+  static T Call(KernelContext*, Arg0 lhs, Arg1 rhs, Status*) {\n+    return lhs | rhs;\n+  }\n+};\n+\n+struct BitWiseXor {\n+  template <typename T, typename Arg0, typename Arg1>\n+  static T Call(KernelContext*, Arg0 lhs, Arg1 rhs, Status*) {\n+    return lhs ^ rhs;\n+  }\n+};\n+\n+struct ShiftLeft {\n+  template <typename T, typename Arg0, typename Arg1>\n+  static T Call(KernelContext*, Arg0 lhs, Arg1 rhs, Status*) {\n+    using Unsigned = typename std::make_unsigned<Arg0>::type;\n+    static_assert(std::is_same<T, Arg0>::value, \"\");\n+    if (ARROW_PREDICT_FALSE(rhs < 0 || rhs >= std::numeric_limits<Arg0>::digits)) {\n+      return lhs;\n+    }\n+    return static_cast<T>(static_cast<Unsigned>(lhs) << static_cast<Unsigned>(rhs));\n+  }\n+};\n+\n+// See SEI CERT C Coding Standard rule INT34-C\n+struct ShiftLeftChecked {\n+  template <typename T, typename Arg0, typename Arg1>\n+  static enable_if_unsigned_integer<T> Call(KernelContext*, Arg0 lhs, Arg1 rhs,\n+                                            Status* st) {\n+    static_assert(std::is_same<T, Arg0>::value, \"\");\n+    if (ARROW_PREDICT_FALSE(rhs < 0)) {\n+      *st = Status::Invalid(\"shift must be non-negative\");\n+      return lhs;\n+    }\n+    if (ARROW_PREDICT_FALSE(rhs >= std::numeric_limits<Arg0>::digits)) {\n+      *st = Status::Invalid(\"overflow\");\n+      return lhs;\n+    }\n+    return lhs << rhs;\n\nReview comment:\n       > (Also, I think it's just sufficient to check that (lhs << rhs) < lhs.)\r\n   \r\n   I don't think so, for example:\r\n   ```python\r\n   >>> (36 << 4) & 255\r\n   64\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-23T12:30:53.810+0000",
                    "updated": "2021-06-23T12:30:53.810+0000",
                    "started": "2021-06-23T12:30:53.810+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "614003",
                    "issueId": "13383738"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13383738/worklog/614004",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #10530:\nURL: https://github.com/apache/arrow/pull/10530#discussion_r657032193\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -454,6 +454,114 @@ struct PowerChecked {\n   }\n };\n \n+// Bitwise operations\n+\n+struct BitWiseNot {\n+  template <typename T, typename Arg>\n+  static T Call(KernelContext*, Arg arg, Status*) {\n+    return ~arg;\n+  }\n+};\n+\n+struct BitWiseAnd {\n+  template <typename T, typename Arg0, typename Arg1>\n+  static T Call(KernelContext*, Arg0 lhs, Arg1 rhs, Status*) {\n+    return lhs & rhs;\n+  }\n+};\n+\n+struct BitWiseOr {\n+  template <typename T, typename Arg0, typename Arg1>\n+  static T Call(KernelContext*, Arg0 lhs, Arg1 rhs, Status*) {\n+    return lhs | rhs;\n+  }\n+};\n+\n+struct BitWiseXor {\n+  template <typename T, typename Arg0, typename Arg1>\n+  static T Call(KernelContext*, Arg0 lhs, Arg1 rhs, Status*) {\n+    return lhs ^ rhs;\n+  }\n+};\n+\n+struct ShiftLeft {\n+  template <typename T, typename Arg0, typename Arg1>\n+  static T Call(KernelContext*, Arg0 lhs, Arg1 rhs, Status*) {\n+    using Unsigned = typename std::make_unsigned<Arg0>::type;\n+    static_assert(std::is_same<T, Arg0>::value, \"\");\n+    if (ARROW_PREDICT_FALSE(rhs < 0 || rhs >= std::numeric_limits<Arg0>::digits)) {\n+      return lhs;\n+    }\n+    return static_cast<T>(static_cast<Unsigned>(lhs) << static_cast<Unsigned>(rhs));\n+  }\n+};\n+\n+// See SEI CERT C Coding Standard rule INT34-C\n+struct ShiftLeftChecked {\n+  template <typename T, typename Arg0, typename Arg1>\n+  static enable_if_unsigned_integer<T> Call(KernelContext*, Arg0 lhs, Arg1 rhs,\n+                                            Status* st) {\n+    static_assert(std::is_same<T, Arg0>::value, \"\");\n+    if (ARROW_PREDICT_FALSE(rhs < 0)) {\n+      *st = Status::Invalid(\"shift must be non-negative\");\n+      return lhs;\n+    }\n+    if (ARROW_PREDICT_FALSE(rhs >= std::numeric_limits<Arg0>::digits)) {\n+      *st = Status::Invalid(\"overflow\");\n+      return lhs;\n+    }\n+    return lhs << rhs;\n\nReview comment:\n       I thought for shifts, usually it's desired to take the remainder if there would be overflow? Though [Wikipedia actually differentiates between arithmetic and logical left shift](https://en.wikipedia.org/wiki/Arithmetic_shift#Equivalence_of_arithmetic_and_logical_left_shifts_and_multiplication) here: the former raises overflow errors, the latter returns the modulo.\r\n   \r\n   ~(Also, I think it's just sufficient to check that (lhs << rhs) < lhs.)~\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-23T12:32:28.409+0000",
                    "updated": "2021-06-23T12:32:28.409+0000",
                    "started": "2021-06-23T12:32:28.409+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "614004",
                    "issueId": "13383738"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13383738/worklog/614005",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #10530:\nURL: https://github.com/apache/arrow/pull/10530#discussion_r657049393\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -454,6 +454,114 @@ struct PowerChecked {\n   }\n };\n \n+// Bitwise operations\n+\n+struct BitWiseNot {\n+  template <typename T, typename Arg>\n+  static T Call(KernelContext*, Arg arg, Status*) {\n+    return ~arg;\n+  }\n+};\n+\n+struct BitWiseAnd {\n+  template <typename T, typename Arg0, typename Arg1>\n+  static T Call(KernelContext*, Arg0 lhs, Arg1 rhs, Status*) {\n+    return lhs & rhs;\n+  }\n+};\n+\n+struct BitWiseOr {\n+  template <typename T, typename Arg0, typename Arg1>\n+  static T Call(KernelContext*, Arg0 lhs, Arg1 rhs, Status*) {\n+    return lhs | rhs;\n+  }\n+};\n+\n+struct BitWiseXor {\n+  template <typename T, typename Arg0, typename Arg1>\n+  static T Call(KernelContext*, Arg0 lhs, Arg1 rhs, Status*) {\n+    return lhs ^ rhs;\n+  }\n+};\n+\n+struct ShiftLeft {\n+  template <typename T, typename Arg0, typename Arg1>\n+  static T Call(KernelContext*, Arg0 lhs, Arg1 rhs, Status*) {\n+    using Unsigned = typename std::make_unsigned<Arg0>::type;\n+    static_assert(std::is_same<T, Arg0>::value, \"\");\n+    if (ARROW_PREDICT_FALSE(rhs < 0 || rhs >= std::numeric_limits<Arg0>::digits)) {\n+      return lhs;\n+    }\n+    return static_cast<T>(static_cast<Unsigned>(lhs) << static_cast<Unsigned>(rhs));\n+  }\n+};\n+\n+// See SEI CERT C Coding Standard rule INT34-C\n+struct ShiftLeftChecked {\n+  template <typename T, typename Arg0, typename Arg1>\n+  static enable_if_unsigned_integer<T> Call(KernelContext*, Arg0 lhs, Arg1 rhs,\n+                                            Status* st) {\n+    static_assert(std::is_same<T, Arg0>::value, \"\");\n+    if (ARROW_PREDICT_FALSE(rhs < 0)) {\n+      *st = Status::Invalid(\"shift must be non-negative\");\n+      return lhs;\n+    }\n+    if (ARROW_PREDICT_FALSE(rhs >= std::numeric_limits<Arg0>::digits)) {\n+      *st = Status::Invalid(\"overflow\");\n+      return lhs;\n+    }\n+    return lhs << rhs;\n\nReview comment:\n       D'oh, fair enough.\r\n   \r\n   Looking at Postgres, the example they give just wraps around, at least: https://www.postgresql.org/docs/current/functions-bitstring.html\r\n   MSSQL/T-SQL don't support shifts, even.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-23T12:34:15.270+0000",
                    "updated": "2021-06-23T12:34:15.270+0000",
                    "started": "2021-06-23T12:34:15.270+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "614005",
                    "issueId": "13383738"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 15600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@5deb6850[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1b64b286[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7edab310[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@4014cecf[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@29bda202[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@7e7262de[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@559b1c33[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@331fd2f9[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7776cb2a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@1aff2388[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1788de60[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@5acd4e72[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 15600,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Jun 30 09:20:08 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-06-30T09:20:08.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-13072/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2021-06-14T14:24:36.000+0000",
        "updated": "2021-06-30T09:20:18.000+0000",
        "timeoriginalestimate": null,
        "description": "Implement bitwise operators (and/or/not/xor) and shifts.\r\n\r\nShifts will require some consideration with casting (e.g. we will not want to promote unsigned LHS to signed as that's a different operation - or, perhaps preferably, we should implement separate logical and arithmetic shift operators) and overflow",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "4h 20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 15600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Add bitwise arithmetic compute functions",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13383738/comment/17371914",
                    "id": "17371914",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 10530\n[https://github.com/apache/arrow/pull/10530]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2021-06-30T09:20:08.322+0000",
                    "updated": "2021-06-30T09:20:08.322+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0rxqw:",
        "customfield_12314139": null
    }
}