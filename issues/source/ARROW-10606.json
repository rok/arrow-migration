{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13340749",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13340749",
    "key": "ARROW-10606",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12349493",
                "id": "12349493",
                "description": "",
                "name": "4.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-04-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
            "name": "lidavidm",
            "key": "lidavidm",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "David Li",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield",
            "name": "emkornfield",
            "key": "emkornfield",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Micah Kornfield",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield",
            "name": "emkornfield",
            "key": "emkornfield",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Micah Kornfield",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 6000,
            "total": 6000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 6000,
            "total": 6000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10606/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 10,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13340749/worklog/568637",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm opened a new pull request #9751:\nURL: https://github.com/apache/arrow/pull/9751\n\n\n   This likely needs more testing, especially where I had to implement functionality in (Basic)Decimal256. Also, we may want to extend the scalar cast benchmarks to cover decimals. There's also potentially some redundancy to eliminate in the tests.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-18T21:35:30.430+0000",
                    "updated": "2021-03-18T21:35:30.430+0000",
                    "started": "2021-03-18T21:35:30.429+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "568637",
                    "issueId": "13340749"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13340749/worklog/568729",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #9751:\nURL: https://github.com/apache/arrow/pull/9751#issuecomment-802453914\n\n\n   https://issues.apache.org/jira/browse/ARROW-10606\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-19T01:48:46.477+0000",
                    "updated": "2021-03-19T01:48:46.477+0000",
                    "started": "2021-03-19T01:48:46.477+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "568729",
                    "issueId": "13340749"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13340749/worklog/569026",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #9751:\nURL: https://github.com/apache/arrow/pull/9751#discussion_r597862212\n\n\n\n##########\nFile path: cpp/src/arrow/util/decimal_test.cc\n##########\n@@ -590,13 +597,62 @@ TEST(TestDecimalFromRealFloat, LargeValues) {\n   // Test the entire float range\n   for (int32_t scale = -38; scale <= 38; ++scale) {\n     float real = std::pow(10.0f, static_cast<float>(scale));\n-    CheckDecimalFromRealIntegerString(real, 1, -scale, \"1\");\n+    CheckDecimalFromRealIntegerString<Decimal128>(real, 1, -scale, \"1\");\n\nReview comment:\n       Two things:\r\n   - This apparently fails on Windows MinGW32 due to precision issues.\r\n   - This didn't fail before - something changed. Possibly I do have to figure out how to use ASSERT_FLOAT_EQ/ASSERT_DOUBLE_EQ as appropriate.\n\n##########\nFile path: cpp/src/arrow/util/decimal.cc\n##########\n@@ -94,6 +94,43 @@ static constexpr double kDoublePowersOfTen[2 * 38 + 1] = {\n     1e17,  1e18,  1e19,  1e20,  1e21,  1e22,  1e23,  1e24,  1e25,  1e26,  1e27,\n     1e28,  1e29,  1e30,  1e31,  1e32,  1e33,  1e34,  1e35,  1e36,  1e37,  1e38};\n \n+static constexpr float kFloatPowersOfTen76[2 * 76 + 1] = {\n+    0,        0,        0,        0,        0,        0,        0,        0,\n+    0,        0,        0,        0,        0,        0,        0,        0,\n+    0,        0,        0,        0,        0,        0,        0,        0,\n+    0,        0,        0,        0,        0,        0,        0,        1e-45f,\n+    1e-44f,   1e-43f,   1e-42f,   1e-41f,   1e-40f,   1e-39f,   1e-38f,   1e-37f,\n+    1e-36f,   1e-35f,   1e-34f,   1e-33f,   1e-32f,   1e-31f,   1e-30f,   1e-29f,\n+    1e-28f,   1e-27f,   1e-26f,   1e-25f,   1e-24f,   1e-23f,   1e-22f,   1e-21f,\n+    1e-20f,   1e-19f,   1e-18f,   1e-17f,   1e-16f,   1e-15f,   1e-14f,   1e-13f,\n+    1e-12f,   1e-11f,   1e-10f,   1e-9f,    1e-8f,    1e-7f,    1e-6f,    1e-5f,\n+    1e-4f,    1e-3f,    1e-2f,    1e-1f,    1e0f,     1e1f,     1e2f,     1e3f,\n+    1e4f,     1e5f,     1e6f,     1e7f,     1e8f,     1e9f,     1e10f,    1e11f,\n+    1e12f,    1e13f,    1e14f,    1e15f,    1e16f,    1e17f,    1e18f,    1e19f,\n+    1e20f,    1e21f,    1e22f,    1e23f,    1e24f,    1e25f,    1e26f,    1e27f,\n+    1e28f,    1e29f,    1e30f,    1e31f,    1e32f,    1e33f,    1e34f,    1e35f,\n+    1e36f,    1e37f,    1e38f,    INFINITY, INFINITY, INFINITY, INFINITY, INFINITY,\n\nReview comment:\n       Looks like INFINITY is actually a double on the Windows R toolchain.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-19T17:37:01.836+0000",
                    "updated": "2021-03-19T17:37:01.836+0000",
                    "started": "2021-03-19T17:37:01.836+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "569026",
                    "issueId": "13340749"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13340749/worklog/569770",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #9751:\nURL: https://github.com/apache/arrow/pull/9751#issuecomment-804136514\n\n\n   CC @bkietz and @emkornfield.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-22T15:07:48.289+0000",
                    "updated": "2021-03-22T15:07:48.289+0000",
                    "started": "2021-03-22T15:07:48.288+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "569770",
                    "issueId": "13340749"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13340749/worklog/570513",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #9751:\nURL: https://github.com/apache/arrow/pull/9751#discussion_r599592899\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_numeric.cc\n##########\n@@ -606,6 +723,9 @@ std::shared_ptr<CastFunction> GetCastToDecimal128() {\n   // We resolve the output type of this kernel from the CastOptions\n   DCHECK_OK(\n       func->AddKernel(Type::DECIMAL128, {InputType(Type::DECIMAL128)}, sig_out_ty, exec));\n+  exec = CastFunctor<Decimal256Type, Decimal128Type>::Exec;\n+  DCHECK_OK(\n+      func->AddKernel(Type::DECIMAL128, {InputType(Type::DECIMAL256)}, sig_out_ty, exec));\n\nReview comment:\n       Should be `Type::DECIMAL256`?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_numeric.cc\n##########\n@@ -462,13 +506,80 @@ struct CastFunctor<Decimal128Type, Decimal128Type> {\n   }\n };\n \n+template <>\n+struct CastFunctor<Decimal256Type, Decimal128Type> {\n\nReview comment:\n       Isn't the `CastFunctor` signature `<Out, In>`? Here it seems you're implementing the converse (Decimal256 to Decimal128).\n\n##########\nFile path: cpp/src/arrow/util/decimal.cc\n##########\n@@ -764,6 +805,126 @@ Status Decimal256::ToArrowStatus(DecimalStatus dstatus) const {\n   return arrow::ToArrowStatus(dstatus, 256);\n }\n \n+namespace {\n+\n+template <typename Real, typename Derived>\n+struct Decimal256RealConversion {\n+  static Result<Decimal256> FromPositiveReal(Real real, int32_t precision,\n+                                             int32_t scale) {\n+    auto x = real;\n+    if (scale >= -76 && scale <= 76) {\n+      x *= Derived::powers_of_ten()[scale + 76];\n+    } else {\n+      x *= std::pow(static_cast<Real>(10), static_cast<Real>(scale));\n+    }\n+    x = std::nearbyint(x);\n+    const auto max_abs = Derived::powers_of_ten()[precision + 76];\n+    if (x <= -max_abs || x >= max_abs) {\n\nReview comment:\n       Shouldn't `x` be positive here? Is there a point in testing against `-max_abs`?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_numeric.cc\n##########\n@@ -617,6 +737,19 @@ std::shared_ptr<CastFunction> GetCastToDecimal256() {\n   // tracks full implementation.\n   AddCommonCasts(Type::DECIMAL256, sig_out_ty, func.get());\n \n+  // Cast from floating point\n+  DCHECK_OK(func->AddKernel(Type::FLOAT, {float32()}, sig_out_ty,\n+                            CastFunctor<Decimal256Type, FloatType>::Exec));\n+  DCHECK_OK(func->AddKernel(Type::DOUBLE, {float64()}, sig_out_ty,\n+                            CastFunctor<Decimal256Type, DoubleType>::Exec));\n+\n+  // Cast from other decimal\n+  auto exec = CastFunctor<Decimal128Type, Decimal256Type>::Exec;\n+  DCHECK_OK(\n+      func->AddKernel(Type::DECIMAL256, {InputType(Type::DECIMAL128)}, sig_out_ty, exec));\n\nReview comment:\n       Should be `Type::DECIMAL128`?\n\n##########\nFile path: cpp/src/arrow/util/decimal_test.cc\n##########\n@@ -590,13 +597,62 @@ TEST(TestDecimalFromRealFloat, LargeValues) {\n   // Test the entire float range\n   for (int32_t scale = -38; scale <= 38; ++scale) {\n     float real = std::pow(10.0f, static_cast<float>(scale));\n-    CheckDecimalFromRealIntegerString(real, 1, -scale, \"1\");\n+    CheckDecimalFromRealIntegerString<Decimal128>(real, 1, -scale, \"1\");\n+  }\n+  for (int32_t scale = -37; scale <= 36; ++scale) {\n+    float real = 123.f * std::pow(10.f, static_cast<float>(scale));\n+    CheckDecimalFromRealIntegerString<Decimal128>(real, 2, -scale - 1, \"12\");\n+    CheckDecimalFromRealIntegerString<Decimal128>(real, 3, -scale, \"123\");\n+    CheckDecimalFromRealIntegerString<Decimal128>(real, 4, -scale + 1, \"1230\");\n+  }\n+}\n+\n+// Same tests, repeated for Decimal256\n+class TestDecimal256FromRealFloat : public ::testing::TestWithParam<FromFloatTestParam> {\n+};\n+\n+TEST_P(TestDecimal256FromRealFloat, SuccessConversion) {\n+  const auto param = GetParam();\n+  CheckDecimalFromReal<Decimal256>(param.real, param.precision, param.scale,\n+                                   param.expected);\n+}\n+\n+// clang-format off\n+INSTANTIATE_TEST_SUITE_P(\n+    TestDecimal256FromRealFloat, TestDecimal256FromRealFloat,\n+    ::testing::Values(\n\nReview comment:\n       Since those are the same values as for Decimal128, factor them out in a global variable?\n\n##########\nFile path: cpp/src/arrow/util/decimal.cc\n##########\n@@ -94,6 +94,47 @@ static constexpr double kDoublePowersOfTen[2 * 38 + 1] = {\n     1e17,  1e18,  1e19,  1e20,  1e21,  1e22,  1e23,  1e24,  1e25,  1e26,  1e27,\n     1e28,  1e29,  1e30,  1e31,  1e32,  1e33,  1e34,  1e35,  1e36,  1e37,  1e38};\n \n+// On the Windows R toolchain, INFINITY is double type instead of float\n+static constexpr float kFloatInf = std::numeric_limits<float>::infinity();\n\nReview comment:\n       Is this used? You're still using `INFINITY` below.\n\n##########\nFile path: cpp/src/arrow/util/decimal.h\n##########\n@@ -250,12 +250,41 @@ class ARROW_EXPORT Decimal256 : public BasicDecimal256 {\n   /// \\return error status if the length is an invalid value\n   static Result<Decimal256> FromBigEndian(const uint8_t* data, int32_t length);\n \n+  static Result<Decimal256> FromReal(double real, int32_t precision, int32_t scale);\n+  static Result<Decimal256> FromReal(float real, int32_t precision, int32_t scale);\n+\n+  /// \\brief Convert to a floating-point number (scaled)\n\nReview comment:\n       Mention that the result can be an infinite in case of overflow?\n\n##########\nFile path: cpp/src/arrow/util/basic_decimal.h\n##########\n@@ -237,17 +240,30 @@ class ARROW_EXPORT BasicDecimal256 {\n     return little_endian_array_;\n   }\n \n+  /// \\brief Get the lowest bits of the two's complement representation of the number.\n+  inline constexpr uint64_t low_bits() const { return little_endian_array_[0]; }\n+\n   /// \\brief Return the raw bytes of the value in native-endian byte order.\n   std::array<uint8_t, 32> ToBytes() const;\n   void ToBytes(uint8_t* out) const;\n \n   /// \\brief Scale multiplier for given scale value.\n   static const BasicDecimal256& GetScaleMultiplier(int32_t scale);\n \n-  /// \\brief Convert BasicDecimal128 from one scale to another\n+  /// \\brief Convert BasicDecimal256 from one scale to another\n   DecimalStatus Rescale(int32_t original_scale, int32_t new_scale,\n                         BasicDecimal256* out) const;\n \n+  /// \\brief Scale up.\n+  BasicDecimal256 IncreaseScaleBy(int32_t increase_by) const;\n+\n+  /// \\brief Scale down.\n+  /// - If 'round' is true, the right-most digits are dropped and the result value is\n+  ///   rounded up (+1 for +ve, -1 for -ve) based on the value of the dropped digits\n\nReview comment:\n       Write \"positive\" and \"negative\" in full?\n\n##########\nFile path: cpp/src/arrow/util/decimal_test.cc\n##########\n@@ -728,72 +858,143 @@ TYPED_TEST_SUITE(TestDecimalToReal, RealTypes);\n TYPED_TEST(TestDecimalToReal, TestSuccess) { this->TestSuccess(); }\n \n // Custom test for Decimal128::ToReal<float>\n-class TestDecimalToRealFloat : public TestDecimalToReal<float> {};\n+class TestDecimalToRealFloat : public TestDecimalToReal<std::pair<Decimal128, float>> {};\n\nReview comment:\n       Rename to `TestDecimal128ToRealFloat`?\n\n##########\nFile path: cpp/src/arrow/util/decimal_test.cc\n##########\n@@ -605,7 +661,8 @@ class TestDecimalFromRealDouble : public ::testing::TestWithParam<FromDoubleTest\n \n\nReview comment:\n       Rename `TestDecimalFromRealDouble` to `TestDecimal128FromRealDouble`?\n\n##########\nFile path: cpp/src/arrow/util/decimal_test.cc\n##########\n@@ -728,72 +858,143 @@ TYPED_TEST_SUITE(TestDecimalToReal, RealTypes);\n TYPED_TEST(TestDecimalToReal, TestSuccess) { this->TestSuccess(); }\n \n // Custom test for Decimal128::ToReal<float>\n-class TestDecimalToRealFloat : public TestDecimalToReal<float> {};\n+class TestDecimalToRealFloat : public TestDecimalToReal<std::pair<Decimal128, float>> {};\n \n TEST_F(TestDecimalToRealFloat, LargeValues) {\n   // Note that exact comparisons would succeed on some platforms (Linux, macOS).\n   // Nevertheless, power-of-ten factors are not all exactly representable\n   // in binary floating point.\n   for (int32_t scale = -38; scale <= 38; scale++) {\n-    CheckFloatToRealApprox(\"1\", scale, Pow10(-scale));\n+    CheckDecimalToRealApprox<Decimal>(\"1\", scale, Pow10(-scale));\n   }\n   for (int32_t scale = -38; scale <= 36; scale++) {\n     const Real factor = static_cast<Real>(123);\n-    CheckFloatToRealApprox(\"123\", scale, factor * Pow10(-scale));\n+    CheckDecimalToRealApprox<Decimal>(\"123\", scale, factor * Pow10(-scale));\n   }\n }\n \n TEST_F(TestDecimalToRealFloat, Precision) {\n   // 2**63 + 2**40 (exactly representable in a float's 24 bits of precision)\n-  CheckDecimalToReal<float>(\"9223373136366403584\", 0, 9.223373e+18f);\n-  CheckDecimalToReal<float>(\"-9223373136366403584\", 0, -9.223373e+18f);\n+  CheckDecimalToReal<Decimal, Real>(\"9223373136366403584\", 0, 9.223373e+18f);\n+  CheckDecimalToReal<Decimal, Real>(\"-9223373136366403584\", 0, -9.223373e+18f);\n+  // 2**64 + 2**41 (exactly representable in a float)\n+  CheckDecimalToReal<Decimal, Real>(\"18446746272732807168\", 0, 1.8446746e+19f);\n+  CheckDecimalToReal<Decimal, Real>(\"-18446746272732807168\", 0, -1.8446746e+19f);\n+}\n+\n+// Same tests, repeated for Decimal256\n+class TestDecimal256ToRealFloat : public TestDecimalToReal<std::pair<Decimal256, float>> {\n+};\n+\n+TEST_F(TestDecimal256ToRealFloat, LargeValues) {\n+  // Note that exact comparisons would succeed on some platforms (Linux, macOS).\n+  // Nevertheless, power-of-ten factors are not all exactly representable\n+  // in binary floating point.\n+  for (int32_t scale = -76; scale <= 76; scale++) {\n+#ifdef _WIN32\n+    // MSVC gives pow(10.f, -45.f) == 0 even though 1e-45f is nonzero\n+    if (scale == 45) continue;\n+#endif\n+    CheckDecimalToRealApprox<Decimal>(\"1\", scale, Pow10(-scale));\n+    const Real factor = static_cast<Real>(123);\n+    CheckDecimalToRealApprox<Decimal>(\"123\", scale, factor * Pow10(-scale));\n+  }\n+}\n+\n+TEST_F(TestDecimal256ToRealFloat, Precision) {\n+  // 2**63 + 2**40 (exactly representable in a float's 24 bits of precision)\n+  CheckDecimalToReal<Decimal, Real>(\"9223373136366403584\", 0, 9.223373e+18f);\n+  CheckDecimalToReal<Decimal, Real>(\"-9223373136366403584\", 0, -9.223373e+18f);\n   // 2**64 + 2**41 (exactly representable in a float)\n-  CheckDecimalToReal<float>(\"18446746272732807168\", 0, 1.8446746e+19f);\n-  CheckDecimalToReal<float>(\"-18446746272732807168\", 0, -1.8446746e+19f);\n+  CheckDecimalToReal<Decimal, Real>(\"18446746272732807168\", 0, 1.8446746e+19f);\n+  CheckDecimalToReal<Decimal, Real>(\"-18446746272732807168\", 0, -1.8446746e+19f);\n }\n \n // ToReal<double> tests are disabled on MinGW because of precision issues in results\n #ifndef __MINGW32__\n \n // Custom test for Decimal128::ToReal<double>\n-class TestDecimalToRealDouble : public TestDecimalToReal<double> {};\n+class TestDecimalToRealDouble : public TestDecimalToReal<std::pair<Decimal128, double>> {\n\nReview comment:\n       Rename to `TestDecimal128ToRealDouble`?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_test.cc\n##########\n@@ -573,6 +664,253 @@ TEST(Cast, DecimalToDecimal) {\n   }\n }\n \n+TEST(Cast, Decimal256ToDecimal256) {\n\nReview comment:\n       Rename `DecimalToDecimal` to `Decimal128ToDecimal128`?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_test.cc\n##########\n@@ -611,6 +949,44 @@ TEST(Cast, FloatingToDecimal) {\n   // Edge cases are tested for Decimal128::FromReal()\n }\n \n+TEST(Cast, FloatingToDecimal256) {\n\nReview comment:\n       Don't you want to avoid the code duplication here? This looks like exactly the same test as above.\r\n   \n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_numeric.cc\n##########\n@@ -606,6 +723,9 @@ std::shared_ptr<CastFunction> GetCastToDecimal128() {\n   // We resolve the output type of this kernel from the CastOptions\n   DCHECK_OK(\n       func->AddKernel(Type::DECIMAL128, {InputType(Type::DECIMAL128)}, sig_out_ty, exec));\n+  exec = CastFunctor<Decimal256Type, Decimal128Type>::Exec;\n+  DCHECK_OK(\n+      func->AddKernel(Type::DECIMAL128, {InputType(Type::DECIMAL256)}, sig_out_ty, exec));\n\nReview comment:\n       Note the signature of `CastFunction::AddKernel`:\r\n   ```c++\r\n     Status AddKernel(Type::type in_type_id, std::vector<InputType> in_types,\r\n                      OutputType out_type, ArrayKernelExec exec,\r\n                      NullHandling::type = NullHandling::INTERSECTION,\r\n                      MemAllocation::type = MemAllocation::PREALLOCATE);\r\n   ```\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_test.cc\n##########\n@@ -573,6 +664,253 @@ TEST(Cast, DecimalToDecimal) {\n   }\n }\n \n+TEST(Cast, Decimal256ToDecimal256) {\n+  CastOptions options;\n+\n+  for (bool allow_decimal_truncate : {false, true}) {\n+    options.allow_decimal_truncate = allow_decimal_truncate;\n+\n+    auto no_truncation = ArrayFromJSON(decimal256(38, 10), R\"([\n+          \"02.0000000000\",\n+          \"30.0000000000\",\n+          \"22.0000000000\",\n+        \"-121.0000000000\",\n+        null])\");\n+    auto expected = ArrayFromJSON(decimal256(28, 0), R\"([\n+          \"02.\",\n+          \"30.\",\n+          \"22.\",\n+        \"-121.\",\n+        null])\");\n+\n+    CheckCast(no_truncation, expected, options);\n+    CheckCast(expected, no_truncation, options);\n+  }\n+\n+  for (bool allow_decimal_truncate : {false, true}) {\n+    options.allow_decimal_truncate = allow_decimal_truncate;\n+\n+    // Same scale, different precision\n+    auto d_5_2 = ArrayFromJSON(decimal256(5, 2), R\"([\n+          \"12.34\",\n+           \"0.56\"])\");\n+    auto d_4_2 = ArrayFromJSON(decimal256(4, 2), R\"([\n+          \"12.34\",\n+           \"0.56\"])\");\n+\n+    CheckCast(d_5_2, d_4_2, options);\n+    CheckCast(d_4_2, d_5_2, options);\n+  }\n+\n+  auto d_38_10 = ArrayFromJSON(decimal256(38, 10), R\"([\n+      \"-02.1234567890\",\n+       \"30.1234567890\",\n+      null])\");\n+\n+  auto d_28_0 = ArrayFromJSON(decimal256(28, 0), R\"([\n+      \"-02.\",\n+       \"30.\",\n+      null])\");\n+\n+  auto d_38_10_roundtripped = ArrayFromJSON(decimal256(38, 10), R\"([\n+      \"-02.0000000000\",\n+       \"30.0000000000\",\n+      null])\");\n+\n+  // Rescale which leads to truncation\n+  options.allow_decimal_truncate = true;\n+  CheckCast(d_38_10, d_28_0, options);\n+  CheckCast(d_28_0, d_38_10_roundtripped, options);\n+\n+  options.allow_decimal_truncate = false;\n+  options.to_type = d_28_0->type();\n+  CheckCastFails(d_38_10, options);\n+  CheckCast(d_28_0, d_38_10_roundtripped, options);\n+\n+  // Precision loss without rescale leads to truncation\n+  auto d_4_2 = ArrayFromJSON(decimal256(4, 2), R\"([\"12.34\"])\");\n+  for (auto expected : {\n+           ArrayFromJSON(decimal256(3, 2), R\"([\"12.34\"])\"),\n+           ArrayFromJSON(decimal256(4, 3), R\"([\"12.340\"])\"),\n+           ArrayFromJSON(decimal256(2, 1), R\"([\"12.3\"])\"),\n+       }) {\n+    options.allow_decimal_truncate = true;\n+    CheckCast(d_4_2, expected, options);\n+\n+    options.allow_decimal_truncate = false;\n+    options.to_type = expected->type();\n+    CheckCastFails(d_4_2, options);\n+  }\n+}\n+\n+TEST(Cast, DecimalToDecimal256) {\n+  CastOptions options;\n+\n+  for (bool allow_decimal_truncate : {false, true}) {\n+    options.allow_decimal_truncate = allow_decimal_truncate;\n+\n+    auto no_truncation = ArrayFromJSON(decimal(38, 10), R\"([\n+          \"02.0000000000\",\n+          \"30.0000000000\",\n+          \"22.0000000000\",\n+        \"-121.0000000000\",\n+        null])\");\n+    auto expected = ArrayFromJSON(decimal256(48, 0), R\"([\n+          \"02.\",\n+          \"30.\",\n+          \"22.\",\n+        \"-121.\",\n+        null])\");\n+\n+    CheckCast(no_truncation, expected, options);\n+  }\n+\n+  for (bool allow_decimal_truncate : {false, true}) {\n+    options.allow_decimal_truncate = allow_decimal_truncate;\n+\n+    // Same scale, different precision\n+    auto d_5_2 = ArrayFromJSON(decimal(5, 2), R\"([\n+          \"12.34\",\n+           \"0.56\"])\");\n+    auto d_4_2 = ArrayFromJSON(decimal256(4, 2), R\"([\n+          \"12.34\",\n+           \"0.56\"])\");\n+    auto d_40_2 = ArrayFromJSON(decimal256(40, 2), R\"([\n+          \"12.34\",\n+           \"0.56\"])\");\n+\n+    CheckCast(d_5_2, d_4_2, options);\n+    CheckCast(d_5_2, d_40_2, options);\n+  }\n+\n+  auto d128_38_10 = ArrayFromJSON(decimal(38, 10), R\"([\n+      \"-02.1234567890\",\n+       \"30.1234567890\",\n+      null])\");\n+\n+  auto d128_28_0 = ArrayFromJSON(decimal(28, 0), R\"([\n+      \"-02.\",\n+       \"30.\",\n+      null])\");\n+\n+  auto d256_28_0 = ArrayFromJSON(decimal256(28, 0), R\"([\n+      \"-02.\",\n+       \"30.\",\n+      null])\");\n+\n+  auto d256_38_10_roundtripped = ArrayFromJSON(decimal256(38, 10), R\"([\n+      \"-02.0000000000\",\n+       \"30.0000000000\",\n+      null])\");\n+\n+  // Rescale which leads to truncation\n+  options.allow_decimal_truncate = true;\n+  CheckCast(d128_38_10, d256_28_0, options);\n+  CheckCast(d128_28_0, d256_38_10_roundtripped, options);\n+\n+  options.allow_decimal_truncate = false;\n+  options.to_type = d256_28_0->type();\n+  CheckCastFails(d128_38_10, options);\n+  CheckCast(d128_28_0, d256_38_10_roundtripped, options);\n+\n+  // Precision loss without rescale leads to truncation\n+  auto d128_4_2 = ArrayFromJSON(decimal(4, 2), R\"([\"12.34\"])\");\n+  for (auto expected : {\n+           ArrayFromJSON(decimal256(3, 2), R\"([\"12.34\"])\"),\n+           ArrayFromJSON(decimal256(4, 3), R\"([\"12.340\"])\"),\n+           ArrayFromJSON(decimal256(2, 1), R\"([\"12.3\"])\"),\n+       }) {\n+    options.allow_decimal_truncate = true;\n+    CheckCast(d128_4_2, expected, options);\n+\n+    options.allow_decimal_truncate = false;\n+    options.to_type = expected->type();\n+    CheckCastFails(d128_4_2, options);\n+  }\n+}\n+\n+TEST(Cast, Decimal256ToDecimal) {\n\nReview comment:\n       `Decimal256ToDecimal128`\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_numeric.cc\n##########\n@@ -393,35 +391,81 @@ struct CastFunctor<O, Decimal128Type, enable_if_t<is_integer_type<O>::value>> {\n // Decimal to decimal\n \n struct UnsafeUpscaleDecimal {\n-  template <typename... Unused>\n-  Decimal128 Call(KernelContext* ctx, Decimal128 val) const {\n-    return val.IncreaseScaleBy(by_);\n+  template <typename OutValue, typename Arg0Value>\n+  OutValue Call(KernelContext* ctx, Arg0Value val) const {\n+    // For OutValue=Decimal256, convert then scale\n+    return OutValue(val).IncreaseScaleBy(by_);\n   }\n   int32_t by_;\n };\n \n struct UnsafeDownscaleDecimal {\n-  template <typename... Unused>\n-  Decimal128 Call(KernelContext* ctx, Decimal128 val) const {\n-    return val.ReduceScaleBy(by_, false);\n+  template <typename OutValue, typename Arg0Value>\n+  OutValue Call(KernelContext* ctx, Arg0Value val) const {\n+    return OutValue(val).ReduceScaleBy(by_, false);\n   }\n   int32_t by_;\n };\n \n struct SafeRescaleDecimal {\n+  template <typename OutValue, typename Arg0Value>\n+  OutValue Call(KernelContext* ctx, Arg0Value val) const {\n+    auto maybe_rescaled = OutValue(val).Rescale(in_scale_, out_scale_);\n+    if (ARROW_PREDICT_FALSE(!maybe_rescaled.ok())) {\n+      ctx->SetStatus(maybe_rescaled.status());\n+      return {};  // Zero\n+    }\n+\n+    if (ARROW_PREDICT_TRUE(maybe_rescaled->FitsInPrecision(out_precision_))) {\n+      return maybe_rescaled.MoveValueUnsafe();\n+    }\n+\n+    ctx->SetStatus(\n+        Status::Invalid(\"Decimal value does not fit in precision \", out_precision_));\n+    return {};  // Zero\n+  }\n+\n+  int32_t out_scale_, out_precision_, in_scale_;\n+};\n+\n+// Same as above, but this time, scale then convert\n+struct UnsafeUpscaleDecimalDowncast {\n+  template <typename... Unused>\n+  Decimal128 Call(KernelContext* ctx, Decimal256 val) const {\n+    auto decimal256 = val.IncreaseScaleBy(by_);\n+    return Decimal128(decimal256.little_endian_array()[1],\n+                      decimal256.little_endian_array()[0]);\n\nReview comment:\n       Hmm, do we want to avoid repeating those kernels using a helper function? e.g.\r\n   ```c++\r\n   template <typename OutDecimal, typename InDecimal>\r\n   OutDecimal ConvertDecimalType(InDecimal&& val, KernelContext*);\r\n   \r\n   template <>\r\n   Decimal128 ConvertDecimalType<Decimal256, Decimal128>(Decimal256&& val, KernelContext*) {\r\n     return Decimal128(val.little_endian_array()[1],\r\n                       val.little_endian_array()[0]);\r\n   }\r\n   \r\n   template <typename OutDecimal>\r\n   OutDecimal ConvertDecimalType<OutDecimal, OutDecimal>(OutDecimal&& val, KernelContext*) {\r\n     return val;\r\n   }\r\n   ```\r\n   \n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_numeric.cc\n##########\n@@ -462,13 +506,80 @@ struct CastFunctor<Decimal128Type, Decimal128Type> {\n   }\n };\n \n+template <>\n+struct CastFunctor<Decimal256Type, Decimal128Type> {\n+  static void Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    const auto& options = checked_cast<const CastState*>(ctx->state())->options;\n+\n+    const auto& in_type = checked_cast<const Decimal256Type&>(*batch[0].type());\n+    const auto& out_type = checked_cast<const Decimal128Type&>(*out->type());\n+    const auto in_scale = in_type.scale();\n+    const auto out_scale = out_type.scale();\n+\n+    if (options.allow_decimal_truncate) {\n+      if (in_scale < out_scale) {\n+        // Unsafe upscale\n+        applicator::ScalarUnaryNotNullStateful<Decimal128Type, Decimal256Type,\n+                                               UnsafeUpscaleDecimalDowncast>\n+            kernel(UnsafeUpscaleDecimalDowncast{out_scale - in_scale});\n+        return kernel.Exec(ctx, batch, out);\n+      } else {\n+        // Unsafe downscale\n+        applicator::ScalarUnaryNotNullStateful<Decimal128Type, Decimal256Type,\n+                                               UnsafeDownscaleDecimalDowncast>\n+            kernel(UnsafeDownscaleDecimalDowncast{in_scale - out_scale});\n+        return kernel.Exec(ctx, batch, out);\n+      }\n+    }\n+\n+    // Safe rescale\n+    applicator::ScalarUnaryNotNullStateful<Decimal128Type, Decimal256Type,\n+                                           SafeRescaleDecimalDowncast>\n+        kernel(SafeRescaleDecimalDowncast{out_scale, out_type.precision(), in_scale});\n+    return kernel.Exec(ctx, batch, out);\n+  }\n+};\n+\n+template <typename Arg0Type>\n+struct CastFunctor<Arg0Type, Decimal256Type, enable_if_decimal<Arg0Type>> {\n\nReview comment:\n       Same comment here: should be `CastFunctor<Decimal256Type, Arg0Type>`?\n\n##########\nFile path: cpp/src/arrow/util/decimal_test.cc\n##########\n@@ -590,13 +597,62 @@ TEST(TestDecimalFromRealFloat, LargeValues) {\n   // Test the entire float range\n   for (int32_t scale = -38; scale <= 38; ++scale) {\n     float real = std::pow(10.0f, static_cast<float>(scale));\n-    CheckDecimalFromRealIntegerString(real, 1, -scale, \"1\");\n+    CheckDecimalFromRealIntegerString<Decimal128>(real, 1, -scale, \"1\");\n+  }\n+  for (int32_t scale = -37; scale <= 36; ++scale) {\n+    float real = 123.f * std::pow(10.f, static_cast<float>(scale));\n+    CheckDecimalFromRealIntegerString<Decimal128>(real, 2, -scale - 1, \"12\");\n+    CheckDecimalFromRealIntegerString<Decimal128>(real, 3, -scale, \"123\");\n+    CheckDecimalFromRealIntegerString<Decimal128>(real, 4, -scale + 1, \"1230\");\n+  }\n+}\n+\n+// Same tests, repeated for Decimal256\n+class TestDecimal256FromRealFloat : public ::testing::TestWithParam<FromFloatTestParam> {\n+};\n+\n+TEST_P(TestDecimal256FromRealFloat, SuccessConversion) {\n+  const auto param = GetParam();\n+  CheckDecimalFromReal<Decimal256>(param.real, param.precision, param.scale,\n+                                   param.expected);\n+}\n+\n+// clang-format off\n+INSTANTIATE_TEST_SUITE_P(\n+    TestDecimal256FromRealFloat, TestDecimal256FromRealFloat,\n+    ::testing::Values(\n+        // 2**63 + 2**40 (exactly representable in a float's 24 bits of precision)\n+        FromFloatTestParam{9.223373e+18f, 19, 0, \"9223373136366403584\"},\n+        FromFloatTestParam{-9.223373e+18f, 19, 0, \"-9223373136366403584\"},\n+        FromFloatTestParam{9.223373e+14f, 19, 4, \"922337313636640.3584\"},\n+        FromFloatTestParam{-9.223373e+14f, 19, 4, \"-922337313636640.3584\"},\n+        // 2**64 - 2**40 (exactly representable in a float)\n+        FromFloatTestParam{1.8446743e+19f, 20, 0, \"18446742974197923840\"},\n+        FromFloatTestParam{-1.8446743e+19f, 20, 0, \"-18446742974197923840\"},\n+        // 2**64 + 2**41 (exactly representable in a float)\n+        FromFloatTestParam{1.8446746e+19f, 20, 0, \"18446746272732807168\"},\n+        FromFloatTestParam{-1.8446746e+19f, 20, 0, \"-18446746272732807168\"},\n+        FromFloatTestParam{1.8446746e+15f, 20, 4, \"1844674627273280.7168\"},\n+        FromFloatTestParam{-1.8446746e+15f, 20, 4, \"-1844674627273280.7168\"},\n+        // Almost 10**38 (minus 2**103)\n+        FromFloatTestParam{9.999999e+37f, 38, 0,\n+                           \"99999986661652122824821048795547566080\"},\n+        FromFloatTestParam{-9.999999e+37f, 38, 0,\n+                           \"-99999986661652122824821048795547566080\"}\n+));\n+// clang-format on\n+\n+TEST(TestDecimal256FromRealFloat, LargeValues) {\n\nReview comment:\n       Perhaps fold this test into `TestDecimalFromReal`, to avoid repeating it for both decimal types?\n\n##########\nFile path: cpp/src/arrow/util/decimal_test.cc\n##########\n@@ -641,13 +698,79 @@ TEST(TestDecimalFromRealDouble, LargeValues) {\n   // Test the entire double range\n   for (int32_t scale = -308; scale <= 308; ++scale) {\n     double real = std::pow(10.0, static_cast<double>(scale));\n-    CheckDecimalFromRealIntegerString(real, 1, -scale, \"1\");\n+    CheckDecimalFromRealIntegerString<Decimal128>(real, 1, -scale, \"1\");\n+  }\n+  for (int32_t scale = -307; scale <= 306; ++scale) {\n+    double real = 123. * std::pow(10.0, static_cast<double>(scale));\n+    CheckDecimalFromRealIntegerString<Decimal128>(real, 2, -scale - 1, \"12\");\n+    CheckDecimalFromRealIntegerString<Decimal128>(real, 3, -scale, \"123\");\n+    CheckDecimalFromRealIntegerString<Decimal128>(real, 4, -scale + 1, \"1230\");\n+  }\n+}\n+\n+// Same tests for Decimal256\n+class TestDecimal256FromRealDouble\n+    : public ::testing::TestWithParam<FromDoubleTestParam> {};\n+\n+TEST_P(TestDecimal256FromRealDouble, SuccessConversion) {\n+  const auto param = GetParam();\n+  CheckDecimalFromReal<Decimal256>(param.real, param.precision, param.scale,\n+                                   param.expected);\n+}\n+\n+// clang-format off\n+INSTANTIATE_TEST_SUITE_P(\n+    TestDecimal256FromRealDouble, TestDecimal256FromRealDouble,\n+    ::testing::Values(\n+        // 2**63 + 2**11 (exactly representable in a double's 53 bits of precision)\n+        FromDoubleTestParam{9.223372036854778e+18, 19, 0, \"9223372036854777856\"},\n+        FromDoubleTestParam{-9.223372036854778e+18, 19, 0, \"-9223372036854777856\"},\n+        FromDoubleTestParam{9.223372036854778e+10, 19, 8, \"92233720368.54777856\"},\n+        FromDoubleTestParam{-9.223372036854778e+10, 19, 8, \"-92233720368.54777856\"},\n+        // 2**64 - 2**11 (exactly representable in a double)\n+        FromDoubleTestParam{1.844674407370955e+19, 20, 0, \"18446744073709549568\"},\n+        FromDoubleTestParam{-1.844674407370955e+19, 20, 0, \"-18446744073709549568\"},\n+        // 2**64 + 2**11 (exactly representable in a double)\n+        FromDoubleTestParam{1.8446744073709556e+19, 20, 0, \"18446744073709555712\"},\n+        FromDoubleTestParam{-1.8446744073709556e+19, 20, 0, \"-18446744073709555712\"},\n+        FromDoubleTestParam{1.8446744073709556e+15, 20, 4, \"1844674407370955.5712\"},\n+        FromDoubleTestParam{-1.8446744073709556e+15, 20, 4, \"-1844674407370955.5712\"},\n+        // Almost 10**38 (minus 2**73)\n+        FromDoubleTestParam{9.999999999999998e+37, 38, 0,\n+                            \"99999999999999978859343891977453174784\"},\n+        FromDoubleTestParam{-9.999999999999998e+37, 38, 0,\n+                            \"-99999999999999978859343891977453174784\"},\n+        FromDoubleTestParam{9.999999999999998e+27, 38, 10,\n+                            \"9999999999999997885934389197.7453174784\"},\n+        FromDoubleTestParam{-9.999999999999998e+27, 38, 10,\n+                            \"-9999999999999997885934389197.7453174784\"},\n+        // Almost 10**76\n+        FromDoubleTestParam{9.999999999999999e+75, 76, 0,\n+                            \"999999999999999886366330070006442034959750906670402\"\n+                            \"8242075715752105414230016\"},\n+        FromDoubleTestParam{-9.999999999999999e+75, 76, 0,\n+                            \"-999999999999999886366330070006442034959750906670402\"\n+                            \"8242075715752105414230016\"},\n+        FromDoubleTestParam{9.999999999999999e+65, 76, 10,\n+                            \"999999999999999886366330070006442034959750906670402\"\n+                            \"824207571575210.5414230016\"},\n+        FromDoubleTestParam{-9.999999999999999e+65, 76, 10,\n+                            \"-999999999999999886366330070006442034959750906670402\"\n+                            \"824207571575210.5414230016\"}\n\nReview comment:\n       This is the same test vector as above + 4 additional values. Perhaps factor out the common values?\n\n##########\nFile path: cpp/src/arrow/util/decimal_test.cc\n##########\n@@ -728,72 +858,143 @@ TYPED_TEST_SUITE(TestDecimalToReal, RealTypes);\n TYPED_TEST(TestDecimalToReal, TestSuccess) { this->TestSuccess(); }\n \n // Custom test for Decimal128::ToReal<float>\n-class TestDecimalToRealFloat : public TestDecimalToReal<float> {};\n+class TestDecimalToRealFloat : public TestDecimalToReal<std::pair<Decimal128, float>> {};\n \n TEST_F(TestDecimalToRealFloat, LargeValues) {\n   // Note that exact comparisons would succeed on some platforms (Linux, macOS).\n   // Nevertheless, power-of-ten factors are not all exactly representable\n   // in binary floating point.\n   for (int32_t scale = -38; scale <= 38; scale++) {\n-    CheckFloatToRealApprox(\"1\", scale, Pow10(-scale));\n+    CheckDecimalToRealApprox<Decimal>(\"1\", scale, Pow10(-scale));\n   }\n   for (int32_t scale = -38; scale <= 36; scale++) {\n     const Real factor = static_cast<Real>(123);\n-    CheckFloatToRealApprox(\"123\", scale, factor * Pow10(-scale));\n+    CheckDecimalToRealApprox<Decimal>(\"123\", scale, factor * Pow10(-scale));\n   }\n }\n \n TEST_F(TestDecimalToRealFloat, Precision) {\n   // 2**63 + 2**40 (exactly representable in a float's 24 bits of precision)\n-  CheckDecimalToReal<float>(\"9223373136366403584\", 0, 9.223373e+18f);\n-  CheckDecimalToReal<float>(\"-9223373136366403584\", 0, -9.223373e+18f);\n+  CheckDecimalToReal<Decimal, Real>(\"9223373136366403584\", 0, 9.223373e+18f);\n+  CheckDecimalToReal<Decimal, Real>(\"-9223373136366403584\", 0, -9.223373e+18f);\n+  // 2**64 + 2**41 (exactly representable in a float)\n+  CheckDecimalToReal<Decimal, Real>(\"18446746272732807168\", 0, 1.8446746e+19f);\n+  CheckDecimalToReal<Decimal, Real>(\"-18446746272732807168\", 0, -1.8446746e+19f);\n+}\n+\n+// Same tests, repeated for Decimal256\n+class TestDecimal256ToRealFloat : public TestDecimalToReal<std::pair<Decimal256, float>> {\n+};\n+\n+TEST_F(TestDecimal256ToRealFloat, LargeValues) {\n+  // Note that exact comparisons would succeed on some platforms (Linux, macOS).\n+  // Nevertheless, power-of-ten factors are not all exactly representable\n+  // in binary floating point.\n+  for (int32_t scale = -76; scale <= 76; scale++) {\n+#ifdef _WIN32\n+    // MSVC gives pow(10.f, -45.f) == 0 even though 1e-45f is nonzero\n+    if (scale == 45) continue;\n+#endif\n+    CheckDecimalToRealApprox<Decimal>(\"1\", scale, Pow10(-scale));\n+    const Real factor = static_cast<Real>(123);\n+    CheckDecimalToRealApprox<Decimal>(\"123\", scale, factor * Pow10(-scale));\n+  }\n+}\n+\n+TEST_F(TestDecimal256ToRealFloat, Precision) {\n+  // 2**63 + 2**40 (exactly representable in a float's 24 bits of precision)\n+  CheckDecimalToReal<Decimal, Real>(\"9223373136366403584\", 0, 9.223373e+18f);\n+  CheckDecimalToReal<Decimal, Real>(\"-9223373136366403584\", 0, -9.223373e+18f);\n   // 2**64 + 2**41 (exactly representable in a float)\n-  CheckDecimalToReal<float>(\"18446746272732807168\", 0, 1.8446746e+19f);\n-  CheckDecimalToReal<float>(\"-18446746272732807168\", 0, -1.8446746e+19f);\n+  CheckDecimalToReal<Decimal, Real>(\"18446746272732807168\", 0, 1.8446746e+19f);\n+  CheckDecimalToReal<Decimal, Real>(\"-18446746272732807168\", 0, -1.8446746e+19f);\n }\n \n // ToReal<double> tests are disabled on MinGW because of precision issues in results\n #ifndef __MINGW32__\n \n // Custom test for Decimal128::ToReal<double>\n-class TestDecimalToRealDouble : public TestDecimalToReal<double> {};\n+class TestDecimalToRealDouble : public TestDecimalToReal<std::pair<Decimal128, double>> {\n+};\n \n TEST_F(TestDecimalToRealDouble, LargeValues) {\n   // Note that exact comparisons would succeed on some platforms (Linux, macOS).\n   // Nevertheless, power-of-ten factors are not all exactly representable\n   // in binary floating point.\n   for (int32_t scale = -308; scale <= 308; scale++) {\n-    CheckDoubleToRealApprox(\"1\", scale, Pow10(-scale));\n+    CheckDecimalToRealApprox<Decimal>(\"1\", scale, Pow10(-scale));\n   }\n   for (int32_t scale = -308; scale <= 306; scale++) {\n     const Real factor = static_cast<Real>(123);\n-    CheckDoubleToRealApprox(\"123\", scale, factor * Pow10(-scale));\n+    CheckDecimalToRealApprox<Decimal>(\"123\", scale, factor * Pow10(-scale));\n   }\n }\n \n TEST_F(TestDecimalToRealDouble, Precision) {\n   // 2**63 + 2**11 (exactly representable in a double's 53 bits of precision)\n-  CheckDecimalToReal<double>(\"9223372036854777856\", 0, 9.223372036854778e+18);\n-  CheckDecimalToReal<double>(\"-9223372036854777856\", 0, -9.223372036854778e+18);\n+  CheckDecimalToReal<Decimal, Real>(\"9223372036854777856\", 0, 9.223372036854778e+18);\n+  CheckDecimalToReal<Decimal, Real>(\"-9223372036854777856\", 0, -9.223372036854778e+18);\n   // 2**64 - 2**11 (exactly representable in a double)\n-  CheckDecimalToReal<double>(\"18446744073709549568\", 0, 1.844674407370955e+19);\n-  CheckDecimalToReal<double>(\"-18446744073709549568\", 0, -1.844674407370955e+19);\n+  CheckDecimalToReal<Decimal, Real>(\"18446744073709549568\", 0, 1.844674407370955e+19);\n+  CheckDecimalToReal<Decimal, Real>(\"-18446744073709549568\", 0, -1.844674407370955e+19);\n   // 2**64 + 2**11 (exactly representable in a double)\n-  CheckDecimalToReal<double>(\"18446744073709555712\", 0, 1.8446744073709556e+19);\n-  CheckDecimalToReal<double>(\"-18446744073709555712\", 0, -1.8446744073709556e+19);\n+  CheckDecimalToReal<Decimal, Real>(\"18446744073709555712\", 0, 1.8446744073709556e+19);\n+  CheckDecimalToReal<Decimal, Real>(\"-18446744073709555712\", 0, -1.8446744073709556e+19);\n   // Almost 10**38 (minus 2**73)\n-  CheckDecimalToReal<double>(\"99999999999999978859343891977453174784\", 0,\n-                             9.999999999999998e+37);\n-  CheckDecimalToReal<double>(\"-99999999999999978859343891977453174784\", 0,\n-                             -9.999999999999998e+37);\n-  CheckDecimalToReal<double>(\"99999999999999978859343891977453174784\", 10,\n-                             9.999999999999998e+27);\n-  CheckDecimalToReal<double>(\"-99999999999999978859343891977453174784\", 10,\n-                             -9.999999999999998e+27);\n-  CheckDecimalToReal<double>(\"99999999999999978859343891977453174784\", -10,\n-                             9.999999999999998e+47);\n-  CheckDecimalToReal<double>(\"-99999999999999978859343891977453174784\", -10,\n-                             -9.999999999999998e+47);\n+  CheckDecimalToReal<Decimal, Real>(\"99999999999999978859343891977453174784\", 0,\n+                                    9.999999999999998e+37);\n+  CheckDecimalToReal<Decimal, Real>(\"-99999999999999978859343891977453174784\", 0,\n+                                    -9.999999999999998e+37);\n+  CheckDecimalToReal<Decimal, Real>(\"99999999999999978859343891977453174784\", 10,\n+                                    9.999999999999998e+27);\n+  CheckDecimalToReal<Decimal, Real>(\"-99999999999999978859343891977453174784\", 10,\n+                                    -9.999999999999998e+27);\n+  CheckDecimalToReal<Decimal, Real>(\"99999999999999978859343891977453174784\", -10,\n+                                    9.999999999999998e+47);\n+  CheckDecimalToReal<Decimal, Real>(\"-99999999999999978859343891977453174784\", -10,\n+                                    -9.999999999999998e+47);\n+}\n+\n+// Same tests, but for Decimal256\n+class TestDecimal256ToRealDouble\n+    : public TestDecimalToReal<std::pair<Decimal128, double>> {};\n+\n+TEST_F(TestDecimal256ToRealDouble, LargeValues) {\n\nReview comment:\n       Instead of copy-pasting these test functions, why not factor them out?\r\n   (for example as `TestDecimalToReal` methods?)\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_test.cc\n##########\n@@ -573,6 +664,253 @@ TEST(Cast, DecimalToDecimal) {\n   }\n }\n \n+TEST(Cast, Decimal256ToDecimal256) {\n+  CastOptions options;\n+\n+  for (bool allow_decimal_truncate : {false, true}) {\n+    options.allow_decimal_truncate = allow_decimal_truncate;\n+\n+    auto no_truncation = ArrayFromJSON(decimal256(38, 10), R\"([\n+          \"02.0000000000\",\n+          \"30.0000000000\",\n+          \"22.0000000000\",\n+        \"-121.0000000000\",\n+        null])\");\n+    auto expected = ArrayFromJSON(decimal256(28, 0), R\"([\n+          \"02.\",\n+          \"30.\",\n+          \"22.\",\n+        \"-121.\",\n+        null])\");\n+\n+    CheckCast(no_truncation, expected, options);\n+    CheckCast(expected, no_truncation, options);\n+  }\n+\n+  for (bool allow_decimal_truncate : {false, true}) {\n+    options.allow_decimal_truncate = allow_decimal_truncate;\n+\n+    // Same scale, different precision\n+    auto d_5_2 = ArrayFromJSON(decimal256(5, 2), R\"([\n+          \"12.34\",\n+           \"0.56\"])\");\n+    auto d_4_2 = ArrayFromJSON(decimal256(4, 2), R\"([\n+          \"12.34\",\n+           \"0.56\"])\");\n+\n+    CheckCast(d_5_2, d_4_2, options);\n+    CheckCast(d_4_2, d_5_2, options);\n+  }\n+\n+  auto d_38_10 = ArrayFromJSON(decimal256(38, 10), R\"([\n+      \"-02.1234567890\",\n+       \"30.1234567890\",\n+      null])\");\n+\n+  auto d_28_0 = ArrayFromJSON(decimal256(28, 0), R\"([\n+      \"-02.\",\n+       \"30.\",\n+      null])\");\n+\n+  auto d_38_10_roundtripped = ArrayFromJSON(decimal256(38, 10), R\"([\n+      \"-02.0000000000\",\n+       \"30.0000000000\",\n+      null])\");\n+\n+  // Rescale which leads to truncation\n+  options.allow_decimal_truncate = true;\n+  CheckCast(d_38_10, d_28_0, options);\n+  CheckCast(d_28_0, d_38_10_roundtripped, options);\n+\n+  options.allow_decimal_truncate = false;\n+  options.to_type = d_28_0->type();\n+  CheckCastFails(d_38_10, options);\n+  CheckCast(d_28_0, d_38_10_roundtripped, options);\n+\n+  // Precision loss without rescale leads to truncation\n+  auto d_4_2 = ArrayFromJSON(decimal256(4, 2), R\"([\"12.34\"])\");\n+  for (auto expected : {\n+           ArrayFromJSON(decimal256(3, 2), R\"([\"12.34\"])\"),\n+           ArrayFromJSON(decimal256(4, 3), R\"([\"12.340\"])\"),\n+           ArrayFromJSON(decimal256(2, 1), R\"([\"12.3\"])\"),\n+       }) {\n+    options.allow_decimal_truncate = true;\n+    CheckCast(d_4_2, expected, options);\n+\n+    options.allow_decimal_truncate = false;\n+    options.to_type = expected->type();\n+    CheckCastFails(d_4_2, options);\n+  }\n+}\n+\n+TEST(Cast, DecimalToDecimal256) {\n\nReview comment:\n       `Decimal128ToDecimal256`\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_test.cc\n##########\n@@ -494,6 +494,97 @@ TEST(Cast, DecimalToInt) {\n   CheckCast(negative_scale, ArrayFromJSON(int64(), \"[1234567890000, -120000]\"), options);\n }\n \n+TEST(Cast, Decimal256ToInt) {\n\nReview comment:\n       Nit, but rename `DecimalToInt` to `Decimal128ToInt` above?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-23T14:33:28.924+0000",
                    "updated": "2021-03-23T14:33:28.924+0000",
                    "started": "2021-03-23T14:33:28.924+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "570513",
                    "issueId": "13340749"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13340749/worklog/570514",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #9751:\nURL: https://github.com/apache/arrow/pull/9751#issuecomment-804955882\n\n\n   Thanks, looks like I got something backwards\u2026will rework this.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-23T14:37:43.802+0000",
                    "updated": "2021-03-23T14:37:43.802+0000",
                    "started": "2021-03-23T14:37:43.802+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "570514",
                    "issueId": "13340749"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13340749/worklog/570940",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #9751:\nURL: https://github.com/apache/arrow/pull/9751#issuecomment-805496501\n\n\n   @lidavidm is it still worth me taking a look or is the rework going to change things substantially?\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-24T04:57:34.185+0000",
                    "updated": "2021-03-24T04:57:34.185+0000",
                    "started": "2021-03-24T04:57:34.185+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "570940",
                    "issueId": "13340749"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13340749/worklog/571086",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #9751:\nURL: https://github.com/apache/arrow/pull/9751#issuecomment-805754344\n\n\n   @emkornfield this should be ready again (was just waiting for CI - looks like MacOS flaked)\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-24T11:42:55.140+0000",
                    "updated": "2021-03-24T11:42:55.140+0000",
                    "started": "2021-03-24T11:42:55.140+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "571086",
                    "issueId": "13340749"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13340749/worklog/571100",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #9751:\nURL: https://github.com/apache/arrow/pull/9751#discussion_r600408166\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_numeric.cc\n##########\n@@ -606,17 +642,32 @@ std::shared_ptr<CastFunction> GetCastToDecimal128() {\n   // We resolve the output type of this kernel from the CastOptions\n   DCHECK_OK(\n       func->AddKernel(Type::DECIMAL128, {InputType(Type::DECIMAL128)}, sig_out_ty, exec));\n+  exec = CastFunctor<Decimal128Type, Decimal256Type>::Exec;\n+  DCHECK_OK(\n+      func->AddKernel(Type::DECIMAL256, {InputType(Type::DECIMAL256)}, sig_out_ty, exec));\n   return func;\n }\n \n std::shared_ptr<CastFunction> GetCastToDecimal256() {\n   OutputType sig_out_ty(ResolveOutputFromOptions);\n \n   auto func = std::make_shared<CastFunction>(\"cast_decimal256\", Type::DECIMAL256);\n-  // Needed for Parquet conversion. Full implementation is ARROW-10606\n-  // tracks full implementation.\n+  // Needed for Parquet conversion.\n\nReview comment:\n       I don't think this comment is still useful. These are just the same casts as for `Decimal128`.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-24T12:04:53.051+0000",
                    "updated": "2021-03-24T12:04:53.051+0000",
                    "started": "2021-03-24T12:04:53.051+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "571100",
                    "issueId": "13340749"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13340749/worklog/571349",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou closed pull request #9751:\nURL: https://github.com/apache/arrow/pull/9751\n\n\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-24T17:40:51.454+0000",
                    "updated": "2021-03-24T17:40:51.454+0000",
                    "started": "2021-03-24T17:40:51.454+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "571349",
                    "issueId": "13340749"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 6000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@1e0fd706[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2e2e4ca2[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2a13db97[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@7684c92b[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2e421f3[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@6cdf96f3[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@58a4279c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@8b97032[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2b71336f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@3b0940fc[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@42e808c6[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@193c849[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 6000,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Mar 24 17:40:42 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-03-24T17:40:42.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10606/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2020-11-16T04:19:19.000+0000",
        "updated": "2021-03-24T17:40:52.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "1h 40m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 6000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++][Compute] Support casts to and from Decimal256 type.",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13340749/comment/17308051",
                    "id": "17308051",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 9751\n[https://github.com/apache/arrow/pull/9751]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2021-03-24T17:40:42.794+0000",
                    "updated": "2021-03-24T17:40:42.794+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0km1c:",
        "customfield_12314139": null
    }
}