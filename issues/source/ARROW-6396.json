{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13253921",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13253921",
    "key": "ARROW-6396",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12340948",
                "id": "12340948",
                "description": "",
                "name": "0.16.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-02-07"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "dataset",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12578223",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12578223",
                "type": {
                    "id": "12310660",
                    "name": "Completes",
                    "inward": "is fixed by",
                    "outward": "fixes",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310660"
                },
                "outwardIssue": {
                    "id": "13253718",
                    "key": "ARROW-6386",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13253718",
                    "fields": {
                        "summary": "[C++][Documentation] Explicit documentation of null slot interpretation",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                            "name": "Closed",
                            "id": "6",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
            "name": "bkietz",
            "key": "bkietz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
            },
            "displayName": "Ben Kietzman",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=fsaintjacques",
            "name": "fsaintjacques",
            "key": "fsaintjacques",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=fsaintjacques&avatarId=37276",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=fsaintjacques&avatarId=37276",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=fsaintjacques&avatarId=37276",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=fsaintjacques&avatarId=37276"
            },
            "displayName": "Francois Saint-Jacques",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=fsaintjacques",
            "name": "fsaintjacques",
            "key": "fsaintjacques",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=fsaintjacques&avatarId=37276",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=fsaintjacques&avatarId=37276",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=fsaintjacques&avatarId=37276",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=fsaintjacques&avatarId=37276"
            },
            "displayName": "Francois Saint-Jacques",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 40800,
            "total": 40800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 40800,
            "total": 40800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-6396/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 72,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13253921/worklog/338191",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5771: ARROW-6396: [C++] Add overloads of Boolean kernels implementing Kleene logic\nURL: https://github.com/apache/arrow/pull/5771\n \n \n   The utility classes I needed to write for this impinged on ARROW-4722\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-04T16:44:21.370+0000",
                    "updated": "2019-11-04T16:44:21.370+0000",
                    "started": "2019-11-04T16:44:21.369+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "338191",
                    "issueId": "13253921"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13253921/worklog/338199",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on issue #5771: ARROW-6396: [C++] Add overloads of Boolean kernels implementing Kleene logic\nURL: https://github.com/apache/arrow/pull/5771#issuecomment-549443167\n \n \n   https://issues.apache.org/jira/browse/ARROW-6396\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-04T16:47:25.964+0000",
                    "updated": "2019-11-04T16:47:25.964+0000",
                    "started": "2019-11-04T16:47:25.963+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "338199",
                    "issueId": "13253921"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13253921/worklog/338767",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5771: ARROW-6396: [C++] Add overloads of Boolean kernels implementing Kleene logic\nURL: https://github.com/apache/arrow/pull/5771#discussion_r342583959\n \n \n\n ##########\n File path: cpp/src/arrow/util/bit_util.h\n ##########\n @@ -827,6 +834,164 @@ Status InvertBitmap(MemoryPool* pool, const uint8_t* bitmap, int64_t offset,\n ARROW_EXPORT\n int64_t CountSetBits(const uint8_t* data, int64_t bit_offset, int64_t length);\n \n+class ARROW_EXPORT Bitmap {\n+ public:\n+  Bitmap() = default;\n+\n+  Bitmap(std::shared_ptr<Buffer> buffer, int64_t offset, int64_t length)\n+      : buffer_(std::move(buffer)), offset_(offset), length_(length) {}\n+\n+  Bitmap(const uint8_t* data, int64_t offset, int64_t length)\n+      : buffer_(std::make_shared<Buffer>(data, BitUtil::BytesForBits(offset + length))),\n+        offset_(offset),\n+        length_(length) {}\n+\n+  Bitmap Slice(int64_t offset) const {\n+    return Bitmap(buffer_, offset_ + offset, length_ - offset);\n+  }\n+\n+  Bitmap Slice(int64_t offset, int64_t length) const {\n+    return Bitmap(buffer_, offset_ + offset, length);\n+  }\n+\n+  std::shared_ptr<BooleanArray> ToArray() const;\n+\n+  std::string ToString() const;\n+\n+  std::string Diff(const Bitmap& other) const;\n+\n+  bool GetBit(int64_t i) const { return BitUtil::GetBit(buffer_->data(), i + offset_); }\n+\n+  bool operator[](int64_t i) const { return GetBit(i); }\n+\n+  void SetBitTo(int64_t i, bool v) const {\n+    BitUtil::SetBitTo(buffer_->mutable_data(), i + offset_, v);\n+  }\n+\n+  /// \\brief Visit bits of this bitmap either as bitset<N> or as array<Word, N>.\n+  ///\n+  /// If visiting by words, note that the every Word containing a bit\n+  /// must be accessible (and initialized, or Valgrind will barf).\n+  /// This is satisfied by most Buffers in Arrow space (which are allocated with\n+  /// maximum alignment and padded to contain whole cache lines).\n+  ///\n+  /// TODO(bkietz) allow for early termination\n+  template <size_t N, typename Visitor>\n+  static void Visit(const Bitmap (&bitmaps)[N], Visitor&& visitor) {\n+    VisitImpl(bitmaps, VisitedIs<internal::call_traits::argument_type<0, Visitor&&>>{},\n+              std::forward<Visitor>(visitor));\n+  }\n+\n+  const std::shared_ptr<Buffer>& buffer() const { return buffer_; }\n+\n+  /// offset of first bit relative to buffer().data()\n+  int64_t offset() const { return offset_; }\n+\n+  /// number of bits in this Bitmap\n+  int64_t length() const { return length_; }\n+\n+  /// string_view of all bytes which contain any bit in this Bitmap\n+  util::basic_string_view<uint8_t> bytes() const {\n+    auto byte_offset = offset_ / 8;\n+    auto byte_count = BitUtil::CeilDiv(offset_ + length_, 8) - byte_offset;\n+    return util::basic_string_view<uint8_t>(buffer_->data() + byte_offset, byte_count);\n+  }\n+\n+  template <typename Word>\n+  bool word_aligned() const {\n+    auto words = this->words<Word>();\n+    auto valid_addr = AsInt(buffer_->data());\n+    auto words_addr = AsInt(words.data());\n+    return words_addr >= valid_addr &&\n+           words_addr + words.size() * sizeof(Word) <= valid_addr + buffer_->capacity();\n+  }\n+\n+  /// string_view of all Words which contain any bit in this Bitmap\n \n Review comment:\n   It may contain much more if `offset_` is larger than word size, right?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-05T14:34:56.626+0000",
                    "updated": "2019-11-05T14:34:56.626+0000",
                    "started": "2019-11-05T14:34:56.626+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "338767",
                    "issueId": "13253921"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13253921/worklog/338768",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5771: ARROW-6396: [C++] Add overloads of Boolean kernels implementing Kleene logic\nURL: https://github.com/apache/arrow/pull/5771#discussion_r342591939\n \n \n\n ##########\n File path: cpp/src/arrow/util/bit_util.h\n ##########\n @@ -827,6 +834,164 @@ Status InvertBitmap(MemoryPool* pool, const uint8_t* bitmap, int64_t offset,\n ARROW_EXPORT\n int64_t CountSetBits(const uint8_t* data, int64_t bit_offset, int64_t length);\n \n+class ARROW_EXPORT Bitmap {\n+ public:\n+  Bitmap() = default;\n+\n+  Bitmap(std::shared_ptr<Buffer> buffer, int64_t offset, int64_t length)\n+      : buffer_(std::move(buffer)), offset_(offset), length_(length) {}\n+\n+  Bitmap(const uint8_t* data, int64_t offset, int64_t length)\n+      : buffer_(std::make_shared<Buffer>(data, BitUtil::BytesForBits(offset + length))),\n+        offset_(offset),\n+        length_(length) {}\n+\n+  Bitmap Slice(int64_t offset) const {\n+    return Bitmap(buffer_, offset_ + offset, length_ - offset);\n+  }\n+\n+  Bitmap Slice(int64_t offset, int64_t length) const {\n+    return Bitmap(buffer_, offset_ + offset, length);\n+  }\n+\n+  std::shared_ptr<BooleanArray> ToArray() const;\n \n Review comment:\n   Is it useful to expose this publicly?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-05T14:34:57.086+0000",
                    "updated": "2019-11-05T14:34:57.086+0000",
                    "started": "2019-11-05T14:34:57.086+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "338768",
                    "issueId": "13253921"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13253921/worklog/338769",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5771: ARROW-6396: [C++] Add overloads of Boolean kernels implementing Kleene logic\nURL: https://github.com/apache/arrow/pull/5771#discussion_r342576944\n \n \n\n ##########\n File path: cpp/src/arrow/util/bit_util.h\n ##########\n @@ -827,6 +834,164 @@ Status InvertBitmap(MemoryPool* pool, const uint8_t* bitmap, int64_t offset,\n ARROW_EXPORT\n int64_t CountSetBits(const uint8_t* data, int64_t bit_offset, int64_t length);\n \n+class ARROW_EXPORT Bitmap {\n+ public:\n+  Bitmap() = default;\n+\n+  Bitmap(std::shared_ptr<Buffer> buffer, int64_t offset, int64_t length)\n+      : buffer_(std::move(buffer)), offset_(offset), length_(length) {}\n+\n+  Bitmap(const uint8_t* data, int64_t offset, int64_t length)\n+      : buffer_(std::make_shared<Buffer>(data, BitUtil::BytesForBits(offset + length))),\n+        offset_(offset),\n+        length_(length) {}\n+\n+  Bitmap Slice(int64_t offset) const {\n+    return Bitmap(buffer_, offset_ + offset, length_ - offset);\n+  }\n+\n+  Bitmap Slice(int64_t offset, int64_t length) const {\n+    return Bitmap(buffer_, offset_ + offset, length);\n+  }\n+\n+  std::shared_ptr<BooleanArray> ToArray() const;\n+\n+  std::string ToString() const;\n+\n+  std::string Diff(const Bitmap& other) const;\n+\n+  bool GetBit(int64_t i) const { return BitUtil::GetBit(buffer_->data(), i + offset_); }\n+\n+  bool operator[](int64_t i) const { return GetBit(i); }\n+\n+  void SetBitTo(int64_t i, bool v) const {\n+    BitUtil::SetBitTo(buffer_->mutable_data(), i + offset_, v);\n+  }\n+\n+  /// \\brief Visit bits of this bitmap either as bitset<N> or as array<Word, N>.\n+  ///\n+  /// If visiting by words, note that the every Word containing a bit\n+  /// must be accessible (and initialized, or Valgrind will barf).\n+  /// This is satisfied by most Buffers in Arrow space (which are allocated with\n+  /// maximum alignment and padded to contain whole cache lines).\n+  ///\n+  /// TODO(bkietz) allow for early termination\n+  template <size_t N, typename Visitor>\n+  static void Visit(const Bitmap (&bitmaps)[N], Visitor&& visitor) {\n+    VisitImpl(bitmaps, VisitedIs<internal::call_traits::argument_type<0, Visitor&&>>{},\n+              std::forward<Visitor>(visitor));\n+  }\n+\n+  const std::shared_ptr<Buffer>& buffer() const { return buffer_; }\n+\n+  /// offset of first bit relative to buffer().data()\n+  int64_t offset() const { return offset_; }\n+\n+  /// number of bits in this Bitmap\n+  int64_t length() const { return length_; }\n+\n+  /// string_view of all bytes which contain any bit in this Bitmap\n+  util::basic_string_view<uint8_t> bytes() const {\n+    auto byte_offset = offset_ / 8;\n+    auto byte_count = BitUtil::CeilDiv(offset_ + length_, 8) - byte_offset;\n+    return util::basic_string_view<uint8_t>(buffer_->data() + byte_offset, byte_count);\n+  }\n+\n+  template <typename Word>\n+  bool word_aligned() const {\n+    auto words = this->words<Word>();\n+    auto valid_addr = AsInt(buffer_->data());\n+    auto words_addr = AsInt(words.data());\n+    return words_addr >= valid_addr &&\n+           words_addr + words.size() * sizeof(Word) <= valid_addr + buffer_->capacity();\n+  }\n+\n+  /// string_view of all Words which contain any bit in this Bitmap\n+  template <typename Word>\n+  util::basic_string_view<Word> words() const {\n+    auto bytes_addr = AsInt(bytes().data());\n+    auto words_addr = bytes_addr - bytes_addr % sizeof(Word);\n+    auto word_byte_count =\n+        BitUtil::RoundUpToPowerOf2(bytes_addr + bytes().size(), sizeof(Word)) -\n+        words_addr;\n+    return util::basic_string_view<Word>(reinterpret_cast<const Word*>(words_addr),\n+                                         word_byte_count / sizeof(Word));\n+  }\n+\n+  /// offset of first bit relative to words<Word>().data()\n+  template <typename Word>\n+  int64_t word_offset() const {\n+    return offset_ + (AsInt(buffer_->data()) - AsInt(words<Word>().data())) * 8;\n+  }\n+\n+ private:\n+  template <typename>\n+  struct VisitedIs {};\n+\n+  static size_t AsInt(const void* ptr) {\n+    return reinterpret_cast<size_t>(reinterpret_cast<const char*>(ptr));\n+  }\n+\n+  template <size_t N, typename Visitor>\n+  static void VisitImpl(const Bitmap (&bitmaps)[N], VisitedIs<std::bitset<N>>,\n+                        Visitor&& visitor) {\n+    auto bit_length = bitmaps[0].length();\n+    std::bitset<N> bits;\n \n Review comment:\n   Using something like `vector<bool>` might be faster, no? Unless the compiler is smart enough to unroll the inner loop and do constant propagation on the bitmasks.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-05T14:35:34.782+0000",
                    "updated": "2019-11-05T14:35:34.782+0000",
                    "started": "2019-11-05T14:35:34.782+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "338769",
                    "issueId": "13253921"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13253921/worklog/338770",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5771: ARROW-6396: [C++] Add overloads of Boolean kernels implementing Kleene logic\nURL: https://github.com/apache/arrow/pull/5771#discussion_r342578061\n \n \n\n ##########\n File path: cpp/src/arrow/util/bit_util.h\n ##########\n @@ -827,6 +834,164 @@ Status InvertBitmap(MemoryPool* pool, const uint8_t* bitmap, int64_t offset,\n ARROW_EXPORT\n int64_t CountSetBits(const uint8_t* data, int64_t bit_offset, int64_t length);\n \n+class ARROW_EXPORT Bitmap {\n+ public:\n+  Bitmap() = default;\n+\n+  Bitmap(std::shared_ptr<Buffer> buffer, int64_t offset, int64_t length)\n+      : buffer_(std::move(buffer)), offset_(offset), length_(length) {}\n+\n+  Bitmap(const uint8_t* data, int64_t offset, int64_t length)\n+      : buffer_(std::make_shared<Buffer>(data, BitUtil::BytesForBits(offset + length))),\n+        offset_(offset),\n+        length_(length) {}\n+\n+  Bitmap Slice(int64_t offset) const {\n+    return Bitmap(buffer_, offset_ + offset, length_ - offset);\n+  }\n+\n+  Bitmap Slice(int64_t offset, int64_t length) const {\n+    return Bitmap(buffer_, offset_ + offset, length);\n+  }\n+\n+  std::shared_ptr<BooleanArray> ToArray() const;\n+\n+  std::string ToString() const;\n+\n+  std::string Diff(const Bitmap& other) const;\n+\n+  bool GetBit(int64_t i) const { return BitUtil::GetBit(buffer_->data(), i + offset_); }\n+\n+  bool operator[](int64_t i) const { return GetBit(i); }\n+\n+  void SetBitTo(int64_t i, bool v) const {\n+    BitUtil::SetBitTo(buffer_->mutable_data(), i + offset_, v);\n+  }\n+\n+  /// \\brief Visit bits of this bitmap either as bitset<N> or as array<Word, N>.\n \n Review comment:\n   It might be clearer to expose this as two different methods `VisitBits` and `VisitWords`, no?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-05T14:35:35.061+0000",
                    "updated": "2019-11-05T14:35:35.061+0000",
                    "started": "2019-11-05T14:35:35.061+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "338770",
                    "issueId": "13253921"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13253921/worklog/338771",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5771: ARROW-6396: [C++] Add overloads of Boolean kernels implementing Kleene logic\nURL: https://github.com/apache/arrow/pull/5771#discussion_r342578215\n \n \n\n ##########\n File path: cpp/src/arrow/util/bit_util.h\n ##########\n @@ -827,6 +834,164 @@ Status InvertBitmap(MemoryPool* pool, const uint8_t* bitmap, int64_t offset,\n ARROW_EXPORT\n int64_t CountSetBits(const uint8_t* data, int64_t bit_offset, int64_t length);\n \n+class ARROW_EXPORT Bitmap {\n+ public:\n+  Bitmap() = default;\n+\n+  Bitmap(std::shared_ptr<Buffer> buffer, int64_t offset, int64_t length)\n+      : buffer_(std::move(buffer)), offset_(offset), length_(length) {}\n+\n+  Bitmap(const uint8_t* data, int64_t offset, int64_t length)\n+      : buffer_(std::make_shared<Buffer>(data, BitUtil::BytesForBits(offset + length))),\n+        offset_(offset),\n+        length_(length) {}\n+\n+  Bitmap Slice(int64_t offset) const {\n+    return Bitmap(buffer_, offset_ + offset, length_ - offset);\n+  }\n+\n+  Bitmap Slice(int64_t offset, int64_t length) const {\n+    return Bitmap(buffer_, offset_ + offset, length);\n+  }\n+\n+  std::shared_ptr<BooleanArray> ToArray() const;\n+\n+  std::string ToString() const;\n+\n+  std::string Diff(const Bitmap& other) const;\n+\n+  bool GetBit(int64_t i) const { return BitUtil::GetBit(buffer_->data(), i + offset_); }\n+\n+  bool operator[](int64_t i) const { return GetBit(i); }\n+\n+  void SetBitTo(int64_t i, bool v) const {\n+    BitUtil::SetBitTo(buffer_->mutable_data(), i + offset_, v);\n+  }\n+\n+  /// \\brief Visit bits of this bitmap either as bitset<N> or as array<Word, N>.\n+  ///\n+  /// If visiting by words, note that the every Word containing a bit\n+  /// must be accessible (and initialized, or Valgrind will barf).\n+  /// This is satisfied by most Buffers in Arrow space (which are allocated with\n+  /// maximum alignment and padded to contain whole cache lines).\n+  ///\n+  /// TODO(bkietz) allow for early termination\n \n Review comment:\n   By returning `Status`?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-05T14:35:35.192+0000",
                    "updated": "2019-11-05T14:35:35.192+0000",
                    "started": "2019-11-05T14:35:35.192+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "338771",
                    "issueId": "13253921"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13253921/worklog/338772",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5771: ARROW-6396: [C++] Add overloads of Boolean kernels implementing Kleene logic\nURL: https://github.com/apache/arrow/pull/5771#discussion_r342578874\n \n \n\n ##########\n File path: cpp/src/arrow/util/bit_util.h\n ##########\n @@ -827,6 +834,164 @@ Status InvertBitmap(MemoryPool* pool, const uint8_t* bitmap, int64_t offset,\n ARROW_EXPORT\n int64_t CountSetBits(const uint8_t* data, int64_t bit_offset, int64_t length);\n \n+class ARROW_EXPORT Bitmap {\n+ public:\n+  Bitmap() = default;\n+\n+  Bitmap(std::shared_ptr<Buffer> buffer, int64_t offset, int64_t length)\n+      : buffer_(std::move(buffer)), offset_(offset), length_(length) {}\n+\n+  Bitmap(const uint8_t* data, int64_t offset, int64_t length)\n+      : buffer_(std::make_shared<Buffer>(data, BitUtil::BytesForBits(offset + length))),\n+        offset_(offset),\n+        length_(length) {}\n+\n+  Bitmap Slice(int64_t offset) const {\n+    return Bitmap(buffer_, offset_ + offset, length_ - offset);\n+  }\n+\n+  Bitmap Slice(int64_t offset, int64_t length) const {\n+    return Bitmap(buffer_, offset_ + offset, length);\n+  }\n+\n+  std::shared_ptr<BooleanArray> ToArray() const;\n+\n+  std::string ToString() const;\n+\n+  std::string Diff(const Bitmap& other) const;\n+\n+  bool GetBit(int64_t i) const { return BitUtil::GetBit(buffer_->data(), i + offset_); }\n+\n+  bool operator[](int64_t i) const { return GetBit(i); }\n+\n+  void SetBitTo(int64_t i, bool v) const {\n+    BitUtil::SetBitTo(buffer_->mutable_data(), i + offset_, v);\n+  }\n+\n+  /// \\brief Visit bits of this bitmap either as bitset<N> or as array<Word, N>.\n+  ///\n+  /// If visiting by words, note that the every Word containing a bit\n+  /// must be accessible (and initialized, or Valgrind will barf).\n+  /// This is satisfied by most Buffers in Arrow space (which are allocated with\n+  /// maximum alignment and padded to contain whole cache lines).\n+  ///\n+  /// TODO(bkietz) allow for early termination\n+  template <size_t N, typename Visitor>\n+  static void Visit(const Bitmap (&bitmaps)[N], Visitor&& visitor) {\n+    VisitImpl(bitmaps, VisitedIs<internal::call_traits::argument_type<0, Visitor&&>>{},\n+              std::forward<Visitor>(visitor));\n+  }\n+\n+  const std::shared_ptr<Buffer>& buffer() const { return buffer_; }\n+\n+  /// offset of first bit relative to buffer().data()\n+  int64_t offset() const { return offset_; }\n+\n+  /// number of bits in this Bitmap\n+  int64_t length() const { return length_; }\n+\n+  /// string_view of all bytes which contain any bit in this Bitmap\n+  util::basic_string_view<uint8_t> bytes() const {\n+    auto byte_offset = offset_ / 8;\n+    auto byte_count = BitUtil::CeilDiv(offset_ + length_, 8) - byte_offset;\n+    return util::basic_string_view<uint8_t>(buffer_->data() + byte_offset, byte_count);\n+  }\n+\n+  template <typename Word>\n+  bool word_aligned() const {\n+    auto words = this->words<Word>();\n+    auto valid_addr = AsInt(buffer_->data());\n+    auto words_addr = AsInt(words.data());\n+    return words_addr >= valid_addr &&\n+           words_addr + words.size() * sizeof(Word) <= valid_addr + buffer_->capacity();\n+  }\n+\n+  /// string_view of all Words which contain any bit in this Bitmap\n+  template <typename Word>\n+  util::basic_string_view<Word> words() const {\n+    auto bytes_addr = AsInt(bytes().data());\n+    auto words_addr = bytes_addr - bytes_addr % sizeof(Word);\n+    auto word_byte_count =\n+        BitUtil::RoundUpToPowerOf2(bytes_addr + bytes().size(), sizeof(Word)) -\n+        words_addr;\n+    return util::basic_string_view<Word>(reinterpret_cast<const Word*>(words_addr),\n+                                         word_byte_count / sizeof(Word));\n+  }\n+\n+  /// offset of first bit relative to words<Word>().data()\n+  template <typename Word>\n+  int64_t word_offset() const {\n+    return offset_ + (AsInt(buffer_->data()) - AsInt(words<Word>().data())) * 8;\n+  }\n+\n+ private:\n+  template <typename>\n+  struct VisitedIs {};\n+\n+  static size_t AsInt(const void* ptr) {\n \n Review comment:\n   Call this `AsUInt` to stress that it returns an unsigned integer type? (it matters when doing comparisons)\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-05T14:35:35.647+0000",
                    "updated": "2019-11-05T14:35:35.647+0000",
                    "started": "2019-11-05T14:35:35.647+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "338772",
                    "issueId": "13253921"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13253921/worklog/338773",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5771: ARROW-6396: [C++] Add overloads of Boolean kernels implementing Kleene logic\nURL: https://github.com/apache/arrow/pull/5771#discussion_r342579584\n \n \n\n ##########\n File path: cpp/src/arrow/util/bit_util.h\n ##########\n @@ -827,6 +834,164 @@ Status InvertBitmap(MemoryPool* pool, const uint8_t* bitmap, int64_t offset,\n ARROW_EXPORT\n int64_t CountSetBits(const uint8_t* data, int64_t bit_offset, int64_t length);\n \n+class ARROW_EXPORT Bitmap {\n+ public:\n+  Bitmap() = default;\n+\n+  Bitmap(std::shared_ptr<Buffer> buffer, int64_t offset, int64_t length)\n+      : buffer_(std::move(buffer)), offset_(offset), length_(length) {}\n+\n+  Bitmap(const uint8_t* data, int64_t offset, int64_t length)\n+      : buffer_(std::make_shared<Buffer>(data, BitUtil::BytesForBits(offset + length))),\n+        offset_(offset),\n+        length_(length) {}\n+\n+  Bitmap Slice(int64_t offset) const {\n+    return Bitmap(buffer_, offset_ + offset, length_ - offset);\n+  }\n+\n+  Bitmap Slice(int64_t offset, int64_t length) const {\n+    return Bitmap(buffer_, offset_ + offset, length);\n+  }\n+\n+  std::shared_ptr<BooleanArray> ToArray() const;\n+\n+  std::string ToString() const;\n+\n+  std::string Diff(const Bitmap& other) const;\n+\n+  bool GetBit(int64_t i) const { return BitUtil::GetBit(buffer_->data(), i + offset_); }\n+\n+  bool operator[](int64_t i) const { return GetBit(i); }\n+\n+  void SetBitTo(int64_t i, bool v) const {\n+    BitUtil::SetBitTo(buffer_->mutable_data(), i + offset_, v);\n+  }\n+\n+  /// \\brief Visit bits of this bitmap either as bitset<N> or as array<Word, N>.\n+  ///\n+  /// If visiting by words, note that the every Word containing a bit\n+  /// must be accessible (and initialized, or Valgrind will barf).\n+  /// This is satisfied by most Buffers in Arrow space (which are allocated with\n+  /// maximum alignment and padded to contain whole cache lines).\n+  ///\n+  /// TODO(bkietz) allow for early termination\n+  template <size_t N, typename Visitor>\n+  static void Visit(const Bitmap (&bitmaps)[N], Visitor&& visitor) {\n+    VisitImpl(bitmaps, VisitedIs<internal::call_traits::argument_type<0, Visitor&&>>{},\n+              std::forward<Visitor>(visitor));\n+  }\n+\n+  const std::shared_ptr<Buffer>& buffer() const { return buffer_; }\n+\n+  /// offset of first bit relative to buffer().data()\n+  int64_t offset() const { return offset_; }\n+\n+  /// number of bits in this Bitmap\n+  int64_t length() const { return length_; }\n+\n+  /// string_view of all bytes which contain any bit in this Bitmap\n+  util::basic_string_view<uint8_t> bytes() const {\n+    auto byte_offset = offset_ / 8;\n+    auto byte_count = BitUtil::CeilDiv(offset_ + length_, 8) - byte_offset;\n+    return util::basic_string_view<uint8_t>(buffer_->data() + byte_offset, byte_count);\n+  }\n+\n+  template <typename Word>\n+  bool word_aligned() const {\n \n Review comment:\n   Add a docstring?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-05T14:35:36.362+0000",
                    "updated": "2019-11-05T14:35:36.362+0000",
                    "started": "2019-11-05T14:35:36.362+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "338773",
                    "issueId": "13253921"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13253921/worklog/338774",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5771: ARROW-6396: [C++] Add overloads of Boolean kernels implementing Kleene logic\nURL: https://github.com/apache/arrow/pull/5771#discussion_r342580108\n \n \n\n ##########\n File path: cpp/src/arrow/util/bit_util.h\n ##########\n @@ -827,6 +834,164 @@ Status InvertBitmap(MemoryPool* pool, const uint8_t* bitmap, int64_t offset,\n ARROW_EXPORT\n int64_t CountSetBits(const uint8_t* data, int64_t bit_offset, int64_t length);\n \n+class ARROW_EXPORT Bitmap {\n+ public:\n+  Bitmap() = default;\n+\n+  Bitmap(std::shared_ptr<Buffer> buffer, int64_t offset, int64_t length)\n+      : buffer_(std::move(buffer)), offset_(offset), length_(length) {}\n+\n+  Bitmap(const uint8_t* data, int64_t offset, int64_t length)\n+      : buffer_(std::make_shared<Buffer>(data, BitUtil::BytesForBits(offset + length))),\n+        offset_(offset),\n+        length_(length) {}\n+\n+  Bitmap Slice(int64_t offset) const {\n+    return Bitmap(buffer_, offset_ + offset, length_ - offset);\n+  }\n+\n+  Bitmap Slice(int64_t offset, int64_t length) const {\n+    return Bitmap(buffer_, offset_ + offset, length);\n+  }\n+\n+  std::shared_ptr<BooleanArray> ToArray() const;\n+\n+  std::string ToString() const;\n+\n+  std::string Diff(const Bitmap& other) const;\n+\n+  bool GetBit(int64_t i) const { return BitUtil::GetBit(buffer_->data(), i + offset_); }\n+\n+  bool operator[](int64_t i) const { return GetBit(i); }\n+\n+  void SetBitTo(int64_t i, bool v) const {\n+    BitUtil::SetBitTo(buffer_->mutable_data(), i + offset_, v);\n+  }\n+\n+  /// \\brief Visit bits of this bitmap either as bitset<N> or as array<Word, N>.\n+  ///\n+  /// If visiting by words, note that the every Word containing a bit\n+  /// must be accessible (and initialized, or Valgrind will barf).\n+  /// This is satisfied by most Buffers in Arrow space (which are allocated with\n+  /// maximum alignment and padded to contain whole cache lines).\n+  ///\n+  /// TODO(bkietz) allow for early termination\n+  template <size_t N, typename Visitor>\n+  static void Visit(const Bitmap (&bitmaps)[N], Visitor&& visitor) {\n+    VisitImpl(bitmaps, VisitedIs<internal::call_traits::argument_type<0, Visitor&&>>{},\n+              std::forward<Visitor>(visitor));\n+  }\n+\n+  const std::shared_ptr<Buffer>& buffer() const { return buffer_; }\n+\n+  /// offset of first bit relative to buffer().data()\n+  int64_t offset() const { return offset_; }\n+\n+  /// number of bits in this Bitmap\n+  int64_t length() const { return length_; }\n+\n+  /// string_view of all bytes which contain any bit in this Bitmap\n+  util::basic_string_view<uint8_t> bytes() const {\n+    auto byte_offset = offset_ / 8;\n+    auto byte_count = BitUtil::CeilDiv(offset_ + length_, 8) - byte_offset;\n+    return util::basic_string_view<uint8_t>(buffer_->data() + byte_offset, byte_count);\n+  }\n+\n+  template <typename Word>\n+  bool word_aligned() const {\n+    auto words = this->words<Word>();\n+    auto valid_addr = AsInt(buffer_->data());\n+    auto words_addr = AsInt(words.data());\n+    return words_addr >= valid_addr &&\n+           words_addr + words.size() * sizeof(Word) <= valid_addr + buffer_->capacity();\n \n Review comment:\n   Weird. \"Word aligned\" for me intuitively means:\r\n   * start address is word-aligned\r\n   * and length is a word-size multiple\r\n   \r\n   It seems that you're testing a less strict condition?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-05T14:35:36.643+0000",
                    "updated": "2019-11-05T14:35:36.643+0000",
                    "started": "2019-11-05T14:35:36.643+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "338774",
                    "issueId": "13253921"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13253921/worklog/338775",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5771: ARROW-6396: [C++] Add overloads of Boolean kernels implementing Kleene logic\nURL: https://github.com/apache/arrow/pull/5771#discussion_r342585847\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/boolean.h\n ##########\n @@ -59,6 +77,20 @@ Status And(FunctionContext* context, const Datum& left, const Datum& right, Datu\n ARROW_EXPORT\n Status Or(FunctionContext* context, const Datum& left, const Datum& right, Datum* out);\n \n+/// \\brief Element-wise OR of two boolean datums with a Kleene truth table\n+/// (null and true is true).\n \n Review comment:\n   You mean \"null or true is true\".\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-05T14:35:37.226+0000",
                    "updated": "2019-11-05T14:35:37.226+0000",
                    "started": "2019-11-05T14:35:37.226+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "338775",
                    "issueId": "13253921"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13253921/worklog/338776",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5771: ARROW-6396: [C++] Add overloads of Boolean kernels implementing Kleene logic\nURL: https://github.com/apache/arrow/pull/5771#discussion_r342590282\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/boolean_test.cc\n ##########\n @@ -154,23 +156,47 @@ TEST_F(TestBooleanKernel, And) {\n   std::vector<bool> values1 = {true, false, true, false, true, true};\n   std::vector<bool> values2 = {true, true, false, false, true, false};\n   std::vector<bool> values3 = {true, false, false, false, true, false};\n-  TestBinaryKernel(And, values1, values2, values3, values3);\n+  TestBinaryKernelPropagate(And, values1, values2, values3, values3);\n }\n \n TEST_F(TestBooleanKernel, Or) {\n   std::vector<bool> values1 = {true, false, true, false, true, true};\n   std::vector<bool> values2 = {true, true, false, false, true, false};\n   std::vector<bool> values3 = {true, true, true, false, true, true};\n   std::vector<bool> values3_nulls = {true, false, false, false, true, false};\n-  TestBinaryKernel(Or, values1, values2, values3, values3_nulls);\n+  TestBinaryKernelPropagate(Or, values1, values2, values3, values3_nulls);\n }\n \n TEST_F(TestBooleanKernel, Xor) {\n   std::vector<bool> values1 = {true, false, true, false, true, true};\n   std::vector<bool> values2 = {true, true, false, false, true, false};\n   std::vector<bool> values3 = {false, true, true, false, false, true};\n   std::vector<bool> values3_nulls = {true, false, false, false, true, false};\n-  TestBinaryKernel(Xor, values1, values2, values3, values3_nulls);\n+  TestBinaryKernelPropagate(Xor, values1, values2, values3, values3_nulls);\n+}\n+\n+TEST_F(TestBooleanKernel, KleeneAnd) {\n+  auto left = ArrayFromJSON(boolean(), \"    [true, true,  true, false, false, null]\");\n+  auto right = ArrayFromJSON(boolean(), \"   [true, false, null, false, null,  null]\");\n+  auto expected = ArrayFromJSON(boolean(), \"[true, false, null, false, false, null]\");\n+  TestBinaryKernel(KleeneAnd, left, right, expected);\n \n Review comment:\n   Should also check with left and right swapped.\r\n   (and below as well)\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-05T14:35:37.678+0000",
                    "updated": "2019-11-05T14:35:37.678+0000",
                    "started": "2019-11-05T14:35:37.678+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "338776",
                    "issueId": "13253921"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13253921/worklog/338777",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5771: ARROW-6396: [C++] Add overloads of Boolean kernels implementing Kleene logic\nURL: https://github.com/apache/arrow/pull/5771#discussion_r342593080\n \n \n\n ##########\n File path: cpp/src/arrow/util/bit_util_benchmark.cc\n ##########\n @@ -321,5 +380,16 @@ BENCHMARK(GenerateBitsUnrolled)->Arg(kBufferSize);\n BENCHMARK(CopyBitmapWithoutOffset)->Arg(kBufferSize);\n BENCHMARK(CopyBitmapWithOffset)->Arg(kBufferSize);\n \n+static std::vector<std::pair<int64_t, int64_t>> and_benchmark_ranges{\n+    // buffer sizes\n+    {kBufferSize, kBufferSize * 2},\n+    // offsets of second buffer\n+    {0, 2}};\n+\n+BENCHMARK(BenchmarkBitmapAnd)->Ranges(and_benchmark_ranges)->MinTime(1.0);\n \n Review comment:\n   Is it useful to set `MinTime` explicitly? @fsaintjacques \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-05T14:35:38.294+0000",
                    "updated": "2019-11-05T14:35:38.294+0000",
                    "started": "2019-11-05T14:35:38.293+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "338777",
                    "issueId": "13253921"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13253921/worklog/338778",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5771: ARROW-6396: [C++] Add overloads of Boolean kernels implementing Kleene logic\nURL: https://github.com/apache/arrow/pull/5771#discussion_r342594325\n \n \n\n ##########\n File path: cpp/src/arrow/util/bit_util_test.cc\n ##########\n @@ -1092,4 +1092,155 @@ TEST(BitUtil, BitsetStack) {\n   ASSERT_EQ(stack.TopSize(), 0);\n }\n \n+// test the basic assumption of word level Bitmap::Visit\n+TEST(Bitmap, ShiftingWordsOptimization) {\n \n Review comment:\n   Is this test useful? It doesn't seem to actually test our APIs, just simple bit manipulation logic?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-05T14:35:38.542+0000",
                    "updated": "2019-11-05T14:35:38.542+0000",
                    "started": "2019-11-05T14:35:38.542+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "338778",
                    "issueId": "13253921"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13253921/worklog/338779",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5771: ARROW-6396: [C++] Add overloads of Boolean kernels implementing Kleene logic\nURL: https://github.com/apache/arrow/pull/5771#discussion_r342595458\n \n \n\n ##########\n File path: cpp/src/arrow/util/bit_util_test.cc\n ##########\n @@ -1092,4 +1092,155 @@ TEST(BitUtil, BitsetStack) {\n   ASSERT_EQ(stack.TopSize(), 0);\n }\n \n+// test the basic assumption of word level Bitmap::Visit\n+TEST(Bitmap, ShiftingWordsOptimization) {\n+  // single word\n+  {\n+    uint64_t word;\n+    auto bytes = reinterpret_cast<uint8_t*>(&word);\n+    constexpr size_t kBitWidth = sizeof(word) * 8;\n+\n+    for (int seed = 0; seed < 64; ++seed) {\n+      random_bytes(sizeof(word), seed, bytes);\n+\n+      // bits are accessible through simple bit shifting of the word\n+      for (int i = 0; i < kBitWidth; ++i) {\n+        ASSERT_EQ(BitUtil::GetBit(bytes, i), bool((word >> i) & 1));\n+      }\n+\n+      // bit offset can therefore be accomodated by shifting the word\n+      for (int offset = 0; offset < (kBitWidth * 3) / 4; ++offset) {\n+        uint64_t shifted_word = word >> offset;\n+        auto shifted_bytes = reinterpret_cast<uint8_t*>(&shifted_word);\n+        ASSERT_TRUE(\n+            internal::BitmapEquals(bytes, offset, shifted_bytes, 0, kBitWidth - offset));\n+      }\n+    }\n+  }\n+\n+  // two words\n+  {\n+    uint64_t words[2];\n+    auto bytes = reinterpret_cast<uint8_t*>(words);\n+    constexpr size_t kBitWidth = sizeof(words[0]) * 8;\n+\n+    for (int seed = 0; seed < 64; ++seed) {\n+      random_bytes(sizeof(words), seed, bytes);\n+\n+      // bits are accessible through simple bit shifting of a word\n+      for (int i = 0; i < kBitWidth; ++i) {\n+        ASSERT_EQ(BitUtil::GetBit(bytes, i), bool((words[0] >> i) & 1));\n+      }\n+      for (int i = 0; i < kBitWidth; ++i) {\n+        ASSERT_EQ(BitUtil::GetBit(bytes, i + kBitWidth), bool((words[1] >> i) & 1));\n+      }\n+\n+      // bit offset can therefore be accomodated by shifting the word\n+      for (int offset = 1; offset < (kBitWidth * 3) / 4; offset += 3) {\n+        uint64_t shifted_words[2];\n+        shifted_words[0] = words[0] >> offset | (words[1] << (kBitWidth - offset));\n+        shifted_words[1] = words[1] >> offset;\n+        auto shifted_bytes = reinterpret_cast<uint8_t*>(shifted_words);\n+\n+        // from offset to unshifted word boundary\n+        ASSERT_TRUE(\n+            internal::BitmapEquals(bytes, offset, shifted_bytes, 0, kBitWidth - offset));\n+\n+        // from unshifted word boundary to shifted word boundary\n+        ASSERT_TRUE(internal::BitmapEquals(bytes, kBitWidth, shifted_bytes,\n+                                           kBitWidth - offset, offset));\n+\n+        // from shifted word boundary to end\n+        ASSERT_TRUE(internal::BitmapEquals(bytes, kBitWidth + offset, shifted_bytes,\n+                                           kBitWidth, kBitWidth - offset));\n+      }\n+    }\n+  }\n+}\n+\n+TEST(Bitmap, WordVisitable) {\n+  using internal::Bitmap;\n+\n+  constexpr int64_t kBitWidth = 8 * sizeof(uint64_t);\n+  uint64_t word;\n+  auto bytes = reinterpret_cast<uint8_t*>(&word);\n+\n+  // skip first byte in bitmap\n+  ASSERT_FALSE(Bitmap(bytes + 1, 0, kBitWidth - 8).template word_aligned<uint64_t>());\n+\n+  // exclude last byte from bitmap\n+  ASSERT_FALSE(Bitmap(bytes, 0, kBitWidth - 8).template word_aligned<uint64_t>());\n \n Review comment:\n   If `word_aligned` is useful, it would be good to test it with more offset and length values (including non-multiples of 8).\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-05T14:35:38.803+0000",
                    "updated": "2019-11-05T14:35:38.803+0000",
                    "started": "2019-11-05T14:35:38.802+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "338779",
                    "issueId": "13253921"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13253921/worklog/338780",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #5771: ARROW-6396: [C++] Add overloads of Boolean kernels implementing Kleene logic\nURL: https://github.com/apache/arrow/pull/5771#issuecomment-549849874\n \n \n   By the way, what benchmark results do you get?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-05T14:36:22.985+0000",
                    "updated": "2019-11-05T14:36:22.985+0000",
                    "started": "2019-11-05T14:36:22.985+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "338780",
                    "issueId": "13253921"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13253921/worklog/338819",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5771: ARROW-6396: [C++] Add overloads of Boolean kernels implementing Kleene logic\nURL: https://github.com/apache/arrow/pull/5771#discussion_r342642804\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/boolean.h\n ##########\n @@ -59,6 +77,20 @@ Status And(FunctionContext* context, const Datum& left, const Datum& right, Datu\n ARROW_EXPORT\n Status Or(FunctionContext* context, const Datum& left, const Datum& right, Datum* out);\n \n+/// \\brief Element-wise OR of two boolean datums with a Kleene truth table\n+/// (null and true is true).\n \n Review comment:\n   yes, thanks\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-05T16:03:28.491+0000",
                    "updated": "2019-11-05T16:03:28.491+0000",
                    "started": "2019-11-05T16:03:28.490+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "338819",
                    "issueId": "13253921"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13253921/worklog/338820",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5771: ARROW-6396: [C++] Add overloads of Boolean kernels implementing Kleene logic\nURL: https://github.com/apache/arrow/pull/5771#discussion_r342642936\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/boolean_test.cc\n ##########\n @@ -154,23 +156,47 @@ TEST_F(TestBooleanKernel, And) {\n   std::vector<bool> values1 = {true, false, true, false, true, true};\n   std::vector<bool> values2 = {true, true, false, false, true, false};\n   std::vector<bool> values3 = {true, false, false, false, true, false};\n-  TestBinaryKernel(And, values1, values2, values3, values3);\n+  TestBinaryKernelPropagate(And, values1, values2, values3, values3);\n }\n \n TEST_F(TestBooleanKernel, Or) {\n   std::vector<bool> values1 = {true, false, true, false, true, true};\n   std::vector<bool> values2 = {true, true, false, false, true, false};\n   std::vector<bool> values3 = {true, true, true, false, true, true};\n   std::vector<bool> values3_nulls = {true, false, false, false, true, false};\n-  TestBinaryKernel(Or, values1, values2, values3, values3_nulls);\n+  TestBinaryKernelPropagate(Or, values1, values2, values3, values3_nulls);\n }\n \n TEST_F(TestBooleanKernel, Xor) {\n   std::vector<bool> values1 = {true, false, true, false, true, true};\n   std::vector<bool> values2 = {true, true, false, false, true, false};\n   std::vector<bool> values3 = {false, true, true, false, false, true};\n   std::vector<bool> values3_nulls = {true, false, false, false, true, false};\n-  TestBinaryKernel(Xor, values1, values2, values3, values3_nulls);\n+  TestBinaryKernelPropagate(Xor, values1, values2, values3, values3_nulls);\n+}\n+\n+TEST_F(TestBooleanKernel, KleeneAnd) {\n+  auto left = ArrayFromJSON(boolean(), \"    [true, true,  true, false, false, null]\");\n+  auto right = ArrayFromJSON(boolean(), \"   [true, false, null, false, null,  null]\");\n+  auto expected = ArrayFromJSON(boolean(), \"[true, false, null, false, false, null]\");\n+  TestBinaryKernel(KleeneAnd, left, right, expected);\n \n Review comment:\n   will do\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-05T16:03:42.075+0000",
                    "updated": "2019-11-05T16:03:42.075+0000",
                    "started": "2019-11-05T16:03:42.074+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "338820",
                    "issueId": "13253921"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13253921/worklog/338821",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5771: ARROW-6396: [C++] Add overloads of Boolean kernels implementing Kleene logic\nURL: https://github.com/apache/arrow/pull/5771#discussion_r342643165\n \n \n\n ##########\n File path: cpp/src/arrow/util/bit_util.h\n ##########\n @@ -827,6 +834,164 @@ Status InvertBitmap(MemoryPool* pool, const uint8_t* bitmap, int64_t offset,\n ARROW_EXPORT\n int64_t CountSetBits(const uint8_t* data, int64_t bit_offset, int64_t length);\n \n+class ARROW_EXPORT Bitmap {\n+ public:\n+  Bitmap() = default;\n+\n+  Bitmap(std::shared_ptr<Buffer> buffer, int64_t offset, int64_t length)\n+      : buffer_(std::move(buffer)), offset_(offset), length_(length) {}\n+\n+  Bitmap(const uint8_t* data, int64_t offset, int64_t length)\n+      : buffer_(std::make_shared<Buffer>(data, BitUtil::BytesForBits(offset + length))),\n+        offset_(offset),\n+        length_(length) {}\n+\n+  Bitmap Slice(int64_t offset) const {\n+    return Bitmap(buffer_, offset_ + offset, length_ - offset);\n+  }\n+\n+  Bitmap Slice(int64_t offset, int64_t length) const {\n+    return Bitmap(buffer_, offset_ + offset, length);\n+  }\n+\n+  std::shared_ptr<BooleanArray> ToArray() const;\n \n Review comment:\n   It seemed cheap and potentially useful. I'll remove it\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-05T16:04:03.278+0000",
                    "updated": "2019-11-05T16:04:03.278+0000",
                    "started": "2019-11-05T16:04:03.277+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "338821",
                    "issueId": "13253921"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13253921/worklog/338824",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5771: ARROW-6396: [C++] Add overloads of Boolean kernels implementing Kleene logic\nURL: https://github.com/apache/arrow/pull/5771#discussion_r342643463\n \n \n\n ##########\n File path: cpp/src/arrow/util/bit_util_benchmark.cc\n ##########\n @@ -321,5 +380,16 @@ BENCHMARK(GenerateBitsUnrolled)->Arg(kBufferSize);\n BENCHMARK(CopyBitmapWithoutOffset)->Arg(kBufferSize);\n BENCHMARK(CopyBitmapWithOffset)->Arg(kBufferSize);\n \n+static std::vector<std::pair<int64_t, int64_t>> and_benchmark_ranges{\n+    // buffer sizes\n+    {kBufferSize, kBufferSize * 2},\n+    // offsets of second buffer\n+    {0, 2}};\n+\n+BENCHMARK(BenchmarkBitmapAnd)->Ranges(and_benchmark_ranges)->MinTime(1.0);\n \n Review comment:\n   @wesm advised that it decreases noise in micro benchmarks\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-05T16:04:26.890+0000",
                    "updated": "2019-11-05T16:04:26.890+0000",
                    "started": "2019-11-05T16:04:26.890+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "338824",
                    "issueId": "13253921"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 40800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@2b991699[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@77d2b99f[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2c091d7f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@4e754720[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6e5d1043[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@1ed493bf[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7a5287ff[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@1efa93d2[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@18a34746[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@22d07686[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4cd3705c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@67d0e17[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 40800,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Nov 12 12:05:37 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-11-12T12:05:37.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-6396/watchers",
            "watchCount": 3,
            "isWatching": false
        },
        "created": "2019-08-30T12:26:40.000+0000",
        "updated": "2020-04-10T15:32:51.000+0000",
        "timeoriginalestimate": null,
        "description": "This would add an enum ResolveNull \\{ KLEENE_LOGIC, NULL_PROPAGATE } to define the behavior of merging with AND/OR operators on boolean.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "11h 20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 40800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Add ResolveNullOptions to Logical kernels",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13253921/comment/16919757",
                    "id": "16919757",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "FWIW I wasn't familiar with the \"Kleene\" terminology",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-08-30T17:32:19.778+0000",
                    "updated": "2019-08-30T17:32:19.778+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13253921/comment/16972317",
                    "id": "16972317",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 5771\n[https://github.com/apache/arrow/pull/5771]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2019-11-12T12:05:37.723+0000",
                    "updated": "2019-11-12T12:05:37.723+0000"
                }
            ],
            "maxResults": 2,
            "total": 2,
            "startAt": 0
        },
        "customfield_12311820": "0|z066zk:",
        "customfield_12314139": null
    }
}