{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13036368",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13036368",
    "key": "ARROW-501",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12340948",
                "id": "12340948",
                "description": "",
                "name": "0.16.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-02-07"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/3",
            "id": "3",
            "description": "The problem is a duplicate of an existing issue.",
            "name": "Duplicate"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "csv",
            "filesystem",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12571608",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12571608",
                "type": {
                    "id": "12310051",
                    "name": "Supercedes",
                    "inward": "is superceded by",
                    "outward": "supercedes",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310051"
                },
                "inwardIssue": {
                    "id": "13260090",
                    "key": "ARROW-6764",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13260090",
                    "fields": {
                        "summary": "[C++] Add readahead iterator",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": null,
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
            "name": "Closed",
            "id": "6",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 19800,
            "total": 19800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 19800,
            "total": 19800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-501/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 42,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13036368/worklog/139198",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou opened a new pull request #2492: ARROW-501: [C++] Experimental readahead spooler\nURL: https://github.com/apache/arrow/pull/2492\n \n \n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-29T09:54:06.817+0000",
                    "updated": "2018-08-29T09:54:06.817+0000",
                    "started": "2018-08-29T09:54:06.816+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "139198",
                    "issueId": "13036368"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13036368/worklog/139227",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #2492: ARROW-501: [C++] Experimental readahead spooler\nURL: https://github.com/apache/arrow/pull/2492#issuecomment-416936709\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/2492?src=pr&el=h1) Report\n   > Merging [#2492](https://codecov.io/gh/apache/arrow/pull/2492?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/ef21ec9d4e57b61f9ab5144db3846e54e8c940ef?src=pr&el=desc) will **decrease** coverage by `0.06%`.\n   > The diff coverage is `96.63%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/2492/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/2492?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #2492      +/-   ##\n   ==========================================\n   - Coverage   86.28%   86.21%   -0.07%     \n   ==========================================\n     Files         308      311       +3     \n     Lines       47099    47338     +239     \n   ==========================================\n   + Hits        40639    40814     +175     \n   - Misses       6388     6450      +62     \n   - Partials       72       74       +2\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/2492?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [cpp/src/arrow/io/readahead.h](https://codecov.io/gh/apache/arrow/pull/2492/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9pby9yZWFkYWhlYWQuaA==) | `100% <100%> (\u00f8)` | |\n   | [cpp/src/plasma/test/client\\_tests.cc](https://codecov.io/gh/apache/arrow/pull/2492/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wbGFzbWEvdGVzdC9jbGllbnRfdGVzdHMuY2M=) | `100% <100%> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/test-util.h](https://codecov.io/gh/apache/arrow/pull/2492/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy90ZXN0LXV0aWwuaA==) | `76.25% <100%> (-0.49%)` | :arrow_down: |\n   | [cpp/src/arrow/io/readahead.cc](https://codecov.io/gh/apache/arrow/pull/2492/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9pby9yZWFkYWhlYWQuY2M=) | `93.68% <93.68%> (\u00f8)` | |\n   | [cpp/src/arrow/io/io-readahead-test.cc](https://codecov.io/gh/apache/arrow/pull/2492/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9pby9pby1yZWFkYWhlYWQtdGVzdC5jYw==) | `98.49% <98.49%> (\u00f8)` | |\n   | [go/arrow/math/int64\\_avx2\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2492/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC9pbnQ2NF9hdngyX2FtZDY0Lmdv) | `0% <0%> (-100%)` | :arrow_down: |\n   | [go/arrow/math/float64\\_avx2\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2492/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC9mbG9hdDY0X2F2eDJfYW1kNjQuZ28=) | `0% <0%> (-100%)` | :arrow_down: |\n   | [go/arrow/memory/memory\\_avx2\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2492/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWVtb3J5L21lbW9yeV9hdngyX2FtZDY0Lmdv) | `0% <0%> (-100%)` | :arrow_down: |\n   | [go/arrow/math/uint64\\_avx2\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2492/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC91aW50NjRfYXZ4Ml9hbWQ2NC5nbw==) | `0% <0%> (-100%)` | :arrow_down: |\n   | [go/arrow/math/uint64\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2492/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC91aW50NjRfYW1kNjQuZ28=) | `33.33% <0%> (-33.34%)` | :arrow_down: |\n   | ... and [8 more](https://codecov.io/gh/apache/arrow/pull/2492/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/2492?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/2492?src=pr&el=footer). Last update [ef21ec9...3cbaa80](https://codecov.io/gh/apache/arrow/pull/2492?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-29T12:36:27.800+0000",
                    "updated": "2018-08-29T12:36:27.800+0000",
                    "started": "2018-08-29T12:36:27.799+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "139227",
                    "issueId": "13036368"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13036368/worklog/139237",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "xhochy commented on a change in pull request #2492: ARROW-501: [C++] Experimental readahead spooler\nURL: https://github.com/apache/arrow/pull/2492#discussion_r213669429\n \n \n\n ##########\n File path: cpp/src/arrow/io/readahead.h\n ##########\n @@ -0,0 +1,90 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#ifndef ARROW_IO_READAHEAD_H\n+#define ARROW_IO_READAHEAD_H\n+\n+#include <memory>\n+#include <string>\n+\n+#include \"arrow/io/interfaces.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+class MemoryPool;\n+class ResizableBuffer;\n+class Status;\n+\n+namespace io {\n+namespace internal {\n+\n+struct ARROW_EXPORT ReadaheadBuffer {\n+  std::shared_ptr<ResizableBuffer> buffer;\n+  int64_t left_padding;\n+  int64_t right_padding;\n+};\n+\n+class ARROW_EXPORT ReadaheadSpooler {\n+ public:\n+  /// \\brief EXPERIMENTAL: Create a readahead spooler wrapping the given input stream.\n+  ///\n+  /// The spooler launches a background thread that reads up to a given number\n+  /// of fixed-size blocks in advance from the underlying stream.\n+  ReadaheadSpooler(MemoryPool* pool, std::shared_ptr<InputStream> raw,\n+                   int64_t read_size = kDefaultReadSize, int32_t readahead_queue_size = 1,\n+                   int64_t left_padding = 0, int64_t right_padding = 0);\n+\n+  explicit ReadaheadSpooler(std::shared_ptr<InputStream> raw,\n+                            int64_t read_size = kDefaultReadSize,\n+                            int32_t readahead_queue_size = 1, int64_t left_padding = 0,\n+                            int64_t right_padding = 0);\n+\n+  ~ReadaheadSpooler();\n+\n+  /// Configure zero-padding at beginning and end of buffers (default 0 bytes).\n+  int64_t GetLeftPadding();\n \n Review comment:\n   Can you add more descriptive comments about what the paddings do?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-29T13:12:02.244+0000",
                    "updated": "2018-08-29T13:12:02.244+0000",
                    "started": "2018-08-29T13:12:02.243+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "139237",
                    "issueId": "13036368"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13036368/worklog/139238",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "xhochy commented on a change in pull request #2492: ARROW-501: [C++] Experimental readahead spooler\nURL: https://github.com/apache/arrow/pull/2492#discussion_r213668502\n \n \n\n ##########\n File path: cpp/src/arrow/io/io-readahead-test.cc\n ##########\n @@ -0,0 +1,235 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <chrono>\n+#include <memory>\n+#include <string>\n+#include <thread>\n+#include <vector>\n+\n+#include <gtest/gtest.h>\n+\n+#include \"arrow/buffer.h\"\n+#include \"arrow/io/interfaces.h\"\n+#include \"arrow/io/memory.h\"\n+#include \"arrow/io/readahead.h\"\n+#include \"arrow/memory_pool.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/test-util.h\"\n+#include \"arrow/util/checked_cast.h\"\n+\n+namespace arrow {\n+namespace io {\n+namespace internal {\n+\n+static void sleep_for(double seconds) {\n+  std::this_thread::sleep_for(\n+      std::chrono::nanoseconds(static_cast<int64_t>(seconds * 1e9)));\n+}\n+\n+static void busy_wait(double seconds, std::function<bool()> predicate) {\n+  const double period = 0.001;\n+  for (int i = 0; !predicate() && i * period < seconds; ++i) {\n+    sleep_for(period);\n+  }\n+}\n+\n+std::shared_ptr<BufferReader> DataReader(const std::string& data) {\n+  std::shared_ptr<Buffer> buffer;\n+  ABORT_NOT_OK(AllocateBuffer(data.length(), &buffer));\n+  memcpy(buffer->mutable_data(), data.data(), data.length());\n+  return std::make_shared<BufferReader>(std::move(buffer));\n \n Review comment:\n   Why not `return buffer`? Shouldn't RVO take care of not duplicating the pointer twice?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-29T13:12:02.269+0000",
                    "updated": "2018-08-29T13:12:02.269+0000",
                    "started": "2018-08-29T13:12:02.269+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "139238",
                    "issueId": "13036368"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13036368/worklog/139249",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #2492: ARROW-501: [C++] Experimental readahead spooler\nURL: https://github.com/apache/arrow/pull/2492#discussion_r213675873\n \n \n\n ##########\n File path: cpp/src/arrow/io/io-readahead-test.cc\n ##########\n @@ -0,0 +1,235 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <chrono>\n+#include <memory>\n+#include <string>\n+#include <thread>\n+#include <vector>\n+\n+#include <gtest/gtest.h>\n+\n+#include \"arrow/buffer.h\"\n+#include \"arrow/io/interfaces.h\"\n+#include \"arrow/io/memory.h\"\n+#include \"arrow/io/readahead.h\"\n+#include \"arrow/memory_pool.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/test-util.h\"\n+#include \"arrow/util/checked_cast.h\"\n+\n+namespace arrow {\n+namespace io {\n+namespace internal {\n+\n+static void sleep_for(double seconds) {\n+  std::this_thread::sleep_for(\n+      std::chrono::nanoseconds(static_cast<int64_t>(seconds * 1e9)));\n+}\n+\n+static void busy_wait(double seconds, std::function<bool()> predicate) {\n+  const double period = 0.001;\n+  for (int i = 0; !predicate() && i * period < seconds; ++i) {\n+    sleep_for(period);\n+  }\n+}\n+\n+std::shared_ptr<BufferReader> DataReader(const std::string& data) {\n+  std::shared_ptr<Buffer> buffer;\n+  ABORT_NOT_OK(AllocateBuffer(data.length(), &buffer));\n+  memcpy(buffer->mutable_data(), data.data(), data.length());\n+  return std::make_shared<BufferReader>(std::move(buffer));\n \n Review comment:\n   Because I'm returning a BufferReader, not a Buffer ;-)\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-29T13:29:07.123+0000",
                    "updated": "2018-08-29T13:29:07.123+0000",
                    "started": "2018-08-29T13:29:07.122+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "139249",
                    "issueId": "13036368"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13036368/worklog/139253",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "xhochy commented on a change in pull request #2492: ARROW-501: [C++] Experimental readahead spooler\nURL: https://github.com/apache/arrow/pull/2492#discussion_r213678647\n \n \n\n ##########\n File path: cpp/src/arrow/io/io-readahead-test.cc\n ##########\n @@ -0,0 +1,235 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <chrono>\n+#include <memory>\n+#include <string>\n+#include <thread>\n+#include <vector>\n+\n+#include <gtest/gtest.h>\n+\n+#include \"arrow/buffer.h\"\n+#include \"arrow/io/interfaces.h\"\n+#include \"arrow/io/memory.h\"\n+#include \"arrow/io/readahead.h\"\n+#include \"arrow/memory_pool.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/test-util.h\"\n+#include \"arrow/util/checked_cast.h\"\n+\n+namespace arrow {\n+namespace io {\n+namespace internal {\n+\n+static void sleep_for(double seconds) {\n+  std::this_thread::sleep_for(\n+      std::chrono::nanoseconds(static_cast<int64_t>(seconds * 1e9)));\n+}\n+\n+static void busy_wait(double seconds, std::function<bool()> predicate) {\n+  const double period = 0.001;\n+  for (int i = 0; !predicate() && i * period < seconds; ++i) {\n+    sleep_for(period);\n+  }\n+}\n+\n+std::shared_ptr<BufferReader> DataReader(const std::string& data) {\n+  std::shared_ptr<Buffer> buffer;\n+  ABORT_NOT_OK(AllocateBuffer(data.length(), &buffer));\n+  memcpy(buffer->mutable_data(), data.data(), data.length());\n+  return std::make_shared<BufferReader>(std::move(buffer));\n \n Review comment:\n   Ah!\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-29T13:34:39.511+0000",
                    "updated": "2018-08-29T13:34:39.511+0000",
                    "started": "2018-08-29T13:34:39.510+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "139253",
                    "issueId": "13036368"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13036368/worklog/139297",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2492: ARROW-501: [C++] Experimental readahead spooler\nURL: https://github.com/apache/arrow/pull/2492#issuecomment-417004393\n \n \n   I am working on a review, probably will finish later today\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-29T15:53:09.491+0000",
                    "updated": "2018-08-29T15:53:09.491+0000",
                    "started": "2018-08-29T15:53:09.490+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "139297",
                    "issueId": "13036368"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13036368/worklog/139518",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2492: ARROW-501: [C++] Experimental readahead spooler\nURL: https://github.com/apache/arrow/pull/2492#discussion_r213692962\n \n \n\n ##########\n File path: cpp/src/arrow/io/CMakeLists.txt\n ##########\n @@ -26,6 +26,7 @@ if (ARROW_HDFS AND NOT ARROW_BOOST_HEADER_ONLY)\n endif()\n \n ADD_ARROW_TEST(io-memory-test)\n+ADD_ARROW_TEST(io-readahead-test)\n \n Review comment:\n   We might consider putting all async, buffering, etc. tests in a single test module to help avoid having a too large number of test executables longer term\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-30T04:55:54.258+0000",
                    "updated": "2018-08-30T04:55:54.258+0000",
                    "started": "2018-08-30T04:55:54.257+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "139518",
                    "issueId": "13036368"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13036368/worklog/139519",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2492: ARROW-501: [C++] Experimental readahead spooler\nURL: https://github.com/apache/arrow/pull/2492#discussion_r213901797\n \n \n\n ##########\n File path: cpp/src/arrow/io/readahead.h\n ##########\n @@ -0,0 +1,94 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#ifndef ARROW_IO_READAHEAD_H\n+#define ARROW_IO_READAHEAD_H\n+\n+#include <memory>\n+#include <string>\n+\n+#include \"arrow/io/interfaces.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+class MemoryPool;\n+class ResizableBuffer;\n+class Status;\n+\n+namespace io {\n+namespace internal {\n+\n+struct ARROW_EXPORT ReadaheadBuffer {\n+  std::shared_ptr<ResizableBuffer> buffer;\n+  int64_t left_padding;\n+  int64_t right_padding;\n+};\n+\n+class ARROW_EXPORT ReadaheadSpooler {\n+ public:\n+  /// \\brief EXPERIMENTAL: Create a readahead spooler wrapping the given input stream.\n+  ///\n+  /// The spooler launches a background thread that reads up to a given number\n+  /// of fixed-size blocks in advance from the underlying stream.\n+  ReadaheadSpooler(MemoryPool* pool, std::shared_ptr<InputStream> raw,\n+                   int64_t read_size = kDefaultReadSize, int32_t readahead_queue_size = 1,\n+                   int64_t left_padding = 0, int64_t right_padding = 0);\n+\n+  explicit ReadaheadSpooler(std::shared_ptr<InputStream> raw,\n+                            int64_t read_size = kDefaultReadSize,\n+                            int32_t readahead_queue_size = 1, int64_t left_padding = 0,\n+                            int64_t right_padding = 0);\n+\n+  ~ReadaheadSpooler();\n+\n+  /// Configure zero-padding at beginning and end of buffers (default 0 bytes).\n+  /// The buffers returned by Read() will be padded at the beginning and the end\n+  /// with the configured amount of (zeroed) bytes.\n+  /// Note that, as reading happens in background and in advance, changing the\n+  /// configured values might not affect Read() results immediately.\n+  int64_t GetLeftPadding();\n+  void SetLeftPadding(int64_t size);\n+\n+  int64_t GetRightPadding();\n+  void SetRightPadding(int64_t size);\n+\n+  /// \\brief Close the spooler.  This implicitly closes the underlying input stream.\n \n Review comment:\n   You think closing the InputStream is the correct thing (curious)? If we were more consistent about using unique_ptr I would say we should pass the InputStream to the ctor as that\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-30T04:55:54.267+0000",
                    "updated": "2018-08-30T04:55:54.267+0000",
                    "started": "2018-08-30T04:55:54.266+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "139519",
                    "issueId": "13036368"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13036368/worklog/139520",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2492: ARROW-501: [C++] Experimental readahead spooler\nURL: https://github.com/apache/arrow/pull/2492#discussion_r213901274\n \n \n\n ##########\n File path: cpp/src/arrow/io/io-readahead-test.cc\n ##########\n @@ -0,0 +1,235 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <chrono>\n+#include <memory>\n+#include <string>\n+#include <thread>\n+#include <vector>\n+\n+#include <gtest/gtest.h>\n+\n+#include \"arrow/buffer.h\"\n+#include \"arrow/io/interfaces.h\"\n+#include \"arrow/io/memory.h\"\n+#include \"arrow/io/readahead.h\"\n+#include \"arrow/memory_pool.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/test-util.h\"\n+#include \"arrow/util/checked_cast.h\"\n+\n+namespace arrow {\n+namespace io {\n+namespace internal {\n+\n+static void sleep_for(double seconds) {\n+  std::this_thread::sleep_for(\n+      std::chrono::nanoseconds(static_cast<int64_t>(seconds * 1e9)));\n+}\n+\n+static void busy_wait(double seconds, std::function<bool()> predicate) {\n+  const double period = 0.001;\n+  for (int i = 0; !predicate() && i * period < seconds; ++i) {\n+    sleep_for(period);\n+  }\n+}\n+\n+std::shared_ptr<BufferReader> DataReader(const std::string& data) {\n+  std::shared_ptr<Buffer> buffer;\n+  ABORT_NOT_OK(AllocateBuffer(data.length(), &buffer));\n+  memcpy(buffer->mutable_data(), data.data(), data.length());\n+  return std::make_shared<BufferReader>(std::move(buffer));\n+}\n+\n+static int64_t WaitForPosition(std::shared_ptr<RandomAccessFile> file, int64_t expected,\n+                               double seconds = 0.2) {\n+  int64_t pos = -1;\n+  busy_wait(seconds, [&]() -> bool {\n+    ABORT_NOT_OK(file->Tell(&pos));\n+    return pos >= expected;\n+  });\n+  return pos;\n+}\n+\n+static void AssertEventualPosition(std::shared_ptr<RandomAccessFile> file,\n \n Review comment:\n   Better to get in habit of passing `RandomAccessFile*` unless you need the `shared_ptr<T>`\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-30T04:55:54.298+0000",
                    "updated": "2018-08-30T04:55:54.298+0000",
                    "started": "2018-08-30T04:55:54.297+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "139520",
                    "issueId": "13036368"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13036368/worklog/139521",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2492: ARROW-501: [C++] Experimental readahead spooler\nURL: https://github.com/apache/arrow/pull/2492#discussion_r213707796\n \n \n\n ##########\n File path: cpp/src/arrow/io/readahead.h\n ##########\n @@ -0,0 +1,94 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#ifndef ARROW_IO_READAHEAD_H\n+#define ARROW_IO_READAHEAD_H\n+\n+#include <memory>\n+#include <string>\n+\n+#include \"arrow/io/interfaces.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+class MemoryPool;\n+class ResizableBuffer;\n+class Status;\n+\n+namespace io {\n+namespace internal {\n \n Review comment:\n   It would be useful to develop a public API for this that is useful for people that use Arrow as a library\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-30T04:55:54.309+0000",
                    "updated": "2018-08-30T04:55:54.309+0000",
                    "started": "2018-08-30T04:55:54.309+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "139521",
                    "issueId": "13036368"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13036368/worklog/139522",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2492: ARROW-501: [C++] Experimental readahead spooler\nURL: https://github.com/apache/arrow/pull/2492#discussion_r213902900\n \n \n\n ##########\n File path: cpp/src/arrow/io/readahead.cc\n ##########\n @@ -0,0 +1,222 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/io/readahead.h\"\n+#include \"arrow/buffer.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/util/logging.h\"\n+\n+#include <condition_variable>\n+#include <cstring>\n+#include <deque>\n+#include <memory>\n+#include <mutex>\n+#include <string>\n+#include <thread>\n+#include <utility>\n+\n+namespace arrow {\n+namespace io {\n+namespace internal {\n+\n+// ----------------------------------------------------------------------\n+// ReadaheadSpooler implementation\n+\n+class ReadaheadSpooler::Impl {\n+ public:\n+  Impl(MemoryPool* pool, std::shared_ptr<InputStream> raw, int64_t read_size,\n+       int32_t readahead_queue_size, int64_t left_padding, int64_t right_padding)\n+      : pool_(pool),\n+        raw_(raw),\n+        read_size_(read_size),\n+        readahead_queue_size_(readahead_queue_size),\n+        left_padding_(left_padding),\n+        right_padding_(right_padding) {\n+    DCHECK_NE(raw, nullptr);\n+    DCHECK_GT(read_size, 0);\n+    DCHECK_GT(readahead_queue_size, 0);\n+    io_worker_ = std::thread([&]() { WorkerLoop(); });\n+  }\n+\n+  ~Impl() { ARROW_UNUSED(Close()); }\n+\n+  Status Close() {\n+    std::unique_lock<std::mutex> lock(mutex_);\n+    please_close_ = true;\n+    io_wakeup_.notify_one();\n+    // Wait for IO thread to finish\n+    if (io_worker_.joinable()) {\n+      lock.unlock();\n+      io_worker_.join();\n+      lock.lock();\n+    }\n+    return raw_->Close();\n+  }\n+\n+  Status Read(ReadaheadBuffer* out) {\n+    std::unique_lock<std::mutex> lock(mutex_);\n+    while (true) {\n+      // Drain queue before querying other flags\n+      if (buffer_queue_.size() > 0) {\n+        *out = std::move(buffer_queue_.front());\n+        DCHECK_NE(out->buffer, nullptr);\n+        buffer_queue_.pop_front();\n+        // Need to fill up queue again\n+        io_wakeup_.notify_one();\n+        return Status::OK();\n+      }\n+      if (!read_status_.ok()) {\n+        // Got a read error, bail out\n+        return read_status_;\n+      }\n+      if (eof_) {\n+        // XXX maybe we need a EOF status code\n+        out->buffer.reset();\n+        return Status::OK();\n+      }\n+      // Readahead queue is empty and we're not closed yet, wait for more I/O\n+      io_progress_.wait(lock);\n+    }\n+  }\n+\n+  int64_t left_padding() {\n+    std::unique_lock<std::mutex> lock(mutex_);\n+    return left_padding_;\n+  }\n+\n+  void left_padding(int64_t size) {\n+    std::unique_lock<std::mutex> lock(mutex_);\n+    left_padding_ = size;\n+  }\n+\n+  int64_t right_padding() {\n+    std::unique_lock<std::mutex> lock(mutex_);\n+    return right_padding_;\n+  }\n+\n+  void right_padding(int64_t size) {\n+    std::unique_lock<std::mutex> lock(mutex_);\n+    right_padding_ = size;\n+  }\n+\n+ protected:\n+  // The background thread's main function\n+  void WorkerLoop() {\n+    std::unique_lock<std::mutex> lock(mutex_);\n+    Status st;\n+\n+    while (true) {\n+      if (please_close_) {\n+        goto eof;\n \n Review comment:\n   Haven't seen `goto` in this codebase yet, but if it's the best way to write this code it is ok with me\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-30T04:55:54.356+0000",
                    "updated": "2018-08-30T04:55:54.356+0000",
                    "started": "2018-08-30T04:55:54.355+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "139522",
                    "issueId": "13036368"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13036368/worklog/139524",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2492: ARROW-501: [C++] Experimental readahead spooler\nURL: https://github.com/apache/arrow/pull/2492#discussion_r213901910\n \n \n\n ##########\n File path: cpp/src/arrow/io/readahead.h\n ##########\n @@ -0,0 +1,94 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#ifndef ARROW_IO_READAHEAD_H\n+#define ARROW_IO_READAHEAD_H\n+\n+#include <memory>\n+#include <string>\n+\n+#include \"arrow/io/interfaces.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+class MemoryPool;\n+class ResizableBuffer;\n+class Status;\n+\n+namespace io {\n+namespace internal {\n+\n+struct ARROW_EXPORT ReadaheadBuffer {\n+  std::shared_ptr<ResizableBuffer> buffer;\n+  int64_t left_padding;\n+  int64_t right_padding;\n+};\n+\n+class ARROW_EXPORT ReadaheadSpooler {\n+ public:\n+  /// \\brief EXPERIMENTAL: Create a readahead spooler wrapping the given input stream.\n+  ///\n+  /// The spooler launches a background thread that reads up to a given number\n+  /// of fixed-size blocks in advance from the underlying stream.\n+  ReadaheadSpooler(MemoryPool* pool, std::shared_ptr<InputStream> raw,\n+                   int64_t read_size = kDefaultReadSize, int32_t readahead_queue_size = 1,\n+                   int64_t left_padding = 0, int64_t right_padding = 0);\n+\n+  explicit ReadaheadSpooler(std::shared_ptr<InputStream> raw,\n+                            int64_t read_size = kDefaultReadSize,\n+                            int32_t readahead_queue_size = 1, int64_t left_padding = 0,\n+                            int64_t right_padding = 0);\n+\n+  ~ReadaheadSpooler();\n+\n+  /// Configure zero-padding at beginning and end of buffers (default 0 bytes).\n+  /// The buffers returned by Read() will be padded at the beginning and the end\n+  /// with the configured amount of (zeroed) bytes.\n+  /// Note that, as reading happens in background and in advance, changing the\n+  /// configured values might not affect Read() results immediately.\n+  int64_t GetLeftPadding();\n+  void SetLeftPadding(int64_t size);\n+\n+  int64_t GetRightPadding();\n+  void SetRightPadding(int64_t size);\n+\n+  /// \\brief Close the spooler.  This implicitly closes the underlying input stream.\n+  Status Close();\n+\n+  /// \\brief Read a buffer from the queue.\n+  ///\n+  /// If the buffer pointer in the ReadaheadBuffer is null, then EOF was\n+  /// reached and/or the spooler was explicitly closed.\n+  /// Otherwise, the buffer will contain at most read_size bytes in addition\n+  /// to the configured padding (short reads are possible at the end of a file).\n+  // How do we allow reusing the buffer in ReadaheadBuffer? perhaps by using\n+  // a caching memory pool?\n \n Review comment:\n   This shouldn't be too complicated; we need an API to \"return\" a buffer to the pool so that it will be popped off a deque in the future. This would mean that we could end up with `queue_size + 1` buffers but that's true anyway in general\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-30T04:55:54.359+0000",
                    "updated": "2018-08-30T04:55:54.359+0000",
                    "started": "2018-08-30T04:55:54.359+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "139524",
                    "issueId": "13036368"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13036368/worklog/139523",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2492: ARROW-501: [C++] Experimental readahead spooler\nURL: https://github.com/apache/arrow/pull/2492#discussion_r213902544\n \n \n\n ##########\n File path: cpp/src/arrow/io/readahead.cc\n ##########\n @@ -0,0 +1,222 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/io/readahead.h\"\n+#include \"arrow/buffer.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/util/logging.h\"\n+\n+#include <condition_variable>\n+#include <cstring>\n+#include <deque>\n+#include <memory>\n+#include <mutex>\n+#include <string>\n+#include <thread>\n+#include <utility>\n+\n+namespace arrow {\n+namespace io {\n+namespace internal {\n+\n+// ----------------------------------------------------------------------\n+// ReadaheadSpooler implementation\n+\n+class ReadaheadSpooler::Impl {\n+ public:\n+  Impl(MemoryPool* pool, std::shared_ptr<InputStream> raw, int64_t read_size,\n+       int32_t readahead_queue_size, int64_t left_padding, int64_t right_padding)\n+      : pool_(pool),\n+        raw_(raw),\n+        read_size_(read_size),\n+        readahead_queue_size_(readahead_queue_size),\n+        left_padding_(left_padding),\n+        right_padding_(right_padding) {\n+    DCHECK_NE(raw, nullptr);\n+    DCHECK_GT(read_size, 0);\n+    DCHECK_GT(readahead_queue_size, 0);\n+    io_worker_ = std::thread([&]() { WorkerLoop(); });\n+  }\n+\n+  ~Impl() { ARROW_UNUSED(Close()); }\n+\n+  Status Close() {\n+    std::unique_lock<std::mutex> lock(mutex_);\n+    please_close_ = true;\n+    io_wakeup_.notify_one();\n+    // Wait for IO thread to finish\n+    if (io_worker_.joinable()) {\n+      lock.unlock();\n+      io_worker_.join();\n+      lock.lock();\n+    }\n+    return raw_->Close();\n+  }\n+\n+  Status Read(ReadaheadBuffer* out) {\n+    std::unique_lock<std::mutex> lock(mutex_);\n+    while (true) {\n+      // Drain queue before querying other flags\n+      if (buffer_queue_.size() > 0) {\n+        *out = std::move(buffer_queue_.front());\n+        DCHECK_NE(out->buffer, nullptr);\n+        buffer_queue_.pop_front();\n+        // Need to fill up queue again\n+        io_wakeup_.notify_one();\n+        return Status::OK();\n+      }\n+      if (!read_status_.ok()) {\n+        // Got a read error, bail out\n+        return read_status_;\n+      }\n+      if (eof_) {\n+        // XXX maybe we need a EOF status code\n \n Review comment:\n   Maybe, can open an issue to consider in more detail. I think it's OK to return null for now\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-30T04:55:54.359+0000",
                    "updated": "2018-08-30T04:55:54.359+0000",
                    "started": "2018-08-30T04:55:54.359+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "139523",
                    "issueId": "13036368"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13036368/worklog/139525",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2492: ARROW-501: [C++] Experimental readahead spooler\nURL: https://github.com/apache/arrow/pull/2492#discussion_r213901472\n \n \n\n ##########\n File path: cpp/src/arrow/io/readahead.h\n ##########\n @@ -0,0 +1,94 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#ifndef ARROW_IO_READAHEAD_H\n+#define ARROW_IO_READAHEAD_H\n+\n+#include <memory>\n+#include <string>\n+\n+#include \"arrow/io/interfaces.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+class MemoryPool;\n+class ResizableBuffer;\n+class Status;\n+\n+namespace io {\n+namespace internal {\n+\n+struct ARROW_EXPORT ReadaheadBuffer {\n+  std::shared_ptr<ResizableBuffer> buffer;\n+  int64_t left_padding;\n+  int64_t right_padding;\n+};\n+\n+class ARROW_EXPORT ReadaheadSpooler {\n \n Review comment:\n   I think it would be useful to have a version of this, if not this class itself, that implements the `InputStream` protocol. Then we can pass in our async readahead reader into a function or class that is none the wiser. If we don't do it now, let's make sure we have a JIRA about doing so. Not yet understanding the motivation for the padding, if not for that it would seem possible to implement this as a subclass of InputStream\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-30T04:55:54.360+0000",
                    "updated": "2018-08-30T04:55:54.360+0000",
                    "started": "2018-08-30T04:55:54.359+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "139525",
                    "issueId": "13036368"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13036368/worklog/139526",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2492: ARROW-501: [C++] Experimental readahead spooler\nURL: https://github.com/apache/arrow/pull/2492#discussion_r213902058\n \n \n\n ##########\n File path: cpp/src/arrow/io/readahead.h\n ##########\n @@ -0,0 +1,94 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#ifndef ARROW_IO_READAHEAD_H\n+#define ARROW_IO_READAHEAD_H\n+\n+#include <memory>\n+#include <string>\n+\n+#include \"arrow/io/interfaces.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+class MemoryPool;\n+class ResizableBuffer;\n+class Status;\n+\n+namespace io {\n+namespace internal {\n+\n+struct ARROW_EXPORT ReadaheadBuffer {\n+  std::shared_ptr<ResizableBuffer> buffer;\n+  int64_t left_padding;\n+  int64_t right_padding;\n+};\n+\n+class ARROW_EXPORT ReadaheadSpooler {\n+ public:\n+  /// \\brief EXPERIMENTAL: Create a readahead spooler wrapping the given input stream.\n+  ///\n+  /// The spooler launches a background thread that reads up to a given number\n+  /// of fixed-size blocks in advance from the underlying stream.\n+  ReadaheadSpooler(MemoryPool* pool, std::shared_ptr<InputStream> raw,\n+                   int64_t read_size = kDefaultReadSize, int32_t readahead_queue_size = 1,\n+                   int64_t left_padding = 0, int64_t right_padding = 0);\n+\n+  explicit ReadaheadSpooler(std::shared_ptr<InputStream> raw,\n+                            int64_t read_size = kDefaultReadSize,\n+                            int32_t readahead_queue_size = 1, int64_t left_padding = 0,\n+                            int64_t right_padding = 0);\n+\n+  ~ReadaheadSpooler();\n+\n+  /// Configure zero-padding at beginning and end of buffers (default 0 bytes).\n+  /// The buffers returned by Read() will be padded at the beginning and the end\n+  /// with the configured amount of (zeroed) bytes.\n+  /// Note that, as reading happens in background and in advance, changing the\n+  /// configured values might not affect Read() results immediately.\n+  int64_t GetLeftPadding();\n+  void SetLeftPadding(int64_t size);\n+\n+  int64_t GetRightPadding();\n+  void SetRightPadding(int64_t size);\n+\n+  /// \\brief Close the spooler.  This implicitly closes the underlying input stream.\n+  Status Close();\n+\n+  /// \\brief Read a buffer from the queue.\n+  ///\n+  /// If the buffer pointer in the ReadaheadBuffer is null, then EOF was\n+  /// reached and/or the spooler was explicitly closed.\n+  /// Otherwise, the buffer will contain at most read_size bytes in addition\n+  /// to the configured padding (short reads are possible at the end of a file).\n+  // How do we allow reusing the buffer in ReadaheadBuffer? perhaps by using\n+  // a caching memory pool?\n+  Status Read(ReadaheadBuffer* out);\n+\n+ private:\n+  static constexpr int64_t kDefaultReadSize = 1 << 20;  // 1 MB\n+\n+  class ARROW_NO_EXPORT Impl;\n \n Review comment:\n   Nit: name this ReadaheadSpoolerImpl\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-30T04:55:54.367+0000",
                    "updated": "2018-08-30T04:55:54.367+0000",
                    "started": "2018-08-30T04:55:54.366+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "139526",
                    "issueId": "13036368"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13036368/worklog/139527",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2492: ARROW-501: [C++] Experimental readahead spooler\nURL: https://github.com/apache/arrow/pull/2492#discussion_r213901394\n \n \n\n ##########\n File path: cpp/src/arrow/io/readahead.h\n ##########\n @@ -0,0 +1,94 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#ifndef ARROW_IO_READAHEAD_H\n+#define ARROW_IO_READAHEAD_H\n+\n+#include <memory>\n+#include <string>\n+\n+#include \"arrow/io/interfaces.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+class MemoryPool;\n+class ResizableBuffer;\n+class Status;\n+\n+namespace io {\n+namespace internal {\n+\n+struct ARROW_EXPORT ReadaheadBuffer {\n+  std::shared_ptr<ResizableBuffer> buffer;\n+  int64_t left_padding;\n+  int64_t right_padding;\n+};\n+\n+class ARROW_EXPORT ReadaheadSpooler {\n+ public:\n+  /// \\brief EXPERIMENTAL: Create a readahead spooler wrapping the given input stream.\n+  ///\n+  /// The spooler launches a background thread that reads up to a given number\n+  /// of fixed-size blocks in advance from the underlying stream.\n \n Review comment:\n   Could use a bit more documentation about what left padding and right padding are\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-30T04:55:54.368+0000",
                    "updated": "2018-08-30T04:55:54.368+0000",
                    "started": "2018-08-30T04:55:54.368+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "139527",
                    "issueId": "13036368"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13036368/worklog/139528",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2492: ARROW-501: [C++] Experimental readahead spooler\nURL: https://github.com/apache/arrow/pull/2492#discussion_r213901065\n \n \n\n ##########\n File path: cpp/src/arrow/io/CMakeLists.txt\n ##########\n @@ -38,4 +39,5 @@ install(FILES\n   hdfs.h\n   interfaces.h\n   memory.h\n+  readahead.h\n \n Review comment:\n   May consider creating a module with many async interfaces, `arrow/io/async.h`\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-30T04:55:54.369+0000",
                    "updated": "2018-08-30T04:55:54.369+0000",
                    "started": "2018-08-30T04:55:54.368+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "139528",
                    "issueId": "13036368"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13036368/worklog/139529",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2492: ARROW-501: [C++] Experimental readahead spooler\nURL: https://github.com/apache/arrow/pull/2492#discussion_r213901526\n \n \n\n ##########\n File path: cpp/src/arrow/io/readahead.h\n ##########\n @@ -0,0 +1,94 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#ifndef ARROW_IO_READAHEAD_H\n+#define ARROW_IO_READAHEAD_H\n+\n+#include <memory>\n+#include <string>\n+\n+#include \"arrow/io/interfaces.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+class MemoryPool;\n+class ResizableBuffer;\n+class Status;\n+\n+namespace io {\n+namespace internal {\n+\n+struct ARROW_EXPORT ReadaheadBuffer {\n+  std::shared_ptr<ResizableBuffer> buffer;\n+  int64_t left_padding;\n+  int64_t right_padding;\n+};\n+\n+class ARROW_EXPORT ReadaheadSpooler {\n+ public:\n+  /// \\brief EXPERIMENTAL: Create a readahead spooler wrapping the given input stream.\n+  ///\n+  /// The spooler launches a background thread that reads up to a given number\n+  /// of fixed-size blocks in advance from the underlying stream.\n+  ReadaheadSpooler(MemoryPool* pool, std::shared_ptr<InputStream> raw,\n \n Review comment:\n   Pass `shared_ptr` as `const&` to avoid unnecessary copies\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-30T04:55:54.373+0000",
                    "updated": "2018-08-30T04:55:54.373+0000",
                    "started": "2018-08-30T04:55:54.373+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "139529",
                    "issueId": "13036368"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13036368/worklog/139569",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #2492: ARROW-501: [C++] Experimental readahead spooler\nURL: https://github.com/apache/arrow/pull/2492#discussion_r213926413\n \n \n\n ##########\n File path: cpp/src/arrow/io/CMakeLists.txt\n ##########\n @@ -26,6 +26,7 @@ if (ARROW_HDFS AND NOT ARROW_BOOST_HEADER_ONLY)\n endif()\n \n ADD_ARROW_TEST(io-memory-test)\n+ADD_ARROW_TEST(io-readahead-test)\n \n Review comment:\n   I'd rather have separate test modules. array-test.cc is unreadable for me.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-30T07:20:36.016+0000",
                    "updated": "2018-08-30T07:20:36.016+0000",
                    "started": "2018-08-30T07:20:36.015+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "139569",
                    "issueId": "13036368"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 19800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@66a6a27[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@677c97d7[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@63d753e6[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@6016a264[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6d290cd9[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@128dc634[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4b9cffe0[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@1ecc6175[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3b26f9b1[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@47662487[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6b29a074[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@1613b3ad[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 19800,
        "customfield_12312520": null,
        "customfield_12312521": "Sat Aug 27 14:41:46 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-10-09T09:54:03.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-501/watchers",
            "watchCount": 3,
            "isWatching": true
        },
        "created": "2017-01-19T22:31:58.000+0000",
        "updated": "2022-08-27T14:41:46.000+0000",
        "timeoriginalestimate": null,
        "description": "Related to ARROW-500, when processing an input data stream, we may wish to continue buffering input (up to an maximum buffer size) in between synchronous Read calls",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "5.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 19800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Implement concurrent / buffering InputStream for streaming data use cases",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13036368/comment/16510145",
                    "id": "16510145",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "I've been thinking about this lately. I would like to have a \"Spooler\" abstraction that performs IO or other concurrent work while another thread is doing something else. For example:\r\n\r\n{code}\r\nconst int buffer_size = 1 << 20;\r\nInputStreamSpooler spooler(stream, buffer_size);\r\n\r\n// This will start reading the first chunk from stream in a background thread\r\nspooler->Start();\r\n\r\nstd::shared_ptr<Buffer> chunk;\r\n\r\n// This blocks until the chunk is ready, returns it, then begins reading the next chunk right away\r\nwhile (!spooler->is_finished()) {\r\n  RETURN_NOT_OK(spooler->Next(&chunk));\r\n  // Do something with chunk\r\n}\r\n\r\nspooler->Stop();\r\n{code}\r\n\r\nAre there some concurrency primitives that provide this in libraries like facebook/folly that might help with this type of background concurrency? ",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-06-12T20:16:14.767+0000",
                    "updated": "2018-06-12T20:16:14.767+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13036368/comment/16593028",
                    "id": "16593028",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "I was thinking we could use {{std::future}} to implement this, but it seems that there is quite a bit of overhead associated with this in many cases (see e.g. https://www.quora.com/Why-is-C++11-std-future-so-slow). It may be better to spawn a single thread that blocks on a condition variable so that it can be notified when {{Next}} is called to begin reading the next chunk",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-08-26T21:04:53.215+0000",
                    "updated": "2018-08-26T21:04:53.215+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13036368/comment/16593945",
                    "id": "16593945",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "If we want to do this, I think a simple background thread is the right piece of logic. Note that by definition, it will probably incur additional memory copies, though, unless we add a method allowing partial / best-effort reads.\r\n\r\nEdit : the comment about memory copies only applies if we want a Stream interface. If we define the chunk size upfront, and/or let the readahead wrapper choose chunk size dynamically, then it's not a problem.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2018-08-27T17:04:04.930+0000",
                    "updated": "2018-08-27T17:11:50.204+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13036368/comment/16593968",
                    "id": "16593968",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "We should think up front about optimizations to enable temporary allocations to be reused. For example, suppose you are reading 1MB at a time, then the spooler could allocated 2 buffers so that while one buffer is being used, the other one can be filled in the background. We would need to have an API to be able to indicate that a buffer is \"done\" and can be reused (and the user would therefore be responsible to not retain any references to that memory elsewhere since it will be overwritten). I can try to mock up some example code if what I'm writing is not clear",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-08-27T17:16:20.220+0000",
                    "updated": "2018-08-27T17:16:20.220+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13036368/comment/16593977",
                    "id": "16593977",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "There's probably different kinds of APIs we need to create for different use cases. For example implementing the current {{InputStream}} API while allowing background buffering would be immediately helpful in libraries like parquet-cpp",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-08-27T17:20:09.885+0000",
                    "updated": "2018-08-27T17:20:09.885+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13036368/comment/16593996",
                    "id": "16593996",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Yes, I understand your idea. There are basically two possible APIs, and we can implement all two:\r\n\r\n1) a {{ReadaheadSpooler}} object that reads up to N fixed-size buffers in advance (N and buffer size being fixed in the constructor call)\r\n\r\n2) a regular {{InputStream}} implementation that reads some data ahead speculatively in some internal buffer or queue of buffers, at the cost of risking an additional copy when the user calls {{Read(<some given size>)}}\r\n\r\nNote that for CSV reading, it would be desirable for the readahead spooler to leave some configurable padding in the front of buffers. This way, if a preceding buffer had an unfinished line at the end, you can copy it in front of the next buffer without having to copy the (much larger) rest of the buffer. Symetrically, some padding at the end of buffers can be useful too (I expect that it might speed up some CSV algorithms).",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2018-08-27T17:30:12.398+0000",
                    "updated": "2018-08-27T17:30:12.398+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13036368/comment/16594020",
                    "id": "16594020",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Makes sense. In the case of CSV reading, we would want to arrange so that the abstraction does not incur much or any overhead when being used locally with memory-mapped files (so the OS manages IO from the filesystem even if we are dealing semantically with {{arrow::Buffer}} objects in the C++ code)",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-08-27T17:46:45.691+0000",
                    "updated": "2018-08-27T17:46:45.691+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13036368/comment/16594123",
                    "id": "16594123",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Ah... Well, it would make more sense to treat a memory-mapped file as a memory area, not a file. That's the whole point of memory-mapped files after all. I'm not sure the current abstraction makes sense (though there is some magical thought around where people seem to think that mmap() makes things intrinsically faster than read() calls).",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2018-08-27T19:15:17.392+0000",
                    "updated": "2018-08-27T19:15:17.392+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13036368/comment/16594127",
                    "id": "16594127",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Well, in my experience applications that use mmap are faster than ones that use read(...). But the reasons for it more have to do with primitive IO access patterns (i.e. synchronous calls vs. async) and memory management. We'll have ample room to experience ourselves",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-08-27T19:18:55.386+0000",
                    "updated": "2018-08-27T19:18:55.386+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13036368/comment/16947504",
                    "id": "16947504",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "The readahead iterator and the input stream iterator added in ARROW-6764 should address this need.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2019-10-09T09:54:03.366+0000",
                    "updated": "2019-10-09T09:54:03.366+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13036368/comment/16947962",
                    "id": "16947962",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "We still don't have a {{ReadaheadInputStream}} (that implements the {{InputStream}} interface) but we can add one when it is actually needed. ",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-10-09T20:16:08.234+0000",
                    "updated": "2019-10-09T20:16:08.234+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13036368/comment/17585836",
                    "id": "17585836",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=toddfarmer",
                        "name": "toddfarmer",
                        "key": "JIRAUSER288796",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=39935",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=39935",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=39935",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=39935"
                        },
                        "displayName": "Todd Farmer",
                        "active": true,
                        "timeZone": "America/Boise"
                    },
                    "body": "Transitioning issue from Resolved to Closed to based on resolution field value.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=toddfarmer",
                        "name": "toddfarmer",
                        "key": "JIRAUSER288796",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=39935",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=39935",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=39935",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=39935"
                        },
                        "displayName": "Todd Farmer",
                        "active": true,
                        "timeZone": "America/Boise"
                    },
                    "created": "2022-08-27T14:41:46.375+0000",
                    "updated": "2022-08-27T14:41:46.375+0000"
                }
            ],
            "maxResults": 12,
            "total": 12,
            "startAt": 0
        },
        "customfield_12311820": "0|i38yjr:",
        "customfield_12314139": null
    }
}