{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13215390",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13215390",
    "key": "ARROW-4552",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12344961",
                "id": "12344961",
                "description": "",
                "name": "JS-0.4.1",
                "archived": false,
                "released": true,
                "releaseDate": "2019-03-24"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12342901",
                "id": "12342901",
                "description": "",
                "name": "JS-0.4.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-02-11"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=paul.e.taylor",
            "name": "paul.e.taylor",
            "key": "paul.e.taylor",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Paul Taylor",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12332552",
                "id": "12332552",
                "name": "JavaScript"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=paul.e.taylor",
            "name": "paul.e.taylor",
            "key": "paul.e.taylor",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Paul Taylor",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=paul.e.taylor",
            "name": "paul.e.taylor",
            "key": "paul.e.taylor",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Paul Taylor",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "aggregateprogress": {
            "progress": 22200,
            "total": 22200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 22200,
            "total": 22200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-4552/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 38,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13215390/worklog/197939",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "trxcllnt commented on pull request #3634: ARROW-4552: [JS] Add high-level Table and Column convenience methods\nURL: https://github.com/apache/arrow/pull/3634\n \n \n   This PR closes the following JIRAs:\r\n   \r\n   * [ARROW-4552](https://issues.apache.org/jira/browse/ARROW-4552) - Add Table and Schema `assign(other)` implementations\r\n   * [ARROW-4553](https://issues.apache.org/jira/browse/ARROW-4553) - Implement Schema/Field/DataType comparators\r\n   * [ARROW-4554](https://issues.apache.org/jira/browse/ARROW-4554) - Implement logic for combining Vectors with different lengths/chunksizes\r\n   * [ARROW-4555](https://issues.apache.org/jira/browse/ARROW-4555) - Add high-level Table and Column creation methods\r\n   * [ARROW-4557](https://issues.apache.org/jira/browse/ARROW-4557) - Add Table/Schema/RecordBatch `selectAt(...indices)` method\r\n   \r\n   I extracted a few more  high-level helper methods I've had laying around for creating, selecting, or manipulating Tables/Columns/Schemas/RecordBatches.\r\n   \r\n   1. We currently have a `table.select(...colNames)` implementation, so I also added a `table.selectAt(...colIndices)` method to complement. Super handy when you have duplicates.\r\n   2. I added a basic `table.assign(otherTable)` impl. I added logic to compare Schemas/Fields/DataTypes in order to de-dupe reliably, which lives in the [`TypeComparator` Visitor](https://github.com/trxcllnt/arrow/blob/a67bd562cf6c4860bdce027981df859398e41b6d/js/src/visitor/typecomparator.ts#L83). I expose this via `compareTo()` methods on the Schema, Field, and DataType for ease of use. Bonus: the Writer [can now discern](https://github.com/trxcllnt/arrow/blob/a67bd562cf6c4860bdce027981df859398e41b6d/js/src/ipc/writer.ts#L129) between RecordBatches of the same stream whose Schemas aren't reference-equal.\r\n   3. I've also added logic to distribute Vectors of different lengths (or different internal chunk sizes) evenly across RecordBatches, to support a nearly zero-copy `Table#assign()` impl. I say nearly zero-copy, because there's a bit of allocation/copying to backfill null bitmaps if chunks don't exactly line up. But this also means [it's a bit easier](https://github.com/trxcllnt/arrow/blob/a67bd562cf6c4860bdce027981df859398e41b6d/js/test/unit/table-tests.ts#L178) now to create Tables or RecordBatches from values in-memory whose lengths may not exactly line up:\r\n   ```ts\r\n   const table = Table.new(\r\n     Column.new('foo', IntVector.from(arange(new Int32Array(10))),\r\n     Column.new('bar', FloatVector.from(arange(new Float32Array(100))))\r\n   );\r\n   ```\r\n   4. And lastly, I added [some more more tests](https://github.com/trxcllnt/arrow/blob/js/high-level-table-column-fns/js/test/unit/table/serialize-tests.ts#L38) to ensure various combinations of select/slice/concat/assign can round-trip through IPC and back again.\r\n   \r\n   ```ts\r\n   \r\n   const table1 = Table.new(\r\n       Column.new('a', Int32Vector.from(i32s)),\r\n       Column.new('b', Float32Vector.from(f32s)),\r\n       Column.new('c', Float64Vector.from(f64s))\r\n   );\r\n   \r\n   const table2 = Table.new(\r\n       Column.new('d', Utf8Vector.from(strs)),\r\n       Column.new('d', BoolVector.from(bools)),\r\n       Column.new('d', Int32Vector.from(i32s)),\r\n   );\r\n   \r\n   const table3 = table1.select('b', 'c').assign(table2.selectAt(0, 1));\r\n   \r\n   console.log(table3.schema.fields)\r\n   // > [\r\n   // >     ('b', Float32), \r\n   // >     ('c', Float64), \r\n   // >     ('d', Utf8), \r\n   // >     ('d', Bool)\r\n   // > ]\r\n   \r\n   ```\r\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-13T06:02:56.821+0000",
                    "updated": "2019-02-13T06:02:56.821+0000",
                    "started": "2019-02-13T06:02:56.820+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "197939",
                    "issueId": "13215390"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13215390/worklog/197944",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #3634: ARROW-4552: [JS] Add high-level Table and Column convenience methods\nURL: https://github.com/apache/arrow/pull/3634#issuecomment-463075066\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/3634?src=pr&el=h1) Report\n   > Merging [#3634](https://codecov.io/gh/apache/arrow/pull/3634?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/5ed6fb5bc2a1f718de3cbd72a63698ca023c2543?src=pr&el=desc) will **increase** coverage by `1.88%`.\n   > The diff coverage is `75%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/3634/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/3634?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #3634      +/-   ##\n   ==========================================\n   + Coverage    87.7%   89.58%   +1.88%     \n   ==========================================\n     Files         685       74     -611     \n     Lines       83743     5283   -78460     \n     Branches     1081     1197     +116     \n   ==========================================\n   - Hits        73449     4733   -68716     \n   + Misses      10183      542    -9641     \n   + Partials      111        8     -103\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/3634?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [js/src/vector/float.ts](https://codecov.io/gh/apache/arrow/pull/3634/diff?src=pr&el=tree#diff-anMvc3JjL3ZlY3Rvci9mbG9hdC50cw==) | `78.57% <\u00f8> (+21.42%)` | :arrow_up: |\n   | [js/src/compute/dataframe.ts](https://codecov.io/gh/apache/arrow/pull/3634/diff?src=pr&el=tree#diff-anMvc3JjL2NvbXB1dGUvZGF0YWZyYW1lLnRz) | `92.15% <100%> (\u00f8)` | :arrow_up: |\n   | [js/src/ipc/writer.ts](https://codecov.io/gh/apache/arrow/pull/3634/diff?src=pr&el=tree#diff-anMvc3JjL2lwYy93cml0ZXIudHM=) | `90.29% <100%> (\u00f8)` | :arrow_up: |\n   | [js/src/vector.ts](https://codecov.io/gh/apache/arrow/pull/3634/diff?src=pr&el=tree#diff-anMvc3JjL3ZlY3Rvci50cw==) | `100% <100%> (\u00f8)` | :arrow_up: |\n   | [js/src/visitor/vectorassembler.ts](https://codecov.io/gh/apache/arrow/pull/3634/diff?src=pr&el=tree#diff-anMvc3JjL3Zpc2l0b3IvdmVjdG9yYXNzZW1ibGVyLnRz) | `82.17% <100%> (-0.85%)` | :arrow_down: |\n   | [js/src/vector/chunked.ts](https://codecov.io/gh/apache/arrow/pull/3634/diff?src=pr&el=tree#diff-anMvc3JjL3ZlY3Rvci9jaHVua2VkLnRz) | `83.44% <100%> (-0.12%)` | :arrow_down: |\n   | [js/src/visitor/jsonvectorassembler.ts](https://codecov.io/gh/apache/arrow/pull/3634/diff?src=pr&el=tree#diff-anMvc3JjL3Zpc2l0b3IvanNvbnZlY3RvcmFzc2VtYmxlci50cw==) | `100% <100%> (\u00f8)` | :arrow_up: |\n   | [js/src/table.ts](https://codecov.io/gh/apache/arrow/pull/3634/diff?src=pr&el=tree#diff-anMvc3JjL3RhYmxlLnRz) | `94.39% <100%> (+2.08%)` | :arrow_up: |\n   | [js/src/vector/index.ts](https://codecov.io/gh/apache/arrow/pull/3634/diff?src=pr&el=tree#diff-anMvc3JjL3ZlY3Rvci9pbmRleC50cw==) | `93.25% <100%> (\u00f8)` | :arrow_up: |\n   | [js/src/type.ts](https://codecov.io/gh/apache/arrow/pull/3634/diff?src=pr&el=tree#diff-anMvc3JjL3R5cGUudHM=) | `92.24% <33.33%> (-0.7%)` | :arrow_down: |\n   | ... and [633 more](https://codecov.io/gh/apache/arrow/pull/3634/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/3634?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/3634?src=pr&el=footer). Last update [5ed6fb5...a67bd56](https://codecov.io/gh/apache/arrow/pull/3634?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-13T06:21:57.895+0000",
                    "updated": "2019-02-13T06:21:57.895+0000",
                    "started": "2019-02-13T06:21:57.894+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "197944",
                    "issueId": "13215390"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13215390/worklog/198179",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "TheNeuralBit commented on pull request #3634: ARROW-4552: [JS] Add high-level Table and Column convenience methods\nURL: https://github.com/apache/arrow/pull/3634#discussion_r256465135\n \n \n\n ##########\n File path: js/src/table.ts\n ##########\n @@ -93,15 +96,34 @@ export class Table<T extends { [key: string]: DataType; } = any>\n     }\n \n     /** @nocollapse */\n-    public static fromVectors<T extends { [key: string]: DataType; } = any>(vectors: VType<T[keyof T]>[], names?: (keyof T)[]) {\n-        return new Table(RecordBatch.from(vectors, names));\n+    public static fromVectors<T extends { [key: string]: DataType; } = any>(vectors: Vector<T[keyof T]>[], fields?: (keyof T | Field<T[keyof T]>)[]) {\n+        return Table.new<T>(vectors, fields);\n \n Review comment:\n   I like the pattern where `from` methods are intended for conversions from other types and `new` methods are effectively constructors where we can use generics.\r\n   \r\n   Do you think we should just go ahead and get rid of this to follow that pattern? or mark it deprecated or something? It's only been part of 0.4.0 for a couple of days I don't think anyone's using it.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-13T16:08:41.387+0000",
                    "updated": "2019-02-13T16:08:41.387+0000",
                    "started": "2019-02-13T16:08:41.386+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "198179",
                    "issueId": "13215390"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13215390/worklog/198180",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "TheNeuralBit commented on pull request #3634: ARROW-4552: [JS] Add high-level Table and Column convenience methods\nURL: https://github.com/apache/arrow/pull/3634#discussion_r256465219\n \n \n\n ##########\n File path: js/src/recordbatch.ts\n ##########\n @@ -38,28 +38,27 @@ export class RecordBatch<T extends { [key: string]: DataType } = any>\n                Applicative<Struct<T>, Table<T>> {\n \n     /** @nocollapse */\n-    public static from<T extends { [key: string]: DataType } = any>(vectors: VType<T[keyof T]>[], names: (keyof T)[] = []) {\n-        return new RecordBatch(\n-            Schema.from(vectors, names),\n-            vectors.reduce((len, vec) => Math.max(len, vec.length), 0),\n-            vectors\n-        );\n+    public static from<T extends { [key: string]: DataType } = any>(chunks: (Data<T[keyof T]> | Vector<T[keyof T]>)[], names: (keyof T)[] = []) {\n \n Review comment:\n   Maybe this should also be deprecated in favor of a `new` version?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-13T16:08:41.395+0000",
                    "updated": "2019-02-13T16:08:41.395+0000",
                    "started": "2019-02-13T16:08:41.395+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "198180",
                    "issueId": "13215390"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13215390/worklog/198296",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #3634: ARROW-4552: [JS] Add high-level Table and Column convenience methods\nURL: https://github.com/apache/arrow/pull/3634#issuecomment-463075066\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/3634?src=pr&el=h1) Report\n   > Merging [#3634](https://codecov.io/gh/apache/arrow/pull/3634?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/5ed6fb5bc2a1f718de3cbd72a63698ca023c2543?src=pr&el=desc) will **increase** coverage by `1.97%`.\n   > The diff coverage is `75%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/3634/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/3634?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #3634      +/-   ##\n   ==========================================\n   + Coverage    87.7%   89.68%   +1.97%     \n   ==========================================\n     Files         685       74     -611     \n     Lines       83743     5283   -78460     \n     Branches     1081     1197     +116     \n   ==========================================\n   - Hits        73449     4738   -68711     \n   + Misses      10183      538    -9645     \n   + Partials      111        7     -104\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/3634?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [js/src/vector/float.ts](https://codecov.io/gh/apache/arrow/pull/3634/diff?src=pr&el=tree#diff-anMvc3JjL3ZlY3Rvci9mbG9hdC50cw==) | `78.57% <\u00f8> (+21.42%)` | :arrow_up: |\n   | [js/src/compute/dataframe.ts](https://codecov.io/gh/apache/arrow/pull/3634/diff?src=pr&el=tree#diff-anMvc3JjL2NvbXB1dGUvZGF0YWZyYW1lLnRz) | `92.15% <100%> (\u00f8)` | :arrow_up: |\n   | [js/src/ipc/writer.ts](https://codecov.io/gh/apache/arrow/pull/3634/diff?src=pr&el=tree#diff-anMvc3JjL2lwYy93cml0ZXIudHM=) | `90.29% <100%> (\u00f8)` | :arrow_up: |\n   | [js/src/vector.ts](https://codecov.io/gh/apache/arrow/pull/3634/diff?src=pr&el=tree#diff-anMvc3JjL3ZlY3Rvci50cw==) | `100% <100%> (\u00f8)` | :arrow_up: |\n   | [js/src/visitor/vectorassembler.ts](https://codecov.io/gh/apache/arrow/pull/3634/diff?src=pr&el=tree#diff-anMvc3JjL3Zpc2l0b3IvdmVjdG9yYXNzZW1ibGVyLnRz) | `82.17% <100%> (-0.85%)` | :arrow_down: |\n   | [js/src/vector/chunked.ts](https://codecov.io/gh/apache/arrow/pull/3634/diff?src=pr&el=tree#diff-anMvc3JjL3ZlY3Rvci9jaHVua2VkLnRz) | `83.44% <100%> (-0.12%)` | :arrow_down: |\n   | [js/src/visitor/jsonvectorassembler.ts](https://codecov.io/gh/apache/arrow/pull/3634/diff?src=pr&el=tree#diff-anMvc3JjL3Zpc2l0b3IvanNvbnZlY3RvcmFzc2VtYmxlci50cw==) | `100% <100%> (\u00f8)` | :arrow_up: |\n   | [js/src/table.ts](https://codecov.io/gh/apache/arrow/pull/3634/diff?src=pr&el=tree#diff-anMvc3JjL3RhYmxlLnRz) | `94.39% <100%> (+2.08%)` | :arrow_up: |\n   | [js/src/vector/index.ts](https://codecov.io/gh/apache/arrow/pull/3634/diff?src=pr&el=tree#diff-anMvc3JjL3ZlY3Rvci9pbmRleC50cw==) | `93.25% <100%> (\u00f8)` | :arrow_up: |\n   | [js/src/type.ts](https://codecov.io/gh/apache/arrow/pull/3634/diff?src=pr&el=tree#diff-anMvc3JjL3R5cGUudHM=) | `92.24% <33.33%> (-0.7%)` | :arrow_down: |\n   | ... and [634 more](https://codecov.io/gh/apache/arrow/pull/3634/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/3634?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/3634?src=pr&el=footer). Last update [5ed6fb5...83de5ed](https://codecov.io/gh/apache/arrow/pull/3634?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-13T19:56:14.826+0000",
                    "updated": "2019-02-13T19:56:14.826+0000",
                    "started": "2019-02-13T19:56:14.826+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "198296",
                    "issueId": "13215390"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13215390/worklog/198309",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "trxcllnt commented on issue #3634: ARROW-4552: [JS] Add high-level Table and Column convenience methods\nURL: https://github.com/apache/arrow/pull/3634#issuecomment-463352334\n \n \n   > I'm a little concerned about allowing users to create Tables from different length vectors though. Is that something that's allowed in the other implementations? It feels like a case where the user is probably making a mistake and we should throw an error.\r\n   \r\n   I don't agree that error-throwing would be appropriate here for two main reasons:\r\n   1. Practically speaking, aligning Column lengths before creating Tables is an unnecessary burden on library consumers. It involves first knowing or finding the max column length, then re-scanning all the columns to concatenate null chunks to the shorter ones. Presently this a non-trivial task (considering the internal Vector buffer layout) and/or would be slower to do externally (copies, suboptimal null bitmap creation, etc). I think it's quite a bit more neighborly of us to do this automatically.\r\n   \r\n   1. On principle, node idioms suggest Errors should be used to communicate catastrophic unrecoverable failure modes, indicating program[mer] errors instead of logic errors. Tools like TS enforce most of these (e.g. it won't compile if you pass a string to a function that accepts numbers), but there are others (null reference, garbage data, etc.) that can happen at runtime, and error-throwing is appropriate then.\r\n   \r\n   I'll clarify the behavior in this PR a bit further, since it's is really two features rolled into one.\r\n   \r\n   First, there's the re-chunking of the Table based on the chunk layout of the Columns we're joining. This features says if we're combining two columns of equal length into a table, the table will contain as many RecordBatches as the child with the most chunks. This is 100% zero-copy, since it's only slicing the Vectors and distributing them evenly by lowest common chunk size:\r\n   \r\n   ```ts\r\n   a = Column.new('a', [1, 2, 3, 4, 5, 6])\r\n   b = Column.new('b', [1, 2, 3], [4, 5, 6])\r\n   assert(Table.new(a, b).chunks.length === 2)\r\n   ```\r\n   \r\n   I'm not certain whether it uses the same algorithm, but I think I recall @wesm mentioning the C++ implementation does support re-chunking.\r\n   \r\n   The second part dealings with Columns of different lengths. For `assign()`, this means re-chunking up to the length of each column, then filling any remaining slots with nulls:\r\n   ```ts\r\n   a = Column.new('a', [1, 2, 3, 4])\r\n   b = Column.new('b', [1, 2, 3], [4, 5, 6], [7, 8, 9])\r\n   assert(Table.new(a, b).chunks.length === 4)\r\n   // row_id |    a | b   ___\r\n   //      0 |    1 | 1      |\r\n   //      1 |    2 | 2      | <-- RecordBatch 1\r\n   //      2 |    3 | 3   ___|\r\n   //      3 |    4 | 4   ___| <-- RecordBatch 2\r\n   //      4 | null | 5      |\r\n   //      5 | null | 6   ___| <-- RecordBatch 3\r\n   //      3 | null | 7      |\r\n   //      4 | null | 8      | <-- RecordBatch 4\r\n   //      5 | null | 9   ___|\r\n   ```\r\n   \r\n   This example illustrates both features working in concert:\r\n   1. Column A is split into two chunks (sizes [3, 1]), because B's first chunk size is 3\r\n   2. Column A's second chunk has 1 data value, so Column B's _second_ chunk is split into two, since the LCD of A and B's second chunk is 1\r\n   3. Column B's third chunk is the leftover from the previous split, and its length is 2. Column A has no more chunks, so a null-filled chunk of length 2 is created as a placeholder\r\n   4. Column B's last chunk is left un-split, and another all-null chunk is created for A\r\n   \r\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-13T20:18:49.293+0000",
                    "updated": "2019-02-13T20:18:49.293+0000",
                    "started": "2019-02-13T20:18:49.292+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "198309",
                    "issueId": "13215390"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13215390/worklog/198310",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "trxcllnt commented on issue #3634: ARROW-4552: [JS] Add high-level Table and Column convenience methods\nURL: https://github.com/apache/arrow/pull/3634#issuecomment-463352334\n \n \n   > @TheNeuralBit: I'm a little concerned about allowing users to create Tables from different length vectors though. Is that something that's allowed in the other implementations? It feels like a case where the user is probably making a mistake and we should throw an error.\r\n   \r\n   I don't agree that error-throwing would be appropriate here for two main reasons:\r\n   1. Practically speaking, aligning Column lengths before creating Tables is an unnecessary burden on library consumers. It involves first knowing or finding the max column length, then re-scanning all the columns to concatenate null chunks to the shorter ones. Presently this a non-trivial task (considering the internal Vector buffer layout) and/or would be slower to do externally (copies, suboptimal null bitmap creation, etc). I think it's quite a bit more neighborly of us to do this automatically.\r\n   \r\n   1. On principle, node idioms suggest Errors should be used to communicate catastrophic unrecoverable failure modes, indicating program[mer] errors instead of logic errors. Tools like TS enforce most of these (e.g. it won't compile if you pass a string to a function that accepts numbers), but there are others (null reference, garbage data, etc.) that can happen at runtime, and error-throwing is appropriate then.\r\n   \r\n   I'll clarify the behavior in this PR a bit further, since it's is really two features rolled into one.\r\n   \r\n   First, there's the re-chunking of the Table based on the chunk layout of the Columns we're joining. This features says if we're combining two columns of equal length into a table, the table will contain as many RecordBatches as the child with the most chunks. This is 100% zero-copy, since it's only slicing the Vectors and distributing them evenly by lowest common chunk size:\r\n   \r\n   ```ts\r\n   a = Column.new('a', [1, 2, 3, 4, 5, 6])\r\n   b = Column.new('b', [1, 2, 3], [4, 5, 6])\r\n   assert(Table.new(a, b).chunks.length === 2)\r\n   ```\r\n   \r\n   I'm not certain whether it uses the same algorithm, but I think I recall @wesm mentioning the C++ implementation does support re-chunking.\r\n   \r\n   The second part dealings with Columns of different lengths. For `assign()`, this means re-chunking up to the length of each column, then filling any remaining slots with nulls:\r\n   ```ts\r\n   a = Column.new('a', [1, 2, 3, 4])\r\n   b = Column.new('b', [1, 2, 3], [4, 5, 6], [7, 8, 9])\r\n   assert(Table.new(a, b).chunks.length === 4)\r\n   // row_id |    a | b   ___\r\n   //      0 |    1 | 1      |\r\n   //      1 |    2 | 2      | <-- RecordBatch 1\r\n   //      2 |    3 | 3   ___|\r\n   //      3 |    4 | 4   ___| <-- RecordBatch 2\r\n   //      4 | null | 5      |\r\n   //      5 | null | 6   ___| <-- RecordBatch 3\r\n   //      3 | null | 7      |\r\n   //      4 | null | 8      | <-- RecordBatch 4\r\n   //      5 | null | 9   ___|\r\n   ```\r\n   \r\n   This example illustrates both features working in concert:\r\n   1. Column A is split into two chunks (sizes [3, 1]), because B's first chunk size is 3\r\n   2. Column A's second chunk has 1 data value, so Column B's _second_ chunk is split into two, since the LCD of A and B's second chunk is 1\r\n   3. Column B's third chunk is the leftover from the previous split, and its length is 2. Column A has no more chunks, so a null-filled chunk of length 2 is created as a placeholder\r\n   4. Column B's last chunk is left un-split, and another all-null chunk is created for A\r\n   \r\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-13T20:19:06.222+0000",
                    "updated": "2019-02-13T20:19:06.222+0000",
                    "started": "2019-02-13T20:19:06.221+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "198310",
                    "issueId": "13215390"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13215390/worklog/198312",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "trxcllnt commented on issue #3634: ARROW-4552: [JS] Add high-level Table and Column convenience methods\nURL: https://github.com/apache/arrow/pull/3634#issuecomment-463352334\n \n \n   > @TheNeuralBit: I'm a little concerned about allowing users to create Tables from different length vectors though. Is that something that's allowed in the other implementations? It feels like a case where the user is probably making a mistake and we should throw an error.\r\n   \r\n   I don't agree that error-throwing would be appropriate here for two main reasons:\r\n   1. Practically speaking, aligning Column lengths before creating Tables is an unnecessary burden on library consumers. It involves first knowing or finding the max column length, then re-scanning all the columns to concatenate null chunks to the shorter ones. Presently this a non-trivial task (considering the internal Vector buffer layout) and/or would be slower to do externally (copies, suboptimal null bitmap creation, etc). I think it's quite a bit more neighborly of us to do this automatically.\r\n   \r\n   1. On principle, node idioms suggest Errors should be used to communicate catastrophic unrecoverable failure modes, indicating program[mer] errors instead of logic errors. Tools like TS enforce most of these (e.g. it won't compile if you pass a string to a function that accepts numbers), but there are others (null reference, garbage data, etc.) that can happen at runtime, and error-throwing is appropriate then.\r\n   \r\n   I'll clarify the behavior in this PR a bit further, since it's is really two features rolled into one.\r\n   \r\n   First, there's the re-chunking of the Table based on the chunk layout of the Columns we're joining. This features says if we're combining two columns of equal length into a table, the table will contain as many RecordBatches as the child with the most chunks. This is 100% zero-copy, since it's only slicing the Vectors and distributing them evenly by lowest common chunk size:\r\n   \r\n   ```ts\r\n   a = Column.new('a', [1, 2, 3, 4, 5, 6])\r\n   b = Column.new('b', [1, 2, 3], [4, 5, 6])\r\n   assert(Table.new(a, b).chunks.length === 2)\r\n   // row_id | a | b   ___\r\n   //      0 | 1 | 1      |\r\n   //      1 | 2 | 2      | <-- RecordBatch 1\r\n   //      2 | 3 | 3   ___|\r\n   //      3 | 4 | 4      |\r\n   //      4 | 5 | 5      | <-- RecordBatch 2\r\n   //      5 | 6 | 6   ___|\r\n   ```\r\n   \r\n   I'm not certain whether it uses the same algorithm, but I think I recall @wesm mentioning the C++ implementation does support re-chunking.\r\n   \r\n   The second part dealings with Columns of different lengths. For `assign()`, this means re-chunking up to the length of each column, then filling any remaining slots with nulls:\r\n   ```ts\r\n   a = Column.new('a', [1, 2, 3, 4])\r\n   b = Column.new('b', [1, 2, 3], [4, 5, 6], [7, 8, 9])\r\n   assert(Table.new(a, b).chunks.length === 4)\r\n   // row_id |    a | b   ___\r\n   //      0 |    1 | 1      |\r\n   //      1 |    2 | 2      | <-- RecordBatch 1\r\n   //      2 |    3 | 3   ___|\r\n   //      3 |    4 | 4   ___| <-- RecordBatch 2\r\n   //      4 | null | 5      |\r\n   //      5 | null | 6   ___| <-- RecordBatch 3\r\n   //      3 | null | 7      |\r\n   //      4 | null | 8      | <-- RecordBatch 4\r\n   //      5 | null | 9   ___|\r\n   ```\r\n   \r\n   This example illustrates both features working in concert:\r\n   1. Column A is split into two chunks (sizes [3, 1]), because B's first chunk size is 3\r\n   2. Column A's second chunk has 1 data value, so Column B's _second_ chunk is split into two, since the LCD of A and B's second chunk is 1\r\n   3. Column B's third chunk is the leftover from the previous split, and its length is 2. Column A has no more chunks, so a null-filled chunk of length 2 is created as a placeholder\r\n   4. Column B's last chunk is left un-split, and another all-null chunk is created for A\r\n   \r\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-13T20:20:24.225+0000",
                    "updated": "2019-02-13T20:20:24.225+0000",
                    "started": "2019-02-13T20:20:24.224+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "198312",
                    "issueId": "13215390"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13215390/worklog/198314",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "trxcllnt commented on issue #3634: ARROW-4552: [JS] Add high-level Table and Column convenience methods\nURL: https://github.com/apache/arrow/pull/3634#issuecomment-463352334\n \n \n   > @TheNeuralBit: I'm a little concerned about allowing users to create Tables from different length vectors though. Is that something that's allowed in the other implementations? It feels like a case where the user is probably making a mistake and we should throw an error.\r\n   \r\n   I don't agree that error-throwing would be appropriate here for two main reasons:\r\n   1. Practically speaking, aligning Column lengths before creating Tables is an unnecessary burden on library consumers. It involves first knowing or finding the max column length, then re-scanning all the columns to concatenate null chunks to the shorter ones. Presently this a non-trivial task (considering the internal Vector buffer layout) and/or would be slower to do externally (copies, suboptimal null bitmap creation, etc). I think it's quite a bit more neighborly of us to do this automatically.\r\n   \r\n   1. On principle, node idioms suggest Errors should be used to communicate catastrophic unrecoverable failure modes, indicating program[mer] errors instead of logic errors. Tools like TS enforce most of these (e.g. it won't compile if you pass a string to a function that accepts numbers), but there are others (null reference, garbage data, etc.) that can happen at runtime, and error-throwing is appropriate then.\r\n   \r\n   I'll clarify the behavior in this PR a bit further, since it's is really two features rolled into one.\r\n   \r\n   First, there's the re-chunking of the Table based on the chunk layout of the Columns we're joining. This features says if we're combining two columns of equal length into a table, the table will contain as many RecordBatches as the child with the most chunks. This is 100% zero-copy, since it's only slicing the Vectors and distributing them evenly by lowest common chunk size:\r\n   \r\n   ```ts\r\n   a = Column.new('a', [1, 2, 3, 4, 5, 6])\r\n   b = Column.new('b', [1, 2, 3], [4, 5, 6])\r\n   assert(Table.new(a, b).chunks.length === 2)\r\n   // row_id | a | b   ___\r\n   //      0 | 1 | 1      |\r\n   //      1 | 2 | 2      | <-- RecordBatch 1\r\n   //      2 | 3 | 3   ___|\r\n   //      3 | 4 | 4      |\r\n   //      4 | 5 | 5      | <-- RecordBatch 2\r\n   //      5 | 6 | 6   ___|\r\n   ```\r\n   \r\n   I'm not certain whether it uses the same algorithm, but I think I recall @wesm mentioning the C++ implementation does support re-chunking.\r\n   \r\n   The second part deals with Columns of different lengths. For `assign()`, this means re-chunking up to the length of each column, then filling any remaining slots with nulls:\r\n   ```ts\r\n   a = Column.new('a', [1, 2, 3, 4])\r\n   b = Column.new('b', [1, 2, 3], [4, 5, 6], [7, 8, 9])\r\n   assert(Table.new(a, b).chunks.length === 4)\r\n   // row_id |    a | b   ___\r\n   //      0 |    1 | 1      |\r\n   //      1 |    2 | 2      | <-- RecordBatch 1\r\n   //      2 |    3 | 3   ___|\r\n   //      3 |    4 | 4   ___| <-- RecordBatch 2\r\n   //      4 | null | 5      |\r\n   //      5 | null | 6   ___| <-- RecordBatch 3\r\n   //      3 | null | 7      |\r\n   //      4 | null | 8      | <-- RecordBatch 4\r\n   //      5 | null | 9   ___|\r\n   ```\r\n   \r\n   This example illustrates both features working in concert:\r\n   1. Column A is split into two chunks (sizes [3, 1]), because B's first chunk size is 3\r\n   2. Column A's second chunk has 1 data value, so Column B's _second_ chunk is split into two, since the LCD of A and B's second chunk is 1\r\n   3. Column B's third chunk is the leftover from the previous split, and its length is 2. Column A has no more chunks, so a null-filled chunk of length 2 is created as a placeholder\r\n   4. Column B's last chunk is left un-split, and another all-null chunk is created for A\r\n   \r\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-13T20:25:23.607+0000",
                    "updated": "2019-02-13T20:25:23.607+0000",
                    "started": "2019-02-13T20:25:23.606+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "198314",
                    "issueId": "13215390"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13215390/worklog/198422",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "trxcllnt commented on issue #3634: ARROW-4552: [JS] Add high-level Table and Column convenience methods\nURL: https://github.com/apache/arrow/pull/3634#issuecomment-463352334\n \n \n   > @TheNeuralBit: I'm a little concerned about allowing users to create Tables from different length vectors though. Is that something that's allowed in the other implementations? It feels like a case where the user is probably making a mistake and we should throw an error.\r\n   \r\n   I don't agree that error-throwing would be appropriate here for two main reasons:\r\n   1. Practically speaking, aligning Column lengths before creating Tables is an unnecessary burden on library consumers. It involves first knowing or finding the max column length, then re-scanning all the columns to concatenate null chunks to the shorter ones. Presently this a non-trivial task (considering the internal Vector buffer layout) and/or would be slower to do externally (copies, suboptimal null bitmap creation, etc). I think it's quite a bit more neighborly of us to do this automatically.\r\n   \r\n   1. On principle, node idioms suggest Errors should be used to communicate catastrophic unrecoverable failure modes, indicating program[mer] errors instead of logic errors. Tools like TS enforce most of these (e.g. it won't compile if you pass a string to a function that accepts numbers), but there are others (null reference, garbage data, etc.) that can happen at runtime, and error-throwing is appropriate then.\r\n   \r\n   I'll clarify the behavior in this PR a bit further, since it's is really two features rolled into one.\r\n   \r\n   First, there's the re-chunking of the Table based on the chunk layout of the Columns we're joining. This features says if we're combining two columns of equal length into a table, the table will contain as many RecordBatches as the child with the most chunks. This is 100% zero-copy, since it's only slicing the Vectors and distributing them evenly by lowest common chunk size:\r\n   \r\n   ```ts\r\n   a = Column.new('a', [1, 2, 3, 4, 5, 6])\r\n   b = Column.new('b', [1, 2, 3], [4, 5, 6])\r\n   assert(Table.new(a, b).chunks.length === 2)\r\n   // row_id | a | b   ___\r\n   //      0 | 1 | 1      |\r\n   //      1 | 2 | 2      | <-- RecordBatch 1\r\n   //      2 | 3 | 3   ___|\r\n   //      3 | 4 | 4      |\r\n   //      4 | 5 | 5      | <-- RecordBatch 2\r\n   //      5 | 6 | 6   ___|\r\n   ```\r\n   \r\n   I'm not certain whether it uses the same algorithm, but I think I recall @wesm mentioning the C++ implementation does support re-chunking.\r\n   \r\n   The second part deals with Columns of different lengths. For `assign()`, this means re-chunking up to the length of each column, then filling any remaining slots with nulls:\r\n   ```ts\r\n   a = Column.new('a', [1, 2, 3, 4])\r\n   b = Column.new('b', [1, 2, 3], [4, 5, 6], [7, 8, 9])\r\n   assert(Table.new(a, b).chunks.length === 4)\r\n   // row_id |    a | b   ___\r\n   //      0 |    1 | 1      |\r\n   //      1 |    2 | 2      | <-- RecordBatch 1\r\n   //      2 |    3 | 3   ___|\r\n   //      3 |    4 | 4   ___| <-- RecordBatch 2\r\n   //      4 | null | 5      |\r\n   //      5 | null | 6   ___| <-- RecordBatch 3\r\n   //      6 | null | 7      |\r\n   //      7 | null | 8      | <-- RecordBatch 4\r\n   //      8 | null | 9   ___|\r\n   ```\r\n   \r\n   This example illustrates both features working in concert:\r\n   1. Column A is split into two chunks (sizes [3, 1]), because B's first chunk size is 3\r\n   2. Column A's second chunk has 1 data value, so Column B's _second_ chunk is split into two, since the LCD of A and B's second chunk is 1\r\n   3. Column B's third chunk is the leftover from the previous split, and its length is 2. Column A has no more chunks, so a null-filled chunk of length 2 is created as a placeholder\r\n   4. Column B's last chunk is left un-split, and another all-null chunk is created for A\r\n   \r\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-14T01:35:27.472+0000",
                    "updated": "2019-02-14T01:35:27.472+0000",
                    "started": "2019-02-14T01:35:27.471+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "198422",
                    "issueId": "13215390"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13215390/worklog/198426",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "TheNeuralBit commented on issue #3634: ARROW-4552: [JS] Add high-level Table and Column convenience methods\nURL: https://github.com/apache/arrow/pull/3634#issuecomment-463455987\n \n \n   Yeah I agree that the ability to pad short columns with nulls up to the length of the longest column is a nice bit of code to give our users when they need it, I'm just not sure it's always the right thing to do.  We could still give this functionality to users somehow without making it the default.\r\n   \r\n   I really think most of the time someone is trying to create a Table from columns with an unequal length it's because they messed up somewhere, not because they want the shorter ones padded with nulls.\r\n   \r\n   All that being said, I did some tests with pandas and pyarrow to see how they handle this. pandas will let you create a DataFrame from unequal length Series:\r\n   ```\r\n     In [14]: pd.DataFrame({'a': pd.Series([1,2,3]), 'b': pd.Series([1,2,3,4,5,6])})\r\n   Out[14]: \r\n        a  b\r\n   0  1.0  1\r\n   1  2.0  2\r\n   2  3.0  3\r\n   3  NaN  4\r\n   4  NaN  5\r\n   5  NaN  6\r\n   ```\r\n   \r\n   pyarrow does not, but pyarrow is lower-level than I think we are trying to target with arrow JS:\r\n   ```\r\n   pa.RecordBatch.from_arrays([pa.Array.from_pandas(pd.Series([1,2,3])), pa.Array.from_pandas(pd.Series([1,2,3,4]))], ['a ', 'b'])\r\n   // ValueError\r\n   ```\r\n   \r\n   Given the precedent in pandas I could relent on this point.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-14T02:06:14.538+0000",
                    "updated": "2019-02-14T02:06:14.538+0000",
                    "started": "2019-02-14T02:06:14.537+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "198426",
                    "issueId": "13215390"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13215390/worklog/198438",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "trxcllnt commented on issue #3634: ARROW-4552: [JS] Add high-level Table and Column convenience methods\nURL: https://github.com/apache/arrow/pull/3634#issuecomment-463468657\n \n \n   @TheNeuralBit Yeah this behavior was inspired by pandas df.assign(). I do feel like padding with nulls is the friendliest way to go considering the alternatives -- if you accidentally combine some columns with uneven lengths and didn't mean to, you could always `table.slice()` after the fact to remove any unwanted rows from the end. Perhaps we should add `table.setColumnAt(idx, col)`, to make it easier to correct on a per-column basis:\r\n   ```ts\r\n   let vals = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n   let table = Table.new(Column.new('a', vals.slice(0, 4)),  Column.new('b', vals))\r\n   // correct the mistake\r\n   let a = table.getColumn('a').slice(0, 4)\r\n   let a2 = IntVector.new(vals.slice(4))\r\n   table.setColumn('a', a.concat(a2))\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-14T03:04:17.310+0000",
                    "updated": "2019-02-14T03:04:17.310+0000",
                    "started": "2019-02-14T03:04:17.309+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "198438",
                    "issueId": "13215390"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13215390/worklog/198995",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "trxcllnt commented on pull request #3634: ARROW-4552: [JS] Add high-level Table and Column convenience methods\nURL: https://github.com/apache/arrow/pull/3634#discussion_r257043483\n \n \n\n ##########\n File path: js/src/table.ts\n ##########\n @@ -93,15 +96,34 @@ export class Table<T extends { [key: string]: DataType; } = any>\n     }\n \n     /** @nocollapse */\n-    public static fromVectors<T extends { [key: string]: DataType; } = any>(vectors: VType<T[keyof T]>[], names?: (keyof T)[]) {\n-        return new Table(RecordBatch.from(vectors, names));\n+    public static fromVectors<T extends { [key: string]: DataType; } = any>(vectors: Vector<T[keyof T]>[], fields?: (keyof T | Field<T[keyof T]>)[]) {\n+        return Table.new<T>(vectors, fields);\n \n Review comment:\n   I'm down for either. I couldn't remember if this method predated 0.4 or not, so I left it unchanged.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-14T22:43:51.380+0000",
                    "updated": "2019-02-14T22:43:51.380+0000",
                    "started": "2019-02-14T22:43:51.379+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "198995",
                    "issueId": "13215390"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13215390/worklog/199014",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "domoritz commented on issue #3634: ARROW-4552: [JS] Add high-level Table and Column convenience methods\nURL: https://github.com/apache/arrow/pull/3634#issuecomment-463847957\n \n \n   This still looks a bit odd to me\r\n   \r\n   ```\r\n   const table = Table.new(\r\n     Column.new('foo', IntVector.from(arange(new Int32Array(10))),\r\n     Column.new('bar', FloatVector.from(arange(new Float32Array(100))))\r\n   );\r\n   ```\r\n   \r\n   Why not\r\n   \r\n   ```\r\n   const table = new Table(\r\n     new Column('foo', IntVector.from(arange(new Int32Array(10))),\r\n     new Column('bar', FloatVector.from(arange(new Float32Array(100))))\r\n   );\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-14T23:41:51.630+0000",
                    "updated": "2019-02-14T23:41:51.630+0000",
                    "started": "2019-02-14T23:41:51.629+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "199014",
                    "issueId": "13215390"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13215390/worklog/199015",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "domoritz commented on issue #3634: ARROW-4552: [JS] Add high-level Table and Column convenience methods\nURL: https://github.com/apache/arrow/pull/3634#issuecomment-463847957\n \n \n   This still looks a bit odd to me\r\n   \r\n   ```ts\r\n   const table = Table.new(\r\n     Column.new('foo', IntVector.from(arange(new Int32Array(10))),\r\n     Column.new('bar', FloatVector.from(arange(new Float32Array(100))))\r\n   );\r\n   ```\r\n   \r\n   Why not\r\n   \r\n   ```ts\r\n   const table = new Table(\r\n     new Column('foo', IntVector.from(arange(new Int32Array(10))),\r\n     new Column('bar', FloatVector.from(arange(new Float32Array(100))))\r\n   );\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-14T23:42:02.931+0000",
                    "updated": "2019-02-14T23:42:02.931+0000",
                    "started": "2019-02-14T23:42:02.930+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "199015",
                    "issueId": "13215390"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13215390/worklog/199016",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "domoritz commented on issue #3634: ARROW-4552: [JS] Add high-level Table and Column convenience methods\nURL: https://github.com/apache/arrow/pull/3634#issuecomment-463847957\n \n \n   This still looks a bit odd to me\r\n   \r\n   ```ts\r\n   const table = Table.new(\r\n     Column.new('foo', IntVector.from(arange(new Int32Array(10))),\r\n     Column.new('bar', FloatVector.from(arange(new Float32Array(100))))\r\n   );\r\n   ```\r\n   \r\n   Why not\r\n   \r\n   ```ts\r\n   const table = new Table(\r\n     new Column('foo', IntVector.from(arange(new Int32Array(10))),\r\n     new Column('bar', FloatVector.from(arange(new Float32Array(100))))\r\n   );\r\n   ```\r\n   \r\n   I agree with @TheNeuralBit about https://github.com/apache/arrow/pull/3634#discussion_r256465135\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-14T23:42:34.365+0000",
                    "updated": "2019-02-14T23:42:34.365+0000",
                    "started": "2019-02-14T23:42:34.364+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "199016",
                    "issueId": "13215390"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13215390/worklog/199018",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "domoritz commented on pull request #3634: ARROW-4552: [JS] Add high-level Table and Column convenience methods\nURL: https://github.com/apache/arrow/pull/3634#discussion_r257058416\n \n \n\n ##########\n File path: js/src/table.ts\n ##########\n @@ -93,15 +96,34 @@ export class Table<T extends { [key: string]: DataType; } = any>\n     }\n \n     /** @nocollapse */\n-    public static fromVectors<T extends { [key: string]: DataType; } = any>(vectors: VType<T[keyof T]>[], names?: (keyof T)[]) {\n-        return new Table(RecordBatch.from(vectors, names));\n+    public static fromVectors<T extends { [key: string]: DataType; } = any>(vectors: Vector<T[keyof T]>[], fields?: (keyof T | Field<T[keyof T]>)[]) {\n+        return Table.new<T>(vectors, fields);\n \n Review comment:\n   I think anyone would expect constructors instead of `.new` methods. Since we are pre 1.0 everything is fair game and you can be backwards incompatible in minor version bumps. \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-14T23:43:37.452+0000",
                    "updated": "2019-02-14T23:43:37.452+0000",
                    "started": "2019-02-14T23:43:37.451+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "199018",
                    "issueId": "13215390"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13215390/worklog/199019",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "domoritz commented on issue #3634: ARROW-4552: [JS] Add high-level Table and Column convenience methods\nURL: https://github.com/apache/arrow/pull/3634#issuecomment-463849141\n \n \n   About padding with `null`s, I think it could be good to show a warning when this padding is happening. I agree that it is very convenient but it can be surprising. \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-14T23:47:00.239+0000",
                    "updated": "2019-02-14T23:47:00.239+0000",
                    "started": "2019-02-14T23:47:00.238+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "199019",
                    "issueId": "13215390"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13215390/worklog/199037",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "trxcllnt commented on issue #3634: ARROW-4552: [JS] Add high-level Table and Column convenience methods\nURL: https://github.com/apache/arrow/pull/3634#issuecomment-463855986\n \n \n   @domoritz I borrowed the `Ctor.new()` initialization pattern from `tensorflow-js`. It's a bit more flexible, since in TS constructors can't have generics of their own and can't be typed to return anything other than the exact type for which they're a constructor. I first used it in `Vector.new()` as an easy way to create the concrete Vector subclass for any Arrow DataType:\r\n   \r\n   ```\r\n   const data = Data.Int(new Int64(), ...rest));\r\n   const vec = Vector.new(data); // vec type is inferred to Int64Vector\r\n   assert(vec instanceof Int64Vector) // true\r\n   assert(typeof vec.toBigInt64Array == 'function') // has any methods specific to the Int64Vector\r\n   assert(vec.toBigInt64Array() instanceof BigInt64Array) // true\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-15T00:16:01.525+0000",
                    "updated": "2019-02-15T00:16:01.525+0000",
                    "started": "2019-02-15T00:16:01.524+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "199037",
                    "issueId": "13215390"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13215390/worklog/199038",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "trxcllnt commented on issue #3634: ARROW-4552: [JS] Add high-level Table and Column convenience methods\nURL: https://github.com/apache/arrow/pull/3634#issuecomment-463855986\n \n \n   @domoritz I borrowed the `Ctor.new()` initialization pattern from `tensorflow-js`. It's a bit more flexible, since in TS constructors can't have generics of their own and can't be typed to return anything other than the exact type for which they're a constructor. I first used it in `Vector.new()` as an easy way to create the concrete Vector subclass for any Arrow DataType:\r\n   \r\n   ```ts\r\n   const data = Data.Int(new Int64(), ...rest));\r\n   const vec = Vector.new(data); // vec type is inferred to Int64Vector\r\n   assert(vec instanceof Int64Vector) // true\r\n   assert(typeof vec.toBigInt64Array == 'function') // has any methods specific to the Int64Vector\r\n   assert(vec.toBigInt64Array() instanceof BigInt64Array) // true\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-15T00:16:07.533+0000",
                    "updated": "2019-02-15T00:16:07.533+0000",
                    "started": "2019-02-15T00:16:07.532+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "199038",
                    "issueId": "13215390"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 22200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@73042cf8[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1bd59c18[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2c7b34ef[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@1b794824[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@73e89e3d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@5828cf46[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2d8144e0[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@7ce8011c[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4bc671ca[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@550ac50b[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@720b2d0e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@4e5732b2[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 22200,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Feb 21 16:13:33 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-02-21T16:13:33.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-4552/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2019-02-13T04:59:25.000+0000",
        "updated": "2019-02-21T16:13:39.000+0000",
        "timeoriginalestimate": null,
        "description": "It'd be really handy to have a basic {{assign}} methods on the Table and Schema. I've extracted and cleaned up some internal helper methods I have that does this. PR incoming.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "6h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 22200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[JS] Table and Schema assign implementations",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": "2019-02-12",
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13215390/comment/16774236",
                    "id": "16774236",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bhulette",
                        "name": "bhulette",
                        "key": "bhulette",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Brian Hulette",
                        "active": true,
                        "timeZone": "America/Vancouver"
                    },
                    "body": "Issue resolved by pull request 3634\n[https://github.com/apache/arrow/pull/3634]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bhulette",
                        "name": "bhulette",
                        "key": "bhulette",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Brian Hulette",
                        "active": true,
                        "timeZone": "America/Vancouver"
                    },
                    "created": "2019-02-21T16:13:33.249+0000",
                    "updated": "2019-02-21T16:13:33.249+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|yi0x8g:",
        "customfield_12314139": null
    }
}