{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13116527",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13116527",
    "key": "ARROW-1774",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12344925",
                "id": "12344925",
                "description": "",
                "name": "0.14.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-07-04"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 10200,
            "total": 10200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 10200,
            "total": 10200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1774/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 19,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13116527/worklog/254436",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #4482: ARROW-1774: [C++] Add Array::View()\nURL: https://github.com/apache/arrow/pull/4482\n \n \n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-05T15:30:16.367+0000",
                    "updated": "2019-06-05T15:30:16.367+0000",
                    "started": "2019-06-05T15:30:16.366+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "254436",
                    "issueId": "13116527"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13116527/worklog/254437",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #4482: ARROW-1774: [C++] Add Array::View()\nURL: https://github.com/apache/arrow/pull/4482#issuecomment-499133953\n \n \n   @wesm I'm unsure what to do with offsets here. Perhaps as a first approach, we should raise on non-zero input offsets?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-05T15:30:48.811+0000",
                    "updated": "2019-06-05T15:30:48.811+0000",
                    "started": "2019-06-05T15:30:48.811+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "254437",
                    "issueId": "13116527"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13116527/worklog/255052",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #4482: [WIP] ARROW-1774: [C++] Add Array::View()\nURL: https://github.com/apache/arrow/pull/4482#issuecomment-499459728\n \n \n   The approach in this PR is generic and powerful, as it allows non-trivial views (see unit tests), however it may also produce incorrect results in some select cases (e.g. when viewing a fixed-size list as a primitive array). Should we be concerned with that or just have the user be careful?\r\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-06T11:40:48.964+0000",
                    "updated": "2019-06-06T11:40:48.964+0000",
                    "started": "2019-06-06T11:40:48.963+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "255052",
                    "issueId": "13116527"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13116527/worklog/256157",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #4482: [WIP] ARROW-1774: [C++] Add Array::View()\nURL: https://github.com/apache/arrow/pull/4482#discussion_r291713325\n \n \n\n ##########\n File path: cpp/src/arrow/type.h\n ##########\n @@ -147,6 +147,15 @@ struct Type {\n   };\n };\n \n+struct ARROW_EXPORT DataTypeLayout {\n+  // The bit width for each buffer in this DataType's representation\n+  // (-1 if the item size for a given buffer is unknown or variable,\n+  //  0 if the buffer is always null).\n+  // Child types are not included, they should be inspected separately.\n+  std::vector<int64_t> bit_widths;\n+  bool has_dictionary;\n+};\n \n Review comment:\n   Why should children be excluded? It's also missing the union mode which dictates how to interpret the children arrays.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-07T18:57:15.266+0000",
                    "updated": "2019-06-07T18:57:15.266+0000",
                    "started": "2019-06-07T18:57:15.266+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "256157",
                    "issueId": "13116527"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13116527/worklog/256158",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #4482: [WIP] ARROW-1774: [C++] Add Array::View()\nURL: https://github.com/apache/arrow/pull/4482#discussion_r291711885\n \n \n\n ##########\n File path: cpp/src/arrow/type.h\n ##########\n @@ -147,6 +147,15 @@ struct Type {\n   };\n };\n \n+struct ARROW_EXPORT DataTypeLayout {\n+  // The bit width for each buffer in this DataType's representation\n+  // (-1 if the item size for a given buffer is unknown or variable,\n \n Review comment:\n   Make `-1` a constexpr.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-07T18:57:15.266+0000",
                    "updated": "2019-06-07T18:57:15.266+0000",
                    "started": "2019-06-07T18:57:15.266+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "256158",
                    "issueId": "13116527"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13116527/worklog/256159",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #4482: [WIP] ARROW-1774: [C++] Add Array::View()\nURL: https://github.com/apache/arrow/pull/4482#discussion_r291714660\n \n \n\n ##########\n File path: cpp/src/arrow/type.h\n ##########\n @@ -147,6 +147,15 @@ struct Type {\n   };\n };\n \n+struct ARROW_EXPORT DataTypeLayout {\n+  // The bit width for each buffer in this DataType's representation\n+  // (-1 if the item size for a given buffer is unknown or variable,\n+  //  0 if the buffer is always null).\n+  // Child types are not included, they should be inspected separately.\n+  std::vector<int64_t> bit_widths;\n+  bool has_dictionary;\n \n Review comment:\n   Can you specify a default?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-07T18:57:19.679+0000",
                    "updated": "2019-06-07T18:57:19.679+0000",
                    "started": "2019-06-07T18:57:19.679+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "256159",
                    "issueId": "13116527"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13116527/worklog/256162",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #4482: [WIP] ARROW-1774: [C++] Add Array::View()\nURL: https://github.com/apache/arrow/pull/4482#discussion_r291718097\n \n \n\n ##########\n File path: cpp/src/arrow/array.cc\n ##########\n @@ -831,6 +831,202 @@ Status DictionaryArray::Transpose(MemoryPool* pool, const std::shared_ptr<DataTy\n #undef TRANSPOSE_IN_OUT_CASE\n }\n \n+// ----------------------------------------------------------------------\n+// Implement Array::View\n+\n+namespace {\n+\n+void AccumulateLayouts(const std::shared_ptr<DataType>& type,\n+                       std::vector<DataTypeLayout>* layouts) {\n+  layouts->push_back(type->layout());\n+  for (const auto& child : type->children()) {\n+    AccumulateLayouts(child->type(), layouts);\n+  }\n+}\n+\n+void AccumulateArrayData(const std::shared_ptr<ArrayData>& data,\n+                         std::vector<std::shared_ptr<ArrayData>>* out) {\n+  out->push_back(data);\n+  for (const auto& child : data->child_data) {\n+    AccumulateArrayData(child, out);\n+  }\n+}\n+\n+struct ViewDataImpl {\n+  std::shared_ptr<DataType> root_in_type;\n+  std::shared_ptr<DataType> root_out_type;\n+  std::vector<DataTypeLayout> in_layouts;\n+  std::vector<std::shared_ptr<ArrayData>> in_data;\n+  int64_t in_data_length;\n+  size_t in_layout_idx = 0;\n+  size_t in_buffer_idx = 0;\n+  bool input_exhausted = false;\n+\n+  Status InvalidView(const std::string& msg) {\n+    return Status::Invalid(\"Can't view array of type \", root_in_type->ToString(), \" as \",\n+                           root_out_type->ToString(), \": \", msg);\n+  }\n+\n+  void AdjustInputPointer() {\n+    if (input_exhausted) {\n+      return;\n+    }\n+    while (true) {\n+      // Skip exhausted layout (might be empty layout)\n+      while (in_buffer_idx >= in_layouts[in_layout_idx].bit_widths.size()) {\n+        in_buffer_idx = 0;\n+        ++in_layout_idx;\n+        if (in_layout_idx >= in_layouts.size()) {\n+          input_exhausted = true;\n+          return;\n+        }\n+      }\n+      if (in_layouts[in_layout_idx].bit_widths[in_buffer_idx] > 0) {\n+        return;\n+      }\n+      // Skip always-null input buffers\n+      // (e.g. buffer 0 of a null type or buffer 2 of a sparse union)\n+      ++in_buffer_idx;\n+    }\n+  }\n+\n+  Status CheckInputAvailable() {\n+    if (input_exhausted) {\n+      return InvalidView(\"not enough buffers for view type\");\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status CheckInputExhausted() {\n+    if (!input_exhausted) {\n+      return InvalidView(\"too many buffers for view type\");\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status CheckInputHasNoDictionaries() {\n+    for (const auto& layout : in_layouts) {\n+      if (layout.has_dictionary) {\n+        return InvalidView(\"input has dictionary\");\n+      }\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status MakeDataView(const std::shared_ptr<Field>& out_field,\n+                      std::shared_ptr<ArrayData>* out) {\n+    // XXX What about offsets?\n+    const auto out_type = out_field->type();\n+    const auto out_layout = out_type->layout();\n+    if (out_layout.has_dictionary) {\n+      return InvalidView(\"view type requires dictionary\");\n+    }\n+\n+    AdjustInputPointer();\n+    int64_t out_length = in_data_length;\n+    int64_t out_null_count;\n+\n+    // No type has a purely empty layout\n+    DCHECK_GT(out_layout.bit_widths.size(), 0);\n+\n+    if (out_layout.bit_widths[0] == 0) {\n+      // Assuming null type or equivalent.\n+      DCHECK_EQ(out_layout.bit_widths.size(), 1);\n+      *out = ArrayData::Make(out_type, out_length, {nullptr}, out_length);\n+      return Status::OK();\n+    }\n+\n+    std::vector<std::shared_ptr<Buffer>> out_buffers;\n+\n+    // Process null bitmap\n+    DCHECK_EQ(out_layout.bit_widths[0], 1);\n+    if (in_buffer_idx == 0) {\n+      // Copy input null bitmap\n+      RETURN_NOT_OK(CheckInputAvailable());\n+      const auto& in_data_item = in_data[in_layout_idx];\n+      if (!out_field->nullable() && in_data_item->GetNullCount() != 0) {\n+        return InvalidView(\"nulls in input cannot be viewed as non-nullable\");\n+      }\n+      DCHECK_GT(in_data_item->buffers.size(), in_buffer_idx);\n+      out_buffers.push_back(in_data_item->buffers[in_buffer_idx]);\n+      out_length = in_data_item->length;\n+      out_null_count = in_data_item->null_count;\n+      ++in_buffer_idx;\n+      AdjustInputPointer();\n+    } else {\n+      // No null bitmap in input, append no-nulls bitmap\n+      out_buffers.push_back(nullptr);\n+      out_null_count = 0;\n \n Review comment:\n   Does this occur anywhere now? \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-07T19:14:35.291+0000",
                    "updated": "2019-06-07T19:14:35.291+0000",
                    "started": "2019-06-07T19:14:35.291+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "256162",
                    "issueId": "13116527"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13116527/worklog/256163",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #4482: [WIP] ARROW-1774: [C++] Add Array::View()\nURL: https://github.com/apache/arrow/pull/4482#discussion_r291704512\n \n \n\n ##########\n File path: cpp/src/arrow/array-view-test.cc\n ##########\n @@ -0,0 +1,377 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <string>\n+\n+#include <gtest/gtest.h>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/extension_type.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/testing/util.h\"\n+#include \"arrow/type.h\"\n+\n+namespace arrow {\n+\n+void CheckView(const std::shared_ptr<Array>& input,\n+               const std::shared_ptr<DataType>& view_type,\n+               const std::shared_ptr<Array>& expected) {\n+  std::shared_ptr<Array> result;\n+  ASSERT_OK(input->View(view_type, &result));\n+  ASSERT_OK(ValidateArray(*result));\n+  AssertArraysEqual(*expected, *result);\n+}\n+\n+void CheckView(const std::shared_ptr<Array>& input,\n+               const std::shared_ptr<Array>& expected_view) {\n+  CheckView(input, expected_view->type(), expected_view);\n+}\n+\n+void CheckViewFails(const std::shared_ptr<Array>& input,\n+                    const std::shared_ptr<DataType>& view_type) {\n+  std::shared_ptr<Array> result;\n+  ASSERT_RAISES(Invalid, input->View(view_type, &result));\n+}\n+\n+class IPv4Type : public ExtensionType {\n+ public:\n+  IPv4Type() : ExtensionType(fixed_size_binary(4)) {}\n+\n+  std::string extension_name() const override { return \"ipv4\"; }\n+\n+  bool ExtensionEquals(const ExtensionType& other) const override {\n+    return other.extension_name() == this->extension_name();\n+  }\n+\n+  std::shared_ptr<Array> MakeArray(std::shared_ptr<ArrayData> data) const override {\n+    DCHECK_EQ(data->type->id(), Type::EXTENSION);\n+    DCHECK_EQ(\"ipv4\", static_cast<const ExtensionType&>(*data->type).extension_name());\n+    return std::make_shared<ExtensionArray>(data);\n+  }\n+\n+  Status Deserialize(std::shared_ptr<DataType> storage_type,\n+                     const std::string& serialized,\n+                     std::shared_ptr<DataType>* out) const override {\n+    return Status::NotImplemented(\"IPv4Type::Deserialize\");\n+  }\n+\n+  std::string Serialize() const override { return \"\"; }\n+};\n+\n+TEST(TestArrayView, IdentityPrimitive) {\n+  auto arr = ArrayFromJSON(int16(), \"[0, -1, 42]\");\n+  CheckView(arr, arr->type(), arr);\n+  arr = ArrayFromJSON(int16(), \"[0, -1, 42, null]\");\n+  CheckView(arr, arr->type(), arr);\n+  arr = ArrayFromJSON(boolean(), \"[true, false, null]\");\n+  CheckView(arr, arr->type(), arr);\n+}\n+\n+TEST(TestArrayView, IdentityNullType) {\n+  auto arr = ArrayFromJSON(null(), \"[null, null, null]\");\n+  CheckView(arr, arr->type(), arr);\n+}\n+\n+TEST(TestArrayView, PrimitiveAsPrimitive) {\n+  auto arr = ArrayFromJSON(int16(), \"[0, -1, 42]\");\n+  auto expected = ArrayFromJSON(uint16(), \"[0, 65535, 42]\");\n+  CheckView(arr, expected);\n+  CheckView(expected, arr);\n+\n+  arr = ArrayFromJSON(int32(), \"[0, 1069547520, -1071644672, null]\");\n+  expected = ArrayFromJSON(float32(), \"[0.0, 1.5, -2.5, null]\");\n+  CheckView(arr, expected);\n+\n+  arr = ArrayFromJSON(timestamp(TimeUnit::SECOND),\n+                      R\"([\"1970-01-01\",\"2000-02-29\",\"3989-07-14\",\"1900-02-28\"])\");\n+  expected = ArrayFromJSON(int64(), \"[0, 951782400, 63730281600, -2203977600]\");\n+  CheckView(arr, expected);\n+  CheckView(expected, arr);\n+}\n+\n+TEST(TestArrayView, PrimitiveAsFixedSizeBinary) {\n+  auto arr = ArrayFromJSON(int32(), \"[2020568934, 2054316386, null]\");\n+  auto expected = ArrayFromJSON(fixed_size_binary(4), R\"([\"foox\", \"barz\", null])\");\n+  CheckView(arr, expected);\n+  CheckView(expected, arr);\n+}\n+\n+TEST(TestArrayView, PrimitiveWrongSize) {\n+  auto arr = ArrayFromJSON(int16(), \"[0, -1, 42]\");\n+  CheckViewFails(arr, int8());\n+  CheckViewFails(arr, fixed_size_binary(3));\n+  CheckViewFails(arr, null());\n+}\n+\n+TEST(TestArrayView, StructAsStructSimple) {\n+  auto ty1 = struct_({field(\"a\", int8()), field(\"b\", int32())});\n+  auto ty2 = struct_({field(\"c\", uint8()), field(\"d\", float32())});\n+\n+  auto arr = ArrayFromJSON(ty1, \"[[0, 0], [1, 1069547520], [-1, -1071644672]]\");\n+  auto expected = ArrayFromJSON(ty2, \"[[0, 0], [1, 1.5], [255, -2.5]]\");\n+  CheckView(arr, expected);\n+  CheckView(expected, arr);\n+\n+  // With nulls\n+  arr = ArrayFromJSON(ty1, \"[[0, 0], null, [-1, -1071644672]]\");\n+  expected = ArrayFromJSON(ty2, \"[[0, 0], null, [255, -2.5]]\");\n+  CheckView(arr, expected);\n+  CheckView(expected, arr);\n+\n+  // With nested nulls\n+  arr = ArrayFromJSON(ty1, \"[[0, null], null, [-1, -1071644672]]\");\n+  expected = ArrayFromJSON(ty2, \"[[0, null], null, [255, -2.5]]\");\n+  CheckView(arr, expected);\n+  CheckView(expected, arr);\n+\n+  ty2 = struct_({field(\"c\", uint8()), field(\"d\", fixed_size_binary(4))});\n+  arr = ArrayFromJSON(ty1, \"[[0, null], null, [-1, 2020568934]]\");\n+  expected = ArrayFromJSON(ty2, R\"([[0, null], null, [255, \"foox\"]])\");\n+  CheckView(arr, expected);\n+  CheckView(expected, arr);\n+}\n+\n+TEST(TestArrayView, StructAsStructNonNullable) {\n+  auto ty1 = struct_({field(\"a\", int8()), field(\"b\", int32())});\n+  auto ty2 = struct_({field(\"c\", uint8(), /*nullable=*/false), field(\"d\", float32())});\n+\n+  auto arr = ArrayFromJSON(ty1, \"[[0, 0], [1, 1069547520], [-1, -1071644672]]\");\n+  auto expected = ArrayFromJSON(ty2, \"[[0, 0], [1, 1.5], [255, -2.5]]\");\n+  CheckView(arr, expected);\n+  CheckView(expected, arr);\n+\n+  // With nested nulls\n+  arr = ArrayFromJSON(ty1, \"[[0, null], [-1, -1071644672]]\");\n+  expected = ArrayFromJSON(ty2, \"[[0, null], [255, -2.5]]\");\n+  CheckView(arr, expected);\n+  CheckView(expected, arr);\n+\n+  // Nested null cannot be viewed as non-null field\n+  arr = ArrayFromJSON(ty1, \"[[0, null], [null, -1071644672]]\");\n+  CheckViewFails(arr, ty2);\n+}\n+\n+TEST(TestArrayView, StructAsStructWrongLayout) {\n+  auto ty1 = struct_({field(\"a\", int8()), field(\"b\", int32())});\n+  auto arr = ArrayFromJSON(ty1, \"[[0, 0], [1, 1069547520], [-1, -1071644672]]\");\n+\n+  auto ty2 = struct_({field(\"c\", int16()), field(\"d\", int32())});\n+  CheckViewFails(arr, ty2);\n+  ty2 = struct_({field(\"c\", int32()), field(\"d\", int8())});\n+  CheckViewFails(arr, ty2);\n+  ty2 = struct_({field(\"c\", int8())});\n+  CheckViewFails(arr, ty2);\n+  ty2 = struct_({field(\"c\", fixed_size_binary(5))});\n+  CheckViewFails(arr, ty2);\n+}\n+\n+TEST(TestArrayView, StructAsStructWithNullType) {\n+  auto ty1 = struct_({field(\"a\", int8()), field(\"b\", null())});\n+  auto ty2 = struct_({field(\"c\", uint8()), field(\"d\", null())});\n+\n+  auto arr = ArrayFromJSON(ty1, \"[[0, null], [1, null], [-1, null]]\");\n+  auto expected = ArrayFromJSON(ty2, \"[[0, null], [1, null], [255, null]]\");\n+  CheckView(arr, expected);\n+  CheckView(expected, arr);\n+\n+  // With nulls and nested nulls\n+  arr = ArrayFromJSON(ty1, \"[null, [null, null], [-1, null]]\");\n+  expected = ArrayFromJSON(ty2, \"[null, [null, null], [255, null]]\");\n+  CheckView(arr, expected);\n+  CheckView(expected, arr);\n+\n+  // Moving the null types around\n+  ty2 = struct_({field(\"c\", null()), field(\"d\", uint8())});\n+  expected = ArrayFromJSON(ty2, \"[null, [null, null], [null, 255]]\");\n+  CheckView(arr, expected);\n+  CheckView(expected, arr);\n+\n+  // Removing the null type\n+  ty2 = struct_({field(\"c\", uint8())});\n+  expected = ArrayFromJSON(ty2, \"[null, [null], [255]]\");\n+  CheckView(arr, expected);\n+  CheckView(expected, arr);\n+}\n+\n+TEST(TestArrayView, StructAsFlat) {\n+  auto ty1 = struct_({field(\"a\", int16())});\n+  auto arr = ArrayFromJSON(ty1, \"[[0], [1], [-1]]\");\n+  auto expected = ArrayFromJSON(uint16(), \"[0, 1, 65535]\");\n+  CheckView(arr, expected);\n+  CheckView(expected, arr);\n+\n+  // With nulls\n+  arr = ArrayFromJSON(ty1, \"[[0], null, [-1]]\");\n+  expected = ArrayFromJSON(uint16(), \"[0, null, 65535]\");\n+  //   CheckView(arr, expected);  // XXX currently fails\n+  CheckView(expected, arr);\n+\n+  // With nested nulls => fails\n+  arr = ArrayFromJSON(ty1, \"[[0], [null], [-1]]\");\n+  CheckViewFails(arr, uint16());\n+}\n \n Review comment:\n   I'm a tad wary of allowing views of primitive as nested, though I certainly see the utility in it. In the second case, you could do `arr->values()->View(ty)`\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-07T19:14:35.292+0000",
                    "updated": "2019-06-07T19:14:35.292+0000",
                    "started": "2019-06-07T19:14:35.291+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "256163",
                    "issueId": "13116527"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13116527/worklog/256164",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #4482: [WIP] ARROW-1774: [C++] Add Array::View()\nURL: https://github.com/apache/arrow/pull/4482#discussion_r291703755\n \n \n\n ##########\n File path: cpp/src/arrow/array-view-test.cc\n ##########\n @@ -0,0 +1,377 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <string>\n+\n+#include <gtest/gtest.h>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/extension_type.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/testing/util.h\"\n+#include \"arrow/type.h\"\n+\n+namespace arrow {\n+\n+void CheckView(const std::shared_ptr<Array>& input,\n+               const std::shared_ptr<DataType>& view_type,\n+               const std::shared_ptr<Array>& expected) {\n+  std::shared_ptr<Array> result;\n+  ASSERT_OK(input->View(view_type, &result));\n+  ASSERT_OK(ValidateArray(*result));\n+  AssertArraysEqual(*expected, *result);\n+}\n+\n+void CheckView(const std::shared_ptr<Array>& input,\n+               const std::shared_ptr<Array>& expected_view) {\n+  CheckView(input, expected_view->type(), expected_view);\n+}\n+\n+void CheckViewFails(const std::shared_ptr<Array>& input,\n+                    const std::shared_ptr<DataType>& view_type) {\n+  std::shared_ptr<Array> result;\n+  ASSERT_RAISES(Invalid, input->View(view_type, &result));\n+}\n+\n+class IPv4Type : public ExtensionType {\n+ public:\n+  IPv4Type() : ExtensionType(fixed_size_binary(4)) {}\n+\n+  std::string extension_name() const override { return \"ipv4\"; }\n+\n+  bool ExtensionEquals(const ExtensionType& other) const override {\n+    return other.extension_name() == this->extension_name();\n+  }\n+\n+  std::shared_ptr<Array> MakeArray(std::shared_ptr<ArrayData> data) const override {\n+    DCHECK_EQ(data->type->id(), Type::EXTENSION);\n+    DCHECK_EQ(\"ipv4\", static_cast<const ExtensionType&>(*data->type).extension_name());\n+    return std::make_shared<ExtensionArray>(data);\n+  }\n+\n+  Status Deserialize(std::shared_ptr<DataType> storage_type,\n+                     const std::string& serialized,\n+                     std::shared_ptr<DataType>* out) const override {\n+    return Status::NotImplemented(\"IPv4Type::Deserialize\");\n+  }\n+\n+  std::string Serialize() const override { return \"\"; }\n+};\n+\n+TEST(TestArrayView, IdentityPrimitive) {\n+  auto arr = ArrayFromJSON(int16(), \"[0, -1, 42]\");\n+  CheckView(arr, arr->type(), arr);\n+  arr = ArrayFromJSON(int16(), \"[0, -1, 42, null]\");\n+  CheckView(arr, arr->type(), arr);\n+  arr = ArrayFromJSON(boolean(), \"[true, false, null]\");\n+  CheckView(arr, arr->type(), arr);\n+}\n+\n+TEST(TestArrayView, IdentityNullType) {\n+  auto arr = ArrayFromJSON(null(), \"[null, null, null]\");\n+  CheckView(arr, arr->type(), arr);\n+}\n+\n+TEST(TestArrayView, PrimitiveAsPrimitive) {\n+  auto arr = ArrayFromJSON(int16(), \"[0, -1, 42]\");\n+  auto expected = ArrayFromJSON(uint16(), \"[0, 65535, 42]\");\n+  CheckView(arr, expected);\n+  CheckView(expected, arr);\n+\n+  arr = ArrayFromJSON(int32(), \"[0, 1069547520, -1071644672, null]\");\n+  expected = ArrayFromJSON(float32(), \"[0.0, 1.5, -2.5, null]\");\n+  CheckView(arr, expected);\n+\n+  arr = ArrayFromJSON(timestamp(TimeUnit::SECOND),\n+                      R\"([\"1970-01-01\",\"2000-02-29\",\"3989-07-14\",\"1900-02-28\"])\");\n+  expected = ArrayFromJSON(int64(), \"[0, 951782400, 63730281600, -2203977600]\");\n+  CheckView(arr, expected);\n+  CheckView(expected, arr);\n+}\n+\n+TEST(TestArrayView, PrimitiveAsFixedSizeBinary) {\n+  auto arr = ArrayFromJSON(int32(), \"[2020568934, 2054316386, null]\");\n+  auto expected = ArrayFromJSON(fixed_size_binary(4), R\"([\"foox\", \"barz\", null])\");\n+  CheckView(arr, expected);\n+  CheckView(expected, arr);\n+}\n+\n+TEST(TestArrayView, PrimitiveWrongSize) {\n+  auto arr = ArrayFromJSON(int16(), \"[0, -1, 42]\");\n+  CheckViewFails(arr, int8());\n+  CheckViewFails(arr, fixed_size_binary(3));\n+  CheckViewFails(arr, null());\n+}\n+\n+TEST(TestArrayView, StructAsStructSimple) {\n+  auto ty1 = struct_({field(\"a\", int8()), field(\"b\", int32())});\n+  auto ty2 = struct_({field(\"c\", uint8()), field(\"d\", float32())});\n+\n+  auto arr = ArrayFromJSON(ty1, \"[[0, 0], [1, 1069547520], [-1, -1071644672]]\");\n+  auto expected = ArrayFromJSON(ty2, \"[[0, 0], [1, 1.5], [255, -2.5]]\");\n+  CheckView(arr, expected);\n+  CheckView(expected, arr);\n+\n+  // With nulls\n+  arr = ArrayFromJSON(ty1, \"[[0, 0], null, [-1, -1071644672]]\");\n+  expected = ArrayFromJSON(ty2, \"[[0, 0], null, [255, -2.5]]\");\n+  CheckView(arr, expected);\n+  CheckView(expected, arr);\n+\n+  // With nested nulls\n+  arr = ArrayFromJSON(ty1, \"[[0, null], null, [-1, -1071644672]]\");\n+  expected = ArrayFromJSON(ty2, \"[[0, null], null, [255, -2.5]]\");\n+  CheckView(arr, expected);\n+  CheckView(expected, arr);\n+\n+  ty2 = struct_({field(\"c\", uint8()), field(\"d\", fixed_size_binary(4))});\n+  arr = ArrayFromJSON(ty1, \"[[0, null], null, [-1, 2020568934]]\");\n+  expected = ArrayFromJSON(ty2, R\"([[0, null], null, [255, \"foox\"]])\");\n+  CheckView(arr, expected);\n+  CheckView(expected, arr);\n+}\n+\n+TEST(TestArrayView, StructAsStructNonNullable) {\n+  auto ty1 = struct_({field(\"a\", int8()), field(\"b\", int32())});\n+  auto ty2 = struct_({field(\"c\", uint8(), /*nullable=*/false), field(\"d\", float32())});\n+\n+  auto arr = ArrayFromJSON(ty1, \"[[0, 0], [1, 1069547520], [-1, -1071644672]]\");\n+  auto expected = ArrayFromJSON(ty2, \"[[0, 0], [1, 1.5], [255, -2.5]]\");\n+  CheckView(arr, expected);\n+  CheckView(expected, arr);\n+\n+  // With nested nulls\n+  arr = ArrayFromJSON(ty1, \"[[0, null], [-1, -1071644672]]\");\n+  expected = ArrayFromJSON(ty2, \"[[0, null], [255, -2.5]]\");\n+  CheckView(arr, expected);\n+  CheckView(expected, arr);\n+\n+  // Nested null cannot be viewed as non-null field\n+  arr = ArrayFromJSON(ty1, \"[[0, null], [null, -1071644672]]\");\n+  CheckViewFails(arr, ty2);\n+}\n+\n+TEST(TestArrayView, StructAsStructWrongLayout) {\n+  auto ty1 = struct_({field(\"a\", int8()), field(\"b\", int32())});\n+  auto arr = ArrayFromJSON(ty1, \"[[0, 0], [1, 1069547520], [-1, -1071644672]]\");\n+\n+  auto ty2 = struct_({field(\"c\", int16()), field(\"d\", int32())});\n+  CheckViewFails(arr, ty2);\n+  ty2 = struct_({field(\"c\", int32()), field(\"d\", int8())});\n+  CheckViewFails(arr, ty2);\n+  ty2 = struct_({field(\"c\", int8())});\n+  CheckViewFails(arr, ty2);\n+  ty2 = struct_({field(\"c\", fixed_size_binary(5))});\n+  CheckViewFails(arr, ty2);\n+}\n+\n+TEST(TestArrayView, StructAsStructWithNullType) {\n+  auto ty1 = struct_({field(\"a\", int8()), field(\"b\", null())});\n+  auto ty2 = struct_({field(\"c\", uint8()), field(\"d\", null())});\n+\n+  auto arr = ArrayFromJSON(ty1, \"[[0, null], [1, null], [-1, null]]\");\n+  auto expected = ArrayFromJSON(ty2, \"[[0, null], [1, null], [255, null]]\");\n+  CheckView(arr, expected);\n+  CheckView(expected, arr);\n+\n+  // With nulls and nested nulls\n+  arr = ArrayFromJSON(ty1, \"[null, [null, null], [-1, null]]\");\n+  expected = ArrayFromJSON(ty2, \"[null, [null, null], [255, null]]\");\n+  CheckView(arr, expected);\n+  CheckView(expected, arr);\n+\n+  // Moving the null types around\n+  ty2 = struct_({field(\"c\", null()), field(\"d\", uint8())});\n+  expected = ArrayFromJSON(ty2, \"[null, [null, null], [null, 255]]\");\n+  CheckView(arr, expected);\n+  CheckView(expected, arr);\n+\n+  // Removing the null type\n+  ty2 = struct_({field(\"c\", uint8())});\n+  expected = ArrayFromJSON(ty2, \"[null, [null], [255]]\");\n+  CheckView(arr, expected);\n+  CheckView(expected, arr);\n \n Review comment:\n   I found this test a little bit surprising. I suppose it is not so unreasonable though\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-07T19:14:39.625+0000",
                    "updated": "2019-06-07T19:14:39.625+0000",
                    "started": "2019-06-07T19:14:39.623+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "256164",
                    "issueId": "13116527"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13116527/worklog/256832",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #4482: [WIP] ARROW-1774: [C++] Add Array::View()\nURL: https://github.com/apache/arrow/pull/4482#discussion_r292000640\n \n \n\n ##########\n File path: cpp/src/arrow/type.h\n ##########\n @@ -147,6 +147,15 @@ struct Type {\n   };\n };\n \n+struct ARROW_EXPORT DataTypeLayout {\n+  // The bit width for each buffer in this DataType's representation\n+  // (-1 if the item size for a given buffer is unknown or variable,\n+  //  0 if the buffer is always null).\n+  // Child types are not included, they should be inspected separately.\n+  std::vector<int64_t> bit_widths;\n+  bool has_dictionary;\n+};\n \n Review comment:\n   For several reasons:\r\n   1. the caller may not be interested directly in children\r\n   2. handling the information for children would make the structure self-referential\r\n   3. the caller may want to do other things while recursing, or recurse selectively, etc.\r\n   \r\n   As for the union mode, this struct only describes the physical layout, not how to interpret arrays. How to interpret arrays is embodied in the DataType itself.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-10T13:02:08.765+0000",
                    "updated": "2019-06-10T13:02:08.765+0000",
                    "started": "2019-06-10T13:02:08.764+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "256832",
                    "issueId": "13116527"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13116527/worklog/256833",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #4482: [WIP] ARROW-1774: [C++] Add Array::View()\nURL: https://github.com/apache/arrow/pull/4482#discussion_r292000771\n \n \n\n ##########\n File path: cpp/src/arrow/type.h\n ##########\n @@ -147,6 +147,15 @@ struct Type {\n   };\n };\n \n+struct ARROW_EXPORT DataTypeLayout {\n+  // The bit width for each buffer in this DataType's representation\n+  // (-1 if the item size for a given buffer is unknown or variable,\n+  //  0 if the buffer is always null).\n+  // Child types are not included, they should be inspected separately.\n+  std::vector<int64_t> bit_widths;\n+  bool has_dictionary;\n \n Review comment:\n   I'd like to but C++ disables default constructors when you add a default initializer to a member field :-/\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-10T13:02:33.539+0000",
                    "updated": "2019-06-10T13:02:33.539+0000",
                    "started": "2019-06-10T13:02:33.539+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "256833",
                    "issueId": "13116527"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13116527/worklog/256835",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #4482: [WIP] ARROW-1774: [C++] Add Array::View()\nURL: https://github.com/apache/arrow/pull/4482#discussion_r292001256\n \n \n\n ##########\n File path: cpp/src/arrow/array-view-test.cc\n ##########\n @@ -0,0 +1,377 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <string>\n+\n+#include <gtest/gtest.h>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/extension_type.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/testing/util.h\"\n+#include \"arrow/type.h\"\n+\n+namespace arrow {\n+\n+void CheckView(const std::shared_ptr<Array>& input,\n+               const std::shared_ptr<DataType>& view_type,\n+               const std::shared_ptr<Array>& expected) {\n+  std::shared_ptr<Array> result;\n+  ASSERT_OK(input->View(view_type, &result));\n+  ASSERT_OK(ValidateArray(*result));\n+  AssertArraysEqual(*expected, *result);\n+}\n+\n+void CheckView(const std::shared_ptr<Array>& input,\n+               const std::shared_ptr<Array>& expected_view) {\n+  CheckView(input, expected_view->type(), expected_view);\n+}\n+\n+void CheckViewFails(const std::shared_ptr<Array>& input,\n+                    const std::shared_ptr<DataType>& view_type) {\n+  std::shared_ptr<Array> result;\n+  ASSERT_RAISES(Invalid, input->View(view_type, &result));\n+}\n+\n+class IPv4Type : public ExtensionType {\n+ public:\n+  IPv4Type() : ExtensionType(fixed_size_binary(4)) {}\n+\n+  std::string extension_name() const override { return \"ipv4\"; }\n+\n+  bool ExtensionEquals(const ExtensionType& other) const override {\n+    return other.extension_name() == this->extension_name();\n+  }\n+\n+  std::shared_ptr<Array> MakeArray(std::shared_ptr<ArrayData> data) const override {\n+    DCHECK_EQ(data->type->id(), Type::EXTENSION);\n+    DCHECK_EQ(\"ipv4\", static_cast<const ExtensionType&>(*data->type).extension_name());\n+    return std::make_shared<ExtensionArray>(data);\n+  }\n+\n+  Status Deserialize(std::shared_ptr<DataType> storage_type,\n+                     const std::string& serialized,\n+                     std::shared_ptr<DataType>* out) const override {\n+    return Status::NotImplemented(\"IPv4Type::Deserialize\");\n+  }\n+\n+  std::string Serialize() const override { return \"\"; }\n+};\n+\n+TEST(TestArrayView, IdentityPrimitive) {\n+  auto arr = ArrayFromJSON(int16(), \"[0, -1, 42]\");\n+  CheckView(arr, arr->type(), arr);\n+  arr = ArrayFromJSON(int16(), \"[0, -1, 42, null]\");\n+  CheckView(arr, arr->type(), arr);\n+  arr = ArrayFromJSON(boolean(), \"[true, false, null]\");\n+  CheckView(arr, arr->type(), arr);\n+}\n+\n+TEST(TestArrayView, IdentityNullType) {\n+  auto arr = ArrayFromJSON(null(), \"[null, null, null]\");\n+  CheckView(arr, arr->type(), arr);\n+}\n+\n+TEST(TestArrayView, PrimitiveAsPrimitive) {\n+  auto arr = ArrayFromJSON(int16(), \"[0, -1, 42]\");\n+  auto expected = ArrayFromJSON(uint16(), \"[0, 65535, 42]\");\n+  CheckView(arr, expected);\n+  CheckView(expected, arr);\n+\n+  arr = ArrayFromJSON(int32(), \"[0, 1069547520, -1071644672, null]\");\n+  expected = ArrayFromJSON(float32(), \"[0.0, 1.5, -2.5, null]\");\n+  CheckView(arr, expected);\n+\n+  arr = ArrayFromJSON(timestamp(TimeUnit::SECOND),\n+                      R\"([\"1970-01-01\",\"2000-02-29\",\"3989-07-14\",\"1900-02-28\"])\");\n+  expected = ArrayFromJSON(int64(), \"[0, 951782400, 63730281600, -2203977600]\");\n+  CheckView(arr, expected);\n+  CheckView(expected, arr);\n+}\n+\n+TEST(TestArrayView, PrimitiveAsFixedSizeBinary) {\n+  auto arr = ArrayFromJSON(int32(), \"[2020568934, 2054316386, null]\");\n+  auto expected = ArrayFromJSON(fixed_size_binary(4), R\"([\"foox\", \"barz\", null])\");\n+  CheckView(arr, expected);\n+  CheckView(expected, arr);\n+}\n+\n+TEST(TestArrayView, PrimitiveWrongSize) {\n+  auto arr = ArrayFromJSON(int16(), \"[0, -1, 42]\");\n+  CheckViewFails(arr, int8());\n+  CheckViewFails(arr, fixed_size_binary(3));\n+  CheckViewFails(arr, null());\n+}\n+\n+TEST(TestArrayView, StructAsStructSimple) {\n+  auto ty1 = struct_({field(\"a\", int8()), field(\"b\", int32())});\n+  auto ty2 = struct_({field(\"c\", uint8()), field(\"d\", float32())});\n+\n+  auto arr = ArrayFromJSON(ty1, \"[[0, 0], [1, 1069547520], [-1, -1071644672]]\");\n+  auto expected = ArrayFromJSON(ty2, \"[[0, 0], [1, 1.5], [255, -2.5]]\");\n+  CheckView(arr, expected);\n+  CheckView(expected, arr);\n+\n+  // With nulls\n+  arr = ArrayFromJSON(ty1, \"[[0, 0], null, [-1, -1071644672]]\");\n+  expected = ArrayFromJSON(ty2, \"[[0, 0], null, [255, -2.5]]\");\n+  CheckView(arr, expected);\n+  CheckView(expected, arr);\n+\n+  // With nested nulls\n+  arr = ArrayFromJSON(ty1, \"[[0, null], null, [-1, -1071644672]]\");\n+  expected = ArrayFromJSON(ty2, \"[[0, null], null, [255, -2.5]]\");\n+  CheckView(arr, expected);\n+  CheckView(expected, arr);\n+\n+  ty2 = struct_({field(\"c\", uint8()), field(\"d\", fixed_size_binary(4))});\n+  arr = ArrayFromJSON(ty1, \"[[0, null], null, [-1, 2020568934]]\");\n+  expected = ArrayFromJSON(ty2, R\"([[0, null], null, [255, \"foox\"]])\");\n+  CheckView(arr, expected);\n+  CheckView(expected, arr);\n+}\n+\n+TEST(TestArrayView, StructAsStructNonNullable) {\n+  auto ty1 = struct_({field(\"a\", int8()), field(\"b\", int32())});\n+  auto ty2 = struct_({field(\"c\", uint8(), /*nullable=*/false), field(\"d\", float32())});\n+\n+  auto arr = ArrayFromJSON(ty1, \"[[0, 0], [1, 1069547520], [-1, -1071644672]]\");\n+  auto expected = ArrayFromJSON(ty2, \"[[0, 0], [1, 1.5], [255, -2.5]]\");\n+  CheckView(arr, expected);\n+  CheckView(expected, arr);\n+\n+  // With nested nulls\n+  arr = ArrayFromJSON(ty1, \"[[0, null], [-1, -1071644672]]\");\n+  expected = ArrayFromJSON(ty2, \"[[0, null], [255, -2.5]]\");\n+  CheckView(arr, expected);\n+  CheckView(expected, arr);\n+\n+  // Nested null cannot be viewed as non-null field\n+  arr = ArrayFromJSON(ty1, \"[[0, null], [null, -1071644672]]\");\n+  CheckViewFails(arr, ty2);\n+}\n+\n+TEST(TestArrayView, StructAsStructWrongLayout) {\n+  auto ty1 = struct_({field(\"a\", int8()), field(\"b\", int32())});\n+  auto arr = ArrayFromJSON(ty1, \"[[0, 0], [1, 1069547520], [-1, -1071644672]]\");\n+\n+  auto ty2 = struct_({field(\"c\", int16()), field(\"d\", int32())});\n+  CheckViewFails(arr, ty2);\n+  ty2 = struct_({field(\"c\", int32()), field(\"d\", int8())});\n+  CheckViewFails(arr, ty2);\n+  ty2 = struct_({field(\"c\", int8())});\n+  CheckViewFails(arr, ty2);\n+  ty2 = struct_({field(\"c\", fixed_size_binary(5))});\n+  CheckViewFails(arr, ty2);\n+}\n+\n+TEST(TestArrayView, StructAsStructWithNullType) {\n+  auto ty1 = struct_({field(\"a\", int8()), field(\"b\", null())});\n+  auto ty2 = struct_({field(\"c\", uint8()), field(\"d\", null())});\n+\n+  auto arr = ArrayFromJSON(ty1, \"[[0, null], [1, null], [-1, null]]\");\n+  auto expected = ArrayFromJSON(ty2, \"[[0, null], [1, null], [255, null]]\");\n+  CheckView(arr, expected);\n+  CheckView(expected, arr);\n+\n+  // With nulls and nested nulls\n+  arr = ArrayFromJSON(ty1, \"[null, [null, null], [-1, null]]\");\n+  expected = ArrayFromJSON(ty2, \"[null, [null, null], [255, null]]\");\n+  CheckView(arr, expected);\n+  CheckView(expected, arr);\n+\n+  // Moving the null types around\n+  ty2 = struct_({field(\"c\", null()), field(\"d\", uint8())});\n+  expected = ArrayFromJSON(ty2, \"[null, [null, null], [null, 255]]\");\n+  CheckView(arr, expected);\n+  CheckView(expected, arr);\n+\n+  // Removing the null type\n+  ty2 = struct_({field(\"c\", uint8())});\n+  expected = ArrayFromJSON(ty2, \"[null, [null], [255]]\");\n+  CheckView(arr, expected);\n+  CheckView(expected, arr);\n+}\n+\n+TEST(TestArrayView, StructAsFlat) {\n+  auto ty1 = struct_({field(\"a\", int16())});\n+  auto arr = ArrayFromJSON(ty1, \"[[0], [1], [-1]]\");\n+  auto expected = ArrayFromJSON(uint16(), \"[0, 1, 65535]\");\n+  CheckView(arr, expected);\n+  CheckView(expected, arr);\n+\n+  // With nulls\n+  arr = ArrayFromJSON(ty1, \"[[0], null, [-1]]\");\n+  expected = ArrayFromJSON(uint16(), \"[0, null, 65535]\");\n+  //   CheckView(arr, expected);  // XXX currently fails\n+  CheckView(expected, arr);\n+\n+  // With nested nulls => fails\n+  arr = ArrayFromJSON(ty1, \"[[0], [null], [-1]]\");\n+  CheckViewFails(arr, uint16());\n+}\n \n Review comment:\n   I could remove the test and the fact that this works would then be an implementation detail. What do you think?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-10T13:03:56.089+0000",
                    "updated": "2019-06-10T13:03:56.089+0000",
                    "started": "2019-06-10T13:03:56.088+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "256835",
                    "issueId": "13116527"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13116527/worklog/256888",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #4482: [WIP] ARROW-1774: [C++] Add Array::View()\nURL: https://github.com/apache/arrow/pull/4482#discussion_r292049387\n \n \n\n ##########\n File path: cpp/src/arrow/type.h\n ##########\n @@ -147,6 +147,15 @@ struct Type {\n   };\n };\n \n+struct ARROW_EXPORT DataTypeLayout {\n+  // The bit width for each buffer in this DataType's representation\n+  // (-1 if the item size for a given buffer is unknown or variable,\n+  //  0 if the buffer is always null).\n+  // Child types are not included, they should be inspected separately.\n+  std::vector<int64_t> bit_widths;\n+  bool has_dictionary;\n \n Review comment:\n   ah, forget about this one!\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-10T15:00:36.141+0000",
                    "updated": "2019-06-10T15:00:36.141+0000",
                    "started": "2019-06-10T15:00:36.140+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "256888",
                    "issueId": "13116527"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13116527/worklog/256908",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #4482: [WIP] ARROW-1774: [C++] Add Array::View()\nURL: https://github.com/apache/arrow/pull/4482#discussion_r292066906\n \n \n\n ##########\n File path: cpp/src/arrow/array-view-test.cc\n ##########\n @@ -0,0 +1,377 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <string>\n+\n+#include <gtest/gtest.h>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/extension_type.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/testing/util.h\"\n+#include \"arrow/type.h\"\n+\n+namespace arrow {\n+\n+void CheckView(const std::shared_ptr<Array>& input,\n+               const std::shared_ptr<DataType>& view_type,\n+               const std::shared_ptr<Array>& expected) {\n+  std::shared_ptr<Array> result;\n+  ASSERT_OK(input->View(view_type, &result));\n+  ASSERT_OK(ValidateArray(*result));\n+  AssertArraysEqual(*expected, *result);\n+}\n+\n+void CheckView(const std::shared_ptr<Array>& input,\n+               const std::shared_ptr<Array>& expected_view) {\n+  CheckView(input, expected_view->type(), expected_view);\n+}\n+\n+void CheckViewFails(const std::shared_ptr<Array>& input,\n+                    const std::shared_ptr<DataType>& view_type) {\n+  std::shared_ptr<Array> result;\n+  ASSERT_RAISES(Invalid, input->View(view_type, &result));\n+}\n+\n+class IPv4Type : public ExtensionType {\n+ public:\n+  IPv4Type() : ExtensionType(fixed_size_binary(4)) {}\n+\n+  std::string extension_name() const override { return \"ipv4\"; }\n+\n+  bool ExtensionEquals(const ExtensionType& other) const override {\n+    return other.extension_name() == this->extension_name();\n+  }\n+\n+  std::shared_ptr<Array> MakeArray(std::shared_ptr<ArrayData> data) const override {\n+    DCHECK_EQ(data->type->id(), Type::EXTENSION);\n+    DCHECK_EQ(\"ipv4\", static_cast<const ExtensionType&>(*data->type).extension_name());\n+    return std::make_shared<ExtensionArray>(data);\n+  }\n+\n+  Status Deserialize(std::shared_ptr<DataType> storage_type,\n+                     const std::string& serialized,\n+                     std::shared_ptr<DataType>* out) const override {\n+    return Status::NotImplemented(\"IPv4Type::Deserialize\");\n+  }\n+\n+  std::string Serialize() const override { return \"\"; }\n+};\n+\n+TEST(TestArrayView, IdentityPrimitive) {\n+  auto arr = ArrayFromJSON(int16(), \"[0, -1, 42]\");\n+  CheckView(arr, arr->type(), arr);\n+  arr = ArrayFromJSON(int16(), \"[0, -1, 42, null]\");\n+  CheckView(arr, arr->type(), arr);\n+  arr = ArrayFromJSON(boolean(), \"[true, false, null]\");\n+  CheckView(arr, arr->type(), arr);\n+}\n+\n+TEST(TestArrayView, IdentityNullType) {\n+  auto arr = ArrayFromJSON(null(), \"[null, null, null]\");\n+  CheckView(arr, arr->type(), arr);\n+}\n+\n+TEST(TestArrayView, PrimitiveAsPrimitive) {\n+  auto arr = ArrayFromJSON(int16(), \"[0, -1, 42]\");\n+  auto expected = ArrayFromJSON(uint16(), \"[0, 65535, 42]\");\n+  CheckView(arr, expected);\n+  CheckView(expected, arr);\n+\n+  arr = ArrayFromJSON(int32(), \"[0, 1069547520, -1071644672, null]\");\n+  expected = ArrayFromJSON(float32(), \"[0.0, 1.5, -2.5, null]\");\n+  CheckView(arr, expected);\n+\n+  arr = ArrayFromJSON(timestamp(TimeUnit::SECOND),\n+                      R\"([\"1970-01-01\",\"2000-02-29\",\"3989-07-14\",\"1900-02-28\"])\");\n+  expected = ArrayFromJSON(int64(), \"[0, 951782400, 63730281600, -2203977600]\");\n+  CheckView(arr, expected);\n+  CheckView(expected, arr);\n+}\n+\n+TEST(TestArrayView, PrimitiveAsFixedSizeBinary) {\n+  auto arr = ArrayFromJSON(int32(), \"[2020568934, 2054316386, null]\");\n+  auto expected = ArrayFromJSON(fixed_size_binary(4), R\"([\"foox\", \"barz\", null])\");\n+  CheckView(arr, expected);\n+  CheckView(expected, arr);\n+}\n+\n+TEST(TestArrayView, PrimitiveWrongSize) {\n+  auto arr = ArrayFromJSON(int16(), \"[0, -1, 42]\");\n+  CheckViewFails(arr, int8());\n+  CheckViewFails(arr, fixed_size_binary(3));\n+  CheckViewFails(arr, null());\n+}\n+\n+TEST(TestArrayView, StructAsStructSimple) {\n+  auto ty1 = struct_({field(\"a\", int8()), field(\"b\", int32())});\n+  auto ty2 = struct_({field(\"c\", uint8()), field(\"d\", float32())});\n+\n+  auto arr = ArrayFromJSON(ty1, \"[[0, 0], [1, 1069547520], [-1, -1071644672]]\");\n+  auto expected = ArrayFromJSON(ty2, \"[[0, 0], [1, 1.5], [255, -2.5]]\");\n+  CheckView(arr, expected);\n+  CheckView(expected, arr);\n+\n+  // With nulls\n+  arr = ArrayFromJSON(ty1, \"[[0, 0], null, [-1, -1071644672]]\");\n+  expected = ArrayFromJSON(ty2, \"[[0, 0], null, [255, -2.5]]\");\n+  CheckView(arr, expected);\n+  CheckView(expected, arr);\n+\n+  // With nested nulls\n+  arr = ArrayFromJSON(ty1, \"[[0, null], null, [-1, -1071644672]]\");\n+  expected = ArrayFromJSON(ty2, \"[[0, null], null, [255, -2.5]]\");\n+  CheckView(arr, expected);\n+  CheckView(expected, arr);\n+\n+  ty2 = struct_({field(\"c\", uint8()), field(\"d\", fixed_size_binary(4))});\n+  arr = ArrayFromJSON(ty1, \"[[0, null], null, [-1, 2020568934]]\");\n+  expected = ArrayFromJSON(ty2, R\"([[0, null], null, [255, \"foox\"]])\");\n+  CheckView(arr, expected);\n+  CheckView(expected, arr);\n+}\n+\n+TEST(TestArrayView, StructAsStructNonNullable) {\n+  auto ty1 = struct_({field(\"a\", int8()), field(\"b\", int32())});\n+  auto ty2 = struct_({field(\"c\", uint8(), /*nullable=*/false), field(\"d\", float32())});\n+\n+  auto arr = ArrayFromJSON(ty1, \"[[0, 0], [1, 1069547520], [-1, -1071644672]]\");\n+  auto expected = ArrayFromJSON(ty2, \"[[0, 0], [1, 1.5], [255, -2.5]]\");\n+  CheckView(arr, expected);\n+  CheckView(expected, arr);\n+\n+  // With nested nulls\n+  arr = ArrayFromJSON(ty1, \"[[0, null], [-1, -1071644672]]\");\n+  expected = ArrayFromJSON(ty2, \"[[0, null], [255, -2.5]]\");\n+  CheckView(arr, expected);\n+  CheckView(expected, arr);\n+\n+  // Nested null cannot be viewed as non-null field\n+  arr = ArrayFromJSON(ty1, \"[[0, null], [null, -1071644672]]\");\n+  CheckViewFails(arr, ty2);\n+}\n+\n+TEST(TestArrayView, StructAsStructWrongLayout) {\n+  auto ty1 = struct_({field(\"a\", int8()), field(\"b\", int32())});\n+  auto arr = ArrayFromJSON(ty1, \"[[0, 0], [1, 1069547520], [-1, -1071644672]]\");\n+\n+  auto ty2 = struct_({field(\"c\", int16()), field(\"d\", int32())});\n+  CheckViewFails(arr, ty2);\n+  ty2 = struct_({field(\"c\", int32()), field(\"d\", int8())});\n+  CheckViewFails(arr, ty2);\n+  ty2 = struct_({field(\"c\", int8())});\n+  CheckViewFails(arr, ty2);\n+  ty2 = struct_({field(\"c\", fixed_size_binary(5))});\n+  CheckViewFails(arr, ty2);\n+}\n+\n+TEST(TestArrayView, StructAsStructWithNullType) {\n+  auto ty1 = struct_({field(\"a\", int8()), field(\"b\", null())});\n+  auto ty2 = struct_({field(\"c\", uint8()), field(\"d\", null())});\n+\n+  auto arr = ArrayFromJSON(ty1, \"[[0, null], [1, null], [-1, null]]\");\n+  auto expected = ArrayFromJSON(ty2, \"[[0, null], [1, null], [255, null]]\");\n+  CheckView(arr, expected);\n+  CheckView(expected, arr);\n+\n+  // With nulls and nested nulls\n+  arr = ArrayFromJSON(ty1, \"[null, [null, null], [-1, null]]\");\n+  expected = ArrayFromJSON(ty2, \"[null, [null, null], [255, null]]\");\n+  CheckView(arr, expected);\n+  CheckView(expected, arr);\n+\n+  // Moving the null types around\n+  ty2 = struct_({field(\"c\", null()), field(\"d\", uint8())});\n+  expected = ArrayFromJSON(ty2, \"[null, [null, null], [null, 255]]\");\n+  CheckView(arr, expected);\n+  CheckView(expected, arr);\n+\n+  // Removing the null type\n+  ty2 = struct_({field(\"c\", uint8())});\n+  expected = ArrayFromJSON(ty2, \"[null, [null], [255]]\");\n+  CheckView(arr, expected);\n+  CheckView(expected, arr);\n+}\n+\n+TEST(TestArrayView, StructAsFlat) {\n+  auto ty1 = struct_({field(\"a\", int16())});\n+  auto arr = ArrayFromJSON(ty1, \"[[0], [1], [-1]]\");\n+  auto expected = ArrayFromJSON(uint16(), \"[0, 1, 65535]\");\n+  CheckView(arr, expected);\n+  CheckView(expected, arr);\n+\n+  // With nulls\n+  arr = ArrayFromJSON(ty1, \"[[0], null, [-1]]\");\n+  expected = ArrayFromJSON(uint16(), \"[0, null, 65535]\");\n+  //   CheckView(arr, expected);  // XXX currently fails\n+  CheckView(expected, arr);\n+\n+  // With nested nulls => fails\n+  arr = ArrayFromJSON(ty1, \"[[0], [null], [-1]]\");\n+  CheckViewFails(arr, uint16());\n+}\n \n Review comment:\n   I think it's actually kind of useful, to be able to View a primitive as a struct, so I'm OK to leave it. \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-10T15:41:30.121+0000",
                    "updated": "2019-06-10T15:41:30.121+0000",
                    "started": "2019-06-10T15:41:30.120+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "256908",
                    "issueId": "13116527"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13116527/worklog/256909",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #4482: [WIP] ARROW-1774: [C++] Add Array::View()\nURL: https://github.com/apache/arrow/pull/4482#issuecomment-500465307\n \n \n   @pitrou I'd be OK to merge this with an error on non-zero offsets for the time being, then we can address that as a follow up JIRA\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-10T15:42:30.345+0000",
                    "updated": "2019-06-10T15:42:30.345+0000",
                    "started": "2019-06-10T15:42:30.343+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "256909",
                    "issueId": "13116527"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13116527/worklog/257880",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #4482: [WIP] ARROW-1774: [C++] Add Array::View()\nURL: https://github.com/apache/arrow/pull/4482#discussion_r292538400\n \n \n\n ##########\n File path: cpp/src/arrow/array.cc\n ##########\n @@ -831,6 +831,202 @@ Status DictionaryArray::Transpose(MemoryPool* pool, const std::shared_ptr<DataTy\n #undef TRANSPOSE_IN_OUT_CASE\n }\n \n+// ----------------------------------------------------------------------\n+// Implement Array::View\n+\n+namespace {\n+\n+void AccumulateLayouts(const std::shared_ptr<DataType>& type,\n+                       std::vector<DataTypeLayout>* layouts) {\n+  layouts->push_back(type->layout());\n+  for (const auto& child : type->children()) {\n+    AccumulateLayouts(child->type(), layouts);\n+  }\n+}\n+\n+void AccumulateArrayData(const std::shared_ptr<ArrayData>& data,\n+                         std::vector<std::shared_ptr<ArrayData>>* out) {\n+  out->push_back(data);\n+  for (const auto& child : data->child_data) {\n+    AccumulateArrayData(child, out);\n+  }\n+}\n+\n+struct ViewDataImpl {\n+  std::shared_ptr<DataType> root_in_type;\n+  std::shared_ptr<DataType> root_out_type;\n+  std::vector<DataTypeLayout> in_layouts;\n+  std::vector<std::shared_ptr<ArrayData>> in_data;\n+  int64_t in_data_length;\n+  size_t in_layout_idx = 0;\n+  size_t in_buffer_idx = 0;\n+  bool input_exhausted = false;\n+\n+  Status InvalidView(const std::string& msg) {\n+    return Status::Invalid(\"Can't view array of type \", root_in_type->ToString(), \" as \",\n+                           root_out_type->ToString(), \": \", msg);\n+  }\n+\n+  void AdjustInputPointer() {\n+    if (input_exhausted) {\n+      return;\n+    }\n+    while (true) {\n+      // Skip exhausted layout (might be empty layout)\n+      while (in_buffer_idx >= in_layouts[in_layout_idx].bit_widths.size()) {\n+        in_buffer_idx = 0;\n+        ++in_layout_idx;\n+        if (in_layout_idx >= in_layouts.size()) {\n+          input_exhausted = true;\n+          return;\n+        }\n+      }\n+      if (in_layouts[in_layout_idx].bit_widths[in_buffer_idx] > 0) {\n+        return;\n+      }\n+      // Skip always-null input buffers\n+      // (e.g. buffer 0 of a null type or buffer 2 of a sparse union)\n+      ++in_buffer_idx;\n+    }\n+  }\n+\n+  Status CheckInputAvailable() {\n+    if (input_exhausted) {\n+      return InvalidView(\"not enough buffers for view type\");\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status CheckInputExhausted() {\n+    if (!input_exhausted) {\n+      return InvalidView(\"too many buffers for view type\");\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status CheckInputHasNoDictionaries() {\n+    for (const auto& layout : in_layouts) {\n+      if (layout.has_dictionary) {\n+        return InvalidView(\"input has dictionary\");\n+      }\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status MakeDataView(const std::shared_ptr<Field>& out_field,\n+                      std::shared_ptr<ArrayData>* out) {\n+    // XXX What about offsets?\n+    const auto out_type = out_field->type();\n+    const auto out_layout = out_type->layout();\n+    if (out_layout.has_dictionary) {\n+      return InvalidView(\"view type requires dictionary\");\n+    }\n+\n+    AdjustInputPointer();\n+    int64_t out_length = in_data_length;\n+    int64_t out_null_count;\n+\n+    // No type has a purely empty layout\n+    DCHECK_GT(out_layout.bit_widths.size(), 0);\n+\n+    if (out_layout.bit_widths[0] == 0) {\n+      // Assuming null type or equivalent.\n+      DCHECK_EQ(out_layout.bit_widths.size(), 1);\n+      *out = ArrayData::Make(out_type, out_length, {nullptr}, out_length);\n+      return Status::OK();\n+    }\n+\n+    std::vector<std::shared_ptr<Buffer>> out_buffers;\n+\n+    // Process null bitmap\n+    DCHECK_EQ(out_layout.bit_widths[0], 1);\n+    if (in_buffer_idx == 0) {\n+      // Copy input null bitmap\n+      RETURN_NOT_OK(CheckInputAvailable());\n+      const auto& in_data_item = in_data[in_layout_idx];\n+      if (!out_field->nullable() && in_data_item->GetNullCount() != 0) {\n+        return InvalidView(\"nulls in input cannot be viewed as non-nullable\");\n+      }\n+      DCHECK_GT(in_data_item->buffers.size(), in_buffer_idx);\n+      out_buffers.push_back(in_data_item->buffers[in_buffer_idx]);\n+      out_length = in_data_item->length;\n+      out_null_count = in_data_item->null_count;\n+      ++in_buffer_idx;\n+      AdjustInputPointer();\n+    } else {\n+      // No null bitmap in input, append no-nulls bitmap\n+      out_buffers.push_back(nullptr);\n+      out_null_count = 0;\n \n Review comment:\n   Yes, when viewing structs as structs of different shapes (for example `struct<a: struct<b: int8>, d: int32>` as `struct<a: uint8, b: struct<b: float>>`).\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-11T16:07:17.529+0000",
                    "updated": "2019-06-11T16:07:17.529+0000",
                    "started": "2019-06-11T16:07:17.529+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "257880",
                    "issueId": "13116527"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13116527/worklog/258018",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #4482: ARROW-1774: [C++] Add Array::View()\nURL: https://github.com/apache/arrow/pull/4482#issuecomment-500971543\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/4482?src=pr&el=h1) Report\n   > Merging [#4482](https://codecov.io/gh/apache/arrow/pull/4482?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/8cc6bd46fa1b0dfc222ea4dae9dbf00a5fa7c450?src=pr&el=desc) will **increase** coverage by `0.98%`.\n   > The diff coverage is `96.64%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/4482/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/4482?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #4482      +/-   ##\n   ==========================================\n   + Coverage   88.26%   89.24%   +0.98%     \n   ==========================================\n     Files         846      697     -149     \n     Lines      103693    92256   -11437     \n     Branches     1253        0    -1253     \n   ==========================================\n   - Hits        91524    82338    -9186     \n   + Misses      11923     9918    -2005     \n   + Partials      246        0     -246\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/4482?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [cpp/src/arrow/extension\\_type.h](https://codecov.io/gh/apache/arrow/pull/4482/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9leHRlbnNpb25fdHlwZS5o) | `100% <\u00f8> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/array.h](https://codecov.io/gh/apache/arrow/pull/4482/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9hcnJheS5o) | `98.24% <\u00f8> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/compute/kernels/cast.cc](https://codecov.io/gh/apache/arrow/pull/4482/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9jb21wdXRlL2tlcm5lbHMvY2FzdC5jYw==) | `96.61% <100%> (+0.01%)` | :arrow_up: |\n   | [cpp/src/arrow/extension\\_type.cc](https://codecov.io/gh/apache/arrow/pull/4482/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9leHRlbnNpb25fdHlwZS5jYw==) | `80% <100%> (+0.58%)` | :arrow_up: |\n   | [cpp/src/arrow/type.h](https://codecov.io/gh/apache/arrow/pull/4482/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy90eXBlLmg=) | `94.79% <100%> (+0.42%)` | :arrow_up: |\n   | [cpp/src/arrow/type.cc](https://codecov.io/gh/apache/arrow/pull/4482/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy90eXBlLmNj) | `95.54% <87.5%> (-0.18%)` | :arrow_down: |\n   | [cpp/src/arrow/array.cc](https://codecov.io/gh/apache/arrow/pull/4482/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9hcnJheS5jYw==) | `91.47% <93.93%> (+1.42%)` | :arrow_up: |\n   | [cpp/src/arrow/array-view-test.cc](https://codecov.io/gh/apache/arrow/pull/4482/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9hcnJheS12aWV3LXRlc3QuY2M=) | `98.07% <98.07%> (\u00f8)` | |\n   | [go/arrow/ipc/writer.go](https://codecov.io/gh/apache/arrow/pull/4482/diff?src=pr&el=tree#diff-Z28vYXJyb3cvaXBjL3dyaXRlci5nbw==) | | |\n   | [go/arrow/math/uint64\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/4482/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC91aW50NjRfYW1kNjQuZ28=) | | |\n   | ... and [150 more](https://codecov.io/gh/apache/arrow/pull/4482/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/4482?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/4482?src=pr&el=footer). Last update [8cc6bd4...b2cad62](https://codecov.io/gh/apache/arrow/pull/4482?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-11T18:41:19.593+0000",
                    "updated": "2019-06-11T18:41:19.593+0000",
                    "started": "2019-06-11T18:41:19.592+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "258018",
                    "issueId": "13116527"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13116527/worklog/258055",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #4482: ARROW-1774: [C++] Add Array::View()\nURL: https://github.com/apache/arrow/pull/4482#issuecomment-500992317\n \n \n   I opened https://issues.apache.org/jira/browse/ARROW-5558 about non-zero offsets\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-11T19:38:14.187+0000",
                    "updated": "2019-06-11T19:38:14.187+0000",
                    "started": "2019-06-11T19:38:14.186+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "258055",
                    "issueId": "13116527"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13116527/worklog/258056",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #4482: ARROW-1774: [C++] Add Array::View()\nURL: https://github.com/apache/arrow/pull/4482\n \n \n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-11T19:38:41.288+0000",
                    "updated": "2019-06-11T19:38:41.288+0000",
                    "started": "2019-06-11T19:38:41.287+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "258056",
                    "issueId": "13116527"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 10200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@7ef87a86[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@e8d515a[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@74a1fd01[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@10c2754e[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1d8bca4e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@50e134ce[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2bd38226[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@28b8ea17[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6b228cf4[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@323c821a[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@549f4c9[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@6a4e5e25[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 10200,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Jun 11 19:38:26 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-06-11T19:38:26.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1774/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2017-11-06T21:54:18.000+0000",
        "updated": "2019-06-11T19:38:41.000+0000",
        "timeoriginalestimate": null,
        "description": "Similar to NumPy's {{ndarray.view}}, but with the restriction that the input and output types have the same physical Arrow memory layout. This might be as simple as adding a \"zero copy only\" option to the existing {{Cast}} kernel",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 10200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Add \"view\" function to create zero-copy views for compatible types, if supported",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13116527/comment/16854672",
                    "id": "16854672",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "What is meant here by \"same physical memory layout\"? For example, should we allow a view of int32 as float32? If so, it's not the same thing as casting.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2019-06-03T14:50:46.942+0000",
                    "updated": "2019-06-03T14:50:46.942+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13116527/comment/16861401",
                    "id": "16861401",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 4482\n[https://github.com/apache/arrow/pull/4482]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-06-11T19:38:26.864+0000",
                    "updated": "2019-06-11T19:38:26.864+0000"
                }
            ],
            "maxResults": 2,
            "total": 2,
            "startAt": 0
        },
        "customfield_12311820": "0|i3mgsf:",
        "customfield_12314139": null
    }
}