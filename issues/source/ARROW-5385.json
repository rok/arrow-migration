{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13234537",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13234537",
    "key": "ARROW-5385",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12349983",
                "id": "12349983",
                "description": "",
                "name": "5.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-07-28"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12624366",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12624366",
                "type": {
                    "id": "12310660",
                    "name": "Completes",
                    "inward": "is fixed by",
                    "outward": "fixes",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310660"
                },
                "outwardIssue": {
                    "id": "13290544",
                    "key": "ARROW-8033",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13290544",
                    "fields": {
                        "summary": "[Go][Integration] Enable custom_metadata integtration test",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=zeroshade",
            "name": "zeroshade",
            "key": "zeroshade",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=zeroshade&avatarId=31230",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=zeroshade&avatarId=31230",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=zeroshade&avatarId=31230",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=zeroshade&avatarId=31230"
            },
            "displayName": "Matthew Topol",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333772",
                "id": "12333772",
                "name": "Go"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=sbinet",
            "name": "sbinet",
            "key": "sbinet",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=sbinet&avatarId=36072",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=sbinet&avatarId=36072",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=sbinet&avatarId=36072",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=sbinet&avatarId=36072"
            },
            "displayName": "Sebastien Binet",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=sbinet",
            "name": "sbinet",
            "key": "sbinet",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=sbinet&avatarId=36072",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=sbinet&avatarId=36072",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=sbinet&avatarId=36072",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=sbinet&avatarId=36072"
            },
            "displayName": "Sebastien Binet",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "aggregateprogress": {
            "progress": 14400,
            "total": 14400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 14400,
            "total": 14400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-5385/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 24,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13234537/worklog/591129",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade opened a new pull request #10203:\nURL: https://github.com/apache/arrow/pull/10203\n\n\n   Getting the extension metadata recognized for the integration tests with extension types also had the side effect of being a solution for the custom metadata integration tests, so i've also enabled those for Go.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-29T17:00:02.824+0000",
                    "updated": "2021-04-29T17:00:02.824+0000",
                    "started": "2021-04-29T17:00:02.824+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "591129",
                    "issueId": "13234537"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13234537/worklog/591130",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on pull request #10203:\nURL: https://github.com/apache/arrow/pull/10203#issuecomment-829432587\n\n\n   Tagging @emkornfield @sbinet for visibility and reviews.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-29T17:00:30.950+0000",
                    "updated": "2021-04-29T17:00:30.950+0000",
                    "started": "2021-04-29T17:00:30.950+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "591130",
                    "issueId": "13234537"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13234537/worklog/591199",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #10203:\nURL: https://github.com/apache/arrow/pull/10203#issuecomment-829511852\n\n\n   https://issues.apache.org/jira/browse/ARROW-5385\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-29T19:03:21.648+0000",
                    "updated": "2021-04-29T19:03:21.648+0000",
                    "started": "2021-04-29T19:03:21.648+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "591199",
                    "issueId": "13234537"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13234537/worklog/591229",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on pull request #10203:\nURL: https://github.com/apache/arrow/pull/10203#issuecomment-829577758\n\n\n   The integration test seems to be failing on some rust build failure that is unrelated to this change \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-29T20:34:46.628+0000",
                    "updated": "2021-04-29T20:34:46.628+0000",
                    "started": "2021-04-29T20:34:46.628+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "591229",
                    "issueId": "13234537"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13234537/worklog/591561",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on pull request #10203:\nURL: https://github.com/apache/arrow/pull/10203#issuecomment-830160886\n\n\n   Yap, sorry about that. We fixed it in Rust's end; if you re-trigger it should run.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-30T15:08:06.512+0000",
                    "updated": "2021-04-30T15:08:06.512+0000",
                    "started": "2021-04-30T15:08:06.512+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "591561",
                    "issueId": "13234537"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13234537/worklog/591578",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on pull request #10203:\nURL: https://github.com/apache/arrow/pull/10203#issuecomment-830177086\n\n\n   @jorgecarleitao The tests are still failing on rust build failures :( Any ideas?\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-30T15:31:34.998+0000",
                    "updated": "2021-04-30T15:31:34.998+0000",
                    "started": "2021-04-30T15:31:34.998+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "591578",
                    "issueId": "13234537"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13234537/worklog/592031",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on pull request #10203:\nURL: https://github.com/apache/arrow/pull/10203#issuecomment-830852832\n\n\n   @emkornfield @jorgecarleitao bump\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-02T18:40:36.039+0000",
                    "updated": "2021-05-02T18:40:36.039+0000",
                    "started": "2021-05-02T18:40:36.039+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "592031",
                    "issueId": "13234537"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13234537/worklog/592543",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #10203:\nURL: https://github.com/apache/arrow/pull/10203#issuecomment-831658811\n\n\n   Sorry will try to take a look my availability this week might be fairly limited.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-04T03:12:26.413+0000",
                    "updated": "2021-05-04T03:12:26.413+0000",
                    "started": "2021-05-04T03:12:26.413+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "592543",
                    "issueId": "13234537"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13234537/worklog/593049",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on pull request #10203:\nURL: https://github.com/apache/arrow/pull/10203#issuecomment-833922467\n\n\n   Well that was annoying to track down but I finally fixed the failures. oy.\r\n   \r\n   @emkornfield this is finally ready for review again when you have the time to do so.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-06T22:44:05.726+0000",
                    "updated": "2021-05-06T22:44:05.726+0000",
                    "started": "2021-05-06T22:44:05.726+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "593049",
                    "issueId": "13234537"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13234537/worklog/594602",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #10203:\nURL: https://github.com/apache/arrow/pull/10203#discussion_r630311178\n\n\n\n##########\nFile path: go/arrow/array/extension.go\n##########\n@@ -0,0 +1,236 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package array\n+\n+import (\n+\t\"reflect\"\n+\n+\t\"github.com/apache/arrow/go/arrow\"\n+\t\"github.com/apache/arrow/go/arrow/memory\"\n+\t\"golang.org/x/xerrors\"\n+)\n+\n+// ExtensionArray is the interface that needs to be implemented to handle\n+// user-defined extension type arrays. In order to ensure consistency and\n+// proper behavior, all ExtensionArray types must embed ExtensionArrayBase\n+// in order to meet the interface which provides the default implementation\n+// and handling for the array while allowing custom behavior to be built\n+// on top of it.\n+type ExtensionArray interface {\n+\tInterface\n+\t// ExtensionType returns the datatype as per calling DataType(), but\n+\t// already cast to ExtensionType\n+\tExtensionType() arrow.ExtensionType\n+\t// Storage returns the underlying storage array for this array.\n+\tStorage() Interface\n+\n+\t// by having a non-exported function in the interface, it means that\n+\t// consumers must embed ExtensionArrayBase in their structs in order\n+\t// to fulfill this interface.\n+\tmustEmbedExtensionArrayBase()\n+}\n+\n+// two extension arrays are equal if their data types are equal and\n+// their underlying storage arrays are equal.\n+func arrayEqualExtension(l, r ExtensionArray) bool {\n+\tif !arrow.TypeEqual(l.DataType(), r.DataType()) {\n+\t\treturn false\n+\t}\n+\n+\treturn ArrayEqual(l.Storage(), r.Storage())\n+}\n+\n+// two extension arrays are approximately equal if their data types are\n+// equal and their underlying storage arrays are approximately equal.\n+func arrayApproxEqualExtension(l, r ExtensionArray, opt equalOption) bool {\n+\tif !arrow.TypeEqual(l.DataType(), r.DataType()) {\n+\t\treturn false\n+\t}\n+\n+\treturn arrayApproxEqual(l.Storage(), r.Storage(), opt)\n+}\n+\n+// NewExtensionArrayWithStorage constructs a new ExtensionArray from the provided\n+// ExtensionType and uses the provided storage interface as the underlying storage.\n+// This will not release the storage array passed in so consumers should call Release\n\nReview comment:\n       so users will generally call release right after construction?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-11T15:55:57.259+0000",
                    "updated": "2021-05-11T15:55:57.259+0000",
                    "started": "2021-05-11T15:55:57.258+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "594602",
                    "issueId": "13234537"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13234537/worklog/594610",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #10203:\nURL: https://github.com/apache/arrow/pull/10203#discussion_r630315454\n\n\n\n##########\nFile path: go/arrow/compare.go\n##########\n@@ -46,34 +46,45 @@ func TypeEqual(left, right DataType, opts ...TypeEqualOption) bool {\n \n \tswitch {\n \tcase left == nil || right == nil:\n-\t\treturn false\n+\t\treturn left == nil && right == nil\n \tcase left.ID() != right.ID():\n \t\treturn false\n \t}\n \n-\t// StructType is the only type that has metadata.\n-\tl, ok := left.(*StructType)\n-\tif !ok || cfg.metadata {\n-\t\treturn reflect.DeepEqual(left, right)\n-\t}\n-\n-\tr := right.(*StructType)\n-\tswitch {\n-\tcase len(l.fields) != len(r.fields):\n-\t\treturn false\n-\tcase !reflect.DeepEqual(l.index, r.index):\n-\t\treturn false\n-\t}\n-\tfor i := range l.fields {\n-\t\tleftField, rightField := l.fields[i], r.fields[i]\n-\t\tswitch {\n-\t\tcase leftField.Name != rightField.Name:\n+\tswitch l := left.(type) {\n+\tcase ExtensionType:\n+\t\treturn l.ExtensionEquals(right.(ExtensionType))\n+\tcase *ListType:\n+\t\tif !TypeEqual(l.Elem(), right.(*ListType).Elem(), opts...) {\n \t\t\treturn false\n-\t\tcase leftField.Nullable != rightField.Nullable:\n+\t\t}\n+\t\tif cfg.metadata {\n+\t\t\treturn l.Meta.Equal(right.(*ListType).Meta)\n+\t\t}\n+\t\treturn true\n+\tcase *StructType:\n+\t\tr := right.(*StructType)\n+\t\tswitch {\n+\t\tcase len(l.fields) != len(r.fields):\n \t\t\treturn false\n-\t\tcase !TypeEqual(leftField.Type, rightField.Type, opts...):\n+\t\tcase !reflect.DeepEqual(l.index, r.index):\n\nReview comment:\n       what is the scope of reflect.DeepEqual, i'm wondering if there are chances transient data might cause false negatives.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-11T16:01:01.413+0000",
                    "updated": "2021-05-11T16:01:01.413+0000",
                    "started": "2021-05-11T16:01:01.413+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "594610",
                    "issueId": "13234537"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13234537/worklog/594611",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #10203:\nURL: https://github.com/apache/arrow/pull/10203#discussion_r630316132\n\n\n\n##########\nFile path: go/arrow/compare_test.go\n##########\n@@ -27,7 +27,7 @@ func TestTypeEqual(t *testing.T) {\n \t\tcheckMetadata bool\n \t}{\n \t\t{\n-\t\t\tnil, nil, false, false,\n+\t\t\tnil, nil, true, false,\n\nReview comment:\n       why this change?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-11T16:01:34.629+0000",
                    "updated": "2021-05-11T16:01:34.629+0000",
                    "started": "2021-05-11T16:01:34.629+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "594611",
                    "issueId": "13234537"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13234537/worklog/594615",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #10203:\nURL: https://github.com/apache/arrow/pull/10203#discussion_r630321847\n\n\n\n##########\nFile path: go/arrow/datatype_extension.go\n##########\n@@ -0,0 +1,163 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package arrow\n+\n+import (\n+\t\"fmt\"\n+\t\"reflect\"\n+\t\"sync\"\n+\n+\t\"golang.org/x/xerrors\"\n+)\n+\n+var (\n+\t// global extension type registry, initially left null to avoid paying\n+\t// the cost if no extension types are used.\n+\t// the choice to use a sync.Map here is because it's expected that most\n+\t// use cases would be to register some number of types at initialization\n+\t// or otherwise and leave them rather than a pattern of repeatedly registering\n+\t// and unregistering types. As per the documentation for sync.Map\n+\t// (https://pkg.go.dev/sync#Map), it is specialized for the case where an entry\n+\t// is written once but read many times which fits our case here as we register\n+\t// a type once and then have to read it many times when deserializing messages\n+\t// with that type.\n+\textTypeRegistry *sync.Map\n+\t// used for initializing the registry once and only once\n+\tinitReg sync.Once\n+)\n+\n+// convenience function to ensure that the type registry is initialized once\n+// and only once in a goroutine-safe manner.\n+func getExtTypeRegistry() *sync.Map {\n+\tinitReg.Do(func() { extTypeRegistry = &sync.Map{} })\n+\treturn extTypeRegistry\n+}\n+\n+// RegisterExtensionType registers the provided ExtensionType by calling ExtensionName\n+// to use as a Key for registrying the type. If a type with the same name is already\n+// registered then this will return an error saying so, otherwise it will return nil\n+// if successful registering the type.\n+// This function is safe to call from multiple goroutines simultaneously.\n+func RegisterExtensionType(typ ExtensionType) error {\n+\tname := typ.ExtensionName()\n+\tregistry := getExtTypeRegistry()\n+\tif _, existed := registry.LoadOrStore(name, typ); existed {\n+\t\treturn xerrors.Errorf(\"arrow: type extension with name %s already defined\", name)\n+\t}\n+\treturn nil\n+}\n+\n+// UnregisterExtensionType removes the type with the given name from the registry\n+// causing any messages with that type which come in to be expressed with their\n+// metadata and underlying type instead of the extension type that isn't known.\n+// This function is safe to call from multiple goroutines simultaneously.\n+func UnregisterExtensionType(typName string) error {\n+\tregistry := getExtTypeRegistry()\n+\tif _, loaded := registry.LoadAndDelete(typName); !loaded {\n+\t\treturn xerrors.Errorf(\"arrow: no type extension with name %s found\", typName)\n+\t}\n+\treturn nil\n+}\n+\n+// GetExtensionType retrieves and returns the extension type of the given name\n+// from the global extension type registry. If the type isn't found it will return\n+// nil. This function is safe to call from multiple goroutines concurrently.\n+func GetExtensionType(typName string) ExtensionType {\n+\tregistry := getExtTypeRegistry()\n+\tif val, ok := registry.Load(typName); ok {\n+\t\treturn val.(ExtensionType)\n+\t}\n+\treturn nil\n+}\n+\n+// ExtensionType is an interface for handling user-defined types. They must be\n+// DataTypes and must embed arrow.ExtensionBase in them in order to work properly\n+// ensuring that they always have the expected base behavior.\n+//\n+// The arrow.ExtensionBase that needs to be embedded implements the DataType interface\n+// leaving the remaining functions having to be implemented by the actual user-defined\n+// type in order to be handled properly.\n+type ExtensionType interface {\n+\tDataType\n+\t// ArrayType should return the reflect.TypeOf(ExtensionArrayType{}) where the\n+\t// ExtensionArrayType is a type that implements the array.ExtensionArray interface.\n+\t// Such a type must also embed the array.ExtensionArrayBase in it. This will be used\n+\t// when creating arrays of this ExtensionType by using reflect.New\n+\tArrayType() reflect.Type\n+\t// ExtensionName is what will be used when registering / unregistering this extension\n+\t// type. Multiple user-defined types can be defined with a parameterized ExtensionType\n+\t// as long as the parameter is used in the ExtensionName to distinguish the instances\n+\t// in the global Extension Type registry.\n+\t// The return from this is also what will be placed in the metadata for IPC communication\n+\t// under the key ARROW:extension:name\n+\tExtensionName() string\n+\t// StorageType returns the underlying storage type which is used by this extension\n+\t// type. It is already implemented by the ExtensionBase struct and thus does not need\n+\t// to be re-implemented by a user-defined type.\n+\tStorageType() DataType\n+\t// ExtensionEquals is used to tell whether two ExtensionType instances are equal types.\n+\tExtensionEquals(ExtensionType) bool\n+\t// Serialize should produce any extra metadata necessary for initializing an instance of\n+\t// this user-defined type. Not all user-defined types require this and it is valid to return\n+\t// nil from this function or an empty slice. This is used for the IPC format and will be\n+\t// added to metadata for IPC communication under the key ARROW:extension:metadata\n+\t// This should be implemented such that it is valid to be called by multiple goroutines\n+\t// concurrently.\n+\tSerialize() []byte\n\nReview comment:\n       hmm, I need to double check but I think this actually needs to be a UTF8 string not raw bytes.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-11T16:06:24.425+0000",
                    "updated": "2021-05-11T16:06:24.425+0000",
                    "started": "2021-05-11T16:06:24.425+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "594615",
                    "issueId": "13234537"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13234537/worklog/594617",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #10203:\nURL: https://github.com/apache/arrow/pull/10203#discussion_r630327365\n\n\n\n##########\nFile path: go/arrow/internal/testing/types/extension_types.go\n##########\n@@ -0,0 +1,247 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+// Package types contains user-defined types for use in the tests for the arrow package\n+package types\n+\n+import (\n+\t\"encoding/binary\"\n+\t\"fmt\"\n+\t\"reflect\"\n+\n+\t\"github.com/apache/arrow/go/arrow\"\n+\t\"github.com/apache/arrow/go/arrow/array\"\n+\t\"golang.org/x/xerrors\"\n+)\n+\n+// UuidArray is a simple array which is a FixedSizeBinary(16)\n+type UuidArray struct {\n\nReview comment:\n       small style nit: UUID seems more consistent with other abbreviation handling in Go?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-11T16:12:10.077+0000",
                    "updated": "2021-05-11T16:12:10.077+0000",
                    "started": "2021-05-11T16:12:10.077+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "594617",
                    "issueId": "13234537"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13234537/worklog/594827",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on a change in pull request #10203:\nURL: https://github.com/apache/arrow/pull/10203#discussion_r630554457\n\n\n\n##########\nFile path: go/arrow/datatype_extension.go\n##########\n@@ -0,0 +1,163 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package arrow\n+\n+import (\n+\t\"fmt\"\n+\t\"reflect\"\n+\t\"sync\"\n+\n+\t\"golang.org/x/xerrors\"\n+)\n+\n+var (\n+\t// global extension type registry, initially left null to avoid paying\n+\t// the cost if no extension types are used.\n+\t// the choice to use a sync.Map here is because it's expected that most\n+\t// use cases would be to register some number of types at initialization\n+\t// or otherwise and leave them rather than a pattern of repeatedly registering\n+\t// and unregistering types. As per the documentation for sync.Map\n+\t// (https://pkg.go.dev/sync#Map), it is specialized for the case where an entry\n+\t// is written once but read many times which fits our case here as we register\n+\t// a type once and then have to read it many times when deserializing messages\n+\t// with that type.\n+\textTypeRegistry *sync.Map\n+\t// used for initializing the registry once and only once\n+\tinitReg sync.Once\n+)\n+\n+// convenience function to ensure that the type registry is initialized once\n+// and only once in a goroutine-safe manner.\n+func getExtTypeRegistry() *sync.Map {\n+\tinitReg.Do(func() { extTypeRegistry = &sync.Map{} })\n+\treturn extTypeRegistry\n+}\n+\n+// RegisterExtensionType registers the provided ExtensionType by calling ExtensionName\n+// to use as a Key for registrying the type. If a type with the same name is already\n+// registered then this will return an error saying so, otherwise it will return nil\n+// if successful registering the type.\n+// This function is safe to call from multiple goroutines simultaneously.\n+func RegisterExtensionType(typ ExtensionType) error {\n+\tname := typ.ExtensionName()\n+\tregistry := getExtTypeRegistry()\n+\tif _, existed := registry.LoadOrStore(name, typ); existed {\n+\t\treturn xerrors.Errorf(\"arrow: type extension with name %s already defined\", name)\n+\t}\n+\treturn nil\n+}\n+\n+// UnregisterExtensionType removes the type with the given name from the registry\n+// causing any messages with that type which come in to be expressed with their\n+// metadata and underlying type instead of the extension type that isn't known.\n+// This function is safe to call from multiple goroutines simultaneously.\n+func UnregisterExtensionType(typName string) error {\n+\tregistry := getExtTypeRegistry()\n+\tif _, loaded := registry.LoadAndDelete(typName); !loaded {\n+\t\treturn xerrors.Errorf(\"arrow: no type extension with name %s found\", typName)\n+\t}\n+\treturn nil\n+}\n+\n+// GetExtensionType retrieves and returns the extension type of the given name\n+// from the global extension type registry. If the type isn't found it will return\n+// nil. This function is safe to call from multiple goroutines concurrently.\n+func GetExtensionType(typName string) ExtensionType {\n+\tregistry := getExtTypeRegistry()\n+\tif val, ok := registry.Load(typName); ok {\n+\t\treturn val.(ExtensionType)\n+\t}\n+\treturn nil\n+}\n+\n+// ExtensionType is an interface for handling user-defined types. They must be\n+// DataTypes and must embed arrow.ExtensionBase in them in order to work properly\n+// ensuring that they always have the expected base behavior.\n+//\n+// The arrow.ExtensionBase that needs to be embedded implements the DataType interface\n+// leaving the remaining functions having to be implemented by the actual user-defined\n+// type in order to be handled properly.\n+type ExtensionType interface {\n+\tDataType\n+\t// ArrayType should return the reflect.TypeOf(ExtensionArrayType{}) where the\n+\t// ExtensionArrayType is a type that implements the array.ExtensionArray interface.\n+\t// Such a type must also embed the array.ExtensionArrayBase in it. This will be used\n+\t// when creating arrays of this ExtensionType by using reflect.New\n+\tArrayType() reflect.Type\n+\t// ExtensionName is what will be used when registering / unregistering this extension\n+\t// type. Multiple user-defined types can be defined with a parameterized ExtensionType\n+\t// as long as the parameter is used in the ExtensionName to distinguish the instances\n+\t// in the global Extension Type registry.\n+\t// The return from this is also what will be placed in the metadata for IPC communication\n+\t// under the key ARROW:extension:name\n+\tExtensionName() string\n+\t// StorageType returns the underlying storage type which is used by this extension\n+\t// type. It is already implemented by the ExtensionBase struct and thus does not need\n+\t// to be re-implemented by a user-defined type.\n+\tStorageType() DataType\n+\t// ExtensionEquals is used to tell whether two ExtensionType instances are equal types.\n+\tExtensionEquals(ExtensionType) bool\n+\t// Serialize should produce any extra metadata necessary for initializing an instance of\n+\t// this user-defined type. Not all user-defined types require this and it is valid to return\n+\t// nil from this function or an empty slice. This is used for the IPC format and will be\n+\t// added to metadata for IPC communication under the key ARROW:extension:metadata\n+\t// This should be implemented such that it is valid to be called by multiple goroutines\n+\t// concurrently.\n+\tSerialize() []byte\n\nReview comment:\n       The c++ unit tests write raw bytes of uint32 values in the \"parametric\" extension type used in the unit tests, so I assumed it could be any bytes and wasn't required to be utf-8.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-11T21:31:43.868+0000",
                    "updated": "2021-05-11T21:31:43.868+0000",
                    "started": "2021-05-11T21:31:43.868+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "594827",
                    "issueId": "13234537"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13234537/worklog/594831",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on a change in pull request #10203:\nURL: https://github.com/apache/arrow/pull/10203#discussion_r630561454\n\n\n\n##########\nFile path: go/arrow/array/extension.go\n##########\n@@ -0,0 +1,236 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package array\n+\n+import (\n+\t\"reflect\"\n+\n+\t\"github.com/apache/arrow/go/arrow\"\n+\t\"github.com/apache/arrow/go/arrow/memory\"\n+\t\"golang.org/x/xerrors\"\n+)\n+\n+// ExtensionArray is the interface that needs to be implemented to handle\n+// user-defined extension type arrays. In order to ensure consistency and\n+// proper behavior, all ExtensionArray types must embed ExtensionArrayBase\n+// in order to meet the interface which provides the default implementation\n+// and handling for the array while allowing custom behavior to be built\n+// on top of it.\n+type ExtensionArray interface {\n+\tInterface\n+\t// ExtensionType returns the datatype as per calling DataType(), but\n+\t// already cast to ExtensionType\n+\tExtensionType() arrow.ExtensionType\n+\t// Storage returns the underlying storage array for this array.\n+\tStorage() Interface\n+\n+\t// by having a non-exported function in the interface, it means that\n+\t// consumers must embed ExtensionArrayBase in their structs in order\n+\t// to fulfill this interface.\n+\tmustEmbedExtensionArrayBase()\n+}\n+\n+// two extension arrays are equal if their data types are equal and\n+// their underlying storage arrays are equal.\n+func arrayEqualExtension(l, r ExtensionArray) bool {\n+\tif !arrow.TypeEqual(l.DataType(), r.DataType()) {\n+\t\treturn false\n+\t}\n+\n+\treturn ArrayEqual(l.Storage(), r.Storage())\n+}\n+\n+// two extension arrays are approximately equal if their data types are\n+// equal and their underlying storage arrays are approximately equal.\n+func arrayApproxEqualExtension(l, r ExtensionArray, opt equalOption) bool {\n+\tif !arrow.TypeEqual(l.DataType(), r.DataType()) {\n+\t\treturn false\n+\t}\n+\n+\treturn arrayApproxEqual(l.Storage(), r.Storage(), opt)\n+}\n+\n+// NewExtensionArrayWithStorage constructs a new ExtensionArray from the provided\n+// ExtensionType and uses the provided storage interface as the underlying storage.\n+// This will not release the storage array passed in so consumers should call Release\n\nReview comment:\n       If they use this constructor to pass an already existing `array.Interface` then they still need to manually call `Release` on the storage `array.Interface` they pass in since this doesn't `take ownership` but instead effectively uses `Retain` to be another reference to the same data.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-11T21:45:35.598+0000",
                    "updated": "2021-05-11T21:45:35.598+0000",
                    "started": "2021-05-11T21:45:35.598+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "594831",
                    "issueId": "13234537"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13234537/worklog/594836",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on a change in pull request #10203:\nURL: https://github.com/apache/arrow/pull/10203#discussion_r630562673\n\n\n\n##########\nFile path: go/arrow/compare.go\n##########\n@@ -46,34 +46,45 @@ func TypeEqual(left, right DataType, opts ...TypeEqualOption) bool {\n \n \tswitch {\n \tcase left == nil || right == nil:\n-\t\treturn false\n+\t\treturn left == nil && right == nil\n \tcase left.ID() != right.ID():\n \t\treturn false\n \t}\n \n-\t// StructType is the only type that has metadata.\n-\tl, ok := left.(*StructType)\n-\tif !ok || cfg.metadata {\n-\t\treturn reflect.DeepEqual(left, right)\n-\t}\n-\n-\tr := right.(*StructType)\n-\tswitch {\n-\tcase len(l.fields) != len(r.fields):\n-\t\treturn false\n-\tcase !reflect.DeepEqual(l.index, r.index):\n-\t\treturn false\n-\t}\n-\tfor i := range l.fields {\n-\t\tleftField, rightField := l.fields[i], r.fields[i]\n-\t\tswitch {\n-\t\tcase leftField.Name != rightField.Name:\n+\tswitch l := left.(type) {\n+\tcase ExtensionType:\n+\t\treturn l.ExtensionEquals(right.(ExtensionType))\n+\tcase *ListType:\n+\t\tif !TypeEqual(l.Elem(), right.(*ListType).Elem(), opts...) {\n \t\t\treturn false\n-\t\tcase leftField.Nullable != rightField.Nullable:\n+\t\t}\n+\t\tif cfg.metadata {\n+\t\t\treturn l.Meta.Equal(right.(*ListType).Meta)\n+\t\t}\n+\t\treturn true\n+\tcase *StructType:\n+\t\tr := right.(*StructType)\n+\t\tswitch {\n+\t\tcase len(l.fields) != len(r.fields):\n \t\t\treturn false\n-\t\tcase !TypeEqual(leftField.Type, rightField.Type, opts...):\n+\t\tcase !reflect.DeepEqual(l.index, r.index):\n\nReview comment:\n       it recursively goes through the objects to confirm that they are equal or not. if you look up at the deleted line 64 above this, I actually didn't change this logic at all despite what the diff shows. The diff isn't handling the changed order of the code well, but the previous code was already doing `!reflect.DeepEqual(l.index, r.index)` so there would be no change in logic from the existing setup for struct types here.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-11T21:48:14.856+0000",
                    "updated": "2021-05-11T21:48:14.856+0000",
                    "started": "2021-05-11T21:48:14.855+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "594836",
                    "issueId": "13234537"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13234537/worklog/594837",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on a change in pull request #10203:\nURL: https://github.com/apache/arrow/pull/10203#discussion_r630564562\n\n\n\n##########\nFile path: go/arrow/compare_test.go\n##########\n@@ -27,7 +27,7 @@ func TestTypeEqual(t *testing.T) {\n \t\tcheckMetadata bool\n \t}{\n \t\t{\n-\t\t\tnil, nil, false, false,\n+\t\t\tnil, nil, true, false,\n\nReview comment:\n       in order for simplifying the type comparison code when handling lists / extension types I made a slight change to the logic here so that if you call `TypeEqual` with both arguments being `nil` then it returns `true` that they are equal. I was actually surprised when i found that this wasn't the case already such that `TypeEqual(nil, nil)` previously returned false. Since it simplified the code in other areas and also makes sense for nil to be equal to nil for a call to `TypeEqual` I didn't see an issue with making that change which only affected this one unit test which expected the false for two nils.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-11T21:52:02.614+0000",
                    "updated": "2021-05-11T21:52:02.614+0000",
                    "started": "2021-05-11T21:52:02.613+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "594837",
                    "issueId": "13234537"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13234537/worklog/594838",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on a change in pull request #10203:\nURL: https://github.com/apache/arrow/pull/10203#discussion_r630565256\n\n\n\n##########\nFile path: go/arrow/internal/testing/types/extension_types.go\n##########\n@@ -0,0 +1,247 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+// Package types contains user-defined types for use in the tests for the arrow package\n+package types\n+\n+import (\n+\t\"encoding/binary\"\n+\t\"fmt\"\n+\t\"reflect\"\n+\n+\t\"github.com/apache/arrow/go/arrow\"\n+\t\"github.com/apache/arrow/go/arrow/array\"\n+\t\"golang.org/x/xerrors\"\n+)\n+\n+// UuidArray is a simple array which is a FixedSizeBinary(16)\n+type UuidArray struct {\n\nReview comment:\n       good catch, that's correct. UUID would be more consistent. I've updated to that now.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-11T21:53:27.324+0000",
                    "updated": "2021-05-11T21:53:27.324+0000",
                    "started": "2021-05-11T21:53:27.324+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "594838",
                    "issueId": "13234537"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13234537/worklog/595440",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #10203:\nURL: https://github.com/apache/arrow/pull/10203#discussion_r631180370\n\n\n\n##########\nFile path: go/arrow/datatype_extension.go\n##########\n@@ -0,0 +1,163 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package arrow\n+\n+import (\n+\t\"fmt\"\n+\t\"reflect\"\n+\t\"sync\"\n+\n+\t\"golang.org/x/xerrors\"\n+)\n+\n+var (\n+\t// global extension type registry, initially left null to avoid paying\n+\t// the cost if no extension types are used.\n+\t// the choice to use a sync.Map here is because it's expected that most\n+\t// use cases would be to register some number of types at initialization\n+\t// or otherwise and leave them rather than a pattern of repeatedly registering\n+\t// and unregistering types. As per the documentation for sync.Map\n+\t// (https://pkg.go.dev/sync#Map), it is specialized for the case where an entry\n+\t// is written once but read many times which fits our case here as we register\n+\t// a type once and then have to read it many times when deserializing messages\n+\t// with that type.\n+\textTypeRegistry *sync.Map\n+\t// used for initializing the registry once and only once\n+\tinitReg sync.Once\n+)\n+\n+// convenience function to ensure that the type registry is initialized once\n+// and only once in a goroutine-safe manner.\n+func getExtTypeRegistry() *sync.Map {\n+\tinitReg.Do(func() { extTypeRegistry = &sync.Map{} })\n+\treturn extTypeRegistry\n+}\n+\n+// RegisterExtensionType registers the provided ExtensionType by calling ExtensionName\n+// to use as a Key for registrying the type. If a type with the same name is already\n+// registered then this will return an error saying so, otherwise it will return nil\n+// if successful registering the type.\n+// This function is safe to call from multiple goroutines simultaneously.\n+func RegisterExtensionType(typ ExtensionType) error {\n+\tname := typ.ExtensionName()\n+\tregistry := getExtTypeRegistry()\n+\tif _, existed := registry.LoadOrStore(name, typ); existed {\n+\t\treturn xerrors.Errorf(\"arrow: type extension with name %s already defined\", name)\n+\t}\n+\treturn nil\n+}\n+\n+// UnregisterExtensionType removes the type with the given name from the registry\n+// causing any messages with that type which come in to be expressed with their\n+// metadata and underlying type instead of the extension type that isn't known.\n+// This function is safe to call from multiple goroutines simultaneously.\n+func UnregisterExtensionType(typName string) error {\n+\tregistry := getExtTypeRegistry()\n+\tif _, loaded := registry.LoadAndDelete(typName); !loaded {\n+\t\treturn xerrors.Errorf(\"arrow: no type extension with name %s found\", typName)\n+\t}\n+\treturn nil\n+}\n+\n+// GetExtensionType retrieves and returns the extension type of the given name\n+// from the global extension type registry. If the type isn't found it will return\n+// nil. This function is safe to call from multiple goroutines concurrently.\n+func GetExtensionType(typName string) ExtensionType {\n+\tregistry := getExtTypeRegistry()\n+\tif val, ok := registry.Load(typName); ok {\n+\t\treturn val.(ExtensionType)\n+\t}\n+\treturn nil\n+}\n+\n+// ExtensionType is an interface for handling user-defined types. They must be\n+// DataTypes and must embed arrow.ExtensionBase in them in order to work properly\n+// ensuring that they always have the expected base behavior.\n+//\n+// The arrow.ExtensionBase that needs to be embedded implements the DataType interface\n+// leaving the remaining functions having to be implemented by the actual user-defined\n+// type in order to be handled properly.\n+type ExtensionType interface {\n+\tDataType\n+\t// ArrayType should return the reflect.TypeOf(ExtensionArrayType{}) where the\n+\t// ExtensionArrayType is a type that implements the array.ExtensionArray interface.\n+\t// Such a type must also embed the array.ExtensionArrayBase in it. This will be used\n+\t// when creating arrays of this ExtensionType by using reflect.New\n+\tArrayType() reflect.Type\n+\t// ExtensionName is what will be used when registering / unregistering this extension\n+\t// type. Multiple user-defined types can be defined with a parameterized ExtensionType\n+\t// as long as the parameter is used in the ExtensionName to distinguish the instances\n+\t// in the global Extension Type registry.\n+\t// The return from this is also what will be placed in the metadata for IPC communication\n+\t// under the key ARROW:extension:name\n+\tExtensionName() string\n+\t// StorageType returns the underlying storage type which is used by this extension\n+\t// type. It is already implemented by the ExtensionBase struct and thus does not need\n+\t// to be re-implemented by a user-defined type.\n+\tStorageType() DataType\n+\t// ExtensionEquals is used to tell whether two ExtensionType instances are equal types.\n+\tExtensionEquals(ExtensionType) bool\n+\t// Serialize should produce any extra metadata necessary for initializing an instance of\n+\t// this user-defined type. Not all user-defined types require this and it is valid to return\n+\t// nil from this function or an empty slice. This is used for the IPC format and will be\n+\t// added to metadata for IPC communication under the key ARROW:extension:metadata\n+\t// This should be implemented such that it is valid to be called by multiple goroutines\n+\t// concurrently.\n+\tSerialize() []byte\n\nReview comment:\n       I think this likely depends on the language binding.  The [schema](https://github.com/apache/arrow/blob/master/format/Schema.fbs#L311) defines both key and values as string, this is a unfortunate design flaw.  From the [flatbuffers spec](https://google.github.io/flatbuffers/flatbuffers_guide_writing_schema.html) strings should only include UTF-8 or ASCII, I think C++ gets lucky because std::string has no enforcement on top of it.  I think in other languages (I would guess java) this would cause problems).\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-12T16:01:04.315+0000",
                    "updated": "2021-05-12T16:01:04.315+0000",
                    "started": "2021-05-12T16:01:04.314+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "595440",
                    "issueId": "13234537"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 14400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@7c1fb416[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@954f4c2[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5ec7d9d4[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@701bc42a[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@181a0e7f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@cbe1c74[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6cd77d4e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@4243ce6a[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@ae259ab[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@76c3a93f[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@21a987a4[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@7dc53d65[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 14400,
        "customfield_12312520": null,
        "customfield_12312521": "Thu May 13 16:04:12 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-05-13T16:04:12.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-5385/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2019-05-21T08:55:06.000+0000",
        "updated": "2021-10-08T18:53:50.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "4h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 14400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Go] implement EXTENSION datatype",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13234537/comment/17343976",
                    "id": "17343976",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield",
                        "name": "emkornfield",
                        "key": "emkornfield",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Micah Kornfield",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Issue resolved by pull request 10203\n[https://github.com/apache/arrow/pull/10203]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield",
                        "name": "emkornfield",
                        "key": "emkornfield",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Micah Kornfield",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2021-05-13T16:04:12.732+0000",
                    "updated": "2021-05-13T16:04:12.732+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z02wag:",
        "customfield_12314139": null
    }
}