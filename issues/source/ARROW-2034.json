{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13133712",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13133712",
    "key": "ARROW-2034",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12352360",
                "id": "12352360",
                "description": "",
                "name": "11.0.0",
                "archived": false,
                "released": false
            }
        ],
        "resolution": null,
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "filesystem",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "2.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12594617",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12594617",
                "type": {
                    "id": "10020",
                    "name": "Cloners",
                    "inward": "is cloned by",
                    "outward": "is a clone of",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10020"
                },
                "inwardIssue": {
                    "id": "13320452",
                    "key": "ARROW-9611",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13320452",
                    "fields": {
                        "summary": "[C++] Filesystem implementation for Azure Data Lake",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            },
            {
                "id": "12642845",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12642845",
                "type": {
                    "id": "10001",
                    "name": "dependent",
                    "inward": "is depended upon by",
                    "outward": "depends upon",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10001"
                },
                "inwardIssue": {
                    "id": "13449066",
                    "key": "ARROW-16791",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13449066",
                    "fields": {
                        "summary": "[R] Expose Azure Blob Storage filesystem",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/2",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/critical.svg",
                            "name": "Critical",
                            "id": "2"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=shefali636",
            "name": "shefali636",
            "key": "JIRAUSER287868",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Shefali Singh",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
            "description": "The issue is open and ready for the assignee to start work on it.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
            "name": "Open",
            "id": "1",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                "id": 2,
                "key": "new",
                "colorName": "blue-gray",
                "name": "To Do"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 39600,
            "total": 39600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 39600,
            "total": 39600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2034/votes",
            "votes": 3,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 66,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13133712/worklog/758016",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #12914:\nURL: https://github.com/apache/arrow/pull/12914#issuecomment-1101586375\n\n   https://issues.apache.org/jira/browse/ARROW-2034\n\n\n",
                    "created": "2022-04-18T17:25:25.725+0000",
                    "updated": "2022-04-18T17:25:25.725+0000",
                    "started": "2022-04-18T17:25:25.725+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "758016",
                    "issueId": "13133712"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13133712/worklog/758017",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #12914:\nURL: https://github.com/apache/arrow/pull/12914#issuecomment-1101586385\n\n   :warning: Ticket **has not been started in JIRA**, please click 'Start Progress'.\n\n\n",
                    "created": "2022-04-18T17:25:27.743+0000",
                    "updated": "2022-04-18T17:25:27.743+0000",
                    "started": "2022-04-18T17:25:27.743+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "758017",
                    "issueId": "13133712"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13133712/worklog/760702",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on code in PR #12914:\nURL: https://github.com/apache/arrow/pull/12914#discussion_r855924917\n\n\n##########\ncpp/CMakeLists.txt:\n##########\n@@ -693,7 +693,9 @@ endif()\n \n # Libraries to link statically with libarrow.so\n set(ARROW_LINK_LIBS)\n+set(ARROW_AZURE_LINK_LIBS)\n set(ARROW_STATIC_LINK_LIBS)\n+set(ARROW_AZURE_STATIC_LINK_LIBS)\n\nReview Comment:\n   Could you use `ARROW_LINK_LIBS` and `ARROW_STATIC_LINK_LIBS` instead of add new `ARROW_AZURE_*` variables like S3 and GCS?\n\n\n\n##########\ncpp/cmake_modules/BuildUtils.cmake:\n##########\n@@ -46,6 +46,260 @@ if(WIN32 AND CMAKE_CXX_COMPILER_ID STREQUAL \"GNU\")\n   list(APPEND ARROW_BOOST_PROCESS_COMPILE_DEFINITIONS \"BOOST_USE_WINDOWS_H=1\")\n endif()\n \n+function(ADD_ARROW_LIB_AZURE LIB_NAME)\n\nReview Comment:\n   Can we use `add_arrow_lib` instead of defining this?\n\n\n\n##########\ncpp/cmake_modules/ThirdpartyToolchain.cmake:\n##########\n@@ -4513,6 +4513,53 @@ if(ARROW_S3)\n   endif()\n endif()\n \n+macro(build_azuresdk)\n+  message(STATUS \"Building Azure C++ SDK from source\")\n+\n+  set(AZURESDK_PREFIX \"${CMAKE_CURRENT_BINARY_DIR}/azuresdk_ep-install\")\n+  set(AZURESDK_INCLUDE_DIR \"${AZURESDK_PREFIX}/include\")\n+\n+  set(AZURESDK_CMAKE_ARGS\n+      ${EP_COMMON_CMAKE_ARGS}\n+      -DBUILD_TESTING=OFF\n+      -DCMAKE_INSTALL_LIBDIR=lib\n+      \"-DCMAKE_INSTALL_PREFIX=${AZURESDK_PREFIX}\"\n+      -DCMAKE_PREFIX_PATH=${AZURESDK_PREFIX})\n+\n+  file(MAKE_DIRECTORY ${AZURESDK_INCLUDE_DIR})\n+\n+  # Azure C++ SDK related libraries to link statically\n+  set(_AZURESDK_LIBS\n+      azure-core\n+      azure-identity\n+      azure-storage-blobs\n+      azure-storage-common\n+      azure-storage-files-datalake)\n+  set(AZURESDK_LIBRARIES)\n+  set(AZURESDK_LIBRARIES_CPP)\n+  foreach(_AZURESDK_LIB ${_AZURESDK_LIBS})\n+    string(TOUPPER ${_AZURESDK_LIB} _AZURESDK_LIB_UPPER)\n+    string(REPLACE \"-\" \"_\" _AZURESDK_LIB_NAME_PREFIX ${_AZURESDK_LIB_UPPER})\n+    list(APPEND AZURESDK_LIBRARIES_CPP \"${_AZURESDK_LIB}-cpp\")\n+    set(_AZURESDK_TARGET_NAME Azure::${_AZURESDK_LIB})\n+    list(APPEND AZURESDK_LIBRARIES ${_AZURESDK_TARGET_NAME})\n+  endforeach()\n+\n+  set(AZURESDK_LINK_LIBRARIES ${AZURESDK_LIBRARIES})\n+endmacro()\n+\n+if(ARROW_AZURE)\n+  build_azuresdk()\n+\n+  foreach(AZURESDK_LIBRARY_CPP ${AZURESDK_LIBRARIES_CPP})\n+    find_package(${AZURESDK_LIBRARY_CPP} CONFIG REQUIRED)\n+  endforeach()\n+\n+  include_directories(SYSTEM ${AZURESDK_INCLUDE_DIR})\n+  message(STATUS \"Found AZURE SDK headers: ${AZURESDK_INCLUDE_DIR}\")\n+  message(STATUS \"Found AZURE SDK libraries: ${AZURESDK_LINK_LIBRARIES}\")\n\nReview Comment:\n   ```suggestion\r\n     message(STATUS \"Found Azure SDK headers: ${AZURESDK_INCLUDE_DIR}\")\r\n     message(STATUS \"Found Azure SDK libraries: ${AZURESDK_LINK_LIBRARIES}\")\r\n   ```\n\n\n\n##########\ncpp/src/arrow/filesystem/azure/CMakeLists.txt:\n##########\n@@ -0,0 +1,36 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+set(CMAKE_CXX_STANDARD 14)\n+set(CMAKE_CXX_STANDARD_REQUIRED ON)\n\nReview Comment:\n   Could you use `CXX_STANDARD` and `CXX_STANDARD_REQUIRED` target properties instead?\r\n   * https://cmake.org/cmake/help/latest/prop_tgt/CXX_STANDARD.html#prop_tgt:CXX_STANDARD\r\n   * https://cmake.org/cmake/help/latest/prop_tgt/CXX_STANDARD_REQUIRED.html#prop_tgt:CXX_STANDARD_REQUIRED\n\n\n\n##########\ncpp/src/arrow/filesystem/azure/azurefs.cc:\n##########\n@@ -0,0 +1,1651 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/filesystem/azure/azurefs.h\"\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <azure/core/credentials/credentials.hpp>\n+#include <azure/identity/client_secret_credential.hpp>\n+#include <azure/identity/managed_identity_credential.hpp>\n+#include <azure/storage/blobs.hpp>\n+#include <azure/storage/files/datalake.hpp>\n+#include <chrono>\n+#include <condition_variable>\n+#include <functional>\n+#include <memory>\n+#include <mutex>\n+#include <sstream>\n+#include <thread>\n+#include <unordered_map>\n+#include <utility>\n+\n+#ifdef _WIN32\n+// Undefine preprocessor macros that interfere with AWS function / method names\n+#ifdef GetMessage\n+#undef GetMessage\n+#endif\n+#ifdef GetObject\n+#undef GetObject\n+#endif\n+#endif\n+\n+#include \"arrow/util/windows_fixup.h\"\n+\n+#include \"arrow/buffer.h\"\n+#include \"arrow/filesystem/filesystem.h\"\n+#include \"arrow/filesystem/path_util.h\"\n+#include \"arrow/filesystem/util_internal.h\"\n+#include \"arrow/io/interfaces.h\"\n+#include \"arrow/io/memory.h\"\n+#include \"arrow/io/util_internal.h\"\n+#include \"arrow/result.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/util/async_generator.h\"\n+#include \"arrow/util/atomic_shared_ptr.h\"\n+#include \"arrow/util/checked_cast.h\"\n+#include \"arrow/util/future.h\"\n+#include \"arrow/util/key_value_metadata.h\"\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/util/optional.h\"\n+#include \"arrow/util/task_group.h\"\n+#include \"arrow/util/thread_pool.h\"\n+\n+namespace arrow {\n+\n+using internal::Uri;\n+\n+namespace fs {\n+\n+static const char kSep = '/';\n+\n+// -----------------------------------------------------------------------\n+// AzureOptions implementation\n+\n+AzureOptions::AzureOptions() {}\n+\n+void AzureOptions::ConfigureAnonymousCredentials(const std::string& account_name) {\n+  account_dfs_url = \"https://\" + account_name + \".dfs.core.windows.net/\";\n+  account_blob_url = \"https://\" + account_name + \".blob.core.windows.net/\";\n+  credentials_kind = AzureCredentialsKind::Anonymous;\n+}\n+\n+void AzureOptions::ConfigureAccountKeyCredentials(const std::string& account_name,\n+                                                  const std::string& account_key) {\n+  account_dfs_url = \"https://\" + account_name + \".dfs.core.windows.net/\";\n+  account_blob_url = \"https://\" + account_name + \".blob.core.windows.net/\";\n+  storage_credentials_provider =\n+      std::make_shared<Azure::Storage::StorageSharedKeyCredential>(account_name,\n+                                                                   account_key);\n+  credentials_kind = AzureCredentialsKind::StorageCredentials;\n+}\n+\n+void AzureOptions::ConfigureConnectionStringCredentials(\n+    const std::string& connection_string_uri) {\n+  auto account_name =\n+      Azure::Storage::_internal::ParseConnectionString(connection_string_uri).AccountName;\n\nReview Comment:\n   Can we use public API instead of internal API here?\n\n\n\n##########\ncpp/src/arrow/filesystem/azure/azurefs.cc:\n##########\n@@ -0,0 +1,1651 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/filesystem/azure/azurefs.h\"\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <azure/core/credentials/credentials.hpp>\n+#include <azure/identity/client_secret_credential.hpp>\n+#include <azure/identity/managed_identity_credential.hpp>\n+#include <azure/storage/blobs.hpp>\n+#include <azure/storage/files/datalake.hpp>\n+#include <chrono>\n+#include <condition_variable>\n+#include <functional>\n+#include <memory>\n+#include <mutex>\n+#include <sstream>\n+#include <thread>\n+#include <unordered_map>\n+#include <utility>\n+\n+#ifdef _WIN32\n+// Undefine preprocessor macros that interfere with AWS function / method names\n+#ifdef GetMessage\n+#undef GetMessage\n+#endif\n+#ifdef GetObject\n+#undef GetObject\n+#endif\n+#endif\n+\n+#include \"arrow/util/windows_fixup.h\"\n+\n+#include \"arrow/buffer.h\"\n+#include \"arrow/filesystem/filesystem.h\"\n+#include \"arrow/filesystem/path_util.h\"\n+#include \"arrow/filesystem/util_internal.h\"\n+#include \"arrow/io/interfaces.h\"\n+#include \"arrow/io/memory.h\"\n+#include \"arrow/io/util_internal.h\"\n+#include \"arrow/result.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/util/async_generator.h\"\n+#include \"arrow/util/atomic_shared_ptr.h\"\n+#include \"arrow/util/checked_cast.h\"\n+#include \"arrow/util/future.h\"\n+#include \"arrow/util/key_value_metadata.h\"\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/util/optional.h\"\n+#include \"arrow/util/task_group.h\"\n+#include \"arrow/util/thread_pool.h\"\n+\n+namespace arrow {\n+\n+using internal::Uri;\n+\n+namespace fs {\n+\n+static const char kSep = '/';\n+\n+// -----------------------------------------------------------------------\n+// AzureOptions implementation\n+\n+AzureOptions::AzureOptions() {}\n+\n+void AzureOptions::ConfigureAnonymousCredentials(const std::string& account_name) {\n+  account_dfs_url = \"https://\" + account_name + \".dfs.core.windows.net/\";\n+  account_blob_url = \"https://\" + account_name + \".blob.core.windows.net/\";\n+  credentials_kind = AzureCredentialsKind::Anonymous;\n+}\n+\n+void AzureOptions::ConfigureAccountKeyCredentials(const std::string& account_name,\n+                                                  const std::string& account_key) {\n+  account_dfs_url = \"https://\" + account_name + \".dfs.core.windows.net/\";\n+  account_blob_url = \"https://\" + account_name + \".blob.core.windows.net/\";\n+  storage_credentials_provider =\n+      std::make_shared<Azure::Storage::StorageSharedKeyCredential>(account_name,\n+                                                                   account_key);\n+  credentials_kind = AzureCredentialsKind::StorageCredentials;\n+}\n+\n+void AzureOptions::ConfigureConnectionStringCredentials(\n+    const std::string& connection_string_uri) {\n+  auto account_name =\n+      Azure::Storage::_internal::ParseConnectionString(connection_string_uri).AccountName;\n+  account_dfs_url = \"https://\" + account_name + \".dfs.core.windows.net/\";\n+  account_blob_url = \"https://\" + account_name + \".blob.core.windows.net/\";\n+  connection_string = connection_string_uri;\n+  credentials_kind = AzureCredentialsKind::ConnectionString;\n+}\n+\n+void AzureOptions::ConfigureServicePrincipleCredentials(\n+    const std::string& account_name, const std::string& tenant_id,\n+    const std::string& client_id, const std::string& client_secret) {\n+  account_dfs_url = \"https://\" + account_name + \".dfs.core.windows.net/\";\n+  account_blob_url = \"https://\" + account_name + \".blob.core.windows.net/\";\n+  service_principle_credentials_provider =\n+      std::make_shared<Azure::Identity::ClientSecretCredential>(tenant_id, client_id,\n+                                                                client_secret);\n+  credentials_kind = AzureCredentialsKind::ServicePrincipleCredentials;\n+}\n+\n+void AzureOptions::ConfigureSasCredentials(const std::string& uri) {\n+  auto src = internal::RemoveTrailingSlash(uri);\n+  auto first_sep = src.find_first_of(\"?\");\n+  sas_token = std::string(src.substr(first_sep));\n+  account_blob_url = std::string(src.substr(0, first_sep));\n+  src = internal::RemoveTrailingSlash(account_blob_url);\n+  first_sep = src.find(\"blob.core.windows.net\");\n+  account_dfs_url = std::string(src.substr(0, first_sep)) + \"dfs\" +\n+                    std::string(src.substr(first_sep + 4)) + \"/\";\n+  credentials_kind = AzureCredentialsKind::Sas;\n+}\n+\n+bool AzureOptions::Equals(const AzureOptions& other) const {\n+  return (scheme == other.scheme && account_dfs_url == other.account_dfs_url &&\n+          account_blob_url == other.account_blob_url &&\n+          credentials_kind == other.credentials_kind);\n+}\n+\n+AzureOptions AzureOptions::FromAnonymous(const std::string account_name) {\n+  AzureOptions options;\n+  options.ConfigureAnonymousCredentials(account_name);\n+  return options;\n+}\n+\n+AzureOptions AzureOptions::FromAccountKey(const std::string& account_name,\n+                                          const std::string& account_key) {\n+  AzureOptions options;\n+  options.ConfigureAccountKeyCredentials(account_name, account_key);\n+  return options;\n+}\n+\n+AzureOptions AzureOptions::FromConnectionString(const std::string& connection_string) {\n+  AzureOptions options;\n+  options.ConfigureConnectionStringCredentials(connection_string);\n+  return options;\n+}\n+\n+AzureOptions AzureOptions::FromServicePrincipleCredential(\n+    const std::string& account_name, const std::string& tenant_id,\n+    const std::string& client_id, const std::string& client_secret) {\n+  AzureOptions options;\n+  options.ConfigureServicePrincipleCredentials(account_name, tenant_id, client_id,\n+                                               client_secret);\n+  return options;\n+}\n+\n+AzureOptions AzureOptions::FromSas(const std::string& uri) {\n+  AzureOptions options;\n+  options.ConfigureSasCredentials(uri);\n+  return options;\n+}\n+\n+Result<AzureOptions> AzureOptions::FromUri(const std::string& uri_string,\n+                                           std::string* out_path) {\n+  Uri uri;\n+  RETURN_NOT_OK(uri.Parse(uri_string));\n+  return FromUri(uri, out_path);\n+}\n+\n+Result<AzureOptions> AzureOptions::FromUri(const Uri& uri, std::string* out_path) {\n+  AzureOptions options;\n+  AZURE_ASSERT(uri.has_host());\n\nReview Comment:\n   It seems that this may call `std::abort()`.\r\n   Generally, we should not use `std::abort()` in a library.\r\n   \r\n   If we need to use `std::abort()`, please use `ARROW_DCHECK` family.\n\n\n\n##########\ncpp/src/arrow/filesystem/azure/azurefs_test.cc:\n##########\n@@ -0,0 +1,1147 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/filesystem/azure/azurefs.h\"\n+\n+#include <chrono>\n+#include <thread>\n+\n+#include <gmock/gmock-matchers.h>\n+#include <gtest/gtest.h>\n+#include <azure/storage/files/datalake.hpp>\n+\n+#include \"arrow/filesystem/test_util.h\"\n+#include \"arrow/testing/future_util.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/testing/util.h\"\n+#include \"arrow/util/key_value_metadata.h\"\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/util/uri.h\"\n+\n+namespace arrow {\n+\n+using internal::Uri;\n+\n+namespace fs {\n+\n+class AzureEnvTestMixin {\n+ public:\n+  static AzureOptions options_;\n+  static std::shared_ptr<AzureBlobFileSystem> fs_;\n+  static std::shared_ptr<Azure::Storage::Files::DataLake::DataLakeServiceClient>\n+      gen2Client_;\n+  static std::shared_ptr<Azure::Storage::Blobs::BlobServiceClient> gen1Client_;\n+\n+  AzureEnvTestMixin() {}\n+\n+  const std::string& GetAdlsGen2AccountName() {\n+    static const std::string accountName = [&]() -> std::string {\n+      return std::getenv(\"ADLS_GEN2_ACCOUNT_NAME\");\n+    }();\n+    return accountName;\n+  }\n+\n+  const std::string& GetAdlsGen2AccountKey() {\n+    static const std::string accountKey = [&]() -> std::string {\n+      return std::getenv(\"ADLS_GEN2_ACCOUNT_KEY\");\n+    }();\n+    return accountKey;\n+  }\n+\n+  const std::string& GetAdlsGen2ConnectionString() {\n+    static const std::string connectionString = [&]() -> std::string {\n+      return std::getenv(\"ADLS_GEN2_CONNECTION_STRING\");\n+    }();\n+    return connectionString;\n+  }\n+\n+  const std::string& GetAdlsGen2SasUrl() {\n+    static const std::string sasUrl = [&]() -> std::string {\n+      return std::getenv(\"ADLS_GEN2_SASURL\");\n+    }();\n+    return sasUrl;\n+  }\n+\n+  const std::string& GetAadTenantId() {\n+    static const std::string tenantId = [&]() -> std::string {\n+      return std::getenv(\"AAD_TENANT_ID\");\n+    }();\n+    return tenantId;\n+  }\n+\n+  const std::string& GetAadClientId() {\n+    static const std::string clientId = [&]() -> std::string {\n+      return std::getenv(\"AAD_CLIENT_ID\");\n+    }();\n+    return clientId;\n+  }\n+\n+  const std::string& GetAadClientSecret() {\n+    static const std::string clientSecret = [&]() -> std::string {\n+      return std::getenv(\"AAD_CLIENT_SECRET\");\n+    }();\n+    return clientSecret;\n+  }\n+\n+  //  private:\n+  //   const std::string& AdlsGen2AccountName = std::getenv(\"ADLS_GEN2_ACCOUNT_NAME\");\n+  //   const std::string& AdlsGen2AccountKey = std::getenv(\"ADLS_GEN2_ACCOUNT_KEY\");\n+  //   const std::string& AdlsGen2ConnectionStringValue = std::getenv(\n+  //                                                    \"ADLS_GEN2_CONNECTION_STRING\");\n+  //   const std::string& AdlsGen2SasUrl = std::getenv(\"ADLS_GEN2_SASURL\");\n+  //   const std::string& AadTenantIdValue = std::getenv(\"AAD_TENANT_ID\");\n+  //   const std::string& AadClientIdValue = std::getenv(\"AAD_CLIENT_ID\");\n+  //   const std::string& AadClientSecretValue = std::getenv(\"AAD_CLIENT_SECRET\");\n\nReview Comment:\n   Should we remove them?\n\n\n\n##########\ncpp/src/arrow/filesystem/azure/azurefs.cc:\n##########\n@@ -0,0 +1,1651 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/filesystem/azure/azurefs.h\"\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <azure/core/credentials/credentials.hpp>\n+#include <azure/identity/client_secret_credential.hpp>\n+#include <azure/identity/managed_identity_credential.hpp>\n+#include <azure/storage/blobs.hpp>\n+#include <azure/storage/files/datalake.hpp>\n+#include <chrono>\n+#include <condition_variable>\n+#include <functional>\n+#include <memory>\n+#include <mutex>\n+#include <sstream>\n+#include <thread>\n+#include <unordered_map>\n+#include <utility>\n+\n+#ifdef _WIN32\n+// Undefine preprocessor macros that interfere with AWS function / method names\n+#ifdef GetMessage\n+#undef GetMessage\n+#endif\n+#ifdef GetObject\n+#undef GetObject\n+#endif\n+#endif\n\nReview Comment:\n   Do we need this for Azure SDK for C++?\n\n\n\n##########\ncpp/cmake_modules/ThirdpartyToolchain.cmake:\n##########\n@@ -4513,6 +4513,53 @@ if(ARROW_S3)\n   endif()\n endif()\n \n+macro(build_azuresdk)\n\nReview Comment:\n   Could you build Azure C++ SDK by `externalproject_add` in this?\n\n\n\n##########\ncpp/cmake_modules/BuildUtils.cmake:\n##########\n@@ -46,6 +46,260 @@ if(WIN32 AND CMAKE_CXX_COMPILER_ID STREQUAL \"GNU\")\n   list(APPEND ARROW_BOOST_PROCESS_COMPILE_DEFINITIONS \"BOOST_USE_WINDOWS_H=1\")\n endif()\n \n+function(ADD_ARROW_LIB_AZURE LIB_NAME)\n+  set(options)\n+  set(one_value_args \n+      BUILD_SHARED\n+      BUILD_STATIC)\n+  set(multi_value_args\n+      SOURCES\n+      STATIC_LINK_LIBS\n+      SHARED_LINK_LIBS\n+      DEPENDENCIES\n+      SHARED_PRIVATE_LINK_LIBS\n+      OUTPUT_PATH)\n+  cmake_parse_arguments(ARG\n+                        \"${options}\"\n+                        \"${one_value_args}\"\n+                        \"${multi_value_args}\"\n+                        ${ARGN})\n+  if(ARG_UNPARSED_ARGUMENTS)\n+    message(SEND_ERROR \"Error: unrecognized arguments: ${ARG_UNPARSED_ARGUMENTS}\")\n+  endif()\n+\n+  if(ARG_SOURCES)\n+    set(SOURCES ${ARG_SOURCES})\n+  else()\n+    set(SOURCES \"${LIB_NAME}.cc\")\n+  endif()\n+\n+  # Allow overriding ARROW_BUILD_SHARED and ARROW_BUILD_STATIC\n+  if(DEFINED ARG_BUILD_SHARED)\n+    set(BUILD_SHARED ${ARG_BUILD_SHARED})\n+  else()\n+    set(BUILD_SHARED ${ARROW_BUILD_SHARED})\n+  endif()\n+  if(DEFINED ARG_BUILD_STATIC)\n+    set(BUILD_STATIC ${ARG_BUILD_STATIC})\n+  else()\n+    set(BUILD_STATIC ${ARROW_BUILD_STATIC})\n+  endif()\n+  if(ARG_OUTPUT_PATH)\n+    set(OUTPUT_PATH ${ARG_OUTPUT_PATH})\n+  else()\n+    set(OUTPUT_PATH ${BUILD_OUTPUT_ROOT_DIRECTORY})\n+  endif()\n+\n+  if(WIN32 OR (CMAKE_GENERATOR STREQUAL Xcode))\n+    # We need to compile C++ separately for each library kind (shared and static)\n+    # because of dllexport declarations on Windows.\n+    # The Xcode generator doesn't reliably work with Xcode as target names are not\n+    # guessed correctly.\n+    set(USE_OBJLIB OFF)\n+  else()\n+    set(USE_OBJLIB ON)\n+  endif()\n+\n+  if(USE_OBJLIB)\n+    # Generate a single \"objlib\" from all C++ modules and link\n+    # that \"objlib\" into each library kind, to avoid compiling twice\n+    add_library(${LIB_NAME}_objlib OBJECT ${SOURCES})\n+    # Necessary to make static linking into other shared libraries work properly\n+    set_property(TARGET ${LIB_NAME}_objlib PROPERTY POSITION_INDEPENDENT_CODE 1)\n+    set(LIB_DEPS $<TARGET_OBJECTS:${LIB_NAME}_objlib>)\n+  else()\n+    set(LIB_DEPS ${ARG_SOURCES})\n+  endif()\n+\n+  set(RUNTIME_INSTALL_DIR bin)\n+\n+  if(BUILD_SHARED)\n+    add_library(${LIB_NAME}_shared SHARED ${LIB_DEPS})\n+\n+    set_target_properties(${LIB_NAME}_shared\n+                          PROPERTIES LIBRARY_OUTPUT_DIRECTORY \"${OUTPUT_PATH}\"\n+                                      RUNTIME_OUTPUT_DIRECTORY \"${OUTPUT_PATH}\"\n+                                      PDB_OUTPUT_DIRECTORY \"${OUTPUT_PATH}\"\n+                                      OUTPUT_NAME ${LIB_NAME}\n+                                      VERSION \"${ARROW_FULL_SO_VERSION}\"\n+                                      SOVERSION \"${ARROW_SO_VERSION}\")\n+\n+    target_link_libraries(${LIB_NAME}_shared LINK_PRIVATE ${ARG_SHARED_PRIVATE_LINK_LIBS})\n+\n+    install(TARGETS ${LIB_NAME}_shared\n+            EXPORT ${LIB_NAME}_targets\n+            RUNTIME DESTINATION ${RUNTIME_INSTALL_DIR}\n+            LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\n+            ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}\n+            INCLUDES\n+            DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})\n+  endif()\n+\n+  if(BUILD_STATIC)\n+    add_library(${LIB_NAME}_static SHARED ${LIB_DEPS})\n+\n+    if(MSVC_TOOLCHAIN)\n+      set(LIB_NAME_STATIC ${LIB_NAME}_static)\n+    else()\n+      set(LIB_NAME_STATIC ${LIB_NAME})\n+    endif()\n+\n+    if(ARROW_BUILD_STATIC AND WIN32)\n+      target_compile_definitions(${LIB_NAME}_static PUBLIC ARROW_STATIC)\n+    endif()\n+\n+    set_target_properties(${LIB_NAME}_static\n+                          PROPERTIES LIBRARY_OUTPUT_DIRECTORY \"${OUTPUT_PATH}\"\n+                                    OUTPUT_NAME ${LIB_NAME_STATIC})\n+\n+    install(TARGETS ${LIB_NAME}_static\n+            EXPORT ${LIB_NAME}_targets\n+            RUNTIME DESTINATION ${RUNTIME_INSTALL_DIR}\n+            LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\n+            ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}\n+            INCLUDES\n+            DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})\n+    endif()\n+endfunction()\n+\n+function(ADD_TEST_CASE_AZURE REL_TEST_NAME)\n\nReview Comment:\n   Can we use `add_test_case` instead of defining this?\n\n\n\n##########\ncpp/src/arrow/CMakeLists.txt:\n##########\n@@ -68,6 +68,47 @@ function(ADD_ARROW_TEST REL_TEST_NAME)\n                 ${ARG_UNPARSED_ARGUMENTS})\n endfunction()\n \n+function(ADD_ARROW_TEST_AZURE REL_TEST_NAME)\n\nReview Comment:\n   Can we use `add_arrow_test` instead of defining this?\n\n\n\n",
                    "created": "2022-04-22T09:02:13.604+0000",
                    "updated": "2022-04-22T09:02:13.604+0000",
                    "started": "2022-04-22T09:02:13.604+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "760702",
                    "issueId": "13133712"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13133712/worklog/764775",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "shefali163 commented on code in PR #12914:\nURL: https://github.com/apache/arrow/pull/12914#discussion_r862498378\n\n\n##########\ncpp/src/arrow/filesystem/azure/azurefs.cc:\n##########\n@@ -0,0 +1,1651 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/filesystem/azure/azurefs.h\"\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <azure/core/credentials/credentials.hpp>\n+#include <azure/identity/client_secret_credential.hpp>\n+#include <azure/identity/managed_identity_credential.hpp>\n+#include <azure/storage/blobs.hpp>\n+#include <azure/storage/files/datalake.hpp>\n+#include <chrono>\n+#include <condition_variable>\n+#include <functional>\n+#include <memory>\n+#include <mutex>\n+#include <sstream>\n+#include <thread>\n+#include <unordered_map>\n+#include <utility>\n+\n+#ifdef _WIN32\n+// Undefine preprocessor macros that interfere with AWS function / method names\n+#ifdef GetMessage\n+#undef GetMessage\n+#endif\n+#ifdef GetObject\n+#undef GetObject\n+#endif\n+#endif\n+\n+#include \"arrow/util/windows_fixup.h\"\n+\n+#include \"arrow/buffer.h\"\n+#include \"arrow/filesystem/filesystem.h\"\n+#include \"arrow/filesystem/path_util.h\"\n+#include \"arrow/filesystem/util_internal.h\"\n+#include \"arrow/io/interfaces.h\"\n+#include \"arrow/io/memory.h\"\n+#include \"arrow/io/util_internal.h\"\n+#include \"arrow/result.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/util/async_generator.h\"\n+#include \"arrow/util/atomic_shared_ptr.h\"\n+#include \"arrow/util/checked_cast.h\"\n+#include \"arrow/util/future.h\"\n+#include \"arrow/util/key_value_metadata.h\"\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/util/optional.h\"\n+#include \"arrow/util/task_group.h\"\n+#include \"arrow/util/thread_pool.h\"\n+\n+namespace arrow {\n+\n+using internal::Uri;\n+\n+namespace fs {\n+\n+static const char kSep = '/';\n+\n+// -----------------------------------------------------------------------\n+// AzureOptions implementation\n+\n+AzureOptions::AzureOptions() {}\n+\n+void AzureOptions::ConfigureAnonymousCredentials(const std::string& account_name) {\n+  account_dfs_url = \"https://\" + account_name + \".dfs.core.windows.net/\";\n+  account_blob_url = \"https://\" + account_name + \".blob.core.windows.net/\";\n+  credentials_kind = AzureCredentialsKind::Anonymous;\n+}\n+\n+void AzureOptions::ConfigureAccountKeyCredentials(const std::string& account_name,\n+                                                  const std::string& account_key) {\n+  account_dfs_url = \"https://\" + account_name + \".dfs.core.windows.net/\";\n+  account_blob_url = \"https://\" + account_name + \".blob.core.windows.net/\";\n+  storage_credentials_provider =\n+      std::make_shared<Azure::Storage::StorageSharedKeyCredential>(account_name,\n+                                                                   account_key);\n+  credentials_kind = AzureCredentialsKind::StorageCredentials;\n+}\n+\n+void AzureOptions::ConfigureConnectionStringCredentials(\n+    const std::string& connection_string_uri) {\n+  auto account_name =\n+      Azure::Storage::_internal::ParseConnectionString(connection_string_uri).AccountName;\n\nReview Comment:\n   Will check for a public API and update\n\n\n\n",
                    "created": "2022-05-01T16:54:25.447+0000",
                    "updated": "2022-05-01T16:54:25.447+0000",
                    "started": "2022-05-01T16:54:25.447+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "764775",
                    "issueId": "13133712"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13133712/worklog/767855",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "shefali163 commented on code in PR #12914:\nURL: https://github.com/apache/arrow/pull/12914#discussion_r867866272\n\n\n##########\ncpp/src/arrow/filesystem/azure/azurefs.cc:\n##########\n@@ -0,0 +1,1651 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/filesystem/azure/azurefs.h\"\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <azure/core/credentials/credentials.hpp>\n+#include <azure/identity/client_secret_credential.hpp>\n+#include <azure/identity/managed_identity_credential.hpp>\n+#include <azure/storage/blobs.hpp>\n+#include <azure/storage/files/datalake.hpp>\n+#include <chrono>\n+#include <condition_variable>\n+#include <functional>\n+#include <memory>\n+#include <mutex>\n+#include <sstream>\n+#include <thread>\n+#include <unordered_map>\n+#include <utility>\n+\n+#ifdef _WIN32\n+// Undefine preprocessor macros that interfere with AWS function / method names\n+#ifdef GetMessage\n+#undef GetMessage\n+#endif\n+#ifdef GetObject\n+#undef GetObject\n+#endif\n+#endif\n+\n+#include \"arrow/util/windows_fixup.h\"\n+\n+#include \"arrow/buffer.h\"\n+#include \"arrow/filesystem/filesystem.h\"\n+#include \"arrow/filesystem/path_util.h\"\n+#include \"arrow/filesystem/util_internal.h\"\n+#include \"arrow/io/interfaces.h\"\n+#include \"arrow/io/memory.h\"\n+#include \"arrow/io/util_internal.h\"\n+#include \"arrow/result.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/util/async_generator.h\"\n+#include \"arrow/util/atomic_shared_ptr.h\"\n+#include \"arrow/util/checked_cast.h\"\n+#include \"arrow/util/future.h\"\n+#include \"arrow/util/key_value_metadata.h\"\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/util/optional.h\"\n+#include \"arrow/util/task_group.h\"\n+#include \"arrow/util/thread_pool.h\"\n+\n+namespace arrow {\n+\n+using internal::Uri;\n+\n+namespace fs {\n+\n+static const char kSep = '/';\n+\n+// -----------------------------------------------------------------------\n+// AzureOptions implementation\n+\n+AzureOptions::AzureOptions() {}\n+\n+void AzureOptions::ConfigureAnonymousCredentials(const std::string& account_name) {\n+  account_dfs_url = \"https://\" + account_name + \".dfs.core.windows.net/\";\n+  account_blob_url = \"https://\" + account_name + \".blob.core.windows.net/\";\n+  credentials_kind = AzureCredentialsKind::Anonymous;\n+}\n+\n+void AzureOptions::ConfigureAccountKeyCredentials(const std::string& account_name,\n+                                                  const std::string& account_key) {\n+  account_dfs_url = \"https://\" + account_name + \".dfs.core.windows.net/\";\n+  account_blob_url = \"https://\" + account_name + \".blob.core.windows.net/\";\n+  storage_credentials_provider =\n+      std::make_shared<Azure::Storage::StorageSharedKeyCredential>(account_name,\n+                                                                   account_key);\n+  credentials_kind = AzureCredentialsKind::StorageCredentials;\n+}\n+\n+void AzureOptions::ConfigureConnectionStringCredentials(\n+    const std::string& connection_string_uri) {\n+  auto account_name =\n+      Azure::Storage::_internal::ParseConnectionString(connection_string_uri).AccountName;\n\nReview Comment:\n   No public API is available for this, Added implementation of ParseConnectionString instead.\n\n\n\n",
                    "created": "2022-05-09T10:28:36.947+0000",
                    "updated": "2022-05-09T10:28:36.947+0000",
                    "started": "2022-05-09T10:28:36.946+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "767855",
                    "issueId": "13133712"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13133712/worklog/775407",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on code in PR #12914:\nURL: https://github.com/apache/arrow/pull/12914#discussion_r883055966\n\n\n##########\nci/appveyor-cpp-build.bat:\n##########\n@@ -108,6 +108,7 @@ cmake -G \"%GENERATOR%\" %CMAKE_ARGS% ^\n       -DARROW_PARQUET=ON ^\n       -DARROW_PYTHON=ON ^\n       -DARROW_S3=%ARROW_S3% ^\n+      -DARROW_AZURE=OFF ^\n\nReview Comment:\n   Could you keep this list in alphabetical order?\n\n\n\n##########\ncpp/src/arrow/filesystem/CMakeLists.txt:\n##########\n@@ -37,6 +37,34 @@ if(ARROW_GCS)\n                  Boost::system)\n endif()\n \n+if(ARROW_AZURE)\n+  set(AZURE_SRCS)\n+  list(APPEND\n+        AZURE_SRCS\n+        azurefs_mock.cc\n+        azurefs.cc)\n+\n+  add_arrow_lib(azurefs\n+                SOURCES\n+                ${AZURE_SRCS}\n+                SHARED_LINK_LIBS\n+                ${ARROW_LINK_LIBS}\n+                SHARED_PRIVATE_LINK_LIBS\n+                ${ARROW_SHARED_PRIVATE_LINK_LIBS}\n+                STATIC_LINK_LIBS\n+                ${ARROW_STATIC_LINK_LIBS})\n+\n+  set_target_properties(azurefs_objlib PROPERTIES CXX_STANDARD 14 CXX_STANDARD_REQUIRED ON)\n\nReview Comment:\n   Ah, sorry. I forgot that we embed filesystem modules to `libarrow.so` instead of creating separated `libarrow_XXX.so`. (We don't have separated CMake target for `libarrow.so` and filesystem modules.)\r\n   \r\n   How about changing the default C++ version?\r\n   \r\n   ```diff\r\n   diff --git a/cpp/cmake_modules/SetupCxxFlags.cmake b/cpp/cmake_modules/SetupCxxFlags.cmake\r\n   index d3a2a1a2d2..cdaafe379b 100644\r\n   -",
                    "created": "2022-05-27T06:25:26.196+0000",
                    "updated": "2022-05-27T06:25:26.196+0000",
                    "started": "2022-05-27T06:25:26.195+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "775407",
                    "issueId": "13133712"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13133712/worklog/775426",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "shefali163 commented on code in PR #12914:\nURL: https://github.com/apache/arrow/pull/12914#discussion_r883344153\n\n\n##########\ncpp/src/arrow/filesystem/CMakeLists.txt:\n##########\n@@ -37,6 +37,34 @@ if(ARROW_GCS)\n                  Boost::system)\n endif()\n \n+if(ARROW_AZURE)\n+  set(AZURE_SRCS)\n+  list(APPEND\n+        AZURE_SRCS\n+        azurefs_mock.cc\n+        azurefs.cc)\n+\n+  add_arrow_lib(azurefs\n+                SOURCES\n+                ${AZURE_SRCS}\n+                SHARED_LINK_LIBS\n+                ${ARROW_LINK_LIBS}\n+                SHARED_PRIVATE_LINK_LIBS\n+                ${ARROW_SHARED_PRIVATE_LINK_LIBS}\n+                STATIC_LINK_LIBS\n+                ${ARROW_STATIC_LINK_LIBS})\n+\n+  set_target_properties(azurefs_objlib PROPERTIES CXX_STANDARD 14 CXX_STANDARD_REQUIRED ON)\n\nReview Comment:\n   If we change the default C++ version, then it will pick C++14 for the entire compilation, and looks like from this conversation - https://issues.apache.org/jira/browse/ARROW-2034?focusedCommentId=17463318&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-17463318, it is not desired, right?\n\n\n\n",
                    "created": "2022-05-27T07:16:52.172+0000",
                    "updated": "2022-05-27T07:16:52.172+0000",
                    "started": "2022-05-27T07:16:52.172+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "775426",
                    "issueId": "13133712"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13133712/worklog/775435",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on code in PR #12914:\nURL: https://github.com/apache/arrow/pull/12914#discussion_r883410722\n\n\n##########\ncpp/src/arrow/filesystem/CMakeLists.txt:\n##########\n@@ -37,6 +37,34 @@ if(ARROW_GCS)\n                  Boost::system)\n endif()\n \n+if(ARROW_AZURE)\n+  set(AZURE_SRCS)\n+  list(APPEND\n+        AZURE_SRCS\n+        azurefs_mock.cc\n+        azurefs.cc)\n+\n+  add_arrow_lib(azurefs\n+                SOURCES\n+                ${AZURE_SRCS}\n+                SHARED_LINK_LIBS\n+                ${ARROW_LINK_LIBS}\n+                SHARED_PRIVATE_LINK_LIBS\n+                ${ARROW_SHARED_PRIVATE_LINK_LIBS}\n+                STATIC_LINK_LIBS\n+                ${ARROW_STATIC_LINK_LIBS})\n+\n+  set_target_properties(azurefs_objlib PROPERTIES CXX_STANDARD 14 CXX_STANDARD_REQUIRED ON)\n\nReview Comment:\n   I think that @pitrou said that we can use C++14 features in `cpp/src/arrow/filesystem/azurefs*.cc` but we must not use C++14 features in other `*.cc`.\n\n\n\n",
                    "created": "2022-05-27T08:51:39.558+0000",
                    "updated": "2022-05-27T08:51:39.558+0000",
                    "started": "2022-05-27T08:51:39.558+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "775435",
                    "issueId": "13133712"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13133712/worklog/775957",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #12914:\nURL: https://github.com/apache/arrow/pull/12914#discussion_r884930370\n\n\n##########\ncpp/src/arrow/filesystem/CMakeLists.txt:\n##########\n@@ -37,6 +37,34 @@ if(ARROW_GCS)\n                  Boost::system)\n endif()\n \n+if(ARROW_AZURE)\n+  set(AZURE_SRCS)\n+  list(APPEND\n+        AZURE_SRCS\n+        azurefs_mock.cc\n+        azurefs.cc)\n+\n+  add_arrow_lib(azurefs\n+                SOURCES\n+                ${AZURE_SRCS}\n+                SHARED_LINK_LIBS\n+                ${ARROW_LINK_LIBS}\n+                SHARED_PRIVATE_LINK_LIBS\n+                ${ARROW_SHARED_PRIVATE_LINK_LIBS}\n+                STATIC_LINK_LIBS\n+                ${ARROW_STATIC_LINK_LIBS})\n+\n+  set_target_properties(azurefs_objlib PROPERTIES CXX_STANDARD 14 CXX_STANDARD_REQUIRED ON)\n\nReview Comment:\n   Right. Also, `.h` files should not use any C++14 features either.\n\n\n\n",
                    "created": "2022-05-30T15:19:44.835+0000",
                    "updated": "2022-05-30T15:19:44.835+0000",
                    "started": "2022-05-30T15:19:44.834+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "775957",
                    "issueId": "13133712"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13133712/worklog/776642",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on code in PR #12914:\nURL: https://github.com/apache/arrow/pull/12914#discussion_r886303287\n\n\n##########\ncpp/src/arrow/CMakeLists.txt:\n##########\n@@ -573,6 +579,7 @@ add_arrow_lib(arrow\n               SHARED_INSTALL_INTERFACE_LIBS\n               ${ARROW_SHARED_INSTALL_INTERFACE_LIBS})\n \n+target_link_libraries(arrow_shared PUBLIC LibXml2::LibXml2)\n\nReview Comment:\n   Could you do this for `Azure::azure-storage-common` for not `arrow_shared`?\n\n\n\n",
                    "created": "2022-06-01T04:18:41.774+0000",
                    "updated": "2022-06-01T04:18:41.774+0000",
                    "started": "2022-06-01T04:18:41.773+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "776642",
                    "issueId": "13133712"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13133712/worklog/776644",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on PR #12914:\nURL: https://github.com/apache/arrow/pull/12914#issuecomment-1143100152\n\n   @github-actions autotune\n\n\n",
                    "created": "2022-06-01T04:19:03.627+0000",
                    "updated": "2022-06-01T04:19:03.627+0000",
                    "started": "2022-06-01T04:19:03.626+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "776644",
                    "issueId": "13133712"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13133712/worklog/776645",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on PR #12914:\nURL: https://github.com/apache/arrow/pull/12914#issuecomment-1143100500\n\n   @github-actions rebase\n\n\n",
                    "created": "2022-06-01T04:19:47.034+0000",
                    "updated": "2022-06-01T04:19:47.034+0000",
                    "started": "2022-06-01T04:19:47.033+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "776645",
                    "issueId": "13133712"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13133712/worklog/777707",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "shefali163 commented on PR #12914:\nURL: https://github.com/apache/arrow/pull/12914#issuecomment-1145091324\n\n   Hi @kou, Currently `ARROW_AZURE` is turned OFF for all the PR builds, and `azurefs.cc/azurefs_mock.cc` is not being included in the target, For which particular builds we should turn this ON?\n\n\n",
                    "created": "2022-06-02T16:56:05.518+0000",
                    "updated": "2022-06-02T16:56:05.518+0000",
                    "started": "2022-06-02T16:56:05.518+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "777707",
                    "issueId": "13133712"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13133712/worklog/777892",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on PR #12914:\nURL: https://github.com/apache/arrow/pull/12914#issuecomment-1145499057\n\n   Could you enable it in `.github/workflows/cpp.yml` (Linux, macOS and Windows) and `ci/docker/ubuntu-*-cpp.dockerfile`?\n\n\n",
                    "created": "2022-06-03T01:22:16.704+0000",
                    "updated": "2022-06-03T01:22:16.704+0000",
                    "started": "2022-06-03T01:22:16.703+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "777892",
                    "issueId": "13133712"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13133712/worklog/781295",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on PR #12914:\nURL: https://github.com/apache/arrow/pull/12914#issuecomment-1155380846\n\n   Rebase should fix the R build failures, though there are a couple of merge conflicts to resolve\n\n\n",
                    "created": "2022-06-14T15:45:50.996+0000",
                    "updated": "2022-06-14T15:45:50.996+0000",
                    "started": "2022-06-14T15:45:50.996+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "781295",
                    "issueId": "13133712"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13133712/worklog/781868",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on code in PR #12914:\nURL: https://github.com/apache/arrow/pull/12914#discussion_r898408480\n\n\n##########\nci/docker/ubuntu-22.04-cpp.dockerfile:\n##########\n@@ -150,7 +150,8 @@ RUN /arrow/ci/scripts/install_gcs_testbench.sh default\n # - flatbuffer is not packaged\n # - libgtest-dev only provide sources\n # - libprotobuf-dev only provide sources\n-ENV ARROW_BUILD_TESTS=ON \\\n+ENV ARROW_AZURE: ON \\\n\nReview Comment:\n   ```suggestion\r\n   ENV ARROW_AZURE=ON \\\r\n   ```\n\n\n\n##########\ncpp/src/arrow/filesystem/azurefs_mock.cc:\n##########\n@@ -0,0 +1,1152 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/filesystem/azurefs_mock.h\"\n+\n+#include <algorithm>\n+#include <iostream>\n+#include <iterator>\n+#include <map>\n+#include <mutex>\n+#include <sstream>\n+#include <string>\n+#include <utility>\n+#include <vector>\n+\n+#include \"arrow/buffer.h\"\n+#include \"arrow/buffer_builder.h\"\n+#include \"arrow/filesystem/mockfs.h\"\n+#include \"arrow/filesystem/path_util.h\"\n+#include \"arrow/filesystem/util_internal.h\"\n+#include \"arrow/io/interfaces.h\"\n+#include \"arrow/io/memory.h\"\n+#include \"arrow/util/async_generator.h\"\n+#include \"arrow/util/future.h\"\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/util/string_view.h\"\n+#include \"arrow/util/variant.h\"\n+#include \"arrow/util/windows_fixup.h\"\n+\n+namespace arrow {\n+namespace fs {\n+namespace internal {\n+\n+namespace {\n+\n+Status ValidatePath(util::string_view s) {\n+  if (internal::IsLikelyUri(s)) {\n+    return Status::Invalid(\"Expected a filesystem path, got a URI: '\", s, \"'\");\n+  }\n+  return Status::OK();\n+}\n+\n+////////////////////////////////////////////////////////////////////////////\n+// Filesystem structure\n+\n+class Entry;\n+\n+struct AzurePath {\n+  std::string full_path;\n+  std::string container;\n+  std::string path_to_file;\n+  std::vector<std::string> path_to_file_parts;\n+\n+  static Result<AzurePath> FromString(const std::string& s) {\n+    // https://synapsemladlsgen2.dfs.core.windows.net/synapsemlfs/testdir/testfile.txt\n+    // container = synapsemlfs\n+    // account_name = synapsemladlsgen2\n+    // path_to_file = testdir/testfile.txt\n+    // path_to_file_parts = [testdir, testfile.txt]\n+\n+    // Expected input here => s = /synapsemlfs/testdir/testfile.txt\n+    auto src = internal::RemoveTrailingSlash(s);\n+    if (src.starts_with(\"https:\") || src.starts_with(\"http::\")) {\n\nReview Comment:\n   How about using `internal::IsLikelyUri()`?\n\n\n\n##########\ncpp/src/arrow/filesystem/CMakeLists.txt:\n##########\n@@ -37,6 +37,10 @@ if(ARROW_GCS)\n                  Boost::system)\n endif()\n \n+if(ARROW_AZURE)\n+  add_arrow_test(azurefs_test EXTRA_LABELS filesystem EXTRA_LINK_LIBS)\n\nReview Comment:\n   ```suggestion\r\n     add_arrow_test(azurefs_test EXTRA_LABELS filesystem)\r\n   ```\n\n\n\n##########\ncpp/cmake_modules/ThirdpartyToolchain.cmake:\n##########\n@@ -4553,6 +4594,152 @@ if(ARROW_S3)\n   endif()\n endif()\n \n+macro(build_azuresdk)\n+  message(STATUS \"Building Azure C++ SDK from source\")\n+\n+  find_curl()\n+  find_package(OpenSSL ${ARROW_OPENSSL_REQUIRED_VERSION} REQUIRED)\n+\n+  set(AZURESDK_PREFIX \"${CMAKE_CURRENT_BINARY_DIR}/azuresdk_ep-install\")\n+  set(AZURESDK_INCLUDE_DIR \"${AZURESDK_PREFIX}/include\")\n+  set(AZURESDK_LIB_DIR \"lib\")\n+\n+  # provide hint for Azure SDK to link with the already located openssl\n+  get_filename_component(OPENSSL_ROOT_HINT \"${OPENSSL_INCLUDE_DIR}\" DIRECTORY)\n+\n+  set(AZURESDK_COMMON_CMAKE_ARGS\n+      ${EP_COMMON_CMAKE_ARGS}\n+      -DBUILD_SHARED_LIBS=OFF\n+      -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}\n\nReview Comment:\n   We can omit this becuase `EP_COMMON_CMAKE_ARGS` includes it.\r\n   \r\n   ```suggestion\r\n   ```\n\n\n\n##########\nci/docker/ubuntu-18.04-cpp.dockerfile:\n##########\n@@ -98,7 +98,8 @@ RUN apt-get update -y -q && \\\n # - thrift is too old\n # - utf8proc is too old(v2.1.0)\n # - s3 tests would require boost-asio that is included since Boost 1.66.0\n-ENV ARROW_BUILD_TESTS=ON \\\n+ENV ARROW_AZURE: ON \\\n\nReview Comment:\n   ```suggestion\r\n   ENV ARROW_AZURE=ON \\\r\n   ```\n\n\n\n##########\ncpp/cmake_modules/ThirdpartyToolchain.cmake:\n##########\n@@ -4553,6 +4594,152 @@ if(ARROW_S3)\n   endif()\n endif()\n \n+macro(build_azuresdk)\n+  message(STATUS \"Building Azure C++ SDK from source\")\n+\n+  find_curl()\n+  find_package(OpenSSL ${ARROW_OPENSSL_REQUIRED_VERSION} REQUIRED)\n+\n+  set(AZURESDK_PREFIX \"${CMAKE_CURRENT_BINARY_DIR}/azuresdk_ep-install\")\n+  set(AZURESDK_INCLUDE_DIR \"${AZURESDK_PREFIX}/include\")\n+  set(AZURESDK_LIB_DIR \"lib\")\n+\n+  # provide hint for Azure SDK to link with the already located openssl\n+  get_filename_component(OPENSSL_ROOT_HINT \"${OPENSSL_INCLUDE_DIR}\" DIRECTORY)\n+\n+  set(AZURESDK_COMMON_CMAKE_ARGS\n+      ${EP_COMMON_CMAKE_ARGS}\n+      -DBUILD_SHARED_LIBS=OFF\n+      -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}\n+      -DCMAKE_INSTALL_LIBDIR=${AZURESDK_LIB_DIR}\n+      -DENABLE_TESTING=OFF\n+      -DENABLE_UNITY_BUILD=ON\n+      \"-DCMAKE_INSTALL_PREFIX=${AZURESDK_PREFIX}\"\n+      \"-DCMAKE_PREFIX_PATH=${AZURESDK_PREFIX}\"\n+      -DWARNINGS_AS_ERRORS=OFF\n+      -DOPENSSL_ROOT_DIR=${OPENSSL_ROOT_HINT})\n+\n+  file(MAKE_DIRECTORY ${AZURESDK_INCLUDE_DIR})\n+\n+  set(AZURE_CORE_STATIC_LIBRARY\n+      \"${AZURESDK_PREFIX}/lib/${CMAKE_STATIC_LIBRARY_PREFIX}azure-core${CMAKE_STATIC_LIBRARY_SUFFIX}\"\n+  )\n+  externalproject_add(azure_core_ep\n+                      ${EP_LOG_OPTIONS}\n+                      INSTALL_DIR ${AZURESDK_PREFIX}\n+                      URL ${AZURE_CORE_SOURCE_URL}\n+                      URL_HASH \"SHA256=${ARROW_AZURE_CORE_BUILD_SHA256_CHECKSUM}\"\n+                      CMAKE_ARGS ${AZURESDK_COMMON_CMAKE_ARGS}\n+                      BUILD_BYPRODUCTS ${AZURE_CORE_STATIC_LIBRARY})\n+  add_library(Azure::azure-core STATIC IMPORTED)\n+  set_target_properties(Azure::azure-core\n+                        PROPERTIES IMPORTED_LOCATION \"${AZURE_CORE_STATIC_LIBRARY}\"\n+                                   INTERFACE_INCLUDE_DIRECTORIES\n+                                   \"${AZURESDK_INCLUDE_DIR}\")\n+  target_link_libraries(Azure::azure-core INTERFACE LibXml2::LibXml2)\n+  add_dependencies(Azure::azure-core azure_core_ep)\n+\n+  set(AZURE_IDENTITY_STATIC_LIBRARY\n+      \"${AZURESDK_PREFIX}/lib/${CMAKE_STATIC_LIBRARY_PREFIX}azure-identity${CMAKE_STATIC_LIBRARY_SUFFIX}\"\n+  )\n+  externalproject_add(azure_identity_ep\n+                      ${EP_LOG_OPTIONS}\n+                      INSTALL_DIR ${AZURESDK_PREFIX}\n+                      URL ${AZURE_IDENTITY_SOURCE_URL}\n+                      URL_HASH \"SHA256=${ARROW_AZURE_IDENTITY_BUILD_SHA256_CHECKSUM}\"\n+                      CMAKE_ARGS ${AZURESDK_COMMON_CMAKE_ARGS}\n+                      BUILD_BYPRODUCTS ${AZURE_IDENTITY_STATIC_LIBRARY})\n+  add_library(Azure::azure-identity STATIC IMPORTED)\n+  set_target_properties(Azure::azure-identity\n+                        PROPERTIES IMPORTED_LOCATION \"${AZURE_IDENTITY_STATIC_LIBRARY}\"\n+                                   INTERFACE_INCLUDE_DIRECTORIES\n+                                   \"${AZURESDK_INCLUDE_DIR}\")\n+  target_link_libraries(Azure::azure-identity INTERFACE LibXml2::LibXml2)\n+  add_dependencies(Azure::azure-identity azure_identity_ep)\n+\n+  set(AZURE_STORAGE_BLOBS_STATIC_LIBRARY\n+      \"${AZURESDK_PREFIX}/lib/${CMAKE_STATIC_LIBRARY_PREFIX}azure-storage-blobs${CMAKE_STATIC_LIBRARY_SUFFIX}\"\n+  )\n+  externalproject_add(azure_storage_blobs_ep\n+                      ${EP_LOG_OPTIONS}\n+                      INSTALL_DIR ${AZURESDK_PREFIX}\n+                      URL ${AZURE_STORAGE_BLOB_SOURCE_URL}\n+                      URL_HASH \"SHA256=${ARROW_AZURE_STORAGE_BLOB_BUILD_SHA256_CHECKSUM}\"\n+                      CMAKE_ARGS ${AZURESDK_COMMON_CMAKE_ARGS}\n+                      BUILD_BYPRODUCTS ${AZURE_STORAGE_BLOBS_STATIC_LIBRARY})\n+  add_library(Azure::azure-storage-blobs STATIC IMPORTED)\n+  set_target_properties(Azure::azure-storage-blobs\n+                        PROPERTIES IMPORTED_LOCATION\n+                                   \"${AZURE_STORAGE_BLOBS_STATIC_LIBRARY}\"\n+                                   INTERFACE_INCLUDE_DIRECTORIES\n+                                   \"${AZURESDK_INCLUDE_DIR}\")\n+  target_link_libraries(Azure::azure-storage-blobs INTERFACE LibXml2::LibXml2)\n+  add_dependencies(Azure::azure-storage-blobs azure_storage_blobs_ep)\n+\n+  set(AZURE_STORAGE_COMMON_STATIC_LIBRARY\n+      \"${AZURESDK_PREFIX}/lib/${CMAKE_STATIC_LIBRARY_PREFIX}azure-storage-common${CMAKE_STATIC_LIBRARY_SUFFIX}\"\n+  )\n+  externalproject_add(azure_storage_common_ep\n+                      ${EP_LOG_OPTIONS}\n+                      INSTALL_DIR ${AZURESDK_PREFIX}\n+                      URL ${AZURE_STORAGE_COMMON_SOURCE_URL}\n+                      URL_HASH \"SHA256=${ARROW_AZURE_STORAGE_COMMON_BUILD_SHA256_CHECKSUM}\"\n+                      CMAKE_ARGS ${AZURESDK_COMMON_CMAKE_ARGS}\n+                      BUILD_BYPRODUCTS ${AZURE_STORAGE_COMMON_STATIC_LIBRARY})\n+  add_library(Azure::azure-storage-common STATIC IMPORTED)\n+  set_target_properties(Azure::azure-storage-common\n+                        PROPERTIES IMPORTED_LOCATION\n+                                   \"${AZURE_STORAGE_COMMON_STATIC_LIBRARY}\"\n+                                   INTERFACE_INCLUDE_DIRECTORIES\n+                                   \"${AZURESDK_INCLUDE_DIR}\")\n+  target_link_libraries(Azure::azure-storage-common INTERFACE LibXml2::LibXml2)\n+  add_dependencies(Azure::azure-storage-common azure_storage_common_ep)\n+\n+  set(AZURE_STORAGE_FILES_DATALAKE_STATIC_LIBRARY\n+      \"${AZURESDK_PREFIX}/lib/${CMAKE_STATIC_LIBRARY_PREFIX}azure-storage-files-datalake${CMAKE_STATIC_LIBRARY_SUFFIX}\"\n+  )\n+  externalproject_add(azure_storage_files_datalake_ep\n+                      ${EP_LOG_OPTIONS}\n+                      INSTALL_DIR ${AZURESDK_PREFIX}\n+                      URL ${AZURE_STORAGE_FILES_DATALAKE_SOURCE_URL}\n+                      URL_HASH \"SHA256=${ARROW_AZURE_STORAGE_FILES_DATALAKE_BUILD_SHA256_CHECKSUM}\"\n+                      CMAKE_ARGS ${AZURESDK_COMMON_CMAKE_ARGS}\n+                      BUILD_BYPRODUCTS ${AZURE_STORAGE_FILES_DATALAKE_STATIC_LIBRARY})\n+  add_library(Azure::azure-storage-files-datalake STATIC IMPORTED)\n+  set_target_properties(Azure::azure-storage-files-datalake\n+                        PROPERTIES IMPORTED_LOCATION\n+                                   \"${AZURE_STORAGE_FILES_DATALAKE_STATIC_LIBRARY}\"\n+                                   INTERFACE_INCLUDE_DIRECTORIES\n+                                   \"${AZURESDK_INCLUDE_DIR}\")\n+  target_link_libraries(Azure::azure-storage-files-datalake INTERFACE LibXml2::LibXml2)\n+  add_dependencies(Azure::azure-storage-files-datalake azure_storage_files_datalake_ep)\n+\n+  set(AZURESDK_LIBRARIES)\n+  list(APPEND\n+       AZURESDK_LIBRARIES\n+       Azure::azure-core\n+       Azure::azure-storage-blobs\n+       Azure::azure-identity\n+       Azure::azure-storage-common\n+       Azure::azure-storage-files-datalake)\n+  list(APPEND\n+       ARROW_BUNDLED_STATIC_LIBS\n+       Azure::azure-core\n+       Azure::azure-storage-blobs\n+       Azure::azure-identity\n+       Azure::azure-storage-common\n+       Azure::azure-storage-files-datalake)\n+\n+  set(AZURESDK_LINK_LIBRARIES ${AZURESDK_LIBRARIES})\n+endmacro()\n+\n+if(ARROW_AZURE)\n+  find_package(LibXml2 REQUIRED)\n\nReview Comment:\n   Could you move this to `build_azuresdk()` like we did for curl and OpenSSL?\n\n\n\n##########\ncpp/cmake_modules/ThirdpartyToolchain.cmake:\n##########\n@@ -4553,6 +4594,152 @@ if(ARROW_S3)\n   endif()\n endif()\n \n+macro(build_azuresdk)\n+  message(STATUS \"Building Azure C++ SDK from source\")\n+\n+  find_curl()\n+  find_package(OpenSSL ${ARROW_OPENSSL_REQUIRED_VERSION} REQUIRED)\n+\n+  set(AZURESDK_PREFIX \"${CMAKE_CURRENT_BINARY_DIR}/azuresdk_ep-install\")\n+  set(AZURESDK_INCLUDE_DIR \"${AZURESDK_PREFIX}/include\")\n+  set(AZURESDK_LIB_DIR \"lib\")\n+\n+  # provide hint for Azure SDK to link with the already located openssl\n+  get_filename_component(OPENSSL_ROOT_HINT \"${OPENSSL_INCLUDE_DIR}\" DIRECTORY)\n+\n+  set(AZURESDK_COMMON_CMAKE_ARGS\n+      ${EP_COMMON_CMAKE_ARGS}\n+      -DBUILD_SHARED_LIBS=OFF\n+      -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}\n+      -DCMAKE_INSTALL_LIBDIR=${AZURESDK_LIB_DIR}\n+      -DENABLE_TESTING=OFF\n+      -DENABLE_UNITY_BUILD=ON\n+      \"-DCMAKE_INSTALL_PREFIX=${AZURESDK_PREFIX}\"\n+      \"-DCMAKE_PREFIX_PATH=${AZURESDK_PREFIX}\"\n+      -DWARNINGS_AS_ERRORS=OFF\n+      -DOPENSSL_ROOT_DIR=${OPENSSL_ROOT_HINT})\n\nReview Comment:\n   Could you sort this list in alphabetical order?\n\n\n\n##########\nci/docker/ubuntu-20.04-cpp.dockerfile:\n##########\n@@ -122,7 +122,8 @@ RUN /arrow/ci/scripts/install_ceph.sh\n # - flatbuffer is not packaged\n # - libgtest-dev only provide sources\n # - libprotobuf-dev only provide sources\n-ENV ARROW_BUILD_TESTS=ON \\\n+ENV ARROW_AZURE: ON \\\n\nReview Comment:\n   ```suggestion\r\n   ENV ARROW_AZURE=ON \\\r\n   ```\n\n\n\n##########\ncpp/src/arrow/filesystem/azurefs_mock.cc:\n##########\n@@ -0,0 +1,1152 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/filesystem/azurefs_mock.h\"\n+\n+#include <algorithm>\n+#include <iostream>\n+#include <iterator>\n+#include <map>\n+#include <mutex>\n+#include <sstream>\n+#include <string>\n+#include <utility>\n+#include <vector>\n+\n+#include \"arrow/buffer.h\"\n+#include \"arrow/buffer_builder.h\"\n+#include \"arrow/filesystem/mockfs.h\"\n+#include \"arrow/filesystem/path_util.h\"\n+#include \"arrow/filesystem/util_internal.h\"\n+#include \"arrow/io/interfaces.h\"\n+#include \"arrow/io/memory.h\"\n+#include \"arrow/util/async_generator.h\"\n+#include \"arrow/util/future.h\"\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/util/string_view.h\"\n+#include \"arrow/util/variant.h\"\n+#include \"arrow/util/windows_fixup.h\"\n+\n+namespace arrow {\n+namespace fs {\n+namespace internal {\n+\n+namespace {\n+\n+Status ValidatePath(util::string_view s) {\n+  if (internal::IsLikelyUri(s)) {\n+    return Status::Invalid(\"Expected a filesystem path, got a URI: '\", s, \"'\");\n+  }\n+  return Status::OK();\n+}\n+\n+////////////////////////////////////////////////////////////////////////////\n+// Filesystem structure\n+\n+class Entry;\n+\n+struct AzurePath {\n+  std::string full_path;\n+  std::string container;\n+  std::string path_to_file;\n+  std::vector<std::string> path_to_file_parts;\n+\n+  static Result<AzurePath> FromString(const std::string& s) {\n+    // https://synapsemladlsgen2.dfs.core.windows.net/synapsemlfs/testdir/testfile.txt\n+    // container = synapsemlfs\n+    // account_name = synapsemladlsgen2\n+    // path_to_file = testdir/testfile.txt\n+    // path_to_file_parts = [testdir, testfile.txt]\n+\n+    // Expected input here => s = /synapsemlfs/testdir/testfile.txt\n\nReview Comment:\n   Really? It seems that the leading `/` isn't allowed.\n\n\n\n##########\ncpp/src/arrow/filesystem/azurefs_mock.cc:\n##########\n@@ -0,0 +1,1152 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/filesystem/azurefs_mock.h\"\n+\n+#include <algorithm>\n+#include <iostream>\n+#include <iterator>\n+#include <map>\n+#include <mutex>\n+#include <sstream>\n+#include <string>\n+#include <utility>\n+#include <vector>\n+\n+#include \"arrow/buffer.h\"\n+#include \"arrow/buffer_builder.h\"\n+#include \"arrow/filesystem/mockfs.h\"\n+#include \"arrow/filesystem/path_util.h\"\n+#include \"arrow/filesystem/util_internal.h\"\n+#include \"arrow/io/interfaces.h\"\n+#include \"arrow/io/memory.h\"\n+#include \"arrow/util/async_generator.h\"\n+#include \"arrow/util/future.h\"\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/util/string_view.h\"\n+#include \"arrow/util/variant.h\"\n+#include \"arrow/util/windows_fixup.h\"\n+\n+namespace arrow {\n+namespace fs {\n+namespace internal {\n+\n+namespace {\n+\n+Status ValidatePath(util::string_view s) {\n+  if (internal::IsLikelyUri(s)) {\n+    return Status::Invalid(\"Expected a filesystem path, got a URI: '\", s, \"'\");\n+  }\n+  return Status::OK();\n+}\n+\n+////////////////////////////////////////////////////////////////////////////\n+// Filesystem structure\n+\n+class Entry;\n+\n+struct AzurePath {\n+  std::string full_path;\n+  std::string container;\n+  std::string path_to_file;\n+  std::vector<std::string> path_to_file_parts;\n+\n+  static Result<AzurePath> FromString(const std::string& s) {\n+    // https://synapsemladlsgen2.dfs.core.windows.net/synapsemlfs/testdir/testfile.txt\n+    // container = synapsemlfs\n+    // account_name = synapsemladlsgen2\n+    // path_to_file = testdir/testfile.txt\n+    // path_to_file_parts = [testdir, testfile.txt]\n+\n+    // Expected input here => s = /synapsemlfs/testdir/testfile.txt\n+    auto src = internal::RemoveTrailingSlash(s);\n+    if (src.starts_with(\"https:\") || src.starts_with(\"http::\")) {\n+      RemoveSchemeFromUri(src);\n+    }\n+    auto first_sep = src.find_first_of(kSep);\n+    if (first_sep == 0) {\n+      return Status::Invalid(\"Path cannot start with a separator ('\", s, \"')\");\n+    }\n+    if (first_sep == std::string::npos) {\n+      return AzurePath{std::string(src), std::string(src), \"\", {}};\n+    }\n+    AzurePath path;\n+    path.full_path = std::string(src);\n+    path.container = std::string(src.substr(0, first_sep));\n+    path.path_to_file = std::string(src.substr(first_sep + 1));\n+    path.path_to_file_parts = internal::SplitAbstractPath(path.path_to_file);\n+    RETURN_NOT_OK(Validate(&path));\n+    return path;\n+  }\n+\n+  static void RemoveSchemeFromUri(nonstd::sv_lite::string_view& s) {\n\nReview Comment:\n   It seems that this removes not only scheme (`http://` or `https://`) but also host and port and the leading `/` in path.\r\n   \r\n   Can we use more suitable name for this?\r\n   \r\n   Could you use `util::string_view` instead of `nonstd::sv_lite::string_view`? \n\n\n\n##########\ncpp/src/arrow/filesystem/azurefs_mock.cc:\n##########\n@@ -0,0 +1,1152 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/filesystem/azurefs_mock.h\"\n+\n+#include <algorithm>\n+#include <iostream>\n+#include <iterator>\n+#include <map>\n+#include <mutex>\n+#include <sstream>\n+#include <string>\n+#include <utility>\n+#include <vector>\n+\n+#include \"arrow/buffer.h\"\n+#include \"arrow/buffer_builder.h\"\n+#include \"arrow/filesystem/mockfs.h\"\n+#include \"arrow/filesystem/path_util.h\"\n+#include \"arrow/filesystem/util_internal.h\"\n+#include \"arrow/io/interfaces.h\"\n+#include \"arrow/io/memory.h\"\n+#include \"arrow/util/async_generator.h\"\n+#include \"arrow/util/future.h\"\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/util/string_view.h\"\n+#include \"arrow/util/variant.h\"\n+#include \"arrow/util/windows_fixup.h\"\n+\n+namespace arrow {\n+namespace fs {\n+namespace internal {\n+\n+namespace {\n+\n+Status ValidatePath(util::string_view s) {\n+  if (internal::IsLikelyUri(s)) {\n+    return Status::Invalid(\"Expected a filesystem path, got a URI: '\", s, \"'\");\n+  }\n+  return Status::OK();\n+}\n+\n+////////////////////////////////////////////////////////////////////////////\n+// Filesystem structure\n+\n+class Entry;\n+\n+struct AzurePath {\n+  std::string full_path;\n+  std::string container;\n+  std::string path_to_file;\n+  std::vector<std::string> path_to_file_parts;\n+\n+  static Result<AzurePath> FromString(const std::string& s) {\n+    // https://synapsemladlsgen2.dfs.core.windows.net/synapsemlfs/testdir/testfile.txt\n+    // container = synapsemlfs\n+    // account_name = synapsemladlsgen2\n+    // path_to_file = testdir/testfile.txt\n+    // path_to_file_parts = [testdir, testfile.txt]\n+\n+    // Expected input here => s = /synapsemlfs/testdir/testfile.txt\n+    auto src = internal::RemoveTrailingSlash(s);\n+    if (src.starts_with(\"https:\") || src.starts_with(\"http::\")) {\n+      RemoveSchemeFromUri(src);\n+    }\n+    auto first_sep = src.find_first_of(kSep);\n+    if (first_sep == 0) {\n+      return Status::Invalid(\"Path cannot start with a separator ('\", s, \"')\");\n+    }\n+    if (first_sep == std::string::npos) {\n+      return AzurePath{std::string(src), std::string(src), \"\", {}};\n+    }\n+    AzurePath path;\n+    path.full_path = std::string(src);\n+    path.container = std::string(src.substr(0, first_sep));\n+    path.path_to_file = std::string(src.substr(first_sep + 1));\n+    path.path_to_file_parts = internal::SplitAbstractPath(path.path_to_file);\n+    RETURN_NOT_OK(Validate(&path));\n+    return path;\n+  }\n+\n+  static void RemoveSchemeFromUri(nonstd::sv_lite::string_view& s) {\n+    auto first = s.find(\".core.windows.net\");\n+    s = s.substr(first + 18, s.length());\n\nReview Comment:\n   How about using `internal::Uri` to extract the path part?\n\n\n\n",
                    "created": "2022-06-15T23:48:51.989+0000",
                    "updated": "2022-06-15T23:48:51.989+0000",
                    "started": "2022-06-15T23:48:51.989+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "781868",
                    "issueId": "13133712"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13133712/worklog/781921",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "shefali163 commented on PR #12914:\nURL: https://github.com/apache/arrow/pull/12914#issuecomment-1157261976\n\n   We were going to add Azurite for testing `AzureFileSystem` but while using this we faced some issues(similar to https://github.com/Azure/Azurite/issues/1101), We are currently working on resolving this, `MockAzureFileSystem` is a temporary way of testing `AzureFileSystem` as it copies the logic of the APIs which provides some level of testing, but we are planning to add Azurite in the upcoming PRs, Let me know if you think `MockAzureFileSystem` won't work for this PR. @kou \n\n\n",
                    "created": "2022-06-16T05:54:28.075+0000",
                    "updated": "2022-06-16T05:54:28.075+0000",
                    "started": "2022-06-16T05:54:28.074+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "781921",
                    "issueId": "13133712"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13133712/worklog/781932",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on PR #12914:\nURL: https://github.com/apache/arrow/pull/12914#issuecomment-1157282973\n\n   Does Azurite have issues for all operations or only some operations? If it's the latter, how about enabling only tests that use stable operations?\r\n   \r\n   I don't think that duplicating codes for testing with `AzureFileSystem` and `MockAzureFileSystem` is a good idea even if it's just a temporary solution... For example, copy problems may not be found by review...\n\n\n",
                    "created": "2022-06-16T06:27:51.840+0000",
                    "updated": "2022-06-16T06:27:51.840+0000",
                    "started": "2022-06-16T06:27:51.840+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "781932",
                    "issueId": "13133712"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13133712/worklog/781951",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "shefali163 commented on PR #12914:\nURL: https://github.com/apache/arrow/pull/12914#issuecomment-1157335114\n\n   Azurite has issues with the SDK clients and some endpoints like `GetProperties` etc. which are used in the majority of operations, If `MockAzureFileSystem` cannot be used then I will check if there are any stable tests and will work on resolving the issues with Azurite.\n\n\n",
                    "created": "2022-06-16T07:35:49.074+0000",
                    "updated": "2022-06-16T07:35:49.074+0000",
                    "started": "2022-06-16T07:35:49.074+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "781951",
                    "issueId": "13133712"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13133712/worklog/781979",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #12914:\nURL: https://github.com/apache/arrow/pull/12914#discussion_r898888490\n\n\n##########\ncpp/cmake_modules/SetupCxxFlags.cmake:\n##########\n@@ -118,12 +118,16 @@ if(NOT DEFINED CMAKE_C_STANDARD)\n   set(CMAKE_C_STANDARD 11)\n endif()\n \n-# This ensures that things like c++11 get passed correctly\n+# This ensures that things like c++11/c++14 get passed correctly\n if(NOT DEFINED CMAKE_CXX_STANDARD)\n-  set(CMAKE_CXX_STANDARD 11)\n+  if(ARROW_AZURE)\n+    set(CMAKE_CXX_STANDARD 14)\n\nReview Comment:\n   Hmm... I don't think we should do that over the entire codebase, only `azurefs.cc`?\n\n\n\n",
                    "created": "2022-06-16T09:29:24.486+0000",
                    "updated": "2022-06-16T09:29:24.486+0000",
                    "started": "2022-06-16T09:29:24.486+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "781979",
                    "issueId": "13133712"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 39600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@17c7670[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@dbd6ad6[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6eabfa8a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@8a6c653[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4bae4b73[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@7186f228[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@40c82938[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@7ee2eb2c[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@472ed250[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@17f6f2f[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@ff17d1[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@69ad3769[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 39600,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Oct 05 16:46:00 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": null,
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2034/watchers",
            "watchCount": 15,
            "isWatching": false
        },
        "created": "2018-01-25T14:55:42.000+0000",
        "updated": "2022-10-13T16:10:20.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "11h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 39600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/attachment/13050104",
                "id": "13050104",
                "filename": "azfs.cc",
                "author": {
                    "self": "https://issues.apache.org/jira/rest/api/2/user?username=mathewb001",
                    "name": "mathewb001",
                    "key": "mathewb001",
                    "avatarUrls": {
                        "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=mathewb001&avatarId=33839",
                        "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=mathewb001&avatarId=33839",
                        "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=mathewb001&avatarId=33839",
                        "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=mathewb001&avatarId=33839"
                    },
                    "displayName": "Bipin Mathew",
                    "active": true,
                    "timeZone": "America/New_York"
                },
                "created": "2022-10-05T14:53:15.370+0000",
                "size": 9485,
                "mimeType": "text/x-c++src",
                "content": "https://issues.apache.org/jira/secure/attachment/13050104/azfs.cc"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/attachment/13050103",
                "id": "13050103",
                "filename": "azfs.h",
                "author": {
                    "self": "https://issues.apache.org/jira/rest/api/2/user?username=mathewb001",
                    "name": "mathewb001",
                    "key": "mathewb001",
                    "avatarUrls": {
                        "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=mathewb001&avatarId=33839",
                        "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=mathewb001&avatarId=33839",
                        "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=mathewb001&avatarId=33839",
                        "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=mathewb001&avatarId=33839"
                    },
                    "displayName": "Bipin Mathew",
                    "active": true,
                    "timeZone": "America/New_York"
                },
                "created": "2022-10-05T14:52:53.811+0000",
                "size": 7457,
                "mimeType": "text/x-chdr",
                "content": "https://issues.apache.org/jira/secure/attachment/13050103/azfs.h"
            }
        ],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Filesystem implementation for Azure Blob Storage",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13133712/comment/17100361",
                    "id": "17100361",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "I see that TileDB (MIT license) has built a C++ wrapper for Azure\r\n\r\nhttps://github.com/TileDB-Inc/TileDB/blob/dev/tiledb/sm/filesystem/azure.cc\r\n\r\nNo this is not moved to fsspec, this is a C++ ticket",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2020-05-06T00:39:04.628+0000",
                    "updated": "2020-05-06T00:39:04.628+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13133712/comment/17273854",
                    "id": "17273854",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "I'm not sure I understand the relationship between Blob Store and Data Lake. Is Data Lake a higher-level layer above Blob Store? Or are they two different services that would need separate filesystem implementations?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2021-01-28T16:57:25.345+0000",
                    "updated": "2021-01-28T16:57:25.345+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13133712/comment/17273855",
                    "id": "17273855",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "According to [https://docs.microsoft.com/en-us/azure/storage/blobs/data-lake-storage-introduction] ,\r\n{quote}Data Lake Storage Gen2 converges the capabilities of [Azure Data Lake Storage Gen1|https://docs.microsoft.com/en-us/azure/data-lake-store/] with Azure Blob storage. For example, Data Lake Storage Gen2 provides file system semantics, file-level security, and scale. Because these capabilities are built on Blob storage, you'll also get low-cost, tiered storage, with high availability/disaster recovery capabilities.\r\n{quote}\r\nI'm not sure this means the same C++ API can be used to access both, though.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2021-01-28T16:59:04.631+0000",
                    "updated": "2021-01-28T16:59:04.631+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13133712/comment/17273858",
                    "id": "17273858",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "body": "It is as confusing in reality, here is what they all are (I'm though already 1 year outdated on this):\r\n\r\n* Blob Store: Like S3, simple but limited API\r\n* Data Lake Gen 1: HDFS-like deployment with different but more user-friendly API / attributes\r\n* Data Lake Gen 2: Some improvements were made to the Blob Store so that there is no need for a special (more expensive) Data Lake service anymore, everything is now on the Blob Store. A new set of APIs was though released that exposes some nice features that the initial Blob Store API didn't have, probably for marketing purposes this was named Data Lake Gen 2 although technically Blob Store Gen 2 would have been more appropriate.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "created": "2021-01-28T17:03:36.068+0000",
                    "updated": "2021-01-28T17:03:36.068+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13133712/comment/17273861",
                    "id": "17273861",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Ha, and here are some interesting resources:\r\n * [https://docs.microsoft.com/en-us/azure/storage/blobs/data-lake-storage-known-issues]\u00a0: \"Blob APIs and Data Lake Storage Gen2 APIs can operate on the same data.\" _but_  \"You cannot use blob API and Data Lake Storage APIs to write to the same instance of a file\" (sounds ok?)\r\n * [https://docs.microsoft.com/en-us/rest/api/storageservices/understanding-block-blobs--append-blobs--and-page-blobs] : three different kinds of blobs. \"Block blobs\" sound most useful, though \"append blobs\" may work too.\r\n * [https://docs.microsoft.com/en-us/azure/storage/blobs/data-lake-storage-namespace] : a Data Lake admin can configure a it with a hierarchical filesystem semantics.\u00a0 Apparently it may enable different APIs (??).\r\n\r\n\u00a0\r\n\r\n\u00a0",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2021-01-28T17:10:00.236+0000",
                    "updated": "2021-01-28T17:10:00.236+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13133712/comment/17273878",
                    "id": "17273878",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=madras",
                        "name": "madras",
                        "key": "madras",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Yesh",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "There is also https://github.com/Azure/azure-sdk-for-cpp which I\u2019ve tested against adl gen2 .",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=madras",
                        "name": "madras",
                        "key": "madras",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Yesh",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2021-01-28T17:19:21.000+0000",
                    "updated": "2021-01-28T17:19:21.000+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13133712/comment/17273897",
                    "id": "17273897",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Various pointers about the Azure C++ SDK:\r\n\r\n[https://devblogs.microsoft.com/azure-sdk/cppintro/#example-code-using-the-c-storage-blob-client-libraryhttps://devblogs.microsoft.com/azure-sdk/cppintro/|https://devblogs.microsoft.com/azure-sdk/cppintro/]\r\n\r\n[https://github.com/Azure/azure-sdk-for-cpp]\r\n\r\n[https://github.com/Azure/azure-sdk-for-cpp/blob/master/sdk/storage/azure-storage-blobs/sample/blob_getting_started.cpp]\r\n\r\n[https://azure.github.io/azure-sdk-for-cpp/] (note the API docs are segregated per component, with separate land pages for Core, Storage, Blog Storage, etc.)\r\n\r\nNote that the SDK *requires C++14*.\r\n\r\n\u00a0",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2021-01-28T17:48:21.416+0000",
                    "updated": "2021-01-28T17:48:21.416+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13133712/comment/17452547",
                    "id": "17452547",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=TomAugspurger",
                        "name": "TomAugspurger",
                        "key": "tomaugspurger",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=tomaugspurger&avatarId=31899",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=tomaugspurger&avatarId=31899",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=tomaugspurger&avatarId=31899",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=tomaugspurger&avatarId=31899"
                        },
                        "displayName": "Tom Augspurger",
                        "active": true,
                        "timeZone": "America/Chicago"
                    },
                    "body": "Does Arrow support C\\+\\+14 features now (or more specifically, is the SDK being C\\+\\+14 a problem?) From https://issues.apache.org/jira/browse/ARROW-13744 it seems like C\\+\\+14 is at least tested, but https://github.com/apache/arrow/blame/master/docs/source/developers/cpp/building.rst#L40 says a \"A C\\+\\+11-enabled compiler. \" is required.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=TomAugspurger",
                        "name": "TomAugspurger",
                        "key": "tomaugspurger",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=tomaugspurger&avatarId=31899",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=tomaugspurger&avatarId=31899",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=tomaugspurger&avatarId=31899",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=tomaugspurger&avatarId=31899"
                        },
                        "displayName": "Tom Augspurger",
                        "active": true,
                        "timeZone": "America/Chicago"
                    },
                    "created": "2021-12-02T18:28:57.114+0000",
                    "updated": "2021-12-02T20:02:52.959+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13133712/comment/17452556",
                    "id": "17452556",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "I'm not an expert here, but I think we could use C++14 if required and if the compiler supports it. If the compiler doesn't support C++14, we wouldn't be able to build the azure sdk. So the line would be that Arrow requires C++11 at a minimum, and some features are only available with C++14.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2021-12-02T18:44:38.937+0000",
                    "updated": "2021-12-02T18:44:38.937+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13133712/comment/17452557",
                    "id": "17452557",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "We require only C++11 in the codebase. We might add C++14-requiring optional components if desired, but that will add complication to the build setup.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2021-12-02T18:48:29.030+0000",
                    "updated": "2021-12-02T18:48:29.030+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13133712/comment/17463316",
                    "id": "17463316",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=balakuntala",
                        "name": "balakuntala",
                        "key": "balashashanka",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34055",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34055",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34055",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34055"
                        },
                        "displayName": "Shashanka Balakuntala Srinivasa",
                        "active": true,
                        "timeZone": "Asia/Kolkata"
                    },
                    "body": "hi [~apitrou] , we were looking into implementing this feature from our side. I did try to compile the whole arrow code base with c++14 and ran unit tests as well. Everything is passing in local and as mentioned before : [ARROW-13744] [CI] c++14 and 17 nightly job fails - ASF JIRA (apache.org) ticket mentions we have daily build run for validation which are passing.\u00a0\r\n\r\nSince the azure sdks depend on c++14 features, and since we have the code compiled in c++14, can we look into upgrading the c++ version to 14?\u00a0\r\nLet me know if there are any issues. I will be happy to take those and work on them.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=balakuntala",
                        "name": "balakuntala",
                        "key": "balashashanka",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34055",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34055",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34055",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34055"
                        },
                        "displayName": "Shashanka Balakuntala Srinivasa",
                        "active": true,
                        "timeZone": "Asia/Kolkata"
                    },
                    "created": "2021-12-21T15:29:30.434+0000",
                    "updated": "2021-12-21T15:29:30.434+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13133712/comment/17463318",
                    "id": "17463318",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "[~balakuntala] We can probably require C+\\+14 for the Azure filesystem implementation only, but the rest of Arrow should remain C+\\+11-compatible.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2021-12-21T15:31:27.855+0000",
                    "updated": "2021-12-21T15:31:27.855+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13133712/comment/17600865",
                    "id": "17600865",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=deanm0000",
                        "name": "deanm0000",
                        "key": "JIRAUSER290680",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Dean MacGregor",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "If someone wants to work on this but doesn't have an Azure account let me know.\u00a0 I can make a storage account for this development/testing",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=deanm0000",
                        "name": "deanm0000",
                        "key": "JIRAUSER290680",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Dean MacGregor",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2022-09-06T16:12:27.434+0000",
                    "updated": "2022-09-06T16:12:48.308+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13133712/comment/17613032",
                    "id": "17613032",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=mathewb001",
                        "name": "mathewb001",
                        "key": "mathewb001",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=mathewb001&avatarId=33839",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=mathewb001&avatarId=33839",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=mathewb001&avatarId=33839",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=mathewb001&avatarId=33839"
                        },
                        "displayName": "Bipin Mathew",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "I have a rudimentary implementation of this that supports import and export to Azure. I tried to align as closely as possible to the s3 implementation, however as I needed it only for a specific use case and have not had a chance to implement all the same methods. Depending on bandwidth, I could probably build out the implementation further. I have never contributed to this project. Do all endpoints need to be implemented before it can be merged into the code base? Can it be built out over time? I attach what I have so far here.\r\n\r\n\r\n[^azfs.h][^azfs.cc]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=mathewb001",
                        "name": "mathewb001",
                        "key": "mathewb001",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=mathewb001&avatarId=33839",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=mathewb001&avatarId=33839",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=mathewb001&avatarId=33839",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=mathewb001&avatarId=33839"
                        },
                        "displayName": "Bipin Mathew",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2022-10-05T14:57:27.724+0000",
                    "updated": "2022-10-05T14:57:27.724+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13133712/comment/17613061",
                    "id": "17613061",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "[~mathewb001] Well, there's a Github PR open already, did you take a look?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2022-10-05T16:27:51.286+0000",
                    "updated": "2022-10-05T16:27:51.286+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13133712/comment/17613070",
                    "id": "17613070",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=mathewb001",
                        "name": "mathewb001",
                        "key": "mathewb001",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=mathewb001&avatarId=33839",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=mathewb001&avatarId=33839",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=mathewb001&avatarId=33839",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=mathewb001&avatarId=33839"
                        },
                        "displayName": "Bipin Mathew",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Oh this is much further along than what I have offered. Looking forward to\nits release so I can cut over to it.\n\n\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=mathewb001",
                        "name": "mathewb001",
                        "key": "mathewb001",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=mathewb001&avatarId=33839",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=mathewb001&avatarId=33839",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=mathewb001&avatarId=33839",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=mathewb001&avatarId=33839"
                        },
                        "displayName": "Bipin Mathew",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2022-10-05T16:46:00.026+0000",
                    "updated": "2022-10-05T16:46:00.026+0000"
                }
            ],
            "maxResults": 16,
            "total": 16,
            "startAt": 0
        },
        "customfield_12311820": "0|i3pd0n:",
        "customfield_12314139": null
    }
}