{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13474574",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474574",
    "key": "ARROW-17275",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351947",
                "id": "12351947",
                "description": "",
                "name": "10.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-10-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=zeroshade",
            "name": "zeroshade",
            "key": "zeroshade",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=zeroshade&avatarId=31230",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=zeroshade&avatarId=31230",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=zeroshade&avatarId=31230",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=zeroshade&avatarId=31230"
            },
            "displayName": "Matthew Topol",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333772",
                "id": "12333772",
                "name": "Go"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333774",
                "id": "12333774",
                "name": "Integration",
                "description": "Issues related to integration / compatibility tests between implementations"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=zeroshade",
            "name": "zeroshade",
            "key": "zeroshade",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=zeroshade&avatarId=31230",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=zeroshade&avatarId=31230",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=zeroshade&avatarId=31230",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=zeroshade&avatarId=31230"
            },
            "displayName": "Matthew Topol",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=zeroshade",
            "name": "zeroshade",
            "key": "zeroshade",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=zeroshade&avatarId=31230",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=zeroshade&avatarId=31230",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=zeroshade&avatarId=31230",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=zeroshade&avatarId=31230"
            },
            "displayName": "Matthew Topol",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 18000,
            "total": 18000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 18000,
            "total": 18000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-17275/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 30,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474574/worklog/797014",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #13770:\nURL: https://github.com/apache/arrow/pull/13770#issuecomment-1201646314\n\n   https://issues.apache.org/jira/browse/ARROW-17275\n\n\n",
                    "created": "2022-08-01T19:53:56.446+0000",
                    "updated": "2022-08-01T19:53:56.446+0000",
                    "started": "2022-08-01T19:53:56.446+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "797014",
                    "issueId": "13474574"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474574/worklog/797281",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #13770:\nURL: https://github.com/apache/arrow/pull/13770#discussion_r935696173\n\n\n##########\ngo/arrow/array/list.go:\n##########\n@@ -146,28 +146,177 @@ func (a *List) Release() {\n \ta.values.Release()\n }\n \n-type ListBuilder struct {\n+// LargeList represents an immutable sequence of array values.\n+type LargeList struct {\n+\tarray\n+\tvalues  arrow.Array\n+\toffsets []int64\n+}\n+\n+// NewLargeListData returns a new LargeList array value, from data.\n+func NewLargeListData(data arrow.ArrayData) *LargeList {\n+\ta := &LargeList{}\n+\ta.refCount = 1\n+\ta.setData(data.(*Data))\n+\treturn a\n+}\n+\n+func (a *LargeList) ListValues() arrow.Array { return a.values }\n+\n+func (a *LargeList) String() string {\n+\to := new(strings.Builder)\n+\to.WriteString(\"[\")\n+\tfor i := 0; i < a.Len(); i++ {\n+\t\tif i > 0 {\n+\t\t\to.WriteString(\" \")\n+\t\t}\n+\t\tif !a.IsValid(i) {\n+\t\t\to.WriteString(\"(null)\")\n+\t\t\tcontinue\n+\t\t}\n+\t\tsub := a.newListValue(i)\n+\t\tfmt.Fprintf(o, \"%v\", sub)\n+\t\tsub.Release()\n+\t}\n+\to.WriteString(\"]\")\n+\treturn o.String()\n+}\n+\n+func (a *LargeList) newListValue(i int) arrow.Array {\n+\tj := i + a.array.data.offset\n+\tbeg := int64(a.offsets[j])\n+\tend := int64(a.offsets[j+1])\n+\treturn NewSlice(a.values, beg, end)\n+}\n+\n+func (a *LargeList) setData(data *Data) {\n+\ta.array.setData(data)\n+\tvals := data.buffers[1]\n+\tif vals != nil {\n+\t\ta.offsets = arrow.Int64Traits.CastFromBytes(vals.Bytes())\n+\t}\n+\ta.values = MakeFromData(data.childData[0])\n+}\n+\n+func (a *LargeList) getOneForMarshal(i int) interface{} {\n+\tif a.IsNull(i) {\n+\t\treturn nil\n+\t}\n+\n+\tslice := a.newListValue(i)\n+\tdefer slice.Release()\n+\tv, err := json.Marshal(slice)\n+\tif err != nil {\n+\t\tpanic(err)\n+\t}\n+\treturn json.RawMessage(v)\n+}\n+\n+func (a *LargeList) MarshalJSON() ([]byte, error) {\n+\tvar buf bytes.Buffer\n+\tenc := json.NewEncoder(&buf)\n+\n+\tbuf.WriteByte('[')\n+\tfor i := 0; i < a.Len(); i++ {\n+\t\tif i != 0 {\n+\t\t\tbuf.WriteByte(',')\n+\t\t}\n+\t\tif err := enc.Encode(a.getOneForMarshal(i)); err != nil {\n+\t\t\treturn nil, err\n+\t\t}\n+\t}\n+\tbuf.WriteByte(']')\n+\treturn buf.Bytes(), nil\n+}\n+\n+func arrayEqualLargeList(left, right *LargeList) bool {\n+\tfor i := 0; i < left.Len(); i++ {\n+\t\tif left.IsNull(i) {\n+\t\t\tcontinue\n+\t\t}\n+\t\to := func() bool {\n+\t\t\tl := left.newListValue(i)\n+\t\t\tdefer l.Release()\n+\t\t\tr := right.newListValue(i)\n+\t\t\tdefer r.Release()\n+\t\t\treturn Equal(l, r)\n+\t\t}()\n+\t\tif !o {\n+\t\t\treturn false\n+\t\t}\n+\t}\n+\treturn true\n+}\n+\n+// Len returns the number of elements in the array.\n+func (a *LargeList) Len() int { return a.array.Len() }\n+\n+func (a *LargeList) Offsets() []int64 { return a.offsets }\n+\n+func (a *LargeList) Retain() {\n+\ta.array.Retain()\n+\ta.values.Retain()\n+}\n+\n+func (a *LargeList) Release() {\n+\ta.array.Release()\n+\ta.values.Release()\n+}\n+\n+type listBuilder struct {\n \tbuilder\n \n \tetype   arrow.DataType // data type of the list's elements.\n \tvalues  Builder        // value builder for the list's elements.\n-\toffsets *Int32Builder\n+\toffsets Builder\n+\n+\tdt              arrow.DataType\n\nReview Comment:\n   Is it the actual list type or the offset type? (perhaps add a comment?)\n\n\n\n##########\ngo/arrow/ipc/writer.go:\n##########\n@@ -562,6 +562,36 @@ func (w *recordEncoder) visit(p *Payload, arr arrow.Array) error {\n \t\tp.body = append(p.body, voffsets)\n \t\tp.body = append(p.body, values)\n \n+\tcase *arrow.LargeBinaryType:\n\nReview Comment:\n   Isn't this exactly the same code as for BinaryType above? Can this perhaps be mutualized?\n\n\n\n##########\ngo/arrow/array/list.go:\n##########\n@@ -146,28 +146,177 @@ func (a *List) Release() {\n \ta.values.Release()\n }\n \n-type ListBuilder struct {\n+// LargeList represents an immutable sequence of array values.\n+type LargeList struct {\n+\tarray\n+\tvalues  arrow.Array\n+\toffsets []int64\n+}\n+\n+// NewLargeListData returns a new LargeList array value, from data.\n+func NewLargeListData(data arrow.ArrayData) *LargeList {\n+\ta := &LargeList{}\n+\ta.refCount = 1\n+\ta.setData(data.(*Data))\n+\treturn a\n+}\n+\n+func (a *LargeList) ListValues() arrow.Array { return a.values }\n+\n+func (a *LargeList) String() string {\n+\to := new(strings.Builder)\n+\to.WriteString(\"[\")\n+\tfor i := 0; i < a.Len(); i++ {\n+\t\tif i > 0 {\n+\t\t\to.WriteString(\" \")\n+\t\t}\n+\t\tif !a.IsValid(i) {\n+\t\t\to.WriteString(\"(null)\")\n+\t\t\tcontinue\n+\t\t}\n+\t\tsub := a.newListValue(i)\n+\t\tfmt.Fprintf(o, \"%v\", sub)\n+\t\tsub.Release()\n+\t}\n+\to.WriteString(\"]\")\n+\treturn o.String()\n+}\n+\n+func (a *LargeList) newListValue(i int) arrow.Array {\n+\tj := i + a.array.data.offset\n+\tbeg := int64(a.offsets[j])\n+\tend := int64(a.offsets[j+1])\n+\treturn NewSlice(a.values, beg, end)\n+}\n+\n+func (a *LargeList) setData(data *Data) {\n+\ta.array.setData(data)\n+\tvals := data.buffers[1]\n+\tif vals != nil {\n+\t\ta.offsets = arrow.Int64Traits.CastFromBytes(vals.Bytes())\n+\t}\n+\ta.values = MakeFromData(data.childData[0])\n+}\n+\n+func (a *LargeList) getOneForMarshal(i int) interface{} {\n+\tif a.IsNull(i) {\n+\t\treturn nil\n+\t}\n+\n+\tslice := a.newListValue(i)\n+\tdefer slice.Release()\n+\tv, err := json.Marshal(slice)\n+\tif err != nil {\n+\t\tpanic(err)\n+\t}\n+\treturn json.RawMessage(v)\n+}\n+\n+func (a *LargeList) MarshalJSON() ([]byte, error) {\n+\tvar buf bytes.Buffer\n+\tenc := json.NewEncoder(&buf)\n+\n+\tbuf.WriteByte('[')\n+\tfor i := 0; i < a.Len(); i++ {\n+\t\tif i != 0 {\n+\t\t\tbuf.WriteByte(',')\n+\t\t}\n+\t\tif err := enc.Encode(a.getOneForMarshal(i)); err != nil {\n+\t\t\treturn nil, err\n+\t\t}\n+\t}\n+\tbuf.WriteByte(']')\n+\treturn buf.Bytes(), nil\n+}\n+\n+func arrayEqualLargeList(left, right *LargeList) bool {\n+\tfor i := 0; i < left.Len(); i++ {\n+\t\tif left.IsNull(i) {\n+\t\t\tcontinue\n+\t\t}\n+\t\to := func() bool {\n+\t\t\tl := left.newListValue(i)\n+\t\t\tdefer l.Release()\n+\t\t\tr := right.newListValue(i)\n+\t\t\tdefer r.Release()\n+\t\t\treturn Equal(l, r)\n+\t\t}()\n+\t\tif !o {\n+\t\t\treturn false\n+\t\t}\n+\t}\n+\treturn true\n+}\n+\n+// Len returns the number of elements in the array.\n+func (a *LargeList) Len() int { return a.array.Len() }\n+\n+func (a *LargeList) Offsets() []int64 { return a.offsets }\n+\n+func (a *LargeList) Retain() {\n+\ta.array.Retain()\n+\ta.values.Retain()\n+}\n+\n+func (a *LargeList) Release() {\n+\ta.array.Release()\n+\ta.values.Release()\n+}\n+\n+type listBuilder struct {\n\nReview Comment:\n   I don't know how the Go culture goes about this, but isn't it a bit confusing to have both `listBuilder` and `ListBuilder` classes here?\n\n\n\n##########\ngo/arrow/cdata/cdata.go:\n##########\n@@ -433,7 +470,8 @@ func (imp *cimporter) importListLike() error {\n \t\treturn err\n \t}\n \n-\toffsets := imp.importOffsetsBuffer(1)\n+\toffsetSize := imp.dt.Layout().Buffers[1].ByteWidth\n\nReview Comment:\n   Can the `ByteWidth` trick also be used for String/LargeString instead of having duplicate import routines?\n\n\n\n##########\ngo/arrow/array/list.go:\n##########\n@@ -181,29 +330,36 @@ func (b *ListBuilder) Release() {\n \tb.offsets.Release()\n }\n \n-func (b *ListBuilder) appendNextOffset() {\n-\tb.offsets.Append(int32(b.values.Len()))\n+func (b *listBuilder) appendNextOffset() {\n+\tb.appendOffsetVal(b.values.Len())\n\nReview Comment:\n   So this is going through a function pointer and/or vtable I assume? I don't know how much optimized you expect builders to be, but is some inlining automatically done by the compiler here when the derived listBuilder type is known?\n\n\n\n##########\ngo/arrow/array/concat_test.go:\n##########\n@@ -158,6 +159,32 @@ func (cts *ConcatTestSuite) generateArr(size int64, nullprob float64) arrow.Arra\n \t\tbldr := array.NewListBuilder(memory.DefaultAllocator, arrow.PrimitiveTypes.Int8)\n \t\tdefer bldr.Release()\n \n+\t\tvalid := make([]bool, len(offsetsVector)-1)\n+\t\tfor i := range valid {\n+\t\t\tvalid[i] = true\n+\t\t}\n+\t\tbldr.AppendValues(offsetsVector, valid)\n+\t\tvb := bldr.ValueBuilder().(*array.Int8Builder)\n+\t\tfor i := 0; i < values.Len(); i++ {\n+\t\t\tif values.IsValid(i) {\n+\t\t\t\tvb.Append(values.Value(i))\n+\t\t\t} else {\n+\t\t\t\tvb.AppendNull()\n+\t\t\t}\n+\t\t}\n+\t\treturn bldr.NewArray()\n+\tcase arrow.LARGE_LIST:\n+\t\tvaluesSize := size * 8\n\nReview Comment:\n   Hmm... so, the way I understand this code, `size` is the logical length of the list array and `valuesSize` the logical length of the child list array, right?\r\n   \r\n   Meaning that the multiplier here is arbitrary and you could have e.g. `valuesSize := size * 13` or something?\n\n\n\n##########\ngo/arrow/ipc/writer.go:\n##########\n@@ -719,13 +817,26 @@ func (w *recordEncoder) getZeroBasedValueOffsets(arr arrow.Array) (*memory.Buffe\n \t\tshiftedOffsets := memory.NewResizableBuffer(w.mem)\n \t\tshiftedOffsets.Resize(offsetBytesNeeded)\n \n-\t\tdest := arrow.Int32Traits.CastFromBytes(shiftedOffsets.Bytes())\n-\t\toffsets := arrow.Int32Traits.CastFromBytes(voffsets.Bytes())[data.Offset() : data.Offset()+data.Len()+1]\n+\t\tswitch arr.DataType().Layout().Buffers[1].ByteWidth {\n+\t\tcase 8:\n+\t\t\tdest := arrow.Int64Traits.CastFromBytes(shiftedOffsets.Bytes())\n+\t\t\toffsets := arrow.Int64Traits.CastFromBytes(voffsets.Bytes())[data.Offset() : data.Offset()+data.Len()+1]\n \n-\t\tstartOffset := offsets[0]\n-\t\tfor i, o := range offsets {\n-\t\t\tdest[i] = o - startOffset\n+\t\t\tstartOffset := offsets[0]\n+\t\t\tfor i, o := range offsets {\n+\t\t\t\tdest[i] = o - startOffset\n+\t\t\t}\n+\n+\t\tdefault:\n\nReview Comment:\n   Perhaps add a debug mode assertion that it has the value `4` here?\n\n\n\n##########\ngo/arrow/datatype_binary.go:\n##########\n@@ -16,6 +16,10 @@\n \n package arrow\n \n+type OffsetTraits interface {\n+\tBytesRequired(int) int\n\nReview Comment:\n   Should this get a docstring?\n\n\n\n##########\ngo/arrow/array/list_test.go:\n##########\n@@ -211,3 +211,190 @@ func TestListArraySlice(t *testing.T) {\n \t\tt.Fatalf(\"got=%q, want=%q\", got, want)\n \t}\n }\n+\n+func TestLargeListArray(t *testing.T) {\n+\tpool := memory.NewCheckedAllocator(memory.NewGoAllocator())\n+\tdefer pool.AssertSize(t, 0)\n+\n+\tvar (\n+\t\tvs      = []int32{0, 1, 2, 3, 4, 5, 6}\n+\t\tlengths = []int{3, 0, 4}\n+\t\tisValid = []bool{true, false, true}\n+\t\toffsets = []int64{0, 3, 3, 7}\n\nReview Comment:\n   For the record, perhaps it would be nice to also test a zero-length non-null list element as well? e.g.:\r\n   ```suggestion\r\n   \t\tlengths = []int{3, 0, 0, 4}\r\n   \t\tisValid = []bool{true, false, true, true}\r\n   \t\toffsets = []int64{0, 3, 3, 3, 7}\r\n   ```\n\n\n\n##########\ngo/arrow/array/list_test.go:\n##########\n@@ -211,3 +211,190 @@ func TestListArraySlice(t *testing.T) {\n \t\tt.Fatalf(\"got=%q, want=%q\", got, want)\n \t}\n }\n+\n+func TestLargeListArray(t *testing.T) {\n+\tpool := memory.NewCheckedAllocator(memory.NewGoAllocator())\n+\tdefer pool.AssertSize(t, 0)\n+\n+\tvar (\n+\t\tvs      = []int32{0, 1, 2, 3, 4, 5, 6}\n+\t\tlengths = []int{3, 0, 4}\n+\t\tisValid = []bool{true, false, true}\n+\t\toffsets = []int64{0, 3, 3, 7}\n+\t)\n+\n+\tlb := array.NewLargeListBuilder(pool, arrow.PrimitiveTypes.Int32)\n+\tdefer lb.Release()\n+\n+\tfor i := 0; i < 10; i++ {\n+\t\tvb := lb.ValueBuilder().(*array.Int32Builder)\n+\t\tvb.Reserve(len(vs))\n+\n+\t\tpos := 0\n+\t\tfor i, length := range lengths {\n+\t\t\tlb.Append(isValid[i])\n+\t\t\tfor j := 0; j < length; j++ {\n+\t\t\t\tvb.Append(vs[pos])\n+\t\t\t\tpos++\n+\t\t\t}\n+\t\t}\n+\n+\t\tarr := lb.NewArray().(*array.LargeList)\n+\t\tdefer arr.Release()\n+\n+\t\tarr.Retain()\n+\t\tarr.Release()\n+\n+\t\tif got, want := arr.DataType().ID(), arrow.LARGE_LIST; got != want {\n+\t\t\tt.Fatalf(\"got=%v, want=%v\", got, want)\n\nReview Comment:\n   Just for the record, doesn't Go have a way to simplify this boilerplate? In C++ or Python, we would use custom assertions (e.g. \"ASSERT_EQ\") provided by the testing framework to reduce this to a simple one-liner and yet get good error diagnostics.\n\n\n\n##########\ngo/arrow/array/list.go:\n##########\n@@ -265,19 +427,31 @@ func (b *ListBuilder) NewListArray() (a *List) {\n \treturn\n }\n \n-func (b *ListBuilder) newData() (data *Data) {\n+// NewListArray creates a List array from the memory buffers used by the builder and resets the ListBuilder\n\nReview Comment:\n   ```suggestion\r\n   // NewLargeListArray creates a List array from the memory buffers used by the builder and resets the LargeListBuilder\r\n   ```\n\n\n\n##########\ngo/arrow/cdata/cdata.go:\n##########\n@@ -513,14 +551,13 @@ func (imp *cimporter) importFixedSizeBuffer(bufferID int, byteWidth int64) *memo\n \treturn imp.importBuffer(bufferID, bufsize)\n }\n \n-func (imp *cimporter) importOffsetsBuffer(bufferID int) *memory.Buffer {\n-\tconst offsetsize = int64(arrow.Int32SizeBytes) // go doesn't implement int64 offsets yet\n+func (imp *cimporter) importOffsetsBuffer(bufferID int, offsetsize int64) *memory.Buffer {\n \tbufsize := offsetsize * int64((imp.arr.length + imp.arr.offset + 1))\n \treturn imp.importBuffer(bufferID, bufsize)\n }\n \n-func (imp *cimporter) importVariableValuesBuffer(bufferID int, byteWidth int, offsets []int32) *memory.Buffer {\n-\tbufsize := byteWidth * int(offsets[imp.arr.length])\n+func (imp *cimporter) importVariableValuesBuffer(bufferID int, byteWidth int, bytelen int) *memory.Buffer {\n+\tbufsize := byteWidth * bytelen\n\nReview Comment:\n   Two things: 1) isn't `bytelen` a bit misleading as a name? 2) shouldn't it be an `int64`?\r\n   \n\n\n\n##########\ngo/arrow/array/list_test.go:\n##########\n@@ -211,3 +211,190 @@ func TestListArraySlice(t *testing.T) {\n \t\tt.Fatalf(\"got=%q, want=%q\", got, want)\n \t}\n }\n+\n+func TestLargeListArray(t *testing.T) {\n+\tpool := memory.NewCheckedAllocator(memory.NewGoAllocator())\n+\tdefer pool.AssertSize(t, 0)\n+\n+\tvar (\n+\t\tvs      = []int32{0, 1, 2, 3, 4, 5, 6}\n+\t\tlengths = []int{3, 0, 4}\n+\t\tisValid = []bool{true, false, true}\n+\t\toffsets = []int64{0, 3, 3, 7}\n+\t)\n+\n+\tlb := array.NewLargeListBuilder(pool, arrow.PrimitiveTypes.Int32)\n+\tdefer lb.Release()\n+\n+\tfor i := 0; i < 10; i++ {\n\nReview Comment:\n   Just for my understanding, why are we looping 10 times over the test body below? Is it to try and detect memory management issues?\n\n\n\n##########\ngo/arrow/array/list.go:\n##########\n@@ -253,6 +409,12 @@ func (b *ListBuilder) NewArray() arrow.Array {\n \treturn b.NewListArray()\n }\n \n+// NewArray creates a List array from the memory buffers used by the builder and resets the ListBuilder\n\nReview Comment:\n   Do you want to be specific here?\r\n   ```suggestion\r\n   // NewArray creates a LargeList array from the memory buffers used by the builder and resets the LargeListBuilder\r\n   ```\n\n\n\n##########\ndocs/source/status.rst:\n##########\n@@ -77,7 +77,7 @@ Data Types\n +-------------------+-------+-------+-------+------------+-------+-------+-------+\n | List              | \u2713     | \u2713     | \u2713     | \u2713          |  \u2713    |  \u2713    | \u2713     |\n +-------------------+-------+-------+-------+------------+-------+-------+-------+\n-| Large List        | \u2713     | \u2713     |       |            |       |  \u2713    | \u2713     |\n+| Large List        | \u2713     | \u2713     | \u2713     |            |       |  \u2713    | \u2713     |\n\nReview Comment:\n   Is the PR title incorrect? This is updating the compatibility matrix for Large List support, not Large String and Large Binary which are already ticked for Go.\n\n\n\n##########\ngo/arrow/ipc/writer.go:\n##########\n@@ -562,6 +562,36 @@ func (w *recordEncoder) visit(p *Payload, arr arrow.Array) error {\n \t\tp.body = append(p.body, voffsets)\n \t\tp.body = append(p.body, values)\n \n+\tcase *arrow.LargeBinaryType:\n\nReview Comment:\n   Incidentally, same question for String/LargeString and List/LargeList\n\n\n\n##########\ngo/arrow/datatype_binary.go:\n##########\n@@ -16,6 +16,10 @@\n \n package arrow\n \n+type OffsetTraits interface {\n+\tBytesRequired(int) int\n\nReview Comment:\n   Also, does this need to take and return `int64` instead?\n\n\n\n",
                    "created": "2022-08-02T15:50:34.089+0000",
                    "updated": "2022-08-02T15:50:34.089+0000",
                    "started": "2022-08-02T15:50:34.088+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "797281",
                    "issueId": "13474574"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474574/worklog/797282",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on code in PR #13770:\nURL: https://github.com/apache/arrow/pull/13770#discussion_r935762146\n\n\n##########\ndocs/source/status.rst:\n##########\n@@ -77,7 +77,7 @@ Data Types\n +-------------------+-------+-------+-------+------------+-------+-------+-------+\n | List              | \u2713     | \u2713     | \u2713     | \u2713          |  \u2713    |  \u2713    | \u2713     |\n +-------------------+-------+-------+-------+------------+-------+-------+-------+\n-| Large List        | \u2713     | \u2713     |       |            |       |  \u2713    | \u2713     |\n+| Large List        | \u2713     | \u2713     | \u2713     |            |       |  \u2713    | \u2713     |\n\nReview Comment:\n   You're absolutely right that I need to rename the PR (I ended up tying the change with the IPC fixes to my other changes adding the LargeList type so i just incorporated it). Also, I honestly don't know why the Large String and Large Binary were ticked, they weren't supported until this change.\n\n\n\n",
                    "created": "2022-08-02T15:51:59.362+0000",
                    "updated": "2022-08-02T15:51:59.362+0000",
                    "started": "2022-08-02T15:51:59.362+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "797282",
                    "issueId": "13474574"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474574/worklog/797283",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on code in PR #13770:\nURL: https://github.com/apache/arrow/pull/13770#discussion_r935763420\n\n\n##########\ngo/arrow/array/concat_test.go:\n##########\n@@ -158,6 +159,32 @@ func (cts *ConcatTestSuite) generateArr(size int64, nullprob float64) arrow.Arra\n \t\tbldr := array.NewListBuilder(memory.DefaultAllocator, arrow.PrimitiveTypes.Int8)\n \t\tdefer bldr.Release()\n \n+\t\tvalid := make([]bool, len(offsetsVector)-1)\n+\t\tfor i := range valid {\n+\t\t\tvalid[i] = true\n+\t\t}\n+\t\tbldr.AppendValues(offsetsVector, valid)\n+\t\tvb := bldr.ValueBuilder().(*array.Int8Builder)\n+\t\tfor i := 0; i < values.Len(); i++ {\n+\t\t\tif values.IsValid(i) {\n+\t\t\t\tvb.Append(values.Value(i))\n+\t\t\t} else {\n+\t\t\t\tvb.AppendNull()\n+\t\t\t}\n+\t\t}\n+\t\treturn bldr.NewArray()\n+\tcase arrow.LARGE_LIST:\n+\t\tvaluesSize := size * 8\n\nReview Comment:\n   yea, I'm doing * 8 here since it's expected to be 64-bit integers for the test\n\n\n\n",
                    "created": "2022-08-02T15:53:14.221+0000",
                    "updated": "2022-08-02T15:53:14.221+0000",
                    "started": "2022-08-02T15:53:14.221+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "797283",
                    "issueId": "13474574"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474574/worklog/797286",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on code in PR #13770:\nURL: https://github.com/apache/arrow/pull/13770#discussion_r935766008\n\n\n##########\ngo/arrow/array/list.go:\n##########\n@@ -146,28 +146,177 @@ func (a *List) Release() {\n \ta.values.Release()\n }\n \n-type ListBuilder struct {\n+// LargeList represents an immutable sequence of array values.\n+type LargeList struct {\n+\tarray\n+\tvalues  arrow.Array\n+\toffsets []int64\n+}\n+\n+// NewLargeListData returns a new LargeList array value, from data.\n+func NewLargeListData(data arrow.ArrayData) *LargeList {\n+\ta := &LargeList{}\n+\ta.refCount = 1\n+\ta.setData(data.(*Data))\n+\treturn a\n+}\n+\n+func (a *LargeList) ListValues() arrow.Array { return a.values }\n+\n+func (a *LargeList) String() string {\n+\to := new(strings.Builder)\n+\to.WriteString(\"[\")\n+\tfor i := 0; i < a.Len(); i++ {\n+\t\tif i > 0 {\n+\t\t\to.WriteString(\" \")\n+\t\t}\n+\t\tif !a.IsValid(i) {\n+\t\t\to.WriteString(\"(null)\")\n+\t\t\tcontinue\n+\t\t}\n+\t\tsub := a.newListValue(i)\n+\t\tfmt.Fprintf(o, \"%v\", sub)\n+\t\tsub.Release()\n+\t}\n+\to.WriteString(\"]\")\n+\treturn o.String()\n+}\n+\n+func (a *LargeList) newListValue(i int) arrow.Array {\n+\tj := i + a.array.data.offset\n+\tbeg := int64(a.offsets[j])\n+\tend := int64(a.offsets[j+1])\n+\treturn NewSlice(a.values, beg, end)\n+}\n+\n+func (a *LargeList) setData(data *Data) {\n+\ta.array.setData(data)\n+\tvals := data.buffers[1]\n+\tif vals != nil {\n+\t\ta.offsets = arrow.Int64Traits.CastFromBytes(vals.Bytes())\n+\t}\n+\ta.values = MakeFromData(data.childData[0])\n+}\n+\n+func (a *LargeList) getOneForMarshal(i int) interface{} {\n+\tif a.IsNull(i) {\n+\t\treturn nil\n+\t}\n+\n+\tslice := a.newListValue(i)\n+\tdefer slice.Release()\n+\tv, err := json.Marshal(slice)\n+\tif err != nil {\n+\t\tpanic(err)\n+\t}\n+\treturn json.RawMessage(v)\n+}\n+\n+func (a *LargeList) MarshalJSON() ([]byte, error) {\n+\tvar buf bytes.Buffer\n+\tenc := json.NewEncoder(&buf)\n+\n+\tbuf.WriteByte('[')\n+\tfor i := 0; i < a.Len(); i++ {\n+\t\tif i != 0 {\n+\t\t\tbuf.WriteByte(',')\n+\t\t}\n+\t\tif err := enc.Encode(a.getOneForMarshal(i)); err != nil {\n+\t\t\treturn nil, err\n+\t\t}\n+\t}\n+\tbuf.WriteByte(']')\n+\treturn buf.Bytes(), nil\n+}\n+\n+func arrayEqualLargeList(left, right *LargeList) bool {\n+\tfor i := 0; i < left.Len(); i++ {\n+\t\tif left.IsNull(i) {\n+\t\t\tcontinue\n+\t\t}\n+\t\to := func() bool {\n+\t\t\tl := left.newListValue(i)\n+\t\t\tdefer l.Release()\n+\t\t\tr := right.newListValue(i)\n+\t\t\tdefer r.Release()\n+\t\t\treturn Equal(l, r)\n+\t\t}()\n+\t\tif !o {\n+\t\t\treturn false\n+\t\t}\n+\t}\n+\treturn true\n+}\n+\n+// Len returns the number of elements in the array.\n+func (a *LargeList) Len() int { return a.array.Len() }\n+\n+func (a *LargeList) Offsets() []int64 { return a.offsets }\n+\n+func (a *LargeList) Retain() {\n+\ta.array.Retain()\n+\ta.values.Retain()\n+}\n+\n+func (a *LargeList) Release() {\n+\ta.array.Release()\n+\ta.values.Release()\n+}\n+\n+type listBuilder struct {\n \tbuilder\n \n \tetype   arrow.DataType // data type of the list's elements.\n \tvalues  Builder        // value builder for the list's elements.\n-\toffsets *Int32Builder\n+\toffsets Builder\n+\n+\tdt              arrow.DataType\n\nReview Comment:\n   `dt` is the actual List Type, there's a separate `etype` member which is the `element` type of the list. \r\n   \r\n   The offset type (int32 vs int64) doesn't need to matter for the base `listbuilder` object and is hidden behind the `Builder` interface, casted when necessary to either an `Int32Builder` or `Int64Builder` as appropriate. I'll add a comment.\n\n\n\n",
                    "created": "2022-08-02T15:55:39.380+0000",
                    "updated": "2022-08-02T15:55:39.380+0000",
                    "started": "2022-08-02T15:55:39.379+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "797286",
                    "issueId": "13474574"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474574/worklog/797287",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on code in PR #13770:\nURL: https://github.com/apache/arrow/pull/13770#discussion_r935767836\n\n\n##########\ngo/arrow/array/list.go:\n##########\n@@ -146,28 +146,177 @@ func (a *List) Release() {\n \ta.values.Release()\n }\n \n-type ListBuilder struct {\n+// LargeList represents an immutable sequence of array values.\n+type LargeList struct {\n+\tarray\n+\tvalues  arrow.Array\n+\toffsets []int64\n+}\n+\n+// NewLargeListData returns a new LargeList array value, from data.\n+func NewLargeListData(data arrow.ArrayData) *LargeList {\n+\ta := &LargeList{}\n+\ta.refCount = 1\n+\ta.setData(data.(*Data))\n+\treturn a\n+}\n+\n+func (a *LargeList) ListValues() arrow.Array { return a.values }\n+\n+func (a *LargeList) String() string {\n+\to := new(strings.Builder)\n+\to.WriteString(\"[\")\n+\tfor i := 0; i < a.Len(); i++ {\n+\t\tif i > 0 {\n+\t\t\to.WriteString(\" \")\n+\t\t}\n+\t\tif !a.IsValid(i) {\n+\t\t\to.WriteString(\"(null)\")\n+\t\t\tcontinue\n+\t\t}\n+\t\tsub := a.newListValue(i)\n+\t\tfmt.Fprintf(o, \"%v\", sub)\n+\t\tsub.Release()\n+\t}\n+\to.WriteString(\"]\")\n+\treturn o.String()\n+}\n+\n+func (a *LargeList) newListValue(i int) arrow.Array {\n+\tj := i + a.array.data.offset\n+\tbeg := int64(a.offsets[j])\n+\tend := int64(a.offsets[j+1])\n+\treturn NewSlice(a.values, beg, end)\n+}\n+\n+func (a *LargeList) setData(data *Data) {\n+\ta.array.setData(data)\n+\tvals := data.buffers[1]\n+\tif vals != nil {\n+\t\ta.offsets = arrow.Int64Traits.CastFromBytes(vals.Bytes())\n+\t}\n+\ta.values = MakeFromData(data.childData[0])\n+}\n+\n+func (a *LargeList) getOneForMarshal(i int) interface{} {\n+\tif a.IsNull(i) {\n+\t\treturn nil\n+\t}\n+\n+\tslice := a.newListValue(i)\n+\tdefer slice.Release()\n+\tv, err := json.Marshal(slice)\n+\tif err != nil {\n+\t\tpanic(err)\n+\t}\n+\treturn json.RawMessage(v)\n+}\n+\n+func (a *LargeList) MarshalJSON() ([]byte, error) {\n+\tvar buf bytes.Buffer\n+\tenc := json.NewEncoder(&buf)\n+\n+\tbuf.WriteByte('[')\n+\tfor i := 0; i < a.Len(); i++ {\n+\t\tif i != 0 {\n+\t\t\tbuf.WriteByte(',')\n+\t\t}\n+\t\tif err := enc.Encode(a.getOneForMarshal(i)); err != nil {\n+\t\t\treturn nil, err\n+\t\t}\n+\t}\n+\tbuf.WriteByte(']')\n+\treturn buf.Bytes(), nil\n+}\n+\n+func arrayEqualLargeList(left, right *LargeList) bool {\n+\tfor i := 0; i < left.Len(); i++ {\n+\t\tif left.IsNull(i) {\n+\t\t\tcontinue\n+\t\t}\n+\t\to := func() bool {\n+\t\t\tl := left.newListValue(i)\n+\t\t\tdefer l.Release()\n+\t\t\tr := right.newListValue(i)\n+\t\t\tdefer r.Release()\n+\t\t\treturn Equal(l, r)\n+\t\t}()\n+\t\tif !o {\n+\t\t\treturn false\n+\t\t}\n+\t}\n+\treturn true\n+}\n+\n+// Len returns the number of elements in the array.\n+func (a *LargeList) Len() int { return a.array.Len() }\n+\n+func (a *LargeList) Offsets() []int64 { return a.offsets }\n+\n+func (a *LargeList) Retain() {\n+\ta.array.Retain()\n+\ta.values.Retain()\n+}\n+\n+func (a *LargeList) Release() {\n+\ta.array.Release()\n+\ta.values.Release()\n+}\n+\n+type listBuilder struct {\n\nReview Comment:\n   Since determining when something is exported from the package in Go is based solely on whether the first character is upper-cased or not, it's actually a common pattern to use a lower-cased version of the exported type for a base impl. To make it less confusing though, i'll rename it as `baseListBuilder` \n\n\n\n",
                    "created": "2022-08-02T15:57:19.533+0000",
                    "updated": "2022-08-02T15:57:19.533+0000",
                    "started": "2022-08-02T15:57:19.532+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "797287",
                    "issueId": "13474574"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474574/worklog/797288",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on code in PR #13770:\nURL: https://github.com/apache/arrow/pull/13770#discussion_r935771669\n\n\n##########\ngo/arrow/array/list.go:\n##########\n@@ -181,29 +330,36 @@ func (b *ListBuilder) Release() {\n \tb.offsets.Release()\n }\n \n-func (b *ListBuilder) appendNextOffset() {\n-\tb.offsets.Append(int32(b.values.Len()))\n+func (b *listBuilder) appendNextOffset() {\n+\tb.appendOffsetVal(b.values.Len())\n\nReview Comment:\n   Yea, right now it's going through a function pointer. I don't know offhand whether or not the Go compiler would be able to inline this with the function pointer (though I can take a look at the generated assembly and see), my initial assumption would be that it's not going to inline this and will go through the function pointer each time.\r\n   \r\n   It was a decision I made to allow the code reuse at the expense of some performance in the builder.\r\n   \r\n   There are a lot of cases I would prefer to use go's generics for (like this one), but we're trying to maintain compatibility for Go versions latest-1 (ie: go1.17+) so I don't want to introduce usages of generics just yet until Go1.19 is released.\n\n\n\n",
                    "created": "2022-08-02T16:01:10.301+0000",
                    "updated": "2022-08-02T16:01:10.301+0000",
                    "started": "2022-08-02T16:01:10.301+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "797288",
                    "issueId": "13474574"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474574/worklog/797289",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on code in PR #13770:\nURL: https://github.com/apache/arrow/pull/13770#discussion_r935774215\n\n\n##########\ngo/arrow/array/list_test.go:\n##########\n@@ -211,3 +211,190 @@ func TestListArraySlice(t *testing.T) {\n \t\tt.Fatalf(\"got=%q, want=%q\", got, want)\n \t}\n }\n+\n+func TestLargeListArray(t *testing.T) {\n+\tpool := memory.NewCheckedAllocator(memory.NewGoAllocator())\n+\tdefer pool.AssertSize(t, 0)\n+\n+\tvar (\n+\t\tvs      = []int32{0, 1, 2, 3, 4, 5, 6}\n+\t\tlengths = []int{3, 0, 4}\n+\t\tisValid = []bool{true, false, true}\n+\t\toffsets = []int64{0, 3, 3, 7}\n+\t)\n+\n+\tlb := array.NewLargeListBuilder(pool, arrow.PrimitiveTypes.Int32)\n+\tdefer lb.Release()\n+\n+\tfor i := 0; i < 10; i++ {\n+\t\tvb := lb.ValueBuilder().(*array.Int32Builder)\n+\t\tvb.Reserve(len(vs))\n+\n+\t\tpos := 0\n+\t\tfor i, length := range lengths {\n+\t\t\tlb.Append(isValid[i])\n+\t\t\tfor j := 0; j < length; j++ {\n+\t\t\t\tvb.Append(vs[pos])\n+\t\t\t\tpos++\n+\t\t\t}\n+\t\t}\n+\n+\t\tarr := lb.NewArray().(*array.LargeList)\n+\t\tdefer arr.Release()\n+\n+\t\tarr.Retain()\n+\t\tarr.Release()\n+\n+\t\tif got, want := arr.DataType().ID(), arrow.LARGE_LIST; got != want {\n+\t\t\tt.Fatalf(\"got=%v, want=%v\", got, want)\n\nReview Comment:\n   It does, and you can see it used elsewhere in the tests. I just took the shortcut here to copy and paste the existing tests and shifted the type IDs to be LARGE_LIST lol. \r\n   \r\n   But you're right, I should simplify this to utilize the framework better instead. I'll do that.\n\n\n\n",
                    "created": "2022-08-02T16:03:54.900+0000",
                    "updated": "2022-08-02T16:03:54.900+0000",
                    "started": "2022-08-02T16:03:54.900+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "797289",
                    "issueId": "13474574"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474574/worklog/797290",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on code in PR #13770:\nURL: https://github.com/apache/arrow/pull/13770#discussion_r935777464\n\n\n##########\ngo/arrow/array/list_test.go:\n##########\n@@ -211,3 +211,190 @@ func TestListArraySlice(t *testing.T) {\n \t\tt.Fatalf(\"got=%q, want=%q\", got, want)\n \t}\n }\n+\n+func TestLargeListArray(t *testing.T) {\n+\tpool := memory.NewCheckedAllocator(memory.NewGoAllocator())\n+\tdefer pool.AssertSize(t, 0)\n+\n+\tvar (\n+\t\tvs      = []int32{0, 1, 2, 3, 4, 5, 6}\n+\t\tlengths = []int{3, 0, 4}\n+\t\tisValid = []bool{true, false, true}\n+\t\toffsets = []int64{0, 3, 3, 7}\n+\t)\n+\n+\tlb := array.NewLargeListBuilder(pool, arrow.PrimitiveTypes.Int32)\n+\tdefer lb.Release()\n+\n+\tfor i := 0; i < 10; i++ {\n\nReview Comment:\n   > is it to try and detect memory management issues?\r\n   \r\n   Basically yes. Calling `NewArray()` should make sure the builder is properly reset to enable reuse (along with the child builders) without any memory leaks. So we loop multiple times, building and calling NewArray to ensure that there are no memory management issues\n\n\n\n",
                    "created": "2022-08-02T16:07:20.488+0000",
                    "updated": "2022-08-02T16:07:20.488+0000",
                    "started": "2022-08-02T16:07:20.488+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "797290",
                    "issueId": "13474574"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474574/worklog/797302",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on code in PR #13770:\nURL: https://github.com/apache/arrow/pull/13770#discussion_r935816137\n\n\n##########\ngo/arrow/cdata/cdata.go:\n##########\n@@ -513,14 +551,13 @@ func (imp *cimporter) importFixedSizeBuffer(bufferID int, byteWidth int64) *memo\n \treturn imp.importBuffer(bufferID, bufsize)\n }\n \n-func (imp *cimporter) importOffsetsBuffer(bufferID int) *memory.Buffer {\n-\tconst offsetsize = int64(arrow.Int32SizeBytes) // go doesn't implement int64 offsets yet\n+func (imp *cimporter) importOffsetsBuffer(bufferID int, offsetsize int64) *memory.Buffer {\n \tbufsize := offsetsize * int64((imp.arr.length + imp.arr.offset + 1))\n \treturn imp.importBuffer(bufferID, bufsize)\n }\n \n-func (imp *cimporter) importVariableValuesBuffer(bufferID int, byteWidth int, offsets []int32) *memory.Buffer {\n-\tbufsize := byteWidth * int(offsets[imp.arr.length])\n+func (imp *cimporter) importVariableValuesBuffer(bufferID int, byteWidth int, bytelen int) *memory.Buffer {\n+\tbufsize := byteWidth * bytelen\n\nReview Comment:\n   fair point, i'll fix that\n\n\n\n",
                    "created": "2022-08-02T16:48:59.049+0000",
                    "updated": "2022-08-02T16:48:59.049+0000",
                    "started": "2022-08-02T16:48:59.049+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "797302",
                    "issueId": "13474574"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474574/worklog/797303",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #13770:\nURL: https://github.com/apache/arrow/pull/13770#discussion_r935817156\n\n\n##########\ngo/arrow/array/concat_test.go:\n##########\n@@ -158,6 +159,32 @@ func (cts *ConcatTestSuite) generateArr(size int64, nullprob float64) arrow.Arra\n \t\tbldr := array.NewListBuilder(memory.DefaultAllocator, arrow.PrimitiveTypes.Int8)\n \t\tdefer bldr.Release()\n \n+\t\tvalid := make([]bool, len(offsetsVector)-1)\n+\t\tfor i := range valid {\n+\t\t\tvalid[i] = true\n+\t\t}\n+\t\tbldr.AppendValues(offsetsVector, valid)\n+\t\tvb := bldr.ValueBuilder().(*array.Int8Builder)\n+\t\tfor i := 0; i < values.Len(); i++ {\n+\t\t\tif values.IsValid(i) {\n+\t\t\t\tvb.Append(values.Value(i))\n+\t\t\t} else {\n+\t\t\t\tvb.AppendNull()\n+\t\t\t}\n+\t\t}\n+\t\treturn bldr.NewArray()\n+\tcase arrow.LARGE_LIST:\n+\t\tvaluesSize := size * 8\n\nReview Comment:\n   Well, I understand that `cts.largeOffsets` generated `size` 64-bit offsets between 0 and `valuesSize` (inclusive).\r\n   But why does the number of list offsets be equal to 8 times the number of values in the child array?\n\n\n\n",
                    "created": "2022-08-02T16:49:48.371+0000",
                    "updated": "2022-08-02T16:49:48.371+0000",
                    "started": "2022-08-02T16:49:48.371+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "797303",
                    "issueId": "13474574"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474574/worklog/797304",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #13770:\nURL: https://github.com/apache/arrow/pull/13770#discussion_r935818987\n\n\n##########\ngo/arrow/array/list_test.go:\n##########\n@@ -211,3 +211,190 @@ func TestListArraySlice(t *testing.T) {\n \t\tt.Fatalf(\"got=%q, want=%q\", got, want)\n \t}\n }\n+\n+func TestLargeListArray(t *testing.T) {\n+\tpool := memory.NewCheckedAllocator(memory.NewGoAllocator())\n+\tdefer pool.AssertSize(t, 0)\n+\n+\tvar (\n+\t\tvs      = []int32{0, 1, 2, 3, 4, 5, 6}\n+\t\tlengths = []int{3, 0, 4}\n+\t\tisValid = []bool{true, false, true}\n+\t\toffsets = []int64{0, 3, 3, 7}\n+\t)\n+\n+\tlb := array.NewLargeListBuilder(pool, arrow.PrimitiveTypes.Int32)\n+\tdefer lb.Release()\n+\n+\tfor i := 0; i < 10; i++ {\n\nReview Comment:\n   Still for my curiosity, does the Go ecosystem have equivalents to Address Sanitizer in C++, and/or do you Valgrind?\n\n\n\n",
                    "created": "2022-08-02T16:50:53.516+0000",
                    "updated": "2022-08-02T16:50:53.516+0000",
                    "started": "2022-08-02T16:50:53.515+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "797304",
                    "issueId": "13474574"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474574/worklog/797315",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on code in PR #13770:\nURL: https://github.com/apache/arrow/pull/13770#discussion_r935846762\n\n\n##########\ngo/arrow/array/list_test.go:\n##########\n@@ -211,3 +211,190 @@ func TestListArraySlice(t *testing.T) {\n \t\tt.Fatalf(\"got=%q, want=%q\", got, want)\n \t}\n }\n+\n+func TestLargeListArray(t *testing.T) {\n+\tpool := memory.NewCheckedAllocator(memory.NewGoAllocator())\n+\tdefer pool.AssertSize(t, 0)\n+\n+\tvar (\n+\t\tvs      = []int32{0, 1, 2, 3, 4, 5, 6}\n+\t\tlengths = []int{3, 0, 4}\n+\t\tisValid = []bool{true, false, true}\n+\t\toffsets = []int64{0, 3, 3, 7}\n+\t)\n+\n+\tlb := array.NewLargeListBuilder(pool, arrow.PrimitiveTypes.Int32)\n+\tdefer lb.Release()\n+\n+\tfor i := 0; i < 10; i++ {\n\nReview Comment:\n   Yep! there's a `-asan` option you can pass when building, and the `-race` argument in our CI that we use when running the tests finds race conditions. \r\n   \r\n   I don't think there's a *full* valgrind equivalent for Go, though there's lots of great memory profiling tools. I can add the `-asan` argument to the CI scripts if you like so that we run all the tests using asan.\n\n\n\n",
                    "created": "2022-08-02T17:23:01.462+0000",
                    "updated": "2022-08-02T17:23:01.462+0000",
                    "started": "2022-08-02T17:23:01.461+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "797315",
                    "issueId": "13474574"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474574/worklog/797316",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #13770:\nURL: https://github.com/apache/arrow/pull/13770#discussion_r935847349\n\n\n##########\ngo/arrow/array/list_test.go:\n##########\n@@ -211,3 +211,190 @@ func TestListArraySlice(t *testing.T) {\n \t\tt.Fatalf(\"got=%q, want=%q\", got, want)\n \t}\n }\n+\n+func TestLargeListArray(t *testing.T) {\n+\tpool := memory.NewCheckedAllocator(memory.NewGoAllocator())\n+\tdefer pool.AssertSize(t, 0)\n+\n+\tvar (\n+\t\tvs      = []int32{0, 1, 2, 3, 4, 5, 6}\n+\t\tlengths = []int{3, 0, 4}\n+\t\tisValid = []bool{true, false, true}\n+\t\toffsets = []int64{0, 3, 3, 7}\n+\t)\n+\n+\tlb := array.NewLargeListBuilder(pool, arrow.PrimitiveTypes.Int32)\n+\tdefer lb.Release()\n+\n+\tfor i := 0; i < 10; i++ {\n\nReview Comment:\n   I think that can be nice if it doesn't make build times too large.\n\n\n\n",
                    "created": "2022-08-02T17:23:46.481+0000",
                    "updated": "2022-08-02T17:23:46.481+0000",
                    "started": "2022-08-02T17:23:46.481+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "797316",
                    "issueId": "13474574"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474574/worklog/797318",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on code in PR #13770:\nURL: https://github.com/apache/arrow/pull/13770#discussion_r935853660\n\n\n##########\ngo/arrow/array/concat_test.go:\n##########\n@@ -158,6 +159,32 @@ func (cts *ConcatTestSuite) generateArr(size int64, nullprob float64) arrow.Arra\n \t\tbldr := array.NewListBuilder(memory.DefaultAllocator, arrow.PrimitiveTypes.Int8)\n \t\tdefer bldr.Release()\n \n+\t\tvalid := make([]bool, len(offsetsVector)-1)\n+\t\tfor i := range valid {\n+\t\t\tvalid[i] = true\n+\t\t}\n+\t\tbldr.AppendValues(offsetsVector, valid)\n+\t\tvb := bldr.ValueBuilder().(*array.Int8Builder)\n+\t\tfor i := 0; i < values.Len(); i++ {\n+\t\t\tif values.IsValid(i) {\n+\t\t\t\tvb.Append(values.Value(i))\n+\t\t\t} else {\n+\t\t\t\tvb.AppendNull()\n+\t\t\t}\n+\t\t}\n+\t\treturn bldr.NewArray()\n+\tcase arrow.LARGE_LIST:\n+\t\tvaluesSize := size * 8\n\nReview Comment:\n   `size` is the number of elements in the list array (which is why `cts.largeOffsets` outputs a slice with `size+1` elements because offsets should be 1 + #of elems). I multiplied by 8 here just to have a larger child array than I was using with the initial List cases, thus the lengths of the list elements will be *on average* larger than the previous case.\r\n   \r\n   TL;DR: `size` is the number of list elements (and `size+1` is the number of offsets). `valuesSize` is the total length of the child array which will get sliced up into those list elements randomly.\n\n\n\n",
                    "created": "2022-08-02T17:31:02.383+0000",
                    "updated": "2022-08-02T17:31:02.383+0000",
                    "started": "2022-08-02T17:31:02.383+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "797318",
                    "issueId": "13474574"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474574/worklog/797320",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on code in PR #13770:\nURL: https://github.com/apache/arrow/pull/13770#discussion_r935857293\n\n\n##########\ngo/arrow/datatype_binary.go:\n##########\n@@ -16,6 +16,10 @@\n \n package arrow\n \n+type OffsetTraits interface {\n+\tBytesRequired(int) int\n\nReview Comment:\n   Currently all of the `*Traits` objects (defined in the type_traits_*.go files) take in an `int` and return an `int`. On 64-bit machines this would be a 64-bit integer and on 32-bit machines it would be a 32-bit integer.\r\n   \r\n   I didn't want to change those objects (and risk breaking anyone who was using things like `arrow.TimestampTraits.BytesRequired(n)`). In this situation I just created an interface which matched those objects so I could have the data type objects return them. I'll add a docstring comment, but I don't want to modify it to be explicitly `int64` as that would be a signiifcant, potentially breaking, change.\n\n\n\n",
                    "created": "2022-08-02T17:35:32.431+0000",
                    "updated": "2022-08-02T17:35:32.431+0000",
                    "started": "2022-08-02T17:35:32.431+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "797320",
                    "issueId": "13474574"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474574/worklog/797321",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on PR #13770:\nURL: https://github.com/apache/arrow/pull/13770#issuecomment-1203026873\n\n   Thanks for the thorough review @pitrou I've pushed a bunch of refactoring and simplifying changes based on your suggestions by leveraging some new Interfaces. The side benefit of this is that the new interfaces will also make it easier for consumers to use the new Array types interchangeably too.\n\n\n",
                    "created": "2022-08-02T17:38:58.889+0000",
                    "updated": "2022-08-02T17:38:58.889+0000",
                    "started": "2022-08-02T17:38:58.888+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "797321",
                    "issueId": "13474574"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474574/worklog/797322",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on PR #13770:\nURL: https://github.com/apache/arrow/pull/13770#issuecomment-1203027788\n\n   Also the failed CI seems to be an issue with python linting.... anyone know if there's already a jira issue to address that?\n\n\n",
                    "created": "2022-08-02T17:40:00.958+0000",
                    "updated": "2022-08-02T17:40:00.958+0000",
                    "started": "2022-08-02T17:40:00.958+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "797322",
                    "issueId": "13474574"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474574/worklog/797326",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on code in PR #13770:\nURL: https://github.com/apache/arrow/pull/13770#discussion_r935867887\n\n\n##########\ngo/arrow/array/list_test.go:\n##########\n@@ -211,3 +211,190 @@ func TestListArraySlice(t *testing.T) {\n \t\tt.Fatalf(\"got=%q, want=%q\", got, want)\n \t}\n }\n+\n+func TestLargeListArray(t *testing.T) {\n+\tpool := memory.NewCheckedAllocator(memory.NewGoAllocator())\n+\tdefer pool.AssertSize(t, 0)\n+\n+\tvar (\n+\t\tvs      = []int32{0, 1, 2, 3, 4, 5, 6}\n+\t\tlengths = []int{3, 0, 4}\n+\t\tisValid = []bool{true, false, true}\n+\t\toffsets = []int64{0, 3, 3, 7}\n+\t)\n+\n+\tlb := array.NewLargeListBuilder(pool, arrow.PrimitiveTypes.Int32)\n+\tdefer lb.Release()\n+\n+\tfor i := 0; i < 10; i++ {\n\nReview Comment:\n   Darn! the `-asan` option was introduced with Go1.18, so we'd need to make a new build job running with the newer Go version to leverage it in the CI, until we upgrade the Go version we're using. *sigh*\n\n\n\n",
                    "created": "2022-08-02T17:48:28.575+0000",
                    "updated": "2022-08-02T17:48:28.575+0000",
                    "started": "2022-08-02T17:48:28.575+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "797326",
                    "issueId": "13474574"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474574/worklog/797332",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on PR #13770:\nURL: https://github.com/apache/arrow/pull/13770#issuecomment-1203060376\n\n   > Also the failed CI seems to be an issue with python linting.... anyone know if there's already a jira issue to address that?\r\n   \r\n   cc @raulcd \n\n\n",
                    "created": "2022-08-02T18:12:46.606+0000",
                    "updated": "2022-08-02T18:12:46.606+0000",
                    "started": "2022-08-02T18:12:46.605+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "797332",
                    "issueId": "13474574"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 18000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@27acb287[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3bb0baeb[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@60755cf6[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@5eacd5f1[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@61a5a7aa[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@3c225b9e[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@767a3200[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@4ec16263[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@21514e6[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@2c455191[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@b088c2b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@4e1f3553[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 18000,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Aug 03 19:43:06 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-08-03T19:43:06.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-17275/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2022-08-01T19:51:52.000+0000",
        "updated": "2022-08-03T22:03:15.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 18000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Go][Integration] Implement IPC handling for LargeString and LargeBinary ",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474574/comment/17574908",
                    "id": "17574908",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=zeroshade",
                        "name": "zeroshade",
                        "key": "zeroshade",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=zeroshade&avatarId=31230",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=zeroshade&avatarId=31230",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=zeroshade&avatarId=31230",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=zeroshade&avatarId=31230"
                        },
                        "displayName": "Matthew Topol",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 13770\n[https://github.com/apache/arrow/pull/13770]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=zeroshade",
                        "name": "zeroshade",
                        "key": "zeroshade",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=zeroshade&avatarId=31230",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=zeroshade&avatarId=31230",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=zeroshade&avatarId=31230",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=zeroshade&avatarId=31230"
                        },
                        "displayName": "Matthew Topol",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2022-08-03T19:43:06.054+0000",
                    "updated": "2022-08-03T19:43:06.054+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z17dig:",
        "customfield_12314139": null
    }
}