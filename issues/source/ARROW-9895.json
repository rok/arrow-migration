{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13325563",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13325563",
    "key": "ARROW-9895",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12345977",
                "id": "12345977",
                "description": "",
                "name": "2.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-10-19"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12347769",
                "id": "12347769",
                "description": "",
                "name": "1.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-07-24"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jhorstmann",
            "name": "jhorstmann",
            "key": "jhorstmann",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "J\u00f6rn Horstmann",
            "active": true,
            "timeZone": "Europe/Berlin"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333773",
                "id": "12333773",
                "name": "Rust"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jhorstmann",
            "name": "jhorstmann",
            "key": "jhorstmann",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "J\u00f6rn Horstmann",
            "active": true,
            "timeZone": "Europe/Berlin"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jhorstmann",
            "name": "jhorstmann",
            "key": "jhorstmann",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "J\u00f6rn Horstmann",
            "active": true,
            "timeZone": "Europe/Berlin"
        },
        "aggregateprogress": {
            "progress": 8400,
            "total": 8400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 8400,
            "total": 8400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-9895/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 14,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13325563/worklog/477364",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jhorstmann opened a new pull request #8092:\nURL: https://github.com/apache/arrow/pull/8092\n\n\n   - sort_to_indices further splits up float64/float32 inputs into nulls/non-nan/nan, sorts the non-nan values and then concats those 3 slices according to the sort options. Nans are distinct from null and sort greater than any other valid value\r\n   - implemented a sort method for dictionary arrays with string values. this kernel checks the is_ordered flag and sorts just by the keys if it is set, it will look up the string values otherwise\r\n   - for the lexical sort use case the above kernel are not used, instead the OrdArray trait is used. To make that more flexible and allow wrapping arrays with differend ordering behavior I will make it no longer extend Array and instead only contain the cmp_value method\r\n   - string dictionary sorting is then implemented with a wrapper struct StringDictionaryArrayAsOrdArray which implements OrdArray\r\n   - NaN aware sorting of floats is then also implemented with a wrapper struct and trait implementation\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-01T17:33:39.800+0000",
                    "updated": "2020-09-01T17:33:39.800+0000",
                    "started": "2020-09-01T17:33:39.800+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "477364",
                    "issueId": "13325563"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13325563/worklog/477365",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #8092:\nURL: https://github.com/apache/arrow/pull/8092#issuecomment-685020657\n\n\n   https://issues.apache.org/jira/browse/ARROW-9895\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-01T17:34:33.394+0000",
                    "updated": "2020-09-01T17:34:33.394+0000",
                    "started": "2020-09-01T17:34:33.394+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "477365",
                    "issueId": "13325563"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13325563/worklog/477370",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jhorstmann commented on pull request #8092:\nURL: https://github.com/apache/arrow/pull/8092#issuecomment-685025045\n\n\n   @andygrove this is my attempt at improving the sorting kernels. I still need to add more tests for the dictionary use case and probably also some datafusion integration tests. I'm a bit concerned about the `OrdArray` change because that changes a publicly exported type. Would have felt better if it was only an implementation detail of lexicographic sorting.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-01T17:42:42.428+0000",
                    "updated": "2020-09-01T17:42:42.428+0000",
                    "started": "2020-09-01T17:42:42.428+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "477370",
                    "issueId": "13325563"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13325563/worklog/477824",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jhorstmann commented on a change in pull request #8092:\nURL: https://github.com/apache/arrow/pull/8092#discussion_r482029030\n\n\n\n##########\nFile path: rust/arrow/src/array/ord.rs\n##########\n@@ -68,65 +80,252 @@ impl OrdArray for NullArray {\n     }\n }\n \n+macro_rules! float_ord_cmp {\n+    ($NAME: ident, $T: ty) => {\n+        #[inline]\n+        fn $NAME(a: $T, b: $T) -> Ordering {\n+            if a < b {\n+                return Ordering::Less;\n+            }\n+            if a > b {\n+                return Ordering::Greater;\n+            }\n+\n+            // convert to bits with canonical pattern for NaN\n+            let a = if a.is_nan() {\n+                <$T>::NAN.to_bits()\n+            } else {\n+                a.to_bits()\n+            };\n+            let b = if b.is_nan() {\n+                <$T>::NAN.to_bits()\n+            } else {\n+                b.to_bits()\n+            };\n+\n+            if a == b {\n+                // Equal or both NaN\n+                Ordering::Equal\n+            } else if a < b {\n+                // (-0.0, 0.0) or (!NaN, NaN)\n+                Ordering::Less\n+            } else {\n+                // (0.0, -0.0) or (NaN, !NaN)\n+                Ordering::Greater\n+            }\n+        }\n+    };\n+}\n+\n+float_ord_cmp!(cmp_f64, f64);\n+float_ord_cmp!(cmp_f32, f32);\n+\n+#[repr(transparent)]\n+struct Float64ArrayAsOrdArray<'a>(&'a Float64Array);\n+#[repr(transparent)]\n+struct Float32ArrayAsOrdArray<'a>(&'a Float32Array);\n+\n+impl OrdArray for Float64ArrayAsOrdArray<'_> {\n+    fn cmp_value(&self, i: usize, j: usize) -> Ordering {\n+        let a: f64 = self.0.value(i);\n+        let b: f64 = self.0.value(j);\n+\n+        cmp_f64(a, b)\n+    }\n+}\n+\n+impl OrdArray for Float32ArrayAsOrdArray<'_> {\n+    fn cmp_value(&self, i: usize, j: usize) -> Ordering {\n+        let a: f32 = self.0.value(i);\n+        let b: f32 = self.0.value(j);\n+\n+        cmp_f32(a, b)\n+    }\n+}\n+\n+fn float32_as_ord_array<'a>(array: &'a ArrayRef) -> Box<dyn OrdArray + 'a> {\n+    let float_array: &Float32Array = as_primitive_array::<Float32Type>(array);\n+    //let clone = std::mem::ManuallyDrop::new(float_vec);\n+\n+    //let as_ord = unsafe { &*(float_array as *const Float32Array as *const Float32ArrayAsOrdArray) };\n+\n+    //println!(\"before transmute\");\n+    //let as_ord: &Float32ArrayAsOrdArray = unsafe { std::mem::transmute_copy(array) };\n+    //println!(\"after transmute\");\n+    //let as_ord = Float32ArrayAsOrdArray(float_array);\n+    //as_ord\n+    Box::new(Float32ArrayAsOrdArray(float_array))\n+}\n+\n+fn float64_as_ord_array<'a>(array: &'a ArrayRef) -> Box<dyn OrdArray + 'a> {\n+    let float_array: &Float64Array = as_primitive_array::<Float64Type>(array);\n+\n+    //println!(\"before transmute\");\n+    //let as_ord: &Float64ArrayAsOrdArray = unsafe { std::mem::transmute_copy(array) };\n+    //let as_ord = unsafe { &*(float_array as *const Float64Array as *const Float64ArrayAsOrdArray) };\n+    //let as_ord = unsafe { &*(array as *const ArrayRef as *const Float64ArrayAsOrdArray )};\n+    //println!(\"after transmute\");\n+    //let as_ord = Float64ArrayAsOrdArray(float_array);\n+    //as_ord\n+    Box::new(Float64ArrayAsOrdArray(float_array))\n+}\n+\n+struct StringDictionaryArrayAsOrdArray<'a, T: ArrowDictionaryKeyType> {\n+    dict_array: &'a DictionaryArray<T>,\n+    keys: PrimitiveArray<T>,\n+}\n+\n+impl<T: ArrowDictionaryKeyType> OrdArray for StringDictionaryArrayAsOrdArray<'_, T> {\n+    fn cmp_value(&self, i: usize, j: usize) -> Ordering {\n+        let keys = &self.keys;\n+\n+        let a: T::Native = keys.value(i);\n+        let b: T::Native = keys.value(j);\n+\n+        let values = self.dict_array.values();\n+        let dict = as_string_array(&values);\n+\n+        let sa = dict.value(a.to_usize().unwrap());\n+        let sb = dict.value(b.to_usize().unwrap());\n+\n+        sa.cmp(sb)\n+    }\n+}\n+\n+struct SortedStringDictionaryArrayAsOrdArray<'a, T: ArrowDictionaryKeyType> {\n\nReview comment:\n       I'm also open to leaving this implementation for sorted dictionary array out for now. Although the the `is_ordered` flag already existed before this PR, there is currently no way to set it or guarantee a sorted dictionary when reading from csv or parquet.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-02T12:28:45.753+0000",
                    "updated": "2020-09-02T12:28:45.753+0000",
                    "started": "2020-09-02T12:28:45.753+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "477824",
                    "issueId": "13325563"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13325563/worklog/478708",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jhorstmann commented on a change in pull request #8092:\nURL: https://github.com/apache/arrow/pull/8092#discussion_r483140684\n\n\n\n##########\nFile path: rust/arrow/src/array/array.rs\n##########\n@@ -195,7 +196,8 @@ pub trait Array: fmt::Debug + Send + Sync + ArrayEqual + JsonEqual {\n     /// assert_eq!(array.is_valid(1), false);\n     /// ```\n     fn is_valid(&self, index: usize) -> bool {\n-        self.data().is_valid(self.data().offset() + index)\n+        let data = self.data_ref();\n\nReview comment:\n       Noticed these while benchmarking, avoiding the clone in `data()` doubled the performance when sorting a bigger dataset by multiple columns. This should also improve several other kernels.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-03T17:26:04.069+0000",
                    "updated": "2020-09-03T17:26:04.069+0000",
                    "started": "2020-09-03T17:26:04.069+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "478708",
                    "issueId": "13325563"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13325563/worklog/479296",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #8092:\nURL: https://github.com/apache/arrow/pull/8092#discussion_r483900538\n\n\n\n##########\nFile path: rust/arrow/src/array/ord.rs\n##########\n@@ -68,65 +80,233 @@ impl OrdArray for NullArray {\n     }\n }\n \n+macro_rules! float_ord_cmp {\n+    ($NAME: ident, $T: ty) => {\n+        #[inline]\n+        fn $NAME(a: $T, b: $T) -> Ordering {\n+            if a < b {\n+                return Ordering::Less;\n+            }\n+            if a > b {\n+                return Ordering::Greater;\n+            }\n+\n+            // convert to bits with canonical pattern for NaN\n+            let a = if a.is_nan() {\n+                <$T>::NAN.to_bits()\n+            } else {\n+                a.to_bits()\n+            };\n+            let b = if b.is_nan() {\n+                <$T>::NAN.to_bits()\n+            } else {\n+                b.to_bits()\n+            };\n+\n+            if a == b {\n+                // Equal or both NaN\n+                Ordering::Equal\n+            } else if a < b {\n+                // (-0.0, 0.0) or (!NaN, NaN)\n+                Ordering::Less\n+            } else {\n+                // (0.0, -0.0) or (NaN, !NaN)\n+                Ordering::Greater\n+            }\n+        }\n+    };\n+}\n+\n+float_ord_cmp!(cmp_f64, f64);\n+float_ord_cmp!(cmp_f32, f32);\n+\n+#[repr(transparent)]\n+struct Float64ArrayAsOrdArray<'a>(&'a Float64Array);\n+#[repr(transparent)]\n+struct Float32ArrayAsOrdArray<'a>(&'a Float32Array);\n+\n+impl OrdArray for Float64ArrayAsOrdArray<'_> {\n+    fn cmp_value(&self, i: usize, j: usize) -> Ordering {\n+        let a: f64 = self.0.value(i);\n+        let b: f64 = self.0.value(j);\n+\n+        cmp_f64(a, b)\n+    }\n+}\n+\n+impl OrdArray for Float32ArrayAsOrdArray<'_> {\n+    fn cmp_value(&self, i: usize, j: usize) -> Ordering {\n+        let a: f32 = self.0.value(i);\n+        let b: f32 = self.0.value(j);\n+\n+        cmp_f32(a, b)\n+    }\n+}\n+\n+fn float32_as_ord_array<'a>(array: &'a ArrayRef) -> Box<dyn OrdArray + 'a> {\n+    let float_array: &Float32Array = as_primitive_array::<Float32Type>(array);\n+    Box::new(Float32ArrayAsOrdArray(float_array))\n+}\n+\n+fn float64_as_ord_array<'a>(array: &'a ArrayRef) -> Box<dyn OrdArray + 'a> {\n+    let float_array: &Float64Array = as_primitive_array::<Float64Type>(array);\n+    Box::new(Float64ArrayAsOrdArray(float_array))\n+}\n+\n+struct StringDictionaryArrayAsOrdArray<'a, T: ArrowDictionaryKeyType> {\n+    dict_array: &'a DictionaryArray<T>,\n+    values: StringArray,\n+    keys: PrimitiveArray<T>,\n+}\n+\n+impl<T: ArrowDictionaryKeyType> OrdArray for StringDictionaryArrayAsOrdArray<'_, T> {\n+    fn cmp_value(&self, i: usize, j: usize) -> Ordering {\n+        let keys = &self.keys;\n+\n+        let a: T::Native = keys.value(i);\n+        let b: T::Native = keys.value(j);\n+\n+        let dict = &self.values;\n+\n+        let sa = dict.value(a.to_usize().unwrap());\n+        let sb = dict.value(b.to_usize().unwrap());\n+\n+        sa.cmp(sb)\n+    }\n+}\n+\n+fn string_dict_as_ord_array<'a, T: ArrowDictionaryKeyType>(\n+    array: &'a ArrayRef,\n+) -> Box<dyn OrdArray + 'a>\n+where\n+    T::Native: std::cmp::Ord,\n+{\n+    let dict_array = as_dictionary_array::<T>(array);\n+    let keys = dict_array.keys_array();\n+\n+    let values = &dict_array.values();\n+    let values = StringArray::from(values.data());\n+\n+    Box::new(StringDictionaryArrayAsOrdArray {\n+        dict_array,\n+        values,\n+        keys,\n+    })\n+}\n+\n /// Convert ArrayRef to OrdArray trait object\n-pub fn as_ordarray(values: &ArrayRef) -> Result<&OrdArray> {\n+pub fn as_ordarray<'a>(values: &'a ArrayRef) -> Result<Box<OrdArray + 'a>> {\n     match values.data_type() {\n-        DataType::Boolean => Ok(as_boolean_array(&values)),\n-        DataType::Utf8 => Ok(as_string_array(&values)),\n-        DataType::Null => Ok(as_null_array(&values)),\n-        DataType::Int8 => Ok(as_primitive_array::<Int8Type>(&values)),\n-        DataType::Int16 => Ok(as_primitive_array::<Int16Type>(&values)),\n-        DataType::Int32 => Ok(as_primitive_array::<Int32Type>(&values)),\n-        DataType::Int64 => Ok(as_primitive_array::<Int64Type>(&values)),\n-        DataType::UInt8 => Ok(as_primitive_array::<UInt8Type>(&values)),\n-        DataType::UInt16 => Ok(as_primitive_array::<UInt16Type>(&values)),\n-        DataType::UInt32 => Ok(as_primitive_array::<UInt32Type>(&values)),\n-        DataType::UInt64 => Ok(as_primitive_array::<UInt64Type>(&values)),\n-        DataType::Date32(_) => Ok(as_primitive_array::<Date32Type>(&values)),\n-        DataType::Date64(_) => Ok(as_primitive_array::<Date64Type>(&values)),\n-        DataType::Time32(Second) => Ok(as_primitive_array::<Time32SecondType>(&values)),\n-        DataType::Time32(Millisecond) => {\n-            Ok(as_primitive_array::<Time32MillisecondType>(&values))\n-        }\n-        DataType::Time64(Microsecond) => {\n-            Ok(as_primitive_array::<Time64MicrosecondType>(&values))\n-        }\n-        DataType::Time64(Nanosecond) => {\n-            Ok(as_primitive_array::<Time64NanosecondType>(&values))\n+        //DataType::Boolean => Ok(Box::new(as_boolean_array(&values))),\n\nReview comment:\n       Any particular reason for commenting this one?\n\n##########\nFile path: rust/arrow/src/compute/kernels/sort.rs\n##########\n@@ -428,13 +596,63 @@ mod tests {\n         assert!(output.equals(&expected))\n     }\n \n+    fn test_sort_string_dict_arrays<T: ArrowDictionaryKeyType>(\n\nReview comment:\n       nice :)\n\n##########\nFile path: rust/arrow/src/array/ord.rs\n##########\n@@ -68,65 +80,233 @@ impl OrdArray for NullArray {\n     }\n }\n \n+macro_rules! float_ord_cmp {\n+    ($NAME: ident, $T: ty) => {\n+        #[inline]\n+        fn $NAME(a: $T, b: $T) -> Ordering {\n+            if a < b {\n+                return Ordering::Less;\n+            }\n+            if a > b {\n+                return Ordering::Greater;\n+            }\n+\n+            // convert to bits with canonical pattern for NaN\n+            let a = if a.is_nan() {\n+                <$T>::NAN.to_bits()\n+            } else {\n+                a.to_bits()\n+            };\n+            let b = if b.is_nan() {\n+                <$T>::NAN.to_bits()\n+            } else {\n+                b.to_bits()\n+            };\n+\n+            if a == b {\n+                // Equal or both NaN\n+                Ordering::Equal\n+            } else if a < b {\n+                // (-0.0, 0.0) or (!NaN, NaN)\n+                Ordering::Less\n+            } else {\n+                // (0.0, -0.0) or (NaN, !NaN)\n+                Ordering::Greater\n+            }\n+        }\n+    };\n+}\n+\n+float_ord_cmp!(cmp_f64, f64);\n+float_ord_cmp!(cmp_f32, f32);\n+\n+#[repr(transparent)]\n+struct Float64ArrayAsOrdArray<'a>(&'a Float64Array);\n+#[repr(transparent)]\n+struct Float32ArrayAsOrdArray<'a>(&'a Float32Array);\n+\n+impl OrdArray for Float64ArrayAsOrdArray<'_> {\n+    fn cmp_value(&self, i: usize, j: usize) -> Ordering {\n+        let a: f64 = self.0.value(i);\n+        let b: f64 = self.0.value(j);\n+\n+        cmp_f64(a, b)\n+    }\n+}\n+\n+impl OrdArray for Float32ArrayAsOrdArray<'_> {\n+    fn cmp_value(&self, i: usize, j: usize) -> Ordering {\n+        let a: f32 = self.0.value(i);\n+        let b: f32 = self.0.value(j);\n+\n+        cmp_f32(a, b)\n+    }\n+}\n+\n+fn float32_as_ord_array<'a>(array: &'a ArrayRef) -> Box<dyn OrdArray + 'a> {\n+    let float_array: &Float32Array = as_primitive_array::<Float32Type>(array);\n+    Box::new(Float32ArrayAsOrdArray(float_array))\n+}\n+\n+fn float64_as_ord_array<'a>(array: &'a ArrayRef) -> Box<dyn OrdArray + 'a> {\n+    let float_array: &Float64Array = as_primitive_array::<Float64Type>(array);\n+    Box::new(Float64ArrayAsOrdArray(float_array))\n+}\n+\n+struct StringDictionaryArrayAsOrdArray<'a, T: ArrowDictionaryKeyType> {\n+    dict_array: &'a DictionaryArray<T>,\n+    values: StringArray,\n+    keys: PrimitiveArray<T>,\n+}\n+\n+impl<T: ArrowDictionaryKeyType> OrdArray for StringDictionaryArrayAsOrdArray<'_, T> {\n+    fn cmp_value(&self, i: usize, j: usize) -> Ordering {\n+        let keys = &self.keys;\n+\n+        let a: T::Native = keys.value(i);\n+        let b: T::Native = keys.value(j);\n+\n+        let dict = &self.values;\n+\n+        let sa = dict.value(a.to_usize().unwrap());\n\nReview comment:\n       what does `sa` stands for? `string_a`?\n\n##########\nFile path: rust/datafusion/src/physical_plan/sort.rs\n##########\n@@ -223,4 +223,51 @@ mod tests {\n \n         Ok(())\n     }\n+\n+    #[test]\n+    fn test_lex_sort_by_float() -> Result<()> {\n+        let schema = test::aggr_test_schema();\n+        let partitions = 4;\n+        let path = test::create_partitioned_csv(\"aggregate_test_100.csv\", partitions)?;\n+        let csv =\n+            CsvExec::try_new(&path, CsvReadOptions::new().schema(&schema), None, 1024)?;\n+\n+        let sort_exec = Arc::new(SortExec::try_new(\n+            vec![\n+                // c11 float32 column\n+                PhysicalSortExpr {\n+                    expr: col(\"c11\"),\n+                    options: SortOptions::default(),\n+                },\n+                // c12 float64 column\n+                PhysicalSortExpr {\n+                    expr: col(\"c12\"),\n+                    options: SortOptions::default(),\n+                },\n+            ],\n+            Arc::new(MergeExec::new(Arc::new(csv), 2)),\n+            2,\n+        )?);\n+\n+        assert_eq!(DataType::Float32, *sort_exec.schema().field(10).data_type());\n+        assert_eq!(DataType::Float64, *sort_exec.schema().field(11).data_type());\n+\n+        let result: Vec<RecordBatch> = test::execute(sort_exec)?;\n+        assert_eq!(result.len(), 1);\n+\n+        let columns = result[0].columns();\n+\n+        assert_eq!(DataType::Float32, *columns[10].data_type());\n+        assert_eq!(DataType::Float64, *columns[11].data_type());\n+\n+        let c11 = as_primitive_array::<Float32Type>(&columns[10]);\n+        assert_eq!(c11.value(0), 0.028003037_f32);\n\nReview comment:\n       it is difficult to tell why this value. Wouldn't it be easier to use in-memory data instead of `aggregate_test_100.csv` to craft the values as we please in the test, and thus make it easier to verify our assumptions?\n\n##########\nFile path: rust/arrow/src/compute/kernels/sort.rs\n##########\n@@ -148,58 +206,165 @@ impl Default for SortOptions {\n     }\n }\n \n-/// Sort primitive values, excluding floats\n+/// Sort primitive values\n fn sort_primitive<T>(\n     values: &ArrayRef,\n-    value_indices: Vec<usize>,\n+    value_indices: Vec<u32>,\n     null_indices: Vec<u32>,\n+    nan_indices: Vec<u32>,\n     options: &SortOptions,\n ) -> Result<UInt32Array>\n where\n     T: ArrowPrimitiveType,\n     T::Native: std::cmp::PartialOrd,\n {\n     let values = as_primitive_array::<T>(values);\n+    sort_primitive_typed(values, value_indices, null_indices, nan_indices, options)\n+}\n+\n+fn sort_primitive_typed<T>(\n\nReview comment:\n       IMO we should document this behavior (order of `nan null value`).\r\n   \r\n   I.e. the description in issue ARROW-9895 should be encapsulated in the code base, both in-line comments for the developer, documentation strings for the users in the logical plan, physical plan and kernel, and potentially also in the README.\r\n   \n\n##########\nFile path: rust/arrow/src/compute/kernels/sort.rs\n##########\n@@ -148,58 +206,165 @@ impl Default for SortOptions {\n     }\n }\n \n-/// Sort primitive values, excluding floats\n+/// Sort primitive values\n fn sort_primitive<T>(\n     values: &ArrayRef,\n-    value_indices: Vec<usize>,\n+    value_indices: Vec<u32>,\n     null_indices: Vec<u32>,\n+    nan_indices: Vec<u32>,\n     options: &SortOptions,\n ) -> Result<UInt32Array>\n where\n     T: ArrowPrimitiveType,\n     T::Native: std::cmp::PartialOrd,\n {\n     let values = as_primitive_array::<T>(values);\n+    sort_primitive_typed(values, value_indices, null_indices, nan_indices, options)\n+}\n+\n+fn sort_primitive_typed<T>(\n+    values: &PrimitiveArray<T>,\n+    value_indices: Vec<u32>,\n+    null_indices: Vec<u32>,\n+    nan_indices: Vec<u32>,\n+    options: &SortOptions,\n+) -> Result<UInt32Array>\n+where\n+    T: ArrowPrimitiveType,\n+    T::Native: std::cmp::PartialOrd,\n+{\n     // create tuples that are used for sorting\n     let mut valids = value_indices\n         .into_iter()\n-        .map(|index| (index as u32, values.value(index)))\n+        .map(|index| (index, values.value(index as usize)))\n         .collect::<Vec<(u32, T::Native)>>();\n+\n+    let valids_len = valids.len();\n+\n     let mut nulls = null_indices;\n+    let mut nans = nan_indices;\n+\n     if !options.descending {\n-        valids.sort_by(|a, b| a.1.partial_cmp(&b.1).unwrap_or_else(|| Ordering::Greater));\n+        valids.sort_by(|a, b| a.1.partial_cmp(&b.1).expect(\"unexpected NaN\"));\n     } else {\n-        valids.sort_by(|a, b| {\n-            a.1.partial_cmp(&b.1)\n-                .unwrap_or_else(|| Ordering::Greater)\n-                .reverse()\n-        });\n+        valids.sort_by(|a, b| a.1.partial_cmp(&b.1).expect(\"unexpected NaN\").reverse());\n+        // reverse to keep a stable ordering\n+        nans.reverse();\n         nulls.reverse();\n     }\n-    // collect the order of valid tuples\n-    let mut valid_indices: Vec<u32> = valids.iter().map(|tuple| tuple.0).collect();\n \n-    if options.nulls_first {\n-        nulls.append(&mut valid_indices);\n-        return Ok(UInt32Array::from(nulls));\n+    // collect results directly into a buffer instead of a vec to avoid another aligned allocation\n+    let mut result = MutableBuffer::new(values.len() * std::mem::size_of::<u32>());\n+    // sets len to capacity so we can access the whole buffer as a typed slice\n+    result.resize(values.len() * std::mem::size_of::<u32>())?;\n+    {\n+        let append_valids = move |dst_slice: &mut [u32]| {\n+            debug_assert_eq!(dst_slice.len(), valids_len);\n+            dst_slice\n+                .iter_mut()\n+                .zip(valids.into_iter())\n+                .for_each(|(dst, src)| *dst = src.0)\n+        };\n+\n+        let result_slice: &mut [u32] = result.typed_data_mut();\n+\n+        debug_assert_eq!(result_slice.len(), nulls.len() + nans.len() + valids_len);\n+\n+        if options.nulls_first {\n\nReview comment:\n       I read this logic carefully and I agree with it. My only comment here is to place some comments. For example:\r\n   \r\n   ```\r\n          if options.nulls_first {\r\n               // nulls first\r\n               result_slice[0..nulls.len()].copy_from_slice(&nulls);\r\n               if !options.descending {\r\n                   // valids next\r\n                   append_valids(&mut result_slice[nulls.len()..nulls.len() + valids_len]);\r\n                   // nans at the end\r\n                   result_slice[nulls.len() + valids_len..].copy_from_slice(nans.as_slice());\r\n               } else {\r\n                   // nans next\r\n                   result_slice[nulls.len()..nulls.len() + nans.len()]\r\n                       .copy_from_slice(nans.as_slice());\r\n                   // valids at the end\r\n                   append_valids(&mut result_slice[nulls.len() + nans.len()..]);\r\n               }\r\n           } else {\r\n               if !options.descending {\r\n                   // valids first\r\n                   append_valids(&mut result_slice[0..valids_len]);\r\n                   // nans next\r\n                   result_slice[valids_len..valids_len + nans.len()]\r\n                       .copy_from_slice(nans.as_slice());\r\n               } else {\r\n                   // nans first\r\n                   result_slice[0..nans.len()].copy_from_slice(nans.as_slice());\r\n                   // valids next\r\n                   append_valids(&mut result_slice[nans.len()..nans.len() + valids_len]);\r\n               }\r\n               // nulls at the end\r\n               result_slice[valids_len + nans.len()..].copy_from_slice(nulls.as_slice())\r\n           }\r\n   ```\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-05T03:24:24.546+0000",
                    "updated": "2020-09-05T03:24:24.546+0000",
                    "started": "2020-09-05T03:24:24.546+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "479296",
                    "issueId": "13325563"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13325563/worklog/479335",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jhorstmann commented on a change in pull request #8092:\nURL: https://github.com/apache/arrow/pull/8092#discussion_r483965152\n\n\n\n##########\nFile path: rust/arrow/src/array/ord.rs\n##########\n@@ -68,65 +80,233 @@ impl OrdArray for NullArray {\n     }\n }\n \n+macro_rules! float_ord_cmp {\n+    ($NAME: ident, $T: ty) => {\n+        #[inline]\n+        fn $NAME(a: $T, b: $T) -> Ordering {\n+            if a < b {\n+                return Ordering::Less;\n+            }\n+            if a > b {\n+                return Ordering::Greater;\n+            }\n+\n+            // convert to bits with canonical pattern for NaN\n+            let a = if a.is_nan() {\n+                <$T>::NAN.to_bits()\n+            } else {\n+                a.to_bits()\n+            };\n+            let b = if b.is_nan() {\n+                <$T>::NAN.to_bits()\n+            } else {\n+                b.to_bits()\n+            };\n+\n+            if a == b {\n+                // Equal or both NaN\n+                Ordering::Equal\n+            } else if a < b {\n+                // (-0.0, 0.0) or (!NaN, NaN)\n+                Ordering::Less\n+            } else {\n+                // (0.0, -0.0) or (NaN, !NaN)\n+                Ordering::Greater\n+            }\n+        }\n+    };\n+}\n+\n+float_ord_cmp!(cmp_f64, f64);\n+float_ord_cmp!(cmp_f32, f32);\n+\n+#[repr(transparent)]\n+struct Float64ArrayAsOrdArray<'a>(&'a Float64Array);\n+#[repr(transparent)]\n+struct Float32ArrayAsOrdArray<'a>(&'a Float32Array);\n+\n+impl OrdArray for Float64ArrayAsOrdArray<'_> {\n+    fn cmp_value(&self, i: usize, j: usize) -> Ordering {\n+        let a: f64 = self.0.value(i);\n+        let b: f64 = self.0.value(j);\n+\n+        cmp_f64(a, b)\n+    }\n+}\n+\n+impl OrdArray for Float32ArrayAsOrdArray<'_> {\n+    fn cmp_value(&self, i: usize, j: usize) -> Ordering {\n+        let a: f32 = self.0.value(i);\n+        let b: f32 = self.0.value(j);\n+\n+        cmp_f32(a, b)\n+    }\n+}\n+\n+fn float32_as_ord_array<'a>(array: &'a ArrayRef) -> Box<dyn OrdArray + 'a> {\n+    let float_array: &Float32Array = as_primitive_array::<Float32Type>(array);\n+    Box::new(Float32ArrayAsOrdArray(float_array))\n+}\n+\n+fn float64_as_ord_array<'a>(array: &'a ArrayRef) -> Box<dyn OrdArray + 'a> {\n+    let float_array: &Float64Array = as_primitive_array::<Float64Type>(array);\n+    Box::new(Float64ArrayAsOrdArray(float_array))\n+}\n+\n+struct StringDictionaryArrayAsOrdArray<'a, T: ArrowDictionaryKeyType> {\n+    dict_array: &'a DictionaryArray<T>,\n+    values: StringArray,\n+    keys: PrimitiveArray<T>,\n+}\n+\n+impl<T: ArrowDictionaryKeyType> OrdArray for StringDictionaryArrayAsOrdArray<'_, T> {\n+    fn cmp_value(&self, i: usize, j: usize) -> Ordering {\n+        let keys = &self.keys;\n+\n+        let a: T::Native = keys.value(i);\n+        let b: T::Native = keys.value(j);\n+\n+        let dict = &self.values;\n+\n+        let sa = dict.value(a.to_usize().unwrap());\n+        let sb = dict.value(b.to_usize().unwrap());\n+\n+        sa.cmp(sb)\n+    }\n+}\n+\n+fn string_dict_as_ord_array<'a, T: ArrowDictionaryKeyType>(\n+    array: &'a ArrayRef,\n+) -> Box<dyn OrdArray + 'a>\n+where\n+    T::Native: std::cmp::Ord,\n+{\n+    let dict_array = as_dictionary_array::<T>(array);\n+    let keys = dict_array.keys_array();\n+\n+    let values = &dict_array.values();\n+    let values = StringArray::from(values.data());\n+\n+    Box::new(StringDictionaryArrayAsOrdArray {\n+        dict_array,\n+        values,\n+        keys,\n+    })\n+}\n+\n /// Convert ArrayRef to OrdArray trait object\n-pub fn as_ordarray(values: &ArrayRef) -> Result<&OrdArray> {\n+pub fn as_ordarray<'a>(values: &'a ArrayRef) -> Result<Box<OrdArray + 'a>> {\n     match values.data_type() {\n-        DataType::Boolean => Ok(as_boolean_array(&values)),\n-        DataType::Utf8 => Ok(as_string_array(&values)),\n-        DataType::Null => Ok(as_null_array(&values)),\n-        DataType::Int8 => Ok(as_primitive_array::<Int8Type>(&values)),\n-        DataType::Int16 => Ok(as_primitive_array::<Int16Type>(&values)),\n-        DataType::Int32 => Ok(as_primitive_array::<Int32Type>(&values)),\n-        DataType::Int64 => Ok(as_primitive_array::<Int64Type>(&values)),\n-        DataType::UInt8 => Ok(as_primitive_array::<UInt8Type>(&values)),\n-        DataType::UInt16 => Ok(as_primitive_array::<UInt16Type>(&values)),\n-        DataType::UInt32 => Ok(as_primitive_array::<UInt32Type>(&values)),\n-        DataType::UInt64 => Ok(as_primitive_array::<UInt64Type>(&values)),\n-        DataType::Date32(_) => Ok(as_primitive_array::<Date32Type>(&values)),\n-        DataType::Date64(_) => Ok(as_primitive_array::<Date64Type>(&values)),\n-        DataType::Time32(Second) => Ok(as_primitive_array::<Time32SecondType>(&values)),\n-        DataType::Time32(Millisecond) => {\n-            Ok(as_primitive_array::<Time32MillisecondType>(&values))\n-        }\n-        DataType::Time64(Microsecond) => {\n-            Ok(as_primitive_array::<Time64MicrosecondType>(&values))\n-        }\n-        DataType::Time64(Nanosecond) => {\n-            Ok(as_primitive_array::<Time64NanosecondType>(&values))\n+        //DataType::Boolean => Ok(Box::new(as_boolean_array(&values))),\n\nReview comment:\n       Uh, thanks for noticing. At one point a had commented out the whole block to get the signature and borrows right\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-05T16:19:54.817+0000",
                    "updated": "2020-09-05T16:19:54.817+0000",
                    "started": "2020-09-05T16:19:54.816+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "479335",
                    "issueId": "13325563"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13325563/worklog/479336",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jhorstmann commented on a change in pull request #8092:\nURL: https://github.com/apache/arrow/pull/8092#discussion_r483965314\n\n\n\n##########\nFile path: rust/arrow/src/compute/kernels/sort.rs\n##########\n@@ -148,58 +206,165 @@ impl Default for SortOptions {\n     }\n }\n \n-/// Sort primitive values, excluding floats\n+/// Sort primitive values\n fn sort_primitive<T>(\n     values: &ArrayRef,\n-    value_indices: Vec<usize>,\n+    value_indices: Vec<u32>,\n     null_indices: Vec<u32>,\n+    nan_indices: Vec<u32>,\n     options: &SortOptions,\n ) -> Result<UInt32Array>\n where\n     T: ArrowPrimitiveType,\n     T::Native: std::cmp::PartialOrd,\n {\n     let values = as_primitive_array::<T>(values);\n+    sort_primitive_typed(values, value_indices, null_indices, nan_indices, options)\n+}\n+\n+fn sort_primitive_typed<T>(\n+    values: &PrimitiveArray<T>,\n+    value_indices: Vec<u32>,\n+    null_indices: Vec<u32>,\n+    nan_indices: Vec<u32>,\n+    options: &SortOptions,\n+) -> Result<UInt32Array>\n+where\n+    T: ArrowPrimitiveType,\n+    T::Native: std::cmp::PartialOrd,\n+{\n     // create tuples that are used for sorting\n     let mut valids = value_indices\n         .into_iter()\n-        .map(|index| (index as u32, values.value(index)))\n+        .map(|index| (index, values.value(index as usize)))\n         .collect::<Vec<(u32, T::Native)>>();\n+\n+    let valids_len = valids.len();\n+\n     let mut nulls = null_indices;\n+    let mut nans = nan_indices;\n+\n     if !options.descending {\n-        valids.sort_by(|a, b| a.1.partial_cmp(&b.1).unwrap_or_else(|| Ordering::Greater));\n+        valids.sort_by(|a, b| a.1.partial_cmp(&b.1).expect(\"unexpected NaN\"));\n     } else {\n-        valids.sort_by(|a, b| {\n-            a.1.partial_cmp(&b.1)\n-                .unwrap_or_else(|| Ordering::Greater)\n-                .reverse()\n-        });\n+        valids.sort_by(|a, b| a.1.partial_cmp(&b.1).expect(\"unexpected NaN\").reverse());\n+        // reverse to keep a stable ordering\n+        nans.reverse();\n         nulls.reverse();\n     }\n-    // collect the order of valid tuples\n-    let mut valid_indices: Vec<u32> = valids.iter().map(|tuple| tuple.0).collect();\n \n-    if options.nulls_first {\n-        nulls.append(&mut valid_indices);\n-        return Ok(UInt32Array::from(nulls));\n+    // collect results directly into a buffer instead of a vec to avoid another aligned allocation\n+    let mut result = MutableBuffer::new(values.len() * std::mem::size_of::<u32>());\n+    // sets len to capacity so we can access the whole buffer as a typed slice\n+    result.resize(values.len() * std::mem::size_of::<u32>())?;\n+    {\n+        let append_valids = move |dst_slice: &mut [u32]| {\n+            debug_assert_eq!(dst_slice.len(), valids_len);\n+            dst_slice\n+                .iter_mut()\n+                .zip(valids.into_iter())\n+                .for_each(|(dst, src)| *dst = src.0)\n+        };\n+\n+        let result_slice: &mut [u32] = result.typed_data_mut();\n+\n+        debug_assert_eq!(result_slice.len(), nulls.len() + nans.len() + valids_len);\n+\n+        if options.nulls_first {\n\nReview comment:\n       I refactored this a bit to extract the similar logic with `if descending ... else` and also added comments there\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-05T16:21:59.524+0000",
                    "updated": "2020-09-05T16:21:59.524+0000",
                    "started": "2020-09-05T16:21:59.524+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "479336",
                    "issueId": "13325563"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13325563/worklog/479337",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jhorstmann commented on a change in pull request #8092:\nURL: https://github.com/apache/arrow/pull/8092#discussion_r483965365\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/sort.rs\n##########\n@@ -223,4 +223,51 @@ mod tests {\n \n         Ok(())\n     }\n+\n+    #[test]\n+    fn test_lex_sort_by_float() -> Result<()> {\n+        let schema = test::aggr_test_schema();\n+        let partitions = 4;\n+        let path = test::create_partitioned_csv(\"aggregate_test_100.csv\", partitions)?;\n+        let csv =\n+            CsvExec::try_new(&path, CsvReadOptions::new().schema(&schema), None, 1024)?;\n+\n+        let sort_exec = Arc::new(SortExec::try_new(\n+            vec![\n+                // c11 float32 column\n+                PhysicalSortExpr {\n+                    expr: col(\"c11\"),\n+                    options: SortOptions::default(),\n+                },\n+                // c12 float64 column\n+                PhysicalSortExpr {\n+                    expr: col(\"c12\"),\n+                    options: SortOptions::default(),\n+                },\n+            ],\n+            Arc::new(MergeExec::new(Arc::new(csv), 2)),\n+            2,\n+        )?);\n+\n+        assert_eq!(DataType::Float32, *sort_exec.schema().field(10).data_type());\n+        assert_eq!(DataType::Float64, *sort_exec.schema().field(11).data_type());\n+\n+        let result: Vec<RecordBatch> = test::execute(sort_exec)?;\n+        assert_eq!(result.len(), 1);\n+\n+        let columns = result[0].columns();\n+\n+        assert_eq!(DataType::Float32, *columns[10].data_type());\n+        assert_eq!(DataType::Float64, *columns[11].data_type());\n+\n+        let c11 = as_primitive_array::<Float32Type>(&columns[10]);\n+        assert_eq!(c11.value(0), 0.028003037_f32);\n\nReview comment:\n       Changed to an in-memory test which also tests the null and nan handling a little\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-05T16:22:52.537+0000",
                    "updated": "2020-09-05T16:22:52.537+0000",
                    "started": "2020-09-05T16:22:52.537+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "479337",
                    "issueId": "13325563"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13325563/worklog/479340",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jhorstmann commented on pull request #8092:\nURL: https://github.com/apache/arrow/pull/8092#issuecomment-687633205\n\n\n   Thanks a lot for the review @jorgecarleitao , I think I addressed nearly all of your comments. The logical and physical plan docs currently don't contain much documentation regarding their implementation details.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-05T16:34:08.161+0000",
                    "updated": "2020-09-05T16:34:08.161+0000",
                    "started": "2020-09-05T16:34:08.160+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "479340",
                    "issueId": "13325563"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13325563/worklog/479461",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paddyhoran commented on pull request #8092:\nURL: https://github.com/apache/arrow/pull/8092#issuecomment-687999249\n\n\n   @jhorstmann this look great but needs a rebase now.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-07T03:08:36.312+0000",
                    "updated": "2020-09-07T03:08:36.312+0000",
                    "started": "2020-09-07T03:08:36.311+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "479461",
                    "issueId": "13325563"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13325563/worklog/479784",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #8092:\nURL: https://github.com/apache/arrow/pull/8092#issuecomment-688500929\n\n\n   Sorry @jhorstmann but could you rebase against master rather than merge from master. I see unrelated changes in the last commit in this PR now.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-07T20:29:55.811+0000",
                    "updated": "2020-09-07T20:29:55.811+0000",
                    "started": "2020-09-07T20:29:55.811+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "479784",
                    "issueId": "13325563"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13325563/worklog/479798",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jhorstmann commented on pull request #8092:\nURL: https://github.com/apache/arrow/pull/8092#issuecomment-688515093\n\n\n   @paddyhoran @andygrove Thanks, I'm not sure what happened in that last merge. I rebased and squashed it into one commit now.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-07T21:26:08.066+0000",
                    "updated": "2020-09-07T21:26:08.066+0000",
                    "started": "2020-09-07T21:26:08.065+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "479798",
                    "issueId": "13325563"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13325563/worklog/480545",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove closed pull request #8092:\nURL: https://github.com/apache/arrow/pull/8092\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-09T00:58:45.221+0000",
                    "updated": "2020-09-09T00:58:45.221+0000",
                    "started": "2020-09-09T00:58:45.221+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "480545",
                    "issueId": "13325563"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 8400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@147b9f0d[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1ec4ca20[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3033ff17[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@81eb6fb[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@172f772f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@2b4c2e3c[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4a8a705[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@79fc6005[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1506e61a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@5f710748[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1ea0032c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@446a4b5[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 8400,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Sep 09 00:58:40 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-09-09T00:58:40.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-9895/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2020-09-01T17:13:53.000+0000",
        "updated": "2020-09-09T00:58:46.000+0000",
        "timeoriginalestimate": null,
        "description": "Followup from my mailing list post:\r\n{quote}1. When sorting by multiple columns (lexsort_to_indices) the Float32\r\nand Float64 data types are not supported because the implementation\r\nrelies on the OrdArray trait. This trait is not implemented because\r\nf64/f32 only implements PartialOrd. The sort function for a single\r\ncolumn (sort_to_indices) has some special logic which looks like it\r\nwants to treats NaN the same as null, but I'm also not convinced this\r\nis the correct way. For example postgres does the following\r\n(https://www.postgresql.org/docs/12/datatype-numeric.html#DATATYPE-FLOAT)\r\n\r\n\"In order to allow floating-point values to be sorted and used in\r\ntree-based indexes, PostgreSQL treats NaN values as equal, and greater\r\nthan all non-NaN values.\"\r\n\r\nI propose to do the same in an OrdArray impl for\r\nFloat64Array/Float32Array and then simplifying the sort_to_indices\r\nfunction accordingly.\r\n\r\n2. Sorting for dictionary encoded strings. The problem here is that\r\nDictionaryArray does not have a generic parameter for the value type\r\nso it is not currently possible to only implement OrdArray for string\r\ndictionaries. Again for the single column case, the value data type\r\ncould be checked and a sort could be implemented by looking up each\r\nkey in the dictionary. An optimization could be to check the is_sorted\r\nflag of DictionaryArray (which does not seem to be used really) and\r\nthen directly sort by the keys. For the general case I see roughly to\r\noptions\r\n\r\n- Somehow implement an OrdArray view of the dictionary array. This\r\ncould be easier if OrdArray did not extend Array but was a completely\r\nseparate trait.\r\n- Change the lexicographic sort impl to not use dynamic calls but\r\ninstead sort multiple times. So for a query `ORDER BY a, b`, first\r\nsort by b and afterwards sort again by a. With a stable sort\r\nimplementation this should result in the same ordering. I'm curious\r\nabout the performance, it could avoid dynamic method calls for each\r\ncomparison, but it would process the indices vector multiple times.\r\n{quote}\r\n\r\nMy plan is to open a draft PR with the following changes:\r\n\r\n - {{sort_to_indices}} further splits up float64/float32 inputs into nulls/non-nan/nan, sorts the non-nan values and then concats those 3 slices according to the sort options. Nans are distinct from null and sort greater than any other valid value\r\n- implement a sort method for dictionary arrays with string values. this kernel checks the {{is_ordered}} flag and sorts just by the keys if it is set, it will look up the string values otherwise\r\n- for the lexical sort use case the above kernel are not used, instead the {{OrdArray}} trait is used. To make that more flexible and allow wrapping arrays with differend ordering behavior I will make it no longer extend {{Array}} and instead only contain the {{cmp_value}} method\r\n- string dictionary sorting can then be implemented with a wrapper struct {{StringDictionaryArrayAsOrdArray}} which implements {{OrdArray}}\r\n- NaN aware sorting of floats can also be implemented with a wrapper struct and trait implementation",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2h 20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 8400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[RUST] Improve sort kernels",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13325563/comment/17190982",
                    "id": "17190982",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorgecarleitao",
                        "name": "jorgecarleitao",
                        "key": "jorgecarleitao",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=jorgecarleitao&avatarId=43827",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jorgecarleitao&avatarId=43827",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jorgecarleitao&avatarId=43827",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jorgecarleitao&avatarId=43827"
                        },
                        "displayName": "Jorge Leit\u00e3o",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "[~jhorstmann], I assigned this to you and made the issue to in progress. I hope that is fine for you.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorgecarleitao",
                        "name": "jorgecarleitao",
                        "key": "jorgecarleitao",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=jorgecarleitao&avatarId=43827",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jorgecarleitao&avatarId=43827",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jorgecarleitao&avatarId=43827",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jorgecarleitao&avatarId=43827"
                        },
                        "displayName": "Jorge Leit\u00e3o",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2020-09-05T05:20:53.261+0000",
                    "updated": "2020-09-05T05:20:53.261+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13325563/comment/17192551",
                    "id": "17192551",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "body": "Issue resolved by pull request 8092\n[https://github.com/apache/arrow/pull/8092]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "created": "2020-09-09T00:58:40.749+0000",
                    "updated": "2020-09-09T00:58:40.749+0000"
                }
            ],
            "maxResults": 2,
            "total": 2,
            "startAt": 0
        },
        "customfield_12311820": "0|z0i9dc:",
        "customfield_12314139": null
    }
}