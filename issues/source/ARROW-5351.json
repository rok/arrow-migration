{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13233820",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13233820",
    "key": "ARROW-5351",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12345978",
                "id": "12345978",
                "description": "",
                "name": "0.15.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-10-05"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=nevi_me",
            "name": "nevi_me",
            "key": "nevi_me",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=nevi_me&avatarId=24271",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nevi_me&avatarId=24271",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nevi_me&avatarId=24271",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nevi_me&avatarId=24271"
            },
            "displayName": "Neville Dipale",
            "active": true,
            "timeZone": "Africa/Johannesburg"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333773",
                "id": "12333773",
                "name": "Rust"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=nevi_me",
            "name": "nevi_me",
            "key": "nevi_me",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=nevi_me&avatarId=24271",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nevi_me&avatarId=24271",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nevi_me&avatarId=24271",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nevi_me&avatarId=24271"
            },
            "displayName": "Neville Dipale",
            "active": true,
            "timeZone": "Africa/Johannesburg"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=nevi_me",
            "name": "nevi_me",
            "key": "nevi_me",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=nevi_me&avatarId=24271",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nevi_me&avatarId=24271",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nevi_me&avatarId=24271",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nevi_me&avatarId=24271"
            },
            "displayName": "Neville Dipale",
            "active": true,
            "timeZone": "Africa/Johannesburg"
        },
        "aggregateprogress": {
            "progress": 33000,
            "total": 33000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 33000,
            "total": 33000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-5351/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 56,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13233820/worklog/243672",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on pull request #4330: ARROW-5351: [Rust] Take kernel\nURL: https://github.com/apache/arrow/pull/4330\n \n \n   https://issues.apache.org/jira/browse/ARROW-5351\r\n   \r\n   Implement `take` kernel, initial draft that hasn't been benchmarked, and is expected to be rough around the edges.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-16T21:50:39.984+0000",
                    "updated": "2019-05-16T21:50:39.984+0000",
                    "started": "2019-05-16T21:50:39.983+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "243672",
                    "issueId": "13233820"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13233820/worklog/243683",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on issue #4330: ARROW-5351: [Rust] Take kernel\nURL: https://github.com/apache/arrow/pull/4330#issuecomment-493249578\n \n \n   @sunchao I've used ArrayData comparison to test, I had expected this test to fail because of this.\r\n   \r\n   I use Windows, so it looks like ArrayData sometimes fails on Windows when comparing 2 similar arrays by their data. The reason being that null/invalid array slots return non-deterministic data.\r\n   \r\n   I'll attach an example tomorrow when I continue with this PR.\r\n   \r\n   I'm mentioning this because you suggested that we avoid using string/debug for comparison of arrays\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-16T22:11:52.097+0000",
                    "updated": "2019-05-16T22:11:52.097+0000",
                    "started": "2019-05-16T22:11:52.096+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "243683",
                    "issueId": "13233820"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13233820/worklog/243718",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sunchao commented on issue #4330: ARROW-5351: [Rust] Take kernel\nURL: https://github.com/apache/arrow/pull/4330#issuecomment-493260076\n \n \n   Yes, more efforts are required to improve equality check for `ArrayData`, `Array` and others. Currently they just use the derived equality which is not good. We should find a way to ignore the null/invalid data when doing the equality check.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-16T23:02:42.674+0000",
                    "updated": "2019-05-16T23:02:42.674+0000",
                    "started": "2019-05-16T23:02:42.673+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "243718",
                    "issueId": "13233820"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13233820/worklog/247533",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on issue #4330: ARROW-5351: [Rust] Take kernel\nURL: https://github.com/apache/arrow/pull/4330#issuecomment-495298883\n \n \n   @andygrove @sunchao @paddyhoran I have a few decisions to make, and would appreciate some guidance/opinions.\r\n   \r\n   I'm mostly done with this, but need to optimise bounds checking and implement options (such as whether to even check for bounds).\r\n   \r\n   *Question:* pandas, numpy, and the C++ version (cc @bkietz) have the option of supplying negative indices. Is this something that we'd want in Rust? If so, I'll change the function's `index` parameter  to `Int32Array` from the current unsigned one.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-23T16:52:25.901+0000",
                    "updated": "2019-05-23T16:52:25.901+0000",
                    "started": "2019-05-23T16:52:25.901+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "247533",
                    "issueId": "13233820"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13233820/worklog/247837",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sunchao commented on issue #4330: ARROW-5351: [Rust] Take kernel\nURL: https://github.com/apache/arrow/pull/4330#issuecomment-495449473\n \n \n   What does a negative index mean? can you show some code examples where this is applied?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-24T02:24:42.684+0000",
                    "updated": "2019-05-24T02:24:42.684+0000",
                    "started": "2019-05-24T02:24:42.683+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "247837",
                    "issueId": "13233820"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13233820/worklog/247862",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on issue #4330: ARROW-5351: [Rust] Take kernel\nURL: https://github.com/apache/arrow/pull/4330#issuecomment-495463572\n \n \n   @sunchao here's a good brief reference from Wes https://issues.apache.org/jira/browse/ARROW-772?focusedCommentId=16340235&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-16340235\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-24T03:56:09.047+0000",
                    "updated": "2019-05-24T03:56:09.047+0000",
                    "started": "2019-05-24T03:56:09.046+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "247862",
                    "issueId": "13233820"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13233820/worklog/248020",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on issue #4330: ARROW-5351: [Rust] Take kernel\nURL: https://github.com/apache/arrow/pull/4330#issuecomment-495622891\n \n \n   It's worth noting that out of bounds and negative indices are currently just an error in C++\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-24T13:16:08.091+0000",
                    "updated": "2019-05-24T13:16:08.091+0000",
                    "started": "2019-05-24T13:16:08.090+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "248020",
                    "issueId": "13233820"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13233820/worklog/248034",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on issue #4330: ARROW-5351: [Rust] Take kernel\nURL: https://github.com/apache/arrow/pull/4330#issuecomment-495635262\n \n \n   Thanks @bkietz, I noticed that there's open JIRAs for them. I wanted to get them out of the way earlier so we can stabilise the `take` signature.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-24T13:45:44.011+0000",
                    "updated": "2019-05-24T13:45:44.011+0000",
                    "started": "2019-05-24T13:45:44.010+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "248034",
                    "issueId": "13233820"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13233820/worklog/252846",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on issue #4330: ARROW-5351: [Rust] Take kernel\nURL: https://github.com/apache/arrow/pull/4330#issuecomment-498048746\n \n \n   I've done all I can here.\r\n   \r\n   I noticed that if I have an array with 6 values, `array.is_null(6)` and `array.is_null(7)` won't panic because the array length's within a multiple of 8; so the 7th and 8th values are returned as null in the buffer. I don't know if this is an issue, and if we should document this behaviour.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-02T17:11:16.186+0000",
                    "updated": "2019-06-02T17:11:16.186+0000",
                    "started": "2019-06-02T17:11:16.185+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "252846",
                    "issueId": "13233820"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13233820/worklog/258858",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #4330: ARROW-5351: [Rust] Take kernel\nURL: https://github.com/apache/arrow/pull/4330#issuecomment-501340819\n \n \n   @sunchao can you review? It seems then #4331 can be finished after this is merged\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-12T16:01:51.659+0000",
                    "updated": "2019-06-12T16:01:51.659+0000",
                    "started": "2019-06-12T16:01:51.658+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "258858",
                    "issueId": "13233820"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13233820/worklog/258936",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sunchao commented on pull request #4330: ARROW-5351: [Rust] Take kernel\nURL: https://github.com/apache/arrow/pull/4330#discussion_r293013056\n \n \n\n ##########\n File path: rust/arrow/src/compute/kernels/take.rs\n ##########\n @@ -0,0 +1,519 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Defines take kernel for `ArrayRef`\n+\n+use std::sync::Arc;\n+\n+use crate::array::*;\n+use crate::array_data::ArrayData;\n+use crate::buffer::Buffer;\n+use crate::builder::*;\n+use crate::compute::util::take_index_from_list;\n+use crate::datatypes::*;\n+use crate::error::{ArrowError, Result};\n+\n+/// Take elements from `ArrayRef` by supplying an array of indices.\n+///\n+/// Supports:\n+///  * null indices, returning a null value for the index\n+///  * checking for overflowing indices\n+pub fn take(\n+    array: &ArrayRef,\n+    index: &UInt32Array,\n+    options: Option<&TakeOptions>,\n+) -> Result<ArrayRef> {\n+    use TimeUnit::*;\n \n Review comment:\n   Why use import here instead of putting it on the top-level?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-12T17:37:56.165+0000",
                    "updated": "2019-06-12T17:37:56.165+0000",
                    "started": "2019-06-12T17:37:56.164+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "258936",
                    "issueId": "13233820"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13233820/worklog/258937",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sunchao commented on pull request #4330: ARROW-5351: [Rust] Take kernel\nURL: https://github.com/apache/arrow/pull/4330#discussion_r293015855\n \n \n\n ##########\n File path: rust/arrow/src/compute/kernels/take.rs\n ##########\n @@ -0,0 +1,519 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Defines take kernel for `ArrayRef`\n+\n+use std::sync::Arc;\n+\n+use crate::array::*;\n+use crate::array_data::ArrayData;\n+use crate::buffer::Buffer;\n+use crate::builder::*;\n+use crate::compute::util::take_index_from_list;\n+use crate::datatypes::*;\n+use crate::error::{ArrowError, Result};\n+\n+/// Take elements from `ArrayRef` by supplying an array of indices.\n+///\n+/// Supports:\n+///  * null indices, returning a null value for the index\n+///  * checking for overflowing indices\n+pub fn take(\n+    array: &ArrayRef,\n+    index: &UInt32Array,\n \n Review comment:\n   Should we call this `indices`?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-12T17:37:56.561+0000",
                    "updated": "2019-06-12T17:37:56.561+0000",
                    "started": "2019-06-12T17:37:56.560+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "258937",
                    "issueId": "13233820"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13233820/worklog/258938",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sunchao commented on pull request #4330: ARROW-5351: [Rust] Take kernel\nURL: https://github.com/apache/arrow/pull/4330#discussion_r293013424\n \n \n\n ##########\n File path: rust/arrow/src/compute/kernels/take.rs\n ##########\n @@ -0,0 +1,519 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Defines take kernel for `ArrayRef`\n+\n+use std::sync::Arc;\n+\n+use crate::array::*;\n+use crate::array_data::ArrayData;\n+use crate::buffer::Buffer;\n+use crate::builder::*;\n+use crate::compute::util::take_index_from_list;\n+use crate::datatypes::*;\n+use crate::error::{ArrowError, Result};\n+\n+/// Take elements from `ArrayRef` by supplying an array of indices.\n+///\n+/// Supports:\n+///  * null indices, returning a null value for the index\n+///  * checking for overflowing indices\n+pub fn take(\n+    array: &ArrayRef,\n+    index: &UInt32Array,\n+    options: Option<&TakeOptions>,\n \n Review comment:\n   nit: instead of `Option<&TakeOptions>` can we use `Option<TakeOptions>`? it might be more convenient to use. \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-12T17:37:57.059+0000",
                    "updated": "2019-06-12T17:37:57.059+0000",
                    "started": "2019-06-12T17:37:57.058+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "258938",
                    "issueId": "13233820"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13233820/worklog/258939",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sunchao commented on pull request #4330: ARROW-5351: [Rust] Take kernel\nURL: https://github.com/apache/arrow/pull/4330#discussion_r293021716\n \n \n\n ##########\n File path: rust/arrow/src/compute/kernels/take.rs\n ##########\n @@ -0,0 +1,519 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Defines take kernel for `ArrayRef`\n+\n+use std::sync::Arc;\n+\n+use crate::array::*;\n+use crate::array_data::ArrayData;\n+use crate::buffer::Buffer;\n+use crate::builder::*;\n+use crate::compute::util::take_index_from_list;\n+use crate::datatypes::*;\n+use crate::error::{ArrowError, Result};\n+\n+/// Take elements from `ArrayRef` by supplying an array of indices.\n+///\n+/// Supports:\n+///  * null indices, returning a null value for the index\n+///  * checking for overflowing indices\n+pub fn take(\n+    array: &ArrayRef,\n+    index: &UInt32Array,\n+    options: Option<&TakeOptions>,\n+) -> Result<ArrayRef> {\n+    use TimeUnit::*;\n+\n+    let options = options.map(|opt| opt.clone()).unwrap_or(Default::default());\n+    if options.check_bounds {\n+        let len = array.len();\n+        for i in 0..index.len() {\n+            if index.is_valid(i) {\n+                let ix = index.value(i) as usize;\n+                if ix >= len {\n+                    return Err(ArrowError::ComputeError(\n+                    format!(\"Array index out of bounds, cannot get item at index {} from {} entries\", ix, len))\n+                );\n+                }\n+            }\n+        }\n+    }\n+    match array.data_type() {\n+        DataType::Boolean => take_bool(array, index),\n+        DataType::Int8 => take_numeric::<Int8Type>(array, index),\n+        DataType::Int16 => take_numeric::<Int16Type>(array, index),\n+        DataType::Int32 => take_numeric::<Int32Type>(array, index),\n+        DataType::Int64 => take_numeric::<Int64Type>(array, index),\n+        DataType::UInt8 => take_numeric::<UInt8Type>(array, index),\n+        DataType::UInt16 => take_numeric::<UInt16Type>(array, index),\n+        DataType::UInt32 => take_numeric::<UInt32Type>(array, index),\n+        DataType::UInt64 => take_numeric::<UInt64Type>(array, index),\n+        DataType::Float32 => take_numeric::<Float32Type>(array, index),\n+        DataType::Float64 => take_numeric::<Float64Type>(array, index),\n+        DataType::Date32(_) => take_numeric::<Date32Type>(array, index),\n+        DataType::Date64(_) => take_numeric::<Date64Type>(array, index),\n+        DataType::Time32(Second) => take_numeric::<Time32SecondType>(array, index),\n+        DataType::Time32(Millisecond) => {\n+            take_numeric::<Time32MillisecondType>(array, index)\n+        }\n+        DataType::Time64(Microsecond) => {\n+            take_numeric::<Time64MicrosecondType>(array, index)\n+        }\n+        DataType::Time64(Nanosecond) => {\n+            take_numeric::<Time64NanosecondType>(array, index)\n+        }\n+        DataType::Timestamp(Second) => take_numeric::<TimestampSecondType>(array, index),\n+        DataType::Timestamp(Millisecond) => {\n+            take_numeric::<TimestampMillisecondType>(array, index)\n+        }\n+        DataType::Timestamp(Microsecond) => {\n+            take_numeric::<TimestampMicrosecondType>(array, index)\n+        }\n+        DataType::Timestamp(Nanosecond) => {\n+            take_numeric::<TimestampNanosecondType>(array, index)\n+        }\n+        DataType::Utf8 => take_binary(array, index),\n+        DataType::List(_) => take_list(array, index),\n+        DataType::Struct(fields) => {\n+            let struct_: &StructArray =\n+                array.as_any().downcast_ref::<StructArray>().unwrap();\n+            let arrays: Result<Vec<ArrayRef>> = struct_\n+                .columns()\n+                .iter()\n+                .map(|a| take(a, index, Some(&options)))\n+                .collect();\n+            let arrays = arrays?;\n+            let pairs: Vec<(Field, ArrayRef)> =\n+                fields.clone().into_iter().zip(arrays).collect();\n+            Ok(Arc::new(StructArray::from(pairs)) as ArrayRef)\n+        }\n+        t @ _ => unimplemented!(\"Sort not supported for data type {:?}\", t),\n+    }\n+}\n+\n+/// Options that define how `take` should behave\n+#[derive(Clone)]\n+pub struct TakeOptions {\n+    /// perform bounds check before taking\n+    pub check_bounds: bool,\n+}\n+\n+impl Default for TakeOptions {\n+    fn default() -> Self {\n+        Self {\n+            check_bounds: false,\n+        }\n+    }\n+}\n+\n+/// `take` implementation for numeric arrays\n+fn take_numeric<T>(array: &ArrayRef, index: &UInt32Array) -> Result<ArrayRef>\n+where\n+    T: ArrowNumericType,\n+{\n+    let mut builder = PrimitiveBuilder::<T>::new(index.len());\n+    let a = array.as_any().downcast_ref::<PrimitiveArray<T>>().unwrap();\n+    for i in 0..index.len() {\n+        if index.is_null(i) {\n+            builder.append_null()?;\n+        } else {\n+            let ix = index.value(i) as usize;\n+            if a.is_valid(ix) {\n+                builder.append_value(a.value(ix))?;\n+            } else {\n+                builder.append_null()?;\n+            }\n+        }\n+    }\n+    Ok(Arc::new(builder.finish()) as ArrayRef)\n+}\n+\n+/// `take` implementation for binary arrays\n+fn take_binary(array: &ArrayRef, index: &UInt32Array) -> Result<ArrayRef> {\n+    let mut builder = BinaryBuilder::new(index.len());\n+    let a = array.as_any().downcast_ref::<BinaryArray>().unwrap();\n+    for i in 0..index.len() {\n+        if index.is_null(i) {\n+            builder.append(false)?;\n+        } else {\n+            let ix = index.value(i) as usize;\n+            if a.is_null(ix) {\n+                builder.append(false)?;\n+            } else {\n+                builder.append_values(a.value(ix))?;\n+            }\n+        }\n+    }\n+    Ok(Arc::new(builder.finish()) as ArrayRef)\n+}\n+\n+/// `take` implementation for boolean arrays\n+fn take_bool(array: &ArrayRef, index: &UInt32Array) -> Result<ArrayRef> {\n \n Review comment:\n   Can this be merged with `take_numeric`?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-12T17:37:57.207+0000",
                    "updated": "2019-06-12T17:37:57.207+0000",
                    "started": "2019-06-12T17:37:57.207+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "258939",
                    "issueId": "13233820"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13233820/worklog/258940",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sunchao commented on pull request #4330: ARROW-5351: [Rust] Take kernel\nURL: https://github.com/apache/arrow/pull/4330#discussion_r293019570\n \n \n\n ##########\n File path: rust/arrow/src/compute/kernels/take.rs\n ##########\n @@ -0,0 +1,519 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Defines take kernel for `ArrayRef`\n+\n+use std::sync::Arc;\n+\n+use crate::array::*;\n+use crate::array_data::ArrayData;\n+use crate::buffer::Buffer;\n+use crate::builder::*;\n+use crate::compute::util::take_index_from_list;\n+use crate::datatypes::*;\n+use crate::error::{ArrowError, Result};\n+\n+/// Take elements from `ArrayRef` by supplying an array of indices.\n+///\n+/// Supports:\n+///  * null indices, returning a null value for the index\n+///  * checking for overflowing indices\n+pub fn take(\n+    array: &ArrayRef,\n+    index: &UInt32Array,\n+    options: Option<&TakeOptions>,\n+) -> Result<ArrayRef> {\n+    use TimeUnit::*;\n+\n+    let options = options.map(|opt| opt.clone()).unwrap_or(Default::default());\n+    if options.check_bounds {\n+        let len = array.len();\n+        for i in 0..index.len() {\n+            if index.is_valid(i) {\n+                let ix = index.value(i) as usize;\n+                if ix >= len {\n+                    return Err(ArrowError::ComputeError(\n+                    format!(\"Array index out of bounds, cannot get item at index {} from {} entries\", ix, len))\n+                );\n+                }\n+            }\n+        }\n+    }\n+    match array.data_type() {\n+        DataType::Boolean => take_bool(array, index),\n+        DataType::Int8 => take_numeric::<Int8Type>(array, index),\n+        DataType::Int16 => take_numeric::<Int16Type>(array, index),\n+        DataType::Int32 => take_numeric::<Int32Type>(array, index),\n+        DataType::Int64 => take_numeric::<Int64Type>(array, index),\n+        DataType::UInt8 => take_numeric::<UInt8Type>(array, index),\n+        DataType::UInt16 => take_numeric::<UInt16Type>(array, index),\n+        DataType::UInt32 => take_numeric::<UInt32Type>(array, index),\n+        DataType::UInt64 => take_numeric::<UInt64Type>(array, index),\n+        DataType::Float32 => take_numeric::<Float32Type>(array, index),\n+        DataType::Float64 => take_numeric::<Float64Type>(array, index),\n+        DataType::Date32(_) => take_numeric::<Date32Type>(array, index),\n+        DataType::Date64(_) => take_numeric::<Date64Type>(array, index),\n+        DataType::Time32(Second) => take_numeric::<Time32SecondType>(array, index),\n+        DataType::Time32(Millisecond) => {\n+            take_numeric::<Time32MillisecondType>(array, index)\n+        }\n+        DataType::Time64(Microsecond) => {\n+            take_numeric::<Time64MicrosecondType>(array, index)\n+        }\n+        DataType::Time64(Nanosecond) => {\n+            take_numeric::<Time64NanosecondType>(array, index)\n+        }\n+        DataType::Timestamp(Second) => take_numeric::<TimestampSecondType>(array, index),\n+        DataType::Timestamp(Millisecond) => {\n+            take_numeric::<TimestampMillisecondType>(array, index)\n+        }\n+        DataType::Timestamp(Microsecond) => {\n+            take_numeric::<TimestampMicrosecondType>(array, index)\n+        }\n+        DataType::Timestamp(Nanosecond) => {\n+            take_numeric::<TimestampNanosecondType>(array, index)\n+        }\n+        DataType::Utf8 => take_binary(array, index),\n+        DataType::List(_) => take_list(array, index),\n+        DataType::Struct(fields) => {\n+            let struct_: &StructArray =\n+                array.as_any().downcast_ref::<StructArray>().unwrap();\n+            let arrays: Result<Vec<ArrayRef>> = struct_\n+                .columns()\n+                .iter()\n+                .map(|a| take(a, index, Some(&options)))\n+                .collect();\n+            let arrays = arrays?;\n+            let pairs: Vec<(Field, ArrayRef)> =\n+                fields.clone().into_iter().zip(arrays).collect();\n+            Ok(Arc::new(StructArray::from(pairs)) as ArrayRef)\n+        }\n+        t @ _ => unimplemented!(\"Sort not supported for data type {:?}\", t),\n+    }\n+}\n+\n+/// Options that define how `take` should behave\n+#[derive(Clone)]\n+pub struct TakeOptions {\n+    /// perform bounds check before taking\n+    pub check_bounds: bool,\n+}\n+\n+impl Default for TakeOptions {\n+    fn default() -> Self {\n+        Self {\n+            check_bounds: false,\n+        }\n+    }\n+}\n+\n+/// `take` implementation for numeric arrays\n+fn take_numeric<T>(array: &ArrayRef, index: &UInt32Array) -> Result<ArrayRef>\n+where\n+    T: ArrowNumericType,\n+{\n+    let mut builder = PrimitiveBuilder::<T>::new(index.len());\n+    let a = array.as_any().downcast_ref::<PrimitiveArray<T>>().unwrap();\n+    for i in 0..index.len() {\n \n Review comment:\n   Similar to the C++ version, it may be better if we can optimize this by considering whether values/indices are all valid or not. This doesn't necessarily have to be done in this PR though.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-12T17:37:57.391+0000",
                    "updated": "2019-06-12T17:37:57.391+0000",
                    "started": "2019-06-12T17:37:57.391+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "258940",
                    "issueId": "13233820"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13233820/worklog/258941",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sunchao commented on pull request #4330: ARROW-5351: [Rust] Take kernel\nURL: https://github.com/apache/arrow/pull/4330#discussion_r293016004\n \n \n\n ##########\n File path: rust/arrow/src/compute/kernels/take.rs\n ##########\n @@ -0,0 +1,519 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Defines take kernel for `ArrayRef`\n+\n+use std::sync::Arc;\n+\n+use crate::array::*;\n+use crate::array_data::ArrayData;\n+use crate::buffer::Buffer;\n+use crate::builder::*;\n+use crate::compute::util::take_index_from_list;\n+use crate::datatypes::*;\n+use crate::error::{ArrowError, Result};\n+\n+/// Take elements from `ArrayRef` by supplying an array of indices.\n+///\n+/// Supports:\n+///  * null indices, returning a null value for the index\n+///  * checking for overflowing indices\n+pub fn take(\n+    array: &ArrayRef,\n+    index: &UInt32Array,\n+    options: Option<&TakeOptions>,\n+) -> Result<ArrayRef> {\n+    use TimeUnit::*;\n+\n+    let options = options.map(|opt| opt.clone()).unwrap_or(Default::default());\n+    if options.check_bounds {\n+        let len = array.len();\n+        for i in 0..index.len() {\n+            if index.is_valid(i) {\n+                let ix = index.value(i) as usize;\n+                if ix >= len {\n+                    return Err(ArrowError::ComputeError(\n+                    format!(\"Array index out of bounds, cannot get item at index {} from {} entries\", ix, len))\n+                );\n+                }\n+            }\n+        }\n+    }\n+    match array.data_type() {\n+        DataType::Boolean => take_bool(array, index),\n+        DataType::Int8 => take_numeric::<Int8Type>(array, index),\n+        DataType::Int16 => take_numeric::<Int16Type>(array, index),\n+        DataType::Int32 => take_numeric::<Int32Type>(array, index),\n+        DataType::Int64 => take_numeric::<Int64Type>(array, index),\n+        DataType::UInt8 => take_numeric::<UInt8Type>(array, index),\n+        DataType::UInt16 => take_numeric::<UInt16Type>(array, index),\n+        DataType::UInt32 => take_numeric::<UInt32Type>(array, index),\n+        DataType::UInt64 => take_numeric::<UInt64Type>(array, index),\n+        DataType::Float32 => take_numeric::<Float32Type>(array, index),\n+        DataType::Float64 => take_numeric::<Float64Type>(array, index),\n+        DataType::Date32(_) => take_numeric::<Date32Type>(array, index),\n+        DataType::Date64(_) => take_numeric::<Date64Type>(array, index),\n+        DataType::Time32(Second) => take_numeric::<Time32SecondType>(array, index),\n+        DataType::Time32(Millisecond) => {\n+            take_numeric::<Time32MillisecondType>(array, index)\n+        }\n+        DataType::Time64(Microsecond) => {\n+            take_numeric::<Time64MicrosecondType>(array, index)\n+        }\n+        DataType::Time64(Nanosecond) => {\n+            take_numeric::<Time64NanosecondType>(array, index)\n+        }\n+        DataType::Timestamp(Second) => take_numeric::<TimestampSecondType>(array, index),\n+        DataType::Timestamp(Millisecond) => {\n+            take_numeric::<TimestampMillisecondType>(array, index)\n+        }\n+        DataType::Timestamp(Microsecond) => {\n+            take_numeric::<TimestampMicrosecondType>(array, index)\n+        }\n+        DataType::Timestamp(Nanosecond) => {\n+            take_numeric::<TimestampNanosecondType>(array, index)\n+        }\n+        DataType::Utf8 => take_binary(array, index),\n+        DataType::List(_) => take_list(array, index),\n+        DataType::Struct(fields) => {\n+            let struct_: &StructArray =\n+                array.as_any().downcast_ref::<StructArray>().unwrap();\n+            let arrays: Result<Vec<ArrayRef>> = struct_\n+                .columns()\n+                .iter()\n+                .map(|a| take(a, index, Some(&options)))\n+                .collect();\n+            let arrays = arrays?;\n+            let pairs: Vec<(Field, ArrayRef)> =\n+                fields.clone().into_iter().zip(arrays).collect();\n+            Ok(Arc::new(StructArray::from(pairs)) as ArrayRef)\n+        }\n+        t @ _ => unimplemented!(\"Sort not supported for data type {:?}\", t),\n+    }\n+}\n+\n+/// Options that define how `take` should behave\n+#[derive(Clone)]\n+pub struct TakeOptions {\n+    /// perform bounds check before taking\n+    pub check_bounds: bool,\n+}\n+\n+impl Default for TakeOptions {\n+    fn default() -> Self {\n+        Self {\n+            check_bounds: false,\n+        }\n+    }\n+}\n+\n+/// `take` implementation for numeric arrays\n+fn take_numeric<T>(array: &ArrayRef, index: &UInt32Array) -> Result<ArrayRef>\n \n Review comment:\n   Same as above, `s/index/indices`?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-12T17:37:57.419+0000",
                    "updated": "2019-06-12T17:37:57.419+0000",
                    "started": "2019-06-12T17:37:57.418+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "258941",
                    "issueId": "13233820"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13233820/worklog/258942",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sunchao commented on pull request #4330: ARROW-5351: [Rust] Take kernel\nURL: https://github.com/apache/arrow/pull/4330#discussion_r293023423\n \n \n\n ##########\n File path: rust/arrow/src/compute/kernels/take.rs\n ##########\n @@ -0,0 +1,519 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Defines take kernel for `ArrayRef`\n+\n+use std::sync::Arc;\n+\n+use crate::array::*;\n+use crate::array_data::ArrayData;\n+use crate::buffer::Buffer;\n+use crate::builder::*;\n+use crate::compute::util::take_index_from_list;\n+use crate::datatypes::*;\n+use crate::error::{ArrowError, Result};\n+\n+/// Take elements from `ArrayRef` by supplying an array of indices.\n+///\n+/// Supports:\n+///  * null indices, returning a null value for the index\n+///  * checking for overflowing indices\n+pub fn take(\n+    array: &ArrayRef,\n+    index: &UInt32Array,\n+    options: Option<&TakeOptions>,\n+) -> Result<ArrayRef> {\n+    use TimeUnit::*;\n+\n+    let options = options.map(|opt| opt.clone()).unwrap_or(Default::default());\n+    if options.check_bounds {\n+        let len = array.len();\n+        for i in 0..index.len() {\n+            if index.is_valid(i) {\n+                let ix = index.value(i) as usize;\n+                if ix >= len {\n+                    return Err(ArrowError::ComputeError(\n+                    format!(\"Array index out of bounds, cannot get item at index {} from {} entries\", ix, len))\n+                );\n+                }\n+            }\n+        }\n+    }\n+    match array.data_type() {\n+        DataType::Boolean => take_bool(array, index),\n+        DataType::Int8 => take_numeric::<Int8Type>(array, index),\n+        DataType::Int16 => take_numeric::<Int16Type>(array, index),\n+        DataType::Int32 => take_numeric::<Int32Type>(array, index),\n+        DataType::Int64 => take_numeric::<Int64Type>(array, index),\n+        DataType::UInt8 => take_numeric::<UInt8Type>(array, index),\n+        DataType::UInt16 => take_numeric::<UInt16Type>(array, index),\n+        DataType::UInt32 => take_numeric::<UInt32Type>(array, index),\n+        DataType::UInt64 => take_numeric::<UInt64Type>(array, index),\n+        DataType::Float32 => take_numeric::<Float32Type>(array, index),\n+        DataType::Float64 => take_numeric::<Float64Type>(array, index),\n+        DataType::Date32(_) => take_numeric::<Date32Type>(array, index),\n+        DataType::Date64(_) => take_numeric::<Date64Type>(array, index),\n+        DataType::Time32(Second) => take_numeric::<Time32SecondType>(array, index),\n+        DataType::Time32(Millisecond) => {\n+            take_numeric::<Time32MillisecondType>(array, index)\n+        }\n+        DataType::Time64(Microsecond) => {\n+            take_numeric::<Time64MicrosecondType>(array, index)\n+        }\n+        DataType::Time64(Nanosecond) => {\n+            take_numeric::<Time64NanosecondType>(array, index)\n+        }\n+        DataType::Timestamp(Second) => take_numeric::<TimestampSecondType>(array, index),\n+        DataType::Timestamp(Millisecond) => {\n+            take_numeric::<TimestampMillisecondType>(array, index)\n+        }\n+        DataType::Timestamp(Microsecond) => {\n+            take_numeric::<TimestampMicrosecondType>(array, index)\n+        }\n+        DataType::Timestamp(Nanosecond) => {\n+            take_numeric::<TimestampNanosecondType>(array, index)\n+        }\n+        DataType::Utf8 => take_binary(array, index),\n+        DataType::List(_) => take_list(array, index),\n+        DataType::Struct(fields) => {\n+            let struct_: &StructArray =\n+                array.as_any().downcast_ref::<StructArray>().unwrap();\n+            let arrays: Result<Vec<ArrayRef>> = struct_\n+                .columns()\n+                .iter()\n+                .map(|a| take(a, index, Some(&options)))\n+                .collect();\n+            let arrays = arrays?;\n+            let pairs: Vec<(Field, ArrayRef)> =\n+                fields.clone().into_iter().zip(arrays).collect();\n+            Ok(Arc::new(StructArray::from(pairs)) as ArrayRef)\n+        }\n+        t @ _ => unimplemented!(\"Sort not supported for data type {:?}\", t),\n+    }\n+}\n+\n+/// Options that define how `take` should behave\n+#[derive(Clone)]\n+pub struct TakeOptions {\n+    /// perform bounds check before taking\n+    pub check_bounds: bool,\n+}\n+\n+impl Default for TakeOptions {\n+    fn default() -> Self {\n+        Self {\n+            check_bounds: false,\n+        }\n+    }\n+}\n+\n+/// `take` implementation for numeric arrays\n+fn take_numeric<T>(array: &ArrayRef, index: &UInt32Array) -> Result<ArrayRef>\n+where\n+    T: ArrowNumericType,\n+{\n+    let mut builder = PrimitiveBuilder::<T>::new(index.len());\n+    let a = array.as_any().downcast_ref::<PrimitiveArray<T>>().unwrap();\n+    for i in 0..index.len() {\n+        if index.is_null(i) {\n+            builder.append_null()?;\n+        } else {\n+            let ix = index.value(i) as usize;\n+            if a.is_valid(ix) {\n+                builder.append_value(a.value(ix))?;\n+            } else {\n+                builder.append_null()?;\n+            }\n+        }\n+    }\n+    Ok(Arc::new(builder.finish()) as ArrayRef)\n+}\n+\n+/// `take` implementation for binary arrays\n+fn take_binary(array: &ArrayRef, index: &UInt32Array) -> Result<ArrayRef> {\n+    let mut builder = BinaryBuilder::new(index.len());\n+    let a = array.as_any().downcast_ref::<BinaryArray>().unwrap();\n+    for i in 0..index.len() {\n+        if index.is_null(i) {\n+            builder.append(false)?;\n+        } else {\n+            let ix = index.value(i) as usize;\n+            if a.is_null(ix) {\n+                builder.append(false)?;\n+            } else {\n+                builder.append_values(a.value(ix))?;\n+            }\n+        }\n+    }\n+    Ok(Arc::new(builder.finish()) as ArrayRef)\n+}\n+\n+/// `take` implementation for boolean arrays\n+fn take_bool(array: &ArrayRef, index: &UInt32Array) -> Result<ArrayRef> {\n+    let mut builder = BooleanBuilder::new(index.len());\n+    let a = array.as_any().downcast_ref::<BooleanArray>().unwrap();\n+    for i in 0..index.len() {\n+        if index.is_null(i) {\n+            builder.append_null()?;\n+        } else {\n+            let ix = index.value(i) as usize;\n+            if a.is_null(ix) {\n+                builder.append_null()?;\n+            } else {\n+                builder.append_value(a.value(ix))?;\n+            }\n+        }\n+    }\n+    Ok(Arc::new(builder.finish()) as ArrayRef)\n+}\n+\n+/// `take` implementation for list arrays\n+///\n+/// Calculates the index and indexed offset for the inner array,\n+/// applying `take` on the inner array, then reconstructing a list array\n+/// with the indexed offsets\n+fn take_list(array: &ArrayRef, index: &UInt32Array) -> Result<ArrayRef> {\n+    let list: &ListArray = array.as_any().downcast_ref::<ListArray>().unwrap();\n+    let (indices, offsets) = take_index_from_list(array, index);\n+    let taken = take(&list.values(), &indices, None)?;\n+    let value_offsets = Buffer::from(offsets[..].to_byte_slice());\n+    let list_data = ArrayData::new(\n+        list.data_type().clone(),\n+        index.len(),\n+        Some(index.null_count()),\n+        taken.data().null_bitmap().clone().map(|bitmap| bitmap.bits),\n+        0,\n+        vec![value_offsets],\n+        vec![taken.data()],\n+    );\n+    let list_array = Arc::new(ListArray::from(Arc::new(list_data))) as ArrayRef;\n+    Ok(list_array)\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+\n+    fn take_test_numeric<'a, T>(\n \n Review comment:\n   `take_test_numeric` -> `test_take_numeric`\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-12T17:37:57.450+0000",
                    "updated": "2019-06-12T17:37:57.450+0000",
                    "started": "2019-06-12T17:37:57.449+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "258942",
                    "issueId": "13233820"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13233820/worklog/258943",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sunchao commented on pull request #4330: ARROW-5351: [Rust] Take kernel\nURL: https://github.com/apache/arrow/pull/4330#discussion_r293019903\n \n \n\n ##########\n File path: rust/arrow/src/compute/kernels/take.rs\n ##########\n @@ -0,0 +1,519 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Defines take kernel for `ArrayRef`\n+\n+use std::sync::Arc;\n+\n+use crate::array::*;\n+use crate::array_data::ArrayData;\n+use crate::buffer::Buffer;\n+use crate::builder::*;\n+use crate::compute::util::take_index_from_list;\n+use crate::datatypes::*;\n+use crate::error::{ArrowError, Result};\n+\n+/// Take elements from `ArrayRef` by supplying an array of indices.\n+///\n+/// Supports:\n+///  * null indices, returning a null value for the index\n+///  * checking for overflowing indices\n+pub fn take(\n+    array: &ArrayRef,\n+    index: &UInt32Array,\n+    options: Option<&TakeOptions>,\n+) -> Result<ArrayRef> {\n+    use TimeUnit::*;\n+\n+    let options = options.map(|opt| opt.clone()).unwrap_or(Default::default());\n+    if options.check_bounds {\n+        let len = array.len();\n+        for i in 0..index.len() {\n+            if index.is_valid(i) {\n+                let ix = index.value(i) as usize;\n+                if ix >= len {\n+                    return Err(ArrowError::ComputeError(\n+                    format!(\"Array index out of bounds, cannot get item at index {} from {} entries\", ix, len))\n+                );\n+                }\n+            }\n+        }\n+    }\n+    match array.data_type() {\n+        DataType::Boolean => take_bool(array, index),\n+        DataType::Int8 => take_numeric::<Int8Type>(array, index),\n+        DataType::Int16 => take_numeric::<Int16Type>(array, index),\n+        DataType::Int32 => take_numeric::<Int32Type>(array, index),\n+        DataType::Int64 => take_numeric::<Int64Type>(array, index),\n+        DataType::UInt8 => take_numeric::<UInt8Type>(array, index),\n+        DataType::UInt16 => take_numeric::<UInt16Type>(array, index),\n+        DataType::UInt32 => take_numeric::<UInt32Type>(array, index),\n+        DataType::UInt64 => take_numeric::<UInt64Type>(array, index),\n+        DataType::Float32 => take_numeric::<Float32Type>(array, index),\n+        DataType::Float64 => take_numeric::<Float64Type>(array, index),\n+        DataType::Date32(_) => take_numeric::<Date32Type>(array, index),\n+        DataType::Date64(_) => take_numeric::<Date64Type>(array, index),\n+        DataType::Time32(Second) => take_numeric::<Time32SecondType>(array, index),\n+        DataType::Time32(Millisecond) => {\n+            take_numeric::<Time32MillisecondType>(array, index)\n+        }\n+        DataType::Time64(Microsecond) => {\n+            take_numeric::<Time64MicrosecondType>(array, index)\n+        }\n+        DataType::Time64(Nanosecond) => {\n+            take_numeric::<Time64NanosecondType>(array, index)\n+        }\n+        DataType::Timestamp(Second) => take_numeric::<TimestampSecondType>(array, index),\n+        DataType::Timestamp(Millisecond) => {\n+            take_numeric::<TimestampMillisecondType>(array, index)\n+        }\n+        DataType::Timestamp(Microsecond) => {\n+            take_numeric::<TimestampMicrosecondType>(array, index)\n+        }\n+        DataType::Timestamp(Nanosecond) => {\n+            take_numeric::<TimestampNanosecondType>(array, index)\n+        }\n+        DataType::Utf8 => take_binary(array, index),\n+        DataType::List(_) => take_list(array, index),\n+        DataType::Struct(fields) => {\n+            let struct_: &StructArray =\n+                array.as_any().downcast_ref::<StructArray>().unwrap();\n+            let arrays: Result<Vec<ArrayRef>> = struct_\n+                .columns()\n+                .iter()\n+                .map(|a| take(a, index, Some(&options)))\n+                .collect();\n+            let arrays = arrays?;\n+            let pairs: Vec<(Field, ArrayRef)> =\n+                fields.clone().into_iter().zip(arrays).collect();\n+            Ok(Arc::new(StructArray::from(pairs)) as ArrayRef)\n+        }\n+        t @ _ => unimplemented!(\"Sort not supported for data type {:?}\", t),\n+    }\n+}\n+\n+/// Options that define how `take` should behave\n+#[derive(Clone)]\n+pub struct TakeOptions {\n+    /// perform bounds check before taking\n \n Review comment:\n   Perhaps we should document this in more detail such as what will happen if this is enabled and bound checking failed, what will happen if this is not enabled and bound checking failed, etc.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-12T17:37:57.562+0000",
                    "updated": "2019-06-12T17:37:57.562+0000",
                    "started": "2019-06-12T17:37:57.561+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "258943",
                    "issueId": "13233820"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13233820/worklog/258944",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sunchao commented on pull request #4330: ARROW-5351: [Rust] Take kernel\nURL: https://github.com/apache/arrow/pull/4330#discussion_r293024543\n \n \n\n ##########\n File path: rust/arrow/src/builder.rs\n ##########\n @@ -519,6 +519,16 @@ impl BinaryBuilder {\n         Ok(())\n     }\n \n+    /// Appends a byte slice into the builder.\n+    ///\n+    /// Automatically calls the `append` method to delimit the slice appended in as a\n+    /// distinct array element.\n+    pub fn append_values(&mut self, value: &[u8]) -> Result<()> {\n \n Review comment:\n   It seems the `BinaryBuilder` is poorly named - the original `append_value` should be called something else since it only append a single byte to the binary array. This instead should better be called `append_value`.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-12T17:37:57.601+0000",
                    "updated": "2019-06-12T17:37:57.601+0000",
                    "started": "2019-06-12T17:37:57.601+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "258944",
                    "issueId": "13233820"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13233820/worklog/258945",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sunchao commented on pull request #4330: ARROW-5351: [Rust] Take kernel\nURL: https://github.com/apache/arrow/pull/4330#discussion_r293026526\n \n \n\n ##########\n File path: rust/arrow/src/compute/kernels/take.rs\n ##########\n @@ -0,0 +1,519 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Defines take kernel for `ArrayRef`\n+\n+use std::sync::Arc;\n+\n+use crate::array::*;\n+use crate::array_data::ArrayData;\n+use crate::buffer::Buffer;\n+use crate::builder::*;\n+use crate::compute::util::take_index_from_list;\n+use crate::datatypes::*;\n+use crate::error::{ArrowError, Result};\n+\n+/// Take elements from `ArrayRef` by supplying an array of indices.\n+///\n+/// Supports:\n+///  * null indices, returning a null value for the index\n+///  * checking for overflowing indices\n+pub fn take(\n+    array: &ArrayRef,\n \n Review comment:\n   Should we call this `values`? `array` is self explanatory given that the type is `ArrayRef`.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-12T17:37:57.691+0000",
                    "updated": "2019-06-12T17:37:57.691+0000",
                    "started": "2019-06-12T17:37:57.691+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "258945",
                    "issueId": "13233820"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 33000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@28c618a6[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4741224d[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@27c6e210[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@695bffef[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@231c436c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@72630f8c[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@62a5a5b2[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@54379a8e[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@15f1a447[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@7f04d61a[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3043747d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@58c87b11[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 33000,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Jul 17 06:54:51 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-07-17T06:54:51.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-5351/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2019-05-16T16:55:41.000+0000",
        "updated": "2019-08-01T22:37:58.000+0000",
        "timeoriginalestimate": null,
        "description": "Similar to\u00a0https://issues.apache.org/jira/browse/ARROW-772, a take function would allow us random-access on arrays, which is useful for sorting and (potentially) filtering.\r\n\r\n\u00a0",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "9h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 33000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Rust] Add support for take kernel functions",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13233820/comment/16871840",
                    "id": "16871840",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=nevi_me",
                        "name": "nevi_me",
                        "key": "nevi_me",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=nevi_me&avatarId=24271",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nevi_me&avatarId=24271",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nevi_me&avatarId=24271",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nevi_me&avatarId=24271"
                        },
                        "displayName": "Neville Dipale",
                        "active": true,
                        "timeZone": "Africa/Johannesburg"
                    },
                    "body": "I've removed this from 0.14.0, there's an issue with taking from list arrays, which I'm still investigating. I might not complete it on time.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=nevi_me",
                        "name": "nevi_me",
                        "key": "nevi_me",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=nevi_me&avatarId=24271",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nevi_me&avatarId=24271",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nevi_me&avatarId=24271",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nevi_me&avatarId=24271"
                        },
                        "displayName": "Neville Dipale",
                        "active": true,
                        "timeZone": "Africa/Johannesburg"
                    },
                    "created": "2019-06-24T22:32:46.135+0000",
                    "updated": "2019-06-24T22:32:46.135+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13233820/comment/16886731",
                    "id": "16886731",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=nevi_me",
                        "name": "nevi_me",
                        "key": "nevi_me",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=nevi_me&avatarId=24271",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nevi_me&avatarId=24271",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nevi_me&avatarId=24271",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nevi_me&avatarId=24271"
                        },
                        "displayName": "Neville Dipale",
                        "active": true,
                        "timeZone": "Africa/Johannesburg"
                    },
                    "body": "Issue resolved by pull request 4330\n[https://github.com/apache/arrow/pull/4330]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=nevi_me",
                        "name": "nevi_me",
                        "key": "nevi_me",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=nevi_me&avatarId=24271",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nevi_me&avatarId=24271",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nevi_me&avatarId=24271",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nevi_me&avatarId=24271"
                        },
                        "displayName": "Neville Dipale",
                        "active": true,
                        "timeZone": "Africa/Johannesburg"
                    },
                    "created": "2019-07-17T06:54:51.198+0000",
                    "updated": "2019-07-17T06:54:51.198+0000"
                }
            ],
            "maxResults": 2,
            "total": 2,
            "startAt": 0
        },
        "customfield_12311820": "0|z02ruo:",
        "customfield_12314139": null
    }
}