{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13450855",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13450855",
    "key": "ARROW-16855",
    "fields": {
        "parent": {
            "id": "13450853",
            "key": "ARROW-16854",
            "self": "https://issues.apache.org/jira/rest/api/2/issue/13450853",
            "fields": {
                "summary": "[C++] Add RoundTrip to Relations",
                "status": {
                    "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                    "description": "The issue is open and ready for the assignee to start work on it.",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                    "name": "Open",
                    "id": "1",
                    "statusCategory": {
                        "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                        "id": 2,
                        "key": "new",
                        "colorName": "blue-gray",
                        "name": "To Do"
                    }
                },
                "priority": {
                    "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                    "name": "Major",
                    "id": "3"
                },
                "issuetype": {
                    "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                    "id": "4",
                    "description": "An improvement or enhancement to an existing feature or task.",
                    "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                    "name": "Improvement",
                    "subtask": false,
                    "avatarId": 21140
                }
            }
        },
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351947",
                "id": "12351947",
                "description": "",
                "name": "10.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-10-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available",
            "query-engine",
            "substrait"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=vibhatha",
            "name": "vibhatha",
            "key": "vibhatha",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
            },
            "displayName": "Vibhatha Lakmal Abeykoon",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=vibhatha",
            "name": "vibhatha",
            "key": "vibhatha",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
            },
            "displayName": "Vibhatha Lakmal Abeykoon",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=vibhatha",
            "name": "vibhatha",
            "key": "vibhatha",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
            },
            "displayName": "Vibhatha Lakmal Abeykoon",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 60000,
            "total": 60000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 60000,
            "total": 60000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-16855/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 100,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13450855/worklog/782753",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha opened a new pull request, #13401:\nURL: https://github.com/apache/arrow/pull/13401\n\n   This is the initial PR to set the util functions and structure to include the `ToProto` functionality to relations.\r\n   Here the objective is to create an ACERO relation by interpretting what is included in a Substrait-Relation. \r\n   In this PR the `read` relation ToProto is added. \n\n\n",
                    "created": "2022-06-20T01:26:12.517+0000",
                    "updated": "2022-06-20T01:26:12.517+0000",
                    "started": "2022-06-20T01:26:12.517+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "782753",
                    "issueId": "13450855"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13450855/worklog/782754",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #13401:\nURL: https://github.com/apache/arrow/pull/13401#issuecomment-1159868118\n\n   https://issues.apache.org/jira/browse/ARROW-16855\n\n\n",
                    "created": "2022-06-20T01:26:32.187+0000",
                    "updated": "2022-06-20T01:26:32.187+0000",
                    "started": "2022-06-20T01:26:32.187+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "782754",
                    "issueId": "13450855"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13450855/worklog/782755",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #13401:\nURL: https://github.com/apache/arrow/pull/13401#issuecomment-1159868131\n\n   :warning: Ticket **has no components in JIRA**, make sure you assign one.\n\n\n",
                    "created": "2022-06-20T01:26:34.031+0000",
                    "updated": "2022-06-20T01:26:34.031+0000",
                    "started": "2022-06-20T01:26:34.031+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "782755",
                    "issueId": "13450855"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13450855/worklog/782757",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on PR #13401:\nURL: https://github.com/apache/arrow/pull/13401#issuecomment-1159879086\n\n   cc @westonpace added the initial PR to integrate `ToProto` for relations. The detailed task breakdown for `ToProto` is documented in here: https://issues.apache.org/jira/browse/ARROW-16854\r\n   \r\n   The idea is to add part by part in smaller PRs. \n\n\n",
                    "created": "2022-06-20T01:47:51.562+0000",
                    "updated": "2022-06-20T01:47:51.562+0000",
                    "started": "2022-06-20T01:47:51.562+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "782757",
                    "issueId": "13450855"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13450855/worklog/782816",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on code in PR #13401:\nURL: https://github.com/apache/arrow/pull/13401#discussion_r901274897\n\n\n##########\ncpp/src/arrow/engine/substrait/serde_test.cc:\n##########\n@@ -1173,5 +1175,168 @@ TEST(Substrait, JoinPlanInvalidKeys) {\n           &ext_set));\n }\n \n+TEST(Substrait, SerializeRelation) {\n+#ifdef _WIN32\n+  GTEST_SKIP() << \"ARROW-16392: Substrait File URI not supported for Windows\";\n+#else\n+  ExtensionSet ext_set;\n+  auto dummy_schema = schema({field(\"f1\", int32()), field(\"f2\", int32())});\n+  // creating a dummy dataset using a dummy table\n+  auto format = std::make_shared<arrow::dataset::ParquetFileFormat>();\n+  auto filesystem = std::make_shared<fs::LocalFileSystem>();\n+\n+  std::vector<fs::FileInfo> files;\n+  const std::vector<std::string> f_paths = {\"/tmp/data1.parquet\", \"/tmp/data2.parquet\"};\n+\n+  for (const auto& f_path : f_paths) {\n+    ASSERT_OK_AND_ASSIGN(auto f_file, filesystem->GetFileInfo(f_path));\n+    files.push_back(std::move(f_file));\n+  }\n+\n+  ASSERT_OK_AND_ASSIGN(auto ds_factory, dataset::FileSystemDatasetFactory::Make(\n+                                            std::move(filesystem), std::move(files),\n+                                            std::move(format), {}));\n+  ASSERT_OK_AND_ASSIGN(auto dataset, ds_factory->Finish(dummy_schema));\n+\n+  auto options = std::make_shared<dataset::ScanOptions>();\n+  options->projection = compute::project({}, {});\n+  auto scan_node_options = dataset::ScanNodeOptions{dataset, options};\n+\n+  auto scan_declaration = compute::Declaration({\"scan\", scan_node_options});\n+\n+  ASSERT_OK_AND_ASSIGN(auto serialized_rel,\n+                       SerializeRelation(scan_declaration, &ext_set));\n+  ASSERT_OK_AND_ASSIGN(auto deserialized_decl,\n+                       DeserializeRelation(*serialized_rel, ext_set));\n+\n+  auto dataset_comparator = [](std::shared_ptr<dataset::Dataset> ds_lhs,\n\nReview Comment:\n   cc @westonpace \r\n   Would it be better if we add a `Equals` method to `FileSystemDataset`?\n\n\n\n",
                    "created": "2022-06-20T05:48:47.779+0000",
                    "updated": "2022-06-20T05:48:47.779+0000",
                    "started": "2022-06-20T05:48:47.778+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "782816",
                    "issueId": "13450855"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13450855/worklog/782817",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on code in PR #13401:\nURL: https://github.com/apache/arrow/pull/13401#discussion_r901275886\n\n\n##########\ncpp/src/arrow/engine/substrait/serde_test.cc:\n##########\n@@ -1173,5 +1175,168 @@ TEST(Substrait, JoinPlanInvalidKeys) {\n           &ext_set));\n }\n \n+TEST(Substrait, SerializeRelation) {\n+#ifdef _WIN32\n+  GTEST_SKIP() << \"ARROW-16392: Substrait File URI not supported for Windows\";\n+#else\n+  ExtensionSet ext_set;\n+  auto dummy_schema = schema({field(\"f1\", int32()), field(\"f2\", int32())});\n+  // creating a dummy dataset using a dummy table\n+  auto format = std::make_shared<arrow::dataset::ParquetFileFormat>();\n+  auto filesystem = std::make_shared<fs::LocalFileSystem>();\n+\n+  std::vector<fs::FileInfo> files;\n+  const std::vector<std::string> f_paths = {\"/tmp/data1.parquet\", \"/tmp/data2.parquet\"};\n+\n+  for (const auto& f_path : f_paths) {\n+    ASSERT_OK_AND_ASSIGN(auto f_file, filesystem->GetFileInfo(f_path));\n+    files.push_back(std::move(f_file));\n+  }\n+\n+  ASSERT_OK_AND_ASSIGN(auto ds_factory, dataset::FileSystemDatasetFactory::Make(\n+                                            std::move(filesystem), std::move(files),\n+                                            std::move(format), {}));\n+  ASSERT_OK_AND_ASSIGN(auto dataset, ds_factory->Finish(dummy_schema));\n+\n+  auto options = std::make_shared<dataset::ScanOptions>();\n+  options->projection = compute::project({}, {});\n+  auto scan_node_options = dataset::ScanNodeOptions{dataset, options};\n+\n+  auto scan_declaration = compute::Declaration({\"scan\", scan_node_options});\n+\n+  ASSERT_OK_AND_ASSIGN(auto serialized_rel,\n+                       SerializeRelation(scan_declaration, &ext_set));\n+  ASSERT_OK_AND_ASSIGN(auto deserialized_decl,\n+                       DeserializeRelation(*serialized_rel, ext_set));\n+\n+  auto dataset_comparator = [](std::shared_ptr<dataset::Dataset> ds_lhs,\n+                               std::shared_ptr<dataset::Dataset> ds_rhs) -> bool {\n+    const auto& fds_lhs = checked_cast<const dataset::FileSystemDataset&>(*ds_lhs);\n+    const auto& fds_rhs = checked_cast<const dataset::FileSystemDataset&>(*ds_lhs);\n+    const auto& files_lhs = fds_lhs.files();\n+    const auto& files_rhs = fds_rhs.files();\n+\n+    bool cmp_fsize = files_lhs.size() == files_rhs.size();\n+    uint64_t fidx = 0;\n+    for (const auto& l_file : files_lhs) {\n+      if (l_file != files_rhs[fidx]) {\n+        return false;\n+      }\n+      fidx++;\n+    }\n+    bool cmp_file_format = fds_lhs.format()->Equals(*fds_lhs.format());\n+    bool cmp_file_system = fds_lhs.filesystem()->Equals(fds_rhs.filesystem());\n+    return cmp_fsize && cmp_file_format && cmp_file_system;\n+  };\n+\n+  auto scan_option_comparator = [dataset_comparator](\n+                                    const dataset::ScanNodeOptions& lhs,\n+                                    const dataset::ScanNodeOptions& rhs) -> bool {\n+    bool cmp_rso = lhs.require_sequenced_output == rhs.require_sequenced_output;\n+    bool cmp_ds = dataset_comparator(lhs.dataset, rhs.dataset);\n+    return cmp_rso && cmp_ds;\n+  };\n\nReview Comment:\n   cc @westonpace @lidavidm \r\n   Would it be better to add a Equals method for `ScanNodeOptions` and may be even for all the other `ExecNodeOptions`?\n\n\n\n",
                    "created": "2022-06-20T05:50:52.921+0000",
                    "updated": "2022-06-20T05:50:52.921+0000",
                    "started": "2022-06-20T05:50:52.921+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "782817",
                    "issueId": "13450855"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13450855/worklog/782844",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on PR #13401:\nURL: https://github.com/apache/arrow/pull/13401#issuecomment-1160081211\n\n   I'm out Monday & Tuesday.  Maybe @jvanstraten can take a look?  Otherwise I can get to this on Wednesday \n\n\n",
                    "created": "2022-06-20T07:34:51.144+0000",
                    "updated": "2022-06-20T07:34:51.144+0000",
                    "started": "2022-06-20T07:34:51.143+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "782844",
                    "issueId": "13450855"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13450855/worklog/782858",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on PR #13401:\nURL: https://github.com/apache/arrow/pull/13401#issuecomment-1160100835\n\n   > I'm out Monday & Tuesday. Maybe @jvanstraten can take a look? Otherwise I can get to this on Wednesday\r\n   \r\n   Wednesday works for me \ud83d\udc4d \n\n\n",
                    "created": "2022-06-20T07:55:07.945+0000",
                    "updated": "2022-06-20T07:55:07.945+0000",
                    "started": "2022-06-20T07:55:07.945+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "782858",
                    "issueId": "13450855"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13450855/worklog/782920",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jvanstraten commented on PR #13401:\nURL: https://github.com/apache/arrow/pull/13401#issuecomment-1160229357\n\n   I don't feel qualified to comment on those design questions, but FWIW, I ran the serialized output of the test case through the validator and it's okay-ish (the validator doesn't like the lack of a `NULLABILITY_REQUIRED` in the struct that represents the schema, but that's pretty pedantic I guess), and the code looks fine to me.\n\n\n",
                    "created": "2022-06-20T09:53:17.481+0000",
                    "updated": "2022-06-20T09:53:17.481+0000",
                    "started": "2022-06-20T09:53:17.481+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "782920",
                    "issueId": "13450855"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13450855/worklog/782922",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on PR #13401:\nURL: https://github.com/apache/arrow/pull/13401#issuecomment-1160235282\n\n   > I don't feel qualified to comment on those design questions, but FWIW, I ran the serialized output of the test case through the validator and it's okay-ish (the validator doesn't like the lack of a `NULLABILITY_REQUIRED` in the struct that represents the schema, but that's pretty pedantic I guess), and the code looks fine to me.\r\n   \r\n   Thanks a lot for the quick check on this. It\u2019s very interesting how you validated things using the tool. Do you think it\u2019s wise to add a CI to test Substrait related queries using this tool? \r\n   \r\n   Please feel free to add suggestions. @jvanstraten \r\n   \r\n   \r\n   One doubtful thing is to check in serialization is whether a projection or filter expression is added or not/ differentiation from default values. For instance filter expression defaults to a boolean literal of value true.\r\n   \r\n   \r\n   cc @westonpace For future reference in the review. \r\n   \n\n\n",
                    "created": "2022-06-20T09:59:01.842+0000",
                    "updated": "2022-06-20T09:59:01.842+0000",
                    "started": "2022-06-20T09:59:01.841+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "782922",
                    "issueId": "13450855"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13450855/worklog/782938",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jvanstraten commented on PR #13401:\nURL: https://github.com/apache/arrow/pull/13401#issuecomment-1160287804\n\n   > Do you think it\u2019s wise to add a CI to test Substrait related queries using this tool?\r\n   \r\n   IMO every roundtripped plan in every Substrait consumer and/or producer should also be passed through the validator. Otherwise, how would you know for sure that the Substrait plan you've successfully roundtripped through is actually sensible in any way? It does always require a complete plan, though, so you'd need some or other function for each type of thing (expression, relation, etc) that surrounds the thing with a dummy plan. Arrow could hook into it via the C interface (it's not a very pleasant interface because it's intended to be compatible with any language that can call into C, so you might want to wrap it with some C++ stuff; also it will need a Rust compiler to build) or it could just execute the CLI on a generated file (more clunky, but that can just be pulled from PyPI in binary form, so it's probably a bit easier on CI).\r\n   \r\n   I'm sure I'm biased though, since I'm the one who made the validator. It's also starting to considerably lag behind Substrait; it doesn't seem like anyone is sufficiently interested to review/collaborate, so I can't get any PRs through.\r\n   \r\n   Link, just in case: https://github.com/substrait-io/substrait-validator\r\n   \r\n   > One doubtful thing is to check in serialization is whether a projection or filter expression is added or not/ differentiation from default values. For instance filter expression defaults to a boolean literal of value true.\r\n   \r\n   Assuming you mean that in Acero the filter expression is mandatory and is just set to literal true if there is none, IMO you could just do the same thing on the Substrait side, at least for now. Likewise for the projection. Or you could just leave it for a later PR and error out when presented with nontrivial values. I don't know how hard any of these things are; I've never done anything with the Acero representation.\n\n\n",
                    "created": "2022-06-20T10:41:46.964+0000",
                    "updated": "2022-06-20T10:41:46.964+0000",
                    "started": "2022-06-20T10:41:46.964+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "782938",
                    "issueId": "13450855"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13450855/worklog/782959",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on code in PR #13401:\nURL: https://github.com/apache/arrow/pull/13401#discussion_r901579403\n\n\n##########\ncpp/src/arrow/engine/substrait/serde_test.cc:\n##########\n@@ -1173,5 +1175,168 @@ TEST(Substrait, JoinPlanInvalidKeys) {\n           &ext_set));\n }\n \n+TEST(Substrait, SerializeRelation) {\n+#ifdef _WIN32\n+  GTEST_SKIP() << \"ARROW-16392: Substrait File URI not supported for Windows\";\n+#else\n+  ExtensionSet ext_set;\n+  auto dummy_schema = schema({field(\"f1\", int32()), field(\"f2\", int32())});\n+  // creating a dummy dataset using a dummy table\n+  auto format = std::make_shared<arrow::dataset::ParquetFileFormat>();\n+  auto filesystem = std::make_shared<fs::LocalFileSystem>();\n+\n+  std::vector<fs::FileInfo> files;\n+  const std::vector<std::string> f_paths = {\"/tmp/data1.parquet\", \"/tmp/data2.parquet\"};\n+\n+  for (const auto& f_path : f_paths) {\n+    ASSERT_OK_AND_ASSIGN(auto f_file, filesystem->GetFileInfo(f_path));\n+    files.push_back(std::move(f_file));\n+  }\n+\n+  ASSERT_OK_AND_ASSIGN(auto ds_factory, dataset::FileSystemDatasetFactory::Make(\n+                                            std::move(filesystem), std::move(files),\n+                                            std::move(format), {}));\n+  ASSERT_OK_AND_ASSIGN(auto dataset, ds_factory->Finish(dummy_schema));\n+\n+  auto options = std::make_shared<dataset::ScanOptions>();\n+  options->projection = compute::project({}, {});\n+  auto scan_node_options = dataset::ScanNodeOptions{dataset, options};\n+\n+  auto scan_declaration = compute::Declaration({\"scan\", scan_node_options});\n+\n+  ASSERT_OK_AND_ASSIGN(auto serialized_rel,\n+                       SerializeRelation(scan_declaration, &ext_set));\n+  ASSERT_OK_AND_ASSIGN(auto deserialized_decl,\n+                       DeserializeRelation(*serialized_rel, ext_set));\n+\n+  auto dataset_comparator = [](std::shared_ptr<dataset::Dataset> ds_lhs,\n+                               std::shared_ptr<dataset::Dataset> ds_rhs) -> bool {\n+    const auto& fds_lhs = checked_cast<const dataset::FileSystemDataset&>(*ds_lhs);\n+    const auto& fds_rhs = checked_cast<const dataset::FileSystemDataset&>(*ds_lhs);\n+    const auto& files_lhs = fds_lhs.files();\n+    const auto& files_rhs = fds_rhs.files();\n+\n+    bool cmp_fsize = files_lhs.size() == files_rhs.size();\n+    uint64_t fidx = 0;\n+    for (const auto& l_file : files_lhs) {\n+      if (l_file != files_rhs[fidx]) {\n+        return false;\n+      }\n+      fidx++;\n+    }\n+    bool cmp_file_format = fds_lhs.format()->Equals(*fds_lhs.format());\n+    bool cmp_file_system = fds_lhs.filesystem()->Equals(fds_rhs.filesystem());\n+    return cmp_fsize && cmp_file_format && cmp_file_system;\n+  };\n+\n+  auto scan_option_comparator = [dataset_comparator](\n+                                    const dataset::ScanNodeOptions& lhs,\n+                                    const dataset::ScanNodeOptions& rhs) -> bool {\n+    bool cmp_rso = lhs.require_sequenced_output == rhs.require_sequenced_output;\n+    bool cmp_ds = dataset_comparator(lhs.dataset, rhs.dataset);\n+    return cmp_rso && cmp_ds;\n+  };\n\nReview Comment:\n   Yes, let's add Equals where necessary. You can also inherit from [EqualityComparable](https://github.com/apache/arrow/blob/master/cpp/src/arrow/util/compare.h)\n\n\n\n",
                    "created": "2022-06-20T11:53:29.803+0000",
                    "updated": "2022-06-20T11:53:29.803+0000",
                    "started": "2022-06-20T11:53:29.802+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "782959",
                    "issueId": "13450855"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13450855/worklog/782990",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on PR #13401:\nURL: https://github.com/apache/arrow/pull/13401#issuecomment-1160488517\n\n   > > Do you think it\u2019s wise to add a CI to test Substrait related queries using this tool?\r\n   > \r\n   > IMO every roundtripped plan in every Substrait consumer and/or producer should also be passed through the validator. Otherwise, how would you know for sure that the Substrait plan you've successfully roundtripped through is actually sensible in any way? It does always require a complete plan, though, so you'd need some or other function for each type of thing (expression, relation, etc) that surrounds the thing with a dummy plan. Arrow could hook into it via the C interface (it's not a very pleasant interface because it's intended to be compatible with any language that can call into C, so you might want to wrap it with some C++ stuff; also it will need a Rust compiler to build) or it could just execute the CLI on a generated file (more clunky, but that can just be pulled from PyPI in binary form, so it's probably a bit easier on CI).\r\n   > \r\n   > I'm sure I'm biased though, since I'm the one who made the validator. It's also starting to considerably lag behind Substrait; it doesn't seem like anyone is sufficiently interested to review/collaborate, so I can't get any PRs through.\r\n   > \r\n   > Link, just in case: https://github.com/substrait-io/substrait-validator\r\n   \r\n   Intersting thoughts. I will take a look at the tool. It would be better if we can use it to validate things. But I am not sure if it needs to be inside the Arrow source or should it be a plugin for Apache Arrow. cc @westonpace \r\n   \r\n   > > One doubtful thing is to check in serialization is whether a projection or filter expression is added or not/ differentiation from default values. For instance filter expression defaults to a boolean literal of value true.\r\n   > \r\n   > Assuming you mean that in Acero the filter expression is mandatory and is just set to literal true if there is none, IMO you could just do the same thing on the Substrait side, at least for now. Likewise for the projection. Or you could just leave it for a later PR and error out when presented with nontrivial values. I don't know how hard any of these things are; I've never done anything with the Acero representation.\r\n   \r\n   Here it is rather, the differentiation between a user passed value vs the default. We could assume the default and do the comparison to see if an explicit value is passed. There is no API calls in Expression to check if it `has_filter` or `has_projection`. May be that kind of a function could be useful. \r\n   \n\n\n",
                    "created": "2022-06-20T14:02:43.182+0000",
                    "updated": "2022-06-20T14:02:43.182+0000",
                    "started": "2022-06-20T14:02:43.182+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "782990",
                    "issueId": "13450855"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13450855/worklog/782992",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on code in PR #13401:\nURL: https://github.com/apache/arrow/pull/13401#discussion_r901698427\n\n\n##########\ncpp/src/arrow/engine/substrait/serde_test.cc:\n##########\n@@ -1173,5 +1175,168 @@ TEST(Substrait, JoinPlanInvalidKeys) {\n           &ext_set));\n }\n \n+TEST(Substrait, SerializeRelation) {\n+#ifdef _WIN32\n+  GTEST_SKIP() << \"ARROW-16392: Substrait File URI not supported for Windows\";\n+#else\n+  ExtensionSet ext_set;\n+  auto dummy_schema = schema({field(\"f1\", int32()), field(\"f2\", int32())});\n+  // creating a dummy dataset using a dummy table\n+  auto format = std::make_shared<arrow::dataset::ParquetFileFormat>();\n+  auto filesystem = std::make_shared<fs::LocalFileSystem>();\n+\n+  std::vector<fs::FileInfo> files;\n+  const std::vector<std::string> f_paths = {\"/tmp/data1.parquet\", \"/tmp/data2.parquet\"};\n+\n+  for (const auto& f_path : f_paths) {\n+    ASSERT_OK_AND_ASSIGN(auto f_file, filesystem->GetFileInfo(f_path));\n+    files.push_back(std::move(f_file));\n+  }\n+\n+  ASSERT_OK_AND_ASSIGN(auto ds_factory, dataset::FileSystemDatasetFactory::Make(\n+                                            std::move(filesystem), std::move(files),\n+                                            std::move(format), {}));\n+  ASSERT_OK_AND_ASSIGN(auto dataset, ds_factory->Finish(dummy_schema));\n+\n+  auto options = std::make_shared<dataset::ScanOptions>();\n+  options->projection = compute::project({}, {});\n+  auto scan_node_options = dataset::ScanNodeOptions{dataset, options};\n+\n+  auto scan_declaration = compute::Declaration({\"scan\", scan_node_options});\n+\n+  ASSERT_OK_AND_ASSIGN(auto serialized_rel,\n+                       SerializeRelation(scan_declaration, &ext_set));\n+  ASSERT_OK_AND_ASSIGN(auto deserialized_decl,\n+                       DeserializeRelation(*serialized_rel, ext_set));\n+\n+  auto dataset_comparator = [](std::shared_ptr<dataset::Dataset> ds_lhs,\n+                               std::shared_ptr<dataset::Dataset> ds_rhs) -> bool {\n+    const auto& fds_lhs = checked_cast<const dataset::FileSystemDataset&>(*ds_lhs);\n+    const auto& fds_rhs = checked_cast<const dataset::FileSystemDataset&>(*ds_lhs);\n+    const auto& files_lhs = fds_lhs.files();\n+    const auto& files_rhs = fds_rhs.files();\n+\n+    bool cmp_fsize = files_lhs.size() == files_rhs.size();\n+    uint64_t fidx = 0;\n+    for (const auto& l_file : files_lhs) {\n+      if (l_file != files_rhs[fidx]) {\n+        return false;\n+      }\n+      fidx++;\n+    }\n+    bool cmp_file_format = fds_lhs.format()->Equals(*fds_lhs.format());\n+    bool cmp_file_system = fds_lhs.filesystem()->Equals(fds_rhs.filesystem());\n+    return cmp_fsize && cmp_file_format && cmp_file_system;\n+  };\n+\n+  auto scan_option_comparator = [dataset_comparator](\n+                                    const dataset::ScanNodeOptions& lhs,\n+                                    const dataset::ScanNodeOptions& rhs) -> bool {\n+    bool cmp_rso = lhs.require_sequenced_output == rhs.require_sequenced_output;\n+    bool cmp_ds = dataset_comparator(lhs.dataset, rhs.dataset);\n+    return cmp_rso && cmp_ds;\n+  };\n\nReview Comment:\n   Great, should it be a separate PR or we just include here?\n\n\n\n",
                    "created": "2022-06-20T14:03:51.153+0000",
                    "updated": "2022-06-20T14:03:51.153+0000",
                    "started": "2022-06-20T14:03:51.152+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "782992",
                    "issueId": "13450855"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13450855/worklog/782993",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on code in PR #13401:\nURL: https://github.com/apache/arrow/pull/13401#discussion_r901699154\n\n\n##########\ncpp/src/arrow/engine/substrait/serde_test.cc:\n##########\n@@ -1173,5 +1175,168 @@ TEST(Substrait, JoinPlanInvalidKeys) {\n           &ext_set));\n }\n \n+TEST(Substrait, SerializeRelation) {\n+#ifdef _WIN32\n+  GTEST_SKIP() << \"ARROW-16392: Substrait File URI not supported for Windows\";\n+#else\n+  ExtensionSet ext_set;\n+  auto dummy_schema = schema({field(\"f1\", int32()), field(\"f2\", int32())});\n+  // creating a dummy dataset using a dummy table\n+  auto format = std::make_shared<arrow::dataset::ParquetFileFormat>();\n+  auto filesystem = std::make_shared<fs::LocalFileSystem>();\n+\n+  std::vector<fs::FileInfo> files;\n+  const std::vector<std::string> f_paths = {\"/tmp/data1.parquet\", \"/tmp/data2.parquet\"};\n+\n+  for (const auto& f_path : f_paths) {\n+    ASSERT_OK_AND_ASSIGN(auto f_file, filesystem->GetFileInfo(f_path));\n+    files.push_back(std::move(f_file));\n+  }\n+\n+  ASSERT_OK_AND_ASSIGN(auto ds_factory, dataset::FileSystemDatasetFactory::Make(\n+                                            std::move(filesystem), std::move(files),\n+                                            std::move(format), {}));\n+  ASSERT_OK_AND_ASSIGN(auto dataset, ds_factory->Finish(dummy_schema));\n+\n+  auto options = std::make_shared<dataset::ScanOptions>();\n+  options->projection = compute::project({}, {});\n+  auto scan_node_options = dataset::ScanNodeOptions{dataset, options};\n+\n+  auto scan_declaration = compute::Declaration({\"scan\", scan_node_options});\n+\n+  ASSERT_OK_AND_ASSIGN(auto serialized_rel,\n+                       SerializeRelation(scan_declaration, &ext_set));\n+  ASSERT_OK_AND_ASSIGN(auto deserialized_decl,\n+                       DeserializeRelation(*serialized_rel, ext_set));\n+\n+  auto dataset_comparator = [](std::shared_ptr<dataset::Dataset> ds_lhs,\n+                               std::shared_ptr<dataset::Dataset> ds_rhs) -> bool {\n+    const auto& fds_lhs = checked_cast<const dataset::FileSystemDataset&>(*ds_lhs);\n+    const auto& fds_rhs = checked_cast<const dataset::FileSystemDataset&>(*ds_lhs);\n+    const auto& files_lhs = fds_lhs.files();\n+    const auto& files_rhs = fds_rhs.files();\n+\n+    bool cmp_fsize = files_lhs.size() == files_rhs.size();\n+    uint64_t fidx = 0;\n+    for (const auto& l_file : files_lhs) {\n+      if (l_file != files_rhs[fidx]) {\n+        return false;\n+      }\n+      fidx++;\n+    }\n+    bool cmp_file_format = fds_lhs.format()->Equals(*fds_lhs.format());\n+    bool cmp_file_system = fds_lhs.filesystem()->Equals(fds_rhs.filesystem());\n+    return cmp_fsize && cmp_file_format && cmp_file_system;\n+  };\n+\n+  auto scan_option_comparator = [dataset_comparator](\n+                                    const dataset::ScanNodeOptions& lhs,\n+                                    const dataset::ScanNodeOptions& rhs) -> bool {\n+    bool cmp_rso = lhs.require_sequenced_output == rhs.require_sequenced_output;\n+    bool cmp_ds = dataset_comparator(lhs.dataset, rhs.dataset);\n+    return cmp_rso && cmp_ds;\n+  };\n\nReview Comment:\n   We can just do it here IMO\n\n\n\n",
                    "created": "2022-06-20T14:04:36.280+0000",
                    "updated": "2022-06-20T14:04:36.280+0000",
                    "started": "2022-06-20T14:04:36.279+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "782993",
                    "issueId": "13450855"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13450855/worklog/783003",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on code in PR #13401:\nURL: https://github.com/apache/arrow/pull/13401#discussion_r901731391\n\n\n##########\ncpp/src/arrow/engine/substrait/serde_test.cc:\n##########\n@@ -1173,5 +1175,168 @@ TEST(Substrait, JoinPlanInvalidKeys) {\n           &ext_set));\n }\n \n+TEST(Substrait, SerializeRelation) {\n+#ifdef _WIN32\n+  GTEST_SKIP() << \"ARROW-16392: Substrait File URI not supported for Windows\";\n+#else\n+  ExtensionSet ext_set;\n+  auto dummy_schema = schema({field(\"f1\", int32()), field(\"f2\", int32())});\n+  // creating a dummy dataset using a dummy table\n+  auto format = std::make_shared<arrow::dataset::ParquetFileFormat>();\n+  auto filesystem = std::make_shared<fs::LocalFileSystem>();\n+\n+  std::vector<fs::FileInfo> files;\n+  const std::vector<std::string> f_paths = {\"/tmp/data1.parquet\", \"/tmp/data2.parquet\"};\n+\n+  for (const auto& f_path : f_paths) {\n+    ASSERT_OK_AND_ASSIGN(auto f_file, filesystem->GetFileInfo(f_path));\n+    files.push_back(std::move(f_file));\n+  }\n+\n+  ASSERT_OK_AND_ASSIGN(auto ds_factory, dataset::FileSystemDatasetFactory::Make(\n+                                            std::move(filesystem), std::move(files),\n+                                            std::move(format), {}));\n+  ASSERT_OK_AND_ASSIGN(auto dataset, ds_factory->Finish(dummy_schema));\n+\n+  auto options = std::make_shared<dataset::ScanOptions>();\n+  options->projection = compute::project({}, {});\n+  auto scan_node_options = dataset::ScanNodeOptions{dataset, options};\n+\n+  auto scan_declaration = compute::Declaration({\"scan\", scan_node_options});\n+\n+  ASSERT_OK_AND_ASSIGN(auto serialized_rel,\n+                       SerializeRelation(scan_declaration, &ext_set));\n+  ASSERT_OK_AND_ASSIGN(auto deserialized_decl,\n+                       DeserializeRelation(*serialized_rel, ext_set));\n+\n+  auto dataset_comparator = [](std::shared_ptr<dataset::Dataset> ds_lhs,\n+                               std::shared_ptr<dataset::Dataset> ds_rhs) -> bool {\n+    const auto& fds_lhs = checked_cast<const dataset::FileSystemDataset&>(*ds_lhs);\n+    const auto& fds_rhs = checked_cast<const dataset::FileSystemDataset&>(*ds_lhs);\n+    const auto& files_lhs = fds_lhs.files();\n+    const auto& files_rhs = fds_rhs.files();\n+\n+    bool cmp_fsize = files_lhs.size() == files_rhs.size();\n+    uint64_t fidx = 0;\n+    for (const auto& l_file : files_lhs) {\n+      if (l_file != files_rhs[fidx]) {\n+        return false;\n+      }\n+      fidx++;\n+    }\n+    bool cmp_file_format = fds_lhs.format()->Equals(*fds_lhs.format());\n+    bool cmp_file_system = fds_lhs.filesystem()->Equals(fds_rhs.filesystem());\n+    return cmp_fsize && cmp_file_format && cmp_file_system;\n+  };\n+\n+  auto scan_option_comparator = [dataset_comparator](\n+                                    const dataset::ScanNodeOptions& lhs,\n+                                    const dataset::ScanNodeOptions& rhs) -> bool {\n+    bool cmp_rso = lhs.require_sequenced_output == rhs.require_sequenced_output;\n+    bool cmp_ds = dataset_comparator(lhs.dataset, rhs.dataset);\n+    return cmp_rso && cmp_ds;\n+  };\n\nReview Comment:\n   Sure I will add it here.\n\n\n\n",
                    "created": "2022-06-20T14:28:14.103+0000",
                    "updated": "2022-06-20T14:28:14.103+0000",
                    "started": "2022-06-20T14:28:14.102+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "783003",
                    "issueId": "13450855"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13450855/worklog/784174",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on code in PR #13401:\nURL: https://github.com/apache/arrow/pull/13401#discussion_r904933144\n\n\n##########\ncpp/src/arrow/engine/substrait/serde_test.cc:\n##########\n@@ -1173,5 +1175,168 @@ TEST(Substrait, JoinPlanInvalidKeys) {\n           &ext_set));\n }\n \n+TEST(Substrait, SerializeRelation) {\n+#ifdef _WIN32\n+  GTEST_SKIP() << \"ARROW-16392: Substrait File URI not supported for Windows\";\n+#else\n+  ExtensionSet ext_set;\n+  auto dummy_schema = schema({field(\"f1\", int32()), field(\"f2\", int32())});\n+  // creating a dummy dataset using a dummy table\n+  auto format = std::make_shared<arrow::dataset::ParquetFileFormat>();\n+  auto filesystem = std::make_shared<fs::LocalFileSystem>();\n+\n+  std::vector<fs::FileInfo> files;\n+  const std::vector<std::string> f_paths = {\"/tmp/data1.parquet\", \"/tmp/data2.parquet\"};\n+\n+  for (const auto& f_path : f_paths) {\n+    ASSERT_OK_AND_ASSIGN(auto f_file, filesystem->GetFileInfo(f_path));\n+    files.push_back(std::move(f_file));\n+  }\n+\n+  ASSERT_OK_AND_ASSIGN(auto ds_factory, dataset::FileSystemDatasetFactory::Make(\n+                                            std::move(filesystem), std::move(files),\n+                                            std::move(format), {}));\n+  ASSERT_OK_AND_ASSIGN(auto dataset, ds_factory->Finish(dummy_schema));\n+\n+  auto options = std::make_shared<dataset::ScanOptions>();\n+  options->projection = compute::project({}, {});\n+  auto scan_node_options = dataset::ScanNodeOptions{dataset, options};\n+\n+  auto scan_declaration = compute::Declaration({\"scan\", scan_node_options});\n+\n+  ASSERT_OK_AND_ASSIGN(auto serialized_rel,\n+                       SerializeRelation(scan_declaration, &ext_set));\n+  ASSERT_OK_AND_ASSIGN(auto deserialized_decl,\n+                       DeserializeRelation(*serialized_rel, ext_set));\n+\n+  auto dataset_comparator = [](std::shared_ptr<dataset::Dataset> ds_lhs,\n+                               std::shared_ptr<dataset::Dataset> ds_rhs) -> bool {\n+    const auto& fds_lhs = checked_cast<const dataset::FileSystemDataset&>(*ds_lhs);\n+    const auto& fds_rhs = checked_cast<const dataset::FileSystemDataset&>(*ds_lhs);\n+    const auto& files_lhs = fds_lhs.files();\n+    const auto& files_rhs = fds_rhs.files();\n+\n+    bool cmp_fsize = files_lhs.size() == files_rhs.size();\n+    uint64_t fidx = 0;\n+    for (const auto& l_file : files_lhs) {\n+      if (l_file != files_rhs[fidx]) {\n+        return false;\n+      }\n+      fidx++;\n+    }\n+    bool cmp_file_format = fds_lhs.format()->Equals(*fds_lhs.format());\n+    bool cmp_file_system = fds_lhs.filesystem()->Equals(fds_rhs.filesystem());\n+    return cmp_fsize && cmp_file_format && cmp_file_system;\n+  };\n+\n+  auto scan_option_comparator = [dataset_comparator](\n+                                    const dataset::ScanNodeOptions& lhs,\n+                                    const dataset::ScanNodeOptions& rhs) -> bool {\n+    bool cmp_rso = lhs.require_sequenced_output == rhs.require_sequenced_output;\n+    bool cmp_ds = dataset_comparator(lhs.dataset, rhs.dataset);\n+    return cmp_rso && cmp_ds;\n+  };\n\nReview Comment:\n   @lidavidm \r\n   Regarding the `Equals` methods required, \r\n   \r\n   For `FileSystemDataset` we need to consider the, `FileFormat` (`Equals` available), `FileSystem` (`Equals` available), `FileFragment` (`Equals` TODO add method straightforward), `Partitioning` (`Equals` TODO needs to Add method for Base class and for child classes) and `FragmentSubtree` (`Equals` TODO add method - straightforward)\r\n   \r\n   Is it still okay to add these change in the same PR?\n\n\n\n",
                    "created": "2022-06-23T12:01:26.193+0000",
                    "updated": "2022-06-23T12:01:26.193+0000",
                    "started": "2022-06-23T12:01:26.193+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "784174",
                    "issueId": "13450855"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13450855/worklog/784175",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on code in PR #13401:\nURL: https://github.com/apache/arrow/pull/13401#discussion_r904933667\n\n\n##########\ncpp/src/arrow/engine/substrait/serde_test.cc:\n##########\n@@ -1173,5 +1175,168 @@ TEST(Substrait, JoinPlanInvalidKeys) {\n           &ext_set));\n }\n \n+TEST(Substrait, SerializeRelation) {\n+#ifdef _WIN32\n+  GTEST_SKIP() << \"ARROW-16392: Substrait File URI not supported for Windows\";\n+#else\n+  ExtensionSet ext_set;\n+  auto dummy_schema = schema({field(\"f1\", int32()), field(\"f2\", int32())});\n+  // creating a dummy dataset using a dummy table\n+  auto format = std::make_shared<arrow::dataset::ParquetFileFormat>();\n+  auto filesystem = std::make_shared<fs::LocalFileSystem>();\n+\n+  std::vector<fs::FileInfo> files;\n+  const std::vector<std::string> f_paths = {\"/tmp/data1.parquet\", \"/tmp/data2.parquet\"};\n+\n+  for (const auto& f_path : f_paths) {\n+    ASSERT_OK_AND_ASSIGN(auto f_file, filesystem->GetFileInfo(f_path));\n+    files.push_back(std::move(f_file));\n+  }\n+\n+  ASSERT_OK_AND_ASSIGN(auto ds_factory, dataset::FileSystemDatasetFactory::Make(\n+                                            std::move(filesystem), std::move(files),\n+                                            std::move(format), {}));\n+  ASSERT_OK_AND_ASSIGN(auto dataset, ds_factory->Finish(dummy_schema));\n+\n+  auto options = std::make_shared<dataset::ScanOptions>();\n+  options->projection = compute::project({}, {});\n+  auto scan_node_options = dataset::ScanNodeOptions{dataset, options};\n+\n+  auto scan_declaration = compute::Declaration({\"scan\", scan_node_options});\n+\n+  ASSERT_OK_AND_ASSIGN(auto serialized_rel,\n+                       SerializeRelation(scan_declaration, &ext_set));\n+  ASSERT_OK_AND_ASSIGN(auto deserialized_decl,\n+                       DeserializeRelation(*serialized_rel, ext_set));\n+\n+  auto dataset_comparator = [](std::shared_ptr<dataset::Dataset> ds_lhs,\n+                               std::shared_ptr<dataset::Dataset> ds_rhs) -> bool {\n+    const auto& fds_lhs = checked_cast<const dataset::FileSystemDataset&>(*ds_lhs);\n+    const auto& fds_rhs = checked_cast<const dataset::FileSystemDataset&>(*ds_lhs);\n+    const auto& files_lhs = fds_lhs.files();\n+    const auto& files_rhs = fds_rhs.files();\n+\n+    bool cmp_fsize = files_lhs.size() == files_rhs.size();\n+    uint64_t fidx = 0;\n+    for (const auto& l_file : files_lhs) {\n+      if (l_file != files_rhs[fidx]) {\n+        return false;\n+      }\n+      fidx++;\n+    }\n+    bool cmp_file_format = fds_lhs.format()->Equals(*fds_lhs.format());\n+    bool cmp_file_system = fds_lhs.filesystem()->Equals(fds_rhs.filesystem());\n+    return cmp_fsize && cmp_file_format && cmp_file_system;\n+  };\n+\n+  auto scan_option_comparator = [dataset_comparator](\n+                                    const dataset::ScanNodeOptions& lhs,\n+                                    const dataset::ScanNodeOptions& rhs) -> bool {\n+    bool cmp_rso = lhs.require_sequenced_output == rhs.require_sequenced_output;\n+    bool cmp_ds = dataset_comparator(lhs.dataset, rhs.dataset);\n+    return cmp_rso && cmp_ds;\n+  };\n\nReview Comment:\n   Please note that the current `Equals` lambdas doesn't contain the complete functionality. \n\n\n\n",
                    "created": "2022-06-23T12:02:01.029+0000",
                    "updated": "2022-06-23T12:02:01.029+0000",
                    "started": "2022-06-23T12:02:01.028+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "784175",
                    "issueId": "13450855"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13450855/worklog/784176",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on code in PR #13401:\nURL: https://github.com/apache/arrow/pull/13401#discussion_r904933888\n\n\n##########\ncpp/src/arrow/engine/substrait/serde_test.cc:\n##########\n@@ -1173,5 +1175,168 @@ TEST(Substrait, JoinPlanInvalidKeys) {\n           &ext_set));\n }\n \n+TEST(Substrait, SerializeRelation) {\n+#ifdef _WIN32\n+  GTEST_SKIP() << \"ARROW-16392: Substrait File URI not supported for Windows\";\n+#else\n+  ExtensionSet ext_set;\n+  auto dummy_schema = schema({field(\"f1\", int32()), field(\"f2\", int32())});\n+  // creating a dummy dataset using a dummy table\n+  auto format = std::make_shared<arrow::dataset::ParquetFileFormat>();\n+  auto filesystem = std::make_shared<fs::LocalFileSystem>();\n+\n+  std::vector<fs::FileInfo> files;\n+  const std::vector<std::string> f_paths = {\"/tmp/data1.parquet\", \"/tmp/data2.parquet\"};\n+\n+  for (const auto& f_path : f_paths) {\n+    ASSERT_OK_AND_ASSIGN(auto f_file, filesystem->GetFileInfo(f_path));\n+    files.push_back(std::move(f_file));\n+  }\n+\n+  ASSERT_OK_AND_ASSIGN(auto ds_factory, dataset::FileSystemDatasetFactory::Make(\n+                                            std::move(filesystem), std::move(files),\n+                                            std::move(format), {}));\n+  ASSERT_OK_AND_ASSIGN(auto dataset, ds_factory->Finish(dummy_schema));\n+\n+  auto options = std::make_shared<dataset::ScanOptions>();\n+  options->projection = compute::project({}, {});\n+  auto scan_node_options = dataset::ScanNodeOptions{dataset, options};\n+\n+  auto scan_declaration = compute::Declaration({\"scan\", scan_node_options});\n+\n+  ASSERT_OK_AND_ASSIGN(auto serialized_rel,\n+                       SerializeRelation(scan_declaration, &ext_set));\n+  ASSERT_OK_AND_ASSIGN(auto deserialized_decl,\n+                       DeserializeRelation(*serialized_rel, ext_set));\n+\n+  auto dataset_comparator = [](std::shared_ptr<dataset::Dataset> ds_lhs,\n+                               std::shared_ptr<dataset::Dataset> ds_rhs) -> bool {\n+    const auto& fds_lhs = checked_cast<const dataset::FileSystemDataset&>(*ds_lhs);\n+    const auto& fds_rhs = checked_cast<const dataset::FileSystemDataset&>(*ds_lhs);\n+    const auto& files_lhs = fds_lhs.files();\n+    const auto& files_rhs = fds_rhs.files();\n+\n+    bool cmp_fsize = files_lhs.size() == files_rhs.size();\n+    uint64_t fidx = 0;\n+    for (const auto& l_file : files_lhs) {\n+      if (l_file != files_rhs[fidx]) {\n+        return false;\n+      }\n+      fidx++;\n+    }\n+    bool cmp_file_format = fds_lhs.format()->Equals(*fds_lhs.format());\n+    bool cmp_file_system = fds_lhs.filesystem()->Equals(fds_rhs.filesystem());\n+    return cmp_fsize && cmp_file_format && cmp_file_system;\n+  };\n+\n+  auto scan_option_comparator = [dataset_comparator](\n+                                    const dataset::ScanNodeOptions& lhs,\n+                                    const dataset::ScanNodeOptions& rhs) -> bool {\n+    bool cmp_rso = lhs.require_sequenced_output == rhs.require_sequenced_output;\n+    bool cmp_ds = dataset_comparator(lhs.dataset, rhs.dataset);\n+    return cmp_rso && cmp_ds;\n+  };\n\nReview Comment:\n   I don't see why not\n\n\n\n",
                    "created": "2022-06-23T12:02:16.097+0000",
                    "updated": "2022-06-23T12:02:16.097+0000",
                    "started": "2022-06-23T12:02:16.097+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "784176",
                    "issueId": "13450855"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13450855/worklog/784177",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on code in PR #13401:\nURL: https://github.com/apache/arrow/pull/13401#discussion_r904934325\n\n\n##########\ncpp/src/arrow/engine/substrait/serde_test.cc:\n##########\n@@ -1173,5 +1175,168 @@ TEST(Substrait, JoinPlanInvalidKeys) {\n           &ext_set));\n }\n \n+TEST(Substrait, SerializeRelation) {\n+#ifdef _WIN32\n+  GTEST_SKIP() << \"ARROW-16392: Substrait File URI not supported for Windows\";\n+#else\n+  ExtensionSet ext_set;\n+  auto dummy_schema = schema({field(\"f1\", int32()), field(\"f2\", int32())});\n+  // creating a dummy dataset using a dummy table\n+  auto format = std::make_shared<arrow::dataset::ParquetFileFormat>();\n+  auto filesystem = std::make_shared<fs::LocalFileSystem>();\n+\n+  std::vector<fs::FileInfo> files;\n+  const std::vector<std::string> f_paths = {\"/tmp/data1.parquet\", \"/tmp/data2.parquet\"};\n+\n+  for (const auto& f_path : f_paths) {\n+    ASSERT_OK_AND_ASSIGN(auto f_file, filesystem->GetFileInfo(f_path));\n+    files.push_back(std::move(f_file));\n+  }\n+\n+  ASSERT_OK_AND_ASSIGN(auto ds_factory, dataset::FileSystemDatasetFactory::Make(\n+                                            std::move(filesystem), std::move(files),\n+                                            std::move(format), {}));\n+  ASSERT_OK_AND_ASSIGN(auto dataset, ds_factory->Finish(dummy_schema));\n+\n+  auto options = std::make_shared<dataset::ScanOptions>();\n+  options->projection = compute::project({}, {});\n+  auto scan_node_options = dataset::ScanNodeOptions{dataset, options};\n+\n+  auto scan_declaration = compute::Declaration({\"scan\", scan_node_options});\n+\n+  ASSERT_OK_AND_ASSIGN(auto serialized_rel,\n+                       SerializeRelation(scan_declaration, &ext_set));\n+  ASSERT_OK_AND_ASSIGN(auto deserialized_decl,\n+                       DeserializeRelation(*serialized_rel, ext_set));\n+\n+  auto dataset_comparator = [](std::shared_ptr<dataset::Dataset> ds_lhs,\n+                               std::shared_ptr<dataset::Dataset> ds_rhs) -> bool {\n+    const auto& fds_lhs = checked_cast<const dataset::FileSystemDataset&>(*ds_lhs);\n+    const auto& fds_rhs = checked_cast<const dataset::FileSystemDataset&>(*ds_lhs);\n+    const auto& files_lhs = fds_lhs.files();\n+    const auto& files_rhs = fds_rhs.files();\n+\n+    bool cmp_fsize = files_lhs.size() == files_rhs.size();\n+    uint64_t fidx = 0;\n+    for (const auto& l_file : files_lhs) {\n+      if (l_file != files_rhs[fidx]) {\n+        return false;\n+      }\n+      fidx++;\n+    }\n+    bool cmp_file_format = fds_lhs.format()->Equals(*fds_lhs.format());\n+    bool cmp_file_system = fds_lhs.filesystem()->Equals(fds_rhs.filesystem());\n+    return cmp_fsize && cmp_file_format && cmp_file_system;\n+  };\n+\n+  auto scan_option_comparator = [dataset_comparator](\n+                                    const dataset::ScanNodeOptions& lhs,\n+                                    const dataset::ScanNodeOptions& rhs) -> bool {\n+    bool cmp_rso = lhs.require_sequenced_output == rhs.require_sequenced_output;\n+    bool cmp_ds = dataset_comparator(lhs.dataset, rhs.dataset);\n+    return cmp_rso && cmp_ds;\n+  };\n\nReview Comment:\n   It's up to your judgement, though. If you feel like we need to make a new Jira to add those methods and tests, then go ahead.\n\n\n\n",
                    "created": "2022-06-23T12:02:46.151+0000",
                    "updated": "2022-06-23T12:02:46.151+0000",
                    "started": "2022-06-23T12:02:46.151+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "784177",
                    "issueId": "13450855"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
            "id": "7",
            "description": "The sub-task of the issue",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
            "name": "Sub-task",
            "subtask": true,
            "avatarId": 21146
        },
        "timespent": 60000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@547fb0c5[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7b08a5df[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@65149661[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@5b0ce141[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@614a47ea[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@a903439[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4bf61c94[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@77ccfa42[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@448a9646[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@4fb05312[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3459f4cc[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@245716ef[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 60000,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Sep 08 15:14:55 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-09-08T15:14:55.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-16855/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2022-06-20T01:06:29.000+0000",
        "updated": "2022-09-08T21:22:58.000+0000",
        "timeoriginalestimate": null,
        "description": "The `ToProto` functionality for Read relation in Substrait must be added. Here the expected outcome is to recreate the `scan` node in ACERO using the received Substrait-relation.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "16h 40m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 60000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Adding Read Relation ToProto",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13450855/comment/17601878",
                    "id": "17601878",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "Issue resolved by pull request 13401\r\nhttps://github.com/apache/arrow/pull/13401",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2022-09-08T15:14:55.636+0000",
                    "updated": "2022-09-08T15:14:55.636+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z13dbs:",
        "customfield_12314139": null
    }
}