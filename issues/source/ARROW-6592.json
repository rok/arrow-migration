{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13257282",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257282",
    "key": "ARROW-6592",
    "fields": {
        "parent": {
            "id": "13243176",
            "key": "ARROW-5845",
            "self": "https://issues.apache.org/jira/rest/api/2/issue/13243176",
            "fields": {
                "summary": "[Java] Implement converter between Arrow record batches and Avro records",
                "status": {
                    "self": "https://issues.apache.org/jira/rest/api/2/status/4",
                    "description": "This issue was once resolved, but the resolution was deemed incorrect. From here issues are either marked assigned or resolved.",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/reopened.png",
                    "name": "Reopened",
                    "id": "4",
                    "statusCategory": {
                        "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                        "id": 2,
                        "key": "new",
                        "colorName": "blue-gray",
                        "name": "To Do"
                    }
                },
                "priority": {
                    "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                    "name": "Major",
                    "id": "3"
                },
                "issuetype": {
                    "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                    "id": "2",
                    "description": "A new feature of the product, which has yet to be developed.",
                    "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                    "name": "New Feature",
                    "subtask": false,
                    "avatarId": 21141
                }
            }
        },
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12340948",
                "id": "12340948",
                "description": "",
                "name": "0.16.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-02-07"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "avro",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12570100",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12570100",
                "type": {
                    "id": "10020",
                    "name": "Cloners",
                    "inward": "is cloned by",
                    "outward": "is a clone of",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10020"
                },
                "inwardIssue": {
                    "id": "13257284",
                    "key": "ARROW-6593",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257284",
                    "fields": {
                        "summary": "[Java] Experiment with performance difference of avoiding the use of Avro Decoder",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
                            "id": "7",
                            "description": "The sub-task of the issue",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
                            "name": "Sub-task",
                            "subtask": true,
                            "avatarId": 21146
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=tianchen92",
            "name": "tianchen92",
            "key": "tianchen92",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=tianchen92&avatarId=40800",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=tianchen92&avatarId=40800",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=tianchen92&avatarId=40800",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=tianchen92&avatarId=40800"
            },
            "displayName": "Ji Liu",
            "active": true,
            "timeZone": "Asia/Gaza"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328933",
                "id": "12328933",
                "name": "Java"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield%40gmail.com",
            "name": "emkornfield@gmail.com",
            "key": "emkornfield@gmail.com",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Micah Kornfield",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield%40gmail.com",
            "name": "emkornfield@gmail.com",
            "key": "emkornfield@gmail.com",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Micah Kornfield",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 28800,
            "total": 28800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 28800,
            "total": 28800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-6592/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 52,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257282/worklog/317207",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "tianchen92 commented on pull request #5482: ARROW-6592: [Java] Add support for skipping decoding of columns/field in Avro converter\nURL: https://github.com/apache/arrow/pull/5482\n \n \n   Related to [ARROW-6592](https://issues.apache.org/jira/browse/ARROW-6592).\r\n   \r\n   Users should be able to pass in a set of fields they wish to decode from Avro and the converter should avoid creating Vectors in the returned ArrowSchemaRoot.  This would ideally support nested columns so if there was:\r\n   \r\n   Struct A\r\n   {     int B;     int C; }\r\n   The use could choose to only read A.B or A.C or both.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-24T06:45:00.939+0000",
                    "updated": "2019-09-24T06:45:00.939+0000",
                    "started": "2019-09-24T06:45:00.939+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "317207",
                    "issueId": "13257282"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257282/worklog/320252",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on issue #5482: ARROW-6592: [Java] Add support for skipping decoding of columns/field in Avro converter\nURL: https://github.com/apache/arrow/pull/5482#issuecomment-536329765\n \n \n   https://issues.apache.org/jira/browse/ARROW-6592\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-29T18:46:11.508+0000",
                    "updated": "2019-09-29T18:46:11.508+0000",
                    "started": "2019-09-29T18:46:11.507+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "320252",
                    "issueId": "13257282"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257282/worklog/323390",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "tianchen92 commented on issue #5482: ARROW-6592: [Java] Add support for skipping decoding of columns/field in Avro converter\nURL: https://github.com/apache/arrow/pull/5482#issuecomment-538378040\n \n \n   cc @emkornfield \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-04T12:34:48.524+0000",
                    "updated": "2019-10-04T12:34:48.524+0000",
                    "started": "2019-10-04T12:34:48.523+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "323390",
                    "issueId": "13257282"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257282/worklog/323685",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #5482: ARROW-6592: [Java] Add support for skipping decoding of columns/field in Avro converter\nURL: https://github.com/apache/arrow/pull/5482#discussion_r331673063\n \n \n\n ##########\n File path: java/adapter/avro/src/main/java/org/apache/arrow/AvroToArrowUtils.java\n ##########\n @@ -221,16 +226,106 @@ private static Consumer createConsumer(\n     return consumer;\n   }\n \n+\n+  private static Consumer createSkippableConsumer(Schema schema) {\n+\n+    SkipFunction skipFunction;\n+    Type type = schema.getType();\n+\n+    switch (type) {\n+      case UNION:\n+        int size = schema.getTypes().size();\n+        long nullCount = schema.getTypes().stream().filter(s -> s.getType() == Type.NULL).count();\n+        if (size == 1) {\n+          return createSkippableConsumer(schema.getTypes().get(0));\n+          // nullable primitive type\n+        } else if (size == 2 && nullCount == 1) {\n+          Schema nullSchema = schema.getTypes().stream().filter(s -> s.getType() == Type.NULL).findFirst().get();\n+          int nullIndex = schema.getTypes().indexOf(nullSchema);\n+          Schema subSchema = schema.getTypes().stream().filter(s -> s.getType() != Type.NULL).findFirst().get();\n+          Preconditions.checkNotNull(subSchema, \"schema should not be null.\");\n+          final Consumer consumer = createSkippableConsumer(subSchema);\n+          return new NullableTypeConsumer(consumer, nullIndex);\n+          // real union type\n+        } else {\n+\n+          List<Consumer> delegates = schema.getTypes().stream().map(s ->\n+              createSkippableConsumer(s)).collect(Collectors.toList());\n+          skipFunction =  decoder -> delegates.get(decoder.readInt()).consume(decoder);\n+\n+          break;\n+        }\n+      case ARRAY:\n+        skipFunction = decoder -> decoder.skipArray();\n+        break;\n+      case MAP:\n+        skipFunction = decoder -> decoder.skipMap();\n \n Review comment:\n   same note about skipping.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-04T20:38:40.384+0000",
                    "updated": "2019-10-04T20:38:40.384+0000",
                    "started": "2019-10-04T20:38:40.383+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "323685",
                    "issueId": "13257282"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257282/worklog/323686",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #5482: ARROW-6592: [Java] Add support for skipping decoding of columns/field in Avro converter\nURL: https://github.com/apache/arrow/pull/5482#discussion_r331672937\n \n \n\n ##########\n File path: java/adapter/avro/src/main/java/org/apache/arrow/AvroToArrowUtils.java\n ##########\n @@ -221,16 +226,106 @@ private static Consumer createConsumer(\n     return consumer;\n   }\n \n+\n+  private static Consumer createSkippableConsumer(Schema schema) {\n+\n+    SkipFunction skipFunction;\n+    Type type = schema.getType();\n+\n+    switch (type) {\n+      case UNION:\n+        int size = schema.getTypes().size();\n+        long nullCount = schema.getTypes().stream().filter(s -> s.getType() == Type.NULL).count();\n+        if (size == 1) {\n+          return createSkippableConsumer(schema.getTypes().get(0));\n+          // nullable primitive type\n+        } else if (size == 2 && nullCount == 1) {\n+          Schema nullSchema = schema.getTypes().stream().filter(s -> s.getType() == Type.NULL).findFirst().get();\n+          int nullIndex = schema.getTypes().indexOf(nullSchema);\n+          Schema subSchema = schema.getTypes().stream().filter(s -> s.getType() != Type.NULL).findFirst().get();\n+          Preconditions.checkNotNull(subSchema, \"schema should not be null.\");\n+          final Consumer consumer = createSkippableConsumer(subSchema);\n+          return new NullableTypeConsumer(consumer, nullIndex);\n+          // real union type\n+        } else {\n+\n+          List<Consumer> delegates = schema.getTypes().stream().map(s ->\n+              createSkippableConsumer(s)).collect(Collectors.toList());\n+          skipFunction =  decoder -> delegates.get(decoder.readInt()).consume(decoder);\n+\n+          break;\n+        }\n+      case ARRAY:\n+        skipFunction = decoder -> decoder.skipArray();\n \n Review comment:\n   I think this needs be in a loop.  Based on the java-doc:\r\n   for(long i = in.skipArray(); i != 0; i = i.skipArray()) {\r\n        for (long j = 0; j < i; j++) {\r\n          read and discard the next element of the array;\r\n        }\r\n      }\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-04T20:38:40.556+0000",
                    "updated": "2019-10-04T20:38:40.556+0000",
                    "started": "2019-10-04T20:38:40.556+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "323686",
                    "issueId": "13257282"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257282/worklog/323687",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #5482: ARROW-6592: [Java] Add support for skipping decoding of columns/field in Avro converter\nURL: https://github.com/apache/arrow/pull/5482#discussion_r331673483\n \n \n\n ##########\n File path: java/adapter/avro/src/main/java/org/apache/arrow/AvroToArrowConfigBuilder.java\n ##########\n @@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.vector.dictionary.DictionaryProvider;\n+\n+/**\n+ * This class builds {@link AvroToArrowConfig}s.\n+ */\n+public class AvroToArrowConfigBuilder {\n+\n+  private  BufferAllocator allocator;\n+\n+  private int targetBatchSize;\n+\n+  private DictionaryProvider.MapDictionaryProvider provider;\n+\n+  private  List<String> skipFieldNames;\n \n Review comment:\n   weird spacing?  Should this be a set instead?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-04T20:38:40.560+0000",
                    "updated": "2019-10-04T20:38:40.560+0000",
                    "started": "2019-10-04T20:38:40.559+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "323687",
                    "issueId": "13257282"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257282/worklog/323688",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #5482: ARROW-6592: [Java] Add support for skipping decoding of columns/field in Avro converter\nURL: https://github.com/apache/arrow/pull/5482#discussion_r331673733\n \n \n\n ##########\n File path: java/adapter/avro/src/main/java/org/apache/arrow/AvroToArrowUtils.java\n ##########\n @@ -221,16 +226,106 @@ private static Consumer createConsumer(\n     return consumer;\n   }\n \n+\n+  private static Consumer createSkippableConsumer(Schema schema) {\n+\n+    SkipFunction skipFunction;\n+    Type type = schema.getType();\n+\n+    switch (type) {\n+      case UNION:\n+        int size = schema.getTypes().size();\n+        long nullCount = schema.getTypes().stream().filter(s -> s.getType() == Type.NULL).count();\n+        if (size == 1) {\n+          return createSkippableConsumer(schema.getTypes().get(0));\n+          // nullable primitive type\n+        } else if (size == 2 && nullCount == 1) {\n+          Schema nullSchema = schema.getTypes().stream().filter(s -> s.getType() == Type.NULL).findFirst().get();\n+          int nullIndex = schema.getTypes().indexOf(nullSchema);\n+          Schema subSchema = schema.getTypes().stream().filter(s -> s.getType() != Type.NULL).findFirst().get();\n+          Preconditions.checkNotNull(subSchema, \"schema should not be null.\");\n+          final Consumer consumer = createSkippableConsumer(subSchema);\n+          return new NullableTypeConsumer(consumer, nullIndex);\n+          // real union type\n+        } else {\n+\n+          List<Consumer> delegates = schema.getTypes().stream().map(s ->\n+              createSkippableConsumer(s)).collect(Collectors.toList());\n+          skipFunction =  decoder -> delegates.get(decoder.readInt()).consume(decoder);\n+\n+          break;\n+        }\n+      case ARRAY:\n+        skipFunction = decoder -> decoder.skipArray();\n+        break;\n+      case MAP:\n+        skipFunction = decoder -> decoder.skipMap();\n+        break;\n+      case RECORD:\n+        List<Consumer> delegates = schema.getFields().stream().map(field ->\n+            createSkippableConsumer(field.schema())).collect(Collectors.toList());\n+\n+        skipFunction = decoder -> {\n+          for (Consumer consumer : delegates) {\n+            consumer.consume(decoder);\n+          }\n+        };\n+\n+        break;\n+      case ENUM:\n+        skipFunction = decoder -> decoder.readEnum();\n+        break;\n+      case STRING:\n+        skipFunction = decoder -> decoder.skipString();\n+        break;\n+      case FIXED:\n+        skipFunction = decoder -> decoder.skipFixed(schema.getFixedSize());\n+        break;\n+      case INT:\n+        skipFunction = decoder -> decoder.readInt();\n+        break;\n+      case BOOLEAN:\n+        skipFunction = decoder -> decoder.skipFixed(1);\n+        break;\n+      case LONG:\n+        skipFunction = decoder -> decoder.readLong();\n+        break;\n+      case FLOAT:\n+        skipFunction = decoder -> decoder.readFloat();\n+        break;\n+      case DOUBLE:\n+        skipFunction = decoder -> decoder.readDouble();\n+        break;\n+      case BYTES:\n+        skipFunction = decoder -> decoder.skipBytes();\n+        break;\n+      case NULL:\n+        skipFunction = decoder -> { };\n+        break;\n+      default:\n+        // no-op, shouldn't get here\n+        throw new RuntimeException(\"Invalid avro type: \" + type.getName());\n \n Review comment:\n   UnsupportedOperationException might be more appropriate.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-04T20:38:40.581+0000",
                    "updated": "2019-10-04T20:38:40.581+0000",
                    "started": "2019-10-04T20:38:40.580+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "323688",
                    "issueId": "13257282"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257282/worklog/323690",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #5482: ARROW-6592: [Java] Add support for skipping decoding of columns/field in Avro converter\nURL: https://github.com/apache/arrow/pull/5482#discussion_r331676752\n \n \n\n ##########\n File path: java/adapter/avro/src/main/java/org/apache/arrow/consumers/CompositeAvroConsumer.java\n ##########\n @@ -53,8 +53,12 @@ public void consume(Decoder decoder, VectorSchemaRoot root) throws IOException {\n    * Reset vector of consumers with the given {@link VectorSchemaRoot}.\n    */\n   public void resetConsumerVectors(VectorSchemaRoot root) {\n-    for (int i = 0; i < root.getFieldVectors().size(); i++) {\n-      consumers.get(i).resetValueVector(root.getFieldVectors().get(i));\n+    int index = 0;\n+    for (Consumer consumer : consumers) {\n+      if (consumer instanceof SkippableConsumer) {\n+        continue;\n+      }\n+      consumer.resetValueVector(root.getFieldVectors().get(index++));\n \n Review comment:\n   it might be cleaner to have this return a boolean to indicate if the field should be advanced instead of checking for a specific class type.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-04T20:38:40.584+0000",
                    "updated": "2019-10-04T20:38:40.584+0000",
                    "started": "2019-10-04T20:38:40.584+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "323690",
                    "issueId": "13257282"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257282/worklog/323689",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #5482: ARROW-6592: [Java] Add support for skipping decoding of columns/field in Avro converter\nURL: https://github.com/apache/arrow/pull/5482#discussion_r331676119\n \n \n\n ##########\n File path: java/adapter/avro/src/main/java/org/apache/arrow/AvroToArrowUtils.java\n ##########\n @@ -221,16 +226,106 @@ private static Consumer createConsumer(\n     return consumer;\n   }\n \n+\n+  private static Consumer createSkippableConsumer(Schema schema) {\n+\n+    SkipFunction skipFunction;\n+    Type type = schema.getType();\n+\n+    switch (type) {\n+      case UNION:\n+        int size = schema.getTypes().size();\n+        long nullCount = schema.getTypes().stream().filter(s -> s.getType() == Type.NULL).count();\n+        if (size == 1) {\n+          return createSkippableConsumer(schema.getTypes().get(0));\n+          // nullable primitive type\n+        } else if (size == 2 && nullCount == 1) {\n+          Schema nullSchema = schema.getTypes().stream().filter(s -> s.getType() == Type.NULL).findFirst().get();\n+          int nullIndex = schema.getTypes().indexOf(nullSchema);\n+          Schema subSchema = schema.getTypes().stream().filter(s -> s.getType() != Type.NULL).findFirst().get();\n+          Preconditions.checkNotNull(subSchema, \"schema should not be null.\");\n+          final Consumer consumer = createSkippableConsumer(subSchema);\n+          return new NullableTypeConsumer(consumer, nullIndex);\n+          // real union type\n+        } else {\n+\n+          List<Consumer> delegates = schema.getTypes().stream().map(s ->\n+              createSkippableConsumer(s)).collect(Collectors.toList());\n+          skipFunction =  decoder -> delegates.get(decoder.readInt()).consume(decoder);\n+\n+          break;\n+        }\n+      case ARRAY:\n+        skipFunction = decoder -> decoder.skipArray();\n+        break;\n+      case MAP:\n+        skipFunction = decoder -> decoder.skipMap();\n+        break;\n+      case RECORD:\n+        List<Consumer> delegates = schema.getFields().stream().map(field ->\n+            createSkippableConsumer(field.schema())).collect(Collectors.toList());\n+\n+        skipFunction = decoder -> {\n+          for (Consumer consumer : delegates) {\n+            consumer.consume(decoder);\n+          }\n+        };\n+\n+        break;\n+      case ENUM:\n+        skipFunction = decoder -> decoder.readEnum();\n+        break;\n+      case STRING:\n+        skipFunction = decoder -> decoder.skipString();\n+        break;\n+      case FIXED:\n+        skipFunction = decoder -> decoder.skipFixed(schema.getFixedSize());\n+        break;\n+      case INT:\n+        skipFunction = decoder -> decoder.readInt();\n+        break;\n+      case BOOLEAN:\n+        skipFunction = decoder -> decoder.skipFixed(1);\n+        break;\n+      case LONG:\n+        skipFunction = decoder -> decoder.readLong();\n+        break;\n+      case FLOAT:\n+        skipFunction = decoder -> decoder.readFloat();\n+        break;\n+      case DOUBLE:\n+        skipFunction = decoder -> decoder.readDouble();\n+        break;\n+      case BYTES:\n+        skipFunction = decoder -> decoder.skipBytes();\n+        break;\n+      case NULL:\n+        skipFunction = decoder -> { };\n+        break;\n+      default:\n+        // no-op, shouldn't get here\n+        throw new RuntimeException(\"Invalid avro type: \" + type.getName());\n+    }\n+\n+    return new SkippableConsumer(skipFunction);\n+  }\n+\n   static CompositeAvroConsumer createCompositeConsumer(\n       Schema schema, AvroToArrowConfig config) {\n \n     List<Consumer> consumers = new ArrayList<>();\n+    final List<String> skipFieldNames = config.getSkipFieldNames();\n \n     Schema.Type type = schema.getType();\n     if (type == Type.RECORD) {\n       for (Schema.Field field : schema.getFields()) {\n-        Consumer consumer = createConsumer(field.schema(), field.name(), config);\n-        consumers.add(consumer);\n+        if (skipFieldNames.contains(field.name())) {\n \n Review comment:\n   what happens if a parent and child field have the same name?  Is this possible?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-04T20:38:40.584+0000",
                    "updated": "2019-10-04T20:38:40.584+0000",
                    "started": "2019-10-04T20:38:40.584+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "323689",
                    "issueId": "13257282"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257282/worklog/323691",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #5482: ARROW-6592: [Java] Add support for skipping decoding of columns/field in Avro converter\nURL: https://github.com/apache/arrow/pull/5482#discussion_r331674873\n \n \n\n ##########\n File path: java/adapter/avro/src/main/java/org/apache/arrow/consumers/SkipFunction.java\n ##########\n @@ -0,0 +1,30 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.consumers;\n+\n+import java.io.IOException;\n+\n+import org.apache.avro.io.Decoder;\n+\n+/**\n+ * Avro adapter skip function.\n \n Review comment:\n   ```suggestion\r\n    * Adapter function to skip (throw away) data from the decoder.\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-04T20:38:40.695+0000",
                    "updated": "2019-10-04T20:38:40.695+0000",
                    "started": "2019-10-04T20:38:40.695+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "323691",
                    "issueId": "13257282"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257282/worklog/324010",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "tianchen92 commented on pull request #5482: ARROW-6592: [Java] Add support for skipping decoding of columns/field in Avro converter\nURL: https://github.com/apache/arrow/pull/5482#discussion_r331771935\n \n \n\n ##########\n File path: java/adapter/avro/src/main/java/org/apache/arrow/AvroToArrowUtils.java\n ##########\n @@ -221,16 +226,106 @@ private static Consumer createConsumer(\n     return consumer;\n   }\n \n+\n+  private static Consumer createSkippableConsumer(Schema schema) {\n+\n+    SkipFunction skipFunction;\n+    Type type = schema.getType();\n+\n+    switch (type) {\n+      case UNION:\n+        int size = schema.getTypes().size();\n+        long nullCount = schema.getTypes().stream().filter(s -> s.getType() == Type.NULL).count();\n+        if (size == 1) {\n+          return createSkippableConsumer(schema.getTypes().get(0));\n+          // nullable primitive type\n+        } else if (size == 2 && nullCount == 1) {\n+          Schema nullSchema = schema.getTypes().stream().filter(s -> s.getType() == Type.NULL).findFirst().get();\n+          int nullIndex = schema.getTypes().indexOf(nullSchema);\n+          Schema subSchema = schema.getTypes().stream().filter(s -> s.getType() != Type.NULL).findFirst().get();\n+          Preconditions.checkNotNull(subSchema, \"schema should not be null.\");\n+          final Consumer consumer = createSkippableConsumer(subSchema);\n+          return new NullableTypeConsumer(consumer, nullIndex);\n+          // real union type\n+        } else {\n+\n+          List<Consumer> delegates = schema.getTypes().stream().map(s ->\n+              createSkippableConsumer(s)).collect(Collectors.toList());\n+          skipFunction =  decoder -> delegates.get(decoder.readInt()).consume(decoder);\n+\n+          break;\n+        }\n+      case ARRAY:\n+        skipFunction = decoder -> decoder.skipArray();\n+        break;\n+      case MAP:\n+        skipFunction = decoder -> decoder.skipMap();\n+        break;\n+      case RECORD:\n+        List<Consumer> delegates = schema.getFields().stream().map(field ->\n+            createSkippableConsumer(field.schema())).collect(Collectors.toList());\n+\n+        skipFunction = decoder -> {\n+          for (Consumer consumer : delegates) {\n+            consumer.consume(decoder);\n+          }\n+        };\n+\n+        break;\n+      case ENUM:\n+        skipFunction = decoder -> decoder.readEnum();\n+        break;\n+      case STRING:\n+        skipFunction = decoder -> decoder.skipString();\n+        break;\n+      case FIXED:\n+        skipFunction = decoder -> decoder.skipFixed(schema.getFixedSize());\n+        break;\n+      case INT:\n+        skipFunction = decoder -> decoder.readInt();\n+        break;\n+      case BOOLEAN:\n+        skipFunction = decoder -> decoder.skipFixed(1);\n+        break;\n+      case LONG:\n+        skipFunction = decoder -> decoder.readLong();\n+        break;\n+      case FLOAT:\n+        skipFunction = decoder -> decoder.readFloat();\n+        break;\n+      case DOUBLE:\n+        skipFunction = decoder -> decoder.readDouble();\n+        break;\n+      case BYTES:\n+        skipFunction = decoder -> decoder.skipBytes();\n+        break;\n+      case NULL:\n+        skipFunction = decoder -> { };\n+        break;\n+      default:\n+        // no-op, shouldn't get here\n+        throw new RuntimeException(\"Invalid avro type: \" + type.getName());\n+    }\n+\n+    return new SkippableConsumer(skipFunction);\n+  }\n+\n   static CompositeAvroConsumer createCompositeConsumer(\n       Schema schema, AvroToArrowConfig config) {\n \n     List<Consumer> consumers = new ArrayList<>();\n+    final List<String> skipFieldNames = config.getSkipFieldNames();\n \n     Schema.Type type = schema.getType();\n     if (type == Type.RECORD) {\n       for (Schema.Field field : schema.getFields()) {\n-        Consumer consumer = createConsumer(field.schema(), field.name(), config);\n-        consumers.add(consumer);\n+        if (skipFieldNames.contains(field.name())) {\n \n Review comment:\n   Avro not allow fields have same names, so this case is impossible.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-06T05:36:57.706+0000",
                    "updated": "2019-10-06T05:36:57.706+0000",
                    "started": "2019-10-06T05:36:57.706+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "324010",
                    "issueId": "13257282"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257282/worklog/324011",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "tianchen92 commented on issue #5482: ARROW-6592: [Java] Add support for skipping decoding of columns/field in Avro converter\nURL: https://github.com/apache/arrow/pull/5482#issuecomment-538713877\n \n \n   @emkornfield Thanks for your careful review, I updated PR.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-06T05:37:37.478+0000",
                    "updated": "2019-10-06T05:37:37.478+0000",
                    "started": "2019-10-06T05:37:37.477+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "324011",
                    "issueId": "13257282"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257282/worklog/327214",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #5482: ARROW-6592: [Java] Add support for skipping decoding of columns/field in Avro converter\nURL: https://github.com/apache/arrow/pull/5482#discussion_r334222024\n \n \n\n ##########\n File path: java/adapter/avro/src/main/java/org/apache/arrow/AvroToArrowUtils.java\n ##########\n @@ -221,16 +226,106 @@ private static Consumer createConsumer(\n     return consumer;\n   }\n \n+\n+  private static Consumer createSkippableConsumer(Schema schema) {\n+\n+    SkipFunction skipFunction;\n+    Type type = schema.getType();\n+\n+    switch (type) {\n+      case UNION:\n+        int size = schema.getTypes().size();\n+        long nullCount = schema.getTypes().stream().filter(s -> s.getType() == Type.NULL).count();\n+        if (size == 1) {\n+          return createSkippableConsumer(schema.getTypes().get(0));\n+          // nullable primitive type\n+        } else if (size == 2 && nullCount == 1) {\n+          Schema nullSchema = schema.getTypes().stream().filter(s -> s.getType() == Type.NULL).findFirst().get();\n+          int nullIndex = schema.getTypes().indexOf(nullSchema);\n+          Schema subSchema = schema.getTypes().stream().filter(s -> s.getType() != Type.NULL).findFirst().get();\n+          Preconditions.checkNotNull(subSchema, \"schema should not be null.\");\n+          final Consumer consumer = createSkippableConsumer(subSchema);\n+          return new NullableTypeConsumer(consumer, nullIndex);\n+          // real union type\n+        } else {\n+\n+          List<Consumer> delegates = schema.getTypes().stream().map(s ->\n+              createSkippableConsumer(s)).collect(Collectors.toList());\n+          skipFunction =  decoder -> delegates.get(decoder.readInt()).consume(decoder);\n+\n+          break;\n+        }\n+      case ARRAY:\n+        skipFunction = decoder -> decoder.skipArray();\n+        break;\n+      case MAP:\n+        skipFunction = decoder -> decoder.skipMap();\n+        break;\n+      case RECORD:\n+        List<Consumer> delegates = schema.getFields().stream().map(field ->\n+            createSkippableConsumer(field.schema())).collect(Collectors.toList());\n+\n+        skipFunction = decoder -> {\n+          for (Consumer consumer : delegates) {\n+            consumer.consume(decoder);\n+          }\n+        };\n+\n+        break;\n+      case ENUM:\n+        skipFunction = decoder -> decoder.readEnum();\n+        break;\n+      case STRING:\n+        skipFunction = decoder -> decoder.skipString();\n+        break;\n+      case FIXED:\n+        skipFunction = decoder -> decoder.skipFixed(schema.getFixedSize());\n+        break;\n+      case INT:\n+        skipFunction = decoder -> decoder.readInt();\n+        break;\n+      case BOOLEAN:\n+        skipFunction = decoder -> decoder.skipFixed(1);\n+        break;\n+      case LONG:\n+        skipFunction = decoder -> decoder.readLong();\n+        break;\n+      case FLOAT:\n+        skipFunction = decoder -> decoder.readFloat();\n+        break;\n+      case DOUBLE:\n+        skipFunction = decoder -> decoder.readDouble();\n+        break;\n+      case BYTES:\n+        skipFunction = decoder -> decoder.skipBytes();\n+        break;\n+      case NULL:\n+        skipFunction = decoder -> { };\n+        break;\n+      default:\n+        // no-op, shouldn't get here\n+        throw new RuntimeException(\"Invalid avro type: \" + type.getName());\n+    }\n+\n+    return new SkippableConsumer(skipFunction);\n+  }\n+\n   static CompositeAvroConsumer createCompositeConsumer(\n       Schema schema, AvroToArrowConfig config) {\n \n     List<Consumer> consumers = new ArrayList<>();\n+    final List<String> skipFieldNames = config.getSkipFieldNames();\n \n     Schema.Type type = schema.getType();\n     if (type == Type.RECORD) {\n       for (Schema.Field field : schema.getFields()) {\n-        Consumer consumer = createConsumer(field.schema(), field.name(), config);\n-        consumers.add(consumer);\n+        if (skipFieldNames.contains(field.name())) {\n \n Review comment:\n   ok, could you add a comment here given a reference, and perhaps a unit test that demonstrates this (I would expect parsing a schema with the same name to fail.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-12T05:39:53.364+0000",
                    "updated": "2019-10-12T05:39:53.364+0000",
                    "started": "2019-10-12T05:39:53.363+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "327214",
                    "issueId": "13257282"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257282/worklog/327225",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "tianchen92 commented on pull request #5482: ARROW-6592: [Java] Add support for skipping decoding of columns/field in Avro converter\nURL: https://github.com/apache/arrow/pull/5482#discussion_r334223256\n \n \n\n ##########\n File path: java/adapter/avro/src/main/java/org/apache/arrow/AvroToArrowUtils.java\n ##########\n @@ -221,16 +226,106 @@ private static Consumer createConsumer(\n     return consumer;\n   }\n \n+\n+  private static Consumer createSkippableConsumer(Schema schema) {\n+\n+    SkipFunction skipFunction;\n+    Type type = schema.getType();\n+\n+    switch (type) {\n+      case UNION:\n+        int size = schema.getTypes().size();\n+        long nullCount = schema.getTypes().stream().filter(s -> s.getType() == Type.NULL).count();\n+        if (size == 1) {\n+          return createSkippableConsumer(schema.getTypes().get(0));\n+          // nullable primitive type\n+        } else if (size == 2 && nullCount == 1) {\n+          Schema nullSchema = schema.getTypes().stream().filter(s -> s.getType() == Type.NULL).findFirst().get();\n+          int nullIndex = schema.getTypes().indexOf(nullSchema);\n+          Schema subSchema = schema.getTypes().stream().filter(s -> s.getType() != Type.NULL).findFirst().get();\n+          Preconditions.checkNotNull(subSchema, \"schema should not be null.\");\n+          final Consumer consumer = createSkippableConsumer(subSchema);\n+          return new NullableTypeConsumer(consumer, nullIndex);\n+          // real union type\n+        } else {\n+\n+          List<Consumer> delegates = schema.getTypes().stream().map(s ->\n+              createSkippableConsumer(s)).collect(Collectors.toList());\n+          skipFunction =  decoder -> delegates.get(decoder.readInt()).consume(decoder);\n+\n+          break;\n+        }\n+      case ARRAY:\n+        skipFunction = decoder -> decoder.skipArray();\n+        break;\n+      case MAP:\n+        skipFunction = decoder -> decoder.skipMap();\n+        break;\n+      case RECORD:\n+        List<Consumer> delegates = schema.getFields().stream().map(field ->\n+            createSkippableConsumer(field.schema())).collect(Collectors.toList());\n+\n+        skipFunction = decoder -> {\n+          for (Consumer consumer : delegates) {\n+            consumer.consume(decoder);\n+          }\n+        };\n+\n+        break;\n+      case ENUM:\n+        skipFunction = decoder -> decoder.readEnum();\n+        break;\n+      case STRING:\n+        skipFunction = decoder -> decoder.skipString();\n+        break;\n+      case FIXED:\n+        skipFunction = decoder -> decoder.skipFixed(schema.getFixedSize());\n+        break;\n+      case INT:\n+        skipFunction = decoder -> decoder.readInt();\n+        break;\n+      case BOOLEAN:\n+        skipFunction = decoder -> decoder.skipFixed(1);\n+        break;\n+      case LONG:\n+        skipFunction = decoder -> decoder.readLong();\n+        break;\n+      case FLOAT:\n+        skipFunction = decoder -> decoder.readFloat();\n+        break;\n+      case DOUBLE:\n+        skipFunction = decoder -> decoder.readDouble();\n+        break;\n+      case BYTES:\n+        skipFunction = decoder -> decoder.skipBytes();\n+        break;\n+      case NULL:\n+        skipFunction = decoder -> { };\n+        break;\n+      default:\n+        // no-op, shouldn't get here\n+        throw new RuntimeException(\"Invalid avro type: \" + type.getName());\n+    }\n+\n+    return new SkippableConsumer(skipFunction);\n+  }\n+\n   static CompositeAvroConsumer createCompositeConsumer(\n       Schema schema, AvroToArrowConfig config) {\n \n     List<Consumer> consumers = new ArrayList<>();\n+    final List<String> skipFieldNames = config.getSkipFieldNames();\n \n     Schema.Type type = schema.getType();\n     if (type == Type.RECORD) {\n       for (Schema.Field field : schema.getFields()) {\n-        Consumer consumer = createConsumer(field.schema(), field.name(), config);\n-        consumers.add(consumer);\n+        if (skipFieldNames.contains(field.name())) {\n \n Review comment:\n   sorry to correct, seems same names are supported, schema below is valid:\r\n   >{\r\n    \"namespace\": \"org.apache.arrow.avro\",\r\n    \"type\": \"record\",\r\n    \"name\": \"testSkipNested\",\r\n    \"fields\": [\r\n     {\r\n       \"name\" : \"f1\",\r\n       \"type\" : {\r\n           \"type\" : \"record\",\r\n           \"name\" : \"nestedInRecord\",\r\n           \"fields\": [\r\n                {\"name\": \"f1\", \"type\": \"int\"}\r\n           ]\r\n       }\r\n     }\r\n     ]\r\n   }\r\n   \r\n   Both parent record field and child int field have the same name \"f1\", in this case, the whole record will be skipped when we met the first \"f1\"\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-12T06:26:52.679+0000",
                    "updated": "2019-10-12T06:26:52.679+0000",
                    "started": "2019-10-12T06:26:52.678+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "327225",
                    "issueId": "13257282"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257282/worklog/327253",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "tianchen92 commented on pull request #5482: ARROW-6592: [Java] Add support for skipping decoding of columns/field in Avro converter\nURL: https://github.com/apache/arrow/pull/5482\n \n \n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-12T07:47:45.377+0000",
                    "updated": "2019-10-12T07:47:45.377+0000",
                    "started": "2019-10-12T07:47:45.377+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "327253",
                    "issueId": "13257282"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257282/worklog/327254",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "tianchen92 commented on pull request #5482: ARROW-6592: [Java] Add support for skipping decoding of columns/field in Avro converter\nURL: https://github.com/apache/arrow/pull/5482\n \n \n   Related to [ARROW-6592](https://issues.apache.org/jira/browse/ARROW-6592).\r\n   \r\n   Users should be able to pass in a set of fields they wish to decode from Avro and the converter should avoid creating Vectors in the returned ArrowSchemaRoot.  This would ideally support nested columns so if there was:\r\n   \r\n   Struct A\r\n   {     int B;     int C; }\r\n   The use could choose to only read A.B or A.C or both.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-12T07:47:48.002+0000",
                    "updated": "2019-10-12T07:47:48.002+0000",
                    "started": "2019-10-12T07:47:48.001+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "327254",
                    "issueId": "13257282"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257282/worklog/327411",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "tianchen92 commented on pull request #5482: ARROW-6592: [Java] Add support for skipping decoding of columns/field in Avro converter\nURL: https://github.com/apache/arrow/pull/5482\n \n \n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-13T02:06:44.402+0000",
                    "updated": "2019-10-13T02:06:44.402+0000",
                    "started": "2019-10-13T02:06:44.401+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "327411",
                    "issueId": "13257282"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257282/worklog/327412",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "tianchen92 commented on pull request #5482: ARROW-6592: [Java] Add support for skipping decoding of columns/field in Avro converter\nURL: https://github.com/apache/arrow/pull/5482\n \n \n   Related to [ARROW-6592](https://issues.apache.org/jira/browse/ARROW-6592).\r\n   \r\n   Users should be able to pass in a set of fields they wish to decode from Avro and the converter should avoid creating Vectors in the returned ArrowSchemaRoot.  This would ideally support nested columns so if there was:\r\n   \r\n   Struct A\r\n   {     int B;     int C; }\r\n   The use could choose to only read A.B or A.C or both.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-13T02:06:45.646+0000",
                    "updated": "2019-10-13T02:06:45.646+0000",
                    "started": "2019-10-13T02:06:45.646+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "327412",
                    "issueId": "13257282"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257282/worklog/327733",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "tianchen92 commented on pull request #5482: ARROW-6592: [Java] Add support for skipping decoding of columns/field in Avro converter\nURL: https://github.com/apache/arrow/pull/5482#discussion_r334427088\n \n \n\n ##########\n File path: java/adapter/avro/src/main/java/org/apache/arrow/AvroToArrowUtils.java\n ##########\n @@ -221,16 +226,106 @@ private static Consumer createConsumer(\n     return consumer;\n   }\n \n+\n+  private static Consumer createSkippableConsumer(Schema schema) {\n+\n+    SkipFunction skipFunction;\n+    Type type = schema.getType();\n+\n+    switch (type) {\n+      case UNION:\n+        int size = schema.getTypes().size();\n+        long nullCount = schema.getTypes().stream().filter(s -> s.getType() == Type.NULL).count();\n+        if (size == 1) {\n+          return createSkippableConsumer(schema.getTypes().get(0));\n+          // nullable primitive type\n+        } else if (size == 2 && nullCount == 1) {\n+          Schema nullSchema = schema.getTypes().stream().filter(s -> s.getType() == Type.NULL).findFirst().get();\n+          int nullIndex = schema.getTypes().indexOf(nullSchema);\n+          Schema subSchema = schema.getTypes().stream().filter(s -> s.getType() != Type.NULL).findFirst().get();\n+          Preconditions.checkNotNull(subSchema, \"schema should not be null.\");\n+          final Consumer consumer = createSkippableConsumer(subSchema);\n+          return new NullableTypeConsumer(consumer, nullIndex);\n+          // real union type\n+        } else {\n+\n+          List<Consumer> delegates = schema.getTypes().stream().map(s ->\n+              createSkippableConsumer(s)).collect(Collectors.toList());\n+          skipFunction =  decoder -> delegates.get(decoder.readInt()).consume(decoder);\n+\n+          break;\n+        }\n+      case ARRAY:\n+        skipFunction = decoder -> decoder.skipArray();\n+        break;\n+      case MAP:\n+        skipFunction = decoder -> decoder.skipMap();\n+        break;\n+      case RECORD:\n+        List<Consumer> delegates = schema.getFields().stream().map(field ->\n+            createSkippableConsumer(field.schema())).collect(Collectors.toList());\n+\n+        skipFunction = decoder -> {\n+          for (Consumer consumer : delegates) {\n+            consumer.consume(decoder);\n+          }\n+        };\n+\n+        break;\n+      case ENUM:\n+        skipFunction = decoder -> decoder.readEnum();\n+        break;\n+      case STRING:\n+        skipFunction = decoder -> decoder.skipString();\n+        break;\n+      case FIXED:\n+        skipFunction = decoder -> decoder.skipFixed(schema.getFixedSize());\n+        break;\n+      case INT:\n+        skipFunction = decoder -> decoder.readInt();\n+        break;\n+      case BOOLEAN:\n+        skipFunction = decoder -> decoder.skipFixed(1);\n+        break;\n+      case LONG:\n+        skipFunction = decoder -> decoder.readLong();\n+        break;\n+      case FLOAT:\n+        skipFunction = decoder -> decoder.readFloat();\n+        break;\n+      case DOUBLE:\n+        skipFunction = decoder -> decoder.readDouble();\n+        break;\n+      case BYTES:\n+        skipFunction = decoder -> decoder.skipBytes();\n+        break;\n+      case NULL:\n+        skipFunction = decoder -> { };\n+        break;\n+      default:\n+        // no-op, shouldn't get here\n+        throw new RuntimeException(\"Invalid avro type: \" + type.getName());\n+    }\n+\n+    return new SkippableConsumer(skipFunction);\n+  }\n+\n   static CompositeAvroConsumer createCompositeConsumer(\n       Schema schema, AvroToArrowConfig config) {\n \n     List<Consumer> consumers = new ArrayList<>();\n+    final List<String> skipFieldNames = config.getSkipFieldNames();\n \n     Schema.Type type = schema.getType();\n     if (type == Type.RECORD) {\n       for (Schema.Field field : schema.getFields()) {\n-        Consumer consumer = createConsumer(field.schema(), field.name(), config);\n-        consumers.add(consumer);\n+        if (skipFieldNames.contains(field.name())) {\n \n Review comment:\n   Do you think this is reasonable or we should do something to distinguish them (I think it's a little hard and messy)?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-14T10:59:50.869+0000",
                    "updated": "2019-10-14T10:59:50.869+0000",
                    "started": "2019-10-14T10:59:50.868+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "327733",
                    "issueId": "13257282"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257282/worklog/328341",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #5482: ARROW-6592: [Java] Add support for skipping decoding of columns/field in Avro converter\nURL: https://github.com/apache/arrow/pull/5482#discussion_r334761821\n \n \n\n ##########\n File path: java/adapter/avro/src/main/java/org/apache/arrow/AvroToArrowUtils.java\n ##########\n @@ -221,16 +226,106 @@ private static Consumer createConsumer(\n     return consumer;\n   }\n \n+\n+  private static Consumer createSkippableConsumer(Schema schema) {\n+\n+    SkipFunction skipFunction;\n+    Type type = schema.getType();\n+\n+    switch (type) {\n+      case UNION:\n+        int size = schema.getTypes().size();\n+        long nullCount = schema.getTypes().stream().filter(s -> s.getType() == Type.NULL).count();\n+        if (size == 1) {\n+          return createSkippableConsumer(schema.getTypes().get(0));\n+          // nullable primitive type\n+        } else if (size == 2 && nullCount == 1) {\n+          Schema nullSchema = schema.getTypes().stream().filter(s -> s.getType() == Type.NULL).findFirst().get();\n+          int nullIndex = schema.getTypes().indexOf(nullSchema);\n+          Schema subSchema = schema.getTypes().stream().filter(s -> s.getType() != Type.NULL).findFirst().get();\n+          Preconditions.checkNotNull(subSchema, \"schema should not be null.\");\n+          final Consumer consumer = createSkippableConsumer(subSchema);\n+          return new NullableTypeConsumer(consumer, nullIndex);\n+          // real union type\n+        } else {\n+\n+          List<Consumer> delegates = schema.getTypes().stream().map(s ->\n+              createSkippableConsumer(s)).collect(Collectors.toList());\n+          skipFunction =  decoder -> delegates.get(decoder.readInt()).consume(decoder);\n+\n+          break;\n+        }\n+      case ARRAY:\n+        skipFunction = decoder -> decoder.skipArray();\n+        break;\n+      case MAP:\n+        skipFunction = decoder -> decoder.skipMap();\n+        break;\n+      case RECORD:\n+        List<Consumer> delegates = schema.getFields().stream().map(field ->\n+            createSkippableConsumer(field.schema())).collect(Collectors.toList());\n+\n+        skipFunction = decoder -> {\n+          for (Consumer consumer : delegates) {\n+            consumer.consume(decoder);\n+          }\n+        };\n+\n+        break;\n+      case ENUM:\n+        skipFunction = decoder -> decoder.readEnum();\n+        break;\n+      case STRING:\n+        skipFunction = decoder -> decoder.skipString();\n+        break;\n+      case FIXED:\n+        skipFunction = decoder -> decoder.skipFixed(schema.getFixedSize());\n+        break;\n+      case INT:\n+        skipFunction = decoder -> decoder.readInt();\n+        break;\n+      case BOOLEAN:\n+        skipFunction = decoder -> decoder.skipFixed(1);\n+        break;\n+      case LONG:\n+        skipFunction = decoder -> decoder.readLong();\n+        break;\n+      case FLOAT:\n+        skipFunction = decoder -> decoder.readFloat();\n+        break;\n+      case DOUBLE:\n+        skipFunction = decoder -> decoder.readDouble();\n+        break;\n+      case BYTES:\n+        skipFunction = decoder -> decoder.skipBytes();\n+        break;\n+      case NULL:\n+        skipFunction = decoder -> { };\n+        break;\n+      default:\n+        // no-op, shouldn't get here\n+        throw new RuntimeException(\"Invalid avro type: \" + type.getName());\n+    }\n+\n+    return new SkippableConsumer(skipFunction);\n+  }\n+\n   static CompositeAvroConsumer createCompositeConsumer(\n       Schema schema, AvroToArrowConfig config) {\n \n     List<Consumer> consumers = new ArrayList<>();\n+    final List<String> skipFieldNames = config.getSkipFieldNames();\n \n     Schema.Type type = schema.getType();\n     if (type == Type.RECORD) {\n       for (Schema.Field field : schema.getFields()) {\n-        Consumer consumer = createConsumer(field.schema(), field.name(), config);\n-        consumers.add(consumer);\n+        if (skipFieldNames.contains(field.name())) {\n \n Review comment:\n   I we should do something to distinguish them.  \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-15T05:51:35.696+0000",
                    "updated": "2019-10-15T05:51:35.696+0000",
                    "started": "2019-10-15T05:51:35.696+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "328341",
                    "issueId": "13257282"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
            "id": "7",
            "description": "The sub-task of the issue",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
            "name": "Sub-task",
            "subtask": true,
            "avatarId": 21146
        },
        "timespent": 28800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@28e42eac[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7463ed4f[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@30f1a762[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@5b132da6[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@74f149c3[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@697d477[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3b60b970[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@79dccda7[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@71d2c0e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@3f1174f6[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@104e15d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@1e2ab52f[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 28800,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Oct 28 04:16:59 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-10-28T04:16:59.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-6592/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2019-09-18T05:42:14.000+0000",
        "updated": "2019-10-28T04:16:59.000+0000",
        "timeoriginalestimate": null,
        "description": "Users should be able to pass in a set of fields they wish to decode from Avro and the converter should avoid creating Vectors in the returned ArrowSchemaRoot.\u00a0 This would ideally support nested columns so if there was:\r\n\r\n\u00a0\r\n\r\nStruct A {\r\n\r\n\u00a0 \u00a0 int B;\r\n\r\n\u00a0 \u00a0 int C;\r\n\r\n}\u00a0\r\n\r\n\u00a0\r\n\r\nThe use could choose to only read A.B or A.C or both.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "8h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 28800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Java] Add support for skipping decoding of columns/field in Avro converter",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257282/comment/16960749",
                    "id": "16960749",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield%40gmail.com",
                        "name": "emkornfield@gmail.com",
                        "key": "emkornfield@gmail.com",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Micah Kornfield",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Issue resolved by pull request 5482\n[https://github.com/apache/arrow/pull/5482]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield%40gmail.com",
                        "name": "emkornfield@gmail.com",
                        "key": "emkornfield@gmail.com",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Micah Kornfield",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2019-10-28T04:16:59.984+0000",
                    "updated": "2019-10-28T04:16:59.984+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z06quo:",
        "customfield_12314139": null
    }
}