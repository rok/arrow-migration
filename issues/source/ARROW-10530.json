{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13339598",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13339598",
    "key": "ARROW-10530",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12348823",
                "id": "12348823",
                "description": "",
                "name": "3.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-01-25"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
            "name": "Minor",
            "id": "4"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
            "name": "npr",
            "key": "npr",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Neal Richardson",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333008",
                "id": "12333008",
                "name": "R"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
            "name": "npr",
            "key": "npr",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Neal Richardson",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
            "name": "npr",
            "key": "npr",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Neal Richardson",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "aggregateprogress": {
            "progress": 18000,
            "total": 18000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 18000,
            "total": 18000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10530/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 30,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13339598/worklog/509349",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson opened a new pull request #8618:\nURL: https://github.com/apache/arrow/pull/8618\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-09T20:35:27.964+0000",
                    "updated": "2020-11-09T20:35:27.964+0000",
                    "started": "2020-11-09T20:35:27.964+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "509349",
                    "issueId": "13339598"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13339598/worklog/509353",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #8618:\nURL: https://github.com/apache/arrow/pull/8618#issuecomment-724268622\n\n\n   https://issues.apache.org/jira/browse/ARROW-10530\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-09T20:46:56.403+0000",
                    "updated": "2020-11-09T20:46:56.403+0000",
                    "started": "2020-11-09T20:46:56.403+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "509353",
                    "issueId": "13339598"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13339598/worklog/510968",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #8650:\nURL: https://github.com/apache/arrow/pull/8650#issuecomment-726261100\n\n\n   https://issues.apache.org/jira/browse/ARROW-10530\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-12T18:34:59.085+0000",
                    "updated": "2020-11-12T18:34:59.085+0000",
                    "started": "2020-11-12T18:34:59.085+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "510968",
                    "issueId": "13339598"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13339598/worklog/511371",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois commented on pull request #8650:\nURL: https://github.com/apache/arrow/pull/8650#issuecomment-726775206\n\n\n   Thanks @kszucs for the direct help. This is very far from done, but it's a start, and perhaps we can resume the conversation here. \r\n   \r\n   AFAIK, There is no R equivalent to `PyObject*`, so I'm trying here to mimic that with this: \r\n   \r\n   ```cpp\r\n   struct RObject {\r\n     RVectorType rtype;\r\n     void* data;\r\n     bool null;\r\n   };\r\n   ```\r\n   \r\n   This will evolve (perhaps into some sort of hierarchy) I'm sure as other types join the implementation (for now this only handles going from an R integer vector (INTSXP) to an `int32` Array. \r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-13T13:50:44.773+0000",
                    "updated": "2020-11-13T13:50:44.773+0000",
                    "started": "2020-11-13T13:50:44.773+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "511371",
                    "issueId": "13339598"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13339598/worklog/511379",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois commented on pull request #8650:\nURL: https://github.com/apache/arrow/pull/8650#issuecomment-726789546\n\n\n   ``` r\r\n   library(arrow, warn.conflicts = FALSE)\r\n   \r\n   arrow:::vec_to_arrow(1:2, int32())\r\n   #> Array\r\n   #> <int32>\r\n   #> [\r\n   #>   1,\r\n   #>   2\r\n   #> ]\r\n   arrow:::vec_to_arrow(c(1,2), float64())\r\n   #> Array\r\n   #> <double>\r\n   #> [\r\n   #>   1,\r\n   #>   2\r\n   #> ]\r\n   ```\r\n   \r\n   <sup>Created on 2020-11-13 by the [reprex package](https://reprex.tidyverse.org) (v0.3.0.9001)</sup>\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-13T14:18:53.999+0000",
                    "updated": "2020-11-13T14:18:53.999+0000",
                    "started": "2020-11-13T14:18:53.999+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "511379",
                    "issueId": "13339598"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13339598/worklog/511383",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois edited a comment on pull request #8650:\nURL: https://github.com/apache/arrow/pull/8650#issuecomment-726789546\n\n\n   ``` r\r\n   library(arrow, warn.conflicts = FALSE)\r\n   \r\n   arrow:::vec_to_arrow(1:2, int32())\r\n   #> Array\r\n   #> <int32>\r\n   #> [\r\n   #>   1,\r\n   #>   2\r\n   #> ]\r\n   arrow:::vec_to_arrow(c(1,2), float64())\r\n   #> Array\r\n   #> <double>\r\n   #> [\r\n   #>   1,\r\n   #>   2\r\n   #> ]\r\n   arrow:::vec_to_arrow(as.raw(c(1,2)), uint8())\r\n   #> Array\r\n   #> <uint8>\r\n   #> [\r\n   #>   1,\r\n   #>   2\r\n   #> ]\r\n   ```\r\n   \r\n   <sup>Created on 2020-11-13 by the [reprex package](https://reprex.tidyverse.org) (v0.3.0.9001)</sup>\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-13T14:29:39.659+0000",
                    "updated": "2020-11-13T14:29:39.659+0000",
                    "started": "2020-11-13T14:29:39.659+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "511383",
                    "issueId": "13339598"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13339598/worklog/511391",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs commented on pull request #8650:\nURL: https://github.com/apache/arrow/pull/8650#issuecomment-726818274\n\n\n   cc @bkietz since we co-authored the python-side refactor\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-13T15:11:07.498+0000",
                    "updated": "2020-11-13T15:11:07.498+0000",
                    "started": "2020-11-13T15:11:07.498+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "511391",
                    "issueId": "13339598"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13339598/worklog/512529",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson closed pull request #8618:\nURL: https://github.com/apache/arrow/pull/8618\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-16T18:56:28.577+0000",
                    "updated": "2020-11-16T18:56:28.577+0000",
                    "started": "2020-11-16T18:56:28.577+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "512529",
                    "issueId": "13339598"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13339598/worklog/517321",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois commented on pull request #8650:\nURL: https://github.com/apache/arrow/pull/8650#issuecomment-734746906\n\n\n   This is still quite wip, as I navigate how the various `Converter` work together. \r\n   \r\n   It all feels a bit weird to operate in terms of single values, i.e. via the `Append()` methods, since R does not have such concept, this has to resort to many casting. \r\n   \r\n   It feels particularly odd with the struct converter (converting from a data frame). As of right now, this is bypassing `Append()` and instead uses a `Visit()` method that appends several (column by column). \r\n   \r\n   Would it make sense to have some sort of vectorised approach ?\r\n   \r\n   Should this instead figure out a way to treat data frames that the struct array gets built row by row instead of column by column ?\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-27T09:49:21.727+0000",
                    "updated": "2020-11-27T09:49:21.727+0000",
                    "started": "2020-11-27T09:49:21.726+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "517321",
                    "issueId": "13339598"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13339598/worklog/517366",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois commented on pull request #8650:\nURL: https://github.com/apache/arrow/pull/8650#issuecomment-734843309\n\n\n   ping @kszucs @bkietz I don't necessarily need a full review at this point, as this is far from done and will need further changes, but perhaps you can have a look and let me know if this goes in the right direction ? cc @nealrichardson \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-27T13:47:50.069+0000",
                    "updated": "2020-11-27T13:47:50.069+0000",
                    "started": "2020-11-27T13:47:50.069+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "517366",
                    "issueId": "13339598"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13339598/worklog/521397",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on pull request #8650:\nURL: https://github.com/apache/arrow/pull/8650#issuecomment-740195890\n\n\n   FYI Windows build failure is\r\n   \r\n   ```\r\n   r_to_arrow.cpp: In instantiation of 'arrow::Status arrow::r::VisitInt64Vector(SEXP, R_xlen_t, VisitorFunc&&) [with VisitorFunc = arrow::r::VisitVector(SEXP, R_xlen_t, T*) [with T = arrow::internal::Converter<arrow::r::RScalar*, arrow::r::RConversionOptions>; SEXP = SEXPREC*; R_xlen_t = int]::<lambda(arrow::r::RScalar*)>; SEXP = SEXPREC*; R_xlen_t = int]':\r\n   r_to_arrow.cpp:512:84:   required from 'arrow::Status arrow::r::VisitVector(SEXP, R_xlen_t, T*) [with T = arrow::internal::Converter<arrow::r::RScalar*, arrow::r::RConversionOptions>; SEXP = SEXPREC*; R_xlen_t = int]'\r\n   r_to_arrow.cpp:535:40:   required from 'arrow::Status arrow::r::Extend(T*, SEXP, R_xlen_t) [with T = arrow::internal::Converter<arrow::r::RScalar*, arrow::r::RConversionOptions>; SEXP = SEXPREC*; R_xlen_t = int]'\r\n   r_to_arrow.cpp:762:7:   required from here\r\n   r_to_arrow.cpp:451:66: error: dereferencing type-punned pointer will break strict-aliasing rules [-Werror=strict-aliasing]\r\n        obj.null = is_NA<int64_t>(*reinterpret_cast<int64_t*>(&value));\r\n                                                                     ^\r\n   ```\r\n   \r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-07T21:39:34.743+0000",
                    "updated": "2020-12-07T21:39:34.743+0000",
                    "started": "2020-12-07T21:39:34.742+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "521397",
                    "issueId": "13339598"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13339598/worklog/521430",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs commented on pull request #8650:\nURL: https://github.com/apache/arrow/pull/8650#issuecomment-740230851\n\n\n   > It all feels a bit weird to operate in terms of single values, i.e. via the `Append()` methods, since R does not have such concept, this has to resort to many casting.\r\n   \r\n   This converter API was designed to operate on list-like collections of generic objects one-by-one. We have different code paths for more efficient conversion from numpy/pandas, see [here](https://github.com/apache/arrow/blob/master/cpp/src/arrow/python/numpy_to_arrow.cc).\r\n   \r\n   > Would it make sense to have some sort of vectorised approach ?\r\n   \r\n   I think so, yes. We could extend the converter API to consume columns instead of individual values. \r\n   \r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-07T22:56:08.955+0000",
                    "updated": "2020-12-07T22:56:08.955+0000",
                    "started": "2020-12-07T22:56:08.955+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "521430",
                    "issueId": "13339598"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13339598/worklog/521435",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on pull request #8650:\nURL: https://github.com/apache/arrow/pull/8650#issuecomment-740235400\n\n\n   > > It all feels a bit weird to operate in terms of single values, i.e. via the `Append()` methods, since R does not have such concept, this has to resort to many casting.\r\n   > \r\n   > This converter API was designed to operate on list-like collections of generic objects one-by-one. We have different code paths for more efficient conversion from numpy/pandas, see [here](https://github.com/apache/arrow/blob/master/cpp/src/arrow/python/numpy_to_arrow.cc).\r\n   > \r\n   \r\n   I'll observe that the PR that added the new converter API made only a [cosmetic change](https://github.com/apache/arrow/commit/87dd7e9894b2beb6310e634764177ab83eac3009#diff-af12e4188d427011f334afe5c1ad8b2aae91270eb7507c92e5318b943d1f0147) to numpy_to_arrow.cc, so maybe it's not so relevant after all?\r\n   \r\n   Row-based conversion might make sense when converting an R list-type object, but otherwise you'd expect something vectorized to be better. For better or worse, now that all of this row-based conversion has been implemented here, we can benchmark both ways and compare.\r\n   \r\n   \r\n   \r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-07T23:07:38.337+0000",
                    "updated": "2020-12-07T23:07:38.337+0000",
                    "started": "2020-12-07T23:07:38.336+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "521435",
                    "issueId": "13339598"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13339598/worklog/521438",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson edited a comment on pull request #8650:\nURL: https://github.com/apache/arrow/pull/8650#issuecomment-740235400\n\n\n   > > It all feels a bit weird to operate in terms of single values, i.e. via the `Append()` methods, since R does not have such concept, this has to resort to many casting.\r\n   > \r\n   > This converter API was designed to operate on list-like collections of generic objects one-by-one. We have different code paths for more efficient conversion from numpy/pandas, see [here](https://github.com/apache/arrow/blob/master/cpp/src/arrow/python/numpy_to_arrow.cc).\r\n   > \r\n   \r\n   I'll observe that the PR that added the new converter API made only a [cosmetic change](https://github.com/apache/arrow/commit/87dd7e9894b2beb6310e634764177ab83eac3009#diff-af12e4188d427011f334afe5c1ad8b2aae91270eb7507c92e5318b943d1f0147) to numpy_to_arrow.cc, so maybe the new API is not so relevant for R after all?\r\n   \r\n   Row-based conversion might make sense when converting an R list-type object, but otherwise you'd expect something vectorized to be better. For better or worse, now that all of this row-based conversion has been implemented here, we can benchmark both ways and compare.\r\n   \r\n   \r\n   \r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-07T23:08:49.776+0000",
                    "updated": "2020-12-07T23:08:49.776+0000",
                    "started": "2020-12-07T23:08:49.776+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "521438",
                    "issueId": "13339598"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13339598/worklog/521444",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs commented on pull request #8650:\nURL: https://github.com/apache/arrow/pull/8650#issuecomment-740237766\n\n\n   > Row-based conversion might make sense when converting an R list-type object, but otherwise you'd expect something vectorized to be better. For better or worse, now that all of this row-based conversion has been implemented here, we can benchmark both ways and compare.\r\n   \r\n   Sorry, it's not about row- vs. column-wise. Currently the converters have an `Append` method to convert and append values one-by-one. We can provide an `AppendMultiple` or something similar to extend the underlying arrays in batches so we can optimize for R's representation. \r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-07T23:13:49.624+0000",
                    "updated": "2020-12-07T23:13:49.624+0000",
                    "started": "2020-12-07T23:13:49.624+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "521444",
                    "issueId": "13339598"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13339598/worklog/521450",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs edited a comment on pull request #8650:\nURL: https://github.com/apache/arrow/pull/8650#issuecomment-740237766\n\n\n   > Row-based conversion might make sense when converting an R list-type object, but otherwise you'd expect something vectorized to be better. For better or worse, now that all of this row-based conversion has been implemented here, we can benchmark both ways and compare.\r\n   \r\n   Sorry, it's not about row- vs. column-wise. Currently the converters have an `Append` method to convert and append values one-by-one. We can provide an `AppendMultiple` or something similar to extend the underlying arrays in batches so we can optimize for R's representation. \r\n   \r\n   I'm going to take a look at the PR to properly answer Romain's questions.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-07T23:24:06.000+0000",
                    "updated": "2020-12-07T23:24:06.000+0000",
                    "started": "2020-12-07T23:24:06.000+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "521450",
                    "issueId": "13339598"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13339598/worklog/521451",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs edited a comment on pull request #8650:\nURL: https://github.com/apache/arrow/pull/8650#issuecomment-740237766\n\n\n   > Row-based conversion might make sense when converting an R list-type object, but otherwise you'd expect something vectorized to be better. For better or worse, now that all of this row-based conversion has been implemented here, we can benchmark both ways and compare.\r\n   \r\n   Sorry, it's not about row- vs. column-wise. Currently the converters have an `Append` method to convert and append values one-by-one. We can provide an `AppendMultiple` or something similar to extend the underlying arrays in batches so we can optimize for R's representation. \r\n   \r\n   I'm going to take a look at the PR tomorrow to properly answer Romain's questions.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-07T23:24:21.440+0000",
                    "updated": "2020-12-07T23:24:21.440+0000",
                    "started": "2020-12-07T23:24:21.439+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "521451",
                    "issueId": "13339598"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13339598/worklog/521608",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois commented on pull request #8650:\nURL: https://github.com/apache/arrow/pull/8650#issuecomment-740504045\n\n\n   I believe `AppendMultiple()` is what I would be looking for. It would e.g. solve my dilemma about converting data frames to struct types ...\r\n   \r\n   I had missed the more efficient python paths, having a look. \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-08T09:37:06.930+0000",
                    "updated": "2020-12-08T09:37:06.930+0000",
                    "started": "2020-12-08T09:37:06.930+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "521608",
                    "issueId": "13339598"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13339598/worklog/521644",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs commented on a change in pull request #8650:\nURL: https://github.com/apache/arrow/pull/8650#discussion_r538269663\n\n\n\n##########\nFile path: r/src/r_to_arrow.cpp\n##########\n@@ -0,0 +1,814 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"./arrow_types.h\"\n+#include \"./arrow_vctrs.h\"\n+\n+#if defined(ARROW_R_WITH_ARROW)\n+#include <arrow/array/builder_base.h>\n+#include <arrow/array/builder_binary.h>\n+#include <arrow/array/builder_decimal.h>\n+#include <arrow/array/builder_dict.h>\n+#include <arrow/array/builder_nested.h>\n+#include <arrow/array/builder_primitive.h>\n+#include <arrow/type_traits.h>\n+#include <arrow/util/checked_cast.h>\n+#include <arrow/util/converter.h>\n+\n+namespace arrow {\n+\n+using internal::checked_cast;\n+using internal::checked_pointer_cast;\n+\n+using internal::Converter;\n+using internal::DictionaryConverter;\n+using internal::ListConverter;\n+using internal::PrimitiveConverter;\n+using internal::StructConverter;\n+\n+using internal::MakeChunker;\n+using internal::MakeConverter;\n+\n+namespace r {\n+\n+struct RConversionOptions {\n+  RConversionOptions() = default;\n+\n+  std::shared_ptr<arrow::DataType> type;\n+  bool strict;\n+  int64_t size;\n+};\n+\n+enum RVectorType {\n+  BOOLEAN,\n+  UINT8,\n+  INT32,\n+  FLOAT64,\n+  INT64,\n+  COMPLEX,\n+  STRING,\n+  DATAFRAME,\n+  DATE,\n+  TIME,\n+  TIMESTAMP,\n+  BINARY,\n+  LIST,\n+  FACTOR,\n+\n+  OTHER\n+};\n+\n+RVectorType GetVectorType(SEXP x) {\n+  switch (TYPEOF(x)) {\n+    case LGLSXP:\n+      return BOOLEAN;\n+    case RAWSXP:\n+      return UINT8;\n+    case INTSXP:\n+      if (Rf_inherits(x, \"factor\")) {\n+        return FACTOR;\n+      }\n+      return INT32;\n+    case STRSXP:\n+      return STRING;\n+    case CPLXSXP:\n+      return COMPLEX;\n+    case REALSXP: {\n+      if (Rf_inherits(x, \"Date\")) {\n+        return DATE;\n+      } else if (Rf_inherits(x, \"integer64\")) {\n+        return INT64;\n+      } else if (Rf_inherits(x, \"POSIXct\")) {\n+        return TIMESTAMP;\n+      } else if (Rf_inherits(x, \"difftime\")) {\n+        return TIME;\n+      } else {\n+        return FLOAT64;\n+      }\n+    }\n+    case VECSXP: {\n+      if (Rf_inherits(x, \"data.frame\")) {\n+        return DATAFRAME;\n+      }\n+\n+      if (Rf_inherits(x, \"arrow_binary\")) {\n+        return BINARY;\n+      }\n+\n+      return LIST;\n+    }\n+    default:\n+      break;\n+  }\n+  return OTHER;\n+}\n+\n+struct RScalar {\n+  RVectorType rtype;\n+  void* data;\n+  bool null;\n+};\n+\n+struct RBytesView {\n+  const char* bytes;\n+  R_xlen_t size;\n+  bool is_utf8;\n+\n+  Status ParseString(RScalar* value) {\n+    SEXP s = *reinterpret_cast<SEXP*>(value->data);\n+    bytes = CHAR(s);\n+    size = XLENGTH(s);\n+\n+    // TODO: test it\n+    is_utf8 = true;\n+\n+    return Status::OK();\n+  }\n+\n+  Status ParseRaw(RScalar* value) {\n+    SEXP raw;\n+\n+    if (value->rtype == LIST || value->rtype == BINARY) {\n+      raw = *reinterpret_cast<SEXP*>(value->data);\n+      if (TYPEOF(raw) != RAWSXP) {\n+        return Status::Invalid(\"can only handle RAW vectors\");\n+      }\n+    } else {\n+      return Status::NotImplemented(\"cannot parse binary with RBytesView::ParseRaw()\");\n+    }\n+\n+    bytes = reinterpret_cast<const char*>(RAW_RO(raw));\n+    size = XLENGTH(raw);\n+    is_utf8 = false;\n+\n+    return Status::OK();\n+  }\n+};\n+\n+template <typename Int>\n+Result<float> IntegerScalarToFloat32Safe(int64_t value) {\n+  constexpr int64_t kFloatMax = 1LL << 24;\n+  constexpr int64_t kFloatMin = -(1LL << 24);\n+\n+  if (value < kFloatMin || value > kFloatMax) {\n+    return Status::Invalid(\"Integer value \", value, \" is outside of the range exactly\",\n+                           \" representable by a IEEE 754 single precision value\");\n+  }\n+  return static_cast<float>(value);\n+}\n+\n+template <typename Int>\n+Result<double> IntegerScalarToDoubleSafe(int64_t value) {\n+  constexpr int64_t kDoubleMax = 1LL << 53;\n+  constexpr int64_t kDoubleMin = -(1LL << 53);\n+\n+  if (value < kDoubleMin || value > kDoubleMax) {\n+    return Status::Invalid(\"Integer value \", value, \" is outside of the range exactly\",\n+                           \" representable by a IEEE 754 double precision value\");\n+  }\n+  return static_cast<double>(value);\n+}\n+\n+class RValue {\n+ public:\n+  static bool IsNull(RScalar* obj) { return obj->null; }\n+\n+  static Result<bool> Convert(const BooleanType*, const RConversionOptions&,\n+                              RScalar* value) {\n+    if (value->rtype == BOOLEAN) {\n+      return *reinterpret_cast<bool*>(value->data);\n+    }\n+\n+    return Status::Invalid(\"invalid conversion to bool, expecting a logical vector\");\n+  }\n+\n+  static Result<uint16_t> Convert(const HalfFloatType*, const RConversionOptions&,\n+                                  RScalar* value) {\n+    return Status::NotImplemented(\"conversion to half float from R not implemented\");\n+  }\n+\n+  static Result<float> Convert(const FloatType*, const RConversionOptions&,\n+                               RScalar* value) {\n+    switch (value->rtype) {\n+      case FLOAT64:\n+        return static_cast<float>(*reinterpret_cast<double*>(value->data));\n+      case INT32:\n+        return IntegerScalarToFloat32Safe<int>(*reinterpret_cast<int*>(value->data));\n+      case UINT8:\n+        return IntegerScalarToFloat32Safe<uint8_t>(\n+            *reinterpret_cast<unsigned char*>(value->data));\n+      case INT64:\n+        return IntegerScalarToFloat32Safe<int64_t>(\n+            *reinterpret_cast<int64_t*>(value->data));\n+      default:\n+        break;\n+    }\n+    return Status::Invalid(\"invalid conversion to float\");\n+  }\n+\n+  static Result<double> Convert(const DoubleType*, const RConversionOptions&,\n+                                RScalar* value) {\n+    switch (value->rtype) {\n+      case FLOAT64:\n+        return static_cast<float>(*reinterpret_cast<double*>(value->data));\n+      case INT32:\n+        return IntegerScalarToDoubleSafe<int>(*reinterpret_cast<int*>(value->data));\n+      case UINT8:\n+        return IntegerScalarToDoubleSafe<uint8_t>(\n+            *reinterpret_cast<unsigned char*>(value->data));\n+      case INT64:\n+        return IntegerScalarToDoubleSafe<int64_t>(\n+            *reinterpret_cast<int64_t*>(value->data));\n+      default:\n+        break;\n+    }\n+\n+    return Status::Invalid(\"invalid conversion to double\");\n+  }\n+\n+  static Result<uint8_t> Convert(const UInt8Type*, const RConversionOptions&,\n+                                 RScalar* value) {\n+    // TODO: handle conversion from other types\n+    if (value->rtype == UINT8) {\n+      return *reinterpret_cast<uint8_t*>(value->data);\n+    }\n+\n+    // TODO: improve error\n+    return Status::Invalid(\"invalid conversion to uint8\");\n+  }\n+\n+  static Result<int8_t> Convert(const Int8Type*, const RConversionOptions&,\n+                                RScalar* value) {\n+    // TODO: improve error\n+    return Status::Invalid(\"invalid conversion to int8\");\n+  }\n+\n+  static Result<int16_t> Convert(const Int16Type*, const RConversionOptions&,\n+                                 RScalar* value) {\n+    // TODO: improve error\n+    return Status::Invalid(\"invalid conversion to int16\");\n+  }\n+\n+  static Result<uint16_t> Convert(const UInt16Type*, const RConversionOptions&,\n+                                  RScalar* value) {\n+    // TODO: improve error\n+    return Status::Invalid(\"invalid conversion to uint16\");\n+  }\n+\n+  static Result<int32_t> Convert(const Int32Type*, const RConversionOptions&,\n+                                 RScalar* value) {\n+    // TODO: handle conversion from other types\n+    if (value->rtype == INT32) {\n+      return *reinterpret_cast<int32_t*>(value->data);\n+    }\n+\n+    // TODO: improve error\n+    return Status::Invalid(\"invalid conversion to int32\");\n+  }\n+\n+  static Result<uint32_t> Convert(const UInt32Type*, const RConversionOptions&,\n+                                  RScalar* value) {\n+    // TODO: improve error\n+    return Status::Invalid(\"invalid conversion to uint32\");\n+  }\n+\n+  static Result<int64_t> Convert(const Int64Type*, const RConversionOptions&,\n+                                 RScalar* value) {\n+    // TODO: handle conversion from other types\n+    if (value->rtype == INT64) {\n+      return *reinterpret_cast<int64_t*>(value->data);\n+    }\n+\n+    // TODO: improve error\n+    return Status::Invalid(\"invalid conversion to int64\");\n+  }\n+\n+  static Result<uint64_t> Convert(const UInt64Type*, const RConversionOptions&,\n+                                  RScalar* value) {\n+    // TODO: improve error\n+    return Status::Invalid(\"invalid conversion to uint64\");\n+  }\n+\n+  static Result<int32_t> Convert(const Date32Type*, const RConversionOptions&,\n+                                 RScalar* value) {\n+    if (value->rtype == DATE) {\n+      return static_cast<int32_t>(*reinterpret_cast<double*>(value->data));\n+    }\n+\n+    // TODO: improve error\n+    return Status::Invalid(\"invalid conversion to date32\");\n+  }\n+\n+  static Result<int64_t> Convert(const Date64Type*, const RConversionOptions&,\n+                                 RScalar* value) {\n+    constexpr static int64_t kMillisecondsPerDay = 86400000;\n+\n+    if (value->rtype == DATE) {\n+      return static_cast<int64_t>(*reinterpret_cast<double*>(value->data) *\n+                                  kMillisecondsPerDay);\n+    }\n+\n+    return Status::Invalid(\"invalid conversion to date64\");\n+  }\n+\n+  static Result<int32_t> Convert(const Time32Type*, const RConversionOptions&,\n+                                 RScalar* value) {\n+    // TODO: improve error\n+    return Status::Invalid(\"invalid conversion to time32\");\n+  }\n+\n+  static Result<int64_t> Convert(const Time64Type*, const RConversionOptions&,\n+                                 RScalar* value) {\n+    // TODO: improve error\n+    return Status::Invalid(\"invalid conversion to time64\");\n+  }\n+\n+  static Result<Decimal128> Convert(const Decimal128Type*, const RConversionOptions&,\n+                                    RScalar* value) {\n+    // TODO: improve error\n+    return Status::Invalid(\"invalid conversion to decimal128\");\n+  }\n+\n+  static Result<Decimal256> Convert(const Decimal256Type*, const RConversionOptions&,\n+                                    RScalar* value) {\n+    // TODO: improve error\n+    return Status::Invalid(\"invalid conversion to decimal256\");\n+  }\n+\n+  template <typename T>\n+  static enable_if_string<T, Status> Convert(const T*, const RConversionOptions&,\n+                                             RScalar* value, RBytesView& view) {\n+    switch (value->rtype) {\n+      case STRING:\n+      case FACTOR:\n+        return view.ParseString(value);\n+      default:\n+        break;\n+    }\n+\n+    // TODO: improve error\n+    return Status::Invalid(\"invalid conversion to string\");\n+  }\n+\n+  static Status Convert(const BaseBinaryType*, const RConversionOptions&, RScalar* value,\n+                        RBytesView& view) {\n+    switch (value->rtype) {\n+      case BINARY:\n+      case LIST:\n+        return view.ParseRaw(value);\n+\n+      case STRING:\n+        return Status::NotImplemented(\"conversion string -> binary\");\n+\n+      default:\n+        break;\n+    }\n+\n+    // TODO: improve error\n+    return Status::Invalid(\"invalid conversion to binary\");\n+  }\n+\n+  static Status Convert(const FixedSizeBinaryType* type, const RConversionOptions&,\n+                        RScalar* value, RBytesView& view) {\n+    ARROW_RETURN_NOT_OK(view.ParseRaw(value));\n+    if (view.size != type->byte_width()) {\n+      return Status::Invalid(\"invalid size\");\n+    }\n+    return Status::OK();\n+  }\n+};\n+\n+template <typename T>\n+bool is_NA(T value);\n+\n+template <>\n+bool is_NA<int>(int value) {\n+  return value == NA_INTEGER;\n+}\n+\n+template <>\n+bool is_NA<double>(double value) {\n+  return ISNA(value);\n+}\n+\n+template <>\n+bool is_NA<uint8_t>(uint8_t value) {\n+  return false;\n+}\n+\n+template <>\n+bool is_NA<cpp11::r_bool>(cpp11::r_bool value) {\n+  return value == NA_LOGICAL;\n+}\n+\n+template <>\n+bool is_NA<cpp11::r_string>(cpp11::r_string value) {\n+  return value == NA_STRING;\n+}\n+\n+template <>\n+bool is_NA<SEXP>(SEXP value) {\n+  return Rf_isNull(value);\n+}\n+\n+template <>\n+bool is_NA<int64_t>(int64_t value) {\n+  return value == NA_INT64;\n+}\n+\n+template <RVectorType rtype, typename T, class VisitorFunc>\n+inline Status VisitRPrimitiveVector(SEXP x, R_xlen_t size, VisitorFunc&& func) {\n+  RScalar obj{rtype, nullptr, false};\n+  cpp11::r_vector<T> values(x);\n+  for (T value : values) {\n+    obj.data = reinterpret_cast<void*>(&value);\n+    obj.null = is_NA<T>(value);\n+    RETURN_NOT_OK(func(&obj));\n+  }\n+  return Status::OK();\n+}\n+\n+template <class VisitorFunc>\n+inline Status VisitInt64Vector(SEXP x, R_xlen_t size, VisitorFunc&& func) {\n+  RScalar obj{INT64, nullptr, false};\n+  cpp11::doubles values(x);\n+  for (double value : values) {\n+    obj.data = reinterpret_cast<void*>(&value);\n+    obj.null = is_NA<int64_t>(*reinterpret_cast<int64_t*>(&value));\n+    RETURN_NOT_OK(func(&obj));\n+  }\n+  return Status::OK();\n+}\n+\n+template <class VisitorFunc>\n+inline Status VisitFactor(SEXP x, R_xlen_t size, VisitorFunc&& func) {\n+  cpp11::strings levels(Rf_getAttrib(x, R_LevelsSymbol));\n+  SEXP* levels_ptr = const_cast<SEXP*>(STRING_PTR_RO(levels));\n+\n+  RScalar obj{FACTOR, nullptr, false};\n+  cpp11::r_vector<int> values(x);\n+\n+  for (int value : values) {\n+    if (is_NA<int>(value)) {\n+      obj.null = true;\n+    } else {\n+      obj.null = false;\n+      obj.data = reinterpret_cast<void*>(&levels_ptr[value - 1]);\n+    }\n+    RETURN_NOT_OK(func(&obj));\n+  }\n+  return Status::OK();\n+}\n+\n+template <typename T>\n+inline Status VisitDataFrame(SEXP x, R_xlen_t size, T* converter);\n+\n+template <typename T>\n+inline Status VisitVector(SEXP x, R_xlen_t size, T* converter) {\n+  if (converter->type()->id() == Type::STRUCT) {\n+    return VisitDataFrame(x, size, converter);\n+  }\n+\n+  RVectorType rtype = GetVectorType(x);\n+  auto func = [&converter](RScalar* obj) { return converter->Append(obj); };\n+  using VisitorFunc = decltype(func);\n+\n+  switch (rtype) {\n+    case BOOLEAN:\n+      return VisitRPrimitiveVector<BOOLEAN, cpp11::r_bool, VisitorFunc>(\n+          x, size, std::forward<VisitorFunc>(func));\n+    case UINT8:\n+      return VisitRPrimitiveVector<UINT8, uint8_t, VisitorFunc>(\n+          x, size, std::forward<VisitorFunc>(func));\n+    case INT32:\n+      return VisitRPrimitiveVector<INT32, int, VisitorFunc>(\n+          x, size, std::forward<VisitorFunc>(func));\n+    case FLOAT64:\n+      return VisitRPrimitiveVector<FLOAT64, double, VisitorFunc>(\n+          x, size, std::forward<VisitorFunc>(func));\n+    case DATE:\n+      return VisitRPrimitiveVector<DATE, double, VisitorFunc>(\n+          x, size, std::forward<VisitorFunc>(func));\n+\n+    case STRING:\n+      return VisitRPrimitiveVector<STRING, cpp11::r_string, VisitorFunc>(\n+          x, size, std::forward<VisitorFunc>(func));\n+\n+    case INT64:\n+      return VisitInt64Vector<VisitorFunc>(x, size, std::forward<VisitorFunc>(func));\n+\n+    case BINARY:\n+      return VisitRPrimitiveVector<BINARY, SEXP, VisitorFunc>(\n+          x, size, std::forward<VisitorFunc>(func));\n+\n+    case LIST:\n+      return VisitRPrimitiveVector<LIST, SEXP, VisitorFunc>(\n+          x, size, std::forward<VisitorFunc>(func));\n+\n+    case FACTOR:\n+      return VisitFactor<VisitorFunc>(x, size, std::forward<VisitorFunc>(func));\n+\n+    default:\n+      break;\n+  }\n+\n+  return Status::Invalid(\"No visitor for R type \", rtype);\n+}\n+\n+template <typename T>\n+Status Extend(T* converter, SEXP x, R_xlen_t size) {\n+  RETURN_NOT_OK(converter->Reserve(size));\n+  return VisitVector(x, size, converter);\n+}\n+\n+using RConverter = Converter<RScalar*, RConversionOptions>;\n+\n+template <typename T, typename Enable = void>\n+class RPrimitiveConverter;\n+\n+template <typename T>\n+class RPrimitiveConverter<T, enable_if_null<T>>\n+    : public PrimitiveConverter<T, RConverter> {\n+ public:\n+  Status Append(RScalar* value) override {\n+    return this->primitive_builder_->AppendNull();\n+  }\n+};\n+\n+template <typename T>\n+class RPrimitiveConverter<\n+    T, enable_if_t<is_number_type<T>::value || is_boolean_type<T>::value ||\n+                   is_date_type<T>::value || is_time_type<T>::value ||\n+                   is_decimal_type<T>::value>>\n+    : public PrimitiveConverter<T, RConverter> {\n+ public:\n+  Status Append(RScalar* value) {\n+    if (RValue::IsNull(value)) {\n+      return this->primitive_builder_->AppendNull();\n+    } else {\n+      ARROW_ASSIGN_OR_RAISE(\n+          auto converted, RValue::Convert(this->primitive_type_, this->options_, value));\n+      return this->primitive_builder_->Append(converted);\n+    }\n+    return Status::OK();\n+  }\n+};\n+\n+template <typename T>\n+class RPrimitiveConverter<T, enable_if_binary<T>>\n+    : public PrimitiveConverter<T, RConverter> {\n+ public:\n+  using OffsetType = typename T::offset_type;\n+\n+  Status Append(RScalar* value) {\n+    if (RValue::IsNull(value)) {\n+      this->primitive_builder_->UnsafeAppendNull();\n+    } else {\n+      ARROW_RETURN_NOT_OK(\n+          RValue::Convert(this->primitive_type_, this->options_, value, view_));\n+      // Since we don't know the varying length input size in advance, we need to\n+      // reserve space in the value builder one by one. ReserveData raises CapacityError\n+      // if the value would not fit into the array.\n+      ARROW_RETURN_NOT_OK(this->primitive_builder_->ReserveData(view_.size));\n+      this->primitive_builder_->UnsafeAppend(view_.bytes,\n+                                             static_cast<OffsetType>(view_.size));\n+    }\n+\n+    return Status::OK();\n+  }\n+\n+ protected:\n+  RBytesView view_;\n+};\n+\n+template <typename T>\n+class RPrimitiveConverter<T, enable_if_t<std::is_same<T, FixedSizeBinaryType>::value>>\n+    : public PrimitiveConverter<T, RConverter> {\n+ public:\n+  Status Append(RScalar* value) {\n+    if (RValue::IsNull(value)) {\n+      this->primitive_builder_->UnsafeAppendNull();\n+    } else {\n+      ARROW_RETURN_NOT_OK(\n+          RValue::Convert(this->primitive_type_, this->options_, value, view_));\n+      // Since we don't know the varying length input size in advance, we need to\n+      // reserve space in the value builder one by one. ReserveData raises CapacityError\n+      // if the value would not fit into the array.\n+      ARROW_RETURN_NOT_OK(this->primitive_builder_->ReserveData(view_.size));\n+      this->primitive_builder_->UnsafeAppend(view_.bytes);\n+    }\n+\n+    return Status::OK();\n+  }\n+\n+ protected:\n+  RBytesView view_;\n+};\n+\n+template <typename T>\n+class RPrimitiveConverter<T, enable_if_string_like<T>>\n+    : public PrimitiveConverter<T, RConverter> {\n+ public:\n+  using OffsetType = typename T::offset_type;\n+\n+  Status Append(RScalar* value) {\n+    if (RValue::IsNull(value)) {\n+      return this->primitive_builder_->AppendNull();\n+    } else {\n+      ARROW_RETURN_NOT_OK(\n+          RValue::Convert(this->primitive_type_, this->options_, value, view_));\n+\n+      if (!view_.is_utf8) {\n+        observed_binary_ = true;\n+      }\n+\n+      ARROW_RETURN_NOT_OK(this->primitive_builder_->ReserveData(view_.size));\n+      this->primitive_builder_->UnsafeAppend(view_.bytes,\n+                                             static_cast<OffsetType>(view_.size));\n+    }\n+    return Status::OK();\n+  }\n+\n+ protected:\n+  bool observed_binary_ = false;\n+  RBytesView view_;\n+};\n+\n+template <typename T>\n+class RPrimitiveConverter<\n+    T, enable_if_t<is_timestamp_type<T>::value || is_duration_type<T>::value>>\n+    : public PrimitiveConverter<T, RConverter> {\n+ public:\n+  Status Append(RScalar* value) {\n+    return Status::NotImplemented(\n+        \"conversion to timestamp or duration not yet implemented\");\n+  }\n+};\n+\n+template <typename T>\n+class RListConverter;\n+\n+template <typename U, typename Enable = void>\n+class RDictionaryConverter;\n+\n+template <typename U>\n+class RDictionaryConverter<U, enable_if_has_c_type<U>>\n+    : public DictionaryConverter<U, RConverter> {\n+ public:\n+  Status Append(RScalar* value) override {\n+    return Status::NotImplemented(\n+        \"dictionaries only implemented with string value types\");\n+  }\n+};\n+\n+template <typename U>\n+class RDictionaryConverter<U, enable_if_has_string_view<U>>\n+    : public DictionaryConverter<U, RConverter> {\n+ public:\n+  Status Append(RScalar* value) override {\n+    if (RValue::IsNull(value)) {\n+      return this->value_builder_->AppendNull();\n+    } else {\n+      ARROW_RETURN_NOT_OK(\n+          RValue::Convert(this->value_type_, this->options_, value, view_));\n+      return this->value_builder_->Append(view_.bytes, static_cast<int32_t>(view_.size));\n+    }\n+  }\n+\n+ protected:\n+  RBytesView view_;\n+};\n+\n+template <typename T, typename Enable = void>\n+struct RConverterTrait;\n+\n+template <typename T>\n+struct RConverterTrait<\n+    T, enable_if_t<!is_nested_type<T>::value && !is_interval_type<T>::value &&\n+                   !is_extension_type<T>::value>> {\n+  using type = RPrimitiveConverter<T>;\n+};\n+\n+template <typename T>\n+struct RConverterTrait<T, enable_if_list_like<T>> {\n+  using type = RListConverter<T>;\n+};\n+\n+template <typename T>\n+class RListConverter : public ListConverter<T, RConverter, RConverterTrait> {\n+ public:\n+  Status Append(RScalar* value) {\n+    if (RValue::IsNull(value)) {\n+      return this->list_builder_->AppendNull();\n+    }\n+\n+    // append one element to the list\n+    RETURN_NOT_OK(this->list_builder_->Append());\n+\n+    // append the contents through the list value converter\n+    SEXP obj = *reinterpret_cast<SEXP*>(value->data);\n+    R_xlen_t size = XLENGTH(obj);\n+    RETURN_NOT_OK(this->list_builder_->ValidateOverflow(size));\n+    return Extend(this->value_converter_.get(), obj, size);\n+  }\n+};\n+\n+class RStructConverter;\n+\n+template <>\n+struct RConverterTrait<StructType> {\n+  using type = RStructConverter;\n+};\n+\n+class RStructConverter : public StructConverter<RConverter, RConverterTrait> {\n+ public:\n+  Status Append(RScalar* value) override {\n+    return Status::NotImplemented(\"RStructConverter does not use Append()\");\n+  }\n+\n+  Status Reserve(int64_t additional_capacity) override {\n+    // in contrast with StructConverter, this does not Reserve()\n+    // on children, because it will be done as part of Visit() > Extend()\n+    return this->builder_->Reserve(additional_capacity);\n+  }\n+\n+  Status Visit(SEXP x, R_xlen_t size) {\n+    // iterate over columns of x\n+    R_xlen_t n_columns = XLENGTH(x);\n+    if (!Rf_inherits(x, \"data.frame\")) {\n+      return Status::Invalid(\"Can only convert data frames to Struct type\");\n+    }\n+\n+    auto struct_builder = checked_cast<StructBuilder*>(this->builder().get());\n\nReview comment:\n       You should be able to use `this->struct_builder_`\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-08T11:42:34.627+0000",
                    "updated": "2020-12-08T11:42:34.627+0000",
                    "started": "2020-12-08T11:42:34.627+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "521644",
                    "issueId": "13339598"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13339598/worklog/521645",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs commented on a change in pull request #8650:\nURL: https://github.com/apache/arrow/pull/8650#discussion_r538277187\n\n\n\n##########\nFile path: r/src/r_to_arrow.cpp\n##########\n@@ -0,0 +1,814 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"./arrow_types.h\"\n+#include \"./arrow_vctrs.h\"\n+\n+#if defined(ARROW_R_WITH_ARROW)\n+#include <arrow/array/builder_base.h>\n+#include <arrow/array/builder_binary.h>\n+#include <arrow/array/builder_decimal.h>\n+#include <arrow/array/builder_dict.h>\n+#include <arrow/array/builder_nested.h>\n+#include <arrow/array/builder_primitive.h>\n+#include <arrow/type_traits.h>\n+#include <arrow/util/checked_cast.h>\n+#include <arrow/util/converter.h>\n+\n+namespace arrow {\n+\n+using internal::checked_cast;\n+using internal::checked_pointer_cast;\n+\n+using internal::Converter;\n+using internal::DictionaryConverter;\n+using internal::ListConverter;\n+using internal::PrimitiveConverter;\n+using internal::StructConverter;\n+\n+using internal::MakeChunker;\n+using internal::MakeConverter;\n+\n+namespace r {\n+\n+struct RConversionOptions {\n+  RConversionOptions() = default;\n+\n+  std::shared_ptr<arrow::DataType> type;\n+  bool strict;\n+  int64_t size;\n+};\n+\n+enum RVectorType {\n+  BOOLEAN,\n+  UINT8,\n+  INT32,\n+  FLOAT64,\n+  INT64,\n+  COMPLEX,\n+  STRING,\n+  DATAFRAME,\n+  DATE,\n+  TIME,\n+  TIMESTAMP,\n+  BINARY,\n+  LIST,\n+  FACTOR,\n+\n+  OTHER\n+};\n+\n+RVectorType GetVectorType(SEXP x) {\n+  switch (TYPEOF(x)) {\n+    case LGLSXP:\n+      return BOOLEAN;\n+    case RAWSXP:\n+      return UINT8;\n+    case INTSXP:\n+      if (Rf_inherits(x, \"factor\")) {\n+        return FACTOR;\n+      }\n+      return INT32;\n+    case STRSXP:\n+      return STRING;\n+    case CPLXSXP:\n+      return COMPLEX;\n+    case REALSXP: {\n+      if (Rf_inherits(x, \"Date\")) {\n+        return DATE;\n+      } else if (Rf_inherits(x, \"integer64\")) {\n+        return INT64;\n+      } else if (Rf_inherits(x, \"POSIXct\")) {\n+        return TIMESTAMP;\n+      } else if (Rf_inherits(x, \"difftime\")) {\n+        return TIME;\n+      } else {\n+        return FLOAT64;\n+      }\n+    }\n+    case VECSXP: {\n+      if (Rf_inherits(x, \"data.frame\")) {\n+        return DATAFRAME;\n+      }\n+\n+      if (Rf_inherits(x, \"arrow_binary\")) {\n+        return BINARY;\n+      }\n+\n+      return LIST;\n+    }\n+    default:\n+      break;\n+  }\n+  return OTHER;\n+}\n+\n+struct RScalar {\n+  RVectorType rtype;\n+  void* data;\n+  bool null;\n+};\n+\n+struct RBytesView {\n+  const char* bytes;\n+  R_xlen_t size;\n+  bool is_utf8;\n+\n+  Status ParseString(RScalar* value) {\n+    SEXP s = *reinterpret_cast<SEXP*>(value->data);\n+    bytes = CHAR(s);\n+    size = XLENGTH(s);\n+\n+    // TODO: test it\n+    is_utf8 = true;\n+\n+    return Status::OK();\n+  }\n+\n+  Status ParseRaw(RScalar* value) {\n+    SEXP raw;\n+\n+    if (value->rtype == LIST || value->rtype == BINARY) {\n+      raw = *reinterpret_cast<SEXP*>(value->data);\n+      if (TYPEOF(raw) != RAWSXP) {\n+        return Status::Invalid(\"can only handle RAW vectors\");\n+      }\n+    } else {\n+      return Status::NotImplemented(\"cannot parse binary with RBytesView::ParseRaw()\");\n+    }\n+\n+    bytes = reinterpret_cast<const char*>(RAW_RO(raw));\n+    size = XLENGTH(raw);\n+    is_utf8 = false;\n+\n+    return Status::OK();\n+  }\n+};\n+\n+template <typename Int>\n+Result<float> IntegerScalarToFloat32Safe(int64_t value) {\n+  constexpr int64_t kFloatMax = 1LL << 24;\n+  constexpr int64_t kFloatMin = -(1LL << 24);\n+\n+  if (value < kFloatMin || value > kFloatMax) {\n+    return Status::Invalid(\"Integer value \", value, \" is outside of the range exactly\",\n+                           \" representable by a IEEE 754 single precision value\");\n+  }\n+  return static_cast<float>(value);\n+}\n+\n+template <typename Int>\n+Result<double> IntegerScalarToDoubleSafe(int64_t value) {\n+  constexpr int64_t kDoubleMax = 1LL << 53;\n+  constexpr int64_t kDoubleMin = -(1LL << 53);\n+\n+  if (value < kDoubleMin || value > kDoubleMax) {\n+    return Status::Invalid(\"Integer value \", value, \" is outside of the range exactly\",\n+                           \" representable by a IEEE 754 double precision value\");\n+  }\n+  return static_cast<double>(value);\n+}\n+\n+class RValue {\n+ public:\n+  static bool IsNull(RScalar* obj) { return obj->null; }\n+\n+  static Result<bool> Convert(const BooleanType*, const RConversionOptions&,\n+                              RScalar* value) {\n+    if (value->rtype == BOOLEAN) {\n+      return *reinterpret_cast<bool*>(value->data);\n+    }\n+\n+    return Status::Invalid(\"invalid conversion to bool, expecting a logical vector\");\n+  }\n+\n+  static Result<uint16_t> Convert(const HalfFloatType*, const RConversionOptions&,\n+                                  RScalar* value) {\n+    return Status::NotImplemented(\"conversion to half float from R not implemented\");\n+  }\n+\n+  static Result<float> Convert(const FloatType*, const RConversionOptions&,\n+                               RScalar* value) {\n+    switch (value->rtype) {\n+      case FLOAT64:\n+        return static_cast<float>(*reinterpret_cast<double*>(value->data));\n+      case INT32:\n+        return IntegerScalarToFloat32Safe<int>(*reinterpret_cast<int*>(value->data));\n+      case UINT8:\n+        return IntegerScalarToFloat32Safe<uint8_t>(\n+            *reinterpret_cast<unsigned char*>(value->data));\n+      case INT64:\n+        return IntegerScalarToFloat32Safe<int64_t>(\n+            *reinterpret_cast<int64_t*>(value->data));\n+      default:\n+        break;\n+    }\n+    return Status::Invalid(\"invalid conversion to float\");\n+  }\n+\n+  static Result<double> Convert(const DoubleType*, const RConversionOptions&,\n+                                RScalar* value) {\n+    switch (value->rtype) {\n+      case FLOAT64:\n+        return static_cast<float>(*reinterpret_cast<double*>(value->data));\n+      case INT32:\n+        return IntegerScalarToDoubleSafe<int>(*reinterpret_cast<int*>(value->data));\n+      case UINT8:\n+        return IntegerScalarToDoubleSafe<uint8_t>(\n+            *reinterpret_cast<unsigned char*>(value->data));\n+      case INT64:\n+        return IntegerScalarToDoubleSafe<int64_t>(\n+            *reinterpret_cast<int64_t*>(value->data));\n+      default:\n+        break;\n+    }\n+\n+    return Status::Invalid(\"invalid conversion to double\");\n+  }\n+\n+  static Result<uint8_t> Convert(const UInt8Type*, const RConversionOptions&,\n+                                 RScalar* value) {\n+    // TODO: handle conversion from other types\n+    if (value->rtype == UINT8) {\n+      return *reinterpret_cast<uint8_t*>(value->data);\n+    }\n+\n+    // TODO: improve error\n+    return Status::Invalid(\"invalid conversion to uint8\");\n+  }\n+\n+  static Result<int8_t> Convert(const Int8Type*, const RConversionOptions&,\n+                                RScalar* value) {\n+    // TODO: improve error\n+    return Status::Invalid(\"invalid conversion to int8\");\n+  }\n+\n+  static Result<int16_t> Convert(const Int16Type*, const RConversionOptions&,\n+                                 RScalar* value) {\n+    // TODO: improve error\n+    return Status::Invalid(\"invalid conversion to int16\");\n+  }\n+\n+  static Result<uint16_t> Convert(const UInt16Type*, const RConversionOptions&,\n+                                  RScalar* value) {\n+    // TODO: improve error\n+    return Status::Invalid(\"invalid conversion to uint16\");\n+  }\n+\n+  static Result<int32_t> Convert(const Int32Type*, const RConversionOptions&,\n+                                 RScalar* value) {\n+    // TODO: handle conversion from other types\n+    if (value->rtype == INT32) {\n+      return *reinterpret_cast<int32_t*>(value->data);\n+    }\n+\n+    // TODO: improve error\n+    return Status::Invalid(\"invalid conversion to int32\");\n+  }\n+\n+  static Result<uint32_t> Convert(const UInt32Type*, const RConversionOptions&,\n+                                  RScalar* value) {\n+    // TODO: improve error\n+    return Status::Invalid(\"invalid conversion to uint32\");\n+  }\n+\n+  static Result<int64_t> Convert(const Int64Type*, const RConversionOptions&,\n+                                 RScalar* value) {\n+    // TODO: handle conversion from other types\n+    if (value->rtype == INT64) {\n+      return *reinterpret_cast<int64_t*>(value->data);\n+    }\n+\n+    // TODO: improve error\n+    return Status::Invalid(\"invalid conversion to int64\");\n+  }\n+\n+  static Result<uint64_t> Convert(const UInt64Type*, const RConversionOptions&,\n+                                  RScalar* value) {\n+    // TODO: improve error\n+    return Status::Invalid(\"invalid conversion to uint64\");\n+  }\n+\n+  static Result<int32_t> Convert(const Date32Type*, const RConversionOptions&,\n+                                 RScalar* value) {\n+    if (value->rtype == DATE) {\n+      return static_cast<int32_t>(*reinterpret_cast<double*>(value->data));\n+    }\n+\n+    // TODO: improve error\n+    return Status::Invalid(\"invalid conversion to date32\");\n+  }\n+\n+  static Result<int64_t> Convert(const Date64Type*, const RConversionOptions&,\n+                                 RScalar* value) {\n+    constexpr static int64_t kMillisecondsPerDay = 86400000;\n+\n+    if (value->rtype == DATE) {\n+      return static_cast<int64_t>(*reinterpret_cast<double*>(value->data) *\n+                                  kMillisecondsPerDay);\n+    }\n+\n+    return Status::Invalid(\"invalid conversion to date64\");\n+  }\n+\n+  static Result<int32_t> Convert(const Time32Type*, const RConversionOptions&,\n+                                 RScalar* value) {\n+    // TODO: improve error\n+    return Status::Invalid(\"invalid conversion to time32\");\n+  }\n+\n+  static Result<int64_t> Convert(const Time64Type*, const RConversionOptions&,\n+                                 RScalar* value) {\n+    // TODO: improve error\n+    return Status::Invalid(\"invalid conversion to time64\");\n+  }\n+\n+  static Result<Decimal128> Convert(const Decimal128Type*, const RConversionOptions&,\n+                                    RScalar* value) {\n+    // TODO: improve error\n+    return Status::Invalid(\"invalid conversion to decimal128\");\n+  }\n+\n+  static Result<Decimal256> Convert(const Decimal256Type*, const RConversionOptions&,\n+                                    RScalar* value) {\n+    // TODO: improve error\n+    return Status::Invalid(\"invalid conversion to decimal256\");\n+  }\n+\n+  template <typename T>\n+  static enable_if_string<T, Status> Convert(const T*, const RConversionOptions&,\n+                                             RScalar* value, RBytesView& view) {\n+    switch (value->rtype) {\n+      case STRING:\n+      case FACTOR:\n+        return view.ParseString(value);\n+      default:\n+        break;\n+    }\n+\n+    // TODO: improve error\n+    return Status::Invalid(\"invalid conversion to string\");\n+  }\n+\n+  static Status Convert(const BaseBinaryType*, const RConversionOptions&, RScalar* value,\n+                        RBytesView& view) {\n+    switch (value->rtype) {\n+      case BINARY:\n+      case LIST:\n+        return view.ParseRaw(value);\n+\n+      case STRING:\n+        return Status::NotImplemented(\"conversion string -> binary\");\n+\n+      default:\n+        break;\n+    }\n+\n+    // TODO: improve error\n+    return Status::Invalid(\"invalid conversion to binary\");\n+  }\n+\n+  static Status Convert(const FixedSizeBinaryType* type, const RConversionOptions&,\n+                        RScalar* value, RBytesView& view) {\n+    ARROW_RETURN_NOT_OK(view.ParseRaw(value));\n+    if (view.size != type->byte_width()) {\n+      return Status::Invalid(\"invalid size\");\n+    }\n+    return Status::OK();\n+  }\n+};\n+\n+template <typename T>\n+bool is_NA(T value);\n+\n+template <>\n+bool is_NA<int>(int value) {\n+  return value == NA_INTEGER;\n+}\n+\n+template <>\n+bool is_NA<double>(double value) {\n+  return ISNA(value);\n+}\n+\n+template <>\n+bool is_NA<uint8_t>(uint8_t value) {\n+  return false;\n+}\n+\n+template <>\n+bool is_NA<cpp11::r_bool>(cpp11::r_bool value) {\n+  return value == NA_LOGICAL;\n+}\n+\n+template <>\n+bool is_NA<cpp11::r_string>(cpp11::r_string value) {\n+  return value == NA_STRING;\n+}\n+\n+template <>\n+bool is_NA<SEXP>(SEXP value) {\n+  return Rf_isNull(value);\n+}\n+\n+template <>\n+bool is_NA<int64_t>(int64_t value) {\n+  return value == NA_INT64;\n+}\n+\n+template <RVectorType rtype, typename T, class VisitorFunc>\n+inline Status VisitRPrimitiveVector(SEXP x, R_xlen_t size, VisitorFunc&& func) {\n+  RScalar obj{rtype, nullptr, false};\n+  cpp11::r_vector<T> values(x);\n+  for (T value : values) {\n+    obj.data = reinterpret_cast<void*>(&value);\n+    obj.null = is_NA<T>(value);\n+    RETURN_NOT_OK(func(&obj));\n+  }\n+  return Status::OK();\n+}\n+\n+template <class VisitorFunc>\n+inline Status VisitInt64Vector(SEXP x, R_xlen_t size, VisitorFunc&& func) {\n+  RScalar obj{INT64, nullptr, false};\n+  cpp11::doubles values(x);\n+  for (double value : values) {\n+    obj.data = reinterpret_cast<void*>(&value);\n+    obj.null = is_NA<int64_t>(*reinterpret_cast<int64_t*>(&value));\n+    RETURN_NOT_OK(func(&obj));\n+  }\n+  return Status::OK();\n+}\n+\n+template <class VisitorFunc>\n+inline Status VisitFactor(SEXP x, R_xlen_t size, VisitorFunc&& func) {\n+  cpp11::strings levels(Rf_getAttrib(x, R_LevelsSymbol));\n+  SEXP* levels_ptr = const_cast<SEXP*>(STRING_PTR_RO(levels));\n+\n+  RScalar obj{FACTOR, nullptr, false};\n+  cpp11::r_vector<int> values(x);\n+\n+  for (int value : values) {\n+    if (is_NA<int>(value)) {\n+      obj.null = true;\n+    } else {\n+      obj.null = false;\n+      obj.data = reinterpret_cast<void*>(&levels_ptr[value - 1]);\n+    }\n+    RETURN_NOT_OK(func(&obj));\n+  }\n+  return Status::OK();\n+}\n+\n+template <typename T>\n+inline Status VisitDataFrame(SEXP x, R_xlen_t size, T* converter);\n+\n+template <typename T>\n+inline Status VisitVector(SEXP x, R_xlen_t size, T* converter) {\n+  if (converter->type()->id() == Type::STRUCT) {\n+    return VisitDataFrame(x, size, converter);\n+  }\n+\n+  RVectorType rtype = GetVectorType(x);\n+  auto func = [&converter](RScalar* obj) { return converter->Append(obj); };\n+  using VisitorFunc = decltype(func);\n+\n+  switch (rtype) {\n+    case BOOLEAN:\n+      return VisitRPrimitiveVector<BOOLEAN, cpp11::r_bool, VisitorFunc>(\n+          x, size, std::forward<VisitorFunc>(func));\n+    case UINT8:\n+      return VisitRPrimitiveVector<UINT8, uint8_t, VisitorFunc>(\n+          x, size, std::forward<VisitorFunc>(func));\n+    case INT32:\n+      return VisitRPrimitiveVector<INT32, int, VisitorFunc>(\n+          x, size, std::forward<VisitorFunc>(func));\n+    case FLOAT64:\n+      return VisitRPrimitiveVector<FLOAT64, double, VisitorFunc>(\n+          x, size, std::forward<VisitorFunc>(func));\n+    case DATE:\n+      return VisitRPrimitiveVector<DATE, double, VisitorFunc>(\n+          x, size, std::forward<VisitorFunc>(func));\n+\n+    case STRING:\n+      return VisitRPrimitiveVector<STRING, cpp11::r_string, VisitorFunc>(\n+          x, size, std::forward<VisitorFunc>(func));\n+\n+    case INT64:\n+      return VisitInt64Vector<VisitorFunc>(x, size, std::forward<VisitorFunc>(func));\n+\n+    case BINARY:\n+      return VisitRPrimitiveVector<BINARY, SEXP, VisitorFunc>(\n+          x, size, std::forward<VisitorFunc>(func));\n+\n+    case LIST:\n+      return VisitRPrimitiveVector<LIST, SEXP, VisitorFunc>(\n+          x, size, std::forward<VisitorFunc>(func));\n+\n+    case FACTOR:\n+      return VisitFactor<VisitorFunc>(x, size, std::forward<VisitorFunc>(func));\n+\n+    default:\n+      break;\n+  }\n+\n+  return Status::Invalid(\"No visitor for R type \", rtype);\n+}\n+\n+template <typename T>\n+Status Extend(T* converter, SEXP x, R_xlen_t size) {\n+  RETURN_NOT_OK(converter->Reserve(size));\n+  return VisitVector(x, size, converter);\n+}\n+\n+using RConverter = Converter<RScalar*, RConversionOptions>;\n\nReview comment:\n       For a nicer `AppendMultiple` implementation you may try to define a virtual `Extend()` on the base `RConverter` class and overload it in the child converters for specific inputs. It may simplify the `VisitVector => VisitDataFrame => RStructConverter::Visit` call chain. \r\n   \n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-08T11:49:41.766+0000",
                    "updated": "2020-12-08T11:49:41.766+0000",
                    "started": "2020-12-08T11:49:41.765+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "521645",
                    "issueId": "13339598"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 18000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@71cc0678[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@66702240[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3a6db790[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@5d68f0bf[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@79f8a0eb[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@4e968d71[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@19106204[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@3e78491[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3f2483fe[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@45237c6e[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5fb9268c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@6045e2e6[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 18000,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Nov 16 18:57:53 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-11-16T18:57:53.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10530/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2020-11-09T20:33:49.000+0000",
        "updated": "2021-03-10T16:40:16.000+0000",
        "timeoriginalestimate": null,
        "description": "{{distro}} is now on CRAN. The script should prefer the package version if present, which may be updated/patched apart from {{arrow}}.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 18000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[R] Optionally use distro package in linuxlibs.R",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13339598/comment/17233001",
                    "id": "17233001",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "Issue resolved by pull request 8618\n[https://github.com/apache/arrow/pull/8618]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2020-11-16T18:57:53.754+0000",
                    "updated": "2020-11-16T18:57:53.754+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0kexk:",
        "customfield_12314139": null
    }
}