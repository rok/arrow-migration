{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13188963",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13188963",
    "key": "ARROW-3410",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12346687",
                "id": "12346687",
                "description": "",
                "name": "0.17.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-04-20"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "dataset",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12581847",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12581847",
                "type": {
                    "id": "12310000",
                    "name": "Duplicate",
                    "inward": "is duplicated by",
                    "outward": "duplicates",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310000"
                },
                "inwardIssue": {
                    "id": "13288584",
                    "key": "ARROW-7972",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13288584",
                    "fields": {
                        "summary": "[Python] Allow reading CSV in chunks",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                            "name": "Closed",
                            "id": "6",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 7800,
            "total": 7800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 7800,
            "total": 7800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3410/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 13,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13188963/worklog/412448",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #6764: ARROW-3410: [C++][Python] Add streaming CSV reader.\nURL: https://github.com/apache/arrow/pull/6764\n \n \n   Only the serial version is implemented for now.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-30T17:21:49.399+0000",
                    "updated": "2020-03-30T17:21:49.399+0000",
                    "started": "2020-03-30T17:21:49.399+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "412448",
                    "issueId": "13188963"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13188963/worklog/412455",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on issue #6764: ARROW-3410: [C++][Python] Add streaming CSV reader.\nURL: https://github.com/apache/arrow/pull/6764#issuecomment-606136916\n \n \n   https://issues.apache.org/jira/browse/ARROW-3410\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-30T17:31:37.607+0000",
                    "updated": "2020-03-30T17:31:37.607+0000",
                    "started": "2020-03-30T17:31:37.607+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "412455",
                    "issueId": "13188963"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13188963/worklog/419457",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #6764: ARROW-3410: [C++][Python] Add streaming CSV reader.\nURL: https://github.com/apache/arrow/pull/6764#issuecomment-611585946\n \n \n   Rebased.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-09T15:18:42.869+0000",
                    "updated": "2020-04-09T15:18:42.869+0000",
                    "started": "2020-04-09T15:18:42.868+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "419457",
                    "issueId": "13188963"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13188963/worklog/420252",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #6764: ARROW-3410: [C++][Python] Add streaming CSV reader.\nURL: https://github.com/apache/arrow/pull/6764#discussion_r406729697\n \n \n\n ##########\n File path: cpp/src/arrow/csv/reader.cc\n ##########\n @@ -505,5 +859,20 @@ Result<std::shared_ptr<TableReader>> TableReader::Make(\n   return reader;\n }\n \n+Result<std::shared_ptr<StreamingReader>> StreamingReader::Make(\n+    MemoryPool* pool, std::shared_ptr<io::InputStream> input,\n+    const ReadOptions& read_options, const ParseOptions& parse_options,\n+    const ConvertOptions& convert_options) {\n+  std::shared_ptr<BaseStreamingReader> reader;\n+  if (read_options.use_threads) {\n+    return Status::NotImplemented(\"CSV threaded streaming reader\");\n \n Review comment:\n   Should this be ignored instead? That makes for an unpleasant behavior because use_threads defaults to true.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-10T14:57:55.476+0000",
                    "updated": "2020-04-10T14:57:55.476+0000",
                    "started": "2020-04-10T14:57:55.475+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "420252",
                    "issueId": "13188963"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13188963/worklog/421770",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #6764: ARROW-3410: [C++][Python] Add streaming CSV reader.\nURL: https://github.com/apache/arrow/pull/6764#discussion_r407803625\n \n \n\n ##########\n File path: cpp/src/arrow/csv/column_decoder.cc\n ##########\n @@ -0,0 +1,365 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <cstddef>\n+#include <cstdint>\n+#include <memory>\n+#include <mutex>\n+#include <sstream>\n+#include <string>\n+#include <utility>\n+#include <vector>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/builder.h\"\n+#include \"arrow/csv/column_decoder.h\"\n+#include \"arrow/csv/converter.h\"\n+#include \"arrow/csv/inference_internal.h\"\n+#include \"arrow/csv/options.h\"\n+#include \"arrow/csv/parser.h\"\n+#include \"arrow/memory_pool.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/util/future.h\"\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/util/task_group.h\"\n+\n+namespace arrow {\n+namespace csv {\n+\n+using internal::TaskGroup;\n+\n+class ConcreteColumnDecoder : public ColumnDecoder {\n+ public:\n+  explicit ConcreteColumnDecoder(MemoryPool* pool,\n+                                 std::shared_ptr<internal::TaskGroup> task_group,\n+                                 int32_t col_index = -1)\n+      : ColumnDecoder(std::move(task_group)),\n+        pool_(pool),\n+        col_index_(col_index),\n+        num_chunks_(-1),\n+        next_chunk_(0) {}\n+\n+  void Append(const std::shared_ptr<BlockParser>& parser) override {\n+    Insert(static_cast<int64_t>(chunks_.size()), parser);\n+  }\n+\n+  void SetEOF(int64_t num_blocks) override {\n+    std::lock_guard<std::mutex> lock(mutex_);\n+\n+    DCHECK_EQ(num_chunks_, -1) << \"Cannot change EOF\";\n+    num_chunks_ = num_blocks;\n+\n+    // If further chunks have been requested in NextChunk(), arrange to return nullptr\n+    for (int64_t i = num_chunks_; i < static_cast<int64_t>(chunks_.size()); ++i) {\n+      auto* chunk = &chunks_[i];\n+      if (chunk->is_valid()) {\n+        DCHECK(!IsFutureFinished(chunk->state()));\n+        chunk->MarkFinished(std::shared_ptr<Array>());\n+      }\n+    }\n+  }\n+\n+  Result<std::shared_ptr<Array>> NextChunk() override {\n+    std::unique_lock<std::mutex> lock(mutex_);\n+\n+    if (num_chunks_ > 0 && next_chunk_ >= num_chunks_) {\n+      return nullptr;  // EOF\n+    }\n+    PrepareChunkUnlocked(next_chunk_);\n+    auto chunk_index = next_chunk_++;\n+    return WaitForChunkUnlocked(chunk_index);\n+  }\n+\n+ protected:\n+  // XXX useful?\n+  virtual std::shared_ptr<DataType> type() const = 0;\n+\n+  Result<std::shared_ptr<Array>> WaitForChunkUnlocked(int64_t chunk_index) {\n+    auto future = chunks_[chunk_index];  // Make copy because of resizes\n+    mutex_.unlock();\n+    auto maybe_array = future.result();\n+    mutex_.lock();\n+    return maybe_array;\n+  }\n+\n+  void PrepareChunk(int64_t block_index) {\n+    std::lock_guard<std::mutex> lock(mutex_);\n+    PrepareChunkUnlocked(block_index);\n+  }\n+\n+  void PrepareChunkUnlocked(int64_t block_index) {\n+    size_t chunk_index = static_cast<size_t>(block_index);\n+    if (chunks_.size() <= chunk_index) {\n+      chunks_.resize(chunk_index + 1);\n+    }\n+    if (!chunks_[block_index].is_valid()) {\n+      chunks_[block_index] = Future<std::shared_ptr<Array>>::Make();\n+    }\n+  }\n+\n+  void SetChunk(int64_t chunk_index, Result<std::shared_ptr<Array>> maybe_array) {\n+    std::lock_guard<std::mutex> lock(mutex_);\n+    SetChunkUnlocked(chunk_index, std::move(maybe_array));\n+  }\n+\n+  void SetChunkUnlocked(int64_t chunk_index, Result<std::shared_ptr<Array>> maybe_array) {\n+    auto* chunk = &chunks_[chunk_index];\n+    DCHECK(chunk->is_valid());\n+    DCHECK(!IsFutureFinished(chunk->state()));\n+\n+    if (maybe_array.ok()) {\n+      chunk->MarkFinished(std::move(maybe_array));\n+    } else {\n+      chunk->MarkFinished(WrapConversionError(maybe_array.status()));\n+    }\n+  }\n+\n+  Status WrapConversionError(const Status& st) {\n+    if (st.ok()) {\n+      return st;\n+    } else {\n+      std::stringstream ss;\n+      ss << \"In CSV column #\" << col_index_ << \": \" << st.message();\n+      return st.WithMessage(ss.str());\n+    }\n+  }\n+\n+  MemoryPool* pool_;\n+  int32_t col_index_;\n+\n+  std::vector<Future<std::shared_ptr<Array>>> chunks_;\n \n Review comment:\n   Why does it need to preserve the ordering if each Chunk -> RecordBatch should be convertible in an isolated fashion (no mutex or shared state).\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-14T00:57:06.462+0000",
                    "updated": "2020-04-14T00:57:06.462+0000",
                    "started": "2020-04-14T00:57:06.462+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "421770",
                    "issueId": "13188963"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13188963/worklog/421901",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #6764: ARROW-3410: [C++][Python] Add streaming CSV reader.\nURL: https://github.com/apache/arrow/pull/6764#discussion_r407954044\n \n \n\n ##########\n File path: cpp/src/arrow/csv/reader.cc\n ##########\n @@ -505,5 +859,20 @@ Result<std::shared_ptr<TableReader>> TableReader::Make(\n   return reader;\n }\n \n+Result<std::shared_ptr<StreamingReader>> StreamingReader::Make(\n+    MemoryPool* pool, std::shared_ptr<io::InputStream> input,\n+    const ReadOptions& read_options, const ParseOptions& parse_options,\n+    const ConvertOptions& convert_options) {\n+  std::shared_ptr<BaseStreamingReader> reader;\n+  if (read_options.use_threads) {\n+    return Status::NotImplemented(\"CSV threaded streaming reader\");\n \n Review comment:\n   Yes, you're right, this would be better ignored. Thank you.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-14T08:23:21.269+0000",
                    "updated": "2020-04-14T08:23:21.269+0000",
                    "started": "2020-04-14T08:23:21.269+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "421901",
                    "issueId": "13188963"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13188963/worklog/421902",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #6764: ARROW-3410: [C++][Python] Add streaming CSV reader.\nURL: https://github.com/apache/arrow/pull/6764#discussion_r407954481\n \n \n\n ##########\n File path: cpp/src/arrow/csv/column_decoder.cc\n ##########\n @@ -0,0 +1,365 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <cstddef>\n+#include <cstdint>\n+#include <memory>\n+#include <mutex>\n+#include <sstream>\n+#include <string>\n+#include <utility>\n+#include <vector>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/builder.h\"\n+#include \"arrow/csv/column_decoder.h\"\n+#include \"arrow/csv/converter.h\"\n+#include \"arrow/csv/inference_internal.h\"\n+#include \"arrow/csv/options.h\"\n+#include \"arrow/csv/parser.h\"\n+#include \"arrow/memory_pool.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/util/future.h\"\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/util/task_group.h\"\n+\n+namespace arrow {\n+namespace csv {\n+\n+using internal::TaskGroup;\n+\n+class ConcreteColumnDecoder : public ColumnDecoder {\n+ public:\n+  explicit ConcreteColumnDecoder(MemoryPool* pool,\n+                                 std::shared_ptr<internal::TaskGroup> task_group,\n+                                 int32_t col_index = -1)\n+      : ColumnDecoder(std::move(task_group)),\n+        pool_(pool),\n+        col_index_(col_index),\n+        num_chunks_(-1),\n+        next_chunk_(0) {}\n+\n+  void Append(const std::shared_ptr<BlockParser>& parser) override {\n+    Insert(static_cast<int64_t>(chunks_.size()), parser);\n+  }\n+\n+  void SetEOF(int64_t num_blocks) override {\n+    std::lock_guard<std::mutex> lock(mutex_);\n+\n+    DCHECK_EQ(num_chunks_, -1) << \"Cannot change EOF\";\n+    num_chunks_ = num_blocks;\n+\n+    // If further chunks have been requested in NextChunk(), arrange to return nullptr\n+    for (int64_t i = num_chunks_; i < static_cast<int64_t>(chunks_.size()); ++i) {\n+      auto* chunk = &chunks_[i];\n+      if (chunk->is_valid()) {\n+        DCHECK(!IsFutureFinished(chunk->state()));\n+        chunk->MarkFinished(std::shared_ptr<Array>());\n+      }\n+    }\n+  }\n+\n+  Result<std::shared_ptr<Array>> NextChunk() override {\n+    std::unique_lock<std::mutex> lock(mutex_);\n+\n+    if (num_chunks_ > 0 && next_chunk_ >= num_chunks_) {\n+      return nullptr;  // EOF\n+    }\n+    PrepareChunkUnlocked(next_chunk_);\n+    auto chunk_index = next_chunk_++;\n+    return WaitForChunkUnlocked(chunk_index);\n+  }\n+\n+ protected:\n+  // XXX useful?\n+  virtual std::shared_ptr<DataType> type() const = 0;\n+\n+  Result<std::shared_ptr<Array>> WaitForChunkUnlocked(int64_t chunk_index) {\n+    auto future = chunks_[chunk_index];  // Make copy because of resizes\n+    mutex_.unlock();\n+    auto maybe_array = future.result();\n+    mutex_.lock();\n+    return maybe_array;\n+  }\n+\n+  void PrepareChunk(int64_t block_index) {\n+    std::lock_guard<std::mutex> lock(mutex_);\n+    PrepareChunkUnlocked(block_index);\n+  }\n+\n+  void PrepareChunkUnlocked(int64_t block_index) {\n+    size_t chunk_index = static_cast<size_t>(block_index);\n+    if (chunks_.size() <= chunk_index) {\n+      chunks_.resize(chunk_index + 1);\n+    }\n+    if (!chunks_[block_index].is_valid()) {\n+      chunks_[block_index] = Future<std::shared_ptr<Array>>::Make();\n+    }\n+  }\n+\n+  void SetChunk(int64_t chunk_index, Result<std::shared_ptr<Array>> maybe_array) {\n+    std::lock_guard<std::mutex> lock(mutex_);\n+    SetChunkUnlocked(chunk_index, std::move(maybe_array));\n+  }\n+\n+  void SetChunkUnlocked(int64_t chunk_index, Result<std::shared_ptr<Array>> maybe_array) {\n+    auto* chunk = &chunks_[chunk_index];\n+    DCHECK(chunk->is_valid());\n+    DCHECK(!IsFutureFinished(chunk->state()));\n+\n+    if (maybe_array.ok()) {\n+      chunk->MarkFinished(std::move(maybe_array));\n+    } else {\n+      chunk->MarkFinished(WrapConversionError(maybe_array.status()));\n+    }\n+  }\n+\n+  Status WrapConversionError(const Status& st) {\n+    if (st.ok()) {\n+      return st;\n+    } else {\n+      std::stringstream ss;\n+      ss << \"In CSV column #\" << col_index_ << \": \" << st.message();\n+      return st.WithMessage(ss.str());\n+    }\n+  }\n+\n+  MemoryPool* pool_;\n+  int32_t col_index_;\n+\n+  std::vector<Future<std::shared_ptr<Array>>> chunks_;\n \n Review comment:\n   I think users (at least in Python) will expect the CSV to be iterated in file order. That said we shouldn't keep a reference here once the chunk is fetched.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-14T08:24:03.678+0000",
                    "updated": "2020-04-14T08:24:03.678+0000",
                    "started": "2020-04-14T08:24:03.678+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "421902",
                    "issueId": "13188963"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13188963/worklog/421903",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #6764: ARROW-3410: [C++][Python] Add streaming CSV reader.\nURL: https://github.com/apache/arrow/pull/6764#issuecomment-613298844\n \n \n   Wow, thanks for noticing the memory issue. It's probably something that needs to be fixed on the C++ side.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-14T08:24:30.078+0000",
                    "updated": "2020-04-14T08:24:30.078+0000",
                    "started": "2020-04-14T08:24:30.078+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "421903",
                    "issueId": "13188963"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13188963/worklog/421959",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #6764: ARROW-3410: [C++][Python] Add streaming CSV reader.\nURL: https://github.com/apache/arrow/pull/6764#issuecomment-613376252\n \n \n   If you run your snippet again, the memory consumption issue should be fixed.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-14T11:07:00.502+0000",
                    "updated": "2020-04-14T11:07:00.502+0000",
                    "started": "2020-04-14T11:07:00.502+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "421959",
                    "issueId": "13188963"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13188963/worklog/421981",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #6764: ARROW-3410: [C++][Python] Add streaming CSV reader.\nURL: https://github.com/apache/arrow/pull/6764#issuecomment-613392040\n \n \n   CI failure looks unrelated.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-14T11:42:11.067+0000",
                    "updated": "2020-04-14T11:42:11.067+0000",
                    "started": "2020-04-14T11:42:11.066+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "421981",
                    "issueId": "13188963"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13188963/worklog/422019",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #6764: ARROW-3410: [C++][Python] Add streaming CSV reader.\nURL: https://github.com/apache/arrow/pull/6764#discussion_r408120576\n \n \n\n ##########\n File path: cpp/src/arrow/csv/column_decoder.cc\n ##########\n @@ -0,0 +1,365 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <cstddef>\n+#include <cstdint>\n+#include <memory>\n+#include <mutex>\n+#include <sstream>\n+#include <string>\n+#include <utility>\n+#include <vector>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/builder.h\"\n+#include \"arrow/csv/column_decoder.h\"\n+#include \"arrow/csv/converter.h\"\n+#include \"arrow/csv/inference_internal.h\"\n+#include \"arrow/csv/options.h\"\n+#include \"arrow/csv/parser.h\"\n+#include \"arrow/memory_pool.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/util/future.h\"\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/util/task_group.h\"\n+\n+namespace arrow {\n+namespace csv {\n+\n+using internal::TaskGroup;\n+\n+class ConcreteColumnDecoder : public ColumnDecoder {\n+ public:\n+  explicit ConcreteColumnDecoder(MemoryPool* pool,\n+                                 std::shared_ptr<internal::TaskGroup> task_group,\n+                                 int32_t col_index = -1)\n+      : ColumnDecoder(std::move(task_group)),\n+        pool_(pool),\n+        col_index_(col_index),\n+        num_chunks_(-1),\n+        next_chunk_(0) {}\n+\n+  void Append(const std::shared_ptr<BlockParser>& parser) override {\n+    Insert(static_cast<int64_t>(chunks_.size()), parser);\n+  }\n+\n+  void SetEOF(int64_t num_blocks) override {\n+    std::lock_guard<std::mutex> lock(mutex_);\n+\n+    DCHECK_EQ(num_chunks_, -1) << \"Cannot change EOF\";\n+    num_chunks_ = num_blocks;\n+\n+    // If further chunks have been requested in NextChunk(), arrange to return nullptr\n+    for (int64_t i = num_chunks_; i < static_cast<int64_t>(chunks_.size()); ++i) {\n+      auto* chunk = &chunks_[i];\n+      if (chunk->is_valid()) {\n+        DCHECK(!IsFutureFinished(chunk->state()));\n+        chunk->MarkFinished(std::shared_ptr<Array>());\n+      }\n+    }\n+  }\n+\n+  Result<std::shared_ptr<Array>> NextChunk() override {\n+    std::unique_lock<std::mutex> lock(mutex_);\n+\n+    if (num_chunks_ > 0 && next_chunk_ >= num_chunks_) {\n+      return nullptr;  // EOF\n+    }\n+    PrepareChunkUnlocked(next_chunk_);\n+    auto chunk_index = next_chunk_++;\n+    return WaitForChunkUnlocked(chunk_index);\n+  }\n+\n+ protected:\n+  // XXX useful?\n+  virtual std::shared_ptr<DataType> type() const = 0;\n+\n+  Result<std::shared_ptr<Array>> WaitForChunkUnlocked(int64_t chunk_index) {\n+    auto future = chunks_[chunk_index];  // Make copy because of resizes\n+    mutex_.unlock();\n+    auto maybe_array = future.result();\n+    mutex_.lock();\n+    return maybe_array;\n+  }\n+\n+  void PrepareChunk(int64_t block_index) {\n+    std::lock_guard<std::mutex> lock(mutex_);\n+    PrepareChunkUnlocked(block_index);\n+  }\n+\n+  void PrepareChunkUnlocked(int64_t block_index) {\n+    size_t chunk_index = static_cast<size_t>(block_index);\n+    if (chunks_.size() <= chunk_index) {\n+      chunks_.resize(chunk_index + 1);\n+    }\n+    if (!chunks_[block_index].is_valid()) {\n+      chunks_[block_index] = Future<std::shared_ptr<Array>>::Make();\n+    }\n+  }\n+\n+  void SetChunk(int64_t chunk_index, Result<std::shared_ptr<Array>> maybe_array) {\n+    std::lock_guard<std::mutex> lock(mutex_);\n+    SetChunkUnlocked(chunk_index, std::move(maybe_array));\n+  }\n+\n+  void SetChunkUnlocked(int64_t chunk_index, Result<std::shared_ptr<Array>> maybe_array) {\n+    auto* chunk = &chunks_[chunk_index];\n+    DCHECK(chunk->is_valid());\n+    DCHECK(!IsFutureFinished(chunk->state()));\n+\n+    if (maybe_array.ok()) {\n+      chunk->MarkFinished(std::move(maybe_array));\n+    } else {\n+      chunk->MarkFinished(WrapConversionError(maybe_array.status()));\n+    }\n+  }\n+\n+  Status WrapConversionError(const Status& st) {\n+    if (st.ok()) {\n+      return st;\n+    } else {\n+      std::stringstream ss;\n+      ss << \"In CSV column #\" << col_index_ << \": \" << st.message();\n+      return st.WithMessage(ss.str());\n+    }\n+  }\n+\n+  MemoryPool* pool_;\n+  int32_t col_index_;\n+\n+  std::vector<Future<std::shared_ptr<Array>>> chunks_;\n \n Review comment:\n   This limitation exists due to how BaseStreamingReader does the iteration, i.e. ParseAndInsert push to the vector and DecodeNextChunk then picks it up later, both are called in the same method (`StreamingReader::ReadNext`) there must be a way to pass this information without using indirection and avoid any hidden shared state entirely.\r\n   \r\n   ```python\r\n   class BaseStreamingReader:\r\n     def init(self, fd, schema=None):\r\n        self.schema = set_or_infer_schema(fd, schema)\r\n        self.chunker = chunker(...)\r\n   \r\n     def parse_tasks(self):\r\n       \"\"\" A low-level interface that generates ParseTask. \r\n   \r\n       The yielded task are ordered due to the nature of Chunker.\r\n       There is no concurrency done except the thread-safety of Chunker, \r\n       e.g. protected by a mutex, the onus is always on the caller to synchronize\r\n       the calls to this method if he needs them to be ordered, use a TaskGroup \r\n       to dispatch, and the logic re-ordering the futures' results.\r\n   \r\n       This is the interface that the Dataset FileFormat will use.\r\n       \"\"\"\r\n       for buffer in self.chunker:\r\n         # A closure (Buffer, ...) -> Result<RecordBatch>\r\n         yield make_parse_task(buffer, decoders, self.schema)\r\n     \r\n   class SerialStreamingReader(BaseStreamingReader):\r\n     def record_batches(self):\r\n       \"\"\"\r\n       High-level interface that generates RecordBatch.\r\n       \"\"\"\r\n       for task in self.parse_tasks():\r\n         yield task()\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-14T13:06:49.047+0000",
                    "updated": "2020-04-14T13:06:49.047+0000",
                    "started": "2020-04-14T13:06:49.047+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "422019",
                    "issueId": "13188963"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13188963/worklog/422022",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #6764: ARROW-3410: [C++][Python] Add streaming CSV reader.\nURL: https://github.com/apache/arrow/pull/6764#discussion_r408127691\n \n \n\n ##########\n File path: cpp/src/arrow/csv/column_decoder.cc\n ##########\n @@ -0,0 +1,365 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <cstddef>\n+#include <cstdint>\n+#include <memory>\n+#include <mutex>\n+#include <sstream>\n+#include <string>\n+#include <utility>\n+#include <vector>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/builder.h\"\n+#include \"arrow/csv/column_decoder.h\"\n+#include \"arrow/csv/converter.h\"\n+#include \"arrow/csv/inference_internal.h\"\n+#include \"arrow/csv/options.h\"\n+#include \"arrow/csv/parser.h\"\n+#include \"arrow/memory_pool.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/util/future.h\"\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/util/task_group.h\"\n+\n+namespace arrow {\n+namespace csv {\n+\n+using internal::TaskGroup;\n+\n+class ConcreteColumnDecoder : public ColumnDecoder {\n+ public:\n+  explicit ConcreteColumnDecoder(MemoryPool* pool,\n+                                 std::shared_ptr<internal::TaskGroup> task_group,\n+                                 int32_t col_index = -1)\n+      : ColumnDecoder(std::move(task_group)),\n+        pool_(pool),\n+        col_index_(col_index),\n+        num_chunks_(-1),\n+        next_chunk_(0) {}\n+\n+  void Append(const std::shared_ptr<BlockParser>& parser) override {\n+    Insert(static_cast<int64_t>(chunks_.size()), parser);\n+  }\n+\n+  void SetEOF(int64_t num_blocks) override {\n+    std::lock_guard<std::mutex> lock(mutex_);\n+\n+    DCHECK_EQ(num_chunks_, -1) << \"Cannot change EOF\";\n+    num_chunks_ = num_blocks;\n+\n+    // If further chunks have been requested in NextChunk(), arrange to return nullptr\n+    for (int64_t i = num_chunks_; i < static_cast<int64_t>(chunks_.size()); ++i) {\n+      auto* chunk = &chunks_[i];\n+      if (chunk->is_valid()) {\n+        DCHECK(!IsFutureFinished(chunk->state()));\n+        chunk->MarkFinished(std::shared_ptr<Array>());\n+      }\n+    }\n+  }\n+\n+  Result<std::shared_ptr<Array>> NextChunk() override {\n+    std::unique_lock<std::mutex> lock(mutex_);\n+\n+    if (num_chunks_ > 0 && next_chunk_ >= num_chunks_) {\n+      return nullptr;  // EOF\n+    }\n+    PrepareChunkUnlocked(next_chunk_);\n+    auto chunk_index = next_chunk_++;\n+    return WaitForChunkUnlocked(chunk_index);\n+  }\n+\n+ protected:\n+  // XXX useful?\n+  virtual std::shared_ptr<DataType> type() const = 0;\n+\n+  Result<std::shared_ptr<Array>> WaitForChunkUnlocked(int64_t chunk_index) {\n+    auto future = chunks_[chunk_index];  // Make copy because of resizes\n+    mutex_.unlock();\n+    auto maybe_array = future.result();\n+    mutex_.lock();\n+    return maybe_array;\n+  }\n+\n+  void PrepareChunk(int64_t block_index) {\n+    std::lock_guard<std::mutex> lock(mutex_);\n+    PrepareChunkUnlocked(block_index);\n+  }\n+\n+  void PrepareChunkUnlocked(int64_t block_index) {\n+    size_t chunk_index = static_cast<size_t>(block_index);\n+    if (chunks_.size() <= chunk_index) {\n+      chunks_.resize(chunk_index + 1);\n+    }\n+    if (!chunks_[block_index].is_valid()) {\n+      chunks_[block_index] = Future<std::shared_ptr<Array>>::Make();\n+    }\n+  }\n+\n+  void SetChunk(int64_t chunk_index, Result<std::shared_ptr<Array>> maybe_array) {\n+    std::lock_guard<std::mutex> lock(mutex_);\n+    SetChunkUnlocked(chunk_index, std::move(maybe_array));\n+  }\n+\n+  void SetChunkUnlocked(int64_t chunk_index, Result<std::shared_ptr<Array>> maybe_array) {\n+    auto* chunk = &chunks_[chunk_index];\n+    DCHECK(chunk->is_valid());\n+    DCHECK(!IsFutureFinished(chunk->state()));\n+\n+    if (maybe_array.ok()) {\n+      chunk->MarkFinished(std::move(maybe_array));\n+    } else {\n+      chunk->MarkFinished(WrapConversionError(maybe_array.status()));\n+    }\n+  }\n+\n+  Status WrapConversionError(const Status& st) {\n+    if (st.ok()) {\n+      return st;\n+    } else {\n+      std::stringstream ss;\n+      ss << \"In CSV column #\" << col_index_ << \": \" << st.message();\n+      return st.WithMessage(ss.str());\n+    }\n+  }\n+\n+  MemoryPool* pool_;\n+  int32_t col_index_;\n+\n+  std::vector<Future<std::shared_ptr<Array>>> chunks_;\n \n Review comment:\n   One thing this is missing is that the type-inferring decoder has shared state by definition.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-14T13:17:19.210+0000",
                    "updated": "2020-04-14T13:17:19.210+0000",
                    "started": "2020-04-14T13:17:19.210+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "422022",
                    "issueId": "13188963"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13188963/worklog/422118",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #6764: ARROW-3410: [C++][Python] Add streaming CSV reader.\nURL: https://github.com/apache/arrow/pull/6764\n \n \n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-14T15:44:30.236+0000",
                    "updated": "2020-04-14T15:44:30.236+0000",
                    "started": "2020-04-14T15:44:30.235+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "422118",
                    "issueId": "13188963"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 7800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@559d319f[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@78b1bec8[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@383698f1[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@4d0436c1[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@480991de[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@16cd628b[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1a3091b3[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@766e0e0a[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@726de678[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@f491b84[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@11eaaed7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@17f2ecbe[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 7800,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Apr 14 15:44:29 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-04-14T15:44:29.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3410/watchers",
            "watchCount": 7,
            "isWatching": false
        },
        "created": "2018-10-02T20:09:48.000+0000",
        "updated": "2020-04-14T15:44:30.000+0000",
        "timeoriginalestimate": null,
        "description": "CSV reads are currently all-or-nothing. If the results of parsing a CSV file do not fit into memory, this can be a problem. I propose to define a streaming {{RecordBatchReader}} interface so that the record batches produced by reading can be written out immediately to a stream on disk, to be memory mapped later",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 7800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++][Dataset] Streaming CSV reader interface for memory-constrainted environments",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13188963/comment/16660908",
                    "id": "16660908",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Note this can't work if type inference is enabled, as type inference needs to be able to change the type of a chunk after first parsing it.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2018-10-23T16:17:58.604+0000",
                    "updated": "2018-10-23T16:17:58.604+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13188963/comment/16661048",
                    "id": "16661048",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Right, we'll have to make the type inference more flexible than it is now. Some CSV libraries provide an option to use a certain portion of the file to infer the schema, then enforcing that beyond. So we could imagine using the first 100MB of a file (or a certain number of rows) to infer types, then forcing those types on further chunks",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-10-23T17:50:16.592+0000",
                    "updated": "2018-10-23T17:50:16.592+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13188963/comment/16969181",
                    "id": "16969181",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "[~fsaintjacques] What kind of API would Datasets need from a streaming CSV reader? A RecordBatch iterator? Something else?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2019-11-07T11:23:04.687+0000",
                    "updated": "2019-11-07T11:23:04.687+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13188963/comment/16969243",
                    "id": "16969243",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=fsaintjacques",
                        "name": "fsaintjacques",
                        "key": "fsaintjacques",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=fsaintjacques&avatarId=37276",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=fsaintjacques&avatarId=37276",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=fsaintjacques&avatarId=37276",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=fsaintjacques&avatarId=37276"
                        },
                        "displayName": "Francois Saint-Jacques",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Ideally not a RecordBatch iterator. Looking at `file_parquet.cc` is your best bet.\r\n\r\n# CSV reader's options should be in an instance of CSVFileFormat.\r\n# Implement `CSVFileFormat::Inspect()`, this is needed to \"peek\" the Schema of a file. It should be possible to limit the number of rows parsed (in the constructor of CSVFileFormat) for the inspect call.\r\n# Implement `CSVFileFormat::ScanFile()`. This returns a ScanTaskIterator. A ScanTask is a closure that yields an Iterator<RecordBatch>.\r\n\r\nSome expected requirements by callers (Scanner::ToTable()) of ScanFile:\r\n* ScanFile should be fast-ish. It is used to enumerate all ScanTasks before dispatching to the thread pool. It is ran serially over all fragments in a DataSource (this could change).\r\n* Due to previous point, ScanTask should not hold memory until consumed (in parquet, it only holds the row_group_id). In the case of CSV, it might be that the Blocks are referenced by (offset, length) instead of a shared_ptr<Buffer>.\r\n* ScanTask are expected to be bound to a single thread and shouldn't have nested parallelism.\r\n* No inference should be done, the user _always_ pass an explicit schema at the DataSource construction time. \r\n* Ensure that column subset projection is properly done, (see InferColumnProjection in parquet). This is probably the only optimization we can make for now, there's nothing much we can do about predicate pushdown.\r\n\r\nThe way I foresee how it is implement is the following:\r\n* The CSV parser divides the file in blocks in ScanFile(), each block is bound to a ScanTask. As noted, this needs to be done in a fashion that does not hold memory.\r\n* A ScanTask parses a block an yields one-or-more RecordBatch.\r\n\r\nThis is very similar to the current ThreadedReader with some differences:\r\n* Inversion of control, it yields tasks instead of dispatching them directly.\r\n* The Block iterator must not be blocking and not hold buffers.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=fsaintjacques",
                        "name": "fsaintjacques",
                        "key": "fsaintjacques",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=fsaintjacques&avatarId=37276",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=fsaintjacques&avatarId=37276",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=fsaintjacques&avatarId=37276",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=fsaintjacques&avatarId=37276"
                        },
                        "displayName": "Francois Saint-Jacques",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-11-07T13:22:37.567+0000",
                    "updated": "2019-11-07T13:22:37.567+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13188963/comment/16969260",
                    "id": "16969260",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "> Due to previous point, ScanTask should not hold memory until consumed\r\n\r\nHmm... to define the blocks in a CSV file, I have to read the CSV file entirely. So if memory isn't held, then each ScanTask will have to read the CSV file a second time. This may not be a big problem (but still suboptimal - memory copies) if the CSV file stays in the filesystem cache, but what about a huge CSV file?\r\n\r\nThe only reasonable way to ingest a CSV file in parallel is to do the chunking while reading the file, AFAIK.\r\n\r\n> ScanTask are expected to be bound to a single thread and shouldn't have nested parallelism.\r\n\r\nWhy that? It shouldn't be a problem if using the global thread pool.\r\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2019-11-07T13:44:27.349+0000",
                    "updated": "2019-11-07T13:44:27.349+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13188963/comment/17083360",
                    "id": "17083360",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=fsaintjacques",
                        "name": "fsaintjacques",
                        "key": "fsaintjacques",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=fsaintjacques&avatarId=37276",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=fsaintjacques&avatarId=37276",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=fsaintjacques&avatarId=37276",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=fsaintjacques&avatarId=37276"
                        },
                        "displayName": "Francois Saint-Jacques",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 6764\n[https://github.com/apache/arrow/pull/6764]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=fsaintjacques",
                        "name": "fsaintjacques",
                        "key": "fsaintjacques",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=fsaintjacques&avatarId=37276",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=fsaintjacques&avatarId=37276",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=fsaintjacques&avatarId=37276",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=fsaintjacques&avatarId=37276"
                        },
                        "displayName": "Francois Saint-Jacques",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2020-04-14T15:44:29.634+0000",
                    "updated": "2020-04-14T15:44:29.634+0000"
                }
            ],
            "maxResults": 6,
            "total": 6,
            "startAt": 0
        },
        "customfield_12311820": "0|i3yr2n:",
        "customfield_12314139": null
    }
}