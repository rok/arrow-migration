{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13208633",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208633",
    "key": "ARROW-4213",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343937",
                "id": "12343937",
                "description": "",
                "name": "0.13.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-04-01"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "flight",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
            "name": "lidavidm",
            "key": "lidavidm",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "David Li",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12334621",
                "id": "12334621",
                "name": "FlightRPC"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
            "name": "lidavidm",
            "key": "lidavidm",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "David Li",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
            "name": "lidavidm",
            "key": "lidavidm",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "David Li",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 19200,
            "total": 19200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 19200,
            "total": 19200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-4213/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 37,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208633/worklog/189617",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lihalite commented on pull request #3477: [ARROW-4213] Fix Flight incompatibilities between C++ and Java\nURL: https://github.com/apache/arrow/pull/3477\n \n \n   I'm willing to update the patches here in case you want to resolve incompatibilities differently. The changes are:\r\n   \r\n   - In C++, send/read the schema as the first message in a DoGet stream.\r\n   - In Java, encode the GetFlightInfo schema in a Flatbuffer Message payload.\r\n   - In C++, skip null columns when encoding IpcPayload.\r\n   - In C++, don't write the body tag when encoding IpcPayload if no buffers are present.\r\n   - In Java, always align buffers when serializing record batches.\r\n   \r\n   Additionally:\r\n   - Add integration tests for Flight. They will fail when trying to test record batches with dictionaries, but otherwise pass.\r\n   - Generate an uberjar for Flight, and include Apache Commons CLI and gRPC in the uberjar.\r\n   - Explicitly add the generated gRPC/Protobuf sources to the Java build - for some reason, Maven was not picking them up.\r\n   - In Java FlightClient, if there's an exception, use it to resolve the VectorSchemaRoot CompletableFuture so that clients do not hang forever.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-24T18:50:52.965+0000",
                    "updated": "2019-01-24T18:50:52.965+0000",
                    "started": "2019-01-24T18:50:52.964+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "189617",
                    "issueId": "13208633"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208633/worklog/189629",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #3477: ARROW-4213: Fix Flight incompatibilities between C++ and Java\nURL: https://github.com/apache/arrow/pull/3477#issuecomment-457318550\n \n \n   Thanks @lihalite! I'll review this ASAP since resolving these incompatibilities will help a lot\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-24T19:08:42.760+0000",
                    "updated": "2019-01-24T19:08:42.760+0000",
                    "started": "2019-01-24T19:08:42.759+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "189629",
                    "issueId": "13208633"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208633/worklog/189657",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #3477: ARROW-4213: Fix Flight incompatibilities between C++ and Java\nURL: https://github.com/apache/arrow/pull/3477#discussion_r250745454\n \n \n\n ##########\n File path: cpp/src/arrow/flight/server.cc\n ##########\n @@ -102,6 +102,10 @@ class SerializationTraits<IpcPayload> {\n \n     int64_t body_size = 0;\n     for (const auto& buffer : msg.body_buffers) {\n+      // Buffer may be null when the row length is zero, or when all\n \n Review comment:\n   Is there a way to add a debug assertion over those two conditions here?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-24T20:06:47.020+0000",
                    "updated": "2019-01-24T20:06:47.020+0000",
                    "started": "2019-01-24T20:06:47.019+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "189657",
                    "issueId": "13208633"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208633/worklog/189658",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #3477: ARROW-4213: Fix Flight incompatibilities between C++ and Java\nURL: https://github.com/apache/arrow/pull/3477#discussion_r250747062\n \n \n\n ##########\n File path: cpp/src/arrow/flight/test-integration-client.cc\n ##########\n @@ -0,0 +1,75 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+// Client implementation for Flight integration testing. Requests the\n+// given path from the Flight server, then serializes the result back\n+// to JSON and writes it to standard out.\n+\n+#include <signal.h>\n \n Review comment:\n   This header looks unused here.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-24T20:06:47.102+0000",
                    "updated": "2019-01-24T20:06:47.102+0000",
                    "started": "2019-01-24T20:06:47.101+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "189658",
                    "issueId": "13208633"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208633/worklog/189659",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #3477: ARROW-4213: Fix Flight incompatibilities between C++ and Java\nURL: https://github.com/apache/arrow/pull/3477#discussion_r250756172\n \n \n\n ##########\n File path: cpp/src/arrow/flight/test-integration-server.cc\n ##########\n @@ -0,0 +1,152 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+// Example server implementation for integration testing purposes\n+\n+#include <signal.h>\n+#include <iostream>\n+#include <memory>\n+#include <string>\n+\n+#include <gflags/gflags.h>\n+\n+#include \"arrow/io/test-common.h\"\n+#include \"arrow/ipc/json.h\"\n+#include \"arrow/record_batch.h\"\n+\n+#include \"arrow/flight/server.h\"\n+#include \"arrow/flight/test-util.h\"\n+\n+DEFINE_int32(port, 31337, \"Server port to listen on\");\n+\n+namespace arrow {\n+namespace flight {\n+\n+class JsonReaderRecordBatchStream : public FlightDataStream {\n+public:\n+  JsonReaderRecordBatchStream(std::unique_ptr<ipc::internal::json::JsonReader>&& reader) :\n+    index_(0), pool_(default_memory_pool()), reader_(std::move(reader)) {}\n+\n+  std::shared_ptr<Schema> schema() override {\n+    return reader_->schema();\n+  }\n+\n+  Status Next(ipc::internal::IpcPayload* payload) override {\n+    if (index_ >= reader_->num_record_batches()) {\n+      // Signal that iteration is over\n+      payload->metadata = nullptr;\n+      return Status::OK();\n+    }\n+\n+    std::shared_ptr<RecordBatch> batch;\n+    RETURN_NOT_OK(reader_->ReadRecordBatch(index_, &batch));\n+    index_++;\n+\n+    if (!batch) {\n+      // Signal that iteration is over\n+      payload->metadata = nullptr;\n+      return Status::OK();\n+    } else {\n+      return ipc::internal::GetRecordBatchPayload(*batch, pool_, payload);\n+    }\n+  }\n+\n+private:\n+  int index_;\n+  MemoryPool* pool_;\n+  std::unique_ptr<ipc::internal::json::JsonReader> reader_;\n+};\n+\n+class FlightIntegrationTestServer : public FlightServerBase {\n+  Status ReadJson(const std::string& json_path,\n+                  std::unique_ptr<ipc::internal::json::JsonReader>* out) {\n+    std::shared_ptr<io::ReadableFile> in_file;\n+    std::cout << \"Opening JSON file '\" << json_path << \"'\" << std::endl;\n+    RETURN_NOT_OK(io::ReadableFile::Open(json_path, &in_file));\n+\n+    int64_t file_size = 0;\n+    RETURN_NOT_OK(in_file->GetSize(&file_size));\n+\n+    std::shared_ptr<Buffer> json_buffer;\n+    RETURN_NOT_OK(in_file->Read(file_size, &json_buffer));\n+\n+    RETURN_NOT_OK(arrow::ipc::internal::json::JsonReader::Open(json_buffer, out));\n+    return Status::OK();\n+  }\n+\n+  Status GetFlightInfo(const FlightDescriptor& request,\n+                       std::unique_ptr<FlightInfo>* info) override {\n+    if (request.type == FlightDescriptor::PATH) {\n+      if (request.path.size() == 0) {\n+        return Status::Invalid(\"Invalid path\");\n+      }\n+\n+      std::unique_ptr<arrow::ipc::internal::json::JsonReader> reader;\n+      RETURN_NOT_OK(ReadJson(request.path.back(), &reader));\n+\n+      FlightEndpoint endpoint1({{request.path.back()}, {}});\n+\n+      FlightInfo::Data flight_data;\n+      RETURN_NOT_OK(internal::SchemaToString(*reader->schema(), &flight_data.schema));\n+      flight_data.descriptor = request;\n+      flight_data.endpoints = {endpoint1};\n+      flight_data.total_records = reader->num_record_batches();\n+      flight_data.total_bytes = 0;\n+      FlightInfo value(flight_data);\n+\n+      *info = std::unique_ptr<FlightInfo>(new FlightInfo(value));\n+      return Status::OK();\n+    } else {\n+      return Status::NotImplemented(request.type);\n+    }\n+  }\n+\n+  Status DoGet(const Ticket& request,\n+               std::unique_ptr<FlightDataStream>* data_stream) override {\n+      std::unique_ptr<arrow::ipc::internal::json::JsonReader> reader;\n+      RETURN_NOT_OK(ReadJson(request.ticket, &reader));\n+\n+      *data_stream = std::unique_ptr<FlightDataStream>(new JsonReaderRecordBatchStream(std::move(reader)));\n+\n+      return Status::OK();\n+  }\n+};\n+\n+}  // namespace flight\n+}  // namespace arrow\n+\n+std::unique_ptr<arrow::flight::FlightIntegrationTestServer> g_server;\n+\n+void Shutdown(int signal) {\n+  if (g_server != nullptr) {\n+    g_server->Shutdown();\n+  }\n+}\n+\n+int main(int argc, char** argv) {\n+  gflags::SetUsageMessage(\"Integration testing server for Flight.\");\n+  gflags::ParseCommandLineFlags(&argc, &argv, true);\n+\n+  // SIGTERM shuts down the server\n+  signal(SIGTERM, Shutdown);\n+\n+  g_server.reset(new arrow::flight::FlightIntegrationTestServer);\n+\n+  // TODO(wesm): How can we tell if the server failed to start for some reason?\n \n Review comment:\n   If `g_server->Run` raises an exception, then the process will most probably stop with a non-zero exit code. Is this comment alluding to something else?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-24T20:06:47.201+0000",
                    "updated": "2019-01-24T20:06:47.201+0000",
                    "started": "2019-01-24T20:06:47.200+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "189659",
                    "issueId": "13208633"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208633/worklog/189660",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #3477: ARROW-4213: Fix Flight incompatibilities between C++ and Java\nURL: https://github.com/apache/arrow/pull/3477#discussion_r250756763\n \n \n\n ##########\n File path: cpp/src/arrow/ipc/writer.h\n ##########\n @@ -24,6 +24,7 @@\n #include <memory>\n #include <vector>\n \n+#include \"arrow/ipc/dictionary.h\"\n \n Review comment:\n   Could instead forward-declare class `DictionaryMemo` (not sure how important it is, but if we do this often it helps reduce compile times).\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-24T20:06:47.202+0000",
                    "updated": "2019-01-24T20:06:47.202+0000",
                    "started": "2019-01-24T20:06:47.201+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "189660",
                    "issueId": "13208633"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208633/worklog/189661",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #3477: ARROW-4213: Fix Flight incompatibilities between C++ and Java\nURL: https://github.com/apache/arrow/pull/3477#discussion_r250749893\n \n \n\n ##########\n File path: cpp/src/arrow/flight/test-integration-server.cc\n ##########\n @@ -0,0 +1,152 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+// Example server implementation for integration testing purposes\n+\n+#include <signal.h>\n+#include <iostream>\n+#include <memory>\n+#include <string>\n+\n+#include <gflags/gflags.h>\n+\n+#include \"arrow/io/test-common.h\"\n+#include \"arrow/ipc/json.h\"\n+#include \"arrow/record_batch.h\"\n+\n+#include \"arrow/flight/server.h\"\n+#include \"arrow/flight/test-util.h\"\n+\n+DEFINE_int32(port, 31337, \"Server port to listen on\");\n+\n+namespace arrow {\n+namespace flight {\n+\n+class JsonReaderRecordBatchStream : public FlightDataStream {\n+public:\n+  JsonReaderRecordBatchStream(std::unique_ptr<ipc::internal::json::JsonReader>&& reader) :\n+    index_(0), pool_(default_memory_pool()), reader_(std::move(reader)) {}\n+\n+  std::shared_ptr<Schema> schema() override {\n+    return reader_->schema();\n+  }\n+\n+  Status Next(ipc::internal::IpcPayload* payload) override {\n+    if (index_ >= reader_->num_record_batches()) {\n+      // Signal that iteration is over\n+      payload->metadata = nullptr;\n+      return Status::OK();\n+    }\n+\n+    std::shared_ptr<RecordBatch> batch;\n+    RETURN_NOT_OK(reader_->ReadRecordBatch(index_, &batch));\n+    index_++;\n+\n+    if (!batch) {\n+      // Signal that iteration is over\n+      payload->metadata = nullptr;\n+      return Status::OK();\n+    } else {\n+      return ipc::internal::GetRecordBatchPayload(*batch, pool_, payload);\n+    }\n+  }\n+\n+private:\n+  int index_;\n+  MemoryPool* pool_;\n+  std::unique_ptr<ipc::internal::json::JsonReader> reader_;\n+};\n+\n+class FlightIntegrationTestServer : public FlightServerBase {\n+  Status ReadJson(const std::string& json_path,\n+                  std::unique_ptr<ipc::internal::json::JsonReader>* out) {\n+    std::shared_ptr<io::ReadableFile> in_file;\n+    std::cout << \"Opening JSON file '\" << json_path << \"'\" << std::endl;\n+    RETURN_NOT_OK(io::ReadableFile::Open(json_path, &in_file));\n+\n+    int64_t file_size = 0;\n+    RETURN_NOT_OK(in_file->GetSize(&file_size));\n+\n+    std::shared_ptr<Buffer> json_buffer;\n+    RETURN_NOT_OK(in_file->Read(file_size, &json_buffer));\n+\n+    RETURN_NOT_OK(arrow::ipc::internal::json::JsonReader::Open(json_buffer, out));\n+    return Status::OK();\n+  }\n+\n+  Status GetFlightInfo(const FlightDescriptor& request,\n+                       std::unique_ptr<FlightInfo>* info) override {\n+    if (request.type == FlightDescriptor::PATH) {\n+      if (request.path.size() == 0) {\n+        return Status::Invalid(\"Invalid path\");\n+      }\n+\n+      std::unique_ptr<arrow::ipc::internal::json::JsonReader> reader;\n+      RETURN_NOT_OK(ReadJson(request.path.back(), &reader));\n+\n+      FlightEndpoint endpoint1({{request.path.back()}, {}});\n+\n+      FlightInfo::Data flight_data;\n+      RETURN_NOT_OK(internal::SchemaToString(*reader->schema(), &flight_data.schema));\n+      flight_data.descriptor = request;\n+      flight_data.endpoints = {endpoint1};\n+      flight_data.total_records = reader->num_record_batches();\n+      flight_data.total_bytes = 0;\n \n Review comment:\n   Should either be -1 (unknown) or the actual number of bytes in the dataset, no?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-24T20:06:47.320+0000",
                    "updated": "2019-01-24T20:06:47.320+0000",
                    "started": "2019-01-24T20:06:47.319+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "189661",
                    "issueId": "13208633"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208633/worklog/189662",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #3477: ARROW-4213: Fix Flight incompatibilities between C++ and Java\nURL: https://github.com/apache/arrow/pull/3477#discussion_r250757735\n \n \n\n ##########\n File path: integration/integration_test.py\n ##########\n @@ -1048,10 +1114,33 @@ def file_to_stream(self, file_path, stream_path):\n             print(' '.join(cmd))\n         run_cmd(cmd)\n \n+    def flight_request(self, json_path, arrow_path):\n+        cmd = ['java', '-cp', self.ARROW_FLIGHT_JAR,\n+               'org.apache.arrow.flight.example.integration.IntegrationTestClient',\n+               '-j', json_path, '-a', arrow_path]\n+        if self.debug:\n+            print(' '.join(cmd))\n+        run_cmd(cmd)\n+\n+    @contextlib.contextmanager\n+    def flight_server(self):\n+        cmd = ['java', '-cp', self.ARROW_FLIGHT_JAR,\n+               'org.apache.arrow.flight.example.integration.IntegrationTestServer']\n+        if self.debug:\n+            print(' '.join(cmd))\n+        server = subprocess.Popen(cmd)\n+        try:\n+            time.sleep(1)\n+            yield\n+        finally:\n+            server.terminate()\n \n Review comment:\n   Ideally you would add `server.wait()` after this. Unless it slows down the tests too much?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-24T20:06:47.323+0000",
                    "updated": "2019-01-24T20:06:47.323+0000",
                    "started": "2019-01-24T20:06:47.322+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "189662",
                    "issueId": "13208633"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208633/worklog/189663",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #3477: ARROW-4213: Fix Flight incompatibilities between C++ and Java\nURL: https://github.com/apache/arrow/pull/3477#discussion_r250758074\n \n \n\n ##########\n File path: integration/integration_test.py\n ##########\n @@ -1048,10 +1114,33 @@ def file_to_stream(self, file_path, stream_path):\n             print(' '.join(cmd))\n         run_cmd(cmd)\n \n+    def flight_request(self, json_path, arrow_path):\n+        cmd = ['java', '-cp', self.ARROW_FLIGHT_JAR,\n+               'org.apache.arrow.flight.example.integration.IntegrationTestClient',\n+               '-j', json_path, '-a', arrow_path]\n+        if self.debug:\n+            print(' '.join(cmd))\n+        run_cmd(cmd)\n+\n+    @contextlib.contextmanager\n+    def flight_server(self):\n+        cmd = ['java', '-cp', self.ARROW_FLIGHT_JAR,\n+               'org.apache.arrow.flight.example.integration.IntegrationTestServer']\n+        if self.debug:\n+            print(' '.join(cmd))\n+        server = subprocess.Popen(cmd)\n+        try:\n+            time.sleep(1)\n \n Review comment:\n   Yuck :-) This may be fragile, especially if you run the test on slow CI platforms.\r\n   Ideally you would wait on some event from the child process (for example it would print \"Ready\" after the server starts listening).\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-24T20:06:47.396+0000",
                    "updated": "2019-01-24T20:06:47.396+0000",
                    "started": "2019-01-24T20:06:47.395+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "189663",
                    "issueId": "13208633"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208633/worklog/189664",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #3477: ARROW-4213: Fix Flight incompatibilities between C++ and Java\nURL: https://github.com/apache/arrow/pull/3477#discussion_r250756877\n \n \n\n ##########\n File path: cpp/src/arrow/ipc/writer.h\n ##########\n @@ -313,6 +314,16 @@ ARROW_EXPORT\n Status GetDictionaryPayloads(const Schema& schema,\n                              std::vector<std::unique_ptr<IpcPayload>>* out);\n \n+/// \\brief Compute IpcPayload for the given schema\n+/// \\param[in] schema the Schema that is being serialized\n+/// \\param[in,out] pool for any required temporary memory allocations\n+/// \\param[in,out] dictionary_memo TODO\n \n Review comment:\n   \"TODO\"? Does it mean the docstring needs to be completed or that the DictionaryMemo argument is ignored?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-24T20:06:47.470+0000",
                    "updated": "2019-01-24T20:06:47.470+0000",
                    "started": "2019-01-24T20:06:47.469+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "189664",
                    "issueId": "13208633"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208633/worklog/189672",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lihalite commented on pull request #3477: ARROW-4213: Fix Flight incompatibilities between C++ and Java\nURL: https://github.com/apache/arrow/pull/3477#discussion_r250763737\n \n \n\n ##########\n File path: integration/integration_test.py\n ##########\n @@ -1048,10 +1114,33 @@ def file_to_stream(self, file_path, stream_path):\n             print(' '.join(cmd))\n         run_cmd(cmd)\n \n+    def flight_request(self, json_path, arrow_path):\n+        cmd = ['java', '-cp', self.ARROW_FLIGHT_JAR,\n+               'org.apache.arrow.flight.example.integration.IntegrationTestClient',\n+               '-j', json_path, '-a', arrow_path]\n+        if self.debug:\n+            print(' '.join(cmd))\n+        run_cmd(cmd)\n+\n+    @contextlib.contextmanager\n+    def flight_server(self):\n+        cmd = ['java', '-cp', self.ARROW_FLIGHT_JAR,\n+               'org.apache.arrow.flight.example.integration.IntegrationTestServer']\n+        if self.debug:\n+            print(' '.join(cmd))\n+        server = subprocess.Popen(cmd)\n+        try:\n+            time.sleep(1)\n \n Review comment:\n   Yes, good point. I should also have the port be controlled by the integration test script rather than just assuming some random port.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-24T20:24:48.537+0000",
                    "updated": "2019-01-24T20:24:48.537+0000",
                    "started": "2019-01-24T20:24:48.536+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "189672",
                    "issueId": "13208633"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208633/worklog/189673",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lihalite commented on pull request #3477: ARROW-4213: Fix Flight incompatibilities between C++ and Java\nURL: https://github.com/apache/arrow/pull/3477#discussion_r250763930\n \n \n\n ##########\n File path: integration/integration_test.py\n ##########\n @@ -1048,10 +1114,33 @@ def file_to_stream(self, file_path, stream_path):\n             print(' '.join(cmd))\n         run_cmd(cmd)\n \n+    def flight_request(self, json_path, arrow_path):\n+        cmd = ['java', '-cp', self.ARROW_FLIGHT_JAR,\n+               'org.apache.arrow.flight.example.integration.IntegrationTestClient',\n+               '-j', json_path, '-a', arrow_path]\n+        if self.debug:\n+            print(' '.join(cmd))\n+        run_cmd(cmd)\n+\n+    @contextlib.contextmanager\n+    def flight_server(self):\n+        cmd = ['java', '-cp', self.ARROW_FLIGHT_JAR,\n+               'org.apache.arrow.flight.example.integration.IntegrationTestServer']\n+        if self.debug:\n+            print(' '.join(cmd))\n+        server = subprocess.Popen(cmd)\n+        try:\n+            time.sleep(1)\n+            yield\n+        finally:\n+            server.terminate()\n \n Review comment:\n   I'll give it a try. The Java tests are already quite slow; I want to dig into why it seems to take so long to just start the server.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-24T20:25:25.907+0000",
                    "updated": "2019-01-24T20:25:25.907+0000",
                    "started": "2019-01-24T20:25:25.906+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "189673",
                    "issueId": "13208633"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208633/worklog/189674",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lihalite commented on pull request #3477: ARROW-4213: Fix Flight incompatibilities between C++ and Java\nURL: https://github.com/apache/arrow/pull/3477#discussion_r250764235\n \n \n\n ##########\n File path: cpp/src/arrow/ipc/writer.h\n ##########\n @@ -313,6 +314,16 @@ ARROW_EXPORT\n Status GetDictionaryPayloads(const Schema& schema,\n                              std::vector<std::unique_ptr<IpcPayload>>* out);\n \n+/// \\brief Compute IpcPayload for the given schema\n+/// \\param[in] schema the Schema that is being serialized\n+/// \\param[in,out] pool for any required temporary memory allocations\n+/// \\param[in,out] dictionary_memo TODO\n \n Review comment:\n   Whoops, I need to complete that docstring.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-24T20:26:30.071+0000",
                    "updated": "2019-01-24T20:26:30.071+0000",
                    "started": "2019-01-24T20:26:30.071+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "189674",
                    "issueId": "13208633"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208633/worklog/189675",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lihalite commented on pull request #3477: ARROW-4213: Fix Flight incompatibilities between C++ and Java\nURL: https://github.com/apache/arrow/pull/3477#discussion_r250764283\n \n \n\n ##########\n File path: cpp/src/arrow/ipc/writer.h\n ##########\n @@ -24,6 +24,7 @@\n #include <memory>\n #include <vector>\n \n+#include \"arrow/ipc/dictionary.h\"\n \n Review comment:\n   Might as well as it's the only use here.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-24T20:26:40.244+0000",
                    "updated": "2019-01-24T20:26:40.244+0000",
                    "started": "2019-01-24T20:26:40.243+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "189675",
                    "issueId": "13208633"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208633/worklog/189676",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lihalite commented on pull request #3477: ARROW-4213: Fix Flight incompatibilities between C++ and Java\nURL: https://github.com/apache/arrow/pull/3477#discussion_r250764832\n \n \n\n ##########\n File path: cpp/src/arrow/flight/test-integration-server.cc\n ##########\n @@ -0,0 +1,152 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+// Example server implementation for integration testing purposes\n+\n+#include <signal.h>\n+#include <iostream>\n+#include <memory>\n+#include <string>\n+\n+#include <gflags/gflags.h>\n+\n+#include \"arrow/io/test-common.h\"\n+#include \"arrow/ipc/json.h\"\n+#include \"arrow/record_batch.h\"\n+\n+#include \"arrow/flight/server.h\"\n+#include \"arrow/flight/test-util.h\"\n+\n+DEFINE_int32(port, 31337, \"Server port to listen on\");\n+\n+namespace arrow {\n+namespace flight {\n+\n+class JsonReaderRecordBatchStream : public FlightDataStream {\n+public:\n+  JsonReaderRecordBatchStream(std::unique_ptr<ipc::internal::json::JsonReader>&& reader) :\n+    index_(0), pool_(default_memory_pool()), reader_(std::move(reader)) {}\n+\n+  std::shared_ptr<Schema> schema() override {\n+    return reader_->schema();\n+  }\n+\n+  Status Next(ipc::internal::IpcPayload* payload) override {\n+    if (index_ >= reader_->num_record_batches()) {\n+      // Signal that iteration is over\n+      payload->metadata = nullptr;\n+      return Status::OK();\n+    }\n+\n+    std::shared_ptr<RecordBatch> batch;\n+    RETURN_NOT_OK(reader_->ReadRecordBatch(index_, &batch));\n+    index_++;\n+\n+    if (!batch) {\n+      // Signal that iteration is over\n+      payload->metadata = nullptr;\n+      return Status::OK();\n+    } else {\n+      return ipc::internal::GetRecordBatchPayload(*batch, pool_, payload);\n+    }\n+  }\n+\n+private:\n+  int index_;\n+  MemoryPool* pool_;\n+  std::unique_ptr<ipc::internal::json::JsonReader> reader_;\n+};\n+\n+class FlightIntegrationTestServer : public FlightServerBase {\n+  Status ReadJson(const std::string& json_path,\n+                  std::unique_ptr<ipc::internal::json::JsonReader>* out) {\n+    std::shared_ptr<io::ReadableFile> in_file;\n+    std::cout << \"Opening JSON file '\" << json_path << \"'\" << std::endl;\n+    RETURN_NOT_OK(io::ReadableFile::Open(json_path, &in_file));\n+\n+    int64_t file_size = 0;\n+    RETURN_NOT_OK(in_file->GetSize(&file_size));\n+\n+    std::shared_ptr<Buffer> json_buffer;\n+    RETURN_NOT_OK(in_file->Read(file_size, &json_buffer));\n+\n+    RETURN_NOT_OK(arrow::ipc::internal::json::JsonReader::Open(json_buffer, out));\n+    return Status::OK();\n+  }\n+\n+  Status GetFlightInfo(const FlightDescriptor& request,\n+                       std::unique_ptr<FlightInfo>* info) override {\n+    if (request.type == FlightDescriptor::PATH) {\n+      if (request.path.size() == 0) {\n+        return Status::Invalid(\"Invalid path\");\n+      }\n+\n+      std::unique_ptr<arrow::ipc::internal::json::JsonReader> reader;\n+      RETURN_NOT_OK(ReadJson(request.path.back(), &reader));\n+\n+      FlightEndpoint endpoint1({{request.path.back()}, {}});\n+\n+      FlightInfo::Data flight_data;\n+      RETURN_NOT_OK(internal::SchemaToString(*reader->schema(), &flight_data.schema));\n+      flight_data.descriptor = request;\n+      flight_data.endpoints = {endpoint1};\n+      flight_data.total_records = reader->num_record_batches();\n+      flight_data.total_bytes = 0;\n+      FlightInfo value(flight_data);\n+\n+      *info = std::unique_ptr<FlightInfo>(new FlightInfo(value));\n+      return Status::OK();\n+    } else {\n+      return Status::NotImplemented(request.type);\n+    }\n+  }\n+\n+  Status DoGet(const Ticket& request,\n+               std::unique_ptr<FlightDataStream>* data_stream) override {\n+      std::unique_ptr<arrow::ipc::internal::json::JsonReader> reader;\n+      RETURN_NOT_OK(ReadJson(request.ticket, &reader));\n+\n+      *data_stream = std::unique_ptr<FlightDataStream>(new JsonReaderRecordBatchStream(std::move(reader)));\n+\n+      return Status::OK();\n+  }\n+};\n+\n+}  // namespace flight\n+}  // namespace arrow\n+\n+std::unique_ptr<arrow::flight::FlightIntegrationTestServer> g_server;\n+\n+void Shutdown(int signal) {\n+  if (g_server != nullptr) {\n+    g_server->Shutdown();\n+  }\n+}\n+\n+int main(int argc, char** argv) {\n+  gflags::SetUsageMessage(\"Integration testing server for Flight.\");\n+  gflags::ParseCommandLineFlags(&argc, &argv, true);\n+\n+  // SIGTERM shuts down the server\n+  signal(SIGTERM, Shutdown);\n+\n+  g_server.reset(new arrow::flight::FlightIntegrationTestServer);\n+\n+  // TODO(wesm): How can we tell if the server failed to start for some reason?\n \n Review comment:\n   Ah I copy-pasted this blindly from another example.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-24T20:28:27.467+0000",
                    "updated": "2019-01-24T20:28:27.467+0000",
                    "started": "2019-01-24T20:28:27.466+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "189676",
                    "issueId": "13208633"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208633/worklog/189677",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lihalite commented on pull request #3477: ARROW-4213: [Flight] Fix incompatibilities between C++ and Java\nURL: https://github.com/apache/arrow/pull/3477#discussion_r250765134\n \n \n\n ##########\n File path: cpp/src/arrow/flight/server.cc\n ##########\n @@ -102,6 +102,10 @@ class SerializationTraits<IpcPayload> {\n \n     int64_t body_size = 0;\n     for (const auto& buffer : msg.body_buffers) {\n+      // Buffer may be null when the row length is zero, or when all\n \n Review comment:\n   I think it would have to be added higher up in the stack, I'll dig around.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-24T20:29:25.519+0000",
                    "updated": "2019-01-24T20:29:25.519+0000",
                    "started": "2019-01-24T20:29:25.519+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "189677",
                    "issueId": "13208633"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208633/worklog/189678",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lihalite commented on pull request #3477: ARROW-4213: [Flight] Fix incompatibilities between C++ and Java\nURL: https://github.com/apache/arrow/pull/3477#discussion_r250765240\n \n \n\n ##########\n File path: cpp/src/arrow/flight/test-integration-server.cc\n ##########\n @@ -0,0 +1,152 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+// Example server implementation for integration testing purposes\n+\n+#include <signal.h>\n+#include <iostream>\n+#include <memory>\n+#include <string>\n+\n+#include <gflags/gflags.h>\n+\n+#include \"arrow/io/test-common.h\"\n+#include \"arrow/ipc/json.h\"\n+#include \"arrow/record_batch.h\"\n+\n+#include \"arrow/flight/server.h\"\n+#include \"arrow/flight/test-util.h\"\n+\n+DEFINE_int32(port, 31337, \"Server port to listen on\");\n+\n+namespace arrow {\n+namespace flight {\n+\n+class JsonReaderRecordBatchStream : public FlightDataStream {\n+public:\n+  JsonReaderRecordBatchStream(std::unique_ptr<ipc::internal::json::JsonReader>&& reader) :\n+    index_(0), pool_(default_memory_pool()), reader_(std::move(reader)) {}\n+\n+  std::shared_ptr<Schema> schema() override {\n+    return reader_->schema();\n+  }\n+\n+  Status Next(ipc::internal::IpcPayload* payload) override {\n+    if (index_ >= reader_->num_record_batches()) {\n+      // Signal that iteration is over\n+      payload->metadata = nullptr;\n+      return Status::OK();\n+    }\n+\n+    std::shared_ptr<RecordBatch> batch;\n+    RETURN_NOT_OK(reader_->ReadRecordBatch(index_, &batch));\n+    index_++;\n+\n+    if (!batch) {\n+      // Signal that iteration is over\n+      payload->metadata = nullptr;\n+      return Status::OK();\n+    } else {\n+      return ipc::internal::GetRecordBatchPayload(*batch, pool_, payload);\n+    }\n+  }\n+\n+private:\n+  int index_;\n+  MemoryPool* pool_;\n+  std::unique_ptr<ipc::internal::json::JsonReader> reader_;\n+};\n+\n+class FlightIntegrationTestServer : public FlightServerBase {\n+  Status ReadJson(const std::string& json_path,\n+                  std::unique_ptr<ipc::internal::json::JsonReader>* out) {\n+    std::shared_ptr<io::ReadableFile> in_file;\n+    std::cout << \"Opening JSON file '\" << json_path << \"'\" << std::endl;\n+    RETURN_NOT_OK(io::ReadableFile::Open(json_path, &in_file));\n+\n+    int64_t file_size = 0;\n+    RETURN_NOT_OK(in_file->GetSize(&file_size));\n+\n+    std::shared_ptr<Buffer> json_buffer;\n+    RETURN_NOT_OK(in_file->Read(file_size, &json_buffer));\n+\n+    RETURN_NOT_OK(arrow::ipc::internal::json::JsonReader::Open(json_buffer, out));\n+    return Status::OK();\n+  }\n+\n+  Status GetFlightInfo(const FlightDescriptor& request,\n+                       std::unique_ptr<FlightInfo>* info) override {\n+    if (request.type == FlightDescriptor::PATH) {\n+      if (request.path.size() == 0) {\n+        return Status::Invalid(\"Invalid path\");\n+      }\n+\n+      std::unique_ptr<arrow::ipc::internal::json::JsonReader> reader;\n+      RETURN_NOT_OK(ReadJson(request.path.back(), &reader));\n+\n+      FlightEndpoint endpoint1({{request.path.back()}, {}});\n+\n+      FlightInfo::Data flight_data;\n+      RETURN_NOT_OK(internal::SchemaToString(*reader->schema(), &flight_data.schema));\n+      flight_data.descriptor = request;\n+      flight_data.endpoints = {endpoint1};\n+      flight_data.total_records = reader->num_record_batches();\n+      flight_data.total_bytes = 0;\n \n Review comment:\n   You're right, I'll set it to -1.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-24T20:29:50.209+0000",
                    "updated": "2019-01-24T20:29:50.209+0000",
                    "started": "2019-01-24T20:29:50.208+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "189678",
                    "issueId": "13208633"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208633/worklog/189682",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lihalite commented on pull request #3477: ARROW-4213: [Flight] Fix incompatibilities between C++ and Java\nURL: https://github.com/apache/arrow/pull/3477#discussion_r250774896\n \n \n\n ##########\n File path: cpp/src/arrow/flight/server.cc\n ##########\n @@ -102,6 +102,10 @@ class SerializationTraits<IpcPayload> {\n \n     int64_t body_size = 0;\n     for (const auto& buffer : msg.body_buffers) {\n+      // Buffer may be null when the row length is zero, or when all\n \n Review comment:\n   It could be added in RecordBatchSerializer I believe, if you assume each column corresponds to exactly two buffers. By the time it gets to the IpcPayload serializer, that information is lost (unless you cast the metadata buffer back to the original type). The same comment is present in `writer.cc:176`.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-24T21:01:16.010+0000",
                    "updated": "2019-01-24T21:01:16.010+0000",
                    "started": "2019-01-24T21:01:16.010+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "189682",
                    "issueId": "13208633"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208633/worklog/189715",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lihalite commented on pull request #3477: ARROW-4213: [Flight] Fix incompatibilities between C++ and Java\nURL: https://github.com/apache/arrow/pull/3477#discussion_r250800070\n \n \n\n ##########\n File path: integration/integration_test.py\n ##########\n @@ -1048,10 +1114,33 @@ def file_to_stream(self, file_path, stream_path):\n             print(' '.join(cmd))\n         run_cmd(cmd)\n \n+    def flight_request(self, json_path, arrow_path):\n+        cmd = ['java', '-cp', self.ARROW_FLIGHT_JAR,\n+               'org.apache.arrow.flight.example.integration.IntegrationTestClient',\n+               '-j', json_path, '-a', arrow_path]\n+        if self.debug:\n+            print(' '.join(cmd))\n+        run_cmd(cmd)\n+\n+    @contextlib.contextmanager\n+    def flight_server(self):\n+        cmd = ['java', '-cp', self.ARROW_FLIGHT_JAR,\n+               'org.apache.arrow.flight.example.integration.IntegrationTestServer']\n+        if self.debug:\n+            print(' '.join(cmd))\n+        server = subprocess.Popen(cmd)\n+        try:\n+            time.sleep(1)\n+            yield\n+        finally:\n+            server.terminate()\n \n Review comment:\n   Apparently I'm hitting https://github.com/netty/netty/issues/6454, so it may or may not be slow for others.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-24T22:21:30.406+0000",
                    "updated": "2019-01-24T22:21:30.406+0000",
                    "started": "2019-01-24T22:21:30.406+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "189715",
                    "issueId": "13208633"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208633/worklog/191362",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #3477: ARROW-4213: [Flight] Fix incompatibilities between C++ and Java\nURL: https://github.com/apache/arrow/pull/3477#discussion_r251675693\n \n \n\n ##########\n File path: cpp/src/arrow/flight/test-integration-client.cc\n ##########\n @@ -0,0 +1,79 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+// Client implementation for Flight integration testing. Requests the\n+// given path from the Flight server, then serializes the result back\n+// to JSON and writes it to standard out.\n \n Review comment:\n   This comments seems outdated. My understanding of how this works is:\r\n   \r\n   * Client sends a request that points to a JSON file path\r\n   * Server reads the JSON file (which uses the integration tests JSON format) and serves the record batches within to the client\r\n   * Client writes the received binary stream from the server to an IPC file\r\n   * Use existing integration tests tools to compare the JSON with the IPC file\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-29T03:02:36.521+0000",
                    "updated": "2019-01-29T03:02:36.521+0000",
                    "started": "2019-01-29T03:02:36.520+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "191362",
                    "issueId": "13208633"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
            "id": "1",
            "description": "A problem which impairs or prevents the functions of the product.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
            "name": "Bug",
            "subtask": false,
            "avatarId": 21133
        },
        "timespent": 19200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@2deaf69[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@782676a8[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@18a63590[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@537e931a[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@26a75a3b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@6ac807e5[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@43eba599[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@64aa18bd[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@78c0e091[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@529d3743[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4cc487e4[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@789f1131[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 19200,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Jan 29 16:47:14 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-01-29T16:47:14.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-4213/watchers",
            "watchCount": 5,
            "isWatching": false
        },
        "created": "2019-01-09T21:02:18.000+0000",
        "updated": "2019-01-29T16:47:25.000+0000",
        "timeoriginalestimate": null,
        "description": "A C++ client cannot request streams from a Java service, nor can it decode the schema from GetFlightInfo.\r\n\r\nSchema: in Java, GetFlightInfo encodes the schema directly via flatbuffers. C++ expects it to be encoded as an IPC message. This isn't a problem in Java as a method exists to decode such schemas, but in C++ the API for reading such a schema isn't really exposed. I'm willing to submit a patch for this, but it's not clear to me which scheme is preferred.\r\n\r\nStreams: in Java, DoGet starts with an ArrowMessage containing a schema. C++ does not expect this and segfaults when it tries to decode the message as a record batch. Based on the presentations I've seen, I think C++ is in the wrong here; I have a patch to fix this that I could clean up and submit.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "5h 20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 19200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Flight] C++ and Java implementations are incompatible",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208633/comment/16738680",
                    "id": "16738680",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Re: schemas, I think that IPC messages should be used; those are the \"public\" way to transmit Flatbuffers message payloads. cc [~jnadeau] for comment\r\n\r\nRe: DoGet; shouldn't the receiver already have the schema after calling GetFlightInfo? It would seem wasteful for each endpoint to send the schema again.\r\n\r\nThere are some complications to consider relating to dictionary encoding -- dictionaries are probably going to come over the wire first in a DoGet operation. There are comments in the C++ codebase about this\r\n\r\ncc [~pitrou]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-01-09T21:37:57.947+0000",
                    "updated": "2019-01-09T21:37:57.947+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208633/comment/16738694",
                    "id": "16738694",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jnadeau",
                        "name": "jnadeau",
                        "key": "jnadeau",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Jacques Nadeau",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "I'm not sure on DoGet.\u00a0I can imagine situations where it should be\u00a0unnecessary to re-request a ticket but possibly a schema has changed since the ticket was generated. I can be convinced of not\u00a0including but it also seems nice to include. In part this is nice because the node that got the flight info message may\u00a0not be the same one that ultimately consumes the ticket. In those cases, being able to give someone a ticket and that alone is enough to reconstruct a stream of arrow records seems\u00a0desirable. Basically making a flight stream self describing. I think of it as similar to a Parquet\u00a0or an Avro file where a directory may all be the same but it is still nice to have each file describe itself.\r\n\r\nWith regards to the IPC message,\u00a0I mostly disagree with [~wesmckinn]'s perspective. The Flatbuffers definition of schema is a\u00a0public serialization from the\u00a0format perspective it seems weird to\u00a0add an arbitrary envelope. Some of the codebases may chosen to hide that\u00a0structure but I think those are\u00a0code construction/style choices as opposed to something that the format instructs/defines.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jnadeau",
                        "name": "jnadeau",
                        "key": "jnadeau",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Jacques Nadeau",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2019-01-09T21:55:32.152+0000",
                    "updated": "2019-01-09T21:55:32.152+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208633/comment/16738706",
                    "id": "16738706",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "I would be OK with sending the schema always in DoGet.\r\n\r\nOn the IPC message, I think we are saying different things. We have the Flatbuffers {{Message}} type which has the metadata version and can represent different kinds of IPC messages\r\n\r\nhttps://github.com/apache/arrow/blob/master/format/Message.fbs#L93\r\n\r\nIn https://github.com/apache/arrow/blob/87feee3d941ee41fb39b25411e108bef40a55995/java/vector/src/main/java/org/apache/arrow/vector/types/pojo/Schema.java#L168, the schema is being serialized as the Schema type. I'm just saying to put the Schema inside a Message. It has the side benefit of including the metadata version so the reader can check for protocol version compatibility. \r\n\r\nIn C++, the Schema is serialized here\r\n\r\n* https://github.com/apache/arrow/blob/master/cpp/src/arrow/flight/internal.cc#L205\r\n\r\nThis calls {{WriteSchemaMessage}} https://github.com/apache/arrow/blob/e0f70bbf9bc8eb909373abaaf0b4c9f50bc0a2d6/cpp/src/arrow/ipc/writer.cc#L784 which puts the Schema inside the Message union\r\n\r\nhttps://github.com/apache/arrow/blob/ce9c6e3914274dcaf7806159ea5373e0cb632727/cpp/src/arrow/ipc/metadata-internal.cc#L690",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-01-09T22:05:11.694+0000",
                    "updated": "2019-01-09T22:05:11.694+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208633/comment/16739767",
                    "id": "16739767",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Either way I'm willing to submit a patch for this, and to add integration tests. For the tests, I'd like to do something similar to the existing integration tests, where each language provides a Flight client/server implementation that requests/generates data according to the JSON spec, then the driver validates the data from the wire. Does this sound like the right approach?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-01-10T20:59:57.343+0000",
                    "updated": "2019-01-10T20:59:57.343+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208633/comment/16743443",
                    "id": "16743443",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Here's another incompatibility, this time with a C++ server and Java client. (I discovered this in the process of putting together rough integration tests for Flight.)\r\n\r\nIn C++, the serializer for IpcPayload always writes the body tag (flight/server.cc:143), even if there are no body messages. On the Java side, this causes ArrowMessage to read and create an empty ArrowBuf object. However, when ArrowMessage.asSchema is later called, an exception will be raised as Java asserts that an ArrowMessage containing a schema has no body objects. gRPC silently swallows the exception, causing the client to hang.\r\n\r\nIn Java, ArrowMessage.asInputStream explicitly checks if the message represents a schema, and if so, uses a different code path that does not write a body at all. I think C++ should have a similar check, and perhaps C++ should also make the same assertion during deserialization.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-01-15T22:20:27.554+0000",
                    "updated": "2019-01-15T22:20:27.554+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208633/comment/16749054",
                    "id": "16749054",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "One more: a Java client can't call GetInfo on a C++ server. In C++, arrow::flight::internal::SchemaToString writes the length of the serialized schema first, while Java does not (Schema.toByteArray); Java gets confused when it then tries to read the schema. It's not enough to reliably break things - a Java client will often still parse a (nonsensical) schema.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-01-22T19:38:00.504+0000",
                    "updated": "2019-01-22T19:38:00.504+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208633/comment/16755195",
                    "id": "16755195",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 3477\n[https://github.com/apache/arrow/pull/3477]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-01-29T16:47:14.534+0000",
                    "updated": "2019-01-29T16:47:14.534+0000"
                }
            ],
            "maxResults": 7,
            "total": 7,
            "startAt": 0
        },
        "customfield_12311820": "0|u00ol4:",
        "customfield_12314139": null
    }
}