{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13357186",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13357186",
    "key": "ARROW-11513",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12349493",
                "id": "12349493",
                "description": "",
                "name": "4.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-04-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12608103",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12608103",
                "type": {
                    "id": "10001",
                    "name": "dependent",
                    "inward": "is depended upon by",
                    "outward": "depends upon",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10001"
                },
                "outwardIssue": {
                    "id": "13335407",
                    "key": "ARROW-10306",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13335407",
                    "fields": {
                        "summary": "[C++] Add string replacement kernel ",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
                            "name": "Minor",
                            "id": "4"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=icook",
            "name": "icook",
            "key": "icook",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=icook&avatarId=29388",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=icook&avatarId=29388",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=icook&avatarId=29388",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=icook&avatarId=29388"
            },
            "displayName": "Ian Cook",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333008",
                "id": "12333008",
                "name": "R"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
            "name": "npr",
            "key": "npr",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Neal Richardson",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
            "name": "npr",
            "key": "npr",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Neal Richardson",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "aggregateprogress": {
            "progress": 12000,
            "total": 12000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 12000,
            "total": 12000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-11513/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 20,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13357186/worklog/576184",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ianmcook opened a new pull request #9878:\nURL: https://github.com/apache/arrow/pull/9878\n\n\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-02T17:07:58.457+0000",
                    "updated": "2021-04-02T17:07:58.457+0000",
                    "started": "2021-04-02T17:07:58.457+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "576184",
                    "issueId": "13357186"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13357186/worklog/576185",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #9878:\nURL: https://github.com/apache/arrow/pull/9878#issuecomment-812621119\n\n\n   https://issues.apache.org/jira/browse/ARROW-11513\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-02T17:08:11.982+0000",
                    "updated": "2021-04-02T17:08:11.982+0000",
                    "started": "2021-04-02T17:08:11.982+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "576185",
                    "issueId": "13357186"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13357186/worklog/576630",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on a change in pull request #9878:\nURL: https://github.com/apache/arrow/pull/9878#discussion_r606831418\n\n\n\n##########\nFile path: r/tests/testthat/test-dplyr-string-functions.R\n##########\n@@ -0,0 +1,120 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+library(dplyr)\n+library(stringr)\n+\n+test_that(\"sub and gsub\", {\n+  df <- tibble(x = c(\"Foo\", \"bar\"))\n+\n+  for(fun in list(quote(sub), quote(gsub))) {\n+\n+    for(fixed in c(TRUE, FALSE)) {\n+\n+      expect_dplyr_equal(\n+        input %>%\n+          transmute(x = eval(fun)(\"Foo\", \"baz\", x, fixed = fixed)) %>%\n+          collect(),\n+        df\n+      )\n+      expect_dplyr_equal(\n+        input %>%\n+          transmute(x = eval(fun)(\"Foo\", \"baz\", x, fixed = fixed)) %>%\n+          collect(),\n+        df\n+      )\n+      expect_dplyr_equal(\n+        input %>%\n+          transmute(x = eval(fun)(\"^B.+\", \"baz\", x, ignore.case = FALSE, fixed = fixed)) %>%\n+          collect(),\n+        df\n+      )\n+      expect_dplyr_equal(\n+        input %>%\n+          transmute(x = eval(fun)(\"Foo\", \"baz\", x, ignore.case = FALSE, fixed = fixed)) %>%\n+          collect(),\n+        df\n+      )\n+\n+      # the tests below all use ignore.case = TRUE\n+      # but base::sub and base::gsub ignore ignore.case = TRUE with a warning when fixed = TRUE\n+      # so we can't use expect_dplyr_equal() for the tests below\n+      expect_equal(\n+        df %>%\n+          Table$create() %>%\n+          transmute(x = eval(fun)(\"Foo\", \"baz\", x, ignore.case = TRUE, fixed = fixed)) %>%\n+          collect(),\n+        tibble(x = c(\"baz\", \"bar\"))\n+      )\n+      expect_equal(\n+        df %>%\n+          Table$create() %>%\n+          transmute(x = eval(fun)(\"o\", \"u\", x, ignore.case = TRUE, fixed = fixed)) %>%\n+          collect(),\n+        if (fun == quote(sub)) tibble(x = c(\"Fuo\", \"bar\")) else tibble(x = c(\"Fuu\", \"bar\"))\n+      )\n+      expect_equal(\n+        df %>%\n+          Table$create() %>%\n+          transmute(x = eval(fun)(\"^B.+\", \"baz\", x, ignore.case = TRUE, fixed = fixed)) %>%\n+          collect(),\n+        if (fixed) tibble(x = c(\"Foo\", \"bar\")) else tibble(x = c(\"Foo\", \"baz\"))\n+      )\n+\n+    }\n+\n+  }\n+})\n\nReview comment:\n       It would be good to have some more interesting regular expressions, just to make sure we're passing them correctly. E.g. `sub(\"^F(.*)\", \"B\\\\1\", x)`. \r\n   \r\n   Might also be good to use longer, more interesting strings than foo and bar.\n\n##########\nFile path: r/tests/testthat/test-dplyr-string-functions.R\n##########\n@@ -0,0 +1,120 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+library(dplyr)\n+library(stringr)\n+\n+test_that(\"sub and gsub\", {\n+  df <- tibble(x = c(\"Foo\", \"bar\"))\n+\n+  for(fun in list(quote(sub), quote(gsub))) {\n+\n+    for(fixed in c(TRUE, FALSE)) {\n+\n+      expect_dplyr_equal(\n+        input %>%\n+          transmute(x = eval(fun)(\"Foo\", \"baz\", x, fixed = fixed)) %>%\n+          collect(),\n+        df\n+      )\n+      expect_dplyr_equal(\n+        input %>%\n+          transmute(x = eval(fun)(\"Foo\", \"baz\", x, fixed = fixed)) %>%\n+          collect(),\n+        df\n+      )\n+      expect_dplyr_equal(\n+        input %>%\n+          transmute(x = eval(fun)(\"^B.+\", \"baz\", x, ignore.case = FALSE, fixed = fixed)) %>%\n+          collect(),\n+        df\n+      )\n+      expect_dplyr_equal(\n+        input %>%\n+          transmute(x = eval(fun)(\"Foo\", \"baz\", x, ignore.case = FALSE, fixed = fixed)) %>%\n+          collect(),\n+        df\n+      )\n+\n+      # the tests below all use ignore.case = TRUE\n+      # but base::sub and base::gsub ignore ignore.case = TRUE with a warning when fixed = TRUE\n+      # so we can't use expect_dplyr_equal() for the tests below\n+      expect_equal(\n+        df %>%\n+          Table$create() %>%\n+          transmute(x = eval(fun)(\"Foo\", \"baz\", x, ignore.case = TRUE, fixed = fixed)) %>%\n+          collect(),\n+        tibble(x = c(\"baz\", \"bar\"))\n+      )\n+      expect_equal(\n+        df %>%\n+          Table$create() %>%\n+          transmute(x = eval(fun)(\"o\", \"u\", x, ignore.case = TRUE, fixed = fixed)) %>%\n+          collect(),\n+        if (fun == quote(sub)) tibble(x = c(\"Fuo\", \"bar\")) else tibble(x = c(\"Fuu\", \"bar\"))\n\nReview comment:\n       Likewise, this would be more readable as separate tests for sub and gsub\n\n##########\nFile path: r/R/dplyr.R\n##########\n@@ -434,6 +438,75 @@ build_function_list <- function(FUN) {\n   )\n }\n \n+arrow_r_string_replace_function <- function(FUN, max_replacements) {\n+  function(pattern, replacement, x, ignore.case = FALSE, fixed = FALSE) {\n+    if (ignore.case) {\n+      if (fixed) {\n+        pattern <- paste0(\"(?i)\\\\Q\", pattern, \"\\\\E\")\n+      } else {\n+        pattern <- paste0(\"(?i)\", pattern)\n+      }\n+    }\n+    FUN(\n+      ifelse(fixed && !ignore.case, \"replace_substring\", \"replace_substring_regex\"),\n+      x,\n+      options = list(\n+        pattern = pattern,\n+        replacement = replacement,\n+        max_replacements = max_replacements\n+      )\n+    )\n+  }\n+}\n+\n+arrow_stringr_string_replace_function <- function(FUN, max_replacements) {\n+  function(string, pattern, replacement) {\n+    # Assign stringr pattern modifier functions locally\n\nReview comment:\n       This is clever but I wonder if it is overly complex. You can just let the `stringr` helpers evaluate naturally and pull the attributes from the resulting object:\r\n   \r\n   ```\r\n   > library(stringr)\r\n   > fixed(\"asdf\")\r\n   [1] \"asdf\"\r\n   attr(,\"options\")\r\n   attr(,\"options\")$case_insensitive\r\n   [1] FALSE\r\n   \r\n   attr(,\"class\")\r\n   [1] \"fixed\"     \"pattern\"   \"character\"\r\n   > fixed(\"asdf\", ignore_case=TRUE)\r\n   [1] \"asdf\"\r\n   attr(,\"options\")\r\n   attr(,\"options\")$case_insensitive\r\n   [1] TRUE\r\n   \r\n   attr(,\"class\")\r\n   [1] \"fixed\"     \"pattern\"   \"character\"\r\n   > regex(\"asdf\")\r\n   [1] \"asdf\"\r\n   attr(,\"options\")\r\n   attr(,\"options\")$case_insensitive\r\n   [1] FALSE\r\n   \r\n   attr(,\"options\")$comments\r\n   [1] FALSE\r\n   \r\n   attr(,\"options\")$dotall\r\n   [1] FALSE\r\n   \r\n   attr(,\"options\")$multiline\r\n   [1] FALSE\r\n   \r\n   attr(,\"class\")\r\n   [1] \"regex\"     \"pattern\"   \"character\"\r\n   ```\n\n##########\nFile path: r/tests/testthat/test-dplyr-string-functions.R\n##########\n@@ -0,0 +1,120 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+library(dplyr)\n+library(stringr)\n+\n+test_that(\"sub and gsub\", {\n+  df <- tibble(x = c(\"Foo\", \"bar\"))\n+\n+  for(fun in list(quote(sub), quote(gsub))) {\n\nReview comment:\n       I like what you're trying to do here but I think the elimination of code duplication isn't worth the sacrifice in readability. Since we know that `sub` and `gsub` use the same C++ function, just with a different option, we probably don't need to test every permutation of them. Likewise with the other options. You could keep the `fixed` for loop, that one is pretty readable; the downside there is that if one of them fails, I don't think the `testthat` output will tell you which one it is (that's solvable but may require hacking into `expect_dplyr_equal`, which probably isn't worth it). \r\n   \r\n   Since the business of evaluating the regular expressions is handled (and tested) in the C++ library, our job in this test suite is to make sure that we're correctly translating the R options to the C++ options. We aren't responsible for making sure that the C++ library correctly handles all permutations of its options--we obviously want that, and if we discover ways that it doesn't handle them correctly, we should make sure that gets fixed, but the R test suite doesn't need to assert that. \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-04T17:35:40.577+0000",
                    "updated": "2021-04-04T17:35:40.577+0000",
                    "started": "2021-04-04T17:35:40.577+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "576630",
                    "issueId": "13357186"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13357186/worklog/576675",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ianmcook commented on a change in pull request #9878:\nURL: https://github.com/apache/arrow/pull/9878#discussion_r606880444\n\n\n\n##########\nFile path: r/R/dplyr.R\n##########\n@@ -434,6 +438,75 @@ build_function_list <- function(FUN) {\n   )\n }\n \n+arrow_r_string_replace_function <- function(FUN, max_replacements) {\n+  function(pattern, replacement, x, ignore.case = FALSE, fixed = FALSE) {\n+    if (ignore.case) {\n+      if (fixed) {\n+        pattern <- paste0(\"(?i)\\\\Q\", pattern, \"\\\\E\")\n+      } else {\n+        pattern <- paste0(\"(?i)\", pattern)\n+      }\n+    }\n+    FUN(\n+      ifelse(fixed && !ignore.case, \"replace_substring\", \"replace_substring_regex\"),\n+      x,\n+      options = list(\n+        pattern = pattern,\n+        replacement = replacement,\n+        max_replacements = max_replacements\n+      )\n+    )\n+  }\n+}\n+\n+arrow_stringr_string_replace_function <- function(FUN, max_replacements) {\n+  function(string, pattern, replacement) {\n+    # Assign stringr pattern modifier functions locally\n\nReview comment:\n       I considered this and concluded that there were several reasons this approach is preferable.\r\n   \r\n   This approach avoids requiring the user to have stringr installed or loaded. Since we do not need stringr to be installed or loaded for the `str_replace()` and `str_replace_all()` functions to work with Arrow, it would seem strange to require stringr to be installed or loaded to use these pattern modifier functions.\r\n   \r\n   Also, although stringr exports the pattern modifier functions and their arguments are documented and very unlikely to change without prior deprecation warnings, the structure of the objects they _return_ is an internal stringr implementation detail which we should not depend on. The stringr help entry for these  modifier functions lacks a *Value* section, so they could conceivably change anytime.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-05T01:28:34.537+0000",
                    "updated": "2021-04-05T01:28:34.537+0000",
                    "started": "2021-04-05T01:28:34.537+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "576675",
                    "issueId": "13357186"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13357186/worklog/576676",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ianmcook commented on a change in pull request #9878:\nURL: https://github.com/apache/arrow/pull/9878#discussion_r606880444\n\n\n\n##########\nFile path: r/R/dplyr.R\n##########\n@@ -434,6 +438,75 @@ build_function_list <- function(FUN) {\n   )\n }\n \n+arrow_r_string_replace_function <- function(FUN, max_replacements) {\n+  function(pattern, replacement, x, ignore.case = FALSE, fixed = FALSE) {\n+    if (ignore.case) {\n+      if (fixed) {\n+        pattern <- paste0(\"(?i)\\\\Q\", pattern, \"\\\\E\")\n+      } else {\n+        pattern <- paste0(\"(?i)\", pattern)\n+      }\n+    }\n+    FUN(\n+      ifelse(fixed && !ignore.case, \"replace_substring\", \"replace_substring_regex\"),\n+      x,\n+      options = list(\n+        pattern = pattern,\n+        replacement = replacement,\n+        max_replacements = max_replacements\n+      )\n+    )\n+  }\n+}\n+\n+arrow_stringr_string_replace_function <- function(FUN, max_replacements) {\n+  function(string, pattern, replacement) {\n+    # Assign stringr pattern modifier functions locally\n\nReview comment:\n       I considered this and concluded that there were several reasons this approach is preferable.\r\n   \r\n   This approach avoids requiring the user to have stringr installed or loaded. Since we do not need stringr to be installed or loaded for the `str_replace()` and `str_replace_all()` functions to work with Arrow, it would seem strange to require stringr to be installed or loaded to use these pattern modifier functions.\r\n   \r\n   Also, although stringr exports the pattern modifier functions and their arguments are documented and very unlikely to change without prior deprecation warnings, the structure of the objects they _return_ is an internal stringr implementation detail which we should not depend on. The stringr help entry for these  modifier functions lacks a Value section, so they could conceivably change anytime.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-05T01:29:29.314+0000",
                    "updated": "2021-04-05T01:29:29.314+0000",
                    "started": "2021-04-05T01:29:29.314+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "576676",
                    "issueId": "13357186"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13357186/worklog/576677",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ianmcook commented on a change in pull request #9878:\nURL: https://github.com/apache/arrow/pull/9878#discussion_r606882088\n\n\n\n##########\nFile path: r/tests/testthat/test-dplyr-string-functions.R\n##########\n@@ -0,0 +1,120 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+library(dplyr)\n+library(stringr)\n+\n+test_that(\"sub and gsub\", {\n+  df <- tibble(x = c(\"Foo\", \"bar\"))\n+\n+  for(fun in list(quote(sub), quote(gsub))) {\n\nReview comment:\n       Ok, will do. I'll trim these tests so they exercise all the different paths here in the R package code but don't go beyond that.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-05T01:39:07.287+0000",
                    "updated": "2021-04-05T01:39:07.287+0000",
                    "started": "2021-04-05T01:39:07.287+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "576677",
                    "issueId": "13357186"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13357186/worklog/577039",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ianmcook commented on a change in pull request #9878:\nURL: https://github.com/apache/arrow/pull/9878#discussion_r607275003\n\n\n\n##########\nFile path: r/tests/testthat/test-dplyr-string-functions.R\n##########\n@@ -0,0 +1,120 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+library(dplyr)\n+library(stringr)\n+\n+test_that(\"sub and gsub\", {\n+  df <- tibble(x = c(\"Foo\", \"bar\"))\n+\n+  for(fun in list(quote(sub), quote(gsub))) {\n+\n+    for(fixed in c(TRUE, FALSE)) {\n+\n+      expect_dplyr_equal(\n+        input %>%\n+          transmute(x = eval(fun)(\"Foo\", \"baz\", x, fixed = fixed)) %>%\n+          collect(),\n+        df\n+      )\n+      expect_dplyr_equal(\n+        input %>%\n+          transmute(x = eval(fun)(\"Foo\", \"baz\", x, fixed = fixed)) %>%\n+          collect(),\n+        df\n+      )\n+      expect_dplyr_equal(\n+        input %>%\n+          transmute(x = eval(fun)(\"^B.+\", \"baz\", x, ignore.case = FALSE, fixed = fixed)) %>%\n+          collect(),\n+        df\n+      )\n+      expect_dplyr_equal(\n+        input %>%\n+          transmute(x = eval(fun)(\"Foo\", \"baz\", x, ignore.case = FALSE, fixed = fixed)) %>%\n+          collect(),\n+        df\n+      )\n+\n+      # the tests below all use ignore.case = TRUE\n+      # but base::sub and base::gsub ignore ignore.case = TRUE with a warning when fixed = TRUE\n+      # so we can't use expect_dplyr_equal() for the tests below\n+      expect_equal(\n+        df %>%\n+          Table$create() %>%\n+          transmute(x = eval(fun)(\"Foo\", \"baz\", x, ignore.case = TRUE, fixed = fixed)) %>%\n+          collect(),\n+        tibble(x = c(\"baz\", \"bar\"))\n+      )\n+      expect_equal(\n+        df %>%\n+          Table$create() %>%\n+          transmute(x = eval(fun)(\"o\", \"u\", x, ignore.case = TRUE, fixed = fixed)) %>%\n+          collect(),\n+        if (fun == quote(sub)) tibble(x = c(\"Fuo\", \"bar\")) else tibble(x = c(\"Fuu\", \"bar\"))\n+      )\n+      expect_equal(\n+        df %>%\n+          Table$create() %>%\n+          transmute(x = eval(fun)(\"^B.+\", \"baz\", x, ignore.case = TRUE, fixed = fixed)) %>%\n+          collect(),\n+        if (fixed) tibble(x = c(\"Foo\", \"bar\")) else tibble(x = c(\"Foo\", \"baz\"))\n+      )\n+\n+    }\n+\n+  }\n+})\n\nReview comment:\n       Done in 7e7e748cde2c7bf698b75debecc3542f27d818bb\n\n##########\nFile path: r/tests/testthat/test-dplyr-string-functions.R\n##########\n@@ -0,0 +1,120 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+library(dplyr)\n+library(stringr)\n+\n+test_that(\"sub and gsub\", {\n+  df <- tibble(x = c(\"Foo\", \"bar\"))\n+\n+  for(fun in list(quote(sub), quote(gsub))) {\n+\n+    for(fixed in c(TRUE, FALSE)) {\n+\n+      expect_dplyr_equal(\n+        input %>%\n+          transmute(x = eval(fun)(\"Foo\", \"baz\", x, fixed = fixed)) %>%\n+          collect(),\n+        df\n+      )\n+      expect_dplyr_equal(\n+        input %>%\n+          transmute(x = eval(fun)(\"Foo\", \"baz\", x, fixed = fixed)) %>%\n+          collect(),\n+        df\n+      )\n+      expect_dplyr_equal(\n+        input %>%\n+          transmute(x = eval(fun)(\"^B.+\", \"baz\", x, ignore.case = FALSE, fixed = fixed)) %>%\n+          collect(),\n+        df\n+      )\n+      expect_dplyr_equal(\n+        input %>%\n+          transmute(x = eval(fun)(\"Foo\", \"baz\", x, ignore.case = FALSE, fixed = fixed)) %>%\n+          collect(),\n+        df\n+      )\n+\n+      # the tests below all use ignore.case = TRUE\n+      # but base::sub and base::gsub ignore ignore.case = TRUE with a warning when fixed = TRUE\n+      # so we can't use expect_dplyr_equal() for the tests below\n+      expect_equal(\n+        df %>%\n+          Table$create() %>%\n+          transmute(x = eval(fun)(\"Foo\", \"baz\", x, ignore.case = TRUE, fixed = fixed)) %>%\n+          collect(),\n+        tibble(x = c(\"baz\", \"bar\"))\n+      )\n+      expect_equal(\n+        df %>%\n+          Table$create() %>%\n+          transmute(x = eval(fun)(\"o\", \"u\", x, ignore.case = TRUE, fixed = fixed)) %>%\n+          collect(),\n+        if (fun == quote(sub)) tibble(x = c(\"Fuo\", \"bar\")) else tibble(x = c(\"Fuu\", \"bar\"))\n\nReview comment:\n       Fixed in 7e7e748cde2c7bf698b75debecc3542f27d818bb\n\n##########\nFile path: r/tests/testthat/test-dplyr-string-functions.R\n##########\n@@ -0,0 +1,120 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+library(dplyr)\n+library(stringr)\n+\n+test_that(\"sub and gsub\", {\n+  df <- tibble(x = c(\"Foo\", \"bar\"))\n+\n+  for(fun in list(quote(sub), quote(gsub))) {\n\nReview comment:\n       Improved in 7e7e748cde2c7bf698b75debecc3542f27d818bb\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-05T19:13:44.102+0000",
                    "updated": "2021-04-05T19:13:44.102+0000",
                    "started": "2021-04-05T19:13:44.102+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "577039",
                    "issueId": "13357186"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13357186/worklog/577076",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ianmcook commented on a change in pull request #9878:\nURL: https://github.com/apache/arrow/pull/9878#discussion_r607290585\n\n\n\n##########\nFile path: r/R/dplyr.R\n##########\n@@ -434,6 +438,77 @@ build_function_list <- function(FUN) {\n   )\n }\n \n+arrow_r_string_replace_function <- function(FUN, max_replacements) {\n+  function(pattern, replacement, x, ignore.case = FALSE, fixed = FALSE) {\n+    if (ignore.case) {\n+      if (fixed) {\n+        pattern <- gsub(\"\\\\E\", \"\\\\e\", pattern, fixed = TRUE)\n+        pattern <- paste0(\"(?i)\\\\Q\", pattern, \"\\\\E\")\n+        replacement <- gsub(\"\\\\\", \"\\\\\\\\\", replacement, fixed = TRUE)\n+      } else {\n+        pattern <- paste0(\"(?i)\", pattern)\n+      }\n+    }\n\nReview comment:\n       @maartenbreddels since ARROW-10306 did not directly support string-insensitive fixed string replacement (non-regex), this is the workaround we used to support this in the R bindings. Feedback welcome, and thanks for your work on the underlying C++ code!\n\n##########\nFile path: r/R/dplyr.R\n##########\n@@ -434,6 +438,77 @@ build_function_list <- function(FUN) {\n   )\n }\n \n+arrow_r_string_replace_function <- function(FUN, max_replacements) {\n+  function(pattern, replacement, x, ignore.case = FALSE, fixed = FALSE) {\n+    if (ignore.case) {\n+      if (fixed) {\n+        pattern <- gsub(\"\\\\E\", \"\\\\e\", pattern, fixed = TRUE)\n+        pattern <- paste0(\"(?i)\\\\Q\", pattern, \"\\\\E\")\n+        replacement <- gsub(\"\\\\\", \"\\\\\\\\\", replacement, fixed = TRUE)\n+      } else {\n+        pattern <- paste0(\"(?i)\", pattern)\n+      }\n+    }\n\nReview comment:\n       @maartenbreddels since ARROW-10306 did not directly support case-insensitive fixed string replacement (non-regex), this is the workaround we used to support this in the R bindings. Feedback welcome, and thanks for your work on the underlying C++ code!\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-05T19:44:43.714+0000",
                    "updated": "2021-04-05T19:44:43.714+0000",
                    "started": "2021-04-05T19:44:43.714+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "577076",
                    "issueId": "13357186"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13357186/worklog/577103",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on a change in pull request #9878:\nURL: https://github.com/apache/arrow/pull/9878#discussion_r607322619\n\n\n\n##########\nFile path: r/tests/testthat/test-dplyr-string-functions.R\n##########\n@@ -0,0 +1,172 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+library(dplyr)\n+library(stringr)\n+\n+test_that(\"sub and gsub\", {\n+  df <- tibble(x = c(\"Foo\", \"bar\"))\n+\n+  for(fixed in c(TRUE, FALSE)) {\n+\n+    expect_dplyr_equal(\n+      input %>%\n+        transmute(x = sub(\"Foo\", \"baz\", x, fixed = fixed)) %>%\n+        collect(),\n+      df\n+    )\n+    expect_dplyr_equal(\n+      input %>%\n+        transmute(x = sub(\"^B.+\", \"baz\", x, ignore.case = FALSE, fixed = fixed)) %>%\n+        collect(),\n+      df\n+    )\n+    expect_dplyr_equal(\n+      input %>%\n+        transmute(x = sub(\"Foo\", \"baz\", x, ignore.case = FALSE, fixed = fixed)) %>%\n+        collect(),\n+      df\n+    )\n+\n+    # the tests below all use ignore.case = TRUE\n+    # but base::sub and base::gsub ignore ignore.case = TRUE with a warning when fixed = TRUE\n+    # so we can't use expect_dplyr_equal() for the tests below\n+    expect_equal(\n+      df %>%\n+        Table$create() %>%\n+        transmute(x = sub(\"O\", \"u\", x, ignore.case = TRUE, fixed = fixed)) %>%\n+        collect(),\n+      tibble(x = c(\"Fuo\", \"bar\"))\n+    )\n+    expect_equal(\n+      df %>%\n+        Table$create() %>%\n+        transmute(x = gsub(\"o\", \"u\", x, ignore.case = TRUE, fixed = fixed)) %>%\n+        collect(),\n+      tibble(x = c(\"Fuu\", \"bar\"))\n+    )\n+    expect_equal(\n+      df %>%\n+        Table$create() %>%\n+        transmute(x = sub(\"^B.+\", \"baz\", x, ignore.case = TRUE, fixed = fixed)) %>%\n+        collect(),\n+      if (fixed) tibble(x = c(\"Foo\", \"bar\")) else tibble(x = c(\"Foo\", \"baz\"))\n+    )\n+\n+  }\n+\n+})\n+\n+test_that(\"str_replace and str_replace_all\", {\n+  df <- tibble(x = c(\"Foo\", \"bar\"))\n+\n+  library(stringr)\n+\n+  expect_dplyr_equal(\n+    input %>%\n+      transmute(x = str_replace_all(x, regex(\"^F\"), \"baz\")) %>%\n+      collect(),\n+    df\n+  )\n+  expect_dplyr_equal(\n+    input %>%\n+      transmute(x = str_replace(x, regex(\"^f[A-Z]{2}\", ignore_case = TRUE), \"baz\")) %>%\n+      collect(),\n+    df\n+  )\n+  expect_dplyr_equal(\n+    input %>%\n+      transmute(x = str_replace_all(x, fixed(\"o\"), \"u\")) %>%\n+      collect(),\n+    df\n+  )\n+  expect_dplyr_equal(\n+    input %>%\n+      transmute(x = str_replace(x, fixed(\"O\"), \"u\")) %>%\n+      collect(),\n+    df\n+  )\n+  expect_dplyr_equal(\n+    input %>%\n+      transmute(x = str_replace(x, fixed(\"O\", ignore_case = TRUE), \"u\")) %>%\n+      collect(),\n+    df\n+  )\n+\n+})\n+\n+test_that(\"backreferences\", {\n+  df <- tibble(x = c(\"Foo\", \"bar\"))\n+\n+  expect_dplyr_equal(\n+    input %>%\n+      transmute(desc = sub(\n+        \"(?:https?|ftp)://([^/\\r\\n]+)(/[^\\r\\n]*)?\",\n+        \"path `\\\\2` on server `\\\\1`\",\n+        url\n+        )\n+      ) %>%\n+      collect(),\n+    tibble(url = \"https://arrow.apache.org/docs/r/\")\n+  )\n+  expect_dplyr_equal(\n+    input %>%\n+      transmute(x = str_replace(x, regex(\"^(\\\\w)o(.*)\", ignore_case = TRUE), \"\\\\1\\\\2p\")) %>%\n+      collect(),\n+    df\n+  )\n+})\n+\n+test_that(\"edge cases\", {\n\nReview comment:\n       Why are these not `expect_dplyr_equal`?\n\n##########\nFile path: r/tests/testthat/test-dplyr-string-functions.R\n##########\n@@ -0,0 +1,172 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+library(dplyr)\n+library(stringr)\n+\n+test_that(\"sub and gsub\", {\n+  df <- tibble(x = c(\"Foo\", \"bar\"))\n+\n+  for(fixed in c(TRUE, FALSE)) {\n+\n+    expect_dplyr_equal(\n+      input %>%\n+        transmute(x = sub(\"Foo\", \"baz\", x, fixed = fixed)) %>%\n+        collect(),\n+      df\n+    )\n+    expect_dplyr_equal(\n+      input %>%\n+        transmute(x = sub(\"^B.+\", \"baz\", x, ignore.case = FALSE, fixed = fixed)) %>%\n+        collect(),\n+      df\n+    )\n+    expect_dplyr_equal(\n+      input %>%\n+        transmute(x = sub(\"Foo\", \"baz\", x, ignore.case = FALSE, fixed = fixed)) %>%\n+        collect(),\n+      df\n+    )\n+\n+    # the tests below all use ignore.case = TRUE\n+    # but base::sub and base::gsub ignore ignore.case = TRUE with a warning when fixed = TRUE\n+    # so we can't use expect_dplyr_equal() for the tests below\n+    expect_equal(\n+      df %>%\n+        Table$create() %>%\n+        transmute(x = sub(\"O\", \"u\", x, ignore.case = TRUE, fixed = fixed)) %>%\n+        collect(),\n+      tibble(x = c(\"Fuo\", \"bar\"))\n+    )\n+    expect_equal(\n+      df %>%\n+        Table$create() %>%\n+        transmute(x = gsub(\"o\", \"u\", x, ignore.case = TRUE, fixed = fixed)) %>%\n+        collect(),\n+      tibble(x = c(\"Fuu\", \"bar\"))\n+    )\n+    expect_equal(\n+      df %>%\n+        Table$create() %>%\n+        transmute(x = sub(\"^B.+\", \"baz\", x, ignore.case = TRUE, fixed = fixed)) %>%\n+        collect(),\n+      if (fixed) tibble(x = c(\"Foo\", \"bar\")) else tibble(x = c(\"Foo\", \"baz\"))\n+    )\n+\n+  }\n+\n+})\n+\n+test_that(\"str_replace and str_replace_all\", {\n+  df <- tibble(x = c(\"Foo\", \"bar\"))\n+\n+  library(stringr)\n+\n+  expect_dplyr_equal(\n+    input %>%\n+      transmute(x = str_replace_all(x, regex(\"^F\"), \"baz\")) %>%\n+      collect(),\n+    df\n+  )\n+  expect_dplyr_equal(\n+    input %>%\n+      transmute(x = str_replace(x, regex(\"^f[A-Z]{2}\", ignore_case = TRUE), \"baz\")) %>%\n+      collect(),\n+    df\n+  )\n+  expect_dplyr_equal(\n+    input %>%\n+      transmute(x = str_replace_all(x, fixed(\"o\"), \"u\")) %>%\n+      collect(),\n+    df\n+  )\n+  expect_dplyr_equal(\n+    input %>%\n+      transmute(x = str_replace(x, fixed(\"O\"), \"u\")) %>%\n+      collect(),\n+    df\n+  )\n+  expect_dplyr_equal(\n+    input %>%\n+      transmute(x = str_replace(x, fixed(\"O\", ignore_case = TRUE), \"u\")) %>%\n+      collect(),\n+    df\n+  )\n+\n+})\n+\n+test_that(\"backreferences\", {\n+  df <- tibble(x = c(\"Foo\", \"bar\"))\n+\n+  expect_dplyr_equal(\n+    input %>%\n+      transmute(desc = sub(\n+        \"(?:https?|ftp)://([^/\\r\\n]+)(/[^\\r\\n]*)?\",\n+        \"path `\\\\2` on server `\\\\1`\",\n+        url\n+        )\n+      ) %>%\n+      collect(),\n+    tibble(url = \"https://arrow.apache.org/docs/r/\")\n+  )\n+  expect_dplyr_equal(\n+    input %>%\n+      transmute(x = str_replace(x, regex(\"^(\\\\w)o(.*)\", ignore_case = TRUE), \"\\\\1\\\\2p\")) %>%\n+      collect(),\n+    df\n+  )\n+})\n+\n+test_that(\"edge cases\", {\n+\n+  # in case-insensitive fixed replace, test that \"\\\\E\" in the search string and\n+  # backslashes in the replacement string are interpreted literally\n+  expect_equal(\n+    tibble(x = c(\"\\\\Q\\\\e\\\\D\")) %>%\n+      Table$create() %>%\n+      transmute(x = sub(\"\\\\E\", \"\\\\L\", x, ignore.case = TRUE, fixed = TRUE)) %>%\n+      collect(),\n+    tibble(x = c(\"\\\\Q\\\\L\\\\D\"))\n+  )\n+\n+  # test that a user's \"(?i)\" prefix does not break the \"(?i)\" prefix that's\n+  # added in case-insensitive regex replace\n+  expect_equal(\n+    tibble(x = c(\"ABC\")) %>%\n+      Table$create() %>%\n+      transmute(x = sub(\"(?i)^[abc]{3}$\", \"123\", x, ignore.case = TRUE, fixed = FALSE)) %>%\n+      collect(),\n+    tibble(x = c(\"123\"))\n+  )\n+\n+})\n+\n+test_that(\"errors and warnings\", {\n+  skip_if_not_available(\"dataset\")\n+\n+  df <- tibble(x = c(\"Foo\", \"bar\"))\n+  ds <- InMemoryDataset$create(df)\n\nReview comment:\n       Do these tests require a dataset? If so, can you comment why? If not, it's confusing that you're switching to a dataset here.\n\n##########\nFile path: r/tests/testthat/test-dplyr-string-functions.R\n##########\n@@ -0,0 +1,172 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+library(dplyr)\n+library(stringr)\n+\n+test_that(\"sub and gsub\", {\n+  df <- tibble(x = c(\"Foo\", \"bar\"))\n+\n+  for(fixed in c(TRUE, FALSE)) {\n+\n+    expect_dplyr_equal(\n+      input %>%\n+        transmute(x = sub(\"Foo\", \"baz\", x, fixed = fixed)) %>%\n+        collect(),\n+      df\n+    )\n+    expect_dplyr_equal(\n+      input %>%\n+        transmute(x = sub(\"^B.+\", \"baz\", x, ignore.case = FALSE, fixed = fixed)) %>%\n+        collect(),\n+      df\n+    )\n+    expect_dplyr_equal(\n+      input %>%\n+        transmute(x = sub(\"Foo\", \"baz\", x, ignore.case = FALSE, fixed = fixed)) %>%\n+        collect(),\n+      df\n+    )\n+\n+    # the tests below all use ignore.case = TRUE\n+    # but base::sub and base::gsub ignore ignore.case = TRUE with a warning when fixed = TRUE\n+    # so we can't use expect_dplyr_equal() for the tests below\n+    expect_equal(\n+      df %>%\n+        Table$create() %>%\n+        transmute(x = sub(\"O\", \"u\", x, ignore.case = TRUE, fixed = fixed)) %>%\n+        collect(),\n+      tibble(x = c(\"Fuo\", \"bar\"))\n+    )\n+    expect_equal(\n+      df %>%\n+        Table$create() %>%\n+        transmute(x = gsub(\"o\", \"u\", x, ignore.case = TRUE, fixed = fixed)) %>%\n+        collect(),\n+      tibble(x = c(\"Fuu\", \"bar\"))\n+    )\n+    expect_equal(\n+      df %>%\n+        Table$create() %>%\n+        transmute(x = sub(\"^B.+\", \"baz\", x, ignore.case = TRUE, fixed = fixed)) %>%\n+        collect(),\n+      if (fixed) tibble(x = c(\"Foo\", \"bar\")) else tibble(x = c(\"Foo\", \"baz\"))\n+    )\n+\n+  }\n+\n+})\n+\n+test_that(\"str_replace and str_replace_all\", {\n+  df <- tibble(x = c(\"Foo\", \"bar\"))\n+\n+  library(stringr)\n+\n+  expect_dplyr_equal(\n+    input %>%\n+      transmute(x = str_replace_all(x, regex(\"^F\"), \"baz\")) %>%\n+      collect(),\n+    df\n+  )\n+  expect_dplyr_equal(\n+    input %>%\n+      transmute(x = str_replace(x, regex(\"^f[A-Z]{2}\", ignore_case = TRUE), \"baz\")) %>%\n+      collect(),\n+    df\n+  )\n+  expect_dplyr_equal(\n+    input %>%\n+      transmute(x = str_replace_all(x, fixed(\"o\"), \"u\")) %>%\n+      collect(),\n+    df\n+  )\n+  expect_dplyr_equal(\n+    input %>%\n+      transmute(x = str_replace(x, fixed(\"O\"), \"u\")) %>%\n+      collect(),\n+    df\n+  )\n+  expect_dplyr_equal(\n+    input %>%\n+      transmute(x = str_replace(x, fixed(\"O\", ignore_case = TRUE), \"u\")) %>%\n+      collect(),\n+    df\n+  )\n+\n+})\n+\n+test_that(\"backreferences\", {\n+  df <- tibble(x = c(\"Foo\", \"bar\"))\n+\n+  expect_dplyr_equal(\n+    input %>%\n+      transmute(desc = sub(\n+        \"(?:https?|ftp)://([^/\\r\\n]+)(/[^\\r\\n]*)?\",\n+        \"path `\\\\2` on server `\\\\1`\",\n+        url\n+        )\n+      ) %>%\n+      collect(),\n+    tibble(url = \"https://arrow.apache.org/docs/r/\")\n+  )\n+  expect_dplyr_equal(\n+    input %>%\n+      transmute(x = str_replace(x, regex(\"^(\\\\w)o(.*)\", ignore_case = TRUE), \"\\\\1\\\\2p\")) %>%\n+      collect(),\n+    df\n+  )\n+})\n+\n+test_that(\"edge cases\", {\n+\n+  # in case-insensitive fixed replace, test that \"\\\\E\" in the search string and\n+  # backslashes in the replacement string are interpreted literally\n+  expect_equal(\n+    tibble(x = c(\"\\\\Q\\\\e\\\\D\")) %>%\n+      Table$create() %>%\n+      transmute(x = sub(\"\\\\E\", \"\\\\L\", x, ignore.case = TRUE, fixed = TRUE)) %>%\n+      collect(),\n+    tibble(x = c(\"\\\\Q\\\\L\\\\D\"))\n+  )\n+\n+  # test that a user's \"(?i)\" prefix does not break the \"(?i)\" prefix that's\n+  # added in case-insensitive regex replace\n+  expect_equal(\n+    tibble(x = c(\"ABC\")) %>%\n+      Table$create() %>%\n+      transmute(x = sub(\"(?i)^[abc]{3}$\", \"123\", x, ignore.case = TRUE, fixed = FALSE)) %>%\n+      collect(),\n+    tibble(x = c(\"123\"))\n+  )\n+\n+})\n+\n+test_that(\"errors and warnings\", {\n+  skip_if_not_available(\"dataset\")\n+\n+  df <- tibble(x = c(\"Foo\", \"bar\"))\n+  ds <- InMemoryDataset$create(df)\n+\n+  expect_error(\n+    ds %>% transmute(x = str_replace_all(x, coll(\"o\", locale = \"en\"), \"\u00f3\")),\n+    \"not supported\"\n\nReview comment:\n       Can you assert the complete error messages for these? I see some possibly complex logic in assembling the messages, and I personally find it all too easy to mess up the whitespace in those.\n\n##########\nFile path: r/tests/testthat/test-dplyr-string-functions.R\n##########\n@@ -0,0 +1,172 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+library(dplyr)\n+library(stringr)\n+\n+test_that(\"sub and gsub\", {\n+  df <- tibble(x = c(\"Foo\", \"bar\"))\n+\n+  for(fixed in c(TRUE, FALSE)) {\n+\n+    expect_dplyr_equal(\n+      input %>%\n+        transmute(x = sub(\"Foo\", \"baz\", x, fixed = fixed)) %>%\n+        collect(),\n+      df\n+    )\n+    expect_dplyr_equal(\n+      input %>%\n+        transmute(x = sub(\"^B.+\", \"baz\", x, ignore.case = FALSE, fixed = fixed)) %>%\n+        collect(),\n+      df\n+    )\n+    expect_dplyr_equal(\n+      input %>%\n+        transmute(x = sub(\"Foo\", \"baz\", x, ignore.case = FALSE, fixed = fixed)) %>%\n+        collect(),\n+      df\n+    )\n+\n+    # the tests below all use ignore.case = TRUE\n+    # but base::sub and base::gsub ignore ignore.case = TRUE with a warning when fixed = TRUE\n+    # so we can't use expect_dplyr_equal() for the tests below\n\nReview comment:\n       I would split these out of your for loop, include the ones you can as `expect_dplyr_equal`, and make explicit the exceptions. \n\n##########\nFile path: r/tests/testthat/test-dplyr-string-functions.R\n##########\n@@ -0,0 +1,172 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+library(dplyr)\n+library(stringr)\n+\n+test_that(\"sub and gsub\", {\n+  df <- tibble(x = c(\"Foo\", \"bar\"))\n+\n+  for(fixed in c(TRUE, FALSE)) {\n+\n+    expect_dplyr_equal(\n+      input %>%\n+        transmute(x = sub(\"Foo\", \"baz\", x, fixed = fixed)) %>%\n+        collect(),\n+      df\n+    )\n+    expect_dplyr_equal(\n+      input %>%\n+        transmute(x = sub(\"^B.+\", \"baz\", x, ignore.case = FALSE, fixed = fixed)) %>%\n+        collect(),\n+      df\n+    )\n+    expect_dplyr_equal(\n+      input %>%\n+        transmute(x = sub(\"Foo\", \"baz\", x, ignore.case = FALSE, fixed = fixed)) %>%\n+        collect(),\n+      df\n+    )\n+\n+    # the tests below all use ignore.case = TRUE\n+    # but base::sub and base::gsub ignore ignore.case = TRUE with a warning when fixed = TRUE\n+    # so we can't use expect_dplyr_equal() for the tests below\n+    expect_equal(\n+      df %>%\n+        Table$create() %>%\n+        transmute(x = sub(\"O\", \"u\", x, ignore.case = TRUE, fixed = fixed)) %>%\n+        collect(),\n+      tibble(x = c(\"Fuo\", \"bar\"))\n+    )\n+    expect_equal(\n+      df %>%\n+        Table$create() %>%\n+        transmute(x = gsub(\"o\", \"u\", x, ignore.case = TRUE, fixed = fixed)) %>%\n+        collect(),\n+      tibble(x = c(\"Fuu\", \"bar\"))\n+    )\n+    expect_equal(\n+      df %>%\n+        Table$create() %>%\n+        transmute(x = sub(\"^B.+\", \"baz\", x, ignore.case = TRUE, fixed = fixed)) %>%\n+        collect(),\n+      if (fixed) tibble(x = c(\"Foo\", \"bar\")) else tibble(x = c(\"Foo\", \"baz\"))\n\nReview comment:\n       Another reason to split this out of the for loop\n\n##########\nFile path: r/R/dplyr.R\n##########\n@@ -434,6 +438,75 @@ build_function_list <- function(FUN) {\n   )\n }\n \n+arrow_r_string_replace_function <- function(FUN, max_replacements) {\n+  function(pattern, replacement, x, ignore.case = FALSE, fixed = FALSE) {\n+    if (ignore.case) {\n+      if (fixed) {\n+        pattern <- paste0(\"(?i)\\\\Q\", pattern, \"\\\\E\")\n+      } else {\n+        pattern <- paste0(\"(?i)\", pattern)\n+      }\n+    }\n+    FUN(\n+      ifelse(fixed && !ignore.case, \"replace_substring\", \"replace_substring_regex\"),\n+      x,\n+      options = list(\n+        pattern = pattern,\n+        replacement = replacement,\n+        max_replacements = max_replacements\n+      )\n+    )\n+  }\n+}\n+\n+arrow_stringr_string_replace_function <- function(FUN, max_replacements) {\n+  function(string, pattern, replacement) {\n+    # Assign stringr pattern modifier functions locally\n\nReview comment:\n       Ok, fine by me\n\n##########\nFile path: r/R/dplyr.R\n##########\n@@ -434,6 +438,77 @@ build_function_list <- function(FUN) {\n   )\n }\n \n+arrow_r_string_replace_function <- function(FUN, max_replacements) {\n+  function(pattern, replacement, x, ignore.case = FALSE, fixed = FALSE) {\n+    if (ignore.case) {\n+      if (fixed) {\n+        pattern <- gsub(\"\\\\E\", \"\\\\e\", pattern, fixed = TRUE)\n\nReview comment:\n       Could you leave some comments and/or links to the relevant regexp/re2 docs that explain why you're making these modifications?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-05T20:55:18.331+0000",
                    "updated": "2021-04-05T20:55:18.331+0000",
                    "started": "2021-04-05T20:55:18.330+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "577103",
                    "issueId": "13357186"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13357186/worklog/577129",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ianmcook commented on a change in pull request #9878:\nURL: https://github.com/apache/arrow/pull/9878#discussion_r607357600\n\n\n\n##########\nFile path: r/tests/testthat/test-dplyr-string-functions.R\n##########\n@@ -0,0 +1,172 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+library(dplyr)\n+library(stringr)\n+\n+test_that(\"sub and gsub\", {\n+  df <- tibble(x = c(\"Foo\", \"bar\"))\n+\n+  for(fixed in c(TRUE, FALSE)) {\n+\n+    expect_dplyr_equal(\n+      input %>%\n+        transmute(x = sub(\"Foo\", \"baz\", x, fixed = fixed)) %>%\n+        collect(),\n+      df\n+    )\n+    expect_dplyr_equal(\n+      input %>%\n+        transmute(x = sub(\"^B.+\", \"baz\", x, ignore.case = FALSE, fixed = fixed)) %>%\n+        collect(),\n+      df\n+    )\n+    expect_dplyr_equal(\n+      input %>%\n+        transmute(x = sub(\"Foo\", \"baz\", x, ignore.case = FALSE, fixed = fixed)) %>%\n+        collect(),\n+      df\n+    )\n+\n+    # the tests below all use ignore.case = TRUE\n+    # but base::sub and base::gsub ignore ignore.case = TRUE with a warning when fixed = TRUE\n+    # so we can't use expect_dplyr_equal() for the tests below\n+    expect_equal(\n+      df %>%\n+        Table$create() %>%\n+        transmute(x = sub(\"O\", \"u\", x, ignore.case = TRUE, fixed = fixed)) %>%\n+        collect(),\n+      tibble(x = c(\"Fuo\", \"bar\"))\n+    )\n+    expect_equal(\n+      df %>%\n+        Table$create() %>%\n+        transmute(x = gsub(\"o\", \"u\", x, ignore.case = TRUE, fixed = fixed)) %>%\n+        collect(),\n+      tibble(x = c(\"Fuu\", \"bar\"))\n+    )\n+    expect_equal(\n+      df %>%\n+        Table$create() %>%\n+        transmute(x = sub(\"^B.+\", \"baz\", x, ignore.case = TRUE, fixed = fixed)) %>%\n+        collect(),\n+      if (fixed) tibble(x = c(\"Foo\", \"bar\")) else tibble(x = c(\"Foo\", \"baz\"))\n+    )\n+\n+  }\n+\n+})\n+\n+test_that(\"str_replace and str_replace_all\", {\n+  df <- tibble(x = c(\"Foo\", \"bar\"))\n+\n+  library(stringr)\n+\n+  expect_dplyr_equal(\n+    input %>%\n+      transmute(x = str_replace_all(x, regex(\"^F\"), \"baz\")) %>%\n+      collect(),\n+    df\n+  )\n+  expect_dplyr_equal(\n+    input %>%\n+      transmute(x = str_replace(x, regex(\"^f[A-Z]{2}\", ignore_case = TRUE), \"baz\")) %>%\n+      collect(),\n+    df\n+  )\n+  expect_dplyr_equal(\n+    input %>%\n+      transmute(x = str_replace_all(x, fixed(\"o\"), \"u\")) %>%\n+      collect(),\n+    df\n+  )\n+  expect_dplyr_equal(\n+    input %>%\n+      transmute(x = str_replace(x, fixed(\"O\"), \"u\")) %>%\n+      collect(),\n+    df\n+  )\n+  expect_dplyr_equal(\n+    input %>%\n+      transmute(x = str_replace(x, fixed(\"O\", ignore_case = TRUE), \"u\")) %>%\n+      collect(),\n+    df\n+  )\n+\n+})\n+\n+test_that(\"backreferences\", {\n+  df <- tibble(x = c(\"Foo\", \"bar\"))\n+\n+  expect_dplyr_equal(\n+    input %>%\n+      transmute(desc = sub(\n+        \"(?:https?|ftp)://([^/\\r\\n]+)(/[^\\r\\n]*)?\",\n+        \"path `\\\\2` on server `\\\\1`\",\n+        url\n+        )\n+      ) %>%\n+      collect(),\n+    tibble(url = \"https://arrow.apache.org/docs/r/\")\n+  )\n+  expect_dplyr_equal(\n+    input %>%\n+      transmute(x = str_replace(x, regex(\"^(\\\\w)o(.*)\", ignore_case = TRUE), \"\\\\1\\\\2p\")) %>%\n+      collect(),\n+    df\n+  )\n+})\n+\n+test_that(\"edge cases\", {\n+\n+  # in case-insensitive fixed replace, test that \"\\\\E\" in the search string and\n+  # backslashes in the replacement string are interpreted literally\n+  expect_equal(\n+    tibble(x = c(\"\\\\Q\\\\e\\\\D\")) %>%\n+      Table$create() %>%\n+      transmute(x = sub(\"\\\\E\", \"\\\\L\", x, ignore.case = TRUE, fixed = TRUE)) %>%\n+      collect(),\n+    tibble(x = c(\"\\\\Q\\\\L\\\\D\"))\n+  )\n+\n+  # test that a user's \"(?i)\" prefix does not break the \"(?i)\" prefix that's\n+  # added in case-insensitive regex replace\n+  expect_equal(\n+    tibble(x = c(\"ABC\")) %>%\n+      Table$create() %>%\n+      transmute(x = sub(\"(?i)^[abc]{3}$\", \"123\", x, ignore.case = TRUE, fixed = FALSE)) %>%\n+      collect(),\n+    tibble(x = c(\"123\"))\n+  )\n+\n+})\n+\n+test_that(\"errors and warnings\", {\n+  skip_if_not_available(\"dataset\")\n+\n+  df <- tibble(x = c(\"Foo\", \"bar\"))\n+  ds <- InMemoryDataset$create(df)\n\nReview comment:\n       I used a dataset to suppress the errors-to-warnings thing that `abandon_ship()` does with Tables and RecordBatches. I can just use a Table and use `expect_warning()` instead of `expect_error()`\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-05T21:56:45.427+0000",
                    "updated": "2021-04-05T21:56:45.427+0000",
                    "started": "2021-04-05T21:56:45.426+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "577129",
                    "issueId": "13357186"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13357186/worklog/577135",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ianmcook commented on a change in pull request #9878:\nURL: https://github.com/apache/arrow/pull/9878#discussion_r607361336\n\n\n\n##########\nFile path: r/tests/testthat/test-dplyr-string-functions.R\n##########\n@@ -0,0 +1,172 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+library(dplyr)\n+library(stringr)\n+\n+test_that(\"sub and gsub\", {\n+  df <- tibble(x = c(\"Foo\", \"bar\"))\n+\n+  for(fixed in c(TRUE, FALSE)) {\n+\n+    expect_dplyr_equal(\n+      input %>%\n+        transmute(x = sub(\"Foo\", \"baz\", x, fixed = fixed)) %>%\n+        collect(),\n+      df\n+    )\n+    expect_dplyr_equal(\n+      input %>%\n+        transmute(x = sub(\"^B.+\", \"baz\", x, ignore.case = FALSE, fixed = fixed)) %>%\n+        collect(),\n+      df\n+    )\n+    expect_dplyr_equal(\n+      input %>%\n+        transmute(x = sub(\"Foo\", \"baz\", x, ignore.case = FALSE, fixed = fixed)) %>%\n+        collect(),\n+      df\n+    )\n+\n+    # the tests below all use ignore.case = TRUE\n+    # but base::sub and base::gsub ignore ignore.case = TRUE with a warning when fixed = TRUE\n+    # so we can't use expect_dplyr_equal() for the tests below\n+    expect_equal(\n+      df %>%\n+        Table$create() %>%\n+        transmute(x = sub(\"O\", \"u\", x, ignore.case = TRUE, fixed = fixed)) %>%\n+        collect(),\n+      tibble(x = c(\"Fuo\", \"bar\"))\n+    )\n+    expect_equal(\n+      df %>%\n+        Table$create() %>%\n+        transmute(x = gsub(\"o\", \"u\", x, ignore.case = TRUE, fixed = fixed)) %>%\n+        collect(),\n+      tibble(x = c(\"Fuu\", \"bar\"))\n+    )\n+    expect_equal(\n+      df %>%\n+        Table$create() %>%\n+        transmute(x = sub(\"^B.+\", \"baz\", x, ignore.case = TRUE, fixed = fixed)) %>%\n+        collect(),\n+      if (fixed) tibble(x = c(\"Foo\", \"bar\")) else tibble(x = c(\"Foo\", \"baz\"))\n+    )\n+\n+  }\n+\n+})\n+\n+test_that(\"str_replace and str_replace_all\", {\n+  df <- tibble(x = c(\"Foo\", \"bar\"))\n+\n+  library(stringr)\n+\n+  expect_dplyr_equal(\n+    input %>%\n+      transmute(x = str_replace_all(x, regex(\"^F\"), \"baz\")) %>%\n+      collect(),\n+    df\n+  )\n+  expect_dplyr_equal(\n+    input %>%\n+      transmute(x = str_replace(x, regex(\"^f[A-Z]{2}\", ignore_case = TRUE), \"baz\")) %>%\n+      collect(),\n+    df\n+  )\n+  expect_dplyr_equal(\n+    input %>%\n+      transmute(x = str_replace_all(x, fixed(\"o\"), \"u\")) %>%\n+      collect(),\n+    df\n+  )\n+  expect_dplyr_equal(\n+    input %>%\n+      transmute(x = str_replace(x, fixed(\"O\"), \"u\")) %>%\n+      collect(),\n+    df\n+  )\n+  expect_dplyr_equal(\n+    input %>%\n+      transmute(x = str_replace(x, fixed(\"O\", ignore_case = TRUE), \"u\")) %>%\n+      collect(),\n+    df\n+  )\n+\n+})\n+\n+test_that(\"backreferences\", {\n+  df <- tibble(x = c(\"Foo\", \"bar\"))\n+\n+  expect_dplyr_equal(\n+    input %>%\n+      transmute(desc = sub(\n+        \"(?:https?|ftp)://([^/\\r\\n]+)(/[^\\r\\n]*)?\",\n+        \"path `\\\\2` on server `\\\\1`\",\n+        url\n+        )\n+      ) %>%\n+      collect(),\n+    tibble(url = \"https://arrow.apache.org/docs/r/\")\n+  )\n+  expect_dplyr_equal(\n+    input %>%\n+      transmute(x = str_replace(x, regex(\"^(\\\\w)o(.*)\", ignore_case = TRUE), \"\\\\1\\\\2p\")) %>%\n+      collect(),\n+    df\n+  )\n+})\n+\n+test_that(\"edge cases\", {\n+\n+  # in case-insensitive fixed replace, test that \"\\\\E\" in the search string and\n+  # backslashes in the replacement string are interpreted literally\n+  expect_equal(\n+    tibble(x = c(\"\\\\Q\\\\e\\\\D\")) %>%\n+      Table$create() %>%\n+      transmute(x = sub(\"\\\\E\", \"\\\\L\", x, ignore.case = TRUE, fixed = TRUE)) %>%\n+      collect(),\n+    tibble(x = c(\"\\\\Q\\\\L\\\\D\"))\n+  )\n+\n+  # test that a user's \"(?i)\" prefix does not break the \"(?i)\" prefix that's\n+  # added in case-insensitive regex replace\n+  expect_equal(\n+    tibble(x = c(\"ABC\")) %>%\n+      Table$create() %>%\n+      transmute(x = sub(\"(?i)^[abc]{3}$\", \"123\", x, ignore.case = TRUE, fixed = FALSE)) %>%\n+      collect(),\n+    tibble(x = c(\"123\"))\n+  )\n+\n+})\n+\n+test_that(\"errors and warnings\", {\n+  skip_if_not_available(\"dataset\")\n+\n+  df <- tibble(x = c(\"Foo\", \"bar\"))\n+  ds <- InMemoryDataset$create(df)\n+\n+  expect_error(\n+    ds %>% transmute(x = str_replace_all(x, coll(\"o\", locale = \"en\"), \"\u00f3\")),\n+    \"not supported\"\n\nReview comment:\n       I'll assert the full message for the latter one. For the former one, the full message is from `abandon_ship()` not from the code added here, so the more sensible thing might be to remove the expected error message altogether.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-05T22:05:39.925+0000",
                    "updated": "2021-04-05T22:05:39.925+0000",
                    "started": "2021-04-05T22:05:39.924+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "577135",
                    "issueId": "13357186"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13357186/worklog/577144",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ianmcook commented on a change in pull request #9878:\nURL: https://github.com/apache/arrow/pull/9878#discussion_r607366547\n\n\n\n##########\nFile path: r/tests/testthat/test-dplyr-string-functions.R\n##########\n@@ -0,0 +1,172 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+library(dplyr)\n+library(stringr)\n+\n+test_that(\"sub and gsub\", {\n+  df <- tibble(x = c(\"Foo\", \"bar\"))\n+\n+  for(fixed in c(TRUE, FALSE)) {\n+\n+    expect_dplyr_equal(\n+      input %>%\n+        transmute(x = sub(\"Foo\", \"baz\", x, fixed = fixed)) %>%\n+        collect(),\n+      df\n+    )\n+    expect_dplyr_equal(\n+      input %>%\n+        transmute(x = sub(\"^B.+\", \"baz\", x, ignore.case = FALSE, fixed = fixed)) %>%\n+        collect(),\n+      df\n+    )\n+    expect_dplyr_equal(\n+      input %>%\n+        transmute(x = sub(\"Foo\", \"baz\", x, ignore.case = FALSE, fixed = fixed)) %>%\n+        collect(),\n+      df\n+    )\n+\n+    # the tests below all use ignore.case = TRUE\n+    # but base::sub and base::gsub ignore ignore.case = TRUE with a warning when fixed = TRUE\n+    # so we can't use expect_dplyr_equal() for the tests below\n+    expect_equal(\n+      df %>%\n+        Table$create() %>%\n+        transmute(x = sub(\"O\", \"u\", x, ignore.case = TRUE, fixed = fixed)) %>%\n+        collect(),\n+      tibble(x = c(\"Fuo\", \"bar\"))\n+    )\n+    expect_equal(\n+      df %>%\n+        Table$create() %>%\n+        transmute(x = gsub(\"o\", \"u\", x, ignore.case = TRUE, fixed = fixed)) %>%\n+        collect(),\n+      tibble(x = c(\"Fuu\", \"bar\"))\n+    )\n+    expect_equal(\n+      df %>%\n+        Table$create() %>%\n+        transmute(x = sub(\"^B.+\", \"baz\", x, ignore.case = TRUE, fixed = fixed)) %>%\n+        collect(),\n+      if (fixed) tibble(x = c(\"Foo\", \"bar\")) else tibble(x = c(\"Foo\", \"baz\"))\n+    )\n+\n+  }\n+\n+})\n+\n+test_that(\"str_replace and str_replace_all\", {\n+  df <- tibble(x = c(\"Foo\", \"bar\"))\n+\n+  library(stringr)\n+\n+  expect_dplyr_equal(\n+    input %>%\n+      transmute(x = str_replace_all(x, regex(\"^F\"), \"baz\")) %>%\n+      collect(),\n+    df\n+  )\n+  expect_dplyr_equal(\n+    input %>%\n+      transmute(x = str_replace(x, regex(\"^f[A-Z]{2}\", ignore_case = TRUE), \"baz\")) %>%\n+      collect(),\n+    df\n+  )\n+  expect_dplyr_equal(\n+    input %>%\n+      transmute(x = str_replace_all(x, fixed(\"o\"), \"u\")) %>%\n+      collect(),\n+    df\n+  )\n+  expect_dplyr_equal(\n+    input %>%\n+      transmute(x = str_replace(x, fixed(\"O\"), \"u\")) %>%\n+      collect(),\n+    df\n+  )\n+  expect_dplyr_equal(\n+    input %>%\n+      transmute(x = str_replace(x, fixed(\"O\", ignore_case = TRUE), \"u\")) %>%\n+      collect(),\n+    df\n+  )\n+\n+})\n+\n+test_that(\"backreferences\", {\n+  df <- tibble(x = c(\"Foo\", \"bar\"))\n+\n+  expect_dplyr_equal(\n+    input %>%\n+      transmute(desc = sub(\n+        \"(?:https?|ftp)://([^/\\r\\n]+)(/[^\\r\\n]*)?\",\n+        \"path `\\\\2` on server `\\\\1`\",\n+        url\n+        )\n+      ) %>%\n+      collect(),\n+    tibble(url = \"https://arrow.apache.org/docs/r/\")\n+  )\n+  expect_dplyr_equal(\n+    input %>%\n+      transmute(x = str_replace(x, regex(\"^(\\\\w)o(.*)\", ignore_case = TRUE), \"\\\\1\\\\2p\")) %>%\n+      collect(),\n+    df\n+  )\n+})\n+\n+test_that(\"edge cases\", {\n\nReview comment:\n       One of them can't use `expect_dplyr_equal()` because it uses `ignore.case = TRUE, fixed = TRUE` which isn't supported in base R. I added a note to explain that, like the note above explaining the same. I'll switch the other example here to use `expect_dplyr_equal()`.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-05T22:18:16.555+0000",
                    "updated": "2021-04-05T22:18:16.555+0000",
                    "started": "2021-04-05T22:18:16.555+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "577144",
                    "issueId": "13357186"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13357186/worklog/577145",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ianmcook commented on a change in pull request #9878:\nURL: https://github.com/apache/arrow/pull/9878#discussion_r607367185\n\n\n\n##########\nFile path: r/tests/testthat/test-dplyr-string-functions.R\n##########\n@@ -0,0 +1,172 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+library(dplyr)\n+library(stringr)\n+\n+test_that(\"sub and gsub\", {\n+  df <- tibble(x = c(\"Foo\", \"bar\"))\n+\n+  for(fixed in c(TRUE, FALSE)) {\n+\n+    expect_dplyr_equal(\n+      input %>%\n+        transmute(x = sub(\"Foo\", \"baz\", x, fixed = fixed)) %>%\n+        collect(),\n+      df\n+    )\n+    expect_dplyr_equal(\n+      input %>%\n+        transmute(x = sub(\"^B.+\", \"baz\", x, ignore.case = FALSE, fixed = fixed)) %>%\n+        collect(),\n+      df\n+    )\n+    expect_dplyr_equal(\n+      input %>%\n+        transmute(x = sub(\"Foo\", \"baz\", x, ignore.case = FALSE, fixed = fixed)) %>%\n+        collect(),\n+      df\n+    )\n+\n+    # the tests below all use ignore.case = TRUE\n+    # but base::sub and base::gsub ignore ignore.case = TRUE with a warning when fixed = TRUE\n+    # so we can't use expect_dplyr_equal() for the tests below\n+    expect_equal(\n+      df %>%\n+        Table$create() %>%\n+        transmute(x = sub(\"O\", \"u\", x, ignore.case = TRUE, fixed = fixed)) %>%\n+        collect(),\n+      tibble(x = c(\"Fuo\", \"bar\"))\n+    )\n+    expect_equal(\n+      df %>%\n+        Table$create() %>%\n+        transmute(x = gsub(\"o\", \"u\", x, ignore.case = TRUE, fixed = fixed)) %>%\n+        collect(),\n+      tibble(x = c(\"Fuu\", \"bar\"))\n+    )\n+    expect_equal(\n+      df %>%\n+        Table$create() %>%\n+        transmute(x = sub(\"^B.+\", \"baz\", x, ignore.case = TRUE, fixed = fixed)) %>%\n+        collect(),\n+      if (fixed) tibble(x = c(\"Foo\", \"bar\")) else tibble(x = c(\"Foo\", \"baz\"))\n+    )\n+\n+  }\n+\n+})\n+\n+test_that(\"str_replace and str_replace_all\", {\n+  df <- tibble(x = c(\"Foo\", \"bar\"))\n+\n+  library(stringr)\n+\n+  expect_dplyr_equal(\n+    input %>%\n+      transmute(x = str_replace_all(x, regex(\"^F\"), \"baz\")) %>%\n+      collect(),\n+    df\n+  )\n+  expect_dplyr_equal(\n+    input %>%\n+      transmute(x = str_replace(x, regex(\"^f[A-Z]{2}\", ignore_case = TRUE), \"baz\")) %>%\n+      collect(),\n+    df\n+  )\n+  expect_dplyr_equal(\n+    input %>%\n+      transmute(x = str_replace_all(x, fixed(\"o\"), \"u\")) %>%\n+      collect(),\n+    df\n+  )\n+  expect_dplyr_equal(\n+    input %>%\n+      transmute(x = str_replace(x, fixed(\"O\"), \"u\")) %>%\n+      collect(),\n+    df\n+  )\n+  expect_dplyr_equal(\n+    input %>%\n+      transmute(x = str_replace(x, fixed(\"O\", ignore_case = TRUE), \"u\")) %>%\n+      collect(),\n+    df\n+  )\n+\n+})\n+\n+test_that(\"backreferences\", {\n+  df <- tibble(x = c(\"Foo\", \"bar\"))\n+\n+  expect_dplyr_equal(\n+    input %>%\n+      transmute(desc = sub(\n+        \"(?:https?|ftp)://([^/\\r\\n]+)(/[^\\r\\n]*)?\",\n+        \"path `\\\\2` on server `\\\\1`\",\n+        url\n+        )\n+      ) %>%\n+      collect(),\n+    tibble(url = \"https://arrow.apache.org/docs/r/\")\n+  )\n+  expect_dplyr_equal(\n+    input %>%\n+      transmute(x = str_replace(x, regex(\"^(\\\\w)o(.*)\", ignore_case = TRUE), \"\\\\1\\\\2p\")) %>%\n+      collect(),\n+    df\n+  )\n+})\n+\n+test_that(\"edge cases\", {\n+\n+  # in case-insensitive fixed replace, test that \"\\\\E\" in the search string and\n+  # backslashes in the replacement string are interpreted literally\n+  expect_equal(\n+    tibble(x = c(\"\\\\Q\\\\e\\\\D\")) %>%\n+      Table$create() %>%\n+      transmute(x = sub(\"\\\\E\", \"\\\\L\", x, ignore.case = TRUE, fixed = TRUE)) %>%\n+      collect(),\n+    tibble(x = c(\"\\\\Q\\\\L\\\\D\"))\n+  )\n+\n+  # test that a user's \"(?i)\" prefix does not break the \"(?i)\" prefix that's\n+  # added in case-insensitive regex replace\n+  expect_equal(\n+    tibble(x = c(\"ABC\")) %>%\n+      Table$create() %>%\n+      transmute(x = sub(\"(?i)^[abc]{3}$\", \"123\", x, ignore.case = TRUE, fixed = FALSE)) %>%\n+      collect(),\n+    tibble(x = c(\"123\"))\n+  )\n+\n+})\n+\n+test_that(\"errors and warnings\", {\n+  skip_if_not_available(\"dataset\")\n+\n+  df <- tibble(x = c(\"Foo\", \"bar\"))\n+  ds <- InMemoryDataset$create(df)\n\nReview comment:\n       Changed in 7aee83c854ac87db17054a7692b35e267e81a0c0\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-05T22:19:49.914+0000",
                    "updated": "2021-04-05T22:19:49.914+0000",
                    "started": "2021-04-05T22:19:49.913+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "577145",
                    "issueId": "13357186"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13357186/worklog/577146",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ianmcook commented on a change in pull request #9878:\nURL: https://github.com/apache/arrow/pull/9878#discussion_r607367286\n\n\n\n##########\nFile path: r/tests/testthat/test-dplyr-string-functions.R\n##########\n@@ -0,0 +1,172 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+library(dplyr)\n+library(stringr)\n+\n+test_that(\"sub and gsub\", {\n+  df <- tibble(x = c(\"Foo\", \"bar\"))\n+\n+  for(fixed in c(TRUE, FALSE)) {\n+\n+    expect_dplyr_equal(\n+      input %>%\n+        transmute(x = sub(\"Foo\", \"baz\", x, fixed = fixed)) %>%\n+        collect(),\n+      df\n+    )\n+    expect_dplyr_equal(\n+      input %>%\n+        transmute(x = sub(\"^B.+\", \"baz\", x, ignore.case = FALSE, fixed = fixed)) %>%\n+        collect(),\n+      df\n+    )\n+    expect_dplyr_equal(\n+      input %>%\n+        transmute(x = sub(\"Foo\", \"baz\", x, ignore.case = FALSE, fixed = fixed)) %>%\n+        collect(),\n+      df\n+    )\n+\n+    # the tests below all use ignore.case = TRUE\n+    # but base::sub and base::gsub ignore ignore.case = TRUE with a warning when fixed = TRUE\n+    # so we can't use expect_dplyr_equal() for the tests below\n+    expect_equal(\n+      df %>%\n+        Table$create() %>%\n+        transmute(x = sub(\"O\", \"u\", x, ignore.case = TRUE, fixed = fixed)) %>%\n+        collect(),\n+      tibble(x = c(\"Fuo\", \"bar\"))\n+    )\n+    expect_equal(\n+      df %>%\n+        Table$create() %>%\n+        transmute(x = gsub(\"o\", \"u\", x, ignore.case = TRUE, fixed = fixed)) %>%\n+        collect(),\n+      tibble(x = c(\"Fuu\", \"bar\"))\n+    )\n+    expect_equal(\n+      df %>%\n+        Table$create() %>%\n+        transmute(x = sub(\"^B.+\", \"baz\", x, ignore.case = TRUE, fixed = fixed)) %>%\n+        collect(),\n+      if (fixed) tibble(x = c(\"Foo\", \"bar\")) else tibble(x = c(\"Foo\", \"baz\"))\n+    )\n+\n+  }\n+\n+})\n+\n+test_that(\"str_replace and str_replace_all\", {\n+  df <- tibble(x = c(\"Foo\", \"bar\"))\n+\n+  library(stringr)\n+\n+  expect_dplyr_equal(\n+    input %>%\n+      transmute(x = str_replace_all(x, regex(\"^F\"), \"baz\")) %>%\n+      collect(),\n+    df\n+  )\n+  expect_dplyr_equal(\n+    input %>%\n+      transmute(x = str_replace(x, regex(\"^f[A-Z]{2}\", ignore_case = TRUE), \"baz\")) %>%\n+      collect(),\n+    df\n+  )\n+  expect_dplyr_equal(\n+    input %>%\n+      transmute(x = str_replace_all(x, fixed(\"o\"), \"u\")) %>%\n+      collect(),\n+    df\n+  )\n+  expect_dplyr_equal(\n+    input %>%\n+      transmute(x = str_replace(x, fixed(\"O\"), \"u\")) %>%\n+      collect(),\n+    df\n+  )\n+  expect_dplyr_equal(\n+    input %>%\n+      transmute(x = str_replace(x, fixed(\"O\", ignore_case = TRUE), \"u\")) %>%\n+      collect(),\n+    df\n+  )\n+\n+})\n+\n+test_that(\"backreferences\", {\n+  df <- tibble(x = c(\"Foo\", \"bar\"))\n+\n+  expect_dplyr_equal(\n+    input %>%\n+      transmute(desc = sub(\n+        \"(?:https?|ftp)://([^/\\r\\n]+)(/[^\\r\\n]*)?\",\n+        \"path `\\\\2` on server `\\\\1`\",\n+        url\n+        )\n+      ) %>%\n+      collect(),\n+    tibble(url = \"https://arrow.apache.org/docs/r/\")\n+  )\n+  expect_dplyr_equal(\n+    input %>%\n+      transmute(x = str_replace(x, regex(\"^(\\\\w)o(.*)\", ignore_case = TRUE), \"\\\\1\\\\2p\")) %>%\n+      collect(),\n+    df\n+  )\n+})\n+\n+test_that(\"edge cases\", {\n\nReview comment:\n       Changed in 7aee83c854ac87db17054a7692b35e267e81a0c0\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-05T22:20:13.002+0000",
                    "updated": "2021-04-05T22:20:13.002+0000",
                    "started": "2021-04-05T22:20:13.002+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "577146",
                    "issueId": "13357186"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13357186/worklog/577147",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ianmcook commented on a change in pull request #9878:\nURL: https://github.com/apache/arrow/pull/9878#discussion_r607367707\n\n\n\n##########\nFile path: r/tests/testthat/test-dplyr-string-functions.R\n##########\n@@ -0,0 +1,172 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+library(dplyr)\n+library(stringr)\n+\n+test_that(\"sub and gsub\", {\n+  df <- tibble(x = c(\"Foo\", \"bar\"))\n+\n+  for(fixed in c(TRUE, FALSE)) {\n+\n+    expect_dplyr_equal(\n+      input %>%\n+        transmute(x = sub(\"Foo\", \"baz\", x, fixed = fixed)) %>%\n+        collect(),\n+      df\n+    )\n+    expect_dplyr_equal(\n+      input %>%\n+        transmute(x = sub(\"^B.+\", \"baz\", x, ignore.case = FALSE, fixed = fixed)) %>%\n+        collect(),\n+      df\n+    )\n+    expect_dplyr_equal(\n+      input %>%\n+        transmute(x = sub(\"Foo\", \"baz\", x, ignore.case = FALSE, fixed = fixed)) %>%\n+        collect(),\n+      df\n+    )\n+\n+    # the tests below all use ignore.case = TRUE\n+    # but base::sub and base::gsub ignore ignore.case = TRUE with a warning when fixed = TRUE\n+    # so we can't use expect_dplyr_equal() for the tests below\n+    expect_equal(\n+      df %>%\n+        Table$create() %>%\n+        transmute(x = sub(\"O\", \"u\", x, ignore.case = TRUE, fixed = fixed)) %>%\n+        collect(),\n+      tibble(x = c(\"Fuo\", \"bar\"))\n+    )\n+    expect_equal(\n+      df %>%\n+        Table$create() %>%\n+        transmute(x = gsub(\"o\", \"u\", x, ignore.case = TRUE, fixed = fixed)) %>%\n+        collect(),\n+      tibble(x = c(\"Fuu\", \"bar\"))\n+    )\n+    expect_equal(\n+      df %>%\n+        Table$create() %>%\n+        transmute(x = sub(\"^B.+\", \"baz\", x, ignore.case = TRUE, fixed = fixed)) %>%\n+        collect(),\n+      if (fixed) tibble(x = c(\"Foo\", \"bar\")) else tibble(x = c(\"Foo\", \"baz\"))\n+    )\n+\n+  }\n+\n+})\n+\n+test_that(\"str_replace and str_replace_all\", {\n+  df <- tibble(x = c(\"Foo\", \"bar\"))\n+\n+  library(stringr)\n+\n+  expect_dplyr_equal(\n+    input %>%\n+      transmute(x = str_replace_all(x, regex(\"^F\"), \"baz\")) %>%\n+      collect(),\n+    df\n+  )\n+  expect_dplyr_equal(\n+    input %>%\n+      transmute(x = str_replace(x, regex(\"^f[A-Z]{2}\", ignore_case = TRUE), \"baz\")) %>%\n+      collect(),\n+    df\n+  )\n+  expect_dplyr_equal(\n+    input %>%\n+      transmute(x = str_replace_all(x, fixed(\"o\"), \"u\")) %>%\n+      collect(),\n+    df\n+  )\n+  expect_dplyr_equal(\n+    input %>%\n+      transmute(x = str_replace(x, fixed(\"O\"), \"u\")) %>%\n+      collect(),\n+    df\n+  )\n+  expect_dplyr_equal(\n+    input %>%\n+      transmute(x = str_replace(x, fixed(\"O\", ignore_case = TRUE), \"u\")) %>%\n+      collect(),\n+    df\n+  )\n+\n+})\n+\n+test_that(\"backreferences\", {\n+  df <- tibble(x = c(\"Foo\", \"bar\"))\n+\n+  expect_dplyr_equal(\n+    input %>%\n+      transmute(desc = sub(\n+        \"(?:https?|ftp)://([^/\\r\\n]+)(/[^\\r\\n]*)?\",\n+        \"path `\\\\2` on server `\\\\1`\",\n+        url\n+        )\n+      ) %>%\n+      collect(),\n+    tibble(url = \"https://arrow.apache.org/docs/r/\")\n+  )\n+  expect_dplyr_equal(\n+    input %>%\n+      transmute(x = str_replace(x, regex(\"^(\\\\w)o(.*)\", ignore_case = TRUE), \"\\\\1\\\\2p\")) %>%\n+      collect(),\n+    df\n+  )\n+})\n+\n+test_that(\"edge cases\", {\n+\n+  # in case-insensitive fixed replace, test that \"\\\\E\" in the search string and\n+  # backslashes in the replacement string are interpreted literally\n+  expect_equal(\n+    tibble(x = c(\"\\\\Q\\\\e\\\\D\")) %>%\n+      Table$create() %>%\n+      transmute(x = sub(\"\\\\E\", \"\\\\L\", x, ignore.case = TRUE, fixed = TRUE)) %>%\n+      collect(),\n+    tibble(x = c(\"\\\\Q\\\\L\\\\D\"))\n+  )\n+\n+  # test that a user's \"(?i)\" prefix does not break the \"(?i)\" prefix that's\n+  # added in case-insensitive regex replace\n+  expect_equal(\n+    tibble(x = c(\"ABC\")) %>%\n+      Table$create() %>%\n+      transmute(x = sub(\"(?i)^[abc]{3}$\", \"123\", x, ignore.case = TRUE, fixed = FALSE)) %>%\n+      collect(),\n+    tibble(x = c(\"123\"))\n+  )\n+\n+})\n+\n+test_that(\"errors and warnings\", {\n+  skip_if_not_available(\"dataset\")\n+\n+  df <- tibble(x = c(\"Foo\", \"bar\"))\n+  ds <- InMemoryDataset$create(df)\n+\n+  expect_error(\n+    ds %>% transmute(x = str_replace_all(x, coll(\"o\", locale = \"en\"), \"\u00f3\")),\n+    \"not supported\"\n\nReview comment:\n       Done in 7aee83c854ac87db17054a7692b35e267e81a0c0\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-05T22:21:18.123+0000",
                    "updated": "2021-04-05T22:21:18.123+0000",
                    "started": "2021-04-05T22:21:18.123+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "577147",
                    "issueId": "13357186"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13357186/worklog/577269",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ianmcook commented on a change in pull request #9878:\nURL: https://github.com/apache/arrow/pull/9878#discussion_r607441413\n\n\n\n##########\nFile path: r/tests/testthat/test-dplyr-string-functions.R\n##########\n@@ -0,0 +1,172 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+library(dplyr)\n+library(stringr)\n+\n+test_that(\"sub and gsub\", {\n+  df <- tibble(x = c(\"Foo\", \"bar\"))\n+\n+  for(fixed in c(TRUE, FALSE)) {\n+\n+    expect_dplyr_equal(\n+      input %>%\n+        transmute(x = sub(\"Foo\", \"baz\", x, fixed = fixed)) %>%\n+        collect(),\n+      df\n+    )\n+    expect_dplyr_equal(\n+      input %>%\n+        transmute(x = sub(\"^B.+\", \"baz\", x, ignore.case = FALSE, fixed = fixed)) %>%\n+        collect(),\n+      df\n+    )\n+    expect_dplyr_equal(\n+      input %>%\n+        transmute(x = sub(\"Foo\", \"baz\", x, ignore.case = FALSE, fixed = fixed)) %>%\n+        collect(),\n+      df\n+    )\n+\n+    # the tests below all use ignore.case = TRUE\n+    # but base::sub and base::gsub ignore ignore.case = TRUE with a warning when fixed = TRUE\n+    # so we can't use expect_dplyr_equal() for the tests below\n\nReview comment:\n       Done in 25b869dffe4496ce8cc253f2a3860e6cce09ec1f\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-06T02:19:19.586+0000",
                    "updated": "2021-04-06T02:19:19.586+0000",
                    "started": "2021-04-06T02:19:19.586+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "577269",
                    "issueId": "13357186"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13357186/worklog/577271",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ianmcook commented on a change in pull request #9878:\nURL: https://github.com/apache/arrow/pull/9878#discussion_r607441652\n\n\n\n##########\nFile path: r/R/dplyr.R\n##########\n@@ -434,6 +438,77 @@ build_function_list <- function(FUN) {\n   )\n }\n \n+arrow_r_string_replace_function <- function(FUN, max_replacements) {\n+  function(pattern, replacement, x, ignore.case = FALSE, fixed = FALSE) {\n+    if (ignore.case) {\n+      if (fixed) {\n+        pattern <- gsub(\"\\\\E\", \"\\\\e\", pattern, fixed = TRUE)\n\nReview comment:\n       Added in db828beec72f5cac9e673bf4e3305c077e1bad5d\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-06T02:20:14.863+0000",
                    "updated": "2021-04-06T02:20:14.863+0000",
                    "started": "2021-04-06T02:20:14.862+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "577271",
                    "issueId": "13357186"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13357186/worklog/577272",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ianmcook commented on a change in pull request #9878:\nURL: https://github.com/apache/arrow/pull/9878#discussion_r607442184\n\n\n\n##########\nFile path: r/R/dplyr.R\n##########\n@@ -434,6 +438,77 @@ build_function_list <- function(FUN) {\n   )\n }\n \n+arrow_r_string_replace_function <- function(FUN, max_replacements) {\n+  function(pattern, replacement, x, ignore.case = FALSE, fixed = FALSE) {\n+    if (ignore.case) {\n+      if (fixed) {\n+        pattern <- gsub(\"\\\\E\", \"\\\\e\", pattern, fixed = TRUE)\n+        pattern <- paste0(\"(?i)\\\\Q\", pattern, \"\\\\E\")\n+        replacement <- gsub(\"\\\\\", \"\\\\\\\\\", replacement, fixed = TRUE)\n+      } else {\n+        pattern <- paste0(\"(?i)\", pattern)\n+      }\n+    }\n\nReview comment:\n       Comments added explaining this code in https://github.com/apache/arrow/pull/9878/commits/db828beec72f5cac9e673bf4e3305c077e1bad5d\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-06T02:22:14.341+0000",
                    "updated": "2021-04-06T02:22:14.341+0000",
                    "started": "2021-04-06T02:22:14.340+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "577272",
                    "issueId": "13357186"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13357186/worklog/577279",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on a change in pull request #9878:\nURL: https://github.com/apache/arrow/pull/9878#discussion_r607445205\n\n\n\n##########\nFile path: r/tests/testthat/test-dplyr-string-functions.R\n##########\n@@ -0,0 +1,181 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+library(dplyr)\n+library(stringr)\n+\n+test_that(\"sub and gsub\", {\n+  df <- tibble(x = c(\"Foo\", \"bar\"))\n+\n+  for(fixed in c(TRUE, FALSE)) {\n+\n+    expect_dplyr_equal(\n+      input %>%\n+        transmute(x = sub(\"Foo\", \"baz\", x, fixed = fixed)) %>%\n+        collect(),\n+      df\n+    )\n+    expect_dplyr_equal(\n+      input %>%\n+        transmute(x = sub(\"^B.+\", \"baz\", x, ignore.case = FALSE, fixed = fixed)) %>%\n+        collect(),\n+      df\n+    )\n+    expect_dplyr_equal(\n+      input %>%\n+        transmute(x = sub(\"Foo\", \"baz\", x, ignore.case = FALSE, fixed = fixed)) %>%\n+        collect(),\n+      df\n+    )\n+\n+  }\n+})\n+\n+test_that(\"sub and gsub with ignore.case = TRUE and fixed = TRUE\", {\n+  df <- tibble(x = c(\"Foo\", \"bar\"))\n+\n+  # base::sub() and base::gsub() ignore ignore.case = TRUE with a warning when\n+  # fixed = TRUE, so we can't use expect_dplyr_equal() for these tests\n+  expect_equal(\n+    df %>%\n+      Table$create() %>%\n+      transmute(x = sub(\"O\", \"u\", x, ignore.case = TRUE, fixed = TRUE)) %>%\n+      collect(),\n+    tibble(x = c(\"Fuo\", \"bar\"))\n+  )\n+  expect_equal(\n+    df %>%\n+      Table$create() %>%\n+      transmute(x = gsub(\"o\", \"u\", x, ignore.case = TRUE, fixed = TRUE)) %>%\n+      collect(),\n+    tibble(x = c(\"Fuu\", \"bar\"))\n+  )\n+  expect_equal(\n+    df %>%\n+      Table$create() %>%\n+      transmute(x = sub(\"^B.+\", \"baz\", x, ignore.case = TRUE, fixed = TRUE)) %>%\n+      collect(),\n+    df # unchanged\n+  )\n+\n+})\n+\n+test_that(\"str_replace and str_replace_all\", {\n+  df <- tibble(x = c(\"Foo\", \"bar\"))\n+\n+  library(stringr)\n+\n+  expect_dplyr_equal(\n+    input %>%\n+      transmute(x = str_replace_all(x, regex(\"^F\"), \"baz\")) %>%\n+      collect(),\n+    df\n+  )\n+  expect_dplyr_equal(\n+    input %>%\n+      transmute(x = str_replace(x, regex(\"^f[A-Z]{2}\", ignore_case = TRUE), \"baz\")) %>%\n+      collect(),\n+    df\n+  )\n+  expect_dplyr_equal(\n+    input %>%\n+      transmute(x = str_replace_all(x, fixed(\"o\"), \"u\")) %>%\n+      collect(),\n+    df\n+  )\n+  expect_dplyr_equal(\n+    input %>%\n+      transmute(x = str_replace(x, fixed(\"O\"), \"u\")) %>%\n+      collect(),\n+    df\n+  )\n+  expect_dplyr_equal(\n+    input %>%\n+      transmute(x = str_replace(x, fixed(\"O\", ignore_case = TRUE), \"u\")) %>%\n+      collect(),\n+    df\n+  )\n+\n+})\n+\n+test_that(\"backreferences\", {\n+  df <- tibble(x = c(\"Foo\", \"bar\"))\n+\n+  expect_dplyr_equal(\n+    input %>%\n+      transmute(desc = sub(\n+        \"(?:https?|ftp)://([^/\\r\\n]+)(/[^\\r\\n]*)?\",\n+        \"path `\\\\2` on server `\\\\1`\",\n+        url\n+        )\n+      ) %>%\n+      collect(),\n+    tibble(url = \"https://arrow.apache.org/docs/r/\")\n+  )\n+  expect_dplyr_equal(\n+    input %>%\n+      transmute(x = str_replace(x, regex(\"^(\\\\w)o(.*)\", ignore_case = TRUE), \"\\\\1\\\\2p\")) %>%\n+      collect(),\n+    df\n+  )\n+})\n+\n+test_that(\"edge cases\", {\n+\n+  # in case-insensitive fixed replace, test that \"\\\\E\" in the search string and\n+  # backslashes in the replacement string are interpreted literally.\n+  # this test does not use expect_dplyr_equal() because base::sub() does not\n+  # support ignore.case = TRUE when fixed = TRUE.\n+  expect_equal(\n+    tibble(x = c(\"\\\\Q\\\\e\\\\D\")) %>%\n+      Table$create() %>%\n+      transmute(x = sub(\"\\\\E\", \"\\\\L\", x, ignore.case = TRUE, fixed = TRUE)) %>%\n+      collect(),\n+    tibble(x = c(\"\\\\Q\\\\L\\\\D\"))\n+  )\n+\n+  # test that a user's \"(?i)\" prefix does not break the \"(?i)\" prefix that's\n+  # added in case-insensitive regex replace\n+  expect_dplyr_equal(\n+    input %>%\n+      transmute(x = sub(\"(?i)^[abc]{3}$\", \"123\", x, ignore.case = TRUE, fixed = FALSE)) %>%\n+      collect(),\n+    tibble(x = c(\"ABC\"))\n+  )\n+\n+})\n+\n+test_that(\"errors and warnings\", {\n+  skip_if_not_available(\"dataset\")\n\nReview comment:\n       ```suggestion\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-06T02:32:46.974+0000",
                    "updated": "2021-04-06T02:32:46.974+0000",
                    "started": "2021-04-06T02:32:46.974+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "577279",
                    "issueId": "13357186"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13357186/worklog/577303",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson closed pull request #9878:\nURL: https://github.com/apache/arrow/pull/9878\n\n\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-06T04:18:28.220+0000",
                    "updated": "2021-04-06T04:18:28.220+0000",
                    "started": "2021-04-06T04:18:28.220+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "577303",
                    "issueId": "13357186"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 12000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@604293ff[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2294d9a9[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2ae0ed4e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@2ebd302a[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@eabdc85[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@1a765c9b[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@37514806[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@702a02a6[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@20b5a7d2[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@88fb5db[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@35a3cdb4[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@153cd694[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 12000,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Apr 06 04:18:20 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-04-06T04:18:20.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-11513/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2021-02-05T23:13:50.000+0000",
        "updated": "2021-04-06T04:18:29.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "3h 20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 12000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[R] Bindings for sub/gsub",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13357186/comment/17309542",
                    "id": "17309542",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "Looking at the [options struct|https://github.com/apache/arrow/pull/8468/files#diff-6bc7ecec6a4f7bcefc2511cde3bd809340ad0d94bb8f7cc5f4994063c798f2faR72-R83] and the [re2 syntax|https://github.com/google/re2/wiki/Syntax], here are some notes for how to map to R concepts:\r\n\r\n* gsub/str_replace_all is -1 max_replacements (the default); sub/str_replace is 1 max_replacements\r\n* fixed = FALSE (default) means to use the \"replace_substring_regex\" function; fixed = TRUE means to use \"replace_substring\"\r\n* if ignore.case = TRUE and fixed = FALSE, can wrap pattern with a flag like {{paste0(\"(?i\", pattern, \")\")}} (or maybe it is actually {{paste0(\"(?i)\", pattern)}}, see [stringi docs|https://stringi.gagolewski.com/rapi/stri_opts_regex.html]; unclear that we have a case-insensitive, non-regex option\r\n* useBytes: unclear that this is an option, or if it is relevant (per the docs for {{sub}}, \"The main effect of \u2018useBytes = TRUE\u2019 is to avoid errors/warnings about invalid inputs and spurious matches in multibyte locales\")\r\n* perl: unclear that this is an option, or if it is relevant\r\n* stringr handles options including case insensitivity differently, using a [stringi options list|https://stringi.gagolewski.com/rapi/stri_opts_regex.html], and we won't be able to support all of them. See [stringr vignette|https://stringr.tidyverse.org/articles/regular-expressions.html]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2021-03-26T16:33:13.924+0000",
                    "updated": "2021-03-26T21:02:28.737+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13357186/comment/17314053",
                    "id": "17314053",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=icook",
                        "name": "icook",
                        "key": "icook",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=icook&avatarId=29388",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=icook&avatarId=29388",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=icook&avatarId=29388",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=icook&avatarId=29388"
                        },
                        "displayName": "Ian Cook",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "- For {{ignore.case = TRUE && fixed == FALSE}}, the re2 syntax is {{paste0(\"(?i)\", pattern)}}\r\n- We can support the {{ignore.case = TRUE && fixed == TRUE}} by using re2 with {{paste0(\"(?i)\\Q\", pattern, \"\\E\")}} (except double the backslashes which Jira markup can't do)\r\n- I don't think it's worth handling {{useBytes}} or {{perl}}. I believe the only practical result of handling those arguments would be to detect conditions that R doesn't support when they are {{FALSE}} and throw various errors when they're set to {{FALSE}}. Since they both default to {{FALSE}}, I suspect this would be more annoying than valuable.\r\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=icook",
                        "name": "icook",
                        "key": "icook",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=icook&avatarId=29388",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=icook&avatarId=29388",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=icook&avatarId=29388",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=icook&avatarId=29388"
                        },
                        "displayName": "Ian Cook",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-04-02T19:39:58.421+0000",
                    "updated": "2021-04-03T15:44:52.956+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13357186/comment/17315224",
                    "id": "17315224",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "Issue resolved by pull request 9878\n[https://github.com/apache/arrow/pull/9878]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2021-04-06T04:18:20.326+0000",
                    "updated": "2021-04-06T04:18:20.326+0000"
                }
            ],
            "maxResults": 3,
            "total": 3,
            "startAt": 0
        },
        "customfield_12311820": "0|z0nfjs:",
        "customfield_12314139": null
    }
}