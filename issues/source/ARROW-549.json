{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13042299",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13042299",
    "key": "ARROW-549",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343937",
                "id": "12343937",
                "description": "",
                "name": "0.13.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-04-01"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "Analytics",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
            "name": "bkietz",
            "key": "bkietz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
            },
            "displayName": "Ben Kietzman",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 42000,
            "total": 42000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 42000,
            "total": 42000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-549/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 75,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13042299/worklog/203844",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #3746: ARROW-549: [C++] concatenate function\nURL: https://github.com/apache/arrow/pull/3746\n \n \n   Concatenate arrays into a single array\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-25T18:48:51.362+0000",
                    "updated": "2019-02-25T18:48:51.362+0000",
                    "started": "2019-02-25T18:48:51.361+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "203844",
                    "issueId": "13042299"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13042299/worklog/203942",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #3746: ARROW-549: [C++] concatenate function\nURL: https://github.com/apache/arrow/pull/3746#discussion_r260038384\n \n \n\n ##########\n File path: cpp/src/arrow/array-test.cc\n ##########\n @@ -1764,4 +1764,53 @@ TEST(TestRechunkArraysConsistently, Plain) {\n   }\n }\n \n+// TODO this could be made much better.\n+// First, if the concatenation of addends equals the expected then\n+// the concatenation of their JSON representations must equal that of the\n+// expected array, so we only need to provide the addends as strings.\n+// More generally, Concatenate is an excellent candidate for property testing:\n+// generate random addends then concatenate them using their json repr and\n+// Concatenate, then compare.\n+struct ConcatenateParam {\n+  std::shared_ptr<Array> expected;\n+  std::vector<std::shared_ptr<Array>> addends;\n+\n+  ConcatenateParam(std::shared_ptr<DataType> expected_type,\n+                   const std::string& expected_json,\n+                   const std::vector<std::string>& addends_json)\n+      : expected(ArrayFromJSON(expected_type, expected_json)) {\n+    for (const auto& addend : addends_json) {\n+      addends.push_back(ArrayFromJSON(expected_type, addend));\n+    }\n+  }\n+};\n+\n+class ConcatenateTest : public ::testing::TestWithParam<ConcatenateParam> {\n+ public:\n+  ConcatenateTest() {}\n+};\n+\n+TEST_P(ConcatenateTest, Basics) {\n+  auto param = GetParam();\n+  std::shared_ptr<Array> actual;\n+  ASSERT_OK(Concatenate(param.addends, default_memory_pool(), &actual));\n+  AssertArraysEqual(*param.expected, *actual);\n+}\n+\n+INSTANTIATE_TEST_CASE_P(\n+    ConcatenateTest, ConcatenateTest,\n+    ::testing::Values(\n+        ConcatenateParam(int32(), \"[0, 1, 2, 3]\", {\"[0, 1]\", \"[2, 3]\"}),\n+        ConcatenateParam(float64(), \"[0, 1, 2, 3]\", {\"[0, 1]\", \"[2, 3]\"}),\n+        ConcatenateParam(uint8(), \"[0, 1, 2, 3]\", {\"[0, 1]\", \"[2, 3]\"}),\n+        ConcatenateParam(list(uint8()), \"[[], [0, 1], [2], [3]]\",\n+                         {\"[[], [0, 1]]\", \"[[2], [3]]\"}),\n+        ConcatenateParam(utf8(), R\"([\"a\", \"b\", \"c\", \"d\"])\",\n+                         {R\"([\"a\", \"b\"])\", R\"([\"c\", \"d\"])\"}),\n+        ConcatenateParam(\n+            struct_({field(\"strings\", utf8()), field(\"ints\", int64())}),\n+            R\"([{\"strings\":\"a\", \"ints\":0}, {\"strings\":\"b\", \"ints\":1}, {\"strings\":\"c\", \"ints\":2}, {\"strings\":\"d\", \"ints\":3}])\",\n+            {R\"([{\"strings\":\"a\", \"ints\":0}, {\"strings\":\"b\", \"ints\":1}])\",\n+             R\"([{\"strings\":\"c\", \"ints\":2}, {\"strings\":\"d\", \"ints\":3}])\"})));\n \n Review comment:\n   How about just writing:\r\n   \r\n   ```\r\n   CheckConcatenate(type, arrays_as_json, expected_json)\r\n   ```\r\n   \r\n   The `ConcatenateParam` seems unnecessarily elaborate to me. \r\n   \r\n   It doesn't appear that the non-zero offset cases are being tested right now, so in those cases will have to construct and slice the test arrays manually\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-25T22:25:11.792+0000",
                    "updated": "2019-02-25T22:25:11.792+0000",
                    "started": "2019-02-25T22:25:11.791+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "203942",
                    "issueId": "13042299"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13042299/worklog/203943",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #3746: ARROW-549: [C++] concatenate function\nURL: https://github.com/apache/arrow/pull/3746#discussion_r260038745\n \n \n\n ##########\n File path: cpp/src/arrow/array.cc\n ##########\n @@ -982,4 +982,284 @@ std::vector<ArrayVector> RechunkArraysConsistently(\n \n }  // namespace internal\n \n+struct ConcatenateImpl {\n \n Review comment:\n   This implementation needs a more appropriate home than array.cc. We could create a subdirectory of miscellaneous array algorithms. I don't have a strong opinion, @xhochy @pitrou @fsaintjacques @emkornfield thoughts?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-25T22:25:11.926+0000",
                    "updated": "2019-02-25T22:25:11.926+0000",
                    "started": "2019-02-25T22:25:11.925+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "203943",
                    "issueId": "13042299"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13042299/worklog/203944",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #3746: ARROW-549: [C++] concatenate function\nURL: https://github.com/apache/arrow/pull/3746#discussion_r260039292\n \n \n\n ##########\n File path: cpp/src/arrow/array.cc\n ##########\n @@ -982,4 +982,284 @@ std::vector<ArrayVector> RechunkArraysConsistently(\n \n }  // namespace internal\n \n+struct ConcatenateImpl {\n+  ConcatenateImpl(const std::vector<std::shared_ptr<ArrayData>>& in, MemoryPool* pool)\n+      : in_(in),\n+        in_size_(static_cast<int>(in.size())),\n+        lengths_(in.size()),\n+        offsets_(in.size()),\n+        pool_(pool),\n+        out_(new ArrayData) {\n+    out_->type = in[0]->type;\n+    for (int i = 0; i != in_size_; ++i) {\n+      lengths_[i] = in[i]->length;\n+      offsets_[i] = in[i]->offset;\n+      out_->length += lengths_[i];\n+      if (out_->null_count == kUnknownNullCount ||\n+          in[i]->null_count == kUnknownNullCount) {\n+        out_->null_count = kUnknownNullCount;\n+        continue;\n+      }\n+      out_->null_count += in[i]->null_count;\n+    }\n+  }\n+\n+  struct range {\n \n Review comment:\n   Add a comment what this is?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-25T22:25:11.929+0000",
                    "updated": "2019-02-25T22:25:11.929+0000",
                    "started": "2019-02-25T22:25:11.928+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "203944",
                    "issueId": "13042299"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13042299/worklog/203945",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #3746: ARROW-549: [C++] concatenate function\nURL: https://github.com/apache/arrow/pull/3746#discussion_r260044210\n \n \n\n ##########\n File path: cpp/src/arrow/array.cc\n ##########\n @@ -982,4 +982,284 @@ std::vector<ArrayVector> RechunkArraysConsistently(\n \n }  // namespace internal\n \n+struct ConcatenateImpl {\n+  ConcatenateImpl(const std::vector<std::shared_ptr<ArrayData>>& in, MemoryPool* pool)\n+      : in_(in),\n+        in_size_(static_cast<int>(in.size())),\n+        lengths_(in.size()),\n+        offsets_(in.size()),\n+        pool_(pool),\n+        out_(new ArrayData) {\n+    out_->type = in[0]->type;\n+    for (int i = 0; i != in_size_; ++i) {\n+      lengths_[i] = in[i]->length;\n+      offsets_[i] = in[i]->offset;\n+      out_->length += lengths_[i];\n+      if (out_->null_count == kUnknownNullCount ||\n+          in[i]->null_count == kUnknownNullCount) {\n+        out_->null_count = kUnknownNullCount;\n+        continue;\n+      }\n+      out_->null_count += in[i]->null_count;\n+    }\n+  }\n+\n+  struct range {\n+    range() : offset(-1), length(0) {}\n+    range(int32_t o, int32_t l) : offset(o), length(l) {}\n+    void widen_to_include(int32_t index) {\n+      if (length == 0) {\n+        offset = index;\n+        length = 1;\n+        return;\n+      }\n+      auto end = std::max(offset + length, index + 1);\n+      length = end - offset;\n+      offset = std::min(index, offset);\n+    }\n+    int32_t offset, length;\n+  };\n+\n+  Status Visit(const NullType&) { return Status::OK(); }\n+\n+  Status Visit(const BooleanType&) {\n+    std::shared_ptr<Buffer> values_buffer;\n+    RETURN_NOT_OK(ConcatenateBitmaps(1, &values_buffer));\n+    out_->buffers.push_back(values_buffer);\n+    return Status::OK();\n+  }\n+\n+  // handle numbers, decimal128, fixed_size_binary\n+  Status Visit(const FixedWidthType& fixed) {\n+    DCHECK_EQ(fixed.bit_width() % 8, 0);\n+    const int byte_width = fixed.bit_width() / 8;\n+    std::shared_ptr<Buffer> values_buffer;\n+    std::vector<std::shared_ptr<Buffer>> values_slices(in_size_);\n+    for (int i = 0; i != in_size_; ++i) {\n+      auto byte_length = byte_width * lengths_[i];\n+      auto byte_offset = byte_width * offsets_[i];\n+      values_slices[i] = SliceBuffer(in_[i]->buffers[1], byte_offset, byte_length);\n+    }\n+    RETURN_NOT_OK(arrow::Concatenate(values_slices, pool_, &values_buffer));\n+    out_->buffers.push_back(values_buffer);\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const BinaryType&) {\n+    std::shared_ptr<Buffer> values_buffer, offset_buffer;\n+    std::vector<range> value_ranges;\n+    RETURN_NOT_OK(ConcatenateOffsets(1, &offset_buffer, &value_ranges));\n+    out_->buffers.push_back(offset_buffer);\n+    std::vector<std::shared_ptr<Buffer>> values_slices(in_size_);\n+    for (int i = 0; i != in_size_; ++i) {\n+      values_slices[i] =\n+          SliceBuffer(in_[i]->buffers[2], value_ranges[i].offset, value_ranges[i].length);\n+    }\n+    RETURN_NOT_OK(arrow::Concatenate(values_slices, pool_, &values_buffer));\n+    out_->buffers.push_back(values_buffer);\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const ListType&) {\n+    std::shared_ptr<Buffer> offset_buffer;\n+    std::vector<range> value_ranges;\n+    RETURN_NOT_OK(ConcatenateOffsets(1, &offset_buffer, &value_ranges));\n+    out_->buffers.push_back(offset_buffer);\n+    std::vector<std::shared_ptr<ArrayData>> values_slices(in_size_);\n+    for (int i = 0; i != in_size_; ++i) {\n+      values_slices[i] = SliceData(*in_[i]->child_data[0], value_ranges[i].offset,\n+                                   value_ranges[i].length);\n+    }\n+    std::shared_ptr<ArrayData> values;\n+    RETURN_NOT_OK(ConcatenateImpl(values_slices, pool_).Concatenate(&values));\n+    out_->child_data = {values};\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const StructType& s) {\n+    std::vector<std::shared_ptr<ArrayData>> values_slices(in_size_);\n+    for (int field_index = 0; field_index != s.num_children(); ++field_index) {\n+      for (int i = 0; i != in_size_; ++i) {\n+        values_slices[i] =\n+            SliceData(*in_[i]->child_data[field_index], offsets_[i], lengths_[i]);\n+      }\n+      std::shared_ptr<ArrayData> values;\n+      RETURN_NOT_OK(ConcatenateImpl(values_slices, pool_).Concatenate(&values));\n+      out_->child_data.push_back(values);\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const DictionaryType& d) {\n+    std::vector<std::shared_ptr<ArrayData>> indices_slices(in_size_);\n+    for (int i = 0; i != in_size_; ++i) {\n+      indices_slices[i] = SliceData(*in_[i], offsets_[i], lengths_[i]);\n+      indices_slices[i]->type = d.index_type();\n+    }\n+    std::shared_ptr<ArrayData> indices;\n+    RETURN_NOT_OK(ConcatenateImpl(indices_slices, pool_).Concatenate(&indices));\n+    auto type = out_->type;\n+    auto null_bitmap = out_->buffers[0];\n+    out_ = indices;\n+    out_->type = type;\n+    out_->buffers[0] = null_bitmap;\n \n Review comment:\n   Seems like the null bitmap is getting concatenated twice here\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-25T22:25:11.939+0000",
                    "updated": "2019-02-25T22:25:11.939+0000",
                    "started": "2019-02-25T22:25:11.938+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "203945",
                    "issueId": "13042299"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13042299/worklog/203946",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #3746: ARROW-549: [C++] concatenate function\nURL: https://github.com/apache/arrow/pull/3746#discussion_r260040443\n \n \n\n ##########\n File path: cpp/src/arrow/array.cc\n ##########\n @@ -982,4 +982,284 @@ std::vector<ArrayVector> RechunkArraysConsistently(\n \n }  // namespace internal\n \n+struct ConcatenateImpl {\n+  ConcatenateImpl(const std::vector<std::shared_ptr<ArrayData>>& in, MemoryPool* pool)\n+      : in_(in),\n+        in_size_(static_cast<int>(in.size())),\n+        lengths_(in.size()),\n+        offsets_(in.size()),\n+        pool_(pool),\n+        out_(new ArrayData) {\n+    out_->type = in[0]->type;\n+    for (int i = 0; i != in_size_; ++i) {\n+      lengths_[i] = in[i]->length;\n+      offsets_[i] = in[i]->offset;\n+      out_->length += lengths_[i];\n+      if (out_->null_count == kUnknownNullCount ||\n+          in[i]->null_count == kUnknownNullCount) {\n+        out_->null_count = kUnknownNullCount;\n+        continue;\n+      }\n+      out_->null_count += in[i]->null_count;\n+    }\n+  }\n+\n+  struct range {\n+    range() : offset(-1), length(0) {}\n+    range(int32_t o, int32_t l) : offset(o), length(l) {}\n+    void widen_to_include(int32_t index) {\n+      if (length == 0) {\n+        offset = index;\n+        length = 1;\n+        return;\n+      }\n+      auto end = std::max(offset + length, index + 1);\n+      length = end - offset;\n+      offset = std::min(index, offset);\n+    }\n+    int32_t offset, length;\n+  };\n+\n+  Status Visit(const NullType&) { return Status::OK(); }\n+\n+  Status Visit(const BooleanType&) {\n+    std::shared_ptr<Buffer> values_buffer;\n+    RETURN_NOT_OK(ConcatenateBitmaps(1, &values_buffer));\n+    out_->buffers.push_back(values_buffer);\n+    return Status::OK();\n+  }\n+\n+  // handle numbers, decimal128, fixed_size_binary\n+  Status Visit(const FixedWidthType& fixed) {\n+    DCHECK_EQ(fixed.bit_width() % 8, 0);\n+    const int byte_width = fixed.bit_width() / 8;\n+    std::shared_ptr<Buffer> values_buffer;\n+    std::vector<std::shared_ptr<Buffer>> values_slices(in_size_);\n+    for (int i = 0; i != in_size_; ++i) {\n+      auto byte_length = byte_width * lengths_[i];\n+      auto byte_offset = byte_width * offsets_[i];\n+      values_slices[i] = SliceBuffer(in_[i]->buffers[1], byte_offset, byte_length);\n+    }\n+    RETURN_NOT_OK(arrow::Concatenate(values_slices, pool_, &values_buffer));\n+    out_->buffers.push_back(values_buffer);\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const BinaryType&) {\n+    std::shared_ptr<Buffer> values_buffer, offset_buffer;\n+    std::vector<range> value_ranges;\n+    RETURN_NOT_OK(ConcatenateOffsets(1, &offset_buffer, &value_ranges));\n+    out_->buffers.push_back(offset_buffer);\n+    std::vector<std::shared_ptr<Buffer>> values_slices(in_size_);\n+    for (int i = 0; i != in_size_; ++i) {\n+      values_slices[i] =\n+          SliceBuffer(in_[i]->buffers[2], value_ranges[i].offset, value_ranges[i].length);\n+    }\n+    RETURN_NOT_OK(arrow::Concatenate(values_slices, pool_, &values_buffer));\n+    out_->buffers.push_back(values_buffer);\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const ListType&) {\n+    std::shared_ptr<Buffer> offset_buffer;\n+    std::vector<range> value_ranges;\n+    RETURN_NOT_OK(ConcatenateOffsets(1, &offset_buffer, &value_ranges));\n+    out_->buffers.push_back(offset_buffer);\n+    std::vector<std::shared_ptr<ArrayData>> values_slices(in_size_);\n+    for (int i = 0; i != in_size_; ++i) {\n+      values_slices[i] = SliceData(*in_[i]->child_data[0], value_ranges[i].offset,\n+                                   value_ranges[i].length);\n+    }\n+    std::shared_ptr<ArrayData> values;\n+    RETURN_NOT_OK(ConcatenateImpl(values_slices, pool_).Concatenate(&values));\n+    out_->child_data = {values};\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const StructType& s) {\n+    std::vector<std::shared_ptr<ArrayData>> values_slices(in_size_);\n+    for (int field_index = 0; field_index != s.num_children(); ++field_index) {\n+      for (int i = 0; i != in_size_; ++i) {\n+        values_slices[i] =\n+            SliceData(*in_[i]->child_data[field_index], offsets_[i], lengths_[i]);\n+      }\n+      std::shared_ptr<ArrayData> values;\n+      RETURN_NOT_OK(ConcatenateImpl(values_slices, pool_).Concatenate(&values));\n+      out_->child_data.push_back(values);\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const DictionaryType& d) {\n+    std::vector<std::shared_ptr<ArrayData>> indices_slices(in_size_);\n+    for (int i = 0; i != in_size_; ++i) {\n+      indices_slices[i] = SliceData(*in_[i], offsets_[i], lengths_[i]);\n+      indices_slices[i]->type = d.index_type();\n+    }\n+    std::shared_ptr<ArrayData> indices;\n+    RETURN_NOT_OK(ConcatenateImpl(indices_slices, pool_).Concatenate(&indices));\n+    auto type = out_->type;\n+    auto null_bitmap = out_->buffers[0];\n+    out_ = indices;\n+    out_->type = type;\n+    out_->buffers[0] = null_bitmap;\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const UnionType& u) {\n+    // type_codes are an index into child_data\n+    std::vector<std::shared_ptr<Buffer>> codes_slices(in_size_);\n+    for (int i = 0; i != in_size_; ++i) {\n+      codes_slices[i] = SliceBuffer(in_[i]->buffers[1], offsets_[i], lengths_[i]);\n+    }\n+    std::shared_ptr<Buffer> codes_buffer;\n+    RETURN_NOT_OK(arrow::Concatenate(codes_slices, pool_, &codes_buffer));\n+    out_->buffers.push_back(codes_buffer);\n+    if (u.mode() == UnionMode::SPARSE) {\n+      std::vector<std::shared_ptr<ArrayData>> values_slices(in_size_);\n+      for (int field_index = 0; field_index != u.num_children(); ++field_index) {\n+        for (int i = 0; i != in_size_; ++i) {\n+          values_slices[i] =\n+              SliceData(*in_[i]->child_data[field_index], offsets_[i], lengths_[i]);\n+        }\n+        std::shared_ptr<ArrayData> values;\n+        RETURN_NOT_OK(ConcatenateImpl(values_slices, pool_).Concatenate(&values));\n+        out_->child_data.push_back(values);\n+      }\n+      out_->buffers.push_back(nullptr);\n+      return Status::OK();\n+    }\n+    DCHECK_EQ(u.mode(), UnionMode::DENSE);\n+\n+    // build mapping from (input, type_code)->the range of values actually referenced\n+    auto max_code = *std::max_element(u.type_codes().begin(), u.type_codes().end());\n+    std::vector<range> values_ranges((static_cast<int>(max_code) + 1) * in_size_);\n+    auto get_values_range = [&](int in_i, UnionArray::type_id_t code) -> range& {\n+      return values_ranges[in_i * in_size_ + code];\n+    };\n+    for (int i = 0; i != in_size_; ++i) {\n+      auto codes = in_[i]->buffers[1]->data();\n+      auto offsets = reinterpret_cast<const int32_t*>(in_[i]->buffers[2]->data());\n+      for (auto index = offsets_[i]; index != offsets_[i] + lengths_[i]; ++index) {\n+        get_values_range(i, codes[index]).widen_to_include(offsets[index]);\n+      }\n+    }\n+\n+    // for each type_code, use the min/max offset as a slice range\n+    // and concatenate sliced data for that type_code\n+    out_->child_data.resize(static_cast<int>(max_code) + 1);\n+    for (auto code : u.type_codes()) {\n+      std::vector<std::shared_ptr<ArrayData>> values_slices(in_size_);\n+      for (int i = 0; i != in_size_; ++i) {\n+        auto values_range = get_values_range(i, code);\n+        values_slices[i] = SliceData(*in_[i]->child_data[code], values_range.offset,\n+                                     values_range.length);\n+      }\n+      std::shared_ptr<ArrayData> values;\n+      RETURN_NOT_OK(ConcatenateImpl(values_slices, pool_).Concatenate(&values));\n+      out_->child_data[code] = values;\n+    }\n+\n+    // for each input array, adjust the offsets by the length of the slice\n+    // range for a given type code and the minimum offset in that input array,\n+    // so that offsets point into the concatenated values\n+    std::vector<int32_t> total_lengths(static_cast<int>(max_code) + 1, 0);\n+    std::shared_ptr<Buffer> offsets_buffer;\n+    RETURN_NOT_OK(AllocateBuffer(pool_, out_->length * sizeof(int32_t), &offsets_buffer));\n+    auto raw_offsets = reinterpret_cast<int32_t*>(offsets_buffer->mutable_data());\n+    for (int i = 0; i != in_size_; ++i) {\n+      auto codes = in_[i]->buffers[1]->data();\n+      auto offsets = reinterpret_cast<const int32_t*>(in_[i]->buffers[2]->data());\n+      for (auto index = offsets_[i]; index != offsets_[i] + lengths_[i]; ++index) {\n+        auto min_offset = get_values_range(i, codes[index]).offset;\n+        *raw_offsets++ = offsets[index] - min_offset + total_lengths[codes[index]];\n+      }\n+      for (auto code : u.type_codes()) {\n+        total_lengths[code] += get_values_range(i, code).length;\n+      }\n+    }\n+    out_->buffers.push_back(offsets_buffer);\n+    return Status::OK();\n+  }\n+\n+  Status Concatenate(std::shared_ptr<ArrayData>* out) && {\n+    std::shared_ptr<Buffer> null_bitmap;\n+    if (out_->null_count != 0) {\n+      RETURN_NOT_OK(ConcatenateBitmaps(0, &null_bitmap));\n+    }\n+    out_->buffers = {null_bitmap};\n+    RETURN_NOT_OK(VisitTypeInline(*out_->type, this));\n+    *out = std::move(out_);\n+    return Status::OK();\n+  }\n+\n+  Status ConcatenateBitmaps(int index, std::shared_ptr<Buffer>* bitmap_buffer) {\n+    RETURN_NOT_OK(AllocateBitmap(pool_, out_->length, bitmap_buffer));\n+    uint8_t* bitmap_data = (*bitmap_buffer)->mutable_data();\n+    int64_t bitmap_offset = 0;\n+    for (int i = 0; i != in_size_; ++i) {\n+      if (auto bitmap = in_[i]->buffers[0]) {\n+        internal::CopyBitmap(bitmap->data(), offsets_[i], lengths_[i], bitmap_data,\n+                             bitmap_offset);\n+      } else {\n+        BitUtil::SetBitsTo(bitmap_data, bitmap_offset, lengths_[i], true);\n+      }\n+      bitmap_offset += lengths_[i];\n+    }\n+    if (auto preceding_bits = BitUtil::kPrecedingBitmask[out_->length % 8]) {\n+      bitmap_data[out_->length / 8] &= preceding_bits;\n+    }\n+    return Status::OK();\n+  }\n+\n+  // FIXME the below assumes that the first offset in the inputs will always be 0, which\n+  // isn't necessarily correct. Accumulating first and last offsets will be necessary\n+  // because we need to slice the referenced data (child_data for lists, values_buffer for\n+  // strings)\n+  Status ConcatenateOffsets(int index, std::shared_ptr<Buffer>* offset_buffer,\n+                            std::vector<range>* ranges) {\n+    RETURN_NOT_OK(\n+        AllocateBuffer(pool_, (out_->length + 1) * sizeof(int32_t), offset_buffer));\n+    auto dst_offsets_begin = reinterpret_cast<int32_t*>((*offset_buffer)->mutable_data());\n+    int32_t values_length = 0;\n+    ranges->resize(in_size_);\n+    for (int i = 0; i != in_size_; ++i) {\n+      auto src_offsets_begin = in_[i]->GetValues<int32_t>(index) + offsets_[i];\n+      auto src_offsets_end = src_offsets_begin + lengths_[i];\n+      auto first_offset = src_offsets_begin[0];\n+      ranges->at(i).offset = first_offset;\n+      std::transform(src_offsets_begin, src_offsets_end, dst_offsets_begin,\n+                     [values_length, first_offset](int32_t offset) {\n+                       return offset - first_offset + values_length;\n+                     });\n+      auto last_offset = *src_offsets_end;\n+      ranges->at(i).length = last_offset - first_offset;\n+      values_length += last_offset - first_offset;\n+      dst_offsets_begin += lengths_[i];\n+    }\n+    *dst_offsets_begin = values_length;\n+    return Status::OK();\n+  }\n+\n+  const std::vector<std::shared_ptr<ArrayData>>& in_;\n+  int in_size_;\n+  std::vector<int64_t> lengths_, offsets_;\n+  MemoryPool* pool_;\n+  std::shared_ptr<ArrayData> out_;\n+};\n+\n+Status Concatenate(const std::vector<std::shared_ptr<Array>>& arrays, MemoryPool* pool,\n+                   std::shared_ptr<Array>* out) {\n+  DCHECK_GT(arrays.size(), 0);\n+  std::vector<std::shared_ptr<ArrayData>> data(arrays.size());\n+  for (std::size_t i = 0; i != arrays.size(); ++i) {\n+    DCHECK(arrays[i]->type()->Equals(*arrays[0]->type()));\n \n Review comment:\n   I think this should return `Invalid` if any type is unequal\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-25T22:25:11.998+0000",
                    "updated": "2019-02-25T22:25:11.998+0000",
                    "started": "2019-02-25T22:25:11.997+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "203946",
                    "issueId": "13042299"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13042299/worklog/203949",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #3746: ARROW-549: [C++] Add arrow::Concatenate function to combine multiple arrays into a single Array\nURL: https://github.com/apache/arrow/pull/3746#issuecomment-467209235\n \n \n   I think you need to define 2^31 - 1 overflow behavior for offsets (lists and binary)\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-25T22:26:20.119+0000",
                    "updated": "2019-02-25T22:26:20.119+0000",
                    "started": "2019-02-25T22:26:20.118+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "203949",
                    "issueId": "13042299"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13042299/worklog/204053",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3746: ARROW-549: [C++] Add arrow::Concatenate function to combine multiple arrays into a single Array\nURL: https://github.com/apache/arrow/pull/3746#discussion_r260117362\n \n \n\n ##########\n File path: cpp/src/arrow/array.cc\n ##########\n @@ -982,4 +982,284 @@ std::vector<ArrayVector> RechunkArraysConsistently(\n \n }  // namespace internal\n \n+struct ConcatenateImpl {\n \n Review comment:\n   under util/ might make sense for now.  We can see how many random algorithms get put here vs just used in kernels (my second choice would be under compute I suppose).\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-26T03:58:21.928+0000",
                    "updated": "2019-02-26T03:58:21.928+0000",
                    "started": "2019-02-26T03:58:21.928+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "204053",
                    "issueId": "13042299"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13042299/worklog/204596",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #3746: ARROW-549: [C++] Add arrow::Concatenate function to combine multiple arrays into a single Array\nURL: https://github.com/apache/arrow/pull/3746#discussion_r260376058\n \n \n\n ##########\n File path: cpp/src/arrow/array.cc\n ##########\n @@ -982,4 +982,284 @@ std::vector<ArrayVector> RechunkArraysConsistently(\n \n }  // namespace internal\n \n+struct ConcatenateImpl {\n \n Review comment:\n   Algorithms could be grouped under `src/arrow/array/algorithm_<category>.{h,cc}` with a single convenience header/source `src/arrow/algorithm.{h,cc}` similar to builders\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-26T16:37:57.697+0000",
                    "updated": "2019-02-26T16:37:57.697+0000",
                    "started": "2019-02-26T16:37:57.697+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "204596",
                    "issueId": "13042299"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13042299/worklog/204597",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #3746: ARROW-549: [C++] Add arrow::Concatenate function to combine multiple arrays into a single Array\nURL: https://github.com/apache/arrow/pull/3746#discussion_r260378450\n \n \n\n ##########\n File path: cpp/src/arrow/array.cc\n ##########\n @@ -982,4 +982,284 @@ std::vector<ArrayVector> RechunkArraysConsistently(\n \n }  // namespace internal\n \n+struct ConcatenateImpl {\n \n Review comment:\n   If this is all private, we should avoid convenience headers that balloon compile times.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-26T16:42:58.058+0000",
                    "updated": "2019-02-26T16:42:58.058+0000",
                    "started": "2019-02-26T16:42:58.057+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "204597",
                    "issueId": "13042299"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13042299/worklog/205280",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on issue #3746: ARROW-549: [C++] Add arrow::Concatenate function to combine multiple arrays into a single Array\nURL: https://github.com/apache/arrow/pull/3746#issuecomment-467966066\n \n \n   @fsaintjacques re property testing\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-27T18:00:17.755+0000",
                    "updated": "2019-02-27T18:00:17.755+0000",
                    "started": "2019-02-27T18:00:17.754+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "205280",
                    "issueId": "13042299"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13042299/worklog/205925",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #3746: ARROW-549: [C++] Add arrow::Concatenate function to combine multiple arrays into a single Array\nURL: https://github.com/apache/arrow/pull/3746#discussion_r261221720\n \n \n\n ##########\n File path: cpp/src/arrow/buffer.h\n ##########\n @@ -402,6 +402,17 @@ Status AllocateEmptyBitmap(MemoryPool* pool, int64_t length,\n ARROW_EXPORT\n Status AllocateEmptyBitmap(int64_t length, std::shared_ptr<Buffer>* out);\n \n+/// \\brief Concatenate multiple buffers into a single buffer\n+///\n+/// \\param[in] buffers to be concatenated\n+/// \\param[in] pool memory pool to allocate the new buffer from\n+/// \\param[out] out the concatenated buffer\n+///\n+/// \\return Status\n+ARROW_EXPORT\n+Status Concatenate(const std::vector<std::shared_ptr<Buffer>>& buffers, MemoryPool* pool,\n \n Review comment:\n   Do we want this at the top-level namespace, maybe `static Status Buffer::Concatenate(...)` or `BuffersConcatenate()`?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-28T18:48:40.548+0000",
                    "updated": "2019-02-28T18:48:40.548+0000",
                    "started": "2019-02-28T18:48:40.548+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "205925",
                    "issueId": "13042299"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13042299/worklog/205926",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #3746: ARROW-549: [C++] Add arrow::Concatenate function to combine multiple arrays into a single Array\nURL: https://github.com/apache/arrow/pull/3746#discussion_r261237262\n \n \n\n ##########\n File path: cpp/src/arrow/util/concatenate.cc\n ##########\n @@ -0,0 +1,335 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/util/concatenate.h\"\n+\n+#include <algorithm>\n+#include <limits>\n+#include <memory>\n+#include <utility>\n+#include <vector>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/memory_pool.h\"\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/util/visibility.h\"\n+#include \"arrow/visitor_inline.h\"\n+\n+namespace arrow {\n+\n+static inline ArrayData SliceData(const ArrayData& data, int64_t offset, int64_t length) {\n+  DCHECK_LE(offset, data.length);\n+  length = std::min(data.length - offset, length);\n+  offset += data.offset;\n+\n+  auto copy = data;\n+  copy.length = length;\n+  copy.offset = offset;\n+  copy.null_count = data.null_count != 0 ? kUnknownNullCount : 0;\n+  return copy;\n+}\n+\n+struct ConcatenateImpl {\n+  ConcatenateImpl(const std::vector<ArrayData>& in, MemoryPool* pool)\n+      : in_(in),\n+        in_size_(static_cast<int>(in.size())),\n+        lengths_(in.size()),\n+        offsets_(in.size()),\n+        pool_(pool) {\n+    out_.type = in[0].type;\n+    for (int i = 0; i != in_size_; ++i) {\n \n Review comment:\n   I'd appreciate if we stick with `i < in_size_`  instead of `i != in_size_`. The majority of the code base is written in that fashion. This needs to be changed in the subsequent methods.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-28T18:48:40.889+0000",
                    "updated": "2019-02-28T18:48:40.889+0000",
                    "started": "2019-02-28T18:48:40.888+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "205926",
                    "issueId": "13042299"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13042299/worklog/205927",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #3746: ARROW-549: [C++] Add arrow::Concatenate function to combine multiple arrays into a single Array\nURL: https://github.com/apache/arrow/pull/3746#discussion_r261250892\n \n \n\n ##########\n File path: cpp/src/arrow/util/concatenate.cc\n ##########\n @@ -0,0 +1,335 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/util/concatenate.h\"\n+\n+#include <algorithm>\n+#include <limits>\n+#include <memory>\n+#include <utility>\n+#include <vector>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/memory_pool.h\"\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/util/visibility.h\"\n+#include \"arrow/visitor_inline.h\"\n+\n+namespace arrow {\n+\n+static inline ArrayData SliceData(const ArrayData& data, int64_t offset, int64_t length) {\n+  DCHECK_LE(offset, data.length);\n+  length = std::min(data.length - offset, length);\n+  offset += data.offset;\n+\n+  auto copy = data;\n+  copy.length = length;\n+  copy.offset = offset;\n+  copy.null_count = data.null_count != 0 ? kUnknownNullCount : 0;\n+  return copy;\n+}\n+\n+struct ConcatenateImpl {\n+  ConcatenateImpl(const std::vector<ArrayData>& in, MemoryPool* pool)\n+      : in_(in),\n+        in_size_(static_cast<int>(in.size())),\n+        lengths_(in.size()),\n+        offsets_(in.size()),\n+        pool_(pool) {\n+    out_.type = in[0].type;\n+    for (int i = 0; i != in_size_; ++i) {\n+      lengths_[i] = in[i].length;\n+      offsets_[i] = in[i].offset;\n+      out_.length += lengths_[i];\n+      if (out_.null_count == kUnknownNullCount || in[i].null_count == kUnknownNullCount) {\n+        out_.null_count = kUnknownNullCount;\n+        continue;\n+      }\n+      out_.null_count += in[i].null_count;\n+    }\n+  }\n+\n+  /// offset, length pair for representing a range of a buffer or array\n+  struct range {\n \n Review comment:\n   Capitalize class name.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-28T18:48:41.217+0000",
                    "updated": "2019-02-28T18:48:41.217+0000",
                    "started": "2019-02-28T18:48:41.216+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "205927",
                    "issueId": "13042299"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13042299/worklog/205928",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #3746: ARROW-549: [C++] Add arrow::Concatenate function to combine multiple arrays into a single Array\nURL: https://github.com/apache/arrow/pull/3746#discussion_r261230532\n \n \n\n ##########\n File path: cpp/src/arrow/util/concatenate.cc\n ##########\n @@ -0,0 +1,335 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/util/concatenate.h\"\n+\n+#include <algorithm>\n+#include <limits>\n+#include <memory>\n+#include <utility>\n+#include <vector>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/memory_pool.h\"\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/util/visibility.h\"\n+#include \"arrow/visitor_inline.h\"\n+\n+namespace arrow {\n+\n+static inline ArrayData SliceData(const ArrayData& data, int64_t offset, int64_t length) {\n \n Review comment:\n   Does it make sense to move this in `ArrayData`?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-28T18:48:41.313+0000",
                    "updated": "2019-02-28T18:48:41.313+0000",
                    "started": "2019-02-28T18:48:41.312+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "205928",
                    "issueId": "13042299"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13042299/worklog/205929",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #3746: ARROW-549: [C++] Add arrow::Concatenate function to combine multiple arrays into a single Array\nURL: https://github.com/apache/arrow/pull/3746#discussion_r261237664\n \n \n\n ##########\n File path: cpp/src/arrow/util/concatenate.cc\n ##########\n @@ -0,0 +1,335 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/util/concatenate.h\"\n+\n+#include <algorithm>\n+#include <limits>\n+#include <memory>\n+#include <utility>\n+#include <vector>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/memory_pool.h\"\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/util/visibility.h\"\n+#include \"arrow/visitor_inline.h\"\n+\n+namespace arrow {\n+\n+static inline ArrayData SliceData(const ArrayData& data, int64_t offset, int64_t length) {\n+  DCHECK_LE(offset, data.length);\n+  length = std::min(data.length - offset, length);\n+  offset += data.offset;\n+\n+  auto copy = data;\n+  copy.length = length;\n+  copy.offset = offset;\n+  copy.null_count = data.null_count != 0 ? kUnknownNullCount : 0;\n+  return copy;\n+}\n+\n+struct ConcatenateImpl {\n+  ConcatenateImpl(const std::vector<ArrayData>& in, MemoryPool* pool)\n+      : in_(in),\n+        in_size_(static_cast<int>(in.size())),\n \n Review comment:\n   Why is this stored/cached, you could just use a private method if it's about typing it each time. Same about lengths_ and offsets_.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-28T18:48:41.440+0000",
                    "updated": "2019-02-28T18:48:41.440+0000",
                    "started": "2019-02-28T18:48:41.439+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "205929",
                    "issueId": "13042299"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13042299/worklog/205930",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #3746: ARROW-549: [C++] Add arrow::Concatenate function to combine multiple arrays into a single Array\nURL: https://github.com/apache/arrow/pull/3746#discussion_r261309634\n \n \n\n ##########\n File path: cpp/src/arrow/util/concatenate.cc\n ##########\n @@ -0,0 +1,335 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/util/concatenate.h\"\n+\n+#include <algorithm>\n+#include <limits>\n+#include <memory>\n+#include <utility>\n+#include <vector>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/memory_pool.h\"\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/util/visibility.h\"\n+#include \"arrow/visitor_inline.h\"\n+\n+namespace arrow {\n+\n+static inline ArrayData SliceData(const ArrayData& data, int64_t offset, int64_t length) {\n+  DCHECK_LE(offset, data.length);\n+  length = std::min(data.length - offset, length);\n+  offset += data.offset;\n+\n+  auto copy = data;\n+  copy.length = length;\n+  copy.offset = offset;\n+  copy.null_count = data.null_count != 0 ? kUnknownNullCount : 0;\n+  return copy;\n+}\n+\n+struct ConcatenateImpl {\n+  ConcatenateImpl(const std::vector<ArrayData>& in, MemoryPool* pool)\n+      : in_(in),\n+        in_size_(static_cast<int>(in.size())),\n+        lengths_(in.size()),\n+        offsets_(in.size()),\n+        pool_(pool) {\n+    out_.type = in[0].type;\n+    for (int i = 0; i != in_size_; ++i) {\n+      lengths_[i] = in[i].length;\n+      offsets_[i] = in[i].offset;\n+      out_.length += lengths_[i];\n+      if (out_.null_count == kUnknownNullCount || in[i].null_count == kUnknownNullCount) {\n+        out_.null_count = kUnknownNullCount;\n+        continue;\n+      }\n+      out_.null_count += in[i].null_count;\n+    }\n+  }\n+\n+  /// offset, length pair for representing a range of a buffer or array\n+  struct range {\n+    int32_t offset, length;\n+\n+    range() : offset(-1), length(0) {}\n+    range(int32_t o, int32_t l) : offset(o), length(l) {}\n+    void widen_to_include(int32_t index) {\n \n Review comment:\n   Method not used in current code.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-28T18:48:41.785+0000",
                    "updated": "2019-02-28T18:48:41.785+0000",
                    "started": "2019-02-28T18:48:41.785+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "205930",
                    "issueId": "13042299"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13042299/worklog/205931",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #3746: ARROW-549: [C++] Add arrow::Concatenate function to combine multiple arrays into a single Array\nURL: https://github.com/apache/arrow/pull/3746#discussion_r261311741\n \n \n\n ##########\n File path: cpp/src/arrow/util/concatenate.cc\n ##########\n @@ -0,0 +1,335 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/util/concatenate.h\"\n+\n+#include <algorithm>\n+#include <limits>\n+#include <memory>\n+#include <utility>\n+#include <vector>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/memory_pool.h\"\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/util/visibility.h\"\n+#include \"arrow/visitor_inline.h\"\n+\n+namespace arrow {\n+\n+static inline ArrayData SliceData(const ArrayData& data, int64_t offset, int64_t length) {\n+  DCHECK_LE(offset, data.length);\n+  length = std::min(data.length - offset, length);\n+  offset += data.offset;\n+\n+  auto copy = data;\n+  copy.length = length;\n+  copy.offset = offset;\n+  copy.null_count = data.null_count != 0 ? kUnknownNullCount : 0;\n+  return copy;\n+}\n+\n+struct ConcatenateImpl {\n+  ConcatenateImpl(const std::vector<ArrayData>& in, MemoryPool* pool)\n+      : in_(in),\n+        in_size_(static_cast<int>(in.size())),\n+        lengths_(in.size()),\n+        offsets_(in.size()),\n+        pool_(pool) {\n+    out_.type = in[0].type;\n+    for (int i = 0; i != in_size_; ++i) {\n+      lengths_[i] = in[i].length;\n+      offsets_[i] = in[i].offset;\n+      out_.length += lengths_[i];\n+      if (out_.null_count == kUnknownNullCount || in[i].null_count == kUnknownNullCount) {\n+        out_.null_count = kUnknownNullCount;\n+        continue;\n+      }\n+      out_.null_count += in[i].null_count;\n+    }\n+  }\n+\n+  /// offset, length pair for representing a range of a buffer or array\n+  struct range {\n+    int32_t offset, length;\n+\n+    range() : offset(-1), length(0) {}\n+    range(int32_t o, int32_t l) : offset(o), length(l) {}\n+    void widen_to_include(int32_t index) {\n+      if (length == 0) {\n+        offset = index;\n+        length = 1;\n+        return;\n+      }\n+      auto end = std::max(offset + length, index + 1);\n+      length = end - offset;\n+      offset = std::min(index, offset);\n+    }\n+  };\n+\n+  Status Visit(const NullType&) { return Status::OK(); }\n+\n+  Status Visit(const BooleanType&) {\n+    std::shared_ptr<Buffer> values_buffer;\n+    RETURN_NOT_OK(ConcatenateBitmaps(1, &values_buffer));\n+    out_.buffers.push_back(values_buffer);\n+    return Status::OK();\n+  }\n+\n+  // handle numbers, decimal128, fixed_size_binary\n+  Status Visit(const FixedWidthType& fixed) {\n+    DCHECK_EQ(fixed.bit_width() % 8, 0);\n+    const int byte_width = fixed.bit_width() / 8;\n+    std::shared_ptr<Buffer> values_buffer;\n+    std::vector<std::shared_ptr<Buffer>> values_slices(in_size_);\n+    for (int i = 0; i != in_size_; ++i) {\n+      auto byte_length = byte_width * lengths_[i];\n+      auto byte_offset = byte_width * offsets_[i];\n+      values_slices[i] = SliceBuffer(in_[i].buffers[1], byte_offset, byte_length);\n+    }\n+    RETURN_NOT_OK(arrow::Concatenate(values_slices, pool_, &values_buffer));\n+    out_.buffers.push_back(values_buffer);\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const BinaryType&) {\n+    std::shared_ptr<Buffer> values_buffer, offset_buffer;\n+    std::vector<range> value_ranges;\n+    RETURN_NOT_OK(ConcatenateOffsets(1, &offset_buffer, &value_ranges));\n+    out_.buffers.push_back(offset_buffer);\n+    std::vector<std::shared_ptr<Buffer>> values_slices(in_size_);\n+    for (int i = 0; i != in_size_; ++i) {\n+      values_slices[i] =\n+          SliceBuffer(in_[i].buffers[2], value_ranges[i].offset, value_ranges[i].length);\n+    }\n+    RETURN_NOT_OK(arrow::Concatenate(values_slices, pool_, &values_buffer));\n+    out_.buffers.push_back(values_buffer);\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const ListType&) {\n+    std::shared_ptr<Buffer> offset_buffer;\n+    std::vector<range> value_ranges;\n+    RETURN_NOT_OK(ConcatenateOffsets(1, &offset_buffer, &value_ranges));\n+    out_.buffers.push_back(offset_buffer);\n+    std::vector<ArrayData> values_slices(in_size_);\n+    for (int i = 0; i != in_size_; ++i) {\n+      values_slices[i] = SliceData(*in_[i].child_data[0], value_ranges[i].offset,\n+                                   value_ranges[i].length);\n+    }\n+    auto values = std::make_shared<ArrayData>();\n+    RETURN_NOT_OK(ConcatenateImpl(values_slices, pool_).Concatenate(values.get()));\n+    out_.child_data = {values};\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const StructType& s) {\n+    std::vector<ArrayData> values_slices(in_size_);\n+    for (int field_index = 0; field_index != s.num_children(); ++field_index) {\n+      for (int i = 0; i != in_size_; ++i) {\n+        values_slices[i] =\n+            SliceData(*in_[i].child_data[field_index], offsets_[i], lengths_[i]);\n+      }\n+      auto values = std::make_shared<ArrayData>();\n+      RETURN_NOT_OK(ConcatenateImpl(values_slices, pool_).Concatenate(values.get()));\n+      out_.child_data.push_back(values);\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const DictionaryType& d) {\n+    std::vector<ArrayData> indices_slices(in_size_);\n+    for (int i = 0; i != in_size_; ++i) {\n+      indices_slices[i] = ArrayData(in_[i]);\n+      indices_slices[i].type = d.index_type();\n+      // don't bother concatenating null bitmaps again\n+      indices_slices[i].null_count = 0;\n+      indices_slices[i].buffers[0] = nullptr;\n+    }\n+    ArrayData indices;\n+    RETURN_NOT_OK(ConcatenateImpl(indices_slices, pool_).Concatenate(&indices));\n+    out_.buffers.push_back(indices.buffers[1]);\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const UnionType& u) {\n+    // type_codes are an index into child_data\n+    return Status::NotImplemented(\"concatenation of \", u);\n+    /*\n+    std::vector<std::shared_ptr<Buffer>> codes_slices(in_size_);\n+    for (int i = 0; i != in_size_; ++i) {\n+      codes_slices[i] = SliceBuffer(in_[i].buffers[1], offsets_[i], lengths_[i]);\n+    }\n+    std::shared_ptr<Buffer> codes_buffer;\n+    RETURN_NOT_OK(arrow::Concatenate(codes_slices, pool_, &codes_buffer));\n+    if (u.mode() == UnionMode::SPARSE) {\n+      std::vector<ArrayData> values_slices(in_size_);\n+      for (int field_index = 0; field_index != u.num_children(); ++field_index) {\n+        for (int i = 0; i != in_size_; ++i) {\n+          values_slices[i] =\n+              SliceData(*in_[i].child_data[field_index], offsets_[i], lengths_[i]);\n+        }\n+        auto values = std::make_shared<ArrayData>();\n+        RETURN_NOT_OK(ConcatenateImpl(values_slices, pool_).Concatenate(values.get()));\n+        out_.child_data.push_back(values);\n+      }\n+      out_.buffers.push_back(nullptr);\n+      return Status::OK();\n+    }\n+    DCHECK_EQ(u.mode(), UnionMode::DENSE);\n+\n+    // build mapping from (input, type_code)->the range of values actually referenced\n+    auto max_code = *std::max_element(u.type_codes().begin(), u.type_codes().end());\n+    std::vector<range> values_ranges((static_cast<int>(max_code) + 1) * in_size_);\n+    auto get_values_range = [&](int in_i, UnionArray::type_id_t code) -> range& {\n+      return values_ranges[in_i * in_size_ + code];\n+    };\n+    for (int i = 0; i != in_size_; ++i) {\n+      auto codes = in_[i].buffers[1]->data();\n+      auto offsets = reinterpret_cast<const int32_t*>(in_[i].buffers[2]->data());\n+      for (auto index = offsets_[i]; index != offsets_[i] + lengths_[i]; ++index) {\n+        get_values_range(i, codes[index]).widen_to_include(offsets[index]);\n+      }\n+    }\n+\n+    // for each type_code, use the min/max offset as a slice range\n+    // and concatenate sliced data for that type_code\n+    out_.child_data.resize(static_cast<int>(max_code) + 1);\n+    for (auto code : u.type_codes()) {\n+      std::vector<ArrayData> values_slices(in_size_);\n+      for (int i = 0; i != in_size_; ++i) {\n+        auto values_range = get_values_range(i, code);\n+        values_slices[i] =\n+            SliceData(*in_[i].child_data[code], values_range.offset, values_range.length);\n+      }\n+      auto values = std::make_shared<ArrayData>();\n+      RETURN_NOT_OK(ConcatenateImpl(values_slices, pool_).Concatenate(values.get()));\n+      out_.child_data[code] = values;\n+    }\n+\n+    // for each input array, adjust the offsets by the length of the slice\n+    // range for a given type code and the minimum offset in that input array,\n+    // so that offsets point into the concatenated values\n+    std::vector<int32_t> total_lengths(static_cast<int>(max_code) + 1, 0);\n+    std::shared_ptr<Buffer> offsets_buffer;\n+    RETURN_NOT_OK(AllocateBuffer(pool_, out_.length * sizeof(int32_t), &offsets_buffer));\n+    auto raw_offsets = reinterpret_cast<int32_t*>(offsets_buffer->mutable_data());\n+    for (int i = 0; i != in_size_; ++i) {\n+      auto codes = in_[i].buffers[1]->data();\n+      auto offsets = reinterpret_cast<const int32_t*>(in_[i].buffers[2]->data());\n+      for (auto index = offsets_[i]; index != offsets_[i] + lengths_[i]; ++index) {\n+        auto min_offset = get_values_range(i, codes[index]).offset;\n+        *raw_offsets++ = offsets[index] - min_offset + total_lengths[codes[index]];\n+      }\n+      for (auto code : u.type_codes()) {\n+        total_lengths[code] += get_values_range(i, code).length;\n+      }\n+    }\n+    out_.buffers.push_back(offsets_buffer);\n+    return Status::OK();\n+    */\n+  }\n+\n+  Status Visit(const ExtensionType&) {\n+    // XXX can we just concatenate their storage?\n+    return Status::NotImplemented(\"concatenation of extension arrays\");\n+  }\n+\n+  Status Concatenate(ArrayData* out) && {\n+    std::shared_ptr<Buffer> null_bitmap;\n+    if (out_.null_count != 0) {\n+      RETURN_NOT_OK(ConcatenateBitmaps(0, &null_bitmap));\n+    }\n+    out_.buffers = {null_bitmap};\n+    RETURN_NOT_OK(VisitTypeInline(*out_.type, this));\n+    *out = std::move(out_);\n+    return Status::OK();\n+  }\n+\n+  Status ConcatenateBitmaps(int index, std::shared_ptr<Buffer>* bitmap_buffer) {\n+    RETURN_NOT_OK(AllocateBitmap(pool_, out_.length, bitmap_buffer));\n+    uint8_t* bitmap_data = (*bitmap_buffer)->mutable_data();\n+    int64_t bitmap_offset = 0;\n+    for (int i = 0; i != in_size_; ++i) {\n+      if (auto bitmap = in_[i].buffers[index]) {\n+        internal::CopyBitmap(bitmap->data(), offsets_[i], lengths_[i], bitmap_data,\n+                             bitmap_offset);\n+      } else {\n+        BitUtil::SetBitsTo(bitmap_data, bitmap_offset, lengths_[i], true);\n+      }\n+      bitmap_offset += lengths_[i];\n+    }\n+    if (auto preceding_bits = BitUtil::kPrecedingBitmask[out_.length % 8]) {\n+      bitmap_data[out_.length / 8] &= preceding_bits;\n \n Review comment:\n   Without any conditional `bitmap_data[out_.length / 8] &= BitUtil::kPrecedingWrappingBitmask[out_.length % 8];`\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-28T18:48:41.879+0000",
                    "updated": "2019-02-28T18:48:41.879+0000",
                    "started": "2019-02-28T18:48:41.879+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "205931",
                    "issueId": "13042299"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13042299/worklog/205932",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #3746: ARROW-549: [C++] Add arrow::Concatenate function to combine multiple arrays into a single Array\nURL: https://github.com/apache/arrow/pull/3746#discussion_r261326696\n \n \n\n ##########\n File path: cpp/src/arrow/util/concatenate.cc\n ##########\n @@ -0,0 +1,335 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/util/concatenate.h\"\n+\n+#include <algorithm>\n+#include <limits>\n+#include <memory>\n+#include <utility>\n+#include <vector>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/memory_pool.h\"\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/util/visibility.h\"\n+#include \"arrow/visitor_inline.h\"\n+\n+namespace arrow {\n+\n+static inline ArrayData SliceData(const ArrayData& data, int64_t offset, int64_t length) {\n+  DCHECK_LE(offset, data.length);\n+  length = std::min(data.length - offset, length);\n+  offset += data.offset;\n+\n+  auto copy = data;\n+  copy.length = length;\n+  copy.offset = offset;\n+  copy.null_count = data.null_count != 0 ? kUnknownNullCount : 0;\n+  return copy;\n+}\n+\n+struct ConcatenateImpl {\n+  ConcatenateImpl(const std::vector<ArrayData>& in, MemoryPool* pool)\n+      : in_(in),\n+        in_size_(static_cast<int>(in.size())),\n+        lengths_(in.size()),\n+        offsets_(in.size()),\n+        pool_(pool) {\n+    out_.type = in[0].type;\n+    for (int i = 0; i != in_size_; ++i) {\n+      lengths_[i] = in[i].length;\n+      offsets_[i] = in[i].offset;\n+      out_.length += lengths_[i];\n+      if (out_.null_count == kUnknownNullCount || in[i].null_count == kUnknownNullCount) {\n+        out_.null_count = kUnknownNullCount;\n+        continue;\n+      }\n+      out_.null_count += in[i].null_count;\n+    }\n+  }\n+\n+  /// offset, length pair for representing a range of a buffer or array\n+  struct range {\n+    int32_t offset, length;\n+\n+    range() : offset(-1), length(0) {}\n+    range(int32_t o, int32_t l) : offset(o), length(l) {}\n+    void widen_to_include(int32_t index) {\n+      if (length == 0) {\n+        offset = index;\n+        length = 1;\n+        return;\n+      }\n+      auto end = std::max(offset + length, index + 1);\n+      length = end - offset;\n+      offset = std::min(index, offset);\n+    }\n+  };\n+\n+  Status Visit(const NullType&) { return Status::OK(); }\n+\n+  Status Visit(const BooleanType&) {\n+    std::shared_ptr<Buffer> values_buffer;\n+    RETURN_NOT_OK(ConcatenateBitmaps(1, &values_buffer));\n+    out_.buffers.push_back(values_buffer);\n+    return Status::OK();\n+  }\n+\n+  // handle numbers, decimal128, fixed_size_binary\n+  Status Visit(const FixedWidthType& fixed) {\n \n Review comment:\n   I think it's worth thinning the body of such functions by separating the core algorithm and the intermediary data construction , e.g.\r\n   \r\n   ```c++\r\n   std::vector<std::shared_ptr<Buffer>> FixedValueSlicedBuffers(const FixedWidthType& fixed) {\r\n     ...\r\n   }\r\n   \r\n   Status Visit(const FixedWidthType& fixed) {\r\n     // The constructor (or top-most Visit) ensure that &out_.buffers[1] is already set\r\n     return arrow::Concatenate(ValueSlicedBuffers(fixed), pool_, &out_.buffers[1]);\r\n   }\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-28T18:48:41.897+0000",
                    "updated": "2019-02-28T18:48:41.897+0000",
                    "started": "2019-02-28T18:48:41.896+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "205932",
                    "issueId": "13042299"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13042299/worklog/205933",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #3746: ARROW-549: [C++] Add arrow::Concatenate function to combine multiple arrays into a single Array\nURL: https://github.com/apache/arrow/pull/3746#discussion_r261318506\n \n \n\n ##########\n File path: cpp/src/arrow/util/concatenate.cc\n ##########\n @@ -0,0 +1,335 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/util/concatenate.h\"\n+\n+#include <algorithm>\n+#include <limits>\n+#include <memory>\n+#include <utility>\n+#include <vector>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/memory_pool.h\"\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/util/visibility.h\"\n+#include \"arrow/visitor_inline.h\"\n+\n+namespace arrow {\n+\n+static inline ArrayData SliceData(const ArrayData& data, int64_t offset, int64_t length) {\n+  DCHECK_LE(offset, data.length);\n+  length = std::min(data.length - offset, length);\n+  offset += data.offset;\n+\n+  auto copy = data;\n+  copy.length = length;\n+  copy.offset = offset;\n+  copy.null_count = data.null_count != 0 ? kUnknownNullCount : 0;\n+  return copy;\n+}\n+\n+struct ConcatenateImpl {\n+  ConcatenateImpl(const std::vector<ArrayData>& in, MemoryPool* pool)\n+      : in_(in),\n+        in_size_(static_cast<int>(in.size())),\n+        lengths_(in.size()),\n+        offsets_(in.size()),\n+        pool_(pool) {\n+    out_.type = in[0].type;\n+    for (int i = 0; i != in_size_; ++i) {\n+      lengths_[i] = in[i].length;\n+      offsets_[i] = in[i].offset;\n+      out_.length += lengths_[i];\n+      if (out_.null_count == kUnknownNullCount || in[i].null_count == kUnknownNullCount) {\n+        out_.null_count = kUnknownNullCount;\n+        continue;\n+      }\n+      out_.null_count += in[i].null_count;\n+    }\n+  }\n+\n+  /// offset, length pair for representing a range of a buffer or array\n+  struct range {\n+    int32_t offset, length;\n+\n+    range() : offset(-1), length(0) {}\n+    range(int32_t o, int32_t l) : offset(o), length(l) {}\n+    void widen_to_include(int32_t index) {\n+      if (length == 0) {\n+        offset = index;\n+        length = 1;\n+        return;\n+      }\n+      auto end = std::max(offset + length, index + 1);\n+      length = end - offset;\n+      offset = std::min(index, offset);\n+    }\n+  };\n+\n+  Status Visit(const NullType&) { return Status::OK(); }\n+\n+  Status Visit(const BooleanType&) {\n+    std::shared_ptr<Buffer> values_buffer;\n+    RETURN_NOT_OK(ConcatenateBitmaps(1, &values_buffer));\n+    out_.buffers.push_back(values_buffer);\n+    return Status::OK();\n+  }\n+\n+  // handle numbers, decimal128, fixed_size_binary\n+  Status Visit(const FixedWidthType& fixed) {\n+    DCHECK_EQ(fixed.bit_width() % 8, 0);\n+    const int byte_width = fixed.bit_width() / 8;\n+    std::shared_ptr<Buffer> values_buffer;\n+    std::vector<std::shared_ptr<Buffer>> values_slices(in_size_);\n+    for (int i = 0; i != in_size_; ++i) {\n+      auto byte_length = byte_width * lengths_[i];\n+      auto byte_offset = byte_width * offsets_[i];\n+      values_slices[i] = SliceBuffer(in_[i].buffers[1], byte_offset, byte_length);\n+    }\n+    RETURN_NOT_OK(arrow::Concatenate(values_slices, pool_, &values_buffer));\n+    out_.buffers.push_back(values_buffer);\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const BinaryType&) {\n+    std::shared_ptr<Buffer> values_buffer, offset_buffer;\n+    std::vector<range> value_ranges;\n+    RETURN_NOT_OK(ConcatenateOffsets(1, &offset_buffer, &value_ranges));\n+    out_.buffers.push_back(offset_buffer);\n+    std::vector<std::shared_ptr<Buffer>> values_slices(in_size_);\n+    for (int i = 0; i != in_size_; ++i) {\n+      values_slices[i] =\n+          SliceBuffer(in_[i].buffers[2], value_ranges[i].offset, value_ranges[i].length);\n+    }\n+    RETURN_NOT_OK(arrow::Concatenate(values_slices, pool_, &values_buffer));\n+    out_.buffers.push_back(values_buffer);\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const ListType&) {\n+    std::shared_ptr<Buffer> offset_buffer;\n+    std::vector<range> value_ranges;\n+    RETURN_NOT_OK(ConcatenateOffsets(1, &offset_buffer, &value_ranges));\n+    out_.buffers.push_back(offset_buffer);\n+    std::vector<ArrayData> values_slices(in_size_);\n+    for (int i = 0; i != in_size_; ++i) {\n+      values_slices[i] = SliceData(*in_[i].child_data[0], value_ranges[i].offset,\n+                                   value_ranges[i].length);\n+    }\n+    auto values = std::make_shared<ArrayData>();\n+    RETURN_NOT_OK(ConcatenateImpl(values_slices, pool_).Concatenate(values.get()));\n+    out_.child_data = {values};\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const StructType& s) {\n+    std::vector<ArrayData> values_slices(in_size_);\n+    for (int field_index = 0; field_index != s.num_children(); ++field_index) {\n+      for (int i = 0; i != in_size_; ++i) {\n+        values_slices[i] =\n+            SliceData(*in_[i].child_data[field_index], offsets_[i], lengths_[i]);\n+      }\n+      auto values = std::make_shared<ArrayData>();\n+      RETURN_NOT_OK(ConcatenateImpl(values_slices, pool_).Concatenate(values.get()));\n+      out_.child_data.push_back(values);\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const DictionaryType& d) {\n+    std::vector<ArrayData> indices_slices(in_size_);\n+    for (int i = 0; i != in_size_; ++i) {\n+      indices_slices[i] = ArrayData(in_[i]);\n+      indices_slices[i].type = d.index_type();\n+      // don't bother concatenating null bitmaps again\n+      indices_slices[i].null_count = 0;\n+      indices_slices[i].buffers[0] = nullptr;\n+    }\n+    ArrayData indices;\n+    RETURN_NOT_OK(ConcatenateImpl(indices_slices, pool_).Concatenate(&indices));\n+    out_.buffers.push_back(indices.buffers[1]);\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const UnionType& u) {\n+    // type_codes are an index into child_data\n+    return Status::NotImplemented(\"concatenation of \", u);\n+    /*\n+    std::vector<std::shared_ptr<Buffer>> codes_slices(in_size_);\n+    for (int i = 0; i != in_size_; ++i) {\n+      codes_slices[i] = SliceBuffer(in_[i].buffers[1], offsets_[i], lengths_[i]);\n+    }\n+    std::shared_ptr<Buffer> codes_buffer;\n+    RETURN_NOT_OK(arrow::Concatenate(codes_slices, pool_, &codes_buffer));\n+    if (u.mode() == UnionMode::SPARSE) {\n+      std::vector<ArrayData> values_slices(in_size_);\n+      for (int field_index = 0; field_index != u.num_children(); ++field_index) {\n+        for (int i = 0; i != in_size_; ++i) {\n+          values_slices[i] =\n+              SliceData(*in_[i].child_data[field_index], offsets_[i], lengths_[i]);\n+        }\n+        auto values = std::make_shared<ArrayData>();\n+        RETURN_NOT_OK(ConcatenateImpl(values_slices, pool_).Concatenate(values.get()));\n+        out_.child_data.push_back(values);\n+      }\n+      out_.buffers.push_back(nullptr);\n+      return Status::OK();\n+    }\n+    DCHECK_EQ(u.mode(), UnionMode::DENSE);\n+\n+    // build mapping from (input, type_code)->the range of values actually referenced\n+    auto max_code = *std::max_element(u.type_codes().begin(), u.type_codes().end());\n+    std::vector<range> values_ranges((static_cast<int>(max_code) + 1) * in_size_);\n+    auto get_values_range = [&](int in_i, UnionArray::type_id_t code) -> range& {\n+      return values_ranges[in_i * in_size_ + code];\n+    };\n+    for (int i = 0; i != in_size_; ++i) {\n+      auto codes = in_[i].buffers[1]->data();\n+      auto offsets = reinterpret_cast<const int32_t*>(in_[i].buffers[2]->data());\n+      for (auto index = offsets_[i]; index != offsets_[i] + lengths_[i]; ++index) {\n+        get_values_range(i, codes[index]).widen_to_include(offsets[index]);\n+      }\n+    }\n+\n+    // for each type_code, use the min/max offset as a slice range\n+    // and concatenate sliced data for that type_code\n+    out_.child_data.resize(static_cast<int>(max_code) + 1);\n+    for (auto code : u.type_codes()) {\n+      std::vector<ArrayData> values_slices(in_size_);\n+      for (int i = 0; i != in_size_; ++i) {\n+        auto values_range = get_values_range(i, code);\n+        values_slices[i] =\n+            SliceData(*in_[i].child_data[code], values_range.offset, values_range.length);\n+      }\n+      auto values = std::make_shared<ArrayData>();\n+      RETURN_NOT_OK(ConcatenateImpl(values_slices, pool_).Concatenate(values.get()));\n+      out_.child_data[code] = values;\n+    }\n+\n+    // for each input array, adjust the offsets by the length of the slice\n+    // range for a given type code and the minimum offset in that input array,\n+    // so that offsets point into the concatenated values\n+    std::vector<int32_t> total_lengths(static_cast<int>(max_code) + 1, 0);\n+    std::shared_ptr<Buffer> offsets_buffer;\n+    RETURN_NOT_OK(AllocateBuffer(pool_, out_.length * sizeof(int32_t), &offsets_buffer));\n+    auto raw_offsets = reinterpret_cast<int32_t*>(offsets_buffer->mutable_data());\n+    for (int i = 0; i != in_size_; ++i) {\n+      auto codes = in_[i].buffers[1]->data();\n+      auto offsets = reinterpret_cast<const int32_t*>(in_[i].buffers[2]->data());\n+      for (auto index = offsets_[i]; index != offsets_[i] + lengths_[i]; ++index) {\n+        auto min_offset = get_values_range(i, codes[index]).offset;\n+        *raw_offsets++ = offsets[index] - min_offset + total_lengths[codes[index]];\n+      }\n+      for (auto code : u.type_codes()) {\n+        total_lengths[code] += get_values_range(i, code).length;\n+      }\n+    }\n+    out_.buffers.push_back(offsets_buffer);\n+    return Status::OK();\n+    */\n+  }\n+\n+  Status Visit(const ExtensionType&) {\n+    // XXX can we just concatenate their storage?\n+    return Status::NotImplemented(\"concatenation of extension arrays\");\n+  }\n+\n+  Status Concatenate(ArrayData* out) && {\n+    std::shared_ptr<Buffer> null_bitmap;\n+    if (out_.null_count != 0) {\n+      RETURN_NOT_OK(ConcatenateBitmaps(0, &null_bitmap));\n+    }\n+    out_.buffers = {null_bitmap};\n+    RETURN_NOT_OK(VisitTypeInline(*out_.type, this));\n+    *out = std::move(out_);\n+    return Status::OK();\n+  }\n+\n+  Status ConcatenateBitmaps(int index, std::shared_ptr<Buffer>* bitmap_buffer) {\n \n Review comment:\n   I think I'd prefer seeing `std::vector<std::shared_ptr<Buffer>>` instead of `int index` even if it involves one more array and shared_ptr copies. This would mean you can extract ConcatenateBitmaps in bit-utils.h\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-28T18:48:41.981+0000",
                    "updated": "2019-02-28T18:48:41.981+0000",
                    "started": "2019-02-28T18:48:41.981+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "205933",
                    "issueId": "13042299"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 42000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@10131227[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@35a6c45c[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@13c05665[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@10c7e465[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4421a2fa[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@84ffd1a[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@19adf108[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@3666ca94[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7f1998d0[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@8c90d04[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7e1a88a4[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@7ea8df99[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 42000,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Mar 20 19:55:54 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-03-20T19:55:54.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-549/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2017-02-11T15:56:18.000+0000",
        "updated": "2019-03-20T19:56:02.000+0000",
        "timeoriginalestimate": null,
        "description": "A la \n\n{{Status arrow::Concatenate(const std::vector<std::shared_ptr<Array>>& arrays, MemoryPool* pool, std::shared_ptr<Array>* out)}}",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "11h 40m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 42000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Add function to concatenate like-typed arrays",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13042299/comment/15985665",
                    "id": "15985665",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Marked for 0.4. We'll be needing this before too long",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2017-04-26T22:25:09.165+0000",
                    "updated": "2017-04-26T22:25:09.165+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13042299/comment/16158786",
                    "id": "16158786",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "This will be useful soon enough in {{arrow::compute}}",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2017-09-08T15:20:26.811+0000",
                    "updated": "2017-09-08T15:20:26.811+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13042299/comment/16796718",
                    "id": "16796718",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "I'm moving this to 0.14 so we aren't stressing about getting the patch merged for 0.13, since we aren't blocking on this feature for anything yet",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-03-20T02:28:59.229+0000",
                    "updated": "2019-03-20T02:28:59.229+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13042299/comment/16797498",
                    "id": "16797498",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 3746\n[https://github.com/apache/arrow/pull/3746]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2019-03-20T19:55:54.426+0000",
                    "updated": "2019-03-20T19:55:54.426+0000"
                }
            ],
            "maxResults": 4,
            "total": 4,
            "startAt": 0
        },
        "customfield_12311820": "0|i39y6n:",
        "customfield_12314139": null
    }
}