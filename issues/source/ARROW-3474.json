{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13190392",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190392",
    "key": "ARROW-3474",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343858",
                "id": "12343858",
                "description": "",
                "name": "0.12.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-01-20"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
            "name": "Minor",
            "id": "4"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343066",
                "id": "12343066",
                "description": "",
                "name": "0.11.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-10-08"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=brostykus",
            "name": "brostykus",
            "key": "brostykus",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34055",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34055",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34055",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34055"
            },
            "displayName": "Benoit Rostykus",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12332430",
                "id": "12332430",
                "name": "GLib"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=brostykus",
            "name": "brostykus",
            "key": "brostykus",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34055",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34055",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34055",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34055"
            },
            "displayName": "Benoit Rostykus",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=brostykus",
            "name": "brostykus",
            "key": "brostykus",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34055",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34055",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34055",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34055"
            },
            "displayName": "Benoit Rostykus",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 7200,
            "total": 7200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 7200,
            "total": 7200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3474/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 18,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190392/worklog/152703",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rostyboost opened a new pull request #2736: ARROW-3474: [GLib] Extend gparquet API with get_schema and read_column\nURL: https://github.com/apache/arrow/pull/2736\n \n \n   So we can read individual columns without loading the whole parquet file in memory, we need to surface the getSchema and ReadColumn functions of parquet-cpp to the parquet glib API.\r\n   \r\n   Originally submitted [here](https://github.com/red-data-tools/parquet-glib/pull/2) before the inclusion of parquet-glib to Arrow.\r\n   \r\n   cc @kou \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-09T15:07:27.902+0000",
                    "updated": "2018-10-09T15:07:27.902+0000",
                    "started": "2018-10-09T15:07:27.902+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "152703",
                    "issueId": "13190392"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190392/worklog/152712",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on a change in pull request #2736: ARROW-3474: [GLib] Extend gparquet API with get_schema and read_column\nURL: https://github.com/apache/arrow/pull/2736#discussion_r223748147\n \n \n\n ##########\n File path: c_glib/parquet-glib/arrow-file-reader.cpp\n ##########\n @@ -213,6 +213,64 @@ gparquet_arrow_file_reader_read_table(GParquetArrowFileReader *reader,\n   }\n }\n \n+/**\n+ * gparquet_arrow_file_reader_get_schema:\n+ * @reader: A #GParquetArrowFileReader.\n+ * @error: (nullable): Return locatipcn for a #GError or %NULL.\n+ *\n+ * Returns: (transfer full) (nullable): A read #GArrowSchema.\n+ *\n+ * Since: 1.0.0\n+ */\n+GArrowSchema *\n+gparquet_arrow_file_reader_get_schema(GParquetArrowFileReader *reader,\n+                                      GError **error)\n+{\n+  auto parquet_arrow_file_reader = gparquet_arrow_file_reader_get_raw(reader);\n+  std::shared_ptr<arrow::Schema> arrow_schema;\n+\n+  std::vector<int> indices(parquet_arrow_file_reader->parquet_reader()->metadata()->num_columns());\n+  for (size_t i = 0; i < indices.size(); ++i) {\n+    indices[i] = static_cast<int>(i);\n+  }\n+\n+  auto status = parquet_arrow_file_reader->GetSchema(indices, &arrow_schema);\n+  if (garrow_error_check(error, status, \"[arrow][file-reader][get-schema]\")) {\n+    return garrow_schema_new_raw(&arrow_schema);\n+  } else {\n+    return NULL;\n+  }\n+}\n+\n+/**\n+ * gparquet_arrow_file_reader_read_column:\n+ * @reader: A #GParquetArrowFileReader.\n+ * @schema: A #GArrowSchema.\n+ * @col_index: Index integer of the column to be read.\n+ * @error: (nullable): Return locatipcn for a #GError or %NULL.\n+ *\n+ * Returns: (transfer full) (nullable): A read #GArrowColumn.\n+ *\n+ * Since: 1.0.0\n+ */\n+GArrowColumn *\n+gparquet_arrow_file_reader_read_column(GParquetArrowFileReader *reader,\n+                                      GArrowSchema* schema,\n \n Review comment:\n   It seems that one space indent is missing.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-09T15:26:25.442+0000",
                    "updated": "2018-10-09T15:26:25.442+0000",
                    "started": "2018-10-09T15:26:25.442+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "152712",
                    "issueId": "13190392"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190392/worklog/152713",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on a change in pull request #2736: ARROW-3474: [GLib] Extend gparquet API with get_schema and read_column\nURL: https://github.com/apache/arrow/pull/2736#discussion_r223746081\n \n \n\n ##########\n File path: c_glib/parquet-glib/arrow-file-reader.cpp\n ##########\n @@ -213,6 +213,64 @@ gparquet_arrow_file_reader_read_table(GParquetArrowFileReader *reader,\n   }\n }\n \n+/**\n+ * gparquet_arrow_file_reader_get_schema:\n+ * @reader: A #GParquetArrowFileReader.\n+ * @error: (nullable): Return locatipcn for a #GError or %NULL.\n+ *\n+ * Returns: (transfer full) (nullable): A read #GArrowSchema.\n+ *\n+ * Since: 1.0.0\n \n Review comment:\n   Can you use `0.12.0` instead of `1.0.0`?\r\n   Because we use the same version of Apache Arrow.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-09T15:26:25.454+0000",
                    "updated": "2018-10-09T15:26:25.454+0000",
                    "started": "2018-10-09T15:26:25.453+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "152713",
                    "issueId": "13190392"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190392/worklog/152714",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on a change in pull request #2736: ARROW-3474: [GLib] Extend gparquet API with get_schema and read_column\nURL: https://github.com/apache/arrow/pull/2736#discussion_r223748498\n \n \n\n ##########\n File path: c_glib/parquet-glib/arrow-file-reader.cpp\n ##########\n @@ -213,6 +213,64 @@ gparquet_arrow_file_reader_read_table(GParquetArrowFileReader *reader,\n   }\n }\n \n+/**\n+ * gparquet_arrow_file_reader_get_schema:\n+ * @reader: A #GParquetArrowFileReader.\n+ * @error: (nullable): Return locatipcn for a #GError or %NULL.\n+ *\n+ * Returns: (transfer full) (nullable): A read #GArrowSchema.\n+ *\n+ * Since: 1.0.0\n+ */\n+GArrowSchema *\n+gparquet_arrow_file_reader_get_schema(GParquetArrowFileReader *reader,\n+                                      GError **error)\n+{\n+  auto parquet_arrow_file_reader = gparquet_arrow_file_reader_get_raw(reader);\n+  std::shared_ptr<arrow::Schema> arrow_schema;\n+\n+  std::vector<int> indices(parquet_arrow_file_reader->parquet_reader()->metadata()->num_columns());\n+  for (size_t i = 0; i < indices.size(); ++i) {\n+    indices[i] = static_cast<int>(i);\n+  }\n+\n+  auto status = parquet_arrow_file_reader->GetSchema(indices, &arrow_schema);\n+  if (garrow_error_check(error, status, \"[arrow][file-reader][get-schema]\")) {\n+    return garrow_schema_new_raw(&arrow_schema);\n+  } else {\n+    return NULL;\n+  }\n+}\n+\n+/**\n+ * gparquet_arrow_file_reader_read_column:\n+ * @reader: A #GParquetArrowFileReader.\n+ * @schema: A #GArrowSchema.\n+ * @col_index: Index integer of the column to be read.\n+ * @error: (nullable): Return locatipcn for a #GError or %NULL.\n+ *\n+ * Returns: (transfer full) (nullable): A read #GArrowColumn.\n+ *\n+ * Since: 1.0.0\n+ */\n+GArrowColumn *\n+gparquet_arrow_file_reader_read_column(GParquetArrowFileReader *reader,\n+                                      GArrowSchema* schema,\n \n Review comment:\n   Can you use `GArrowSchema *schema` instead of `GArrowSchema* schema`? (Put `*` to variable name size.)\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-09T15:26:25.464+0000",
                    "updated": "2018-10-09T15:26:25.464+0000",
                    "started": "2018-10-09T15:26:25.464+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "152714",
                    "issueId": "13190392"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190392/worklog/152715",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on a change in pull request #2736: ARROW-3474: [GLib] Extend gparquet API with get_schema and read_column\nURL: https://github.com/apache/arrow/pull/2736#discussion_r223747323\n \n \n\n ##########\n File path: c_glib/parquet-glib/arrow-file-reader.cpp\n ##########\n @@ -213,6 +213,64 @@ gparquet_arrow_file_reader_read_table(GParquetArrowFileReader *reader,\n   }\n }\n \n+/**\n+ * gparquet_arrow_file_reader_get_schema:\n+ * @reader: A #GParquetArrowFileReader.\n+ * @error: (nullable): Return locatipcn for a #GError or %NULL.\n+ *\n+ * Returns: (transfer full) (nullable): A read #GArrowSchema.\n+ *\n+ * Since: 1.0.0\n+ */\n+GArrowSchema *\n+gparquet_arrow_file_reader_get_schema(GParquetArrowFileReader *reader,\n+                                      GError **error)\n+{\n+  auto parquet_arrow_file_reader = gparquet_arrow_file_reader_get_raw(reader);\n+  std::shared_ptr<arrow::Schema> arrow_schema;\n+\n+  std::vector<int> indices(parquet_arrow_file_reader->parquet_reader()->metadata()->num_columns());\n+  for (size_t i = 0; i < indices.size(); ++i) {\n+    indices[i] = static_cast<int>(i);\n+  }\n+\n+  auto status = parquet_arrow_file_reader->GetSchema(indices, &arrow_schema);\n+  if (garrow_error_check(error, status, \"[arrow][file-reader][get-schema]\")) {\n \n Review comment:\n   Can you use `[parquet][arrow]...` here?\r\n   We changed to add `[parquet]...` to error message.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-09T15:26:25.487+0000",
                    "updated": "2018-10-09T15:26:25.487+0000",
                    "started": "2018-10-09T15:26:25.486+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "152715",
                    "issueId": "13190392"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190392/worklog/152716",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on a change in pull request #2736: ARROW-3474: [GLib] Extend gparquet API with get_schema and read_column\nURL: https://github.com/apache/arrow/pull/2736#discussion_r223748744\n \n \n\n ##########\n File path: c_glib/parquet-glib/arrow-file-reader.cpp\n ##########\n @@ -213,6 +213,64 @@ gparquet_arrow_file_reader_read_table(GParquetArrowFileReader *reader,\n   }\n }\n \n+/**\n+ * gparquet_arrow_file_reader_get_schema:\n+ * @reader: A #GParquetArrowFileReader.\n+ * @error: (nullable): Return locatipcn for a #GError or %NULL.\n+ *\n+ * Returns: (transfer full) (nullable): A read #GArrowSchema.\n+ *\n+ * Since: 1.0.0\n+ */\n+GArrowSchema *\n+gparquet_arrow_file_reader_get_schema(GParquetArrowFileReader *reader,\n+                                      GError **error)\n+{\n+  auto parquet_arrow_file_reader = gparquet_arrow_file_reader_get_raw(reader);\n+  std::shared_ptr<arrow::Schema> arrow_schema;\n+\n+  std::vector<int> indices(parquet_arrow_file_reader->parquet_reader()->metadata()->num_columns());\n+  for (size_t i = 0; i < indices.size(); ++i) {\n+    indices[i] = static_cast<int>(i);\n+  }\n+\n+  auto status = parquet_arrow_file_reader->GetSchema(indices, &arrow_schema);\n+  if (garrow_error_check(error, status, \"[arrow][file-reader][get-schema]\")) {\n+    return garrow_schema_new_raw(&arrow_schema);\n+  } else {\n+    return NULL;\n+  }\n+}\n+\n+/**\n+ * gparquet_arrow_file_reader_read_column:\n+ * @reader: A #GParquetArrowFileReader.\n+ * @schema: A #GArrowSchema.\n+ * @col_index: Index integer of the column to be read.\n+ * @error: (nullable): Return locatipcn for a #GError or %NULL.\n+ *\n+ * Returns: (transfer full) (nullable): A read #GArrowColumn.\n+ *\n+ * Since: 1.0.0\n+ */\n+GArrowColumn *\n+gparquet_arrow_file_reader_read_column(GParquetArrowFileReader *reader,\n+                                      GArrowSchema* schema,\n+                                      gint col_index,\n+                                      GError **error)\n+{\n+  auto parquet_arrow_file_reader = gparquet_arrow_file_reader_get_raw(reader);\n+  std::shared_ptr<arrow::Array> arrow_array;\n+  auto status = parquet_arrow_file_reader->ReadColumn(col_index, &arrow_array);\n+  if (garrow_error_check(error, status, \"[arrow][file-reader][read-column]\")) {\n \n Review comment:\n   `[parquet][arrow]...`.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-09T15:26:25.586+0000",
                    "updated": "2018-10-09T15:26:25.586+0000",
                    "started": "2018-10-09T15:26:25.586+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "152716",
                    "issueId": "13190392"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190392/worklog/152717",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on a change in pull request #2736: ARROW-3474: [GLib] Extend gparquet API with get_schema and read_column\nURL: https://github.com/apache/arrow/pull/2736#discussion_r223750392\n \n \n\n ##########\n File path: c_glib/parquet-glib/arrow-file-reader.cpp\n ##########\n @@ -213,6 +213,64 @@ gparquet_arrow_file_reader_read_table(GParquetArrowFileReader *reader,\n   }\n }\n \n+/**\n+ * gparquet_arrow_file_reader_get_schema:\n+ * @reader: A #GParquetArrowFileReader.\n+ * @error: (nullable): Return locatipcn for a #GError or %NULL.\n+ *\n+ * Returns: (transfer full) (nullable): A read #GArrowSchema.\n+ *\n+ * Since: 1.0.0\n+ */\n+GArrowSchema *\n+gparquet_arrow_file_reader_get_schema(GParquetArrowFileReader *reader,\n+                                      GError **error)\n+{\n+  auto parquet_arrow_file_reader = gparquet_arrow_file_reader_get_raw(reader);\n+  std::shared_ptr<arrow::Schema> arrow_schema;\n+\n+  std::vector<int> indices(parquet_arrow_file_reader->parquet_reader()->metadata()->num_columns());\n+  for (size_t i = 0; i < indices.size(); ++i) {\n+    indices[i] = static_cast<int>(i);\n+  }\n+\n+  auto status = parquet_arrow_file_reader->GetSchema(indices, &arrow_schema);\n+  if (garrow_error_check(error, status, \"[arrow][file-reader][get-schema]\")) {\n+    return garrow_schema_new_raw(&arrow_schema);\n+  } else {\n+    return NULL;\n+  }\n+}\n+\n+/**\n+ * gparquet_arrow_file_reader_read_column:\n+ * @reader: A #GParquetArrowFileReader.\n+ * @schema: A #GArrowSchema.\n+ * @col_index: Index integer of the column to be read.\n+ * @error: (nullable): Return locatipcn for a #GError or %NULL.\n+ *\n+ * Returns: (transfer full) (nullable): A read #GArrowColumn.\n+ *\n+ * Since: 1.0.0\n+ */\n+GArrowColumn *\n+gparquet_arrow_file_reader_read_column(GParquetArrowFileReader *reader,\n+                                      GArrowSchema* schema,\n+                                      gint col_index,\n+                                      GError **error)\n+{\n+  auto parquet_arrow_file_reader = gparquet_arrow_file_reader_get_raw(reader);\n+  std::shared_ptr<arrow::Array> arrow_array;\n+  auto status = parquet_arrow_file_reader->ReadColumn(col_index, &arrow_array);\n+  if (garrow_error_check(error, status, \"[arrow][file-reader][read-column]\")) {\n+    auto garrow_array = garrow_array_new_raw(&arrow_array);\n+    auto field = garrow_schema_get_field(schema, col_index);\n+    return garrow_column_new_array(field, garrow_array);\n \n Review comment:\n   We decrement references of `garrow_array` and `field` before returning function:\r\n   \r\n   ```c\r\n   auto array = garrow_array_new_raw(&arrow_array);\r\n   auto field = garrow_schema_get_field(schema, column_index);\r\n   auto column = garrow_column_new_array(field, array);\r\n   g_object_unref(array);\r\n   g_object_unref(field);\r\n   return column;\r\n   ```\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-09T15:26:25.598+0000",
                    "updated": "2018-10-09T15:26:25.598+0000",
                    "started": "2018-10-09T15:26:25.597+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "152717",
                    "issueId": "13190392"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190392/worklog/152718",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on a change in pull request #2736: ARROW-3474: [GLib] Extend gparquet API with get_schema and read_column\nURL: https://github.com/apache/arrow/pull/2736#discussion_r223747868\n \n \n\n ##########\n File path: c_glib/parquet-glib/arrow-file-reader.cpp\n ##########\n @@ -213,6 +213,64 @@ gparquet_arrow_file_reader_read_table(GParquetArrowFileReader *reader,\n   }\n }\n \n+/**\n+ * gparquet_arrow_file_reader_get_schema:\n+ * @reader: A #GParquetArrowFileReader.\n+ * @error: (nullable): Return locatipcn for a #GError or %NULL.\n+ *\n+ * Returns: (transfer full) (nullable): A read #GArrowSchema.\n+ *\n+ * Since: 1.0.0\n+ */\n+GArrowSchema *\n+gparquet_arrow_file_reader_get_schema(GParquetArrowFileReader *reader,\n+                                      GError **error)\n+{\n+  auto parquet_arrow_file_reader = gparquet_arrow_file_reader_get_raw(reader);\n+  std::shared_ptr<arrow::Schema> arrow_schema;\n+\n+  std::vector<int> indices(parquet_arrow_file_reader->parquet_reader()->metadata()->num_columns());\n+  for (size_t i = 0; i < indices.size(); ++i) {\n+    indices[i] = static_cast<int>(i);\n+  }\n+\n+  auto status = parquet_arrow_file_reader->GetSchema(indices, &arrow_schema);\n+  if (garrow_error_check(error, status, \"[arrow][file-reader][get-schema]\")) {\n+    return garrow_schema_new_raw(&arrow_schema);\n+  } else {\n+    return NULL;\n+  }\n+}\n+\n+/**\n+ * gparquet_arrow_file_reader_read_column:\n+ * @reader: A #GParquetArrowFileReader.\n+ * @schema: A #GArrowSchema.\n+ * @col_index: Index integer of the column to be read.\n \n Review comment:\n   Can you use `column_index` instead of `col_index`?\r\n   Normally, we don't use abbreviated name.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-09T15:26:25.601+0000",
                    "updated": "2018-10-09T15:26:25.601+0000",
                    "started": "2018-10-09T15:26:25.600+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "152718",
                    "issueId": "13190392"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190392/worklog/152719",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on a change in pull request #2736: ARROW-3474: [GLib] Extend gparquet API with get_schema and read_column\nURL: https://github.com/apache/arrow/pull/2736#discussion_r223748002\n \n \n\n ##########\n File path: c_glib/parquet-glib/arrow-file-reader.cpp\n ##########\n @@ -213,6 +213,64 @@ gparquet_arrow_file_reader_read_table(GParquetArrowFileReader *reader,\n   }\n }\n \n+/**\n+ * gparquet_arrow_file_reader_get_schema:\n+ * @reader: A #GParquetArrowFileReader.\n+ * @error: (nullable): Return locatipcn for a #GError or %NULL.\n+ *\n+ * Returns: (transfer full) (nullable): A read #GArrowSchema.\n+ *\n+ * Since: 1.0.0\n+ */\n+GArrowSchema *\n+gparquet_arrow_file_reader_get_schema(GParquetArrowFileReader *reader,\n+                                      GError **error)\n+{\n+  auto parquet_arrow_file_reader = gparquet_arrow_file_reader_get_raw(reader);\n+  std::shared_ptr<arrow::Schema> arrow_schema;\n+\n+  std::vector<int> indices(parquet_arrow_file_reader->parquet_reader()->metadata()->num_columns());\n+  for (size_t i = 0; i < indices.size(); ++i) {\n+    indices[i] = static_cast<int>(i);\n+  }\n+\n+  auto status = parquet_arrow_file_reader->GetSchema(indices, &arrow_schema);\n+  if (garrow_error_check(error, status, \"[arrow][file-reader][get-schema]\")) {\n+    return garrow_schema_new_raw(&arrow_schema);\n+  } else {\n+    return NULL;\n+  }\n+}\n+\n+/**\n+ * gparquet_arrow_file_reader_read_column:\n+ * @reader: A #GParquetArrowFileReader.\n+ * @schema: A #GArrowSchema.\n+ * @col_index: Index integer of the column to be read.\n+ * @error: (nullable): Return locatipcn for a #GError or %NULL.\n+ *\n+ * Returns: (transfer full) (nullable): A read #GArrowColumn.\n+ *\n+ * Since: 1.0.0\n \n Review comment:\n   `1.0.0` -> `0.12.0`.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-09T15:26:25.608+0000",
                    "updated": "2018-10-09T15:26:25.608+0000",
                    "started": "2018-10-09T15:26:25.608+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "152719",
                    "issueId": "13190392"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190392/worklog/152720",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on a change in pull request #2736: ARROW-3474: [GLib] Extend gparquet API with get_schema and read_column\nURL: https://github.com/apache/arrow/pull/2736#discussion_r223748637\n \n \n\n ##########\n File path: c_glib/parquet-glib/arrow-file-reader.cpp\n ##########\n @@ -213,6 +213,64 @@ gparquet_arrow_file_reader_read_table(GParquetArrowFileReader *reader,\n   }\n }\n \n+/**\n+ * gparquet_arrow_file_reader_get_schema:\n+ * @reader: A #GParquetArrowFileReader.\n+ * @error: (nullable): Return locatipcn for a #GError or %NULL.\n+ *\n+ * Returns: (transfer full) (nullable): A read #GArrowSchema.\n+ *\n+ * Since: 1.0.0\n+ */\n+GArrowSchema *\n+gparquet_arrow_file_reader_get_schema(GParquetArrowFileReader *reader,\n+                                      GError **error)\n+{\n+  auto parquet_arrow_file_reader = gparquet_arrow_file_reader_get_raw(reader);\n+  std::shared_ptr<arrow::Schema> arrow_schema;\n+\n+  std::vector<int> indices(parquet_arrow_file_reader->parquet_reader()->metadata()->num_columns());\n+  for (size_t i = 0; i < indices.size(); ++i) {\n+    indices[i] = static_cast<int>(i);\n+  }\n+\n+  auto status = parquet_arrow_file_reader->GetSchema(indices, &arrow_schema);\n+  if (garrow_error_check(error, status, \"[arrow][file-reader][get-schema]\")) {\n+    return garrow_schema_new_raw(&arrow_schema);\n+  } else {\n+    return NULL;\n+  }\n+}\n+\n+/**\n+ * gparquet_arrow_file_reader_read_column:\n+ * @reader: A #GParquetArrowFileReader.\n+ * @schema: A #GArrowSchema.\n+ * @col_index: Index integer of the column to be read.\n+ * @error: (nullable): Return locatipcn for a #GError or %NULL.\n+ *\n+ * Returns: (transfer full) (nullable): A read #GArrowColumn.\n+ *\n+ * Since: 1.0.0\n+ */\n+GArrowColumn *\n+gparquet_arrow_file_reader_read_column(GParquetArrowFileReader *reader,\n+                                      GArrowSchema* schema,\n+                                      gint col_index,\n \n Review comment:\n   `col_index` -> `column_index`.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-09T15:26:25.625+0000",
                    "updated": "2018-10-09T15:26:25.625+0000",
                    "started": "2018-10-09T15:26:25.624+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "152720",
                    "issueId": "13190392"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190392/worklog/152721",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on a change in pull request #2736: ARROW-3474: [GLib] Extend gparquet API with get_schema and read_column\nURL: https://github.com/apache/arrow/pull/2736#discussion_r223750492\n \n \n\n ##########\n File path: c_glib/parquet-glib/arrow-file-reader.h\n ##########\n @@ -45,6 +45,14 @@ GArrowTable *\n gparquet_arrow_file_reader_read_table(GParquetArrowFileReader *reader,\n                                       GError **error);\n \n+GArrowSchema *gparquet_arrow_file_reader_get_schema(GParquetArrowFileReader *reader,\n+                                                   GError **error);\n \n Review comment:\n   A space indent is missing?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-09T15:26:25.632+0000",
                    "updated": "2018-10-09T15:26:25.632+0000",
                    "started": "2018-10-09T15:26:25.632+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "152721",
                    "issueId": "13190392"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190392/worklog/152722",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on a change in pull request #2736: ARROW-3474: [GLib] Extend gparquet API with get_schema and read_column\nURL: https://github.com/apache/arrow/pull/2736#discussion_r223750574\n \n \n\n ##########\n File path: c_glib/parquet-glib/arrow-file-reader.h\n ##########\n @@ -45,6 +45,14 @@ GArrowTable *\n gparquet_arrow_file_reader_read_table(GParquetArrowFileReader *reader,\n                                       GError **error);\n \n+GArrowSchema *gparquet_arrow_file_reader_get_schema(GParquetArrowFileReader *reader,\n+                                                   GError **error);\n+\n+GArrowColumn *gparquet_arrow_file_reader_read_column(GParquetArrowFileReader *reader,\n+                                                   GArrowSchema* schema,\n \n Review comment:\n   Two space indents are missing?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-09T15:26:25.640+0000",
                    "updated": "2018-10-09T15:26:25.640+0000",
                    "started": "2018-10-09T15:26:25.632+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "152722",
                    "issueId": "13190392"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190392/worklog/152723",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on a change in pull request #2736: ARROW-3474: [GLib] Extend gparquet API with get_schema and read_column\nURL: https://github.com/apache/arrow/pull/2736#discussion_r223749885\n \n \n\n ##########\n File path: c_glib/parquet-glib/arrow-file-reader.cpp\n ##########\n @@ -213,6 +213,64 @@ gparquet_arrow_file_reader_read_table(GParquetArrowFileReader *reader,\n   }\n }\n \n+/**\n+ * gparquet_arrow_file_reader_get_schema:\n+ * @reader: A #GParquetArrowFileReader.\n+ * @error: (nullable): Return locatipcn for a #GError or %NULL.\n+ *\n+ * Returns: (transfer full) (nullable): A read #GArrowSchema.\n+ *\n+ * Since: 1.0.0\n+ */\n+GArrowSchema *\n+gparquet_arrow_file_reader_get_schema(GParquetArrowFileReader *reader,\n+                                      GError **error)\n+{\n+  auto parquet_arrow_file_reader = gparquet_arrow_file_reader_get_raw(reader);\n+  std::shared_ptr<arrow::Schema> arrow_schema;\n+\n+  std::vector<int> indices(parquet_arrow_file_reader->parquet_reader()->metadata()->num_columns());\n+  for (size_t i = 0; i < indices.size(); ++i) {\n+    indices[i] = static_cast<int>(i);\n+  }\n+\n+  auto status = parquet_arrow_file_reader->GetSchema(indices, &arrow_schema);\n+  if (garrow_error_check(error, status, \"[arrow][file-reader][get-schema]\")) {\n+    return garrow_schema_new_raw(&arrow_schema);\n+  } else {\n+    return NULL;\n+  }\n+}\n+\n+/**\n+ * gparquet_arrow_file_reader_read_column:\n+ * @reader: A #GParquetArrowFileReader.\n+ * @schema: A #GArrowSchema.\n+ * @col_index: Index integer of the column to be read.\n+ * @error: (nullable): Return locatipcn for a #GError or %NULL.\n+ *\n+ * Returns: (transfer full) (nullable): A read #GArrowColumn.\n+ *\n+ * Since: 1.0.0\n+ */\n+GArrowColumn *\n+gparquet_arrow_file_reader_read_column(GParquetArrowFileReader *reader,\n+                                      GArrowSchema* schema,\n+                                      gint col_index,\n+                                      GError **error)\n+{\n+  auto parquet_arrow_file_reader = gparquet_arrow_file_reader_get_raw(reader);\n+  std::shared_ptr<arrow::Array> arrow_array;\n+  auto status = parquet_arrow_file_reader->ReadColumn(col_index, &arrow_array);\n+  if (garrow_error_check(error, status, \"[arrow][file-reader][read-column]\")) {\n+    auto garrow_array = garrow_array_new_raw(&arrow_array);\n \n Review comment:\n   `garrow_` prefix is needless.\r\n   We don't use prefix for `GArrow*` and `GParquet*` objects. We use prefix for Arrow C++ objects.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-09T15:26:25.649+0000",
                    "updated": "2018-10-09T15:26:25.649+0000",
                    "started": "2018-10-09T15:26:25.648+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "152723",
                    "issueId": "13190392"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190392/worklog/152724",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on a change in pull request #2736: ARROW-3474: [GLib] Extend gparquet API with get_schema and read_column\nURL: https://github.com/apache/arrow/pull/2736#discussion_r223746993\n \n \n\n ##########\n File path: c_glib/parquet-glib/arrow-file-reader.cpp\n ##########\n @@ -213,6 +213,64 @@ gparquet_arrow_file_reader_read_table(GParquetArrowFileReader *reader,\n   }\n }\n \n+/**\n+ * gparquet_arrow_file_reader_get_schema:\n+ * @reader: A #GParquetArrowFileReader.\n+ * @error: (nullable): Return locatipcn for a #GError or %NULL.\n+ *\n+ * Returns: (transfer full) (nullable): A read #GArrowSchema.\n+ *\n+ * Since: 1.0.0\n+ */\n+GArrowSchema *\n+gparquet_arrow_file_reader_get_schema(GParquetArrowFileReader *reader,\n+                                      GError **error)\n+{\n+  auto parquet_arrow_file_reader = gparquet_arrow_file_reader_get_raw(reader);\n+  std::shared_ptr<arrow::Schema> arrow_schema;\n \n Review comment:\n   Can you move this declaration to the above line of `...getSchema(indices, &arrow_schema)` to close declaration and the first used code?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-09T15:26:25.650+0000",
                    "updated": "2018-10-09T15:26:25.650+0000",
                    "started": "2018-10-09T15:26:25.649+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "152724",
                    "issueId": "13190392"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190392/worklog/152994",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on issue #2736: ARROW-3474: [GLib] Extend gparquet API with get_schema and read_column\nURL: https://github.com/apache/arrow/pull/2736#issuecomment-428397794\n \n \n   Thanks!\r\n   I noticed that `garrow_column_new_array()` has a bug that doesn't refer arguments. I'll push fix for the problem to this branch and merge this pull request. Please wait a while.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-10T00:30:34.281+0000",
                    "updated": "2018-10-10T00:30:34.281+0000",
                    "started": "2018-10-10T00:30:34.280+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "152994",
                    "issueId": "13190392"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190392/worklog/153369",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on issue #2736: ARROW-3474: [GLib] Extend gparquet API with get_schema and read_column\nURL: https://github.com/apache/arrow/pull/2736#issuecomment-428799074\n \n \n   CI is passed. I'll merge this.\r\n   \r\n   I noticed that we can't use passed schema with `ReadColumn()`. Because the schema may not have all columns. So I changed to read the target field in `gparquet_arrow_file_reader_read_column()`.\r\n   \r\n   I added one more API to `gparquet_arrow_file_reader_select_schema()` that accepts column indices. We can also add `gparquet_arrow_file_reader_select_table()` that also accepts column indices.\r\n   \r\n   I cleaned up tests. We can add more tests easily.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-11T02:39:33.772+0000",
                    "updated": "2018-10-11T02:39:33.772+0000",
                    "started": "2018-10-11T02:39:33.772+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "153369",
                    "issueId": "13190392"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190392/worklog/153370",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou closed pull request #2736: ARROW-3474: [GLib] Extend gparquet API with get_schema and read_column\nURL: https://github.com/apache/arrow/pull/2736\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/c_glib/arrow-glib/column.cpp b/c_glib/arrow-glib/column.cpp\nindex 55d06ea9ee..22c7ab8c2e 100644\n--- a/c_glib/arrow-glib/column.cpp\n+++ b/c_glib/arrow-glib/column.cpp\n@@ -39,49 +39,84 @@ G_BEGIN_DECLS\n \n typedef struct GArrowColumnPrivate_ {\n   std::shared_ptr<arrow::Column> column;\n+  GArrowField *field;\n+  GArrowArray *array;\n+  GArrowChunkedArray *chunked_array;\n } GArrowColumnPrivate;\n \n enum {\n   PROP_0,\n-  PROP_COLUMN\n+  PROP_COLUMN,\n+  PROP_FIELD,\n+  PROP_ARRAY,\n+  PROP_CHUNKED_ARRAY\n };\n \n G_DEFINE_TYPE_WITH_PRIVATE(GArrowColumn,\n                            garrow_column,\n                            G_TYPE_OBJECT)\n \n-#define GARROW_COLUMN_GET_PRIVATE(obj)                  \\\n-  (G_TYPE_INSTANCE_GET_PRIVATE((obj),                   \\\n-                               GARROW_TYPE_COLUMN,      \\\n-                               GArrowColumnPrivate))\n+#define GARROW_COLUMN_GET_PRIVATE(object)          \\\n+  static_cast<GArrowColumnPrivate *>(              \\\n+    garrow_column_get_instance_private(            \\\n+      GARROW_COLUMN(object)))\n \n static void\n garrow_column_dispose(GObject *object)\n {\n-  GArrowColumnPrivate *priv;\n+  auto priv = GARROW_COLUMN_GET_PRIVATE(object);\n \n-  priv = GARROW_COLUMN_GET_PRIVATE(object);\n+  if (priv->field) {\n+    g_object_unref(priv->field);\n+    priv->field = nullptr;\n+  }\n \n-  priv->column = nullptr;\n+  if (priv->array) {\n+    g_object_unref(priv->array);\n+    priv->array = nullptr;\n+  }\n+\n+  if (priv->chunked_array) {\n+    g_object_unref(priv->chunked_array);\n+    priv->chunked_array = nullptr;\n+  }\n \n   G_OBJECT_CLASS(garrow_column_parent_class)->dispose(object);\n }\n \n+static void\n+garrow_column_finalize(GObject *object)\n+{\n+  auto priv = GARROW_COLUMN_GET_PRIVATE(object);\n+\n+  priv->column = nullptr;\n+\n+  G_OBJECT_CLASS(garrow_column_parent_class)->finalize(object);\n+}\n+\n static void\n garrow_column_set_property(GObject *object,\n                            guint prop_id,\n                            const GValue *value,\n                            GParamSpec *pspec)\n {\n-  GArrowColumnPrivate *priv;\n-\n-  priv = GARROW_COLUMN_GET_PRIVATE(object);\n+  auto priv = GARROW_COLUMN_GET_PRIVATE(object);\n \n   switch (prop_id) {\n   case PROP_COLUMN:\n     priv->column =\n       *static_cast<std::shared_ptr<arrow::Column> *>(g_value_get_pointer(value));\n     break;\n+  case PROP_FIELD:\n+    priv->field = static_cast<GArrowField *>(g_value_dup_object(value));\n+    break;\n+  case PROP_ARRAY:\n+    priv->array = static_cast<GArrowArray *>(g_value_dup_object(value));\n+    break;\n+  case PROP_CHUNKED_ARRAY:\n+    priv->chunked_array =\n+      static_cast<GArrowChunkedArray *>(g_value_dup_object(value));\n+    break;\n   default:\n     G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n     break;\n@@ -94,7 +129,18 @@ garrow_column_get_property(GObject *object,\n                            GValue *value,\n                            GParamSpec *pspec)\n {\n+  auto priv = GARROW_COLUMN_GET_PRIVATE(object);\n+\n   switch (prop_id) {\n+  case PROP_FIELD:\n+    g_value_set_object(value, priv->field);\n+    break;\n+  case PROP_ARRAY:\n+    g_value_set_object(value, priv->array);\n+    break;\n+  case PROP_CHUNKED_ARRAY:\n+    g_value_set_object(value, priv->chunked_array);\n+    break;\n   default:\n     G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n     break;\n@@ -109,21 +155,44 @@ garrow_column_init(GArrowColumn *object)\n static void\n garrow_column_class_init(GArrowColumnClass *klass)\n {\n-  GObjectClass *gobject_class;\n-  GParamSpec *spec;\n-\n-  gobject_class = G_OBJECT_CLASS(klass);\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n \n   gobject_class->dispose      = garrow_column_dispose;\n+  gobject_class->finalize     = garrow_column_finalize;\n   gobject_class->set_property = garrow_column_set_property;\n   gobject_class->get_property = garrow_column_get_property;\n \n+  GParamSpec *spec;\n   spec = g_param_spec_pointer(\"column\",\n                               \"Column\",\n                               \"The raw std::shared<arrow::Column> *\",\n                               static_cast<GParamFlags>(G_PARAM_WRITABLE |\n                                                        G_PARAM_CONSTRUCT_ONLY));\n   g_object_class_install_property(gobject_class, PROP_COLUMN, spec);\n+\n+  spec = g_param_spec_object(\"field\",\n+                             \"Field\",\n+                             \"The field of the column\",\n+                             GARROW_TYPE_FIELD,\n+                             static_cast<GParamFlags>(G_PARAM_READWRITE |\n+                                                      G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_FIELD, spec);\n+\n+  spec = g_param_spec_object(\"array\",\n+                             \"Array\",\n+                             \"The array of the column\",\n+                             GARROW_TYPE_ARRAY,\n+                             static_cast<GParamFlags>(G_PARAM_READWRITE |\n+                                                      G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_ARRAY, spec);\n+\n+  spec = g_param_spec_object(\"chunked-array\",\n+                             \"Chunked array\",\n+                             \"The chunked array of the column\",\n+                             GARROW_TYPE_CHUNKED_ARRAY,\n+                             static_cast<GParamFlags>(G_PARAM_READWRITE |\n+                                                      G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_CHUNKED_ARRAY, spec);\n }\n \n /**\n@@ -140,7 +209,12 @@ garrow_column_new_array(GArrowField *field,\n   auto arrow_column =\n     std::make_shared<arrow::Column>(garrow_field_get_raw(field),\n                                     garrow_array_get_raw(array));\n-  return garrow_column_new_raw(&arrow_column);\n+  auto column = GARROW_COLUMN(g_object_new(GARROW_TYPE_COLUMN,\n+                                           \"column\", &arrow_column,\n+                                           \"field\", field,\n+                                           \"array\", array,\n+                                           NULL));\n+  return column;\n }\n \n /**\n@@ -157,7 +231,12 @@ garrow_column_new_chunked_array(GArrowField *field,\n   auto arrow_column =\n     std::make_shared<arrow::Column>(garrow_field_get_raw(field),\n                                     garrow_chunked_array_get_raw(chunked_array));\n-  return garrow_column_new_raw(&arrow_column);\n+  auto column = GARROW_COLUMN(g_object_new(GARROW_TYPE_COLUMN,\n+                                           \"column\", &arrow_column,\n+                                           \"field\", field,\n+                                           \"chunked-array\", chunked_array,\n+                                           NULL));\n+  return column;\n }\n \n /**\n@@ -233,9 +312,15 @@ garrow_column_get_n_nulls(GArrowColumn *column)\n GArrowField *\n garrow_column_get_field(GArrowColumn *column)\n {\n-  const auto arrow_column = garrow_column_get_raw(column);\n-  auto arrow_field = arrow_column->field();\n-  return garrow_field_new_raw(&arrow_field);\n+  auto priv = GARROW_COLUMN_GET_PRIVATE(column);\n+  if (priv->field) {\n+    g_object_ref(priv->field);\n+    return priv->field;\n+  } else {\n+    const auto arrow_column = garrow_column_get_raw(column);\n+    auto arrow_field = arrow_column->field();\n+    return garrow_field_new_raw(&arrow_field);\n+  }\n }\n \n /**\n@@ -293,8 +378,6 @@ garrow_column_new_raw(std::shared_ptr<arrow::Column> *arrow_column)\n std::shared_ptr<arrow::Column>\n garrow_column_get_raw(GArrowColumn *column)\n {\n-  GArrowColumnPrivate *priv;\n-\n-  priv = GARROW_COLUMN_GET_PRIVATE(column);\n+  auto priv = GARROW_COLUMN_GET_PRIVATE(column);\n   return priv->column;\n }\ndiff --git a/c_glib/parquet-glib/arrow-file-reader.cpp b/c_glib/parquet-glib/arrow-file-reader.cpp\nindex 07aa8295d0..398e85b02c 100644\n--- a/c_glib/parquet-glib/arrow-file-reader.cpp\n+++ b/c_glib/parquet-glib/arrow-file-reader.cpp\n@@ -25,6 +25,8 @@\n \n #include <parquet-glib/arrow-file-reader.hpp>\n \n+#include <parquet/file_reader.h>\n+\n G_BEGIN_DECLS\n \n /**\n@@ -213,6 +215,114 @@ gparquet_arrow_file_reader_read_table(GParquetArrowFileReader *reader,\n   }\n }\n \n+/**\n+ * gparquet_arrow_file_reader_get_schema:\n+ * @reader: A #GParquetArrowFileReader.\n+ * @error: (nullable): Return locatipcn for a #GError or %NULL.\n+ *\n+ * Returns: (transfer full) (nullable): A got #GArrowSchema.\n+ *\n+ * Since: 0.12.0\n+ */\n+GArrowSchema *\n+gparquet_arrow_file_reader_get_schema(GParquetArrowFileReader *reader,\n+                                      GError **error)\n+{\n+  auto parquet_arrow_file_reader = gparquet_arrow_file_reader_get_raw(reader);\n+\n+  const auto n_columns =\n+    parquet_arrow_file_reader->parquet_reader()->metadata()->num_columns();\n+  std::vector<int> indices(n_columns);\n+  for (int i = 0; i < n_columns; ++i) {\n+    indices[i] = i;\n+  }\n+\n+  std::shared_ptr<arrow::Schema> arrow_schema;\n+  auto status = parquet_arrow_file_reader->GetSchema(indices, &arrow_schema);\n+  if (garrow_error_check(error,\n+                         status,\n+                         \"[parquet][arrow][file-reader][get-schema]\")) {\n+    return garrow_schema_new_raw(&arrow_schema);\n+  } else {\n+    return NULL;\n+  }\n+}\n+\n+/**\n+ * gparquet_arrow_file_reader_select_schema:\n+ * @reader: A #GParquetArrowFileReader.\n+ * @column_indexes: (array length=n_column_indexes):\n+ *   The array of column indexes to be selected\n+ * @n_column_indexes: The length of `column_indexes`.\n+ * @error: (nullable): Return locatipcn for a #GError or %NULL.\n+ *\n+ * Returns: (transfer full) (nullable): A selected #GArrowSchema.\n+ *\n+ * Since: 0.12.0\n+ */\n+GArrowSchema *\n+gparquet_arrow_file_reader_select_schema(GParquetArrowFileReader *reader,\n+                                         gint *column_indexes,\n+                                         gsize n_column_indexes,\n+                                         GError **error)\n+{\n+  auto parquet_arrow_file_reader = gparquet_arrow_file_reader_get_raw(reader);\n+\n+  std::vector<int> indices(n_column_indexes);\n+  for (gsize i = 0; i < n_column_indexes; ++i) {\n+    indices[i] = column_indexes[i];\n+  }\n+\n+  std::shared_ptr<arrow::Schema> arrow_schema;\n+  auto status = parquet_arrow_file_reader->GetSchema(indices, &arrow_schema);\n+  if (garrow_error_check(error,\n+                         status,\n+                         \"[parquet][arrow][file-reader][select-schema]\")) {\n+    return garrow_schema_new_raw(&arrow_schema);\n+  } else {\n+    return NULL;\n+  }\n+}\n+\n+/**\n+ * gparquet_arrow_file_reader_read_column:\n+ * @reader: A #GParquetArrowFileReader.\n+ * @column_index: Index integer of the column to be read.\n+ * @error: (nullable): Return locatipcn for a #GError or %NULL.\n+ *\n+ * Returns: (transfer full) (nullable): A read #GArrowColumn.\n+ *\n+ * Since: 0.12.0\n+ */\n+GArrowColumn *\n+gparquet_arrow_file_reader_read_column(GParquetArrowFileReader *reader,\n+                                       gint column_index,\n+                                       GError **error)\n+{\n+  auto parquet_arrow_file_reader = gparquet_arrow_file_reader_get_raw(reader);\n+\n+  std::vector<int> indices = {column_index};\n+  std::shared_ptr<arrow::Schema> arrow_schema;\n+  auto status = parquet_arrow_file_reader->GetSchema(indices, &arrow_schema);\n+  if (!garrow_error_check(error,\n+                          status,\n+                          \"[parquet][arrow][file-reader][read-column][get-schema]\")) {\n+    return NULL;\n+  }\n+\n+  std::shared_ptr<arrow::Array> arrow_array;\n+  status = parquet_arrow_file_reader->ReadColumn(column_index, &arrow_array);\n+  if (!garrow_error_check(error,\n+                          status,\n+                          \"[parquet][arrow][file-reader][read-column]\")) {\n+    return NULL;\n+  }\n+\n+  auto arrow_field = arrow_schema->field(0);\n+  auto arrow_column = std::make_shared<arrow::Column>(arrow_field, arrow_array);\n+  return garrow_column_new_raw(&arrow_column);\n+}\n+\n /**\n  * gparquet_arrow_file_reader_get_n_row_groups:\n  * @reader: A #GParquetArrowFileReader.\ndiff --git a/c_glib/parquet-glib/arrow-file-reader.h b/c_glib/parquet-glib/arrow-file-reader.h\nindex 5aa2aa62ab..c251dcd037 100644\n--- a/c_glib/parquet-glib/arrow-file-reader.h\n+++ b/c_glib/parquet-glib/arrow-file-reader.h\n@@ -45,6 +45,20 @@ GArrowTable *\n gparquet_arrow_file_reader_read_table(GParquetArrowFileReader *reader,\n                                       GError **error);\n \n+GArrowSchema *\n+gparquet_arrow_file_reader_get_schema(GParquetArrowFileReader *reader,\n+                                      GError **error);\n+GArrowSchema *\n+gparquet_arrow_file_reader_select_schema(GParquetArrowFileReader *reader,\n+                                         gint *column_indexes,\n+                                         gsize n_column_indexes,\n+                                         GError **error);\n+\n+GArrowColumn *\n+gparquet_arrow_file_reader_read_column(GParquetArrowFileReader *reader,\n+                                       gint column_index,\n+                                       GError **error);\n+\n gint\n gparquet_arrow_file_reader_get_n_row_groups(GParquetArrowFileReader *reader);\n \ndiff --git a/c_glib/test/parquet/test-arrow-file-reader.rb b/c_glib/test/parquet/test-arrow-file-reader.rb\nnew file mode 100644\nindex 0000000000..96574542a4\n--- /dev/null\n+++ b/c_glib/test/parquet/test-arrow-file-reader.rb\n@@ -0,0 +1,76 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+class TestParquetArrowFileReader < Test::Unit::TestCase\n+  include Helper::Buildable\n+\n+  def setup\n+    omit(\"Parquet is required\") unless defined?(::Parquet)\n+    @file = Tempfile.open([\"data\", \".parquet\"])\n+    @a_array = build_string_array([\"foo\", \"bar\"])\n+    @b_array = build_int32_array([123, 456])\n+    @table = build_table(\"a\" => @a_array,\n+                         \"b\" => @b_array)\n+    writer = Parquet::ArrowFileWriter.new(@table.schema, @file.path)\n+    chunk_size = 2\n+    writer.write_table(@table, chunk_size)\n+    writer.close\n+    @reader = Parquet::ArrowFileReader.new(@file.path)\n+  end\n+\n+  def test_schema\n+    assert_equal(<<-SCHEMA.chomp, @reader.schema.to_s)\n+a: string\n+b: int32\n+    SCHEMA\n+  end\n+\n+  def test_select_schema\n+    assert_equal(<<-SCHEMA.chomp, @reader.select_schema([0]).to_s)\n+a: string\n+    SCHEMA\n+    assert_equal(<<-SCHEMA.chomp, @reader.select_schema([1]).to_s)\n+b: int32\n+    SCHEMA\n+    assert_equal(<<-SCHEMA.chomp, @reader.select_schema([0, 1]).to_s)\n+a: string\n+b: int32\n+    SCHEMA\n+  end\n+\n+  def test_read_column\n+    a = @reader.read_column(0)\n+    assert_equal([\n+                   \"a: string\",\n+                   Arrow::ChunkedArray.new([@a_array]).to_s,\n+                 ],\n+                 [\n+                   a.field.to_s,\n+                   a.data.to_s,\n+                 ])\n+\n+    b = @reader.read_column(1)\n+    assert_equal([\n+                   \"b: int32\",\n+                   Arrow::ChunkedArray.new([@b_array]).to_s,\n+                 ],\n+                 [\n+                   b.field.to_s,\n+                   b.data.to_s,\n+                 ])\n+  end\n+end\ndiff --git a/c_glib/test/parquet/test-arrow.rb b/c_glib/test/parquet/test-arrow-file-writer.rb\nsimilarity index 65%\nrename from c_glib/test/parquet/test-arrow.rb\nrename to c_glib/test/parquet/test-arrow-file-writer.rb\nindex de021df438..d6c775e9d0 100644\n--- a/c_glib/test/parquet/test-arrow.rb\n+++ b/c_glib/test/parquet/test-arrow-file-writer.rb\n@@ -15,35 +15,27 @@\n # specific language governing permissions and limitations\n # under the License.\n \n-class TestParquetArrow < Test::Unit::TestCase\n+class TestParquetArrowFileWriter < Test::Unit::TestCase\n   include Helper::Buildable\n \n   def setup\n     omit(\"Parquet is required\") unless defined?(::Parquet)\n+    @file = Tempfile.open([\"data\", \".parquet\"])\n   end\n \n-  def test_read_write\n-    tempfile = Tempfile.open([\"data\", \".parquet\"])\n-\n-    values = [true, nil, false, true]\n+  def test_write\n+    enabled_values = [true, nil, false, true]\n+    table = build_table(\"enabled\" => build_boolean_array(enabled_values))\n     chunk_size = 2\n \n-    field = Arrow::Field.new(\"enabled\", Arrow::BooleanDataType.new)\n-    schema = Arrow::Schema.new([field])\n-    writer = Parquet::ArrowFileWriter.new(schema, tempfile.path)\n-    begin\n-      columns = [\n-        Arrow::Column.new(field, build_boolean_array(values)),\n-      ]\n-      table = Arrow::Table.new(schema, columns)\n-      writer.write_table(table, chunk_size)\n-    ensure\n-      writer.close\n-    end\n+    writer = Parquet::ArrowFileWriter.new(table.schema, @file.path)\n+    writer.write_table(table, chunk_size)\n+    writer.close\n \n-    reader = Parquet::ArrowFileReader.new(tempfile.path)\n+    reader = Parquet::ArrowFileReader.new(@file.path)\n     reader.use_threads = true\n-    assert_equal(chunk_size, reader.n_row_groups)\n+    assert_equal(enabled_values.length / chunk_size, reader.n_row_groups)\n+    table = reader.read_table\n     table = reader.read_table\n     table_data = table.n_columns.times.collect do |i|\n       column = table.get_column(i)\n@@ -59,6 +51,6 @@ def test_read_write\n       end\n       [column.name, data]\n     end\n-    assert_equal([[\"enabled\", values]], table_data)\n+    assert_equal([[\"enabled\", enabled_values]], table_data)\n   end\n end\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-11T02:40:35.832+0000",
                    "updated": "2018-10-11T02:40:35.832+0000",
                    "started": "2018-10-11T02:40:35.831+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "153370",
                    "issueId": "13190392"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190392/worklog/153372",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on issue #2736: ARROW-3474: [GLib] Extend gparquet API with get_schema and read_column\nURL: https://github.com/apache/arrow/pull/2736#issuecomment-428799374\n \n \n   I've merged. Thanks @rostyboost!\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-11T02:41:06.005+0000",
                    "updated": "2018-10-11T02:41:06.005+0000",
                    "started": "2018-10-11T02:41:06.004+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "153372",
                    "issueId": "13190392"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 7200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@51990000[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5b7c5e6e[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4a8633e8[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@73309bf8[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4a29b0df[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@2c4d5bf2[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@572f34e0[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@20378aa6[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@279f7937[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@614b34fd[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4fed9400[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@539355e1[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 7200,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Oct 11 02:40:24 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-10-11T02:40:24.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3474/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2018-10-09T15:05:59.000+0000",
        "updated": "2018-10-11T02:41:06.000+0000",
        "timeoriginalestimate": null,
        "description": "So we can read individual columns without loading the whole parquet file in memory, we need to surface the getSchema and ReadColumn functions of parquet-cpp to the parquet glib API.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 7200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[GLib] Extend gparquet API with get_schema and read_column",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190392/comment/16645871",
                    "id": "16645871",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
                        "name": "kou",
                        "key": "kou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
                        },
                        "displayName": "Kouhei Sutou",
                        "active": true,
                        "timeZone": "Asia/Tokyo"
                    },
                    "body": "Issue resolved by pull request 2736\n[https://github.com/apache/arrow/pull/2736]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
                        "name": "kou",
                        "key": "kou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
                        },
                        "displayName": "Kouhei Sutou",
                        "active": true,
                        "timeZone": "Asia/Tokyo"
                    },
                    "created": "2018-10-11T02:40:24.252+0000",
                    "updated": "2018-10-11T02:40:24.252+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|i3yzsv:",
        "customfield_12314139": null
    }
}