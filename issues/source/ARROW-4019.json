{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13204243",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13204243",
    "key": "ARROW-4019",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343858",
                "id": "12343858",
                "description": "",
                "name": "0.12.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-01-20"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12344316",
                "id": "12344316",
                "name": "0.11.1",
                "archived": false,
                "released": true,
                "releaseDate": "2018-10-23"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "aggregateprogress": {
            "progress": 4200,
            "total": 4200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 4200,
            "total": 4200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-4019/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 7,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13204243/worklog/174887",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou opened a new pull request #3168: ARROW-4019: [C++] Fix Coverity issues\nURL: https://github.com/apache/arrow/pull/3168\n \n \n   This fixes a number of issues found by Coverity.\r\n   \r\n   Other issues are benign, or need to be tackled separately.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-13T14:05:01.592+0000",
                    "updated": "2018-12-13T14:05:01.592+0000",
                    "started": "2018-12-13T14:05:01.591+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "174887",
                    "issueId": "13204243"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13204243/worklog/174908",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #3168: ARROW-4019: [C++] Fix Coverity issues\nURL: https://github.com/apache/arrow/pull/3168#issuecomment-446996304\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/3168?src=pr&el=h1) Report\n   > Merging [#3168](https://codecov.io/gh/apache/arrow/pull/3168?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/1882a0727ba275fbced9ed0754c5fe99f841bed4?src=pr&el=desc) will **increase** coverage by `20.11%`.\n   > The diff coverage is `100%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/3168/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/3168?src=pr&el=tree)\n   \n   ```diff\n   @@             Coverage Diff             @@\n   ##           master    #3168       +/-   ##\n   ===========================================\n   + Coverage      68%   88.11%   +20.11%     \n   ===========================================\n     Files          58      437      +379     \n     Lines        3766    65933    +62167     \n   ===========================================\n   + Hits         2561    58099    +55538     \n   - Misses       1108     7834     +6726     \n   + Partials       97        0       -97\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/3168?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [cpp/src/arrow/util/logging.h](https://codecov.io/gh/apache/arrow/pull/3168/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL2xvZ2dpbmcuaA==) | `60% <\u00f8> (\u00f8)` | |\n   | [cpp/src/arrow/util/rle-encoding.h](https://codecov.io/gh/apache/arrow/pull/3168/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL3JsZS1lbmNvZGluZy5o) | `97.75% <\u00f8> (\u00f8)` | |\n   | [cpp/src/arrow/ipc/json.cc](https://codecov.io/gh/apache/arrow/pull/3168/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9pcGMvanNvbi5jYw==) | `98.41% <100%> (\u00f8)` | |\n   | [cpp/src/arrow/util/decimal.cc](https://codecov.io/gh/apache/arrow/pull/3168/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL2RlY2ltYWwuY2M=) | `88.17% <100%> (\u00f8)` | |\n   | [cpp/src/arrow/io/file-test.cc](https://codecov.io/gh/apache/arrow/pull/3168/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9pby9maWxlLXRlc3QuY2M=) | `94.84% <100%> (\u00f8)` | |\n   | [cpp/src/arrow/ipc/json-integration-test.cc](https://codecov.io/gh/apache/arrow/pull/3168/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9pcGMvanNvbi1pbnRlZ3JhdGlvbi10ZXN0LmNj) | `86.3% <100%> (\u00f8)` | |\n   | [cpp/src/arrow/io/test-common.h](https://codecov.io/gh/apache/arrow/pull/3168/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9pby90ZXN0LWNvbW1vbi5o) | `97.29% <100%> (\u00f8)` | |\n   | [cpp/src/arrow/io/buffered-test.cc](https://codecov.io/gh/apache/arrow/pull/3168/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9pby9idWZmZXJlZC10ZXN0LmNj) | `100% <100%> (\u00f8)` | |\n   | [cpp/src/arrow/ipc/writer.cc](https://codecov.io/gh/apache/arrow/pull/3168/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9pcGMvd3JpdGVyLmNj) | `92.78% <100%> (\u00f8)` | |\n   | [cpp/src/arrow/array.h](https://codecov.io/gh/apache/arrow/pull/3168/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9hcnJheS5o) | `99.21% <100%> (\u00f8)` | |\n   | ... and [498 more](https://codecov.io/gh/apache/arrow/pull/3168/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/3168?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/3168?src=pr&el=footer). Last update [1882a07...6311aa9](https://codecov.io/gh/apache/arrow/pull/3168?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-13T14:54:14.638+0000",
                    "updated": "2018-12-13T14:54:14.638+0000",
                    "started": "2018-12-13T14:54:14.637+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "174908",
                    "issueId": "13204243"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13204243/worklog/174912",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on a change in pull request #3168: ARROW-4019: [C++] Fix Coverity issues\nURL: https://github.com/apache/arrow/pull/3168#discussion_r241433342\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernel.h\n ##########\n @@ -78,6 +79,14 @@ struct ARROW_EXPORT Datum {\n \n   Datum(const Datum& other) noexcept { this->value = other.value; }\n \n+  // Define move constructor and move assignment, for better performance\n \n Review comment:\n   can't you do the equivalent with `= default`?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-13T15:04:51.100+0000",
                    "updated": "2018-12-13T15:04:51.100+0000",
                    "started": "2018-12-13T15:04:51.100+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "174912",
                    "issueId": "13204243"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13204243/worklog/174921",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #3168: ARROW-4019: [C++] Fix Coverity issues\nURL: https://github.com/apache/arrow/pull/3168#discussion_r241440572\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernel.h\n ##########\n @@ -78,6 +79,14 @@ struct ARROW_EXPORT Datum {\n \n   Datum(const Datum& other) noexcept { this->value = other.value; }\n \n+  // Define move constructor and move assignment, for better performance\n \n Review comment:\n   I had thought so, too -- don't structs have a default move ctor and assignment without explicit declaration?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-13T15:21:16.569+0000",
                    "updated": "2018-12-13T15:21:16.569+0000",
                    "started": "2018-12-13T15:21:16.568+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "174921",
                    "issueId": "13204243"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13204243/worklog/174922",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #3168: ARROW-4019: [C++] Fix Coverity issues\nURL: https://github.com/apache/arrow/pull/3168#discussion_r241443179\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernel.h\n ##########\n @@ -78,6 +79,14 @@ struct ARROW_EXPORT Datum {\n \n   Datum(const Datum& other) noexcept { this->value = other.value; }\n \n+  // Define move constructor and move assignment, for better performance\n \n Review comment:\n   I'm not sure `= default` would add the `noexcept` declaration (with the current state of the variant backport it seems it wouldn't). I'm not sure that's a concern.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-13T15:27:28.305+0000",
                    "updated": "2018-12-13T15:27:28.305+0000",
                    "started": "2018-12-13T15:27:28.304+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "174922",
                    "issueId": "13204243"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13204243/worklog/174923",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #3168: ARROW-4019: [C++] Fix Coverity issues\nURL: https://github.com/apache/arrow/pull/3168#discussion_r241443553\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernel.h\n ##########\n @@ -78,6 +79,14 @@ struct ARROW_EXPORT Datum {\n \n   Datum(const Datum& other) noexcept { this->value = other.value; }\n \n+  // Define move constructor and move assignment, for better performance\n \n Review comment:\n   @wesm Not if there is a non-default destructor apparently.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-13T15:28:17.214+0000",
                    "updated": "2018-12-13T15:28:17.214+0000",
                    "started": "2018-12-13T15:28:17.213+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "174923",
                    "issueId": "13204243"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13204243/worklog/174930",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm closed pull request #3168: ARROW-4019: [C++] Fix Coverity issues\nURL: https://github.com/apache/arrow/pull/3168\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/cpp/src/arrow/array.h b/cpp/src/arrow/array.h\nindex b34b539333..37fa5aedfc 100644\n--- a/cpp/src/arrow/array.h\n+++ b/cpp/src/arrow/array.h\n@@ -87,7 +87,7 @@ class Status;\n /// input array and replace them with newly-allocated data, changing the output\n /// data type as well.\n struct ARROW_EXPORT ArrayData {\n-  ArrayData() : length(0) {}\n+  ArrayData() : length(0), null_count(0), offset(0) {}\n \n   ArrayData(const std::shared_ptr<DataType>& type, int64_t length,\n             int64_t null_count = kUnknownNullCount, int64_t offset = 0)\n@@ -311,7 +311,7 @@ class ARROW_EXPORT Array {\n   std::string ToString() const;\n \n  protected:\n-  Array() {}\n+  Array() : null_bitmap_data_(NULLPTR) {}\n \n   std::shared_ptr<ArrayData> data_;\n   const uint8_t* null_bitmap_data_;\n@@ -382,7 +382,7 @@ class ARROW_EXPORT PrimitiveArray : public FlatArray {\n   std::shared_ptr<Buffer> values() const { return data_->buffers[1]; }\n \n  protected:\n-  PrimitiveArray() {}\n+  PrimitiveArray() : raw_values_(NULLPTR) {}\n \n   inline void SetData(const std::shared_ptr<ArrayData>& data) {\n     auto values = data->buffers[1];\n@@ -565,7 +565,7 @@ class ARROW_EXPORT BinaryArray : public FlatArray {\n \n  protected:\n   // For subclasses\n-  BinaryArray() {}\n+  BinaryArray() : raw_value_offsets_(NULLPTR), raw_data_(NULLPTR) {}\n \n   /// Protected method for constructors\n   void SetData(const std::shared_ptr<ArrayData>& data);\ndiff --git a/cpp/src/arrow/compute/kernel.h b/cpp/src/arrow/compute/kernel.h\nindex 8048fff75b..bef2b9af21 100644\n--- a/cpp/src/arrow/compute/kernel.h\n+++ b/cpp/src/arrow/compute/kernel.h\n@@ -19,6 +19,7 @@\n #define ARROW_COMPUTE_KERNEL_H\n \n #include <memory>\n+#include <utility>\n #include <vector>\n \n #include \"arrow/array.h\"\n@@ -78,6 +79,14 @@ struct ARROW_EXPORT Datum {\n \n   Datum(const Datum& other) noexcept { this->value = other.value; }\n \n+  // Define move constructor and move assignment, for better performance\n+  Datum(Datum&& other) noexcept : value(std::move(other.value)) {}\n+\n+  Datum& operator=(Datum&& other) noexcept {\n+    value = std::move(other.value);\n+    return *this;\n+  }\n+\n   Datum::type kind() const {\n     switch (this->value.which()) {\n       case 0:\ndiff --git a/cpp/src/arrow/io/buffered-test.cc b/cpp/src/arrow/io/buffered-test.cc\nindex 7fc4c520d1..074833d4bf 100644\n--- a/cpp/src/arrow/io/buffered-test.cc\n+++ b/cpp/src/arrow/io/buffered-test.cc\n@@ -67,7 +67,7 @@ class FileTestFixture : public ::testing::Test {\n \n   void EnsureFileDeleted() {\n     if (FileExists(path_)) {\n-      std::remove(path_.c_str());\n+      ARROW_UNUSED(std::remove(path_.c_str()));\n     }\n   }\n \ndiff --git a/cpp/src/arrow/io/file-test.cc b/cpp/src/arrow/io/file-test.cc\nindex 6081005a8f..4d710d3470 100644\n--- a/cpp/src/arrow/io/file-test.cc\n+++ b/cpp/src/arrow/io/file-test.cc\n@@ -56,7 +56,7 @@ class FileTestFixture : public ::testing::Test {\n \n   void EnsureFileDeleted() {\n     if (FileExists(path_)) {\n-      std::remove(path_.c_str());\n+      ARROW_UNUSED(std::remove(path_.c_str()));\n     }\n   }\n \ndiff --git a/cpp/src/arrow/io/test-common.h b/cpp/src/arrow/io/test-common.h\nindex fa9145259b..a091b01d32 100644\n--- a/cpp/src/arrow/io/test-common.h\n+++ b/cpp/src/arrow/io/test-common.h\n@@ -118,7 +118,7 @@ class MemoryMapFixture {\n  public:\n   void TearDown() {\n     for (auto path : tmp_files_) {\n-      std::remove(path.c_str());\n+      ARROW_UNUSED(std::remove(path.c_str()));\n     }\n   }\n \ndiff --git a/cpp/src/arrow/ipc/json-integration-test.cc b/cpp/src/arrow/ipc/json-integration-test.cc\nindex 3e71415c69..914cdb6659 100644\n--- a/cpp/src/arrow/ipc/json-integration-test.cc\n+++ b/cpp/src/arrow/ipc/json-integration-test.cc\n@@ -262,7 +262,7 @@ class TestJSONIntegration : public ::testing::Test {\n \n   void TearDown() {\n     for (const std::string path : tmp_paths_) {\n-      std::remove(path.c_str());\n+      ARROW_UNUSED(std::remove(path.c_str()));\n     }\n   }\n \ndiff --git a/cpp/src/arrow/ipc/json.cc b/cpp/src/arrow/ipc/json.cc\nindex 394563c53c..61c242ca2d 100644\n--- a/cpp/src/arrow/ipc/json.cc\n+++ b/cpp/src/arrow/ipc/json.cc\n@@ -99,7 +99,7 @@ Status JsonWriter::WriteRecordBatch(const RecordBatch& batch) {\n class JsonReader::JsonReaderImpl {\n  public:\n   JsonReaderImpl(MemoryPool* pool, const std::shared_ptr<Buffer>& data)\n-      : pool_(pool), data_(data) {}\n+      : pool_(pool), data_(data), record_batches_(nullptr) {}\n \n   Status ParseAndReadSchema() {\n     doc_.Parse(reinterpret_cast<const rj::Document::Ch*>(data_->data()),\ndiff --git a/cpp/src/arrow/ipc/writer.cc b/cpp/src/arrow/ipc/writer.cc\nindex 3d3355dfe1..6ce72e070e 100644\n--- a/cpp/src/arrow/ipc/writer.cc\n+++ b/cpp/src/arrow/ipc/writer.cc\n@@ -772,7 +772,10 @@ class SchemaWriter : public StreamBookKeeper {\n  public:\n   SchemaWriter(const Schema& schema, DictionaryMemo* dictionary_memo, MemoryPool* pool,\n                io::OutputStream* sink)\n-      : StreamBookKeeper(sink), schema_(schema), dictionary_memo_(dictionary_memo) {}\n+      : StreamBookKeeper(sink),\n+        pool_(pool),\n+        schema_(schema),\n+        dictionary_memo_(dictionary_memo) {}\n \n   Status WriteSchema() {\n #ifndef NDEBUG\ndiff --git a/cpp/src/arrow/table.cc b/cpp/src/arrow/table.cc\nindex 04af4d9741..1f3d927ddd 100644\n--- a/cpp/src/arrow/table.cc\n+++ b/cpp/src/arrow/table.cc\n@@ -392,7 +392,7 @@ class SimpleTable : public Table {\n   std::vector<std::shared_ptr<Column>> columns_;\n };\n \n-Table::Table() {}\n+Table::Table() : num_rows_(0) {}\n \n std::shared_ptr<Table> Table::Make(const std::shared_ptr<Schema>& schema,\n                                    const std::vector<std::shared_ptr<Column>>& columns,\ndiff --git a/cpp/src/arrow/util/decimal.cc b/cpp/src/arrow/util/decimal.cc\nindex fda7746c6b..c47ac82e8c 100644\n--- a/cpp/src/arrow/util/decimal.cc\n+++ b/cpp/src/arrow/util/decimal.cc\n@@ -889,7 +889,7 @@ Status Decimal128::Rescale(int32_t original_scale, int32_t new_scale,\n }\n \n // Helper function used by Decimal128::FromBigEndian\n-static inline uint64_t FromBigEndian(const uint8_t* bytes, int32_t length) {\n+static inline uint64_t UInt64FromBigEndian(const uint8_t* bytes, int32_t length) {\n   // We don't bounds check the length here because this is called by\n   // FromBigEndian that has a Decimal128 as its out parameters and\n   // that function is already checking the length of the bytes and only\n@@ -906,8 +906,7 @@ Status Decimal128::FromBigEndian(const uint8_t* bytes, int32_t length, Decimal12\n   static constexpr int32_t kMinDecimalBytes = 1;\n   static constexpr int32_t kMaxDecimalBytes = 16;\n \n-  int64_t high;\n-  uint64_t low;\n+  int64_t high, low;\n \n   if (length < kMinDecimalBytes || length > kMaxDecimalBytes) {\n     std::ostringstream stream;\n@@ -917,35 +916,45 @@ Status Decimal128::FromBigEndian(const uint8_t* bytes, int32_t length, Decimal12\n     return Status::Invalid(stream.str());\n   }\n \n-  /// Bytes are coming in big-endian, so the first byte is the MSB and therefore holds the\n-  /// sign bit.\n+  // Bytes are coming in big-endian, so the first byte is the MSB and therefore holds the\n+  // sign bit.\n   const bool is_negative = static_cast<int8_t>(bytes[0]) < 0;\n \n-  /// Sign extend the low bits if necessary\n-  low = UINT64_MAX * (is_negative && length < 8);\n-  high = -1 * (is_negative && length < kMaxDecimalBytes);\n-\n-  /// Stop byte of the high bytes\n+  // 1. Extract the high bytes\n+  // Stop byte of the high bytes\n   const int32_t high_bits_offset = std::max(0, length - 8);\n+  const auto high_bits = UInt64FromBigEndian(bytes, high_bits_offset);\n \n-  /// Shift left enough bits to make room for the incoming int64_t\n-  high <<= high_bits_offset * CHAR_BIT;\n-\n-  /// Preserve the upper bits by inplace OR-ing the int64_t\n-  uint64_t value = arrow::FromBigEndian(bytes, high_bits_offset);\n-  high |= value;\n+  if (high_bits_offset == 8) {\n+    // Avoid undefined shift by 64 below\n+    high = high_bits;\n+  } else {\n+    high = -1 * (is_negative && length < kMaxDecimalBytes);\n+    // Shift left enough bits to make room for the incoming int64_t\n+    high <<= high_bits_offset * CHAR_BIT;\n+    // Preserve the upper bits by inplace OR-ing the int64_t\n+    high |= high_bits;\n+  }\n \n-  /// Stop byte of the low bytes\n+  // 2. Extract the low bytes\n+  // Stop byte of the low bytes\n   const int32_t low_bits_offset = std::min(length, 8);\n+  const auto low_bits =\n+      UInt64FromBigEndian(bytes + high_bits_offset, length - high_bits_offset);\n \n-  /// Shift left enough bits to make room for the incoming uint64_t\n-  low <<= low_bits_offset * CHAR_BIT;\n-\n-  /// Preserve the upper bits by inplace OR-ing the uint64_t\n-  value = arrow::FromBigEndian(bytes + high_bits_offset, length - high_bits_offset);\n-  low |= value;\n+  if (low_bits_offset == 8) {\n+    // Avoid undefined shift by 64 below\n+    low = low_bits;\n+  } else {\n+    // Sign extend the low bits if necessary\n+    low = -1 * (is_negative && length < 8);\n+    // Shift left enough bits to make room for the incoming int64_t\n+    low <<= low_bits_offset * CHAR_BIT;\n+    // Preserve the upper bits by inplace OR-ing the int64_t\n+    low |= low_bits;\n+  }\n \n-  *out = Decimal128(high, low);\n+  *out = Decimal128(high, static_cast<uint64_t>(low));\n   return Status::OK();\n }\n \ndiff --git a/cpp/src/arrow/util/logging.h b/cpp/src/arrow/util/logging.h\nindex 4cce700db9..42ab18e9e9 100644\n--- a/cpp/src/arrow/util/logging.h\n+++ b/cpp/src/arrow/util/logging.h\n@@ -22,6 +22,7 @@\n #include <memory>\n #include <string>\n \n+#include \"arrow/util/macros.h\"\n #include \"arrow/util/visibility.h\"\n \n namespace arrow {\n@@ -155,6 +156,8 @@ class ARROW_EXPORT ArrowLog : public ArrowLogBase {\n   static void InstallFailureSignalHandler();\n \n  private:\n+  ARROW_DISALLOW_COPY_AND_ASSIGN(ArrowLog);\n+\n   // Hide the implementation of log provider by void *.\n   // Otherwise, lib user may define the same macro to use the correct header file.\n   void* logging_provider_;\ndiff --git a/cpp/src/arrow/util/rle-encoding-test.cc b/cpp/src/arrow/util/rle-encoding-test.cc\nindex 8838261865..aac1b15239 100644\n--- a/cpp/src/arrow/util/rle-encoding-test.cc\n+++ b/cpp/src/arrow/util/rle-encoding-test.cc\n@@ -193,7 +193,7 @@ void ValidateRle(const vector<int>& values, int bit_width, uint8_t* expected_enc\n     EXPECT_EQ(encoded_len, expected_len);\n   }\n   if (expected_encoding != NULL) {\n-    EXPECT_EQ(memcmp(buffer, expected_encoding, expected_len), 0);\n+    EXPECT_EQ(memcmp(buffer, expected_encoding, encoded_len), 0);\n   }\n \n   // Verify read\ndiff --git a/cpp/src/arrow/util/rle-encoding.h b/cpp/src/arrow/util/rle-encoding.h\nindex a97543d5be..acefc8e3f7 100644\n--- a/cpp/src/arrow/util/rle-encoding.h\n+++ b/cpp/src/arrow/util/rle-encoding.h\n@@ -436,6 +436,7 @@ bool RleDecoder::NextCounts() {\n     literal_count_ = (indicator_value >> 1) * 8;\n   } else {\n     repeat_count_ = indicator_value >> 1;\n+    // XXX (ARROW-4018) this is not big-endian compatible\n     bool result =\n         bit_reader_.GetAligned<T>(static_cast<int>(BitUtil::CeilDiv(bit_width_, 8)),\n                                   reinterpret_cast<T*>(&current_value_));\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-13T15:52:35.482+0000",
                    "updated": "2018-12-13T15:52:35.482+0000",
                    "started": "2018-12-13T15:52:35.481+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "174930",
                    "issueId": "13204243"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
            "id": "1",
            "description": "A problem which impairs or prevents the functions of the product.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
            "name": "Bug",
            "subtask": false,
            "avatarId": 21133
        },
        "timespent": 4200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@18e05379[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@514b23fa[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4bf0632c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@432cdd5b[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@64179da7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@39943620[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7135db3d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@54d61645[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@c7443dd[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@14c95145[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4bfa9cd2[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@2f7acfd6[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 4200,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Dec 13 15:52:23 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-12-13T15:52:23.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-4019/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2018-12-13T14:02:53.000+0000",
        "updated": "2018-12-13T15:52:35.000+0000",
        "timeoriginalestimate": null,
        "description": "I recently got private access to a one-shot Coverity Scan of the codebase. Instead of opening a separate issue for each found buglet, let's fix a number of them at once.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "1h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 4200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Fix coverity issues",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13204243/comment/16720331",
                    "id": "16720331",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 3168\n[https://github.com/apache/arrow/pull/3168]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-12-13T15:52:23.379+0000",
                    "updated": "2018-12-13T15:52:23.379+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|s01hjk:",
        "customfield_12314139": null
    }
}