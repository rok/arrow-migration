{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13299274",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13299274",
    "key": "ARROW-8504",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12347769",
                "id": "12347769",
                "description": "",
                "name": "1.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-07-24"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield%40gmail.com",
            "name": "emkornfield@gmail.com",
            "key": "emkornfield@gmail.com",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Micah Kornfield",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield%40gmail.com",
            "name": "emkornfield@gmail.com",
            "key": "emkornfield@gmail.com",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Micah Kornfield",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield%40gmail.com",
            "name": "emkornfield@gmail.com",
            "key": "emkornfield@gmail.com",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Micah Kornfield",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 34800,
            "total": 34800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 34800,
            "total": 34800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-8504/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 58,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13299274/worklog/432499",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield opened a new pull request #7143:\nURL: https://github.com/apache/arrow/pull/7143\n\n\n   Adds two implementations of a BitRunReader, which returns set/not-set\r\n   and number of bits in a row.\r\n   \r\n   - Adds benchmarks comparing the two implementations under different\r\n   distributions.\r\n   \r\n   - Adds the reader for use ParquetWriter (there is a second\r\n   location on Nullable terminal node that I left unchanged because\r\n   it showed a performance drop of 30%, I think this is due the issue\r\n   described in the next bullet point, or because BitVisitor is getting\r\n   vectorized to something more efficient).\r\n   \r\n   - Refactors GetBatchedSpaced and GetBatchedSpacedWithDict:\r\n     1.  Use a single templated method that adds a template parameter\r\n         that the code can share.\r\n     2.  Does all checking for out of bounds indices in one go instead\r\n         of on each pass through th literal (this is a slight behavior\r\n         change as the index returned will be different).\r\n     3.  Makes use of the BitRunReader.\r\n   \r\n   Based on bechmarks BM_ColumnRead this seems to make performance worse by\r\n   50%.  This was surprising to me and my current working theory is\r\n   that the nullable benchmarks present the worse case scenario every\r\n   other element is null and therefore the overhead of invoking the call\r\n   relative to the existing code is high (using perf calls to NextRun()\r\n   jump to top after this change).  Before making a decision on reverting\r\n   the use of BitRunReader here I'd like to implement a more comprehensive\r\n   set of benchmarks to test this hypothesis.\r\n   \r\n   Other TODOs\r\n   - [ ] Need to revert change to testing submodule hash\r\n   - [ ] Add attribution to wikipedia for InvertRemainingBits\r\n   - [ ] Fix some unintelligible comments.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-05-10T06:28:18.056+0000",
                    "updated": "2020-05-10T06:28:18.056+0000",
                    "started": "2020-05-10T06:28:18.056+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "432499",
                    "issueId": "13299274"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13299274/worklog/432501",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #7143:\nURL: https://github.com/apache/arrow/pull/7143#issuecomment-626281265\n\n\n   https://issues.apache.org/jira/browse/ARROW-8504\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-05-10T06:32:03.938+0000",
                    "updated": "2020-05-10T06:32:03.938+0000",
                    "started": "2020-05-10T06:32:03.938+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "432501",
                    "issueId": "13299274"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13299274/worklog/432587",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #7143:\nURL: https://github.com/apache/arrow/pull/7143#issuecomment-626408844\n\n\n   A fair chunk of RLE-related code came out of Impala originally, it might not be a bad idea to peek at what's in apache/impala to see if it has gotten worked on perf-wise since the beginning of 2016. In any case, we wouldn't want to take on a change that causes a perf regression in cases with many short null/non-null runs\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-05-10T23:50:53.157+0000",
                    "updated": "2020-05-10T23:50:53.157+0000",
                    "started": "2020-05-10T23:50:53.156+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "432587",
                    "issueId": "13299274"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13299274/worklog/432598",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #7143:\nURL: https://github.com/apache/arrow/pull/7143#issuecomment-626424926\n\n\n   Agreed.  I'm think I'll have to add a special case for this.  The code can also be simplified a bit further for cases with runs\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-05-11T01:28:26.718+0000",
                    "updated": "2020-05-11T01:28:26.718+0000",
                    "started": "2020-05-11T01:28:26.718+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "432598",
                    "issueId": "13299274"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13299274/worklog/432625",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #7143:\nURL: https://github.com/apache/arrow/pull/7143#issuecomment-626464623\n\n\n   @wesm interesting data point, I updated performance benchmarks to generate random values/nullability (and kept deterministic one).  It seems like the bad regression is really only deterministically alternating nullability.  Randomly generated nullability (at 50%) shows improvements.  I still have some cleanup to do but I'd be curious on peoples thoughts on the need to try to detect/special case deterministic patterns in nullability (its possible the maybe I just chose a bad seed?):\r\n   ![image](https://user-images.githubusercontent.com/17869838/81524493-40889080-9306-11ea-9023-bc64611ef596.png)\r\n   \r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-05-11T04:37:25.818+0000",
                    "updated": "2020-05-11T04:37:25.818+0000",
                    "started": "2020-05-11T04:37:25.818+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "432625",
                    "issueId": "13299274"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13299274/worklog/432626",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield edited a comment on pull request #7143:\nURL: https://github.com/apache/arrow/pull/7143#issuecomment-626464623\n\n\n   @wesm interesting data point, I updated performance benchmarks to generate random values/nullability (and kept deterministic one).  It seems like the bad regression is really only deterministically alternating nullability.  Randomly generated nullability (at 50%) shows improvements.  I still have some cleanup to do but I'd be curious on peoples thoughts on the need to try to detect/special case deterministic patterns in nullability (its possible the maybe I just chose a bad seed?):\r\n   ![image](https://user-images.githubusercontent.com/17869838/81524493-40889080-9306-11ea-9023-bc64611ef596.png)\r\n   \r\n   Also, https://github.com/apache/impala/blob/19a4d8fe794c9b17e69d6c65473f9a68084916bb/be/src/kudu/util/rle-encoding.h is the file I found int impala?  Maybe we did all the additions for GetBatchSpaced etc?  Was there another source you were thinking of?\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-05-11T04:46:57.838+0000",
                    "updated": "2020-05-11T04:46:57.838+0000",
                    "started": "2020-05-11T04:46:57.838+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "432626",
                    "issueId": "13299274"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13299274/worklog/432983",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #7143:\nURL: https://github.com/apache/arrow/pull/7143#issuecomment-628384930\n\n\n   @wesm OK, I did a little bit more in depth sampling.  And it looks like this new algorithm is a win for 0-5% nulls, then a regression until someplace between 45-50% nulls then a likely a win with a larger percentage of nulls.  I'll add a special case to estimate which algorithm to use (this one or 1 by 1 based on percentage of nulls and sampling the first N elements of the bitmap vector).\r\n   \r\n   ![image](https://user-images.githubusercontent.com/17869838/81894035-bdfd0c80-9563-11ea-90f9-e334a9a1666e.png)\r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-05-14T04:50:58.146+0000",
                    "updated": "2020-05-14T04:50:58.146+0000",
                    "started": "2020-05-14T04:50:58.146+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "432983",
                    "issueId": "13299274"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13299274/worklog/434268",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #7143:\nURL: https://github.com/apache/arrow/pull/7143#issuecomment-629875816\n\n\n   OK, I was actually able to make this faster with a little bit of refactoring.  The only major regression is now the exact alternating case (~50% worse).  I'll wait till https://github.com/apache/arrow/pull/7175 is merged to publish new benchmarks, but I no longer think special casing is necessary.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-05-17T23:12:23.560+0000",
                    "updated": "2020-05-17T23:12:23.560+0000",
                    "started": "2020-05-17T23:12:23.560+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "434268",
                    "issueId": "13299274"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13299274/worklog/436367",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #7143:\nURL: https://github.com/apache/arrow/pull/7143#issuecomment-632460492\n\n\n   ![image](https://user-images.githubusercontent.com/17869838/82628758-8107ca00-9ba2-11ea-9485-424faee10166.png)\r\n   \r\n   OK I think this is ready for review CC @pitrou @wesm \r\n   \r\n   Benchmarks show mostly 20% improvement for any random null values across the board.  The worse case scenario shows 40-60% regression.  This seems to occur when we have deterministically alternating null/not-null.  I believe this to be because modern branch predictors can detect this pattern so there is minimal branch cost relative to the extra work that is happening inside of BitRunReader\r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-05-22T03:37:40.729+0000",
                    "updated": "2020-05-22T03:37:40.729+0000",
                    "started": "2020-05-22T03:37:40.729+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "436367",
                    "issueId": "13299274"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13299274/worklog/436373",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #7143:\nURL: https://github.com/apache/arrow/pull/7143#issuecomment-632463807\n\n\n   Cool, I will try to look at this tomorrow and kick the tires a bit with benchmarks\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-05-22T03:52:25.236+0000",
                    "updated": "2020-05-22T03:52:25.236+0000",
                    "started": "2020-05-22T03:52:25.236+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "436373",
                    "issueId": "13299274"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13299274/worklog/436395",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #7143:\nURL: https://github.com/apache/arrow/pull/7143#issuecomment-632487890\n\n\n   Will fix CI issues tomorrow\r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-05-22T05:21:11.142+0000",
                    "updated": "2020-05-22T05:21:11.142+0000",
                    "started": "2020-05-22T05:21:11.142+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "436395",
                    "issueId": "13299274"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13299274/worklog/437245",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #7143:\nURL: https://github.com/apache/arrow/pull/7143#issuecomment-633825896\n\n\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-05-27T03:23:53.147+0000",
                    "updated": "2020-05-27T03:23:53.147+0000",
                    "started": "2020-05-27T03:23:53.147+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "437245",
                    "issueId": "13299274"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13299274/worklog/437533",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #7143:\nURL: https://github.com/apache/arrow/pull/7143#issuecomment-634107353\n\n\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-05-27T04:03:06.419+0000",
                    "updated": "2020-05-27T04:03:06.419+0000",
                    "started": "2020-05-27T04:03:06.419+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "437533",
                    "issueId": "13299274"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13299274/worklog/437566",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #7143:\nURL: https://github.com/apache/arrow/pull/7143#issuecomment-634129489\n\n\n   If this is not urgent, you can wait for next week and I'll review as well. As you prefer, of course :-)\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-05-27T04:08:26.800+0000",
                    "updated": "2020-05-27T04:08:26.800+0000",
                    "started": "2020-05-27T04:08:26.800+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "437566",
                    "issueId": "13299274"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13299274/worklog/440313",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #7143:\nURL: https://github.com/apache/arrow/pull/7143#issuecomment-637683877\n\n\n   BitRunReader benchmark here (with gcc 7.5):\r\n   ```\r\n   BitRunReader/-1            10689 ns        10687 ns       196758 bytes_per_second=45.6911M/s\r\n   BitRunReader/0               243 ns          243 ns      8648058 bytes_per_second=1.96541G/s\r\n   BitRunReader/10             2315 ns         2315 ns       902899 bytes_per_second=210.938M/s\r\n   BitRunReader/25             4543 ns         4542 ns       469378 bytes_per_second=107.5M/s\r\n   BitRunReader/50             6284 ns         6283 ns       331741 bytes_per_second=77.7125M/s\r\n   BitRunReader/60             6453 ns         6452 ns       325743 bytes_per_second=75.6844M/s\r\n   BitRunReader/75             4952 ns         4951 ns       423942 bytes_per_second=98.622M/s\r\n   BitRunReader/99              449 ns          449 ns      4676786 bytes_per_second=1086.96M/s\r\n   \r\n   BitRunReaderScalar/-1       6132 ns         6132 ns       339553 bytes_per_second=79.6324M/s\r\n   BitRunReaderScalar/0        2955 ns         2955 ns       707136 bytes_per_second=165.263M/s\r\n   BitRunReaderScalar/10       4080 ns         4079 ns       513884 bytes_per_second=119.696M/s\r\n   BitRunReaderScalar/25       5348 ns         5347 ns       380446 bytes_per_second=91.313M/s\r\n   BitRunReaderScalar/50       6427 ns         6426 ns       319813 bytes_per_second=75.9863M/s\r\n   BitRunReaderScalar/60       6143 ns         6142 ns       340548 bytes_per_second=79.5007M/s\r\n   BitRunReaderScalar/75       5037 ns         5036 ns       403359 bytes_per_second=96.9589M/s\r\n   BitRunReaderScalar/99       2913 ns         2912 ns       716137 bytes_per_second=167.664M/s\r\n   ```\r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-02T17:03:54.282+0000",
                    "updated": "2020-06-02T17:03:54.282+0000",
                    "started": "2020-06-02T17:03:54.282+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "440313",
                    "issueId": "13299274"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13299274/worklog/440329",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #7143:\nURL: https://github.com/apache/arrow/pull/7143#discussion_r434040540\n\n\n\n##########\nFile path: cpp/src/arrow/util/bit_util.h\n##########\n@@ -550,6 +558,109 @@ class BitmapReader {\n   int64_t bit_offset_;\n };\n \n+struct BitRun {\n+  int64_t length;\n+  // Whether bits are set at this point.\n+  bool set;\n+\n+  std::string ToString() const {\n+    return std::string(\"{Length: \") + std::to_string(length) +\n+           \", set=\" + std::to_string(set) + \"}\";\n+  }\n+};\n+\n+static inline bool operator==(const BitRun& lhs, const BitRun& rhs) {\n+  return lhs.length == rhs.length && lhs.set == rhs.set;\n+}\n+\n+class BitRunReaderScalar {\n+ public:\n+  BitRunReaderScalar(const uint8_t* bitmap, int64_t start_offset, int64_t length)\n+      : reader_(bitmap, start_offset, length) {}\n+\n+  BitRun NextRun() {\n+    BitRun rl = {/*length=*/0, reader_.IsSet()};\n+    // Advance while the values are equal and not at the end of list.\n+    while (reader_.position() < reader_.length() && reader_.IsSet() == rl.set) {\n+      rl.length++;\n+      reader_.Next();\n+    }\n+    return rl;\n+  }\n+\n+ private:\n+  BitmapReader reader_;\n+};\n+\n+#if defined(ARROW_LITTLE_ENDIAN)\n+/// A convenience class for counting the number of continguous set/unset bits\n+/// in a bitmap.\n+class ARROW_EXPORT BitRunReader {\n+ public:\n+  /// \\brief Constructs new BitRunReader.\n+  ///\n+  /// \\param[in] bitmap source data\n+  /// \\param[in] start_offset bit offset into the source data\n+  /// \\param[in] length number of bits to copy\n+  BitRunReader(const uint8_t* bitmap, int64_t start_offset, int64_t length);\n+\n+  /// Returns a new BitRun containing the number of contiguous\n+  /// bits with the same value.  length == 0 indicates the\n+  /// end of the bitmap.\n+  BitRun NextRun() {\n+    if (ARROW_PREDICT_FALSE(position_ >= length_)) {\n+      return {/*length=*/0, false};\n+    }\n+    // This implementation relies on a efficient implementations of\n+    // CountTrailingZeros and assumes that runs are more often then\n+    // not.  The logic is to incrementally find the next bit change\n+    // from the current position.  This is done by zeroing all\n+    // bits in word_ up to position_ and using the TrailingZeroCount\n+    // to find the index of the next set bit.\n+\n+    // The runs alternate on each call, so flip the bit.\n+    current_run_bit_set_ = !current_run_bit_set_;\n+\n+    // Invert the word for proper use of CountTrailingZeros and\n+    // clear bits so CountTrailingZeros can do it magic.\n+    InvertRemainingBits();\n+\n+    int64_t start_position = position_;\n+    // Go  forward until the next change from unset to set.\n+    int64_t new_bits = BitUtil::CountTrailingZeros(word_) - (start_position % 64);\n+    position_ += new_bits;\n+\n+    if (ARROW_PREDICT_FALSE(position_ % 64 == 0) &&\n+        ARROW_PREDICT_TRUE(position_ < length_)) {\n+      // Continue extending position while we can advance an entire word.\n+      // (updates position_ accordingly).\n+      AdvanceTillChange();\n\nReview comment:\n       If you folded `AdvanceTillChange()` here, the code would probably be more readable (less duplicated conditions).\n\n##########\nFile path: cpp/src/arrow/util/bit_util.cc\n##########\n@@ -411,6 +411,66 @@ Result<std::shared_ptr<Buffer>> BitmapOp(MemoryPool* pool, const uint8_t* left,\n \n }  // namespace\n \n+BitRunReader::BitRunReader(const uint8_t* bitmap, int64_t start_offset, int64_t length)\n+    : bitmap_(bitmap + (start_offset / 8)),\n+      position_(start_offset % 8),\n+      length_(position_ + length) {\n+  if (ARROW_PREDICT_FALSE(length == 0)) {\n+    word_ = 0;\n+    return;\n+  }\n+\n+  // Prepare for inversion in NextRun.\n+  current_run_bit_set_ = !BitUtil::GetBit(bitmap, start_offset);\n+  LoadWord();\n+  // Clear out any preceding bits.\n+  word_ = word_ & ~BitUtil::PartialWordMask(position_);\n+}\n+\n+void BitRunReader::AdvanceTillChange() {\n+  int64_t new_bits = 0;\n+  do {\n+    // Advance the position of the bitmap for loading.\n+    bitmap_ += sizeof(uint64_t);\n+    LoadWord();\n+    new_bits = BitUtil::CountTrailingZeros(word_);\n+    // Continue calculating run length.\n+    position_ += new_bits;\n+  } while (ARROW_PREDICT_FALSE(position_ % 64 == 0) &&\n+           ARROW_PREDICT_TRUE(position_ < length_) && new_bits > 0);\n+}\n+\n+void BitRunReader::LoadWord() {\n+  word_ = 0;\n+  // On the initial load if there is an offset we need to account for this when\n\nReview comment:\n       Ok, why don't you have a separate function for the initial load? You're paying the price for this on every subsequent load (especially as the function may not be inlined at all).\n\n##########\nFile path: cpp/src/arrow/util/bit_util.h\n##########\n@@ -550,6 +558,109 @@ class BitmapReader {\n   int64_t bit_offset_;\n };\n \n+struct BitRun {\n+  int64_t length;\n+  // Whether bits are set at this point.\n+  bool set;\n+\n+  std::string ToString() const {\n+    return std::string(\"{Length: \") + std::to_string(length) +\n+           \", set=\" + std::to_string(set) + \"}\";\n+  }\n+};\n+\n+static inline bool operator==(const BitRun& lhs, const BitRun& rhs) {\n+  return lhs.length == rhs.length && lhs.set == rhs.set;\n+}\n+\n+class BitRunReaderScalar {\n+ public:\n+  BitRunReaderScalar(const uint8_t* bitmap, int64_t start_offset, int64_t length)\n+      : reader_(bitmap, start_offset, length) {}\n+\n+  BitRun NextRun() {\n+    BitRun rl = {/*length=*/0, reader_.IsSet()};\n+    // Advance while the values are equal and not at the end of list.\n+    while (reader_.position() < reader_.length() && reader_.IsSet() == rl.set) {\n+      rl.length++;\n+      reader_.Next();\n+    }\n+    return rl;\n+  }\n+\n+ private:\n+  BitmapReader reader_;\n+};\n+\n+#if defined(ARROW_LITTLE_ENDIAN)\n+/// A convenience class for counting the number of continguous set/unset bits\n+/// in a bitmap.\n+class ARROW_EXPORT BitRunReader {\n+ public:\n+  /// \\brief Constructs new BitRunReader.\n+  ///\n+  /// \\param[in] bitmap source data\n+  /// \\param[in] start_offset bit offset into the source data\n+  /// \\param[in] length number of bits to copy\n+  BitRunReader(const uint8_t* bitmap, int64_t start_offset, int64_t length);\n+\n+  /// Returns a new BitRun containing the number of contiguous\n+  /// bits with the same value.  length == 0 indicates the\n+  /// end of the bitmap.\n+  BitRun NextRun() {\n+    if (ARROW_PREDICT_FALSE(position_ >= length_)) {\n+      return {/*length=*/0, false};\n+    }\n+    // This implementation relies on a efficient implementations of\n+    // CountTrailingZeros and assumes that runs are more often then\n+    // not.  The logic is to incrementally find the next bit change\n+    // from the current position.  This is done by zeroing all\n+    // bits in word_ up to position_ and using the TrailingZeroCount\n+    // to find the index of the next set bit.\n+\n+    // The runs alternate on each call, so flip the bit.\n+    current_run_bit_set_ = !current_run_bit_set_;\n+\n+    // Invert the word for proper use of CountTrailingZeros and\n+    // clear bits so CountTrailingZeros can do it magic.\n+    InvertRemainingBits();\n+\n+    int64_t start_position = position_;\n+    // Go  forward until the next change from unset to set.\n+    int64_t new_bits = BitUtil::CountTrailingZeros(word_) - (start_position % 64);\n+    position_ += new_bits;\n+\n+    if (ARROW_PREDICT_FALSE(position_ % 64 == 0) &&\n\nReview comment:\n       Be aware that signed modulo is slightly slower than unsigned modulo (the compiler doesn't know that `position_` is positive).\n\n##########\nFile path: cpp/src/arrow/util/bit_util.h\n##########\n@@ -550,6 +558,109 @@ class BitmapReader {\n   int64_t bit_offset_;\n };\n \n+struct BitRun {\n+  int64_t length;\n+  // Whether bits are set at this point.\n+  bool set;\n+\n+  std::string ToString() const {\n+    return std::string(\"{Length: \") + std::to_string(length) +\n+           \", set=\" + std::to_string(set) + \"}\";\n+  }\n+};\n+\n+static inline bool operator==(const BitRun& lhs, const BitRun& rhs) {\n+  return lhs.length == rhs.length && lhs.set == rhs.set;\n+}\n+\n+class BitRunReaderScalar {\n+ public:\n+  BitRunReaderScalar(const uint8_t* bitmap, int64_t start_offset, int64_t length)\n+      : reader_(bitmap, start_offset, length) {}\n+\n+  BitRun NextRun() {\n+    BitRun rl = {/*length=*/0, reader_.IsSet()};\n+    // Advance while the values are equal and not at the end of list.\n+    while (reader_.position() < reader_.length() && reader_.IsSet() == rl.set) {\n+      rl.length++;\n+      reader_.Next();\n+    }\n+    return rl;\n+  }\n+\n+ private:\n+  BitmapReader reader_;\n+};\n+\n+#if defined(ARROW_LITTLE_ENDIAN)\n+/// A convenience class for counting the number of continguous set/unset bits\n+/// in a bitmap.\n+class ARROW_EXPORT BitRunReader {\n+ public:\n+  /// \\brief Constructs new BitRunReader.\n+  ///\n+  /// \\param[in] bitmap source data\n+  /// \\param[in] start_offset bit offset into the source data\n+  /// \\param[in] length number of bits to copy\n+  BitRunReader(const uint8_t* bitmap, int64_t start_offset, int64_t length);\n+\n+  /// Returns a new BitRun containing the number of contiguous\n+  /// bits with the same value.  length == 0 indicates the\n+  /// end of the bitmap.\n+  BitRun NextRun() {\n+    if (ARROW_PREDICT_FALSE(position_ >= length_)) {\n+      return {/*length=*/0, false};\n+    }\n+    // This implementation relies on a efficient implementations of\n+    // CountTrailingZeros and assumes that runs are more often then\n+    // not.  The logic is to incrementally find the next bit change\n+    // from the current position.  This is done by zeroing all\n+    // bits in word_ up to position_ and using the TrailingZeroCount\n+    // to find the index of the next set bit.\n+\n+    // The runs alternate on each call, so flip the bit.\n+    current_run_bit_set_ = !current_run_bit_set_;\n+\n+    // Invert the word for proper use of CountTrailingZeros and\n+    // clear bits so CountTrailingZeros can do it magic.\n+    InvertRemainingBits();\n+\n+    int64_t start_position = position_;\n+    // Go  forward until the next change from unset to set.\n+    int64_t new_bits = BitUtil::CountTrailingZeros(word_) - (start_position % 64);\n+    position_ += new_bits;\n+\n+    if (ARROW_PREDICT_FALSE(position_ % 64 == 0) &&\n+        ARROW_PREDICT_TRUE(position_ < length_)) {\n+      // Continue extending position while we can advance an entire word.\n+      // (updates position_ accordingly).\n+      AdvanceTillChange();\n+    }\n+\n+    return {/*length=*/position_ - start_position, current_run_bit_set_};\n+  }\n+\n+ private:\n+  void AdvanceTillChange();\n+  void InvertRemainingBits() {\n+    // Mask applied everying above the lowest bit.\n\nReview comment:\n       ???\n\n##########\nFile path: cpp/src/arrow/util/bit_util.h\n##########\n@@ -550,6 +558,109 @@ class BitmapReader {\n   int64_t bit_offset_;\n };\n \n+struct BitRun {\n+  int64_t length;\n+  // Whether bits are set at this point.\n+  bool set;\n+\n+  std::string ToString() const {\n+    return std::string(\"{Length: \") + std::to_string(length) +\n+           \", set=\" + std::to_string(set) + \"}\";\n+  }\n+};\n+\n+static inline bool operator==(const BitRun& lhs, const BitRun& rhs) {\n+  return lhs.length == rhs.length && lhs.set == rhs.set;\n+}\n+\n+class BitRunReaderScalar {\n+ public:\n+  BitRunReaderScalar(const uint8_t* bitmap, int64_t start_offset, int64_t length)\n+      : reader_(bitmap, start_offset, length) {}\n+\n+  BitRun NextRun() {\n+    BitRun rl = {/*length=*/0, reader_.IsSet()};\n+    // Advance while the values are equal and not at the end of list.\n+    while (reader_.position() < reader_.length() && reader_.IsSet() == rl.set) {\n+      rl.length++;\n+      reader_.Next();\n+    }\n+    return rl;\n+  }\n+\n+ private:\n+  BitmapReader reader_;\n+};\n+\n+#if defined(ARROW_LITTLE_ENDIAN)\n+/// A convenience class for counting the number of continguous set/unset bits\n+/// in a bitmap.\n+class ARROW_EXPORT BitRunReader {\n+ public:\n+  /// \\brief Constructs new BitRunReader.\n+  ///\n+  /// \\param[in] bitmap source data\n+  /// \\param[in] start_offset bit offset into the source data\n+  /// \\param[in] length number of bits to copy\n+  BitRunReader(const uint8_t* bitmap, int64_t start_offset, int64_t length);\n+\n+  /// Returns a new BitRun containing the number of contiguous\n+  /// bits with the same value.  length == 0 indicates the\n+  /// end of the bitmap.\n+  BitRun NextRun() {\n+    if (ARROW_PREDICT_FALSE(position_ >= length_)) {\n+      return {/*length=*/0, false};\n+    }\n+    // This implementation relies on a efficient implementations of\n+    // CountTrailingZeros and assumes that runs are more often then\n+    // not.  The logic is to incrementally find the next bit change\n+    // from the current position.  This is done by zeroing all\n+    // bits in word_ up to position_ and using the TrailingZeroCount\n+    // to find the index of the next set bit.\n+\n+    // The runs alternate on each call, so flip the bit.\n+    current_run_bit_set_ = !current_run_bit_set_;\n+\n+    // Invert the word for proper use of CountTrailingZeros and\n+    // clear bits so CountTrailingZeros can do it magic.\n+    InvertRemainingBits();\n+\n+    int64_t start_position = position_;\n+    // Go  forward until the next change from unset to set.\n+    int64_t new_bits = BitUtil::CountTrailingZeros(word_) - (start_position % 64);\n+    position_ += new_bits;\n+\n+    if (ARROW_PREDICT_FALSE(position_ % 64 == 0) &&\n\nReview comment:\n       You could instead maintain a bit offset and/or a word mask. Could also perhaps help deconvolute `InvertRemainingBits`...\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-02T17:22:32.535+0000",
                    "updated": "2020-06-02T17:22:32.535+0000",
                    "started": "2020-06-02T17:22:32.535+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "440329",
                    "issueId": "13299274"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13299274/worklog/440510",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #7143:\nURL: https://github.com/apache/arrow/pull/7143#discussion_r434224869\n\n\n\n##########\nFile path: cpp/src/arrow/util/bit_util.h\n##########\n@@ -550,6 +558,109 @@ class BitmapReader {\n   int64_t bit_offset_;\n };\n \n+struct BitRun {\n+  int64_t length;\n+  // Whether bits are set at this point.\n+  bool set;\n+\n+  std::string ToString() const {\n+    return std::string(\"{Length: \") + std::to_string(length) +\n+           \", set=\" + std::to_string(set) + \"}\";\n+  }\n+};\n+\n+static inline bool operator==(const BitRun& lhs, const BitRun& rhs) {\n+  return lhs.length == rhs.length && lhs.set == rhs.set;\n+}\n+\n+class BitRunReaderScalar {\n+ public:\n+  BitRunReaderScalar(const uint8_t* bitmap, int64_t start_offset, int64_t length)\n+      : reader_(bitmap, start_offset, length) {}\n+\n+  BitRun NextRun() {\n+    BitRun rl = {/*length=*/0, reader_.IsSet()};\n+    // Advance while the values are equal and not at the end of list.\n+    while (reader_.position() < reader_.length() && reader_.IsSet() == rl.set) {\n+      rl.length++;\n+      reader_.Next();\n+    }\n+    return rl;\n+  }\n+\n+ private:\n+  BitmapReader reader_;\n+};\n+\n+#if defined(ARROW_LITTLE_ENDIAN)\n+/// A convenience class for counting the number of continguous set/unset bits\n+/// in a bitmap.\n+class ARROW_EXPORT BitRunReader {\n+ public:\n+  /// \\brief Constructs new BitRunReader.\n+  ///\n+  /// \\param[in] bitmap source data\n+  /// \\param[in] start_offset bit offset into the source data\n+  /// \\param[in] length number of bits to copy\n+  BitRunReader(const uint8_t* bitmap, int64_t start_offset, int64_t length);\n+\n+  /// Returns a new BitRun containing the number of contiguous\n+  /// bits with the same value.  length == 0 indicates the\n+  /// end of the bitmap.\n+  BitRun NextRun() {\n+    if (ARROW_PREDICT_FALSE(position_ >= length_)) {\n+      return {/*length=*/0, false};\n+    }\n+    // This implementation relies on a efficient implementations of\n+    // CountTrailingZeros and assumes that runs are more often then\n+    // not.  The logic is to incrementally find the next bit change\n+    // from the current position.  This is done by zeroing all\n+    // bits in word_ up to position_ and using the TrailingZeroCount\n+    // to find the index of the next set bit.\n+\n+    // The runs alternate on each call, so flip the bit.\n+    current_run_bit_set_ = !current_run_bit_set_;\n+\n+    // Invert the word for proper use of CountTrailingZeros and\n+    // clear bits so CountTrailingZeros can do it magic.\n+    InvertRemainingBits();\n+\n+    int64_t start_position = position_;\n+    // Go  forward until the next change from unset to set.\n+    int64_t new_bits = BitUtil::CountTrailingZeros(word_) - (start_position % 64);\n+    position_ += new_bits;\n+\n+    if (ARROW_PREDICT_FALSE(position_ % 64 == 0) &&\n\nReview comment:\n       You could do `position_ & 63` too\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-02T23:15:01.299+0000",
                    "updated": "2020-06-02T23:15:01.299+0000",
                    "started": "2020-06-02T23:15:01.299+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "440510",
                    "issueId": "13299274"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13299274/worklog/440599",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #7143:\nURL: https://github.com/apache/arrow/pull/7143#discussion_r434315391\n\n\n\n##########\nFile path: cpp/src/arrow/util/bit_util.cc\n##########\n@@ -411,6 +411,66 @@ Result<std::shared_ptr<Buffer>> BitmapOp(MemoryPool* pool, const uint8_t* left,\n \n }  // namespace\n \n+BitRunReader::BitRunReader(const uint8_t* bitmap, int64_t start_offset, int64_t length)\n+    : bitmap_(bitmap + (start_offset / 8)),\n+      position_(start_offset % 8),\n+      length_(position_ + length) {\n+  if (ARROW_PREDICT_FALSE(length == 0)) {\n+    word_ = 0;\n+    return;\n+  }\n+\n+  // Prepare for inversion in NextRun.\n+  current_run_bit_set_ = !BitUtil::GetBit(bitmap, start_offset);\n+  LoadWord();\n+  // Clear out any preceding bits.\n+  word_ = word_ & ~BitUtil::PartialWordMask(position_);\n+}\n+\n+void BitRunReader::AdvanceTillChange() {\n+  int64_t new_bits = 0;\n+  do {\n+    // Advance the position of the bitmap for loading.\n+    bitmap_ += sizeof(uint64_t);\n+    LoadWord();\n+    new_bits = BitUtil::CountTrailingZeros(word_);\n+    // Continue calculating run length.\n+    position_ += new_bits;\n+  } while (ARROW_PREDICT_FALSE(position_ % 64 == 0) &&\n+           ARROW_PREDICT_TRUE(position_ < length_) && new_bits > 0);\n+}\n+\n+void BitRunReader::LoadWord() {\n+  word_ = 0;\n+  // On the initial load if there is an offset we need to account for this when\n\nReview comment:\n       I believe I tried having this guarded with a templated bool inline.  I also initially had this whole function in the header for inlining and it made performance better (on the parquet benchmarks) to move it out-of-line.  It is likely the optimization below for memcpy is no longer relevant, and I can try to simplify if that would address your concern.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-03T05:26:20.457+0000",
                    "updated": "2020-06-03T05:26:20.457+0000",
                    "started": "2020-06-03T05:26:20.457+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "440599",
                    "issueId": "13299274"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13299274/worklog/440604",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #7143:\nURL: https://github.com/apache/arrow/pull/7143#discussion_r434315391\n\n\n\n##########\nFile path: cpp/src/arrow/util/bit_util.cc\n##########\n@@ -411,6 +411,66 @@ Result<std::shared_ptr<Buffer>> BitmapOp(MemoryPool* pool, const uint8_t* left,\n \n }  // namespace\n \n+BitRunReader::BitRunReader(const uint8_t* bitmap, int64_t start_offset, int64_t length)\n+    : bitmap_(bitmap + (start_offset / 8)),\n+      position_(start_offset % 8),\n+      length_(position_ + length) {\n+  if (ARROW_PREDICT_FALSE(length == 0)) {\n+    word_ = 0;\n+    return;\n+  }\n+\n+  // Prepare for inversion in NextRun.\n+  current_run_bit_set_ = !BitUtil::GetBit(bitmap, start_offset);\n+  LoadWord();\n+  // Clear out any preceding bits.\n+  word_ = word_ & ~BitUtil::PartialWordMask(position_);\n+}\n+\n+void BitRunReader::AdvanceTillChange() {\n+  int64_t new_bits = 0;\n+  do {\n+    // Advance the position of the bitmap for loading.\n+    bitmap_ += sizeof(uint64_t);\n+    LoadWord();\n+    new_bits = BitUtil::CountTrailingZeros(word_);\n+    // Continue calculating run length.\n+    position_ += new_bits;\n+  } while (ARROW_PREDICT_FALSE(position_ % 64 == 0) &&\n+           ARROW_PREDICT_TRUE(position_ < length_) && new_bits > 0);\n+}\n+\n+void BitRunReader::LoadWord() {\n+  word_ = 0;\n+  // On the initial load if there is an offset we need to account for this when\n\nReview comment:\n       Changing to have a separate function.  This is intentionally not inlined as part of the main loop (it was a performance improvement to move AdvanceTillChange out-of-line.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-03T05:45:58.077+0000",
                    "updated": "2020-06-03T05:45:58.077+0000",
                    "started": "2020-06-03T05:45:58.076+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "440604",
                    "issueId": "13299274"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13299274/worklog/440610",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #7143:\nURL: https://github.com/apache/arrow/pull/7143#discussion_r434316303\n\n\n\n##########\nFile path: cpp/src/arrow/util/bit_util.h\n##########\n@@ -550,6 +558,109 @@ class BitmapReader {\n   int64_t bit_offset_;\n };\n \n+struct BitRun {\n+  int64_t length;\n+  // Whether bits are set at this point.\n+  bool set;\n+\n+  std::string ToString() const {\n+    return std::string(\"{Length: \") + std::to_string(length) +\n+           \", set=\" + std::to_string(set) + \"}\";\n+  }\n+};\n+\n+static inline bool operator==(const BitRun& lhs, const BitRun& rhs) {\n+  return lhs.length == rhs.length && lhs.set == rhs.set;\n+}\n+\n+class BitRunReaderScalar {\n+ public:\n+  BitRunReaderScalar(const uint8_t* bitmap, int64_t start_offset, int64_t length)\n+      : reader_(bitmap, start_offset, length) {}\n+\n+  BitRun NextRun() {\n+    BitRun rl = {/*length=*/0, reader_.IsSet()};\n+    // Advance while the values are equal and not at the end of list.\n+    while (reader_.position() < reader_.length() && reader_.IsSet() == rl.set) {\n+      rl.length++;\n+      reader_.Next();\n+    }\n+    return rl;\n+  }\n+\n+ private:\n+  BitmapReader reader_;\n+};\n+\n+#if defined(ARROW_LITTLE_ENDIAN)\n+/// A convenience class for counting the number of continguous set/unset bits\n+/// in a bitmap.\n+class ARROW_EXPORT BitRunReader {\n+ public:\n+  /// \\brief Constructs new BitRunReader.\n+  ///\n+  /// \\param[in] bitmap source data\n+  /// \\param[in] start_offset bit offset into the source data\n+  /// \\param[in] length number of bits to copy\n+  BitRunReader(const uint8_t* bitmap, int64_t start_offset, int64_t length);\n+\n+  /// Returns a new BitRun containing the number of contiguous\n+  /// bits with the same value.  length == 0 indicates the\n+  /// end of the bitmap.\n+  BitRun NextRun() {\n+    if (ARROW_PREDICT_FALSE(position_ >= length_)) {\n+      return {/*length=*/0, false};\n+    }\n+    // This implementation relies on a efficient implementations of\n+    // CountTrailingZeros and assumes that runs are more often then\n+    // not.  The logic is to incrementally find the next bit change\n+    // from the current position.  This is done by zeroing all\n+    // bits in word_ up to position_ and using the TrailingZeroCount\n+    // to find the index of the next set bit.\n+\n+    // The runs alternate on each call, so flip the bit.\n+    current_run_bit_set_ = !current_run_bit_set_;\n+\n+    // Invert the word for proper use of CountTrailingZeros and\n+    // clear bits so CountTrailingZeros can do it magic.\n+    InvertRemainingBits();\n+\n+    int64_t start_position = position_;\n+    // Go  forward until the next change from unset to set.\n+    int64_t new_bits = BitUtil::CountTrailingZeros(word_) - (start_position % 64);\n+    position_ += new_bits;\n+\n+    if (ARROW_PREDICT_FALSE(position_ % 64 == 0) &&\n\nReview comment:\n       Thanks for the tip.  changing to position_ & 63.  Antoine, I'm not sure what you are thinking for maintaining a bitmask could you provide some more details?\n\n##########\nFile path: cpp/src/arrow/util/bit_util.h\n##########\n@@ -550,6 +558,109 @@ class BitmapReader {\n   int64_t bit_offset_;\n };\n \n+struct BitRun {\n+  int64_t length;\n+  // Whether bits are set at this point.\n+  bool set;\n+\n+  std::string ToString() const {\n+    return std::string(\"{Length: \") + std::to_string(length) +\n+           \", set=\" + std::to_string(set) + \"}\";\n+  }\n+};\n+\n+static inline bool operator==(const BitRun& lhs, const BitRun& rhs) {\n+  return lhs.length == rhs.length && lhs.set == rhs.set;\n+}\n+\n+class BitRunReaderScalar {\n+ public:\n+  BitRunReaderScalar(const uint8_t* bitmap, int64_t start_offset, int64_t length)\n+      : reader_(bitmap, start_offset, length) {}\n+\n+  BitRun NextRun() {\n+    BitRun rl = {/*length=*/0, reader_.IsSet()};\n+    // Advance while the values are equal and not at the end of list.\n+    while (reader_.position() < reader_.length() && reader_.IsSet() == rl.set) {\n+      rl.length++;\n+      reader_.Next();\n+    }\n+    return rl;\n+  }\n+\n+ private:\n+  BitmapReader reader_;\n+};\n+\n+#if defined(ARROW_LITTLE_ENDIAN)\n+/// A convenience class for counting the number of continguous set/unset bits\n+/// in a bitmap.\n+class ARROW_EXPORT BitRunReader {\n+ public:\n+  /// \\brief Constructs new BitRunReader.\n+  ///\n+  /// \\param[in] bitmap source data\n+  /// \\param[in] start_offset bit offset into the source data\n+  /// \\param[in] length number of bits to copy\n+  BitRunReader(const uint8_t* bitmap, int64_t start_offset, int64_t length);\n+\n+  /// Returns a new BitRun containing the number of contiguous\n+  /// bits with the same value.  length == 0 indicates the\n+  /// end of the bitmap.\n+  BitRun NextRun() {\n+    if (ARROW_PREDICT_FALSE(position_ >= length_)) {\n+      return {/*length=*/0, false};\n+    }\n+    // This implementation relies on a efficient implementations of\n+    // CountTrailingZeros and assumes that runs are more often then\n+    // not.  The logic is to incrementally find the next bit change\n+    // from the current position.  This is done by zeroing all\n+    // bits in word_ up to position_ and using the TrailingZeroCount\n+    // to find the index of the next set bit.\n+\n+    // The runs alternate on each call, so flip the bit.\n+    current_run_bit_set_ = !current_run_bit_set_;\n+\n+    // Invert the word for proper use of CountTrailingZeros and\n+    // clear bits so CountTrailingZeros can do it magic.\n+    InvertRemainingBits();\n+\n+    int64_t start_position = position_;\n+    // Go  forward until the next change from unset to set.\n+    int64_t new_bits = BitUtil::CountTrailingZeros(word_) - (start_position % 64);\n+    position_ += new_bits;\n+\n+    if (ARROW_PREDICT_FALSE(position_ % 64 == 0) &&\n+        ARROW_PREDICT_TRUE(position_ < length_)) {\n+      // Continue extending position while we can advance an entire word.\n+      // (updates position_ accordingly).\n+      AdvanceTillChange();\n\nReview comment:\n       By folded do you mean inline?  This make a significant performance hit on parquet benchmarks.  I added a comment.\n\n##########\nFile path: cpp/src/arrow/util/bit_util.h\n##########\n@@ -550,6 +558,109 @@ class BitmapReader {\n   int64_t bit_offset_;\n };\n \n+struct BitRun {\n+  int64_t length;\n+  // Whether bits are set at this point.\n+  bool set;\n+\n+  std::string ToString() const {\n+    return std::string(\"{Length: \") + std::to_string(length) +\n+           \", set=\" + std::to_string(set) + \"}\";\n+  }\n+};\n+\n+static inline bool operator==(const BitRun& lhs, const BitRun& rhs) {\n+  return lhs.length == rhs.length && lhs.set == rhs.set;\n+}\n+\n+class BitRunReaderScalar {\n+ public:\n+  BitRunReaderScalar(const uint8_t* bitmap, int64_t start_offset, int64_t length)\n+      : reader_(bitmap, start_offset, length) {}\n+\n+  BitRun NextRun() {\n+    BitRun rl = {/*length=*/0, reader_.IsSet()};\n+    // Advance while the values are equal and not at the end of list.\n+    while (reader_.position() < reader_.length() && reader_.IsSet() == rl.set) {\n+      rl.length++;\n+      reader_.Next();\n+    }\n+    return rl;\n+  }\n+\n+ private:\n+  BitmapReader reader_;\n+};\n+\n+#if defined(ARROW_LITTLE_ENDIAN)\n+/// A convenience class for counting the number of continguous set/unset bits\n+/// in a bitmap.\n+class ARROW_EXPORT BitRunReader {\n+ public:\n+  /// \\brief Constructs new BitRunReader.\n+  ///\n+  /// \\param[in] bitmap source data\n+  /// \\param[in] start_offset bit offset into the source data\n+  /// \\param[in] length number of bits to copy\n+  BitRunReader(const uint8_t* bitmap, int64_t start_offset, int64_t length);\n+\n+  /// Returns a new BitRun containing the number of contiguous\n+  /// bits with the same value.  length == 0 indicates the\n+  /// end of the bitmap.\n+  BitRun NextRun() {\n+    if (ARROW_PREDICT_FALSE(position_ >= length_)) {\n+      return {/*length=*/0, false};\n+    }\n+    // This implementation relies on a efficient implementations of\n+    // CountTrailingZeros and assumes that runs are more often then\n+    // not.  The logic is to incrementally find the next bit change\n+    // from the current position.  This is done by zeroing all\n+    // bits in word_ up to position_ and using the TrailingZeroCount\n+    // to find the index of the next set bit.\n+\n+    // The runs alternate on each call, so flip the bit.\n+    current_run_bit_set_ = !current_run_bit_set_;\n+\n+    // Invert the word for proper use of CountTrailingZeros and\n+    // clear bits so CountTrailingZeros can do it magic.\n+    InvertRemainingBits();\n+\n+    int64_t start_position = position_;\n+    // Go  forward until the next change from unset to set.\n+    int64_t new_bits = BitUtil::CountTrailingZeros(word_) - (start_position % 64);\n+    position_ += new_bits;\n+\n+    if (ARROW_PREDICT_FALSE(position_ % 64 == 0) &&\n+        ARROW_PREDICT_TRUE(position_ < length_)) {\n+      // Continue extending position while we can advance an entire word.\n+      // (updates position_ accordingly).\n+      AdvanceTillChange();\n+    }\n+\n+    return {/*length=*/position_ - start_position, current_run_bit_set_};\n+  }\n+\n+ private:\n+  void AdvanceTillChange();\n+  void InvertRemainingBits() {\n+    // Mask applied everying above the lowest bit.\n\nReview comment:\n       tried to clarify.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-03T06:05:32.212+0000",
                    "updated": "2020-06-03T06:05:32.212+0000",
                    "started": "2020-06-03T06:05:32.212+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "440610",
                    "issueId": "13299274"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 34800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@4e1a080d[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2bc82f95[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3e2445b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@69bc6735[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4cd40239[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@62b0ac5c[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@73e1fccd[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@79eea84b[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1547a885[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@7272343d[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@e89b92a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@229e440[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 34800,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Jun 25 14:33:10 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-06-25T14:33:10.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-8504/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2020-04-18T03:32:32.000+0000",
        "updated": "2020-06-25T14:33:10.000+0000",
        "timeoriginalestimate": null,
        "description": "For nullability data, in many cases nulls are not evenly distributed.\u00a0 In these cases it would be beneficial to have a mechanism to understand when runs of set/unset bits are encountered.\u00a0 One example of this is writing translating a bitmap to parquet definition levels .\r\n\r\n\u00a0\r\n\r\nAn implementation path could be to add this as method on Bitmap that makes an adaptor callback for VisitWords but I think at least for parquet an iterator API might be more appropriate (something that is easily stoppable/resumable).\r\n\r\n\u00a0\r\n\r\n\u00a0\r\n\r\n\u00a0",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "9h 40m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 34800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Add Run Length Reader",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13299274/comment/17144966",
                    "id": "17144966",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 7143\n[https://github.com/apache/arrow/pull/7143]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2020-06-25T14:33:10.269+0000",
                    "updated": "2020-06-25T14:33:10.269+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0dsc0:",
        "customfield_12314139": null
    }
}