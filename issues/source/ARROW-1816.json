{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13118606",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13118606",
    "key": "ARROW-1816",
    "fields": {
        "parent": {
            "id": "13099860",
            "key": "ARROW-1463",
            "self": "https://issues.apache.org/jira/rest/api/2/issue/13099860",
            "fields": {
                "summary": "[JAVA] Restructure ValueVector hierarchy to minimize compile-time generated code",
                "status": {
                    "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                    "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                    "name": "Resolved",
                    "id": "5",
                    "statusCategory": {
                        "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                        "id": 3,
                        "key": "done",
                        "colorName": "green",
                        "name": "Done"
                    }
                },
                "priority": {
                    "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                    "name": "Major",
                    "id": "3"
                },
                "issuetype": {
                    "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                    "id": "4",
                    "description": "An improvement or enhancement to an existing feature or task.",
                    "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                    "name": "Improvement",
                    "subtask": false,
                    "avatarId": 21140
                }
            }
        },
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12341352",
                "id": "12341352",
                "name": "0.8.0",
                "archived": false,
                "released": true,
                "releaseDate": "2017-12-18"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/2",
            "id": "2",
            "description": "The problem described is an issue which will never be fixed.",
            "name": "Won't Fix"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": null,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=icexelloss",
            "name": "icexelloss",
            "key": "icexelloss",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Li Jin",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
            "name": "Closed",
            "id": "6",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": null,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=icexelloss",
            "name": "icexelloss",
            "key": "icexelloss",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Li Jin",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=icexelloss",
            "name": "icexelloss",
            "key": "icexelloss",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Li Jin",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1816/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 0,
            "worklogs": []
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
            "id": "7",
            "description": "The sub-task of the issue",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
            "name": "Sub-task",
            "subtask": true,
            "avatarId": 21146
        },
        "timespent": null,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@213c5755[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@44aad350[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7ba7e0ec[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@69859c9b[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3fdfadc1[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@136374ae[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@570756ae[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@12a36991[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@50507fa1[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@589eb701[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@35c1289a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@3c273052[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": null,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Dec 07 22:44:36 UTC 2017",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2017-12-07T22:44:36.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1816/watchers",
            "watchCount": 3,
            "isWatching": false
        },
        "created": "2017-11-15T17:38:47.000+0000",
        "updated": "2017-12-07T22:44:36.000+0000",
        "timeoriginalestimate": null,
        "description": "Personally I think having 8 vector classes for timestamps is not great. This is discussed at some point during the PR:\r\n\r\nhttps://github.com/apache/arrow/pull/1203#discussion_r145241388",
        "customfield_10010": null,
        "timetracking": {},
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Java] Resolve new vector classes structure for timestamp, date and maybe interval",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13118606/comment/16257181",
                    "id": "16257181",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "I think the issue here is to avoid branching at the array cell for Java. If there is a switch branch at the hot path for accessing values, then the JIT may generate worse code",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2017-11-17T16:29:09.186+0000",
                    "updated": "2017-11-17T16:29:09.186+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13118606/comment/16257279",
                    "id": "16257279",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=icexelloss",
                        "name": "icexelloss",
                        "key": "icexelloss",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Li Jin",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "I will look at cell level a bit closer, my hunch is branching can be avoided by storing a timeUnit object in the vector:\r\nhttps://github.com/apache/arrow/blob/master/java/vector/src/main/java/org/apache/arrow/vector/NullableTimeStampNanoVector.java#L116\r\n\r\ntimeZone doesn't seem to be used in cell level either, but I need to look closer.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=icexelloss",
                        "name": "icexelloss",
                        "key": "icexelloss",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Li Jin",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-17T17:31:15.678+0000",
                    "updated": "2017-11-17T17:31:15.678+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13118606/comment/16258235",
                    "id": "16258235",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "icexelloss opened a new pull request #1330: wip: ARROW-1816: [Java] Resolve new vector classes structure for timestamp, date and maybe interval\t\nURL: https://github.com/apache/arrow/pull/1330\n \n \n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-18T22:00:55.727+0000",
                    "updated": "2017-11-18T22:00:55.727+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13118606/comment/16258236",
                    "id": "16258236",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "icexelloss commented on issue #1330: wip: ARROW-1816: [Java] Resolve new vector classes structure for timestamp, date and maybe interval\t\nURL: https://github.com/apache/arrow/pull/1330#issuecomment-345474775\n \n \n   This PR is a RFC.\r\n   \r\n   I think the resulting timestamp vector (NullableTimestampVector) is still branch-free on the cell level. cc @jacques-n can you take a look and let me know what you think?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-18T22:03:22.038+0000",
                    "updated": "2017-11-18T22:03:22.038+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13118606/comment/16258237",
                    "id": "16258237",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "icexelloss commented on issue #1330: wip: ARROW-1816: [Java] Resolve new vector classes structure for timestamp, date and maybe interval\t\nURL: https://github.com/apache/arrow/pull/1330#issuecomment-345474775\n \n \n   This PR is a RFC.\r\n   \r\n   I think the resulting timestamp vector (NullableTimestampVector) is still branch-free at the cell level. cc @jacques-n can you take a look and let me know what you think?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-18T22:03:31.973+0000",
                    "updated": "2017-11-18T22:03:31.973+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13118606/comment/16259351",
                    "id": "16259351",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "icexelloss commented on issue #1330: wip: ARROW-1816: [Java] Resolve new vector classes structure for timestamp, date and maybe interval\t\nURL: https://github.com/apache/arrow/pull/1330#issuecomment-345726910\n \n \n   @wesm @jacques-n @siddharthteotia Timing wise I should be able to make this into 0.8 if we are happy about this approach.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-20T15:19:38.587+0000",
                    "updated": "2017-11-20T15:19:38.587+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13118606/comment/16259428",
                    "id": "16259428",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "jacques-n commented on issue #1330: wip: ARROW-1816: [Java] Resolve new vector classes structure for timestamp, date and maybe interval\t\nURL: https://github.com/apache/arrow/pull/1330#issuecomment-345747624\n \n \n   On first look this makes sense. However, if I'm reading this right, the reader/writer implementations have lost the ability to set the right unit. How does one do this?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-20T16:23:20.024+0000",
                    "updated": "2017-11-20T16:23:20.024+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13118606/comment/16259467",
                    "id": "16259467",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "icexelloss commented on issue #1330: wip: ARROW-1816: [Java] Resolve new vector classes structure for timestamp, date and maybe interval\t\nURL: https://github.com/apache/arrow/pull/1330#issuecomment-345757388\n \n \n   @jacques-n I am fixing that part. \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-20T16:53:01.569+0000",
                    "updated": "2017-11-20T16:53:01.569+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13118606/comment/16261295",
                    "id": "16261295",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "BryanCutler commented on a change in pull request #1330: wip: ARROW-1816: [Java] Resolve new vector classes structure for timestamp, date and maybe interval\t\nURL: https://github.com/apache/arrow/pull/1330#discussion_r152361482\n \n \n\n ##########\n File path: java/vector/src/main/codegen/data/ValueVectorTypes.tdd\n ##########\n @@ -116,7 +100,7 @@\n         {\n           class: \"Decimal\",\n           maxPrecisionDigits: 38, nDecimalDigits: 4, friendlyType: \"BigDecimal\",\n-          typeParams: [ {name: \"scale\", type: \"int\"}, { name: \"precision\", type: \"int\"}],\n+          typeParams: [ { name: \"precision\", type: \"int\"}, {name: \"scale\", type: \"int\"} ],\n \n Review comment:\n   These were previously flipped in ARROW-1091 and then flipped again in ARROW-1092.  I thought they were right already, are they not?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-21T19:02:03.499+0000",
                    "updated": "2017-11-21T19:02:03.499+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13118606/comment/16261296",
                    "id": "16261296",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "BryanCutler commented on a change in pull request #1330: wip: ARROW-1816: [Java] Resolve new vector classes structure for timestamp, date and maybe interval\t\nURL: https://github.com/apache/arrow/pull/1330#discussion_r152362306\n \n \n\n ##########\n File path: java/vector/src/main/codegen/data/ValueVectorTypes.tdd\n ##########\n @@ -73,26 +73,10 @@\n         { class: \"UInt8\" },\n         { class: \"Float8\",           javaType: \"double\", boxedType: \"Double\", fields: [{name: \"value\", type: \"double\"}] },\n         { class: \"DateMilli\",        javaType: \"long\",                      friendlyType: \"LocalDateTime\" },\n-        { class: \"TimeStampSec\",     javaType: \"long\",   boxedType: \"Long\", friendlyType: \"LocalDateTime\" },\n-        { class: \"TimeStampMilli\",   javaType: \"long\",   boxedType: \"Long\", friendlyType: \"LocalDateTime\" },\n-        { class: \"TimeStampMicro\",   javaType: \"long\",   boxedType: \"Long\", friendlyType: \"LocalDateTime\" },\n-        { class: \"TimeStampNano\",    javaType: \"long\",   boxedType: \"Long\", friendlyType: \"LocalDateTime\" },\n-        { class: \"TimeStampSecTZ\", javaType: \"long\",   boxedType: \"Long\",\n-                                     typeParams: [ {name: \"timezone\", type: \"String\"} ],\n-                                     arrowType: \"org.apache.arrow.vector.types.pojo.ArrowType.Timestamp\",\n-                                     arrowTypeConstructorParams: [\"org.apache.arrow.vector.types.TimeUnit.SECOND\", \"timezone\"] },\n-        { class: \"TimeStampMilliTZ\", javaType: \"long\",   boxedType: \"Long\",\n-                                     typeParams: [ {name: \"timezone\", type: \"String\"} ],\n-                                     arrowType: \"org.apache.arrow.vector.types.pojo.ArrowType.Timestamp\",\n-                                     arrowTypeConstructorParams: [\"org.apache.arrow.vector.types.TimeUnit.MILLISECOND\", \"timezone\"] },\n-        { class: \"TimeStampMicroTZ\", javaType: \"long\",   boxedType: \"Long\",\n-                                     typeParams: [ {name: \"timezone\", type: \"String\"} ],\n-                                     arrowType: \"org.apache.arrow.vector.types.pojo.ArrowType.Timestamp\",\n-                                     arrowTypeConstructorParams: [\"org.apache.arrow.vector.types.TimeUnit.MICROSECOND\", \"timezone\"] },\n-        { class: \"TimeStampNanoTZ\", javaType: \"long\",   boxedType: \"Long\",\n-                                     typeParams: [ {name: \"timezone\", type: \"String\"} ],\n-                                     arrowType: \"org.apache.arrow.vector.types.pojo.ArrowType.Timestamp\",\n-                                     arrowTypeConstructorParams: [\"org.apache.arrow.vector.types.TimeUnit.NANOSECOND\", \"timezone\"] },\n+        { class: \"Timestamp\",        javaType: \"long\",   boxedType: \"Long\", friendlyType: \"LocalDateTime\"\n \n Review comment:\n   Is the `friendlyType` param still used any more?  If so then will `LocalDateTime` work with a timezone set?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-21T19:02:03.500+0000",
                    "updated": "2017-11-21T19:02:03.500+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13118606/comment/16261297",
                    "id": "16261297",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "BryanCutler commented on a change in pull request #1330: wip: ARROW-1816: [Java] Resolve new vector classes structure for timestamp, date and maybe interval\t\nURL: https://github.com/apache/arrow/pull/1330#discussion_r152366389\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/NullableTimestampVector.java\n ##########\n @@ -18,30 +18,83 @@\n \n package org.apache.arrow.vector;\n \n+import com.google.common.base.Preconditions;\n+import org.apache.arrow.vector.types.TimeUnit;\n+import org.joda.time.DateTimeZone;\n+\n import io.netty.buffer.ArrowBuf;\n import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.vector.complex.impl.TimestampReaderImpl;\n+import org.apache.arrow.vector.complex.reader.FieldReader;\n+import org.apache.arrow.vector.holders.NullableTimestampHolder;\n+import org.apache.arrow.vector.holders.TimestampHolder;\n+import org.apache.arrow.vector.types.Types;\n+import org.apache.arrow.vector.types.pojo.ArrowType;\n import org.apache.arrow.vector.types.pojo.FieldType;\n import org.apache.arrow.vector.util.TransferPair;\n+import org.joda.time.LocalDateTime;\n \n Review comment:\n   minor: maybe move this import up with DateTimeZone, and move the TimeUnit down with other arrow\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-21T19:02:03.501+0000",
                    "updated": "2017-11-21T19:02:03.501+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13118606/comment/16261298",
                    "id": "16261298",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "BryanCutler commented on a change in pull request #1330: wip: ARROW-1816: [Java] Resolve new vector classes structure for timestamp, date and maybe interval\t\nURL: https://github.com/apache/arrow/pull/1330#discussion_r152363389\n \n \n\n ##########\n File path: java/vector/src/main/codegen/templates/MapWriters.java\n ##########\n @@ -242,7 +242,7 @@ public void end() {\n               <#assign constructorParams = minor.arrowTypeConstructorParams />\n             <#else>\n               <#assign constructorParams = [] />\n-              <#list minor.typeParams?reverse as typeParam>\n+              <#list minor.typeParams as typeParam>\n \n Review comment:\n   Why change this?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-21T19:02:03.553+0000",
                    "updated": "2017-11-21T19:02:03.553+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13118606/comment/16261299",
                    "id": "16261299",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "BryanCutler commented on a change in pull request #1330: wip: ARROW-1816: [Java] Resolve new vector classes structure for timestamp, date and maybe interval\t\nURL: https://github.com/apache/arrow/pull/1330#discussion_r152370888\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/types/TimeUnit.java\n ##########\n @@ -19,10 +19,10 @@\n package org.apache.arrow.vector.types;\n \n public enum TimeUnit {\n-  SECOND(org.apache.arrow.flatbuf.TimeUnit.SECOND),\n-  MILLISECOND(org.apache.arrow.flatbuf.TimeUnit.MILLISECOND),\n-  MICROSECOND(org.apache.arrow.flatbuf.TimeUnit.MICROSECOND),\n-  NANOSECOND(org.apache.arrow.flatbuf.TimeUnit.NANOSECOND);\n+  SECOND(org.apache.arrow.flatbuf.TimeUnit.SECOND, java.util.concurrent.TimeUnit.SECONDS),\n+  MILLISECOND(org.apache.arrow.flatbuf.TimeUnit.MILLISECOND, java.util.concurrent.TimeUnit.MILLISECONDS),\n+  MICROSECOND(org.apache.arrow.flatbuf.TimeUnit.MICROSECOND, java.util.concurrent.TimeUnit.MICROSECONDS),\n+  NANOSECOND(org.apache.arrow.flatbuf.TimeUnit.NANOSECOND, java.util.concurrent.TimeUnit.NANOSECONDS);\n \n Review comment:\n   Would it be better to leave this as it was and just put a switch statement in `getTimeUnit` to return the corresponding java TimeUnit?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-21T19:02:03.558+0000",
                    "updated": "2017-11-21T19:02:03.558+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13118606/comment/16261300",
                    "id": "16261300",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "BryanCutler commented on a change in pull request #1330: wip: ARROW-1816: [Java] Resolve new vector classes structure for timestamp, date and maybe interval\t\nURL: https://github.com/apache/arrow/pull/1330#discussion_r152365593\n \n \n\n ##########\n File path: java/vector/src/main/codegen/templates/UnionVector.java\n ##########\n @@ -138,16 +138,20 @@ private void setReaderAndWriterIndex() {\n      throw new UnsupportedOperationException(\"There are no inner vectors. Use geFieldBuffers\");\n   }\n \n-  private String fieldName(MinorType type) {\n-    return type.name().toLowerCase();\n+  private String fieldName(ArrowType type) {\n+    return Types.getMinorTypeForArrowType(type).name().toLowerCase();\n   }\n \n-  private FieldType fieldType(MinorType type) {\n-    return FieldType.nullable(type.getType());\n-  }\n+  // private FieldType fieldType(MinorType type) {\n+  // return FieldType.nullable(type.getType());\n+  // }\n+\n+  // private <T extends FieldVector> T addOrGet(MinorType minorType, Class<T> c) {\n+  // return internalMap.addOrGet(fieldName(minorType), fieldType(minorType), c);\n+  // }\n \n Review comment:\n   forgot to remove?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-21T19:02:03.615+0000",
                    "updated": "2017-11-21T19:02:03.615+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13118606/comment/16261301",
                    "id": "16261301",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "BryanCutler commented on a change in pull request #1330: wip: ARROW-1816: [Java] Resolve new vector classes structure for timestamp, date and maybe interval\t\nURL: https://github.com/apache/arrow/pull/1330#discussion_r152369556\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/NullableTimestampVector.java\n ##########\n @@ -124,6 +177,32 @@ public void setSafe(int index, long value) {\n     set(index, value);\n   }\n \n+  public void setSafe(int index, NullableTimestampHolder holder) {\n \n Review comment:\n   Do these set methods need to check that the type params are compatible?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-21T19:02:03.655+0000",
                    "updated": "2017-11-21T19:02:03.655+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13118606/comment/16261302",
                    "id": "16261302",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "BryanCutler commented on a change in pull request #1330: wip: ARROW-1816: [Java] Resolve new vector classes structure for timestamp, date and maybe interval\t\nURL: https://github.com/apache/arrow/pull/1330#discussion_r152362623\n \n \n\n ##########\n File path: java/vector/pom.xml\n ##########\n @@ -135,6 +135,13 @@\n         <groupId>org.apache.drill.tools</groupId>\n         <artifactId>drill-fmpp-maven-plugin</artifactId>\n         <version>1.5.0</version>\n+        <dependencies>\n+          <dependency>\n+            <groupId>org.freemarker</groupId>\n+            <artifactId>freemarker</artifactId>\n+            <version>2.3.23</version>\n+          </dependency>\n+        </dependencies>\n \n Review comment:\n   How come this needs to be added now?  If it does can it be scoped to compile phase?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-21T19:02:03.656+0000",
                    "updated": "2017-11-21T19:02:03.656+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13118606/comment/16261680",
                    "id": "16261680",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "icexelloss commented on a change in pull request #1330: wip: ARROW-1816: [Java] Resolve new vector classes structure for timestamp, date and maybe interval\t\nURL: https://github.com/apache/arrow/pull/1330#discussion_r152433253\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/NullableTimestampVector.java\n ##########\n @@ -18,30 +18,83 @@\n \n package org.apache.arrow.vector;\n \n+import com.google.common.base.Preconditions;\n+import org.apache.arrow.vector.types.TimeUnit;\n+import org.joda.time.DateTimeZone;\n+\n import io.netty.buffer.ArrowBuf;\n import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.vector.complex.impl.TimestampReaderImpl;\n+import org.apache.arrow.vector.complex.reader.FieldReader;\n+import org.apache.arrow.vector.holders.NullableTimestampHolder;\n+import org.apache.arrow.vector.holders.TimestampHolder;\n+import org.apache.arrow.vector.types.Types;\n+import org.apache.arrow.vector.types.pojo.ArrowType;\n import org.apache.arrow.vector.types.pojo.FieldType;\n import org.apache.arrow.vector.util.TransferPair;\n+import org.joda.time.LocalDateTime;\n \n Review comment:\n   We really need that checkstyle :)\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-21T23:41:16.927+0000",
                    "updated": "2017-11-21T23:41:16.927+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13118606/comment/16261692",
                    "id": "16261692",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "icexelloss commented on issue #1330: wip: ARROW-1816: [Java] Resolve new vector classes structure for timestamp, date and maybe interval\t\nURL: https://github.com/apache/arrow/pull/1330#issuecomment-346198938\n \n \n   @jacques-n During the refactoring, I discovered that union vector doesn't support types with type params (i.e. Decimal and Timestamp), so I fixed that as well. Now union vectors support decimal as well.\r\n   \r\n   The PR now includes two major changes:\r\n   * Consolidate all timestamp vectors into a single vector class\r\n   * Add support for non-simple minor type (i.e., decimal, timestamp) in Union\r\n   \r\n   Most of the template change is to support types with type params, most of them replaces:\r\n   ```\r\n   <#if !minor.typeParams?? >\r\n   // handle types with no type params\r\n   </#if>\r\n   ```\r\n   to\r\n   ```\r\n   <#if !minor.typeParams?? >\r\n   // handle types with no type params\r\n   <#else>\r\n   // handle types with type params\r\n   </#if>\r\n   ```\r\n   Please take a look when you have chance. Thanks! Hopefully we can clean this up and merge the week after Thanksgiving.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-21T23:51:54.553+0000",
                    "updated": "2017-11-21T23:51:54.553+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13118606/comment/16261694",
                    "id": "16261694",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "icexelloss commented on issue #1330: wip: ARROW-1816: [Java] Resolve new vector classes structure for timestamp, date and maybe interval\t\nURL: https://github.com/apache/arrow/pull/1330#issuecomment-346199159\n \n \n   @BryanCutler Thanks for the code review. I will clean this up.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-21T23:53:19.843+0000",
                    "updated": "2017-11-21T23:53:19.843+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13118606/comment/16261696",
                    "id": "16261696",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "icexelloss commented on a change in pull request #1330: wip: ARROW-1816: [Java] Resolve new vector classes structure for timestamp, date and maybe interval\t\nURL: https://github.com/apache/arrow/pull/1330#discussion_r152435367\n \n \n\n ##########\n File path: java/vector/pom.xml\n ##########\n @@ -135,6 +135,13 @@\n         <groupId>org.apache.drill.tools</groupId>\n         <artifactId>drill-fmpp-maven-plugin</artifactId>\n         <version>1.5.0</version>\n+        <dependencies>\n+          <dependency>\n+            <groupId>org.freemarker</groupId>\n+            <artifactId>freemarker</artifactId>\n+            <version>2.3.23</version>\n+          </dependency>\n+        </dependencies>\n \n Review comment:\n   This should just be build dependency. Before it was using 2.3.21.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-21T23:54:34.553+0000",
                    "updated": "2017-11-21T23:54:34.553+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13118606/comment/16261703",
                    "id": "16261703",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "icexelloss commented on a change in pull request #1330: wip: ARROW-1816: [Java] Resolve new vector classes structure for timestamp, date and maybe interval\t\nURL: https://github.com/apache/arrow/pull/1330#discussion_r152436102\n \n \n\n ##########\n File path: java/vector/src/main/codegen/data/ValueVectorTypes.tdd\n ##########\n @@ -73,26 +73,10 @@\n         { class: \"UInt8\" },\n         { class: \"Float8\",           javaType: \"double\", boxedType: \"Double\", fields: [{name: \"value\", type: \"double\"}] },\n         { class: \"DateMilli\",        javaType: \"long\",                      friendlyType: \"LocalDateTime\" },\n-        { class: \"TimeStampSec\",     javaType: \"long\",   boxedType: \"Long\", friendlyType: \"LocalDateTime\" },\n-        { class: \"TimeStampMilli\",   javaType: \"long\",   boxedType: \"Long\", friendlyType: \"LocalDateTime\" },\n-        { class: \"TimeStampMicro\",   javaType: \"long\",   boxedType: \"Long\", friendlyType: \"LocalDateTime\" },\n-        { class: \"TimeStampNano\",    javaType: \"long\",   boxedType: \"Long\", friendlyType: \"LocalDateTime\" },\n-        { class: \"TimeStampSecTZ\", javaType: \"long\",   boxedType: \"Long\",\n-                                     typeParams: [ {name: \"timezone\", type: \"String\"} ],\n-                                     arrowType: \"org.apache.arrow.vector.types.pojo.ArrowType.Timestamp\",\n-                                     arrowTypeConstructorParams: [\"org.apache.arrow.vector.types.TimeUnit.SECOND\", \"timezone\"] },\n-        { class: \"TimeStampMilliTZ\", javaType: \"long\",   boxedType: \"Long\",\n-                                     typeParams: [ {name: \"timezone\", type: \"String\"} ],\n-                                     arrowType: \"org.apache.arrow.vector.types.pojo.ArrowType.Timestamp\",\n-                                     arrowTypeConstructorParams: [\"org.apache.arrow.vector.types.TimeUnit.MILLISECOND\", \"timezone\"] },\n-        { class: \"TimeStampMicroTZ\", javaType: \"long\",   boxedType: \"Long\",\n-                                     typeParams: [ {name: \"timezone\", type: \"String\"} ],\n-                                     arrowType: \"org.apache.arrow.vector.types.pojo.ArrowType.Timestamp\",\n-                                     arrowTypeConstructorParams: [\"org.apache.arrow.vector.types.TimeUnit.MICROSECOND\", \"timezone\"] },\n-        { class: \"TimeStampNanoTZ\", javaType: \"long\",   boxedType: \"Long\",\n-                                     typeParams: [ {name: \"timezone\", type: \"String\"} ],\n-                                     arrowType: \"org.apache.arrow.vector.types.pojo.ArrowType.Timestamp\",\n-                                     arrowTypeConstructorParams: [\"org.apache.arrow.vector.types.TimeUnit.NANOSECOND\", \"timezone\"] },\n+        { class: \"Timestamp\",        javaType: \"long\",   boxedType: \"Long\", friendlyType: \"LocalDateTime\"\n \n Review comment:\n   It is used. The way it currently works is if timezone is specified, if will just drop the timezone.\r\n   \r\n   For example:\r\n   ```\r\n   value = 0, timezone = null\r\n   ```\r\n   returns `LocalDateTime(1970-01-01 00:00:00)`\r\n   \r\n   ```\r\n   value = 0, timezone = \"America/New_York\"\r\n   ```\r\n   returns `LocalDateTime(1969-12-31 19:00:00)`\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-21T23:59:17.097+0000",
                    "updated": "2017-11-21T23:59:17.097+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13118606/comment/16261704",
                    "id": "16261704",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "icexelloss commented on a change in pull request #1330: wip: ARROW-1816: [Java] Resolve new vector classes structure for timestamp, date and maybe interval\t\nURL: https://github.com/apache/arrow/pull/1330#discussion_r152436102\n \n \n\n ##########\n File path: java/vector/src/main/codegen/data/ValueVectorTypes.tdd\n ##########\n @@ -73,26 +73,10 @@\n         { class: \"UInt8\" },\n         { class: \"Float8\",           javaType: \"double\", boxedType: \"Double\", fields: [{name: \"value\", type: \"double\"}] },\n         { class: \"DateMilli\",        javaType: \"long\",                      friendlyType: \"LocalDateTime\" },\n-        { class: \"TimeStampSec\",     javaType: \"long\",   boxedType: \"Long\", friendlyType: \"LocalDateTime\" },\n-        { class: \"TimeStampMilli\",   javaType: \"long\",   boxedType: \"Long\", friendlyType: \"LocalDateTime\" },\n-        { class: \"TimeStampMicro\",   javaType: \"long\",   boxedType: \"Long\", friendlyType: \"LocalDateTime\" },\n-        { class: \"TimeStampNano\",    javaType: \"long\",   boxedType: \"Long\", friendlyType: \"LocalDateTime\" },\n-        { class: \"TimeStampSecTZ\", javaType: \"long\",   boxedType: \"Long\",\n-                                     typeParams: [ {name: \"timezone\", type: \"String\"} ],\n-                                     arrowType: \"org.apache.arrow.vector.types.pojo.ArrowType.Timestamp\",\n-                                     arrowTypeConstructorParams: [\"org.apache.arrow.vector.types.TimeUnit.SECOND\", \"timezone\"] },\n-        { class: \"TimeStampMilliTZ\", javaType: \"long\",   boxedType: \"Long\",\n-                                     typeParams: [ {name: \"timezone\", type: \"String\"} ],\n-                                     arrowType: \"org.apache.arrow.vector.types.pojo.ArrowType.Timestamp\",\n-                                     arrowTypeConstructorParams: [\"org.apache.arrow.vector.types.TimeUnit.MILLISECOND\", \"timezone\"] },\n-        { class: \"TimeStampMicroTZ\", javaType: \"long\",   boxedType: \"Long\",\n-                                     typeParams: [ {name: \"timezone\", type: \"String\"} ],\n-                                     arrowType: \"org.apache.arrow.vector.types.pojo.ArrowType.Timestamp\",\n-                                     arrowTypeConstructorParams: [\"org.apache.arrow.vector.types.TimeUnit.MICROSECOND\", \"timezone\"] },\n-        { class: \"TimeStampNanoTZ\", javaType: \"long\",   boxedType: \"Long\",\n-                                     typeParams: [ {name: \"timezone\", type: \"String\"} ],\n-                                     arrowType: \"org.apache.arrow.vector.types.pojo.ArrowType.Timestamp\",\n-                                     arrowTypeConstructorParams: [\"org.apache.arrow.vector.types.TimeUnit.NANOSECOND\", \"timezone\"] },\n+        { class: \"Timestamp\",        javaType: \"long\",   boxedType: \"Long\", friendlyType: \"LocalDateTime\"\n \n Review comment:\n   It is used. The way it currently works is if timezone is specified, if will return the `LocalDateTime` in the specified time zone.\r\n   \r\n   For example:\r\n   ```\r\n   value = 0, timezone = null\r\n   ```\r\n   returns `LocalDateTime(1970-01-01 00:00:00)`\r\n   \r\n   ```\r\n   value = 0, timezone = \"America/New_York\"\r\n   ```\r\n   returns `LocalDateTime(1969-12-31 19:00:00)`\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-21T23:59:57.791+0000",
                    "updated": "2017-11-21T23:59:57.791+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13118606/comment/16261712",
                    "id": "16261712",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "icexelloss commented on a change in pull request #1330: wip: ARROW-1816: [Java] Resolve new vector classes structure for timestamp, date and maybe interval\t\nURL: https://github.com/apache/arrow/pull/1330#discussion_r152436539\n \n \n\n ##########\n File path: java/vector/src/main/codegen/templates/FixedValueVectors.java\n ##########\n @@ -56,7 +56,7 @@\n   private int allocationMonitor = 0;\n   <#if minor.typeParams??>\n \n-    <#assign typeParams = minor.typeParams?reverse />\n+    <#assign typeParams = minor.typeParams />\n \n Review comment:\n   Making type params order more sane...\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-22T00:02:01.110+0000",
                    "updated": "2017-11-22T00:02:01.110+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13118606/comment/16261714",
                    "id": "16261714",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "icexelloss commented on a change in pull request #1330: wip: ARROW-1816: [Java] Resolve new vector classes structure for timestamp, date and maybe interval\t\nURL: https://github.com/apache/arrow/pull/1330#discussion_r152436633\n \n \n\n ##########\n File path: java/vector/src/main/codegen/data/ValueVectorTypes.tdd\n ##########\n @@ -116,7 +100,7 @@\n         {\n           class: \"Decimal\",\n           maxPrecisionDigits: 38, nDecimalDigits: 4, friendlyType: \"BigDecimal\",\n-          typeParams: [ {name: \"scale\", type: \"int\"}, { name: \"precision\", type: \"int\"}],\n+          typeParams: [ { name: \"precision\", type: \"int\"}, {name: \"scale\", type: \"int\"} ],\n \n Review comment:\n   The reverse ordering the these typeParams are driving me nuts... I changed it such that they follow the same order everywhere. Also see: https://github.com/apache/arrow/pull/1330/files#r152436539\r\n   \r\n   The end results are the same because flipped twice..\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-22T00:02:37.670+0000",
                    "updated": "2017-11-22T00:02:37.670+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13118606/comment/16261720",
                    "id": "16261720",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "icexelloss commented on a change in pull request #1330: wip: ARROW-1816: [Java] Resolve new vector classes structure for timestamp, date and maybe interval\t\nURL: https://github.com/apache/arrow/pull/1330#discussion_r152437398\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/NullableTimestampVector.java\n ##########\n @@ -124,6 +177,32 @@ public void setSafe(int index, long value) {\n     set(index, value);\n   }\n \n+  public void setSafe(int index, NullableTimestampHolder holder) {\n \n Review comment:\n   Good point. Although it does add branching on the array. Maybe don't check for performance reason, not sure.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-22T00:07:39.866+0000",
                    "updated": "2017-11-22T00:07:39.866+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13118606/comment/16261723",
                    "id": "16261723",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "icexelloss commented on a change in pull request #1330: wip: ARROW-1816: [Java] Resolve new vector classes structure for timestamp, date and maybe interval\t\nURL: https://github.com/apache/arrow/pull/1330#discussion_r152437699\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/types/TimeUnit.java\n ##########\n @@ -19,10 +19,10 @@\n package org.apache.arrow.vector.types;\n \n public enum TimeUnit {\n-  SECOND(org.apache.arrow.flatbuf.TimeUnit.SECOND),\n-  MILLISECOND(org.apache.arrow.flatbuf.TimeUnit.MILLISECOND),\n-  MICROSECOND(org.apache.arrow.flatbuf.TimeUnit.MICROSECOND),\n-  NANOSECOND(org.apache.arrow.flatbuf.TimeUnit.NANOSECOND);\n+  SECOND(org.apache.arrow.flatbuf.TimeUnit.SECOND, java.util.concurrent.TimeUnit.SECONDS),\n+  MILLISECOND(org.apache.arrow.flatbuf.TimeUnit.MILLISECOND, java.util.concurrent.TimeUnit.MILLISECONDS),\n+  MICROSECOND(org.apache.arrow.flatbuf.TimeUnit.MICROSECOND, java.util.concurrent.TimeUnit.MICROSECONDS),\n+  NANOSECOND(org.apache.arrow.flatbuf.TimeUnit.NANOSECOND, java.util.concurrent.TimeUnit.NANOSECONDS);\n \n Review comment:\n   Not sure why that's better...Why do you think so? Maybe I missed sth.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-22T00:10:08.929+0000",
                    "updated": "2017-11-22T00:10:08.929+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13118606/comment/16261726",
                    "id": "16261726",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "icexelloss commented on a change in pull request #1330: wip: ARROW-1816: [Java] Resolve new vector classes structure for timestamp, date and maybe interval\t\nURL: https://github.com/apache/arrow/pull/1330#discussion_r152437974\n \n \n\n ##########\n File path: java/vector/src/main/codegen/templates/MapWriters.java\n ##########\n @@ -242,7 +242,7 @@ public void end() {\n               <#assign constructorParams = minor.arrowTypeConstructorParams />\n             <#else>\n               <#assign constructorParams = [] />\n-              <#list minor.typeParams?reverse as typeParam>\n+              <#list minor.typeParams as typeParam>\n \n Review comment:\n   Making param order more sane.. It's driving me nuts we are flipping the ordering twice.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-22T00:11:50.622+0000",
                    "updated": "2017-11-22T00:11:50.622+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13118606/comment/16261939",
                    "id": "16261939",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "icexelloss commented on issue #1330: wip: ARROW-1816: [Java] Resolve new vector classes structure for timestamp, date and maybe interval\t\nURL: https://github.com/apache/arrow/pull/1330#issuecomment-346236125\n \n \n   @BryanCutler I am a bit reluctant to check `unit` and `timezone` if value holders because of performance reasons. This is currently not checked with other type with type params either, such as decimal. We should maybe visit this problem as a whole as follow up?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-22T03:55:04.405+0000",
                    "updated": "2017-11-22T03:55:04.405+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13118606/comment/16261941",
                    "id": "16261941",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "icexelloss commented on issue #1330: wip: ARROW-1816: [Java] Resolve new vector classes structure for timestamp, date and maybe interval\t\nURL: https://github.com/apache/arrow/pull/1330#issuecomment-346236125\n \n \n   @BryanCutler I am a bit reluctant to check `unit` and `timezone` i  value holders because of performance reasons. This is currently not checked with other type with type params either, such as decimal. We should maybe visit this problem as a whole as follow up?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-22T03:55:15.440+0000",
                    "updated": "2017-11-22T03:55:15.440+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13118606/comment/16262805",
                    "id": "16262805",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "icexelloss commented on issue #1330: ARROW-1816: [Java] Resolve new vector classes structure for timestamp, date and maybe interval\t\nURL: https://github.com/apache/arrow/pull/1330#issuecomment-346236125\n \n \n   @BryanCutler I am a bit reluctant to check `unit` and `timezone` in  value holders because of performance reasons. This is currently not checked with other type with type params either, such as decimal. We should maybe visit this problem as a whole as follow up?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-22T15:37:47.165+0000",
                    "updated": "2017-11-22T15:37:47.165+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13118606/comment/16262907",
                    "id": "16262907",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "BryanCutler commented on issue #1330: ARROW-1816: [Java] Resolve new vector classes structure for timestamp, date and maybe interval\t\nURL: https://github.com/apache/arrow/pull/1330#issuecomment-346408827\n \n \n   > @BryanCutler I am a bit reluctant to check unit and timezone in value holders because of performance reasons.\r\n   \r\n   Yeah it doesn't make sense to do all these checks each access, so I just wanted to pose the question to make sure it wasn't a blocker for doing this refactor.  I don't use the holder APIs so it's fine with me but maybe @siddharthteotia has some thoughts on this?\r\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-22T16:48:43.297+0000",
                    "updated": "2017-11-22T16:48:43.297+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13118606/comment/16262940",
                    "id": "16262940",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "BryanCutler commented on a change in pull request #1330: ARROW-1816: [Java] Resolve new vector classes structure for timestamp, date and maybe interval\t\nURL: https://github.com/apache/arrow/pull/1330#discussion_r152630009\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/types/TimeUnit.java\n ##########\n @@ -19,10 +19,10 @@\n package org.apache.arrow.vector.types;\n \n public enum TimeUnit {\n-  SECOND(org.apache.arrow.flatbuf.TimeUnit.SECOND),\n-  MILLISECOND(org.apache.arrow.flatbuf.TimeUnit.MILLISECOND),\n-  MICROSECOND(org.apache.arrow.flatbuf.TimeUnit.MICROSECOND),\n-  NANOSECOND(org.apache.arrow.flatbuf.TimeUnit.NANOSECOND);\n+  SECOND(org.apache.arrow.flatbuf.TimeUnit.SECOND, java.util.concurrent.TimeUnit.SECONDS),\n+  MILLISECOND(org.apache.arrow.flatbuf.TimeUnit.MILLISECOND, java.util.concurrent.TimeUnit.MILLISECONDS),\n+  MICROSECOND(org.apache.arrow.flatbuf.TimeUnit.MICROSECOND, java.util.concurrent.TimeUnit.MICROSECONDS),\n+  NANOSECOND(org.apache.arrow.flatbuf.TimeUnit.NANOSECOND, java.util.concurrent.TimeUnit.NANOSECONDS);\n \n Review comment:\n   Well before the enum was defined by the flatbufId, but here it is the flatbufId and the Java TimeUnit which is redundant information.  So a check for equality would have to look at both of these fields.  Maybe not a big deal though..\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-22T17:19:50.044+0000",
                    "updated": "2017-11-22T17:19:50.044+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13118606/comment/16263038",
                    "id": "16263038",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "icexelloss commented on a change in pull request #1330: ARROW-1816: [Java] Resolve new vector classes structure for timestamp, date and maybe interval\t\nURL: https://github.com/apache/arrow/pull/1330#discussion_r152642480\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/types/TimeUnit.java\n ##########\n @@ -19,10 +19,10 @@\n package org.apache.arrow.vector.types;\n \n public enum TimeUnit {\n-  SECOND(org.apache.arrow.flatbuf.TimeUnit.SECOND),\n-  MILLISECOND(org.apache.arrow.flatbuf.TimeUnit.MILLISECOND),\n-  MICROSECOND(org.apache.arrow.flatbuf.TimeUnit.MICROSECOND),\n-  NANOSECOND(org.apache.arrow.flatbuf.TimeUnit.NANOSECOND);\n+  SECOND(org.apache.arrow.flatbuf.TimeUnit.SECOND, java.util.concurrent.TimeUnit.SECONDS),\n+  MILLISECOND(org.apache.arrow.flatbuf.TimeUnit.MILLISECOND, java.util.concurrent.TimeUnit.MILLISECONDS),\n+  MICROSECOND(org.apache.arrow.flatbuf.TimeUnit.MICROSECOND, java.util.concurrent.TimeUnit.MICROSECONDS),\n+  NANOSECOND(org.apache.arrow.flatbuf.TimeUnit.NANOSECOND, java.util.concurrent.TimeUnit.NANOSECONDS);\n \n Review comment:\n   Enum equality should just be identity check:\r\n   https://stackoverflow.com/questions/533922/is-it-ok-to-use-on-enums-in-java\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-22T18:12:45.844+0000",
                    "updated": "2017-11-22T18:12:45.844+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13118606/comment/16264683",
                    "id": "16264683",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on a change in pull request #1330: ARROW-1816: [Java] Resolve new vector classes structure for timestamp, date and maybe interval\t\nURL: https://github.com/apache/arrow/pull/1330#discussion_r152859038\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/NullableTimestampVector.java\n ##########\n @@ -179,6 +258,37 @@ public static long get(final ArrowBuf buffer, final int index) {\n     return buffer.getLong(index * TYPE_WIDTH);\n   }\n \n+  public void get(int index, NullableTimestampHolder holder) {\n+    if (isSet(index) == 0) {\n+      holder.isSet = 0;\n+      return;\n+    }\n+    holder.isSet = 1;\n+    holder.value = valueBuffer.getLong(index * TYPE_WIDTH);\n+  }\n+\n+  @Override\n+  public LocalDateTime getObject(int index) {\n+    if (isSet(index) == 0) {\n+      return null;\n+    } else {\n+      long millis = unit.getTimeUnit().toMillis(get(index));\n \n Review comment:\n   Would it be more efficient to have a `toMillis` method on `TimeUnit` (and encapsulate this detail per law of demeter)? I guess we need to run some microbenchmarks to be able to judge performance\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-23T18:40:02.397+0000",
                    "updated": "2017-11-23T18:40:02.397+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13118606/comment/16269098",
                    "id": "16269098",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "icexelloss commented on a change in pull request #1330: ARROW-1816: [Java] Resolve new vector classes structure for timestamp, date and maybe interval\t\nURL: https://github.com/apache/arrow/pull/1330#discussion_r153566461\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/NullableTimestampVector.java\n ##########\n @@ -179,6 +258,37 @@ public static long get(final ArrowBuf buffer, final int index) {\n     return buffer.getLong(index * TYPE_WIDTH);\n   }\n \n+  public void get(int index, NullableTimestampHolder holder) {\n+    if (isSet(index) == 0) {\n+      holder.isSet = 0;\n+      return;\n+    }\n+    holder.isSet = 1;\n+    holder.value = valueBuffer.getLong(index * TYPE_WIDTH);\n+  }\n+\n+  @Override\n+  public LocalDateTime getObject(int index) {\n+    if (isSet(index) == 0) {\n+      return null;\n+    } else {\n+      long millis = unit.getTimeUnit().toMillis(get(index));\n \n Review comment:\n   Good point. I encapsulated  java TimeUnit detail.\r\n   \r\n   Also I ran a microbench toMilliis for 1B long values. Performance is the same.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-28T17:32:55.387+0000",
                    "updated": "2017-11-28T17:32:55.387+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13118606/comment/16269124",
                    "id": "16269124",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on issue #1330: ARROW-1816: [Java] Resolve new vector classes structure for timestamp, date and maybe interval\t\nURL: https://github.com/apache/arrow/pull/1330#issuecomment-347603490\n \n \n   Needs rebase after ARROW-1710. If we are going to change this class structure, 0.8.0 would be the right time to do it. I'm concerned about delaying the release much further though -- if we can't get the Java work wrapped up this week, we can probably take another week, but we're getting into the red zone as far as the Spark 2.3.0 timeline is concerned\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-28T17:40:34.876+0000",
                    "updated": "2017-11-28T17:40:34.876+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13118606/comment/16269462",
                    "id": "16269462",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "icexelloss commented on issue #1330: ARROW-1816: [Java] Resolve new vector classes structure for timestamp, date and maybe interval\t\nURL: https://github.com/apache/arrow/pull/1330#issuecomment-347663530\n \n \n   @wesm I rebased after ARROW-1770. This should be ready.\r\n   \r\n   @jacques-n can you take a look? I'd really like this to get in 0.8 if this looks good. Thanks\r\n   \r\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-28T21:06:45.842+0000",
                    "updated": "2017-11-28T21:06:45.842+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13118606/comment/16269650",
                    "id": "16269650",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "BryanCutler commented on a change in pull request #1330: ARROW-1816: [Java] Resolve new vector classes structure for timestamp, date and maybe interval\t\nURL: https://github.com/apache/arrow/pull/1330#discussion_r153650965\n \n \n\n ##########\n File path: java/vector/pom.xml\n ##########\n @@ -135,6 +135,13 @@\n         <groupId>org.apache.drill.tools</groupId>\n         <artifactId>drill-fmpp-maven-plugin</artifactId>\n         <version>1.5.0</version>\n+        <dependencies>\n+          <dependency>\n+            <groupId>org.freemarker</groupId>\n+            <artifactId>freemarker</artifactId>\n+            <version>2.3.23</version>\n+          </dependency>\n+        </dependencies>\n \n Review comment:\n   So without specifying the version it defaults to 2.3.21? Was that version causing an issue?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-28T23:07:48.039+0000",
                    "updated": "2017-11-28T23:07:48.039+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13118606/comment/16269656",
                    "id": "16269656",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "icexelloss commented on a change in pull request #1330: ARROW-1816: [Java] Resolve new vector classes structure for timestamp, date and maybe interval\t\nURL: https://github.com/apache/arrow/pull/1330#discussion_r153651349\n \n \n\n ##########\n File path: java/vector/pom.xml\n ##########\n @@ -135,6 +135,13 @@\n         <groupId>org.apache.drill.tools</groupId>\n         <artifactId>drill-fmpp-maven-plugin</artifactId>\n         <version>1.5.0</version>\n+        <dependencies>\n+          <dependency>\n+            <groupId>org.freemarker</groupId>\n+            <artifactId>freemarker</artifactId>\n+            <version>2.3.23</version>\n+          </dependency>\n+        </dependencies>\n \n Review comment:\n   Yes I think that's the version comes with the plugin.\r\n   \r\n   I used <#sep> notation in the template to created comma separated arg list. The notation is introduced in 2.3.23\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-28T23:09:56.561+0000",
                    "updated": "2017-11-28T23:09:56.561+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13118606/comment/16269661",
                    "id": "16269661",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "BryanCutler commented on a change in pull request #1330: ARROW-1816: [Java] Resolve new vector classes structure for timestamp, date and maybe interval\t\nURL: https://github.com/apache/arrow/pull/1330#discussion_r153652065\n \n \n\n ##########\n File path: java/vector/src/main/codegen/templates/AbstractPromotableFieldWriter.java\n ##########\n @@ -42,6 +43,8 @@\n    * @param type the type of the values we want to write\n    * @return the corresponding field writer\n    */\n+  abstract protected FieldWriter getWriter(ArrowType type);\n+\n   abstract protected FieldWriter getWriter(MinorType type);\n \n Review comment:\n   Is is possible to just have `getWriter(ArrowType)`?  Having 2 methods so similar is a little confusing.. This is because you need a writer for a specific time unit now?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-28T23:13:59.183+0000",
                    "updated": "2017-11-28T23:13:59.183+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13118606/comment/16269662",
                    "id": "16269662",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "BryanCutler commented on a change in pull request #1330: ARROW-1816: [Java] Resolve new vector classes structure for timestamp, date and maybe interval\t\nURL: https://github.com/apache/arrow/pull/1330#discussion_r153652065\n \n \n\n ##########\n File path: java/vector/src/main/codegen/templates/AbstractPromotableFieldWriter.java\n ##########\n @@ -42,6 +43,8 @@\n    * @param type the type of the values we want to write\n    * @return the corresponding field writer\n    */\n+  abstract protected FieldWriter getWriter(ArrowType type);\n+\n   abstract protected FieldWriter getWriter(MinorType type);\n \n Review comment:\n   Is is possible to just have `getWriter(ArrowType)`?  Having 2 methods so similar is a little confusing.. This is because you need a writer for timestamp type params too?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-28T23:14:40.129+0000",
                    "updated": "2017-11-28T23:14:40.129+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13118606/comment/16271062",
                    "id": "16271062",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "icexelloss commented on a change in pull request #1330: ARROW-1816: [Java] Resolve new vector classes structure for timestamp, date and maybe interval\t\nURL: https://github.com/apache/arrow/pull/1330#discussion_r153844744\n \n \n\n ##########\n File path: java/vector/src/main/codegen/templates/AbstractPromotableFieldWriter.java\n ##########\n @@ -42,6 +43,8 @@\n    * @param type the type of the values we want to write\n    * @return the corresponding field writer\n    */\n+  abstract protected FieldWriter getWriter(ArrowType type);\n+\n   abstract protected FieldWriter getWriter(MinorType type);\n \n Review comment:\n   I agree ideally we should have just one. However currently, this is needed to support this:\r\n   \r\n   ```\r\n   TimestampWriter timestampWriter = rootWriter.timestamp(\"a\", TimeUnit.SECOND, \"America/New_York\");\r\n   timestampWriter.writeTimestamp(1000)\r\n   ```\r\n   \r\n   The second line here needs to lookup the writer by `MinorType.TIMESTAMP`\r\n   \r\n   We need to do more refactoring to support this API without `abstract protected FieldWriter getWriter(MinorType type)`, but since this is going to be internal change and this PR is already quite complicated, I prefer this to be a follow up. \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-29T16:41:41.630+0000",
                    "updated": "2017-11-29T16:41:41.630+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13118606/comment/16271063",
                    "id": "16271063",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "icexelloss commented on a change in pull request #1330: ARROW-1816: [Java] Resolve new vector classes structure for timestamp, date and maybe interval\t\nURL: https://github.com/apache/arrow/pull/1330#discussion_r153844744\n \n \n\n ##########\n File path: java/vector/src/main/codegen/templates/AbstractPromotableFieldWriter.java\n ##########\n @@ -42,6 +43,8 @@\n    * @param type the type of the values we want to write\n    * @return the corresponding field writer\n    */\n+  abstract protected FieldWriter getWriter(ArrowType type);\n+\n   abstract protected FieldWriter getWriter(MinorType type);\n \n Review comment:\n   I agree ideally we should have just one. However currently, this is needed to support this:\r\n   \r\n   ```\r\n   TimestampWriter timestampWriter = rootWriter.timestamp(\"a\", TimeUnit.SECOND, \"America/New_York\");\r\n   timestampWriter.writeTimestamp(1000)\r\n   ```\r\n   \r\n   The second line here, the type \"timestampWriter\" is a promotable writer and it needs to lookup the writer by `MinorType.TIMESTAMP`\r\n   \r\n   We need to do more refactoring to support this API without `abstract protected FieldWriter getWriter(MinorType type)`, but since this is going to be internal change and this PR is already quite complicated, I prefer this to be a follow up. \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-29T16:42:34.785+0000",
                    "updated": "2017-11-29T16:42:34.785+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13118606/comment/16271065",
                    "id": "16271065",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "icexelloss commented on a change in pull request #1330: ARROW-1816: [Java] Resolve new vector classes structure for timestamp, date and maybe interval\t\nURL: https://github.com/apache/arrow/pull/1330#discussion_r153844744\n \n \n\n ##########\n File path: java/vector/src/main/codegen/templates/AbstractPromotableFieldWriter.java\n ##########\n @@ -42,6 +43,8 @@\n    * @param type the type of the values we want to write\n    * @return the corresponding field writer\n    */\n+  abstract protected FieldWriter getWriter(ArrowType type);\n+\n   abstract protected FieldWriter getWriter(MinorType type);\n \n Review comment:\n   I agree ideally we should have just one. However currently, this is needed to support this:\r\n   \r\n   ```\r\n   TimestampWriter timestampWriter = rootWriter.timestamp(\"a\", TimeUnit.SECOND, \"America/New_York\");\r\n   timestampWriter.writeTimestamp(1000)\r\n   ```\r\n   \r\n   The second line here, the type of \"timestampWriter\" is a promotable writer and it needs to lookup the writer by `MinorType.TIMESTAMP`\r\n   \r\n   We need to do more refactoring to support this API without `abstract protected FieldWriter getWriter(MinorType type)`, but since this is going to be internal change and this PR is already quite complicated, I prefer this to be a follow up. \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-29T16:42:48.255+0000",
                    "updated": "2017-11-29T16:42:48.255+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13118606/comment/16271562",
                    "id": "16271562",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "BryanCutler commented on a change in pull request #1330: ARROW-1816: [Java] Resolve new vector classes structure for timestamp, date and maybe interval\t\nURL: https://github.com/apache/arrow/pull/1330#discussion_r153920084\n \n \n\n ##########\n File path: java/vector/src/main/codegen/templates/AbstractPromotableFieldWriter.java\n ##########\n @@ -42,6 +43,8 @@\n    * @param type the type of the values we want to write\n    * @return the corresponding field writer\n    */\n+  abstract protected FieldWriter getWriter(ArrowType type);\n+\n   abstract protected FieldWriter getWriter(MinorType type);\n \n Review comment:\n   Ok, sounds good\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-29T21:28:31.462+0000",
                    "updated": "2017-11-29T21:28:31.462+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13118606/comment/16282638",
                    "id": "16282638",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "icexelloss closed pull request #1330: ARROW-1816: [Java] Resolve new vector classes structure for timestamp, date and maybe interval\t\nURL: https://github.com/apache/arrow/pull/1330\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/java/vector/pom.xml b/java/vector/pom.xml\nindex 46e06aa1e..b436f5f9c 100644\n--- a/java/vector/pom.xml\n+++ b/java/vector/pom.xml\n@@ -135,6 +135,13 @@\n         <groupId>org.apache.drill.tools</groupId>\n         <artifactId>drill-fmpp-maven-plugin</artifactId>\n         <version>1.5.0</version>\n+        <dependencies>\n+          <dependency>\n+            <groupId>org.freemarker</groupId>\n+            <artifactId>freemarker</artifactId>\n+            <version>2.3.23</version>\n+          </dependency>\n+        </dependencies>\n         <executions>\n           <execution>\n             <id>generate-fmpp</id>\ndiff --git a/java/vector/src/main/codegen/data/ValueVectorTypes.tdd b/java/vector/src/main/codegen/data/ValueVectorTypes.tdd\nindex 970d887c7..565174a4d 100644\n--- a/java/vector/src/main/codegen/data/ValueVectorTypes.tdd\n+++ b/java/vector/src/main/codegen/data/ValueVectorTypes.tdd\n@@ -73,26 +73,10 @@\n         { class: \"UInt8\" },\n         { class: \"Float8\",           javaType: \"double\", boxedType: \"Double\", fields: [{name: \"value\", type: \"double\"}] },\n         { class: \"DateMilli\",        javaType: \"long\",                      friendlyType: \"LocalDateTime\" },\n-        { class: \"TimeStampSec\",     javaType: \"long\",   boxedType: \"Long\", friendlyType: \"LocalDateTime\" },\n-        { class: \"TimeStampMilli\",   javaType: \"long\",   boxedType: \"Long\", friendlyType: \"LocalDateTime\" },\n-        { class: \"TimeStampMicro\",   javaType: \"long\",   boxedType: \"Long\", friendlyType: \"LocalDateTime\" },\n-        { class: \"TimeStampNano\",    javaType: \"long\",   boxedType: \"Long\", friendlyType: \"LocalDateTime\" },\n-        { class: \"TimeStampSecTZ\", javaType: \"long\",   boxedType: \"Long\",\n-                                     typeParams: [ {name: \"timezone\", type: \"String\"} ],\n-                                     arrowType: \"org.apache.arrow.vector.types.pojo.ArrowType.Timestamp\",\n-                                     arrowTypeConstructorParams: [\"org.apache.arrow.vector.types.TimeUnit.SECOND\", \"timezone\"] },\n-        { class: \"TimeStampMilliTZ\", javaType: \"long\",   boxedType: \"Long\",\n-                                     typeParams: [ {name: \"timezone\", type: \"String\"} ],\n-                                     arrowType: \"org.apache.arrow.vector.types.pojo.ArrowType.Timestamp\",\n-                                     arrowTypeConstructorParams: [\"org.apache.arrow.vector.types.TimeUnit.MILLISECOND\", \"timezone\"] },\n-        { class: \"TimeStampMicroTZ\", javaType: \"long\",   boxedType: \"Long\",\n-                                     typeParams: [ {name: \"timezone\", type: \"String\"} ],\n-                                     arrowType: \"org.apache.arrow.vector.types.pojo.ArrowType.Timestamp\",\n-                                     arrowTypeConstructorParams: [\"org.apache.arrow.vector.types.TimeUnit.MICROSECOND\", \"timezone\"] },\n-        { class: \"TimeStampNanoTZ\", javaType: \"long\",   boxedType: \"Long\",\n-                                     typeParams: [ {name: \"timezone\", type: \"String\"} ],\n-                                     arrowType: \"org.apache.arrow.vector.types.pojo.ArrowType.Timestamp\",\n-                                     arrowTypeConstructorParams: [\"org.apache.arrow.vector.types.TimeUnit.NANOSECOND\", \"timezone\"] },\n+        { class: \"Timestamp\",        javaType: \"long\",   boxedType: \"Long\", friendlyType: \"LocalDateTime\"\n+          typeParams: [ {name: \"unit\", type: \"TimeUnit\"}, { name: \"timezone\", type: \"String\"} ],\n+          arrowType: \"org.apache.arrow.vector.types.pojo.ArrowType.Timestamp\",\n+        },\n         { class: \"TimeMicro\" },\n         { class: \"TimeNano\" }\n       ]\n@@ -116,7 +100,7 @@\n         {\n           class: \"Decimal\",\n           maxPrecisionDigits: 38, nDecimalDigits: 4, friendlyType: \"BigDecimal\",\n-          typeParams: [ {name: \"scale\", type: \"int\"}, { name: \"precision\", type: \"int\"}],\n+          typeParams: [ { name: \"precision\", type: \"int\"}, {name: \"scale\", type: \"int\"} ],\n           arrowType: \"org.apache.arrow.vector.types.pojo.ArrowType.Decimal\",\n           fields: [{name: \"start\", type: \"int\"}, {name: \"buffer\", type: \"ArrowBuf\"}]\n         }\ndiff --git a/java/vector/src/main/codegen/includes/vv_imports.ftl b/java/vector/src/main/codegen/includes/vv_imports.ftl\nindex a55304d73..28a8953e2 100644\n--- a/java/vector/src/main/codegen/includes/vv_imports.ftl\n+++ b/java/vector/src/main/codegen/includes/vv_imports.ftl\n@@ -55,6 +55,7 @@ import java.math.BigDecimal;\n import java.math.BigInteger;\n \n import org.joda.time.DateTime;\n+import org.joda.time.DateTimeZone;\n import org.joda.time.LocalDateTime;\n import org.joda.time.Period;\n \ndiff --git a/java/vector/src/main/codegen/templates/AbstractFieldWriter.java b/java/vector/src/main/codegen/templates/AbstractFieldWriter.java\nindex 853f67fd0..5b0b0244f 100644\n--- a/java/vector/src/main/codegen/templates/AbstractFieldWriter.java\n+++ b/java/vector/src/main/codegen/templates/AbstractFieldWriter.java\n@@ -122,6 +122,13 @@ public ListWriter list(String name) {\n     fail(\"${capName}(\" + <#list minor.typeParams as typeParam>\"${typeParam.name}: \" + ${typeParam.name} + \", \" + </#list>\")\");\n     return null;\n   }\n+\n+  @Override\n+  public ${capName}Writer ${lowerName}(<#list minor.typeParams as typeParam>${typeParam.type} ${typeParam.name}<#sep>, </#list>) {\n+    fail(\"${capName}(\" + <#list minor.typeParams as typeParam>\"${typeParam.name}: \" + ${typeParam.name} + \", \" + </#list>\")\");\n+    return null;\n+  }\n+\n   </#if>\n \n   @Override\ndiff --git a/java/vector/src/main/codegen/templates/AbstractPromotableFieldWriter.java b/java/vector/src/main/codegen/templates/AbstractPromotableFieldWriter.java\nindex 228c2c531..bd2248ba2 100644\n--- a/java/vector/src/main/codegen/templates/AbstractPromotableFieldWriter.java\n+++ b/java/vector/src/main/codegen/templates/AbstractPromotableFieldWriter.java\n@@ -16,6 +16,7 @@\n  * limitations under the License.\n  */\n \n+import org.apache.arrow.vector.types.Types;\n import org.apache.drill.common.types.TypeProtos.MinorType;\n \n <@pp.dropOutputFile />\n@@ -42,6 +43,8 @@\n    * @param type the type of the values we want to write\n    * @return the corresponding field writer\n    */\n+  abstract protected FieldWriter getWriter(ArrowType type);\n+\n   abstract protected FieldWriter getWriter(MinorType type);\n \n   /**\n@@ -118,7 +121,12 @@ public ListWriter list(String name) {\n     return getWriter(MinorType.MAP).${lowerName}(name<#list minor.typeParams as typeParam>, ${typeParam.name}</#list>);\n   }\n \n-  </#if>\n+  @Override\n+  public ${capName}Writer ${lowerName}(<#list minor.typeParams as typeParam>${typeParam.type} ${typeParam.name}<#sep>, </#list>) {\n+    return getWriter(MinorType.LIST).${lowerName}(<#list minor.typeParams as typeParam>${typeParam.name}<#sep>, </#list>);\n+  }\n+\n+  <#else>\n   @Override\n   public ${capName}Writer ${lowerName}(String name) {\n     return getWriter(MinorType.MAP).${lowerName}(name);\n@@ -128,7 +136,7 @@ public ListWriter list(String name) {\n   public ${capName}Writer ${lowerName}() {\n     return getWriter(MinorType.LIST).${lowerName}();\n   }\n-\n+  </#if>\n   </#list></#list>\n \n   public void copyReader(FieldReader reader) {\ndiff --git a/java/vector/src/main/codegen/templates/ArrowType.java b/java/vector/src/main/codegen/templates/ArrowType.java\nindex 93746303d..9154416cb 100644\n--- a/java/vector/src/main/codegen/templates/ArrowType.java\n+++ b/java/vector/src/main/codegen/templates/ArrowType.java\n@@ -159,7 +159,7 @@ public final T visit(${type.name?remove_ending(\"_\")} type) {\n \n     <#list fields as field>\n     <#assign fieldType = field.valueType!field.type>\n-    ${fieldType} ${field.name};\n+    public ${fieldType} ${field.name};\n     </#list>\n \n     @JsonCreator\ndiff --git a/java/vector/src/main/codegen/templates/BaseWriter.java b/java/vector/src/main/codegen/templates/BaseWriter.java\nindex 405f466cb..aac9a4da0 100644\n--- a/java/vector/src/main/codegen/templates/BaseWriter.java\n+++ b/java/vector/src/main/codegen/templates/BaseWriter.java\n@@ -78,6 +78,9 @@\n     <#if lowerName == \"int\" ><#assign lowerName = \"integer\" /></#if>\n     <#assign upperName = minor.class?upper_case />\n     <#assign capName = minor.class?cap_first />\n+    <#if minor.typeParams?? >\n+    ${capName}Writer ${lowerName}(<#list minor.typeParams as typeParam>${typeParam.type} ${typeParam.name}<#sep>, </#list>);\n+    </#if>\n     ${capName}Writer ${lowerName}();\n     </#list></#list>\n   }\ndiff --git a/java/vector/src/main/codegen/templates/ComplexReaders.java b/java/vector/src/main/codegen/templates/ComplexReaders.java\nindex 4863ecdb6..a31090f52 100644\n--- a/java/vector/src/main/codegen/templates/ComplexReaders.java\n+++ b/java/vector/src/main/codegen/templates/ComplexReaders.java\n@@ -96,10 +96,7 @@ public void read(Nullable${minor.class?cap_first}Holder h){\n     return vector.getObject(idx());\n   }\n \n-  <#if minor.class == \"TimeStampSec\" ||\n-       minor.class == \"TimeStampMilli\" ||\n-       minor.class == \"TimeStampMicro\" ||\n-       minor.class == \"TimeStampNano\">\n+  <#if minor.class == \"Timestamp\">\n   @Override\n   public ${minor.boxedType} read${minor.boxedType}(){\n     return vector.get(idx());\ndiff --git a/java/vector/src/main/codegen/templates/MapWriters.java b/java/vector/src/main/codegen/templates/MapWriters.java\nindex a5ac1b717..2858f74d0 100644\n--- a/java/vector/src/main/codegen/templates/MapWriters.java\n+++ b/java/vector/src/main/codegen/templates/MapWriters.java\n@@ -231,25 +231,25 @@ public void end() {\n   public ${minor.class}Writer ${lowerName}(String name) {\n   </#if>\n     FieldWriter writer = fields.get(handleCase(name));\n+    FieldType fieldType = FieldType.nullable(\n+                           <#if minor.typeParams??>\n+                             <#if minor.arrowTypeConstructorParams??>\n+                               <#assign constructorParams = minor.arrowTypeConstructorParams />\n+                             <#else>\n+                               <#assign constructorParams = [] />\n+                               <#list minor.typeParams as typeParam>\n+                                 <#assign constructorParams = constructorParams + [ typeParam.name ] />\n+                               </#list>\n+                             </#if>\n+                           new ${minor.arrowType}(${constructorParams?join(\", \")})\n+                           <#else>\n+                           MinorType.${upperName}.getType()\n+                           </#if>);\n     if(writer == null) {\n       ValueVector vector;\n       ValueVector currentVector = container.getChild(name);\n       ${vectName}Vector v = container.addOrGet(name, \n-          FieldType.nullable(\n-          <#if minor.typeParams??>\n-            <#if minor.arrowTypeConstructorParams??>\n-              <#assign constructorParams = minor.arrowTypeConstructorParams />\n-            <#else>\n-              <#assign constructorParams = [] />\n-              <#list minor.typeParams?reverse as typeParam>\n-                <#assign constructorParams = constructorParams + [ typeParam.name ] />\n-              </#list>\n-            </#if>    \n-            new ${minor.arrowType}(${constructorParams?join(\", \")})\n-          <#else>\n-            MinorType.${upperName}.getType()\n-          </#if>\n-          ),\n+          fieldType,\n           ${vectName}Vector.class);\n       writer = new PromotableWriter(v, container, getNullableMapWriterFactory());\n       vector = v;\n@@ -264,7 +264,7 @@ public void end() {\n     } else {\n       if (writer instanceof PromotableWriter) {\n         // ensure writers are initialized\n-        ((PromotableWriter)writer).getWriter(MinorType.${upperName});\n+        ((PromotableWriter)writer).getWriter(fieldType.getType());\n       }\n     }\n     return writer;\ndiff --git a/java/vector/src/main/codegen/templates/UnionListWriter.java b/java/vector/src/main/codegen/templates/UnionListWriter.java\nindex 8ac23fe46..a0e906166 100644\n--- a/java/vector/src/main/codegen/templates/UnionListWriter.java\n+++ b/java/vector/src/main/codegen/templates/UnionListWriter.java\n@@ -93,7 +93,6 @@ public void setPosition(int index) {\n   <#assign uncappedName = name?uncap_first/>\n   <#if uncappedName == \"int\" ><#assign uncappedName = \"integer\" /></#if>\n   <#if !minor.typeParams?? >\n-\n   @Override\n   public ${name}Writer ${uncappedName}() {\n     return this;\n@@ -104,6 +103,24 @@ public void setPosition(int index) {\n     mapName = name;\n     return writer.${uncappedName}(name);\n   }\n+\n+  <#else>\n+  @Override\n+  public ${name}Writer ${uncappedName}() {\n+    return this;\n+  }\n+\n+  public ${name}Writer ${uncappedName}(<#list minor.typeParams as typeParam>${typeParam.type} ${typeParam.name}<#sep>, </#list>) {\n+    ArrowType.${name} type = new ArrowType.${name}(<#list minor.typeParams as typeParam>${typeParam.name}<#sep>, </#list>);\n+    writer.getWriter(type);\n+    return this;\n+  }\n+\n+  public ${name}Writer ${uncappedName}(String name, <#list minor.typeParams as typeParam>${typeParam.type} ${typeParam.name}<#sep>, </#list>) {\n+    mapName = name;\n+    return writer.${uncappedName}(name, <#list minor.typeParams as typeParam>${typeParam.name}<#sep>, </#list>);\n+  }\n+\n   </#if>\n   </#list></#list>\n \n@@ -158,7 +175,7 @@ public void end() {\n       <#assign name = minor.class?cap_first />\n       <#assign fields = minor.fields!type.fields />\n       <#assign uncappedName = name?uncap_first/>\n-      <#if !minor.typeParams?? >\n+\n   @Override\n   public void write${name}(<#list fields as field>${field.type} ${field.name}<#if field_has_next>, </#if></#list>) {\n     writer.write${name}(<#list fields as field>${field.name}<#if field_has_next>, </#if></#list>);\n@@ -170,7 +187,6 @@ public void write(${name}Holder holder) {\n     writer.setPosition(writer.idx()+1);\n   }\n \n-      </#if>\n     </#list>\n   </#list>\n }\ndiff --git a/java/vector/src/main/codegen/templates/UnionReader.java b/java/vector/src/main/codegen/templates/UnionReader.java\nindex 98bb7c1f5..0255da60e 100644\n--- a/java/vector/src/main/codegen/templates/UnionReader.java\n+++ b/java/vector/src/main/codegen/templates/UnionReader.java\n@@ -89,10 +89,8 @@ private FieldReader getReaderForIndex(int index) {\n       <#list type.minor as minor>\n         <#assign name = minor.class?cap_first />\n         <#assign uncappedName = name?uncap_first/>\n-        <#if !minor.typeParams?? >\n     case ${name?upper_case}:\n       return (FieldReader) get${name}();\n-        </#if>\n       </#list>\n     </#list>\n     default:\n@@ -158,7 +156,6 @@ public int size() {\n       <#assign friendlyType = (minor.friendlyType!minor.boxedType!type.boxedType) />\n       <#assign safeType=friendlyType />\n       <#if safeType==\"byte[]\"><#assign safeType=\"ByteArray\" /></#if>\n-      <#if !minor.typeParams?? >\n \n   private ${name}ReaderImpl ${uncappedName}Reader;\n \n@@ -178,7 +175,6 @@ public void read(Nullable${name}Holder holder){\n   public void copyAsValue(${name}Writer writer){\n     getReaderForIndex(idx()).copyAsValue(writer);\n   }\n-      </#if>\n     </#list>\n   </#list>\n \ndiff --git a/java/vector/src/main/codegen/templates/UnionVector.java b/java/vector/src/main/codegen/templates/UnionVector.java\nindex 501933f8f..fd3e531b9 100644\n--- a/java/vector/src/main/codegen/templates/UnionVector.java\n+++ b/java/vector/src/main/codegen/templates/UnionVector.java\n@@ -138,16 +138,12 @@ private void setReaderAndWriterIndex() {\n      throw new UnsupportedOperationException(\"There are no inner vectors. Use geFieldBuffers\");\n   }\n \n-  private String fieldName(MinorType type) {\n-    return type.name().toLowerCase();\n+  private String fieldName(ArrowType type) {\n+    return Types.getMinorTypeForArrowType(type).name().toLowerCase();\n   }\n \n-  private FieldType fieldType(MinorType type) {\n-    return FieldType.nullable(type.getType());\n-  }\n-\n-  private <T extends FieldVector> T addOrGet(MinorType minorType, Class<T> c) {\n-    return internalMap.addOrGet(fieldName(minorType), fieldType(minorType), c);\n+  private <T extends FieldVector> T addOrGet(ArrowType type, Class<T> c) {\n+    return internalMap.addOrGet(fieldName(type), FieldType.nullable(type), c);\n   }\n \n   @Override\n@@ -177,7 +173,7 @@ public long getOffsetBufferAddress() {\n   public MapVector getMap() {\n     if (mapVector == null) {\n       int vectorCount = internalMap.size();\n-      mapVector = addOrGet(MinorType.MAP, MapVector.class);\n+      mapVector = addOrGet(MinorType.MAP.getType(), MapVector.class);\n       if (internalMap.size() > vectorCount) {\n         mapVector.allocateNew();\n         if (callBack != null) {\n@@ -200,7 +196,31 @@ public MapVector getMap() {\n   public ${name}Vector get${name}Vector() {\n     if (${uncappedName}Vector == null) {\n       int vectorCount = internalMap.size();\n-      ${uncappedName}Vector = addOrGet(MinorType.${name?upper_case}, ${name}Vector.class);\n+      ${uncappedName}Vector = addOrGet(MinorType.${name?upper_case}.getType(), ${name}Vector.class);\n+      if (internalMap.size() > vectorCount) {\n+        ${uncappedName}Vector.allocateNew();\n+        if (callBack != null) {\n+          callBack.doWork();\n+        }\n+      }\n+    }\n+    return ${uncappedName}Vector;\n+  }\n+      <#else>\n+\n+  private ${name}Vector ${uncappedName}Vector;\n+\n+  public ${name}Vector get${name}Vector() {\n+    assert ${uncappedName}Vector != null;\n+    return ${uncappedName}Vector;\n+  }\n+\n+  public ${name}Vector get${name}Vector(<#list minor.typeParams as typeParam>${typeParam.type} ${typeParam.name}<#sep>, </#list>) {\n+    ArrowType type = new ArrowType.${name}(<#list minor.typeParams as typeParam>${typeParam.name}<#sep>, </#list>);\n+\n+    if (${uncappedName}Vector == null) {\n+      int vectorCount = internalMap.size();\n+      ${uncappedName}Vector = addOrGet(type, ${name}Vector.class);\n       if (internalMap.size() > vectorCount) {\n         ${uncappedName}Vector.allocateNew();\n         if (callBack != null) {\n@@ -210,6 +230,7 @@ public MapVector getMap() {\n     }\n     return ${uncappedName}Vector;\n   }\n+\n       </#if>\n     </#list>\n   </#list>\n@@ -217,7 +238,7 @@ public MapVector getMap() {\n   public ListVector getList() {\n     if (listVector == null) {\n       int vectorCount = internalMap.size();\n-      listVector = addOrGet(MinorType.LIST, ListVector.class);\n+      listVector = addOrGet(MinorType.LIST.getType(), ListVector.class);\n       if (internalMap.size() > vectorCount) {\n         listVector.allocateNew();\n         if (callBack != null) {\n@@ -499,10 +520,8 @@ public Object getObject(int index) {\n           <#assign name = minor.class?cap_first />\n           <#assign fields = minor.fields!type.fields />\n           <#assign uncappedName = name?uncap_first/>\n-          <#if !minor.typeParams?? >\n       case ${name?upper_case}:\n           return get${name}Vector().getObject(index);\n-          </#if>\n         </#list>\n       </#list>\n       case MAP:\n@@ -599,13 +618,17 @@ public void setSafe(int index, UnionHolder holder) {\n         <#assign name = minor.class?cap_first />\n         <#assign fields = minor.fields!type.fields />\n         <#assign uncappedName = name?uncap_first/>\n-        <#if !minor.typeParams?? >\n+          <#if !minor.typeParams?? >\n     public void setSafe(int index, Nullable${name}Holder holder) {\n       setType(index, MinorType.${name?upper_case});\n       get${name}Vector().setSafe(index, holder);\n     }\n-\n-        </#if>\n+          <#else>\n+    public void setSafe(int index, Nullable${name}Holder holder) {\n+      setType(index, MinorType.${name?upper_case});\n+      get${name}Vector(<#list minor.typeParams as typeParam>holder.${typeParam.name}<#sep>, </#list>).setSafe(index, holder);\n+    }\n+          </#if>\n       </#list>\n     </#list>\n \ndiff --git a/java/vector/src/main/codegen/templates/UnionWriter.java b/java/vector/src/main/codegen/templates/UnionWriter.java\nindex 526708a4c..af1b732c8 100644\n--- a/java/vector/src/main/codegen/templates/UnionWriter.java\n+++ b/java/vector/src/main/codegen/templates/UnionWriter.java\n@@ -17,6 +17,7 @@\n  */\n \n import org.apache.arrow.vector.complex.impl.NullableMapWriterFactory;\n+import org.apache.arrow.vector.types.Types;\n \n <@pp.dropOutputFile />\n <@pp.changeOutputFile name=\"/org/apache/arrow/vector/complex/impl/UnionWriter.java\" />\n@@ -30,8 +31,18 @@\n import org.apache.arrow.vector.complex.writer.BaseWriter;\n import org.apache.arrow.vector.types.Types.MinorType;\n \n-/*\n+/**\n  * This class is generated using freemarker and the ${.template_name} template.\n+ *\n+ * Example:\n+ * <pre>\n+ * {@code\n+ * UnionWriter unionWriter = new UnionWriter(unionVector);\n+ * unionWriter.asFloat4().writeFloat4(1.0);\n+ * unionWriter.asTimestamp(TimeUnit.SECOND, \"UTC\").write(1000);\n+ * }\n+ * </pre>\n+ *\n  */\n @SuppressWarnings(\"unused\")\n public class UnionWriter extends AbstractFieldWriter implements FieldWriter {\n@@ -110,7 +121,40 @@ public ListWriter asList() {\n     return getListWriter();\n   }\n \n+  /**\n+   * Get writer from a MinorType. For complex minor type, the method will throw excepion\n+   * because it cannot create writer from complex minor types. For simple MinorType, it will\n+   * create the writer.\n+   * @param minorType\n+   * @return\n+   */\n   BaseWriter getWriter(MinorType minorType) {\n+    switch (minorType) {\n+      case MAP:\n+        return getMapWriter();\n+      case LIST:\n+        return getListWriter();\n+      <#list vv.types as type>\n+      <#list type.minor as minor>\n+        <#assign name = minor.class?cap_first />\n+        <#assign fields = minor.fields!type.fields />\n+        <#assign uncappedName = name?uncap_first/>\n+      case ${name?upper_case}:\n+      return get${name}Writer();\n+      </#list>\n+    </#list>\n+      default:\n+        throw new UnsupportedOperationException(\"Unknown type: \" + minorType);\n+    }\n+  }\n+\n+  /**\n+   * Get writer from a ArrowType. This will create the writer if it doesn't exist.\n+   * @param minorType\n+   * @return\n+   */\n+  BaseWriter getWriter(ArrowType type) {\n+    MinorType minorType = Types.getMinorTypeForArrowType(type);\n     switch (minorType) {\n     case MAP:\n       return getMapWriter();\n@@ -124,6 +168,10 @@ BaseWriter getWriter(MinorType minorType) {\n         <#if !minor.typeParams??>\n     case ${name?upper_case}:\n       return get${name}Writer();\n+        <#else>\n+    case ${name?upper_case}:\n+      ArrowType.${name} ${uncappedName}Type = (ArrowType.${name}) type;\n+      return get${name}Writer(<#list minor.typeParams as typeParam>${uncappedName}Type.${typeParam.name}<#sep>, </#list>);\n         </#if>\n       </#list>\n     </#list>\n@@ -136,10 +184,10 @@ BaseWriter getWriter(MinorType minorType) {\n       <#assign name = minor.class?cap_first />\n       <#assign fields = minor.fields!type.fields />\n       <#assign uncappedName = name?uncap_first/>\n-      <#if !minor.typeParams?? >\n \n-  private ${name}Writer ${name?uncap_first}Writer;\n+  private ${name}Writer ${uncappedName}Writer;\n \n+        <#if !minor.typeParams??>\n   private ${name}Writer get${name}Writer() {\n     if (${uncappedName}Writer == null) {\n       ${uncappedName}Writer = new ${name}WriterImpl(data.get${name}Vector());\n@@ -161,12 +209,49 @@ public void write(${name}Holder holder) {\n     get${name}Writer().write${name}(<#list fields as field>holder.${field.name}<#if field_has_next>, </#if></#list>);\n   }\n \n+  @Override\n+  public void write${minor.class}(<#list fields as field>${field.type} ${field.name}<#if field_has_next>, </#if></#list>) {\n+    data.setType(idx(), MinorType.${name?upper_case});\n+    get${name}Writer().setPosition(idx());\n+    get${name}Writer().write${name}(<#list fields as field>${field.name}<#if field_has_next>, </#if></#list>);\n+  }\n+\n+        <#else>\n+  public ${name}Writer get${name}Writer() {\n+    // returns existing writer\n+    ${name}Writer writer = ${uncappedName}Writer;\n+    assert writer != null;\n+    return writer;\n+  }\n+\n+  public ${name}Writer get${name}Writer(<#list minor.typeParams as typeParam>${typeParam.type} ${typeParam.name}<#sep>, </#list>) {\n+    if (${uncappedName}Writer == null) {\n+      ${uncappedName}Writer = new ${name}WriterImpl(data.get${name}Vector(<#list minor.typeParams as typeParam>${typeParam.name}<#sep>, </#list>));\n+      ${uncappedName}Writer.setPosition(idx());\n+      writers.add(${uncappedName}Writer);\n+    }\n+    return ${uncappedName}Writer;\n+  }\n+\n+  public ${name}Writer as${name}(<#list minor.typeParams as typeParam>${typeParam.type} ${typeParam.name}<#sep>, </#list>) {\n+    data.setType(idx(), MinorType.${name?upper_case});\n+    return get${name}Writer(<#list minor.typeParams as typeParam>${typeParam.name}<#sep>, </#list>);\n+  }\n+\n+  @Override\n+  public void write(${name}Holder holder) {\n+    data.setType(idx(), MinorType.${name?upper_case});\n+    get${name}Writer().setPosition(idx());\n+    get${name}Writer(<#list minor.typeParams as typeParam>holder.${typeParam.name}<#sep>, </#list>).write${name}(<#list fields as field>holder.${field.name}<#if field_has_next>, </#if></#list>);\n+  }\n+\n+  @Override\n   public void write${minor.class}(<#list fields as field>${field.type} ${field.name}<#if field_has_next>, </#if></#list>) {\n     data.setType(idx(), MinorType.${name?upper_case});\n     get${name}Writer().setPosition(idx());\n     get${name}Writer().write${name}(<#list fields as field>${field.name}<#if field_has_next>, </#if></#list>);\n   }\n-      </#if>\n+        </#if>\n     </#list>\n   </#list>\n \n@@ -206,7 +291,7 @@ public MapWriter map(String name) {\n   <#if lowerName == \"int\" ><#assign lowerName = \"integer\" /></#if>\n   <#assign upperName = minor.class?upper_case />\n   <#assign capName = minor.class?cap_first />\n-  <#if !minor.typeParams?? >\n+    <#if !minor.typeParams?? >\n   @Override\n   public ${capName}Writer ${lowerName}(String name) {\n     data.setType(idx(), MinorType.MAP);\n@@ -220,7 +305,21 @@ public MapWriter map(String name) {\n     getListWriter().setPosition(idx());\n     return getListWriter().${lowerName}();\n   }\n-  </#if>\n+    <#else>\n+  @Override\n+  public ${capName}Writer ${lowerName}(String name, <#list minor.typeParams as typeParam>${typeParam.type} ${typeParam.name}<#sep>, </#list>) {\n+    data.setType(idx(), MinorType.MAP);\n+    getMapWriter().setPosition(idx());\n+    return getMapWriter().${lowerName}(name, <#list minor.typeParams as typeParam>${typeParam.name}<#sep>, </#list>);\n+  }\n+\n+  @Override\n+  public ${capName}Writer ${lowerName}(<#list minor.typeParams as typeParam>${typeParam.type} ${typeParam.name}<#sep>, </#list>) {\n+    data.setType(idx(), MinorType.LIST);\n+    getListWriter().setPosition(idx());\n+    return getListWriter().${lowerName}(<#list minor.typeParams as typeParam>${typeParam.name}<#sep>, </#list>);\n+  }\n+    </#if>\n   </#list></#list>\n \n   @Override\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/GenerateSampleData.java b/java/vector/src/main/java/org/apache/arrow/vector/GenerateSampleData.java\nindex 89e2a02f6..17cfa2970 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/GenerateSampleData.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/GenerateSampleData.java\n@@ -18,6 +18,7 @@\n \n package org.apache.arrow.vector;\n \n+import javax.annotation.Nullable;\n import java.math.BigDecimal;\n import java.nio.charset.Charset;\n \n@@ -66,26 +67,12 @@ public static void generateTestData(final ValueVector vector, final int valueCou\n       writeTimeNanoData((TimeNanoVector) vector, valueCount);\n     } else if (vector instanceof TimeSecVector) {\n       writeTimeSecData((TimeSecVector) vector, valueCount);\n-    } else if (vector instanceof TimeStampSecVector) {\n-      writeTimeStampData((TimeStampSecVector) vector, valueCount);\n-    } else if (vector instanceof TimeStampMicroVector) {\n-      writeTimeStampData((TimeStampMicroVector) vector, valueCount);\n-    } else if (vector instanceof TimeStampMilliVector) {\n-      writeTimeStampData((TimeStampMilliVector) vector, valueCount);\n-    } else if (vector instanceof TimeStampNanoVector) {\n-      writeTimeStampData((TimeStampNanoVector) vector, valueCount);\n-    } else if (vector instanceof TimeStampSecTZVector) {\n-      writeTimeStampData((TimeStampSecTZVector) vector, valueCount);\n-    } else if (vector instanceof TimeStampMicroTZVector) {\n-      writeTimeStampData((TimeStampMicroTZVector) vector, valueCount);\n-    } else if (vector instanceof TimeStampMilliTZVector) {\n-      writeTimeStampData((TimeStampMilliTZVector) vector, valueCount);\n-    } else if (vector instanceof TimeStampNanoTZVector) {\n-      writeTimeStampData((TimeStampNanoTZVector) vector, valueCount);\n+    } else if (vector instanceof TimestampVector) {\n+      writeTimeStampData((TimestampVector) vector, valueCount);\n     }\n   }\n \n-  private static void writeTimeStampData(TimeStampVector vector, int valueCount) {\n+  private static void writeTimeStampData(TimestampVector vector, int valueCount) {\n     final long even = 100000;\n     final long odd = 200000;\n     for (int i = 0; i < valueCount; i++) {\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/TimeStampMicroTZVector.java b/java/vector/src/main/java/org/apache/arrow/vector/TimeStampMicroTZVector.java\ndeleted file mode 100644\nindex bfe330a1e..000000000\n--- a/java/vector/src/main/java/org/apache/arrow/vector/TimeStampMicroTZVector.java\n+++ /dev/null\n@@ -1,217 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- * <p>\n- * http://www.apache.org/licenses/LICENSE-2.0\n- * <p>\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.arrow.vector;\n-\n-import org.apache.arrow.memory.BufferAllocator;\n-import org.apache.arrow.vector.complex.impl.TimeStampMicroTZReaderImpl;\n-import org.apache.arrow.vector.complex.reader.FieldReader;\n-import org.apache.arrow.vector.holders.TimeStampMicroTZHolder;\n-import org.apache.arrow.vector.holders.NullableTimeStampMicroTZHolder;\n-import org.apache.arrow.vector.types.TimeUnit;\n-import org.apache.arrow.vector.types.Types;\n-import org.apache.arrow.vector.types.pojo.FieldType;\n-import org.apache.arrow.vector.util.TransferPair;\n-\n-/**\n- * TimeStampMicroTZVector implements a fixed width vector (8 bytes) of\n- * timestamp (microsecond resolution) values which could be null. A validity buffer\n- * (bit vector) is maintained to track which elements in the vector are null.\n- */\n-public class TimeStampMicroTZVector extends TimeStampVector {\n-  private final FieldReader reader;\n-  private final String timeZone;\n-\n-  /**\n-   * Instantiate a TimeStampMicroTZVector. This doesn't allocate any memory for\n-   * the data in vector.\n-   * @param name name of the vector\n-   * @param allocator allocator for memory management.\n-   */\n-  public TimeStampMicroTZVector(String name, BufferAllocator allocator, String timeZone) {\n-    this(name, FieldType.nullable(new org.apache.arrow.vector.types.pojo.ArrowType.Timestamp(TimeUnit.MICROSECOND, timeZone)),\n-            allocator);\n-  }\n-\n-  /**\n-   * Instantiate a TimeStampMicroTZVector. This doesn't allocate any memory for\n-   * the data in vector.\n-   * @param name name of the vector\n-   * @param fieldType type of Field materialized by this vector\n-   * @param allocator allocator for memory management.\n-   */\n-  public TimeStampMicroTZVector(String name, FieldType fieldType, BufferAllocator allocator) {\n-    super(name, fieldType, allocator);\n-    org.apache.arrow.vector.types.pojo.ArrowType.Timestamp arrowType = (org.apache.arrow.vector.types.pojo.ArrowType.Timestamp) fieldType.getType();\n-    timeZone = arrowType.getTimezone();\n-    reader = new TimeStampMicroTZReaderImpl(TimeStampMicroTZVector.this);\n-  }\n-\n-  /**\n-   * Get a reader that supports reading values from this vector\n-   * @return Field Reader for this vector\n-   */\n-  @Override\n-  public FieldReader getReader() {\n-    return reader;\n-  }\n-\n-  /**\n-   * Get minor type for this vector. The vector holds values belonging\n-   * to a particular type.\n-   * @return {@link org.apache.arrow.vector.types.Types.MinorType}\n-   */\n-  @Override\n-  public Types.MinorType getMinorType() {\n-    return Types.MinorType.TIMESTAMPMICROTZ;\n-  }\n-\n-\n-  /******************************************************************\n-   *                                                                *\n-   *          vector value retrieval methods                        *\n-   *                                                                *\n-   ******************************************************************/\n-\n-\n-  /**\n-   * Get the element at the given index from the vector and\n-   * sets the state in holder. If element at given index\n-   * is null, holder.isSet will be zero.\n-   *\n-   * @param index   position of element\n-   */\n-  public void get(int index, NullableTimeStampMicroTZHolder holder) {\n-    if (isSet(index) == 0) {\n-      holder.isSet = 0;\n-      return;\n-    }\n-    holder.isSet = 1;\n-    holder.value = valueBuffer.getLong(index * TYPE_WIDTH);\n-  }\n-\n-  /**\n-   * Same as {@link #get(int)}.\n-   *\n-   * @param index   position of element\n-   * @return element at given index\n-   */\n-  public Long getObject(int index) {\n-    if (isSet(index) == 0) {\n-      return null;\n-    } else {\n-      return valueBuffer.getLong(index * TYPE_WIDTH);\n-    }\n-  }\n-\n-\n-  /******************************************************************\n-   *                                                                *\n-   *          vector value setter methods                           *\n-   *                                                                *\n-   ******************************************************************/\n-\n-\n-  /**\n-   * Set the element at the given index to the value set in data holder.\n-   * If the value in holder is not indicated as set, element in the\n-   * at the given index will be null.\n-   *\n-   * @param index   position of element\n-   * @param holder  nullable data holder for value of element\n-   */\n-  public void set(int index, NullableTimeStampMicroTZHolder holder) throws IllegalArgumentException {\n-    if (holder.isSet < 0) {\n-      throw new IllegalArgumentException();\n-    } else if (holder.isSet > 0) {\n-      BitVectorHelper.setValidityBitToOne(validityBuffer, index);\n-      setValue(index, holder.value);\n-    } else {\n-      BitVectorHelper.setValidityBit(validityBuffer, index, 0);\n-    }\n-  }\n-\n-  /**\n-   * Set the element at the given index to the value set in data holder.\n-   *\n-   * @param index   position of element\n-   * @param holder  data holder for value of element\n-   */\n-  public void set(int index, TimeStampMicroTZHolder holder) {\n-    BitVectorHelper.setValidityBitToOne(validityBuffer, index);\n-    setValue(index, holder.value);\n-  }\n-\n-  /**\n-   * Same as {@link #set(int, NullableTimeStampMicroTZHolder)} except that it handles the\n-   * case when index is greater than or equal to existing\n-   * value capacity {@link #getValueCapacity()}.\n-   *\n-   * @param index   position of element\n-   * @param holder  nullable data holder for value of element\n-   */\n-  public void setSafe(int index, NullableTimeStampMicroTZHolder holder) throws IllegalArgumentException {\n-    handleSafe(index);\n-    set(index, holder);\n-  }\n-\n-  /**\n-   * Same as {@link #set(int, TimeStampMicroTZHolder)} except that it handles the\n-   * case when index is greater than or equal to existing\n-   * value capacity {@link #getValueCapacity()}.\n-   *\n-   * @param index   position of element\n-   * @param holder  data holder for value of element\n-   */\n-  public void setSafe(int index, TimeStampMicroTZHolder holder) {\n-    handleSafe(index);\n-    set(index, holder);\n-  }\n-\n-\n-  /******************************************************************\n-   *                                                                *\n-   *                      vector transfer                           *\n-   *                                                                *\n-   ******************************************************************/\n-\n-\n-  /**\n-   * Construct a TransferPair comprising of this and and a target vector of\n-   * the same type.\n-   * @param ref name of the target vector\n-   * @param allocator allocator for the target vector\n-   * @return {@link TransferPair}\n-   */\n-  @Override\n-  public TransferPair getTransferPair(String ref, BufferAllocator allocator) {\n-    TimeStampMicroTZVector to = new TimeStampMicroTZVector(ref,\n-            field.getFieldType(), allocator);\n-    return new TransferImpl(to);\n-  }\n-\n-  /**\n-   * Construct a TransferPair with a desired target vector of the same type.\n-   * @param to target vector\n-   * @return {@link TransferPair}\n-   */\n-  @Override\n-  public TransferPair makeTransferPair(ValueVector to) {\n-    return new TransferImpl((TimeStampMicroTZVector) to);\n-  }\n-}\n\\ No newline at end of file\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/TimeStampMicroVector.java b/java/vector/src/main/java/org/apache/arrow/vector/TimeStampMicroVector.java\ndeleted file mode 100644\nindex 85b615d8f..000000000\n--- a/java/vector/src/main/java/org/apache/arrow/vector/TimeStampMicroVector.java\n+++ /dev/null\n@@ -1,219 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- * <p>\n- * http://www.apache.org/licenses/LICENSE-2.0\n- * <p>\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.arrow.vector;\n-\n-import org.apache.arrow.memory.BufferAllocator;\n-import org.apache.arrow.vector.complex.impl.TimeStampMicroReaderImpl;\n-import org.apache.arrow.vector.complex.reader.FieldReader;\n-import org.apache.arrow.vector.holders.TimeStampMicroHolder;\n-import org.apache.arrow.vector.holders.NullableTimeStampMicroHolder;\n-import org.apache.arrow.vector.types.Types;\n-import org.apache.arrow.vector.types.pojo.FieldType;\n-import org.apache.arrow.vector.util.TransferPair;\n-import org.joda.time.LocalDateTime;\n-\n-/**\n- * TimeStampMicroVector implements a fixed width vector (8 bytes) of\n- * timestamp (microsecond resolution) values which could be null. A validity buffer\n- * (bit vector) is maintained to track which elements in the vector are null.\n- */\n-public class TimeStampMicroVector extends TimeStampVector {\n-  private final FieldReader reader;\n-\n-  /**\n-   * Instantiate a TimeStampMicroVector. This doesn't allocate any memory for\n-   * the data in vector.\n-   * @param name name of the vector\n-   * @param allocator allocator for memory management.\n-   */\n-  public TimeStampMicroVector(String name, BufferAllocator allocator) {\n-    this(name, FieldType.nullable(Types.MinorType.TIMESTAMPMICRO.getType()),\n-            allocator);\n-  }\n-\n-  /**\n-   * Instantiate a TimeStampMicroVector. This doesn't allocate any memory for\n-   * the data in vector.\n-   * @param name name of the vector\n-   * @param fieldType type of Field materialized by this vector\n-   * @param allocator allocator for memory management.\n-   */\n-  public TimeStampMicroVector(String name, FieldType fieldType, BufferAllocator allocator) {\n-    super(name, fieldType, allocator);\n-    reader = new TimeStampMicroReaderImpl(TimeStampMicroVector.this);\n-  }\n-\n-  /**\n-   * Get a reader that supports reading values from this vector\n-   * @return Field Reader for this vector\n-   */\n-  @Override\n-  public FieldReader getReader() {\n-    return reader;\n-  }\n-\n-  /**\n-   * Get minor type for this vector. The vector holds values belonging\n-   * to a particular type.\n-   * @return {@link org.apache.arrow.vector.types.Types.MinorType}\n-   */\n-  @Override\n-  public Types.MinorType getMinorType() {\n-    return Types.MinorType.TIMESTAMPMICRO;\n-  }\n-\n-\n-  /******************************************************************\n-   *                                                                *\n-   *          vector value retrieval methods                        *\n-   *                                                                *\n-   ******************************************************************/\n-\n-\n-  /**\n-   * Get the element at the given index from the vector and\n-   * sets the state in holder. If element at given index\n-   * is null, holder.isSet will be zero.\n-   *\n-   * @param index   position of element\n-   */\n-  public void get(int index, NullableTimeStampMicroHolder holder) {\n-    if (isSet(index) == 0) {\n-      holder.isSet = 0;\n-      return;\n-    }\n-    holder.isSet = 1;\n-    holder.value = valueBuffer.getLong(index * TYPE_WIDTH);\n-  }\n-\n-  /**\n-   * Same as {@link #get(int)}.\n-   *\n-   * @param index   position of element\n-   * @return element at given index\n-   */\n-  public LocalDateTime getObject(int index) {\n-    if (isSet(index) == 0) {\n-      return null;\n-    } else {\n-         /* value is truncated when converting microseconds to milliseconds in order to use DateTime type */\n-      final long micros = valueBuffer.getLong(index * TYPE_WIDTH);\n-      final long millis = java.util.concurrent.TimeUnit.MICROSECONDS.toMillis(micros);\n-      final org.joda.time.LocalDateTime localDateTime = new org.joda.time.LocalDateTime(millis,\n-              org.joda.time.DateTimeZone.UTC);\n-      return localDateTime;\n-    }\n-  }\n-\n-\n-  /******************************************************************\n-   *                                                                *\n-   *          vector value setter methods                           *\n-   *                                                                *\n-   ******************************************************************/\n-\n-\n-  /**\n-   * Set the element at the given index to the value set in data holder.\n-   * If the value in holder is not indicated as set, element in the\n-   * at the given index will be null.\n-   *\n-   * @param index   position of element\n-   * @param holder  nullable data holder for value of element\n-   */\n-  public void set(int index, NullableTimeStampMicroHolder holder) throws IllegalArgumentException {\n-    if (holder.isSet < 0) {\n-      throw new IllegalArgumentException();\n-    } else if (holder.isSet > 0) {\n-      BitVectorHelper.setValidityBitToOne(validityBuffer, index);\n-      setValue(index, holder.value);\n-    } else {\n-      BitVectorHelper.setValidityBit(validityBuffer, index, 0);\n-    }\n-  }\n-\n-  /**\n-   * Set the element at the given index to the value set in data holder.\n-   *\n-   * @param index   position of element\n-   * @param holder  data holder for value of element\n-   */\n-  public void set(int index, TimeStampMicroHolder holder) {\n-    BitVectorHelper.setValidityBitToOne(validityBuffer, index);\n-    setValue(index, holder.value);\n-  }\n-\n-  /**\n-   * Same as {@link #set(int, NullableTimeStampMicroHolder)} except that it handles the\n-   * case when index is greater than or equal to existing\n-   * value capacity {@link #getValueCapacity()}.\n-   *\n-   * @param index   position of element\n-   * @param holder  nullable data holder for value of element\n-   */\n-  public void setSafe(int index, NullableTimeStampMicroHolder holder) throws IllegalArgumentException {\n-    handleSafe(index);\n-    set(index, holder);\n-  }\n-\n-  /**\n-   * Same as {@link #set(int, TimeStampMicroHolder)} except that it handles the\n-   * case when index is greater than or equal to existing\n-   * value capacity {@link #getValueCapacity()}.\n-   *\n-   * @param index   position of element\n-   * @param holder  data holder for value of element\n-   */\n-  public void setSafe(int index, TimeStampMicroHolder holder) {\n-    handleSafe(index);\n-    set(index, holder);\n-  }\n-\n-\n-  /******************************************************************\n-   *                                                                *\n-   *                      vector transfer                           *\n-   *                                                                *\n-   ******************************************************************/\n-\n-\n-  /**\n-   * Construct a TransferPair comprising of this and and a target vector of\n-   * the same type.\n-   * @param ref name of the target vector\n-   * @param allocator allocator for the target vector\n-   * @return {@link TransferPair}\n-   */\n-  @Override\n-  public TransferPair getTransferPair(String ref, BufferAllocator allocator) {\n-    TimeStampMicroVector to = new TimeStampMicroVector(ref,\n-            field.getFieldType(), allocator);\n-    return new TransferImpl(to);\n-  }\n-\n-  /**\n-   * Construct a TransferPair with a desired target vector of the same type.\n-   * @param to target vector\n-   * @return {@link TransferPair}\n-   */\n-  @Override\n-  public TransferPair makeTransferPair(ValueVector to) {\n-    return new TransferImpl((TimeStampMicroVector) to);\n-  }\n-}\n\\ No newline at end of file\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/TimeStampMilliTZVector.java b/java/vector/src/main/java/org/apache/arrow/vector/TimeStampMilliTZVector.java\ndeleted file mode 100644\nindex 9d68b5644..000000000\n--- a/java/vector/src/main/java/org/apache/arrow/vector/TimeStampMilliTZVector.java\n+++ /dev/null\n@@ -1,216 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- * <p>\n- * http://www.apache.org/licenses/LICENSE-2.0\n- * <p>\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.arrow.vector;\n-\n-import org.apache.arrow.memory.BufferAllocator;\n-import org.apache.arrow.vector.complex.impl.TimeStampMilliTZReaderImpl;\n-import org.apache.arrow.vector.complex.reader.FieldReader;\n-import org.apache.arrow.vector.holders.TimeStampMilliTZHolder;\n-import org.apache.arrow.vector.holders.NullableTimeStampMilliTZHolder;\n-import org.apache.arrow.vector.types.TimeUnit;\n-import org.apache.arrow.vector.types.Types;\n-import org.apache.arrow.vector.types.pojo.FieldType;\n-import org.apache.arrow.vector.util.TransferPair;\n-\n-/**\n- * TimeStampMilliTZVector implements a fixed width vector (8 bytes) of\n- * timestamp (millisecond resolution) values which could be null. A validity buffer\n- * (bit vector) is maintained to track which elements in the vector are null.\n- */\n-public class TimeStampMilliTZVector extends TimeStampVector {\n-  private final FieldReader reader;\n-  private final String timeZone;\n-\n-  /**\n-   * Instantiate a TimeStampMilliTZVector. This doesn't allocate any memory for\n-   * the data in vector.\n-   * @param name name of the vector\n-   * @param allocator allocator for memory management.\n-   */\n-  public TimeStampMilliTZVector(String name, BufferAllocator allocator, String timeZone) {\n-    this(name, FieldType.nullable(new org.apache.arrow.vector.types.pojo.ArrowType.Timestamp(TimeUnit.MILLISECOND, timeZone)),\n-            allocator);\n-  }\n-\n-  /**\n-   * Instantiate a TimeStampMilliTZVector. This doesn't allocate any memory for\n-   * the data in vector.\n-   * @param name name of the vector\n-   * @param fieldType type of Field materialized by this vector\n-   * @param allocator allocator for memory management.\n-   */\n-  public TimeStampMilliTZVector(String name, FieldType fieldType, BufferAllocator allocator) {\n-    super(name, fieldType, allocator);\n-    org.apache.arrow.vector.types.pojo.ArrowType.Timestamp arrowType = (org.apache.arrow.vector.types.pojo.ArrowType.Timestamp) fieldType.getType();\n-    timeZone = arrowType.getTimezone();\n-    reader = new TimeStampMilliTZReaderImpl(TimeStampMilliTZVector.this);\n-  }\n-\n-  /**\n-   * Get a reader that supports reading values from this vector\n-   * @return Field Reader for this vector\n-   */\n-  @Override\n-  public FieldReader getReader() {\n-    return reader;\n-  }\n-\n-  /**\n-   * Get minor type for this vector. The vector holds values belonging\n-   * to a particular type.\n-   * @return {@link org.apache.arrow.vector.types.Types.MinorType}\n-   */\n-  @Override\n-  public Types.MinorType getMinorType() {\n-    return Types.MinorType.TIMESTAMPMILLITZ;\n-  }\n-\n-\n-  /******************************************************************\n-   *                                                                *\n-   *          vector value retrieval methods                        *\n-   *                                                                *\n-   ******************************************************************/\n-\n-\n-  /**\n-   * Get the element at the given index from the vector and\n-   * sets the state in holder. If element at given index\n-   * is null, holder.isSet will be zero.\n-   *\n-   * @param index   position of element\n-   */\n-  public void get(int index, NullableTimeStampMilliTZHolder holder) {\n-    if (isSet(index) == 0) {\n-      holder.isSet = 0;\n-      return;\n-    }\n-    holder.isSet = 1;\n-    holder.value = valueBuffer.getLong(index * TYPE_WIDTH);\n-  }\n-\n-  /**\n-   * Same as {@link #get(int)}.\n-   *\n-   * @param index   position of element\n-   * @return element at given index\n-   */\n-  public Long getObject(int index) {\n-    if (isSet(index) == 0) {\n-      return null;\n-    } else {\n-      return valueBuffer.getLong(index * TYPE_WIDTH);\n-    }\n-  }\n-\n-\n-  /******************************************************************\n-   *                                                                *\n-   *          vector value setter methods                           *\n-   *                                                                *\n-   ******************************************************************/\n-\n-\n-  /**\n-   * Set the element at the given index to the value set in data holder.\n-   * If the value in holder is not indicated as set, element in the\n-   * at the given index will be null.\n-   *\n-   * @param index   position of element\n-   * @param holder  nullable data holder for value of element\n-   */\n-  public void set(int index, NullableTimeStampMilliTZHolder holder) throws IllegalArgumentException {\n-    if (holder.isSet < 0) {\n-      throw new IllegalArgumentException();\n-    } else if (holder.isSet > 0) {\n-      BitVectorHelper.setValidityBitToOne(validityBuffer, index);\n-      setValue(index, holder.value);\n-    } else {\n-      BitVectorHelper.setValidityBit(validityBuffer, index, 0);\n-    }\n-  }\n-\n-  /**\n-   * Set the element at the given index to the value set in data holder.\n-   *\n-   * @param index   position of element\n-   * @param holder  data holder for value of element\n-   */\n-  public void set(int index, TimeStampMilliTZHolder holder) {\n-    BitVectorHelper.setValidityBitToOne(validityBuffer, index);\n-    setValue(index, holder.value);\n-  }\n-\n-  /**\n-   * Same as {@link #set(int, NullableTimeStampMilliTZHolder)} except that it handles the\n-   * case when index is greater than or equal to existing\n-   * value capacity {@link #getValueCapacity()}.\n-   *\n-   * @param index   position of element\n-   * @param holder  nullable data holder for value of element\n-   */\n-  public void setSafe(int index, NullableTimeStampMilliTZHolder holder) throws IllegalArgumentException {\n-    handleSafe(index);\n-    set(index, holder);\n-  }\n-\n-  /**\n-   * Same as {@link #set(int, TimeStampMilliTZHolder)} except that it handles the\n-   * case when index is greater than or equal to existing\n-   * value capacity {@link #getValueCapacity()}.\n-   *\n-   * @param index   position of element\n-   * @param holder  data holder for value of element\n-   */\n-  public void setSafe(int index, TimeStampMilliTZHolder holder) {\n-    handleSafe(index);\n-    set(index, holder);\n-  }\n-\n-\n-  /******************************************************************\n-   *                                                                *\n-   *                      vector transfer                           *\n-   *                                                                *\n-   ******************************************************************/\n-\n-  /**\n-   * Construct a TransferPair comprising of this and and a target vector of\n-   * the same type.\n-   * @param ref name of the target vector\n-   * @param allocator allocator for the target vector\n-   * @return {@link TransferPair}\n-   */\n-  @Override\n-  public TransferPair getTransferPair(String ref, BufferAllocator allocator) {\n-    TimeStampMilliTZVector to = new TimeStampMilliTZVector(ref,\n-            field.getFieldType(), allocator);\n-    return new TransferImpl(to);\n-  }\n-\n-  /**\n-   * Construct a TransferPair with a desired target vector of the same type.\n-   * @param to target vector\n-   * @return {@link TransferPair}\n-   */\n-  @Override\n-  public TransferPair makeTransferPair(ValueVector to) {\n-    return new TransferImpl((TimeStampMilliTZVector) to);\n-  }\n-}\n\\ No newline at end of file\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/TimeStampMilliVector.java b/java/vector/src/main/java/org/apache/arrow/vector/TimeStampMilliVector.java\ndeleted file mode 100644\nindex 7e8a1d0e2..000000000\n--- a/java/vector/src/main/java/org/apache/arrow/vector/TimeStampMilliVector.java\n+++ /dev/null\n@@ -1,217 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- * <p>\n- * http://www.apache.org/licenses/LICENSE-2.0\n- * <p>\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.arrow.vector;\n-\n-import org.apache.arrow.memory.BufferAllocator;\n-import org.apache.arrow.vector.complex.impl.TimeStampMilliReaderImpl;\n-import org.apache.arrow.vector.complex.reader.FieldReader;\n-import org.apache.arrow.vector.holders.TimeStampMilliHolder;\n-import org.apache.arrow.vector.holders.NullableTimeStampMilliHolder;\n-import org.apache.arrow.vector.types.Types;\n-import org.apache.arrow.vector.types.pojo.FieldType;\n-import org.apache.arrow.vector.util.TransferPair;\n-import org.joda.time.LocalDateTime;\n-\n-/**\n- * TimeStampMilliVector implements a fixed width vector (8 bytes) of\n- * timestamp (millisecond resolution) values which could be null. A validity buffer\n- * (bit vector) is maintained to track which elements in the vector are null.\n- */\n-public class TimeStampMilliVector extends TimeStampVector {\n-  private final FieldReader reader;\n-\n-  /**\n-   * Instantiate a TimeStampMilliVector. This doesn't allocate any memory for\n-   * the data in vector.\n-   * @param name name of the vector\n-   * @param allocator allocator for memory management.\n-   */\n-  public TimeStampMilliVector(String name, BufferAllocator allocator) {\n-    this(name, FieldType.nullable(Types.MinorType.TIMESTAMPMILLI.getType()),\n-            allocator);\n-  }\n-\n-  /**\n-   * Instantiate a TimeStampMilliVector. This doesn't allocate any memory for\n-   * the data in vector.\n-   * @param name name of the vector\n-   * @param fieldType type of Field materialized by this vector\n-   * @param allocator allocator for memory management.\n-   */\n-  public TimeStampMilliVector(String name, FieldType fieldType, BufferAllocator allocator) {\n-    super(name, fieldType, allocator);\n-    reader = new TimeStampMilliReaderImpl(TimeStampMilliVector.this);\n-  }\n-\n-  /**\n-   * Get a reader that supports reading values from this vector\n-   * @return Field Reader for this vector\n-   */\n-  @Override\n-  public FieldReader getReader() {\n-    return reader;\n-  }\n-\n-  /**\n-   * Get minor type for this vector. The vector holds values belonging\n-   * to a particular type.\n-   * @return {@link org.apache.arrow.vector.types.Types.MinorType}\n-   */\n-  @Override\n-  public Types.MinorType getMinorType() {\n-    return Types.MinorType.TIMESTAMPMILLI;\n-  }\n-\n-\n-  /******************************************************************\n-   *                                                                *\n-   *          vector value retrieval methods                        *\n-   *                                                                *\n-   ******************************************************************/\n-\n-\n-  /**\n-   * Get the element at the given index from the vector and\n-   * sets the state in holder. If element at given index\n-   * is null, holder.isSet will be zero.\n-   *\n-   * @param index   position of element\n-   */\n-  public void get(int index, NullableTimeStampMilliHolder holder) {\n-    if (isSet(index) == 0) {\n-      holder.isSet = 0;\n-      return;\n-    }\n-    holder.isSet = 1;\n-    holder.value = valueBuffer.getLong(index * TYPE_WIDTH);\n-  }\n-\n-  /**\n-   * Same as {@link #get(int)}.\n-   *\n-   * @param index   position of element\n-   * @return element at given index\n-   */\n-  public LocalDateTime getObject(int index) {\n-    if (isSet(index) == 0) {\n-      return null;\n-    } else {\n-      final long millis = valueBuffer.getLong(index * TYPE_WIDTH);\n-      final org.joda.time.LocalDateTime localDateTime = new org.joda.time.LocalDateTime(millis,\n-              org.joda.time.DateTimeZone.UTC);\n-      return localDateTime;\n-    }\n-  }\n-\n-\n-  /******************************************************************\n-   *                                                                *\n-   *          vector value setter methods                           *\n-   *                                                                *\n-   ******************************************************************/\n-\n-\n-  /**\n-   * Set the element at the given index to the value set in data holder.\n-   * If the value in holder is not indicated as set, element in the\n-   * at the given index will be null.\n-   *\n-   * @param index   position of element\n-   * @param holder  nullable data holder for value of element\n-   */\n-  public void set(int index, NullableTimeStampMilliHolder holder) throws IllegalArgumentException {\n-    if (holder.isSet < 0) {\n-      throw new IllegalArgumentException();\n-    } else if (holder.isSet > 0) {\n-      BitVectorHelper.setValidityBitToOne(validityBuffer, index);\n-      setValue(index, holder.value);\n-    } else {\n-      BitVectorHelper.setValidityBit(validityBuffer, index, 0);\n-    }\n-  }\n-\n-  /**\n-   * Set the element at the given index to the value set in data holder.\n-   *\n-   * @param index   position of element\n-   * @param holder  data holder for value of element\n-   */\n-  public void set(int index, TimeStampMilliHolder holder) {\n-    BitVectorHelper.setValidityBitToOne(validityBuffer, index);\n-    setValue(index, holder.value);\n-  }\n-\n-  /**\n-   * Same as {@link #set(int, NullableTimeStampMilliHolder)} except that it handles the\n-   * case when index is greater than or equal to existing\n-   * value capacity {@link #getValueCapacity()}.\n-   *\n-   * @param index   position of element\n-   * @param holder  nullable data holder for value of element\n-   */\n-  public void setSafe(int index, NullableTimeStampMilliHolder holder) throws IllegalArgumentException {\n-    handleSafe(index);\n-    set(index, holder);\n-  }\n-\n-  /**\n-   * Same as {@link #set(int, TimeStampMilliHolder)} except that it handles the\n-   * case when index is greater than or equal to existing\n-   * value capacity {@link #getValueCapacity()}.\n-   *\n-   * @param index   position of element\n-   * @param holder  data holder for value of element\n-   */\n-  public void setSafe(int index, TimeStampMilliHolder holder) {\n-    handleSafe(index);\n-    set(index, holder);\n-  }\n-\n-\n-  /******************************************************************\n-   *                                                                *\n-   *                      vector transfer                           *\n-   *                                                                *\n-   ******************************************************************/\n-\n-\n-  /**\n-   * Construct a TransferPair comprising of this and and a target vector of\n-   * the same type.\n-   * @param ref name of the target vector\n-   * @param allocator allocator for the target vector\n-   * @return {@link TransferPair}\n-   */\n-  @Override\n-  public TransferPair getTransferPair(String ref, BufferAllocator allocator) {\n-    TimeStampMilliVector to = new TimeStampMilliVector(ref,\n-            field.getFieldType(), allocator);\n-    return new TransferImpl(to);\n-  }\n-\n-  /**\n-   * Construct a TransferPair with a desired target vector of the same type.\n-   * @param to target vector\n-   * @return {@link TransferPair}\n-   */\n-  @Override\n-  public TransferPair makeTransferPair(ValueVector to) {\n-    return new TransferImpl((TimeStampMilliVector) to);\n-  }\n-}\n\\ No newline at end of file\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/TimeStampNanoTZVector.java b/java/vector/src/main/java/org/apache/arrow/vector/TimeStampNanoTZVector.java\ndeleted file mode 100644\nindex e03618201..000000000\n--- a/java/vector/src/main/java/org/apache/arrow/vector/TimeStampNanoTZVector.java\n+++ /dev/null\n@@ -1,217 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- * <p>\n- * http://www.apache.org/licenses/LICENSE-2.0\n- * <p>\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.arrow.vector;\n-\n-import org.apache.arrow.memory.BufferAllocator;\n-import org.apache.arrow.vector.complex.impl.TimeStampNanoTZReaderImpl;\n-import org.apache.arrow.vector.complex.reader.FieldReader;\n-import org.apache.arrow.vector.holders.TimeStampNanoTZHolder;\n-import org.apache.arrow.vector.holders.NullableTimeStampNanoTZHolder;\n-import org.apache.arrow.vector.types.TimeUnit;\n-import org.apache.arrow.vector.types.Types;\n-import org.apache.arrow.vector.types.pojo.FieldType;\n-import org.apache.arrow.vector.util.TransferPair;\n-\n-/**\n- * TimeStampNanoTZVector implements a fixed width vector (8 bytes) of\n- * timestamp (nanosecond resolution) values which could be null. A validity buffer\n- * (bit vector) is maintained to track which elements in the vector are null.\n- */\n-public class TimeStampNanoTZVector extends TimeStampVector {\n-  private final FieldReader reader;\n-  private final String timeZone;\n-\n-  /**\n-   * Instantiate a TimeStampNanoTZVector. This doesn't allocate any memory for\n-   * the data in vector.\n-   * @param name name of the vector\n-   * @param allocator allocator for memory management.\n-   */\n-  public TimeStampNanoTZVector(String name, BufferAllocator allocator, String timeZone) {\n-    this(name, FieldType.nullable(new org.apache.arrow.vector.types.pojo.ArrowType.Timestamp(TimeUnit.NANOSECOND, timeZone)),\n-            allocator);\n-  }\n-\n-  /**\n-   * Instantiate a TimeStampNanoTZVector. This doesn't allocate any memory for\n-   * the data in vector.\n-   * @param name name of the vector\n-   * @param fieldType type of Field materialized by this vector\n-   * @param allocator allocator for memory management.\n-   */\n-  public TimeStampNanoTZVector(String name, FieldType fieldType, BufferAllocator allocator) {\n-    super(name, fieldType, allocator);\n-    org.apache.arrow.vector.types.pojo.ArrowType.Timestamp arrowType = (org.apache.arrow.vector.types.pojo.ArrowType.Timestamp) fieldType.getType();\n-    timeZone = arrowType.getTimezone();\n-    reader = new TimeStampNanoTZReaderImpl(TimeStampNanoTZVector.this);\n-  }\n-\n-  /**\n-   * Get a reader that supports reading values from this vector\n-   * @return Field Reader for this vector\n-   */\n-  @Override\n-  public FieldReader getReader() {\n-    return reader;\n-  }\n-\n-  /**\n-   * Get minor type for this vector. The vector holds values belonging\n-   * to a particular type.\n-   * @return {@link org.apache.arrow.vector.types.Types.MinorType}\n-   */\n-  @Override\n-  public Types.MinorType getMinorType() {\n-    return Types.MinorType.TIMESTAMPNANOTZ;\n-  }\n-\n-\n-  /******************************************************************\n-   *                                                                *\n-   *          vector value retrieval methods                        *\n-   *                                                                *\n-   ******************************************************************/\n-\n-\n-  /**\n-   * Get the element at the given index from the vector and\n-   * sets the state in holder. If element at given index\n-   * is null, holder.isSet will be zero.\n-   *\n-   * @param index   position of element\n-   */\n-  public void get(int index, NullableTimeStampNanoTZHolder holder) {\n-    if (isSet(index) == 0) {\n-      holder.isSet = 0;\n-      return;\n-    }\n-    holder.isSet = 1;\n-    holder.value = valueBuffer.getLong(index * TYPE_WIDTH);\n-  }\n-\n-  /**\n-   * Same as {@link #get(int)}.\n-   *\n-   * @param index   position of element\n-   * @return element at given index\n-   */\n-  public Long getObject(int index) {\n-    if (isSet(index) == 0) {\n-      return null;\n-    } else {\n-      return valueBuffer.getLong(index * TYPE_WIDTH);\n-    }\n-  }\n-\n-\n-  /******************************************************************\n-   *                                                                *\n-   *          vector value setter methods                           *\n-   *                                                                *\n-   ******************************************************************/\n-\n-\n-  /**\n-   * Set the element at the given index to the value set in data holder.\n-   * If the value in holder is not indicated as set, element in the\n-   * at the given index will be null.\n-   *\n-   * @param index   position of element\n-   * @param holder  nullable data holder for value of element\n-   */\n-  public void set(int index, NullableTimeStampNanoTZHolder holder) throws IllegalArgumentException {\n-    if (holder.isSet < 0) {\n-      throw new IllegalArgumentException();\n-    } else if (holder.isSet > 0) {\n-      BitVectorHelper.setValidityBitToOne(validityBuffer, index);\n-      setValue(index, holder.value);\n-    } else {\n-      BitVectorHelper.setValidityBit(validityBuffer, index, 0);\n-    }\n-  }\n-\n-  /**\n-   * Set the element at the given index to the value set in data holder.\n-   *\n-   * @param index   position of element\n-   * @param holder  data holder for value of element\n-   */\n-  public void set(int index, TimeStampNanoTZHolder holder) {\n-    BitVectorHelper.setValidityBitToOne(validityBuffer, index);\n-    setValue(index, holder.value);\n-  }\n-\n-  /**\n-   * Same as {@link #set(int, NullableTimeStampNanoTZHolder)} except that it handles the\n-   * case when index is greater than or equal to existing\n-   * value capacity {@link #getValueCapacity()}.\n-   *\n-   * @param index   position of element\n-   * @param holder  nullable data holder for value of element\n-   */\n-  public void setSafe(int index, NullableTimeStampNanoTZHolder holder) throws IllegalArgumentException {\n-    handleSafe(index);\n-    set(index, holder);\n-  }\n-\n-  /**\n-   * Same as {@link #set(int, TimeStampNanoTZHolder)} except that it handles the\n-   * case when index is greater than or equal to existing\n-   * value capacity {@link #getValueCapacity()}.\n-   *\n-   * @param index   position of element\n-   * @param holder  data holder for value of element\n-   */\n-  public void setSafe(int index, TimeStampNanoTZHolder holder) {\n-    handleSafe(index);\n-    set(index, holder);\n-  }\n-\n-\n-  /******************************************************************\n-   *                                                                *\n-   *                      vector transfer                           *\n-   *                                                                *\n-   ******************************************************************/\n-\n-\n-  /**\n-   * Construct a TransferPair comprising of this and and a target vector of\n-   * the same type.\n-   * @param ref name of the target vector\n-   * @param allocator allocator for the target vector\n-   * @return {@link TransferPair}\n-   */\n-  @Override\n-  public TransferPair getTransferPair(String ref, BufferAllocator allocator) {\n-    TimeStampNanoTZVector to = new TimeStampNanoTZVector(ref,\n-            field.getFieldType(), allocator);\n-    return new TransferImpl(to);\n-  }\n-\n-  /**\n-   * Construct a TransferPair with a desired target vector of the same type.\n-   * @param to target vector\n-   * @return {@link TransferPair}\n-   */\n-  @Override\n-  public TransferPair makeTransferPair(ValueVector to) {\n-    return new TransferImpl((TimeStampNanoTZVector) to);\n-  }\n-}\n\\ No newline at end of file\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/TimeStampNanoVector.java b/java/vector/src/main/java/org/apache/arrow/vector/TimeStampNanoVector.java\ndeleted file mode 100644\nindex fdf5d2694..000000000\n--- a/java/vector/src/main/java/org/apache/arrow/vector/TimeStampNanoVector.java\n+++ /dev/null\n@@ -1,218 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- * <p>\n- * http://www.apache.org/licenses/LICENSE-2.0\n- * <p>\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.arrow.vector;\n-\n-import org.apache.arrow.memory.BufferAllocator;\n-import org.apache.arrow.vector.complex.impl.TimeStampNanoReaderImpl;\n-import org.apache.arrow.vector.complex.reader.FieldReader;\n-import org.apache.arrow.vector.holders.TimeStampNanoHolder;\n-import org.apache.arrow.vector.holders.NullableTimeStampNanoHolder;\n-import org.apache.arrow.vector.types.Types;\n-import org.apache.arrow.vector.types.pojo.FieldType;\n-import org.apache.arrow.vector.util.TransferPair;\n-import org.joda.time.LocalDateTime;\n-\n-/**\n- * TimeStampNanoVector implements a fixed width vector (8 bytes) of\n- * timestamp (nanosecond resolution) values which could be null. A validity buffer\n- * (bit vector) is maintained to track which elements in the vector are null.\n- */\n-public class TimeStampNanoVector extends TimeStampVector {\n-  private final FieldReader reader;\n-\n-  /**\n-   * Instantiate a TimeStampNanoVector. This doesn't allocate any memory for\n-   * the data in vector.\n-   * @param name name of the vector\n-   * @param allocator allocator for memory management.\n-   */\n-  public TimeStampNanoVector(String name, BufferAllocator allocator) {\n-    this(name, FieldType.nullable(Types.MinorType.TIMESTAMPNANO.getType()),\n-            allocator);\n-  }\n-\n-  /**\n-   * Instantiate a TimeStampNanoVector. This doesn't allocate any memory for\n-   * the data in vector.\n-   * @param name name of the vector\n-   * @param fieldType type of Field materialized by this vector\n-   * @param allocator allocator for memory management.\n-   */\n-  public TimeStampNanoVector(String name, FieldType fieldType, BufferAllocator allocator) {\n-    super(name, fieldType, allocator);\n-    reader = new TimeStampNanoReaderImpl(TimeStampNanoVector.this);\n-  }\n-\n-  /**\n-   * Get a reader that supports reading values from this vector\n-   * @return Field Reader for this vector\n-   */\n-  @Override\n-  public FieldReader getReader() {\n-    return reader;\n-  }\n-\n-  /**\n-   * Get minor type for this vector. The vector holds values belonging\n-   * to a particular type.\n-   * @return {@link org.apache.arrow.vector.types.Types.MinorType}\n-   */\n-  @Override\n-  public Types.MinorType getMinorType() {\n-    return Types.MinorType.TIMESTAMPNANO;\n-  }\n-\n-\n-  /******************************************************************\n-   *                                                                *\n-   *          vector value retrieval methods                        *\n-   *                                                                *\n-   ******************************************************************/\n-\n-\n-  /**\n-   * Get the element at the given index from the vector and\n-   * sets the state in holder. If element at given index\n-   * is null, holder.isSet will be zero.\n-   *\n-   * @param index   position of element\n-   */\n-  public void get(int index, NullableTimeStampNanoHolder holder) {\n-    if (isSet(index) == 0) {\n-      holder.isSet = 0;\n-      return;\n-    }\n-    holder.isSet = 1;\n-    holder.value = valueBuffer.getLong(index * TYPE_WIDTH);\n-  }\n-\n-  /**\n-   * Same as {@link #get(int)}.\n-   *\n-   * @param index   position of element\n-   * @return element at given index\n-   */\n-  public LocalDateTime getObject(int index) {\n-    if (isSet(index) == 0) {\n-      return null;\n-    } else {\n-      final long nanos = valueBuffer.getLong(index * TYPE_WIDTH);\n-      final long millis = java.util.concurrent.TimeUnit.NANOSECONDS.toMillis(nanos);\n-      final org.joda.time.LocalDateTime localDateTime = new org.joda.time.LocalDateTime(millis,\n-              org.joda.time.DateTimeZone.UTC);\n-      return localDateTime;\n-    }\n-  }\n-\n-\n-  /******************************************************************\n-   *                                                                *\n-   *          vector value setter methods                           *\n-   *                                                                *\n-   ******************************************************************/\n-\n-\n-  /**\n-   * Set the element at the given index to the value set in data holder.\n-   * If the value in holder is not indicated as set, element in the\n-   * at the given index will be null.\n-   *\n-   * @param index   position of element\n-   * @param holder  nullable data holder for value of element\n-   */\n-  public void set(int index, NullableTimeStampNanoHolder holder) throws IllegalArgumentException {\n-    if (holder.isSet < 0) {\n-      throw new IllegalArgumentException();\n-    } else if (holder.isSet > 0) {\n-      BitVectorHelper.setValidityBitToOne(validityBuffer, index);\n-      setValue(index, holder.value);\n-    } else {\n-      BitVectorHelper.setValidityBit(validityBuffer, index, 0);\n-    }\n-  }\n-\n-  /**\n-   * Set the element at the given index to the value set in data holder.\n-   *\n-   * @param index   position of element\n-   * @param holder  data holder for value of element\n-   */\n-  public void set(int index, TimeStampNanoHolder holder) {\n-    BitVectorHelper.setValidityBitToOne(validityBuffer, index);\n-    setValue(index, holder.value);\n-  }\n-\n-  /**\n-   * Same as {@link #set(int, NullableTimeStampNanoHolder)} except that it handles the\n-   * case when index is greater than or equal to existing\n-   * value capacity {@link #getValueCapacity()}.\n-   *\n-   * @param index   position of element\n-   * @param holder  nullable data holder for value of element\n-   */\n-  public void setSafe(int index, NullableTimeStampNanoHolder holder) throws IllegalArgumentException {\n-    handleSafe(index);\n-    set(index, holder);\n-  }\n-\n-  /**\n-   * Same as {@link #set(int, TimeStampNanoHolder)} except that it handles the\n-   * case when index is greater than or equal to existing\n-   * value capacity {@link #getValueCapacity()}.\n-   *\n-   * @param index   position of element\n-   * @param holder  data holder for value of element\n-   */\n-  public void setSafe(int index, TimeStampNanoHolder holder) {\n-    handleSafe(index);\n-    set(index, holder);\n-  }\n-\n-\n-  /******************************************************************\n-   *                                                                *\n-   *                      vector transfer                           *\n-   *                                                                *\n-   ******************************************************************/\n-\n-\n-  /**\n-   * Construct a TransferPair comprising of this and and a target vector of\n-   * the same type.\n-   * @param ref name of the target vector\n-   * @param allocator allocator for the target vector\n-   * @return {@link TransferPair}\n-   */\n-  @Override\n-  public TransferPair getTransferPair(String ref, BufferAllocator allocator) {\n-    TimeStampNanoVector to = new TimeStampNanoVector(ref,\n-            field.getFieldType(), allocator);\n-    return new TransferImpl(to);\n-  }\n-\n-  /**\n-   * Construct a TransferPair with a desired target vector of the same type.\n-   * @param to target vector\n-   * @return {@link TransferPair}\n-   */\n-  @Override\n-  public TransferPair makeTransferPair(ValueVector to) {\n-    return new TransferImpl((TimeStampNanoVector) to);\n-  }\n-}\n\\ No newline at end of file\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/TimeStampSecTZVector.java b/java/vector/src/main/java/org/apache/arrow/vector/TimeStampSecTZVector.java\ndeleted file mode 100644\nindex 201f1c317..000000000\n--- a/java/vector/src/main/java/org/apache/arrow/vector/TimeStampSecTZVector.java\n+++ /dev/null\n@@ -1,215 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- * <p>\n- * http://www.apache.org/licenses/LICENSE-2.0\n- * <p>\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.arrow.vector;\n-\n-import org.apache.arrow.memory.BufferAllocator;\n-import org.apache.arrow.vector.complex.impl.TimeStampSecTZReaderImpl;\n-import org.apache.arrow.vector.complex.reader.FieldReader;\n-import org.apache.arrow.vector.holders.TimeStampSecTZHolder;\n-import org.apache.arrow.vector.holders.NullableTimeStampSecTZHolder;\n-import org.apache.arrow.vector.types.Types;\n-import org.apache.arrow.vector.types.pojo.FieldType;\n-import org.apache.arrow.vector.util.TransferPair;\n-\n-/**\n- * TimeStampSecTZVector implements a fixed width vector (8 bytes) of\n- * timestamp (seconds resolution) values which could be null. A validity buffer\n- * (bit vector) is maintained to track which elements in the vector are null.\n- */\n-public class TimeStampSecTZVector extends TimeStampVector {\n-  private final FieldReader reader;\n-  private final String timeZone;\n-\n-  /**\n-   * Instantiate a TimeStampSecTZVector. This doesn't allocate any memory for\n-   * the data in vector.\n-   * @param name name of the vector\n-   * @param allocator allocator for memory management.\n-   */\n-  public TimeStampSecTZVector(String name, BufferAllocator allocator, String timeZone) {\n-    this(name, FieldType.nullable(new org.apache.arrow.vector.types.pojo.ArrowType.Timestamp(org.apache.arrow.vector.types.TimeUnit.SECOND, timeZone)),\n-            allocator);\n-  }\n-\n-  /**\n-   * Instantiate a TimeStampSecTZVector. This doesn't allocate any memory for\n-   * the data in vector.\n-   * @param name name of the vector\n-   * @param fieldType type of Field materialized by this vector\n-   * @param allocator allocator for memory management.\n-   */\n-  public TimeStampSecTZVector(String name, FieldType fieldType, BufferAllocator allocator) {\n-    super(name, fieldType, allocator);\n-    org.apache.arrow.vector.types.pojo.ArrowType.Timestamp arrowType = (org.apache.arrow.vector.types.pojo.ArrowType.Timestamp) fieldType.getType();\n-    timeZone = arrowType.getTimezone();\n-    reader = new TimeStampSecTZReaderImpl(TimeStampSecTZVector.this);\n-  }\n-\n-  /**\n-   * Get a reader that supports reading values from this vector\n-   * @return Field Reader for this vector\n-   */\n-  @Override\n-  public FieldReader getReader() {\n-    return reader;\n-  }\n-\n-  /**\n-   * Get minor type for this vector. The vector holds values belonging\n-   * to a particular type.\n-   * @return {@link org.apache.arrow.vector.types.Types.MinorType}\n-   */\n-  @Override\n-  public Types.MinorType getMinorType() {\n-    return Types.MinorType.TIMESTAMPSECTZ;\n-  }\n-\n-\n-  /******************************************************************\n-   *                                                                *\n-   *          vector value retrieval methods                        *\n-   *                                                                *\n-   ******************************************************************/\n-\n-\n-  /**\n-   * Get the element at the given index from the vector and\n-   * sets the state in holder. If element at given index\n-   * is null, holder.isSet will be zero.\n-   *\n-   * @param index   position of element\n-   */\n-  public void get(int index, NullableTimeStampSecTZHolder holder) {\n-    if (isSet(index) == 0) {\n-      holder.isSet = 0;\n-      return;\n-    }\n-    holder.isSet = 1;\n-    holder.value = valueBuffer.getLong(index * TYPE_WIDTH);\n-  }\n-\n-  /**\n-   * Same as {@link #get(int)}.\n-   *\n-   * @param index   position of element\n-   * @return element at given index\n-   */\n-  public Long getObject(int index) {\n-    if (isSet(index) == 0) {\n-      return null;\n-    } else {\n-      return valueBuffer.getLong(index * TYPE_WIDTH);\n-    }\n-  }\n-\n-\n-  /******************************************************************\n-   *                                                                *\n-   *          vector value setter methods                           *\n-   *                                                                *\n-   ******************************************************************/\n-\n-\n-  /**\n-   * Set the element at the given index to the value set in data holder.\n-   * If the value in holder is not indicated as set, element in the\n-   * at the given index will be null.\n-   *\n-   * @param index   position of element\n-   * @param holder  nullable data holder for value of element\n-   */\n-  public void set(int index, NullableTimeStampSecTZHolder holder) throws IllegalArgumentException {\n-    if (holder.isSet < 0) {\n-      throw new IllegalArgumentException();\n-    } else if (holder.isSet > 0) {\n-      BitVectorHelper.setValidityBitToOne(validityBuffer, index);\n-      setValue(index, holder.value);\n-    } else {\n-      BitVectorHelper.setValidityBit(validityBuffer, index, 0);\n-    }\n-  }\n-\n-  /**\n-   * Set the element at the given index to the value set in data holder.\n-   *\n-   * @param index   position of element\n-   * @param holder  data holder for value of element\n-   */\n-  public void set(int index, TimeStampSecTZHolder holder) {\n-    BitVectorHelper.setValidityBitToOne(validityBuffer, index);\n-    setValue(index, holder.value);\n-  }\n-\n-  /**\n-   * Same as {@link #set(int, NullableTimeStampSecTZHolder)} except that it handles the\n-   * case when index is greater than or equal to existing\n-   * value capacity {@link #getValueCapacity()}.\n-   *\n-   * @param index   position of element\n-   * @param holder  nullable data holder for value of element\n-   */\n-  public void setSafe(int index, NullableTimeStampSecTZHolder holder) throws IllegalArgumentException {\n-    handleSafe(index);\n-    set(index, holder);\n-  }\n-\n-  /**\n-   * Same as {@link #set(int, TimeStampSecTZHolder)} except that it handles the\n-   * case when index is greater than or equal to existing\n-   * value capacity {@link #getValueCapacity()}.\n-   *\n-   * @param index   position of element\n-   * @param holder  data holder for value of element\n-   */\n-  public void setSafe(int index, TimeStampSecTZHolder holder) {\n-    handleSafe(index);\n-    set(index, holder);\n-  }\n-\n-\n-  /******************************************************************\n-   *                                                                *\n-   *                      vector transfer                           *\n-   *                                                                *\n-   ******************************************************************/\n-\n-  /**\n-   * Construct a TransferPair comprising of this and and a target vector of\n-   * the same type.\n-   * @param ref name of the target vector\n-   * @param allocator allocator for the target vector\n-   * @return {@link TransferPair}\n-   */\n-  @Override\n-  public TransferPair getTransferPair(String ref, BufferAllocator allocator) {\n-    TimeStampSecTZVector to = new TimeStampSecTZVector(ref,\n-            field.getFieldType(), allocator);\n-    return new TransferImpl(to);\n-  }\n-\n-  /**\n-   * Construct a TransferPair with a desired target vector of the same type.\n-   * @param to target vector\n-   * @return {@link TransferPair}\n-   */\n-  @Override\n-  public TransferPair makeTransferPair(ValueVector to) {\n-    return new TransferImpl((TimeStampSecTZVector) to);\n-  }\n-}\n\\ No newline at end of file\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/TimeStampSecVector.java b/java/vector/src/main/java/org/apache/arrow/vector/TimeStampSecVector.java\ndeleted file mode 100644\nindex 4bcd4f7bf..000000000\n--- a/java/vector/src/main/java/org/apache/arrow/vector/TimeStampSecVector.java\n+++ /dev/null\n@@ -1,218 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- * <p>\n- * http://www.apache.org/licenses/LICENSE-2.0\n- * <p>\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.arrow.vector;\n-\n-import org.apache.arrow.memory.BufferAllocator;\n-import org.apache.arrow.vector.complex.impl.TimeStampSecReaderImpl;\n-import org.apache.arrow.vector.complex.reader.FieldReader;\n-import org.apache.arrow.vector.holders.TimeStampSecHolder;\n-import org.apache.arrow.vector.holders.NullableTimeStampSecHolder;\n-import org.apache.arrow.vector.types.Types;\n-import org.apache.arrow.vector.types.pojo.FieldType;\n-import org.apache.arrow.vector.util.TransferPair;\n-import org.joda.time.LocalDateTime;\n-\n-/**\n- * TimeStampSecVector implements a fixed width vector (8 bytes) of\n- * timestamp (seconds resolution) values which could be null. A validity buffer (bit vector) is\n- * maintained to track which elements in the vector are null.\n- */\n-public class TimeStampSecVector extends TimeStampVector {\n-  private final FieldReader reader;\n-\n-  /**\n-   * Instantiate a TimeStampSecVector. This doesn't allocate any memory for\n-   * the data in vector.\n-   * @param name name of the vector\n-   * @param allocator allocator for memory management.\n-   */\n-  public TimeStampSecVector(String name, BufferAllocator allocator) {\n-    this(name, FieldType.nullable(Types.MinorType.TIMESTAMPSEC.getType()),\n-            allocator);\n-  }\n-\n-  /**\n-   * Instantiate a TimeStampSecVector. This doesn't allocate any memory for\n-   * the data in vector.\n-   * @param name name of the vector\n-   * @param fieldType type of Field materialized by this vector\n-   * @param allocator allocator for memory management.\n-   */\n-  public TimeStampSecVector(String name, FieldType fieldType, BufferAllocator allocator) {\n-    super(name, fieldType, allocator);\n-    reader = new TimeStampSecReaderImpl(TimeStampSecVector.this);\n-  }\n-\n-  /**\n-   * Get a reader that supports reading values from this vector\n-   * @return Field Reader for this vector\n-   */\n-  @Override\n-  public FieldReader getReader() {\n-    return reader;\n-  }\n-\n-  /**\n-   * Get minor type for this vector. The vector holds values belonging\n-   * to a particular type.\n-   * @return {@link org.apache.arrow.vector.types.Types.MinorType}\n-   */\n-  @Override\n-  public Types.MinorType getMinorType() {\n-    return Types.MinorType.TIMESTAMPSEC;\n-  }\n-\n-\n-  /******************************************************************\n-   *                                                                *\n-   *          vector value retrieval methods                        *\n-   *                                                                *\n-   ******************************************************************/\n-\n-\n-  /**\n-   * Get the element at the given index from the vector and\n-   * sets the state in holder. If element at given index\n-   * is null, holder.isSet will be zero.\n-   *\n-   * @param index   position of element\n-   */\n-  public void get(int index, NullableTimeStampSecHolder holder) {\n-    if (isSet(index) == 0) {\n-      holder.isSet = 0;\n-      return;\n-    }\n-    holder.isSet = 1;\n-    holder.value = valueBuffer.getLong(index * TYPE_WIDTH);\n-  }\n-\n-  /**\n-   * Same as {@link #get(int)}.\n-   *\n-   * @param index   position of element\n-   * @return element at given index\n-   */\n-  public LocalDateTime getObject(int index) {\n-    if (isSet(index) == 0) {\n-      return null;\n-    } else {\n-      final long secs = valueBuffer.getLong(index * TYPE_WIDTH);\n-      final long millis = java.util.concurrent.TimeUnit.SECONDS.toMillis(secs);\n-      final org.joda.time.LocalDateTime localDateTime = new org.joda.time.LocalDateTime(millis,\n-              org.joda.time.DateTimeZone.UTC);\n-      return localDateTime;\n-    }\n-  }\n-\n-\n-  /******************************************************************\n-   *                                                                *\n-   *          vector value setter methods                           *\n-   *                                                                *\n-   ******************************************************************/\n-\n-\n-  /**\n-   * Set the element at the given index to the value set in data holder.\n-   * If the value in holder is not indicated as set, element in the\n-   * at the given index will be null.\n-   *\n-   * @param index   position of element\n-   * @param holder  nullable data holder for value of element\n-   */\n-  public void set(int index, NullableTimeStampSecHolder holder) throws IllegalArgumentException {\n-    if (holder.isSet < 0) {\n-      throw new IllegalArgumentException();\n-    } else if (holder.isSet > 0) {\n-      BitVectorHelper.setValidityBitToOne(validityBuffer, index);\n-      setValue(index, holder.value);\n-    } else {\n-      BitVectorHelper.setValidityBit(validityBuffer, index, 0);\n-    }\n-  }\n-\n-  /**\n-   * Set the element at the given index to the value set in data holder.\n-   *\n-   * @param index   position of element\n-   * @param holder  data holder for value of element\n-   */\n-  public void set(int index, TimeStampSecHolder holder) {\n-    BitVectorHelper.setValidityBitToOne(validityBuffer, index);\n-    setValue(index, holder.value);\n-  }\n-\n-  /**\n-   * Same as {@link #set(int, NullableTimeStampSecHolder)} except that it handles the\n-   * case when index is greater than or equal to existing\n-   * value capacity {@link #getValueCapacity()}.\n-   *\n-   * @param index   position of element\n-   * @param holder  nullable data holder for value of element\n-   */\n-  public void setSafe(int index, NullableTimeStampSecHolder holder) throws IllegalArgumentException {\n-    handleSafe(index);\n-    set(index, holder);\n-  }\n-\n-  /**\n-   * Same as {@link #set(int, TimeStampSecHolder)} except that it handles the\n-   * case when index is greater than or equal to existing\n-   * value capacity {@link #getValueCapacity()}.\n-   *\n-   * @param index   position of element\n-   * @param holder  data holder for value of element\n-   */\n-  public void setSafe(int index, TimeStampSecHolder holder) {\n-    handleSafe(index);\n-    set(index, holder);\n-  }\n-\n-\n-  /******************************************************************\n-   *                                                                *\n-   *                      vector transfer                           *\n-   *                                                                *\n-   ******************************************************************/\n-\n-\n-  /**\n-   * Construct a TransferPair comprising of this and and a target vector of\n-   * the same type.\n-   * @param ref name of the target vector\n-   * @param allocator allocator for the target vector\n-   * @return {@link TransferPair}\n-   */\n-  @Override\n-  public TransferPair getTransferPair(String ref, BufferAllocator allocator) {\n-    TimeStampSecVector to = new TimeStampSecVector(ref,\n-            field.getFieldType(), allocator);\n-    return new TransferImpl(to);\n-  }\n-\n-  /**\n-   * Construct a TransferPair with a desired target vector of the same type.\n-   * @param to target vector\n-   * @return {@link TransferPair}\n-   */\n-  @Override\n-  public TransferPair makeTransferPair(ValueVector to) {\n-    return new TransferImpl((TimeStampSecVector) to);\n-  }\n-}\n\\ No newline at end of file\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/TimeStampVector.java b/java/vector/src/main/java/org/apache/arrow/vector/TimestampVector.java\nsimilarity index 61%\nrename from java/vector/src/main/java/org/apache/arrow/vector/TimeStampVector.java\nrename to java/vector/src/main/java/org/apache/arrow/vector/TimestampVector.java\nindex 4c70b819c..13d72c488 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/TimeStampVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/TimestampVector.java\n@@ -18,30 +18,83 @@\n \n package org.apache.arrow.vector;\n \n+import com.google.common.base.Preconditions;\n+import org.apache.arrow.vector.types.TimeUnit;\n+import org.joda.time.DateTimeZone;\n+\n import io.netty.buffer.ArrowBuf;\n import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.vector.complex.impl.TimestampReaderImpl;\n+import org.apache.arrow.vector.complex.reader.FieldReader;\n+import org.apache.arrow.vector.holders.NullableTimestampHolder;\n+import org.apache.arrow.vector.holders.TimestampHolder;\n+import org.apache.arrow.vector.types.Types;\n+import org.apache.arrow.vector.types.pojo.ArrowType;\n import org.apache.arrow.vector.types.pojo.FieldType;\n import org.apache.arrow.vector.util.TransferPair;\n+import org.joda.time.LocalDateTime;\n+\n \n /**\n- * TimeStampVector is an abstract interface for fixed width vector (8 bytes)\n+ * TimestampVector is an abstract interface for fixed width vector (8 bytes)\n  * of timestamp values which could be null. A validity buffer (bit vector) is\n  * maintained to track which elements in the vector are null.\n  */\n-public abstract class TimeStampVector extends BaseFixedWidthVector {\n+public class TimestampVector extends BaseFixedWidthVector {\n   protected static final byte TYPE_WIDTH = 8;\n \n+  private final FieldReader reader;\n+  private final TimeUnit unit;\n+  private final DateTimeZone timezone;\n+\n+  /**\n+   * Instantiate a TimestampVector. This doesn't allocate any memory for\n+   * the data in vector.\n+   * @param name name of the vector\n+   * @param allocator allocator for memory management.\n+   * @param unit time unit\n+   * @param timezone time zone\n+   */\n+  public TimestampVector(String name, BufferAllocator allocator, TimeUnit unit, String timezone) {\n+    this(name, FieldType.nullable(new ArrowType.Timestamp(unit, timezone)), allocator);\n+  }\n   /**\n-   * Instantiate a TimeStampVector. This doesn't allocate any memory for\n+   * Instantiate a TimestampVector. This doesn't allocate any memory for\n    * the data in vector.\n    * @param name name of the vector\n    * @param fieldType type of Field materialized by this vector\n    * @param allocator allocator for memory management.\n    */\n-  public TimeStampVector(String name, FieldType fieldType, BufferAllocator allocator) {\n+  public TimestampVector(String name, FieldType fieldType, BufferAllocator allocator) {\n     super(name, allocator, fieldType, TYPE_WIDTH);\n+\n+    ArrowType.Timestamp arrowType = (ArrowType.Timestamp) fieldType.getType();\n+\n+    this.reader = new TimestampReaderImpl(this);\n+    this.unit = arrowType.getUnit();\n+    // TODO: Decide if this is right - This matches the current behavior\n+    this.timezone = arrowType.getTimezone() == null ?\n+            DateTimeZone.UTC : DateTimeZone.forID(arrowType.getTimezone());\n   }\n \n+  /**\n+   * Get a reader that supports reading values from this vector\n+   * @return Field Reader for this vector\n+   */\n+  @Override\n+  public FieldReader getReader() {\n+    return reader;\n+  }\n+\n+  /**\n+   * Get minor type for this vector. The vector holds values belonging\n+   * to a particular type.\n+   * @return {@link org.apache.arrow.vector.types.Types.MinorType}\n+   */\n+  @Override\n+  public Types.MinorType getMinorType() {\n+    return Types.MinorType.TIMESTAMP;\n+  }\n \n   /******************************************************************\n    *                                                                *\n@@ -69,21 +122,21 @@ public long get(int index) throws IllegalStateException {\n    * @param thisIndex position to copy to in this vector\n    * @param from source vector\n    */\n-  public void copyFrom(int fromIndex, int thisIndex, TimeStampVector from) {\n+  public void copyFrom(int fromIndex, int thisIndex, TimestampVector from) {\n     BitVectorHelper.setValidityBit(validityBuffer, thisIndex, from.isSet(fromIndex));\n     final long value = from.valueBuffer.getLong(fromIndex * TYPE_WIDTH);\n     valueBuffer.setLong(thisIndex * TYPE_WIDTH, value);\n   }\n \n   /**\n-   * Same as {@link #copyFromSafe(int, int, TimeStampVector)} except that\n+   * Same as {@link #copyFromSafe(int, int, TimestampVector)} except that\n    * it handles the case when the capacity of the vector needs to be expanded\n    * before copy.\n    * @param fromIndex position to copy from in source vector\n    * @param thisIndex position to copy to in this vector\n    * @param from source vector\n    */\n-  public void copyFromSafe(int fromIndex, int thisIndex, TimeStampVector from) {\n+  public void copyFromSafe(int fromIndex, int thisIndex, TimestampVector from) {\n     handleSafe(thisIndex);\n     copyFrom(fromIndex, thisIndex, from);\n   }\n@@ -111,6 +164,22 @@ public void set(int index, long value) {\n     setValue(index, value);\n   }\n \n+  public void set(int index, NullableTimestampHolder holder) {\n+    if (holder.isSet < 0) {\n+      throw new IllegalArgumentException();\n+    } else if (holder.isSet > 0) {\n+      BitVectorHelper.setValidityBitToOne(validityBuffer, index);\n+      setValue(index, holder.value);\n+    } else {\n+      BitVectorHelper.setValidityBit(validityBuffer, index, 0);\n+    }\n+  }\n+\n+  public void set(int index, TimestampHolder holder) {\n+    BitVectorHelper.setValidityBitToOne(validityBuffer, index);\n+    setValue(index, holder.value);\n+  }\n+\n   /**\n    * Same as {@link #set(int, long)} except that it handles the\n    * case when index is greater than or equal to existing\n@@ -124,6 +193,16 @@ public void setSafe(int index, long value) {\n     set(index, value);\n   }\n \n+  public void setSafe(int index, NullableTimestampHolder holder) {\n+    handleSafe(index);\n+    set(index, holder);\n+  }\n+\n+  public void setSafe(int index, TimestampHolder holder) {\n+    handleSafe(index);\n+    set(index, holder);\n+  }\n+\n   /**\n    * Set the element at the given index to null.\n    *\n@@ -179,6 +258,37 @@ public static long get(final ArrowBuf buffer, final int index) {\n     return buffer.getLong(index * TYPE_WIDTH);\n   }\n \n+  public void get(int index, NullableTimestampHolder holder) {\n+    if (isSet(index) == 0) {\n+      holder.isSet = 0;\n+      return;\n+    }\n+    holder.isSet = 1;\n+    holder.value = valueBuffer.getLong(index * TYPE_WIDTH);\n+  }\n+\n+  @Override\n+  public LocalDateTime getObject(int index) {\n+    if (isSet(index) == 0) {\n+      return null;\n+    } else {\n+      long millis = unit.toMillis(get(index));\n+      LocalDateTime date = new LocalDateTime(millis, timezone);\n+      return date;\n+    }\n+  }\n+\n+  @Override\n+  public TransferPair getTransferPair(String ref, BufferAllocator allocator) {\n+    TimestampVector to = new TimestampVector(ref, field.getFieldType(), allocator);\n+    return new TransferImpl(to);\n+  }\n+\n+  @Override\n+  public TransferPair makeTransferPair(ValueVector to) {\n+    return new TransferImpl((TimestampVector) to);\n+  }\n+\n \n   /******************************************************************\n    *                                                                *\n@@ -188,14 +298,15 @@ public static long get(final ArrowBuf buffer, final int index) {\n \n \n   public class TransferImpl implements TransferPair {\n-    TimeStampVector to;\n+    TimestampVector to;\n \n-    public TransferImpl(TimeStampVector to) {\n+    public TransferImpl(TimestampVector to) {\n+      Preconditions.checkArgument(unit == to.unit);\n       this.to = to;\n     }\n \n     @Override\n-    public TimeStampVector getTo() {\n+    public TimestampVector getTo() {\n       return to;\n     }\n \n@@ -211,7 +322,7 @@ public void splitAndTransfer(int startIndex, int length) {\n \n     @Override\n     public void copyValueSafe(int fromIndex, int toIndex) {\n-      to.copyFromSafe(fromIndex, toIndex, TimeStampVector.this);\n+      to.copyFromSafe(fromIndex, toIndex, TimestampVector.this);\n     }\n   }\n }\n\\ No newline at end of file\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/complex/impl/PromotableWriter.java b/java/vector/src/main/java/org/apache/arrow/vector/complex/impl/PromotableWriter.java\nindex 9abd38d20..504a20493 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/complex/impl/PromotableWriter.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/complex/impl/PromotableWriter.java\n@@ -26,7 +26,9 @@\n import org.apache.arrow.vector.complex.MapVector;\n import org.apache.arrow.vector.complex.UnionVector;\n import org.apache.arrow.vector.complex.writer.FieldWriter;\n+import org.apache.arrow.vector.types.Types;\n import org.apache.arrow.vector.types.Types.MinorType;\n+import org.apache.arrow.vector.types.pojo.ArrowType;\n import org.apache.arrow.vector.types.pojo.Field;\n import org.apache.arrow.vector.types.pojo.FieldType;\n import org.apache.arrow.vector.util.TransferPair;\n@@ -119,7 +121,27 @@ public void setPosition(int index) {\n     }\n   }\n \n-  protected FieldWriter getWriter(MinorType type) {\n+  protected FieldWriter getWriter(MinorType minorType) {\n+\n+    if (state == State.UNION) {\n+      ((UnionWriter) writer).getWriter(type);\n+    } else if (state == State.UNTYPED) {\n+      if (minorType == null) {\n+        // ???\n+        return null;\n+      }\n+      ValueVector v = listVector.addOrGetVector(FieldType.nullable(minorType.getType())).getVector();\n+      v.allocateNew();\n+      setWriter(v);\n+      writer.setPosition(position);\n+    } else if (minorType != this.type) {\n+      promoteToUnion();\n+      ((UnionWriter) writer).getWriter(minorType);\n+    }\n+    return writer;\n+  }\n+\n+  protected FieldWriter getWriter(ArrowType type) {\n     if (state == State.UNION) {\n       ((UnionWriter) writer).getWriter(type);\n     } else if (state == State.UNTYPED) {\n@@ -127,11 +149,11 @@ protected FieldWriter getWriter(MinorType type) {\n         // ???\n         return null;\n       }\n-      ValueVector v = listVector.addOrGetVector(FieldType.nullable(type.getType())).getVector();\n+      ValueVector v = listVector.addOrGetVector(FieldType.nullable(type)).getVector();\n       v.allocateNew();\n       setWriter(v);\n       writer.setPosition(position);\n-    } else if (type != this.type) {\n+    } else if (Types.getMinorTypeForArrowType(type) != this.type) {\n       promoteToUnion();\n       ((UnionWriter) writer).getWriter(type);\n     }\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/ipc/JsonFileReader.java b/java/vector/src/main/java/org/apache/arrow/vector/ipc/JsonFileReader.java\nindex 04d50331b..8e03a1e13 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/ipc/JsonFileReader.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/ipc/JsonFileReader.java\n@@ -445,14 +445,7 @@ private ArrowBuf readIntoBuffer(BufferAllocator allocator, ArrowVectorType buffe\n         case TIMENANO:\n           reader = helper.INT8;\n           break;\n-        case TIMESTAMPNANO:\n-        case TIMESTAMPMICRO:\n-        case TIMESTAMPMILLI:\n-        case TIMESTAMPSEC:\n-        case TIMESTAMPNANOTZ:\n-        case TIMESTAMPMICROTZ:\n-        case TIMESTAMPMILLITZ:\n-        case TIMESTAMPSECTZ:\n+        case TIMESTAMP:\n           reader = helper.INT8;\n           break;\n         default:\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/ipc/JsonFileWriter.java b/java/vector/src/main/java/org/apache/arrow/vector/ipc/JsonFileWriter.java\nindex 067fb25b8..8f58077ec 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/ipc/JsonFileWriter.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/ipc/JsonFileWriter.java\n@@ -242,29 +242,8 @@ private void writeValueToGenerator(ArrowVectorType bufferType, ArrowBuf buffer,\n         case TIMENANO:\n           generator.writeNumber(TimeNanoVector.get(buffer, index));\n           break;\n-        case TIMESTAMPSEC:\n-          generator.writeNumber(TimeStampSecVector.get(buffer, index));\n-          break;\n-        case TIMESTAMPMILLI:\n-          generator.writeNumber(TimeStampMilliVector.get(buffer, index));\n-          break;\n-        case TIMESTAMPMICRO:\n-          generator.writeNumber(TimeStampMicroVector.get(buffer, index));\n-          break;\n-        case TIMESTAMPNANO:\n-          generator.writeNumber(TimeStampNanoVector.get(buffer, index));\n-          break;\n-        case TIMESTAMPSECTZ:\n-          generator.writeNumber(TimeStampSecTZVector.get(buffer, index));\n-          break;\n-        case TIMESTAMPMILLITZ:\n-          generator.writeNumber(TimeStampMilliTZVector.get(buffer, index));\n-          break;\n-        case TIMESTAMPMICROTZ:\n-          generator.writeNumber(TimeStampMicroTZVector.get(buffer, index));\n-          break;\n-        case TIMESTAMPNANOTZ:\n-          generator.writeNumber(TimeStampNanoTZVector.get(buffer, index));\n+        case TIMESTAMP:\n+          generator.writeNumber(TimestampVector.get(buffer, index));\n           break;\n         case BIT:\n           generator.writeNumber(BitVectorHelper.get(buffer, index));\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/types/TimeUnit.java b/java/vector/src/main/java/org/apache/arrow/vector/types/TimeUnit.java\nindex 1da9321fc..c4a5812ea 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/types/TimeUnit.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/types/TimeUnit.java\n@@ -19,10 +19,10 @@\n package org.apache.arrow.vector.types;\n \n public enum TimeUnit {\n-  SECOND(org.apache.arrow.flatbuf.TimeUnit.SECOND),\n-  MILLISECOND(org.apache.arrow.flatbuf.TimeUnit.MILLISECOND),\n-  MICROSECOND(org.apache.arrow.flatbuf.TimeUnit.MICROSECOND),\n-  NANOSECOND(org.apache.arrow.flatbuf.TimeUnit.NANOSECOND);\n+  SECOND(org.apache.arrow.flatbuf.TimeUnit.SECOND, java.util.concurrent.TimeUnit.SECONDS),\n+  MILLISECOND(org.apache.arrow.flatbuf.TimeUnit.MILLISECOND, java.util.concurrent.TimeUnit.MILLISECONDS),\n+  MICROSECOND(org.apache.arrow.flatbuf.TimeUnit.MICROSECOND, java.util.concurrent.TimeUnit.MICROSECONDS),\n+  NANOSECOND(org.apache.arrow.flatbuf.TimeUnit.NANOSECOND, java.util.concurrent.TimeUnit.NANOSECONDS);\n \n   private static final TimeUnit[] valuesByFlatbufId = new TimeUnit[TimeUnit.values().length];\n \n@@ -33,9 +33,11 @@\n   }\n \n   private final short flatbufID;\n+  private final java.util.concurrent.TimeUnit timeUnit;\n \n-  TimeUnit(short flatbufID) {\n+  TimeUnit(short flatbufID, java.util.concurrent.TimeUnit timeUnit) {\n     this.flatbufID = flatbufID;\n+    this.timeUnit = timeUnit;\n   }\n \n   public short getFlatbufID() {\n@@ -45,4 +47,20 @@ public short getFlatbufID() {\n   public static TimeUnit fromFlatbufID(short id) {\n     return valuesByFlatbufId[id];\n   }\n+\n+  public final long toNanos(long duration) {\n+    return timeUnit.toNanos(duration);\n+  }\n+\n+  public final long toMicros(long duration) {\n+    return timeUnit.toMicros(duration);\n+  }\n+\n+  public final long toMillis(long duration) {\n+    return timeUnit.toMillis(duration);\n+  }\n+\n+  public final long toSeconds(long duration) {\n+    return timeUnit.toSeconds(duration);\n+  }\n }\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/types/Types.java b/java/vector/src/main/java/org/apache/arrow/vector/types/Types.java\nindex 7834845aa..3d5142c40 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/types/Types.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/types/Types.java\n@@ -35,18 +35,11 @@\n import org.apache.arrow.vector.IntervalDayVector;\n import org.apache.arrow.vector.IntervalYearVector;\n import org.apache.arrow.vector.SmallIntVector;\n+import org.apache.arrow.vector.TimestampVector;\n import org.apache.arrow.vector.TimeMicroVector;\n import org.apache.arrow.vector.TimeMilliVector;\n import org.apache.arrow.vector.TimeNanoVector;\n import org.apache.arrow.vector.TimeSecVector;\n-import org.apache.arrow.vector.TimeStampMicroTZVector;\n-import org.apache.arrow.vector.TimeStampMicroVector;\n-import org.apache.arrow.vector.TimeStampMilliTZVector;\n-import org.apache.arrow.vector.TimeStampMilliVector;\n-import org.apache.arrow.vector.TimeStampNanoTZVector;\n-import org.apache.arrow.vector.TimeStampNanoVector;\n-import org.apache.arrow.vector.TimeStampSecTZVector;\n-import org.apache.arrow.vector.TimeStampSecVector;\n import org.apache.arrow.vector.TinyIntVector;\n import org.apache.arrow.vector.UInt1Vector;\n import org.apache.arrow.vector.UInt2Vector;\n@@ -76,14 +69,7 @@\n import org.apache.arrow.vector.complex.impl.TimeMilliWriterImpl;\n import org.apache.arrow.vector.complex.impl.TimeNanoWriterImpl;\n import org.apache.arrow.vector.complex.impl.TimeSecWriterImpl;\n-import org.apache.arrow.vector.complex.impl.TimeStampMicroTZWriterImpl;\n-import org.apache.arrow.vector.complex.impl.TimeStampMicroWriterImpl;\n-import org.apache.arrow.vector.complex.impl.TimeStampMilliTZWriterImpl;\n-import org.apache.arrow.vector.complex.impl.TimeStampMilliWriterImpl;\n-import org.apache.arrow.vector.complex.impl.TimeStampNanoTZWriterImpl;\n-import org.apache.arrow.vector.complex.impl.TimeStampNanoWriterImpl;\n-import org.apache.arrow.vector.complex.impl.TimeStampSecTZWriterImpl;\n-import org.apache.arrow.vector.complex.impl.TimeStampSecWriterImpl;\n+import org.apache.arrow.vector.complex.impl.TimestampWriterImpl;\n import org.apache.arrow.vector.complex.impl.TinyIntWriterImpl;\n import org.apache.arrow.vector.complex.impl.UInt1WriterImpl;\n import org.apache.arrow.vector.complex.impl.UInt2WriterImpl;\n@@ -249,52 +235,15 @@ public FieldWriter getNewFieldWriter(ValueVector vector) {\n         return new TimeNanoWriterImpl((TimeNanoVector) vector);\n       }\n     },\n-    // time in second from the Unix epoch, 00:00:00.000000 on 1 January 1970, UTC.\n-    TIMESTAMPSEC(new Timestamp(org.apache.arrow.vector.types.TimeUnit.SECOND, null)) {\n+    TIMESTAMP(null) {\n       @Override\n       public FieldVector getNewVector(String name, FieldType fieldType, BufferAllocator allocator, CallBack schemaChangeCallback) {\n-        return new TimeStampSecVector(name, fieldType, allocator);\n+        return new TimestampVector(name, fieldType, allocator);\n       }\n \n       @Override\n       public FieldWriter getNewFieldWriter(ValueVector vector) {\n-        return new TimeStampSecWriterImpl((TimeStampSecVector) vector);\n-      }\n-    },\n-    // time in millis from the Unix epoch, 00:00:00.000 on 1 January 1970, UTC.\n-    TIMESTAMPMILLI(new Timestamp(org.apache.arrow.vector.types.TimeUnit.MILLISECOND, null)) {\n-      @Override\n-      public FieldVector getNewVector(String name, FieldType fieldType, BufferAllocator allocator, CallBack schemaChangeCallback) {\n-        return new TimeStampMilliVector(name, fieldType, allocator);\n-      }\n-\n-      @Override\n-      public FieldWriter getNewFieldWriter(ValueVector vector) {\n-        return new TimeStampMilliWriterImpl((TimeStampMilliVector) vector);\n-      }\n-    },\n-    // time in microsecond from the Unix epoch, 00:00:00.000000 on 1 January 1970, UTC.\n-    TIMESTAMPMICRO(new Timestamp(org.apache.arrow.vector.types.TimeUnit.MICROSECOND, null)) {\n-      @Override\n-      public FieldVector getNewVector(String name, FieldType fieldType, BufferAllocator allocator, CallBack schemaChangeCallback) {\n-        return new TimeStampMicroVector(name, fieldType, allocator);\n-      }\n-\n-      @Override\n-      public FieldWriter getNewFieldWriter(ValueVector vector) {\n-        return new TimeStampMicroWriterImpl((TimeStampMicroVector) vector);\n-      }\n-    },\n-    // time in nanosecond from the Unix epoch, 00:00:00.000000000 on 1 January 1970, UTC.\n-    TIMESTAMPNANO(new Timestamp(org.apache.arrow.vector.types.TimeUnit.NANOSECOND, null)) {\n-      @Override\n-      public FieldVector getNewVector(String name, FieldType fieldType, BufferAllocator allocator, CallBack schemaChangeCallback) {\n-        return new TimeStampNanoVector(name, fieldType, allocator);\n-      }\n-\n-      @Override\n-      public FieldWriter getNewFieldWriter(ValueVector vector) {\n-        return new TimeStampNanoWriterImpl((TimeStampNanoVector) vector);\n+        return new TimestampWriterImpl((TimestampVector) vector);\n       }\n     },\n     INTERVALDAY(new Interval(IntervalUnit.DAY_TIME)) {\n@@ -466,52 +415,9 @@ public FieldVector getNewVector(String name, FieldType fieldType, BufferAllocato\n       public FieldWriter getNewFieldWriter(ValueVector vector) {\n         return new UnionWriter((UnionVector) vector);\n       }\n-    },\n-    TIMESTAMPSECTZ(null) {\n-      @Override\n-      public FieldVector getNewVector(String name, FieldType fieldType, BufferAllocator allocator, CallBack schemaChangeCallback) {\n-        return new TimeStampSecTZVector(name, fieldType, allocator);\n-      }\n-\n-      @Override\n-      public FieldWriter getNewFieldWriter(ValueVector vector) {\n-        return new TimeStampSecTZWriterImpl((TimeStampSecTZVector) vector);\n-      }\n-    },\n-    TIMESTAMPMILLITZ(null) {\n-      @Override\n-      public FieldVector getNewVector(String name, FieldType fieldType, BufferAllocator allocator, CallBack schemaChangeCallback) {\n-        return new TimeStampMilliTZVector(name, fieldType, allocator);\n-      }\n-\n-      @Override\n-      public FieldWriter getNewFieldWriter(ValueVector vector) {\n-        return new TimeStampMilliTZWriterImpl((TimeStampMilliTZVector) vector);\n-      }\n-    },\n-    TIMESTAMPMICROTZ(null) {\n-      @Override\n-      public FieldVector getNewVector(String name, FieldType fieldType, BufferAllocator allocator, CallBack schemaChangeCallback) {\n-        return new TimeStampMicroTZVector(name, fieldType, allocator);\n-      }\n-\n-      @Override\n-      public FieldWriter getNewFieldWriter(ValueVector vector) {\n-        return new TimeStampMicroTZWriterImpl((TimeStampMicroTZVector) vector);\n-      }\n-    },\n-    TIMESTAMPNANOTZ(null) {\n-      @Override\n-      public FieldVector getNewVector(String name, FieldType fieldType, BufferAllocator allocator, CallBack schemaChangeCallback) {\n-        return new TimeStampNanoTZVector(name, fieldType, allocator);\n-      }\n-\n-      @Override\n-      public FieldWriter getNewFieldWriter(ValueVector vector) {\n-        return new TimeStampNanoTZWriterImpl((TimeStampNanoTZVector) vector);\n-      }\n     };\n \n+\n     private final ArrowType type;\n \n     MinorType(ArrowType type) {\n@@ -637,19 +543,7 @@ public MinorType visit(Time type) {\n \n       @Override\n       public MinorType visit(Timestamp type) {\n-        String tz = type.getTimezone();\n-        switch (type.getUnit()) {\n-          case SECOND:\n-            return tz == null ? MinorType.TIMESTAMPSEC : MinorType.TIMESTAMPSECTZ;\n-          case MILLISECOND:\n-            return tz == null ? MinorType.TIMESTAMPMILLI : MinorType.TIMESTAMPMILLITZ;\n-          case MICROSECOND:\n-            return tz == null ? MinorType.TIMESTAMPMICRO : MinorType.TIMESTAMPMICROTZ;\n-          case NANOSECOND:\n-            return tz == null ? MinorType.TIMESTAMPNANO : MinorType.TIMESTAMPNANOTZ;\n-          default:\n-            throw new IllegalArgumentException(\"unknown unit: \" + type);\n-        }\n+        return MinorType.TIMESTAMP;\n       }\n \n       @Override\ndiff --git a/java/vector/src/test/java/org/apache/arrow/vector/TestCopyFrom.java b/java/vector/src/test/java/org/apache/arrow/vector/TestCopyFrom.java\nindex 87ffcafec..a2aa4c87c 100644\n--- a/java/vector/src/test/java/org/apache/arrow/vector/TestCopyFrom.java\n+++ b/java/vector/src/test/java/org/apache/arrow/vector/TestCopyFrom.java\n@@ -20,6 +20,7 @@\n \n import org.apache.arrow.memory.BufferAllocator;\n import org.apache.arrow.memory.RootAllocator;\n+import org.apache.arrow.vector.types.TimeUnit;\n import org.apache.arrow.vector.types.Types;\n import org.joda.time.Period;\n import org.junit.After;\n@@ -49,7 +50,7 @@\n  * NullableVarChar\n  * NullableTimeMicro\n  * NullableTimeMilli\n- * NullableTimeStamp*\n+ * NullableTimestamp\n  */\n \n public class TestCopyFrom {\n@@ -974,8 +975,10 @@ public void testCopyFromWithNulls13() {\n \n   @Test /* TimeStampVector */\n   public void testCopyFromWithNulls14() {\n-    try (final TimeStampVector vector1 = new TimeStampMicroVector(EMPTY_SCHEMA_PATH, allocator);\n-         final TimeStampVector vector2 = new TimeStampMicroVector(EMPTY_SCHEMA_PATH, allocator)) {\n+    try (final TimestampVector vector1 = new TimestampVector(\n+            EMPTY_SCHEMA_PATH, allocator, TimeUnit.MILLISECOND, null);\n+         final TimestampVector vector2 = new TimestampVector(\n+            EMPTY_SCHEMA_PATH, allocator, TimeUnit.MILLISECOND, null)) {\n \n       vector1.allocateNew();\n       assertEquals(4096, vector1.getValueCapacity());\ndiff --git a/java/vector/src/test/java/org/apache/arrow/vector/TestUnionVector.java b/java/vector/src/test/java/org/apache/arrow/vector/TestUnionVector.java\nindex aec7d0f32..640d3a807 100644\n--- a/java/vector/src/test/java/org/apache/arrow/vector/TestUnionVector.java\n+++ b/java/vector/src/test/java/org/apache/arrow/vector/TestUnionVector.java\n@@ -26,13 +26,15 @@\n \n import org.apache.arrow.memory.BufferAllocator;\n import org.apache.arrow.vector.complex.UnionVector;\n-import org.apache.arrow.vector.holders.NullableBitHolder;\n-import org.apache.arrow.vector.holders.NullableIntHolder;\n-import org.apache.arrow.vector.holders.NullableUInt4Holder;\n-import org.apache.arrow.vector.holders.NullableFloat4Holder;\n+import org.apache.arrow.vector.complex.impl.UnionReader;\n+import org.apache.arrow.vector.complex.impl.UnionWriter;\n+import org.apache.arrow.vector.holders.*;\n+import org.apache.arrow.vector.types.TimeUnit;\n import org.apache.arrow.vector.types.Types;\n import org.apache.arrow.vector.types.Types.MinorType;\n import org.apache.arrow.vector.util.TransferPair;\n+import org.joda.time.DateTimeZone;\n+import org.joda.time.LocalDateTime;\n import org.junit.After;\n import org.junit.Before;\n import org.junit.Test;\n@@ -86,6 +88,45 @@ public void testUnionVector() throws Exception {\n     }\n   }\n \n+  @Test\n+  public void testNonSimpleType() throws Exception {\n+    final NullableFloat4Holder float4Holder = new NullableFloat4Holder();\n+    final NullableTimestampHolder timestampHolder = new NullableTimestampHolder();\n+    timestampHolder.unit = TimeUnit.SECOND;\n+    timestampHolder.timezone = \"America/New_York\";\n+\n+    try (UnionVector unionVector = new UnionVector(EMPTY_SCHEMA_PATH, allocator, null)) {\n+      unionVector.allocateNew();\n+\n+      int count = 100;\n+\n+      for (int i = 0; i < count; i++) {\n+        if (i % 3 == 0) {\n+          float4Holder.isSet = 1;\n+          float4Holder.value = i;\n+          unionVector.setSafe(i, float4Holder);\n+        } else if (i % 3 == 1) {\n+          timestampHolder.isSet = 1;\n+          timestampHolder.value = i * 60 * 60;\n+          unionVector.setSafe(i, timestampHolder);\n+        }\n+      }\n+      unionVector.setValueCount(count);\n+\n+      for (int i = 0; i < count; i++) {\n+        if (i % 3 == 0) {\n+          assertEquals(Float.valueOf(i), unionVector.getObject(i));\n+        } else if (i % 3 == 1) {\n+          LocalDateTime actual = (LocalDateTime) unionVector.getObject(i);\n+          LocalDateTime expected = new LocalDateTime(i * 60 * 60 * 1000, DateTimeZone.forID(\"America/New_York\"));\n+          assertTrue(actual.equals(expected));\n+        } else {\n+          assert(unionVector.isNull(i));\n+        }\n+      }\n+    }\n+  }\n+\n   @Test\n   public void testTransfer() throws Exception {\n     try (UnionVector srcVector = new UnionVector(EMPTY_SCHEMA_PATH, allocator, null)) {\ndiff --git a/java/vector/src/test/java/org/apache/arrow/vector/TestValueVector.java b/java/vector/src/test/java/org/apache/arrow/vector/TestValueVector.java\nindex 336ae1c7a..4d587718f 100644\n--- a/java/vector/src/test/java/org/apache/arrow/vector/TestValueVector.java\n+++ b/java/vector/src/test/java/org/apache/arrow/vector/TestValueVector.java\n@@ -17,7 +17,7 @@\n  */\n \n package org.apache.arrow.vector;\n-import org.apache.arrow.vector.util.OversizedAllocationException;\n+\n \n import static org.apache.arrow.vector.TestUtils.newVarBinaryVector;\n import static org.apache.arrow.vector.TestUtils.newVarCharVector;\n@@ -39,11 +39,15 @@\n \n import org.apache.arrow.vector.ipc.message.ArrowRecordBatch;\n import org.apache.arrow.vector.ipc.message.TypeLayout;\n+import org.apache.arrow.vector.types.TimeUnit;\n import org.apache.arrow.vector.types.Types.MinorType;\n import org.apache.arrow.vector.types.pojo.Schema;\n import org.apache.arrow.vector.types.pojo.ArrowType;\n import org.apache.arrow.vector.types.pojo.Field;\n import org.apache.arrow.vector.util.TransferPair;\n+import org.apache.arrow.vector.util.OversizedAllocationException;\n+import org.joda.time.DateTimeZone;\n+import org.joda.time.LocalDateTime;\n import org.junit.After;\n import org.junit.Before;\n import org.junit.Test;\n@@ -473,6 +477,39 @@ public void testFixedType4() {\n     }\n   }\n \n+  @Test\n+  public void testTimestampVector() {\n+     try (final TimestampVector vector = newVector(\n+            TimestampVector.class,\n+            EMPTY_SCHEMA_PATH,\n+            new ArrowType.Timestamp(TimeUnit.SECOND, null), allocator);) {\n+      int initialCapacity = 16;\n+      vector.allocateNew(initialCapacity);\n+\n+      vector.set(0, 1000);\n+      vector.set(1, 2000);\n+\n+      assertEquals(new LocalDateTime(1000 * 1000, DateTimeZone.UTC), vector.getObject(0));\n+      assertEquals(new LocalDateTime(2000 * 1000, DateTimeZone.UTC), vector.getObject(1));\n+    }\n+\n+    try (final TimestampVector vector = newVector(\n+            TimestampVector.class,\n+            EMPTY_SCHEMA_PATH,\n+            new ArrowType.Timestamp(TimeUnit.SECOND, \"America/New_York\"), allocator);) {\n+      int initialCapacity = 16;\n+      vector.allocateNew(initialCapacity);\n+\n+      vector.set(0, 1000);\n+      vector.set(1, 2000);\n+\n+      assertEquals(new LocalDateTime(1000 * 1000, DateTimeZone.forID(\"America/New_York\")),\n+              vector.getObject(0));\n+      assertEquals(new LocalDateTime(2000 * 1000, DateTimeZone.forID(\"America/New_York\")),\n+              vector.getObject(1));\n+    }\n+  }\n+\n   @Test /* UInt4Vector */\n   public void testNullableFixedType1() {\n \ndiff --git a/java/vector/src/test/java/org/apache/arrow/vector/complex/writer/TestComplexWriter.java b/java/vector/src/test/java/org/apache/arrow/vector/complex/writer/TestComplexWriter.java\nindex bd8489eb2..47c202665 100644\n--- a/java/vector/src/test/java/org/apache/arrow/vector/complex/writer/TestComplexWriter.java\n+++ b/java/vector/src/test/java/org/apache/arrow/vector/complex/writer/TestComplexWriter.java\n@@ -53,7 +53,8 @@\n import org.apache.arrow.vector.complex.writer.BaseWriter.ListWriter;\n import org.apache.arrow.vector.complex.writer.BaseWriter.MapWriter;\n import org.apache.arrow.vector.holders.IntHolder;\n-import org.apache.arrow.vector.holders.NullableTimeStampNanoTZHolder;\n+import org.apache.arrow.vector.holders.NullableTimestampHolder;\n+import org.apache.arrow.vector.types.TimeUnit;\n import org.apache.arrow.vector.types.pojo.ArrowType;\n import org.apache.arrow.vector.types.pojo.ArrowType.ArrowTypeID;\n import org.apache.arrow.vector.types.pojo.ArrowType.Int;\n@@ -69,6 +70,7 @@\n import org.apache.arrow.vector.util.JsonStringHashMap;\n import org.apache.arrow.vector.util.Text;\n import org.apache.arrow.vector.util.TransferPair;\n+import org.joda.time.DateTimeZone;\n import org.joda.time.LocalDateTime;\n import org.junit.Assert;\n import org.junit.Test;\n@@ -379,10 +381,12 @@ public void unionListListType() {\n           ListWriter innerListWriter = listWriter.list();\n           innerListWriter.startList();\n           for (int k = 0; k < i % 13; k++) {\n-            if (k % 2 == 0) {\n+            if (k % 3 == 0) {\n               innerListWriter.integer().writeInt(k);\n-            } else {\n+            } else if (k % 3 == 1){\n               innerListWriter.bigInt().writeBigInt(k);\n+            } else {\n+              innerListWriter.timestamp(TimeUnit.SECOND, \"America/New_York\").writeTimestamp(k * 60 * 60);\n             }\n           }\n           innerListWriter.endList();\n@@ -409,10 +413,12 @@ public void unionListListType2() {\n         for (int j = 0; j < i % 7; j++) {\n           innerListWriter.startList();\n           for (int k = 0; k < i % 13; k++) {\n-            if (k % 2 == 0) {\n+            if (k % 3 == 0) {\n               innerListWriter.integer().writeInt(k);\n-            } else {\n+            } else if (k % 3 == 1){\n               innerListWriter.bigInt().writeBigInt(k);\n+            } else {\n+              innerListWriter.timestamp(TimeUnit.SECOND, \"America/New_York\").writeTimestamp(k * 60 * 60);\n             }\n           }\n           innerListWriter.endList();\n@@ -433,10 +439,14 @@ private void checkUnionList(ListVector listVector) {\n         FieldReader innerListReader = listReader.reader();\n         for (int k = 0; k < i % 13; k++) {\n           innerListReader.next();\n-          if (k % 2 == 0) {\n+          if (k % 3 == 0) {\n             Assert.assertEquals(\"record: \" + i, k, innerListReader.reader().readInteger().intValue());\n-          } else {\n+          } else if (k % 3 == 1) {\n             Assert.assertEquals(\"record: \" + i, k, innerListReader.reader().readLong().longValue());\n+          } else {\n+            Assert.assertEquals(\"record:\" + i,\n+                    new LocalDateTime(k * 60 * 60 * 1000, DateTimeZone.forID(\"America/New_York\")),\n+                    innerListReader.reader().readLocalDateTime());\n           }\n         }\n       }\n@@ -450,20 +460,26 @@ public void simpleUnion() {\n     unionWriter.allocate();\n     for (int i = 0; i < COUNT; i++) {\n       unionWriter.setPosition(i);\n-      if (i % 2 == 0) {\n+      if (i % 3 == 0 ) {\n         unionWriter.writeInt(i);\n-      } else {\n+      } else if (i % 3 == 1) {\n         unionWriter.writeFloat4((float) i);\n+      } else {\n+        unionWriter.asTimestamp(TimeUnit.SECOND, \"America/New_York\").writeTimestamp(i * 60 * 60);\n       }\n     }\n     vector.setValueCount(COUNT);\n     UnionReader unionReader = new UnionReader(vector);\n     for (int i = 0; i < COUNT; i++) {\n       unionReader.setPosition(i);\n-      if (i % 2 == 0) {\n+      if (i % 3 == 0) {\n         Assert.assertEquals(i, i, unionReader.readInteger());\n-      } else {\n+      } else if (i % 3 == 1) {\n         Assert.assertEquals((float) i, unionReader.readFloat(), 1e-12);\n+      } else {\n+        Assert.assertEquals(\n+                new LocalDateTime(i * 60 * 60 * 1000, DateTimeZone.forID(\"America/New_York\")),\n+                unionReader.readLocalDateTime());\n       }\n     }\n     vector.close();\n@@ -474,6 +490,7 @@ public void promotableWriter() {\n     MapVector parent = MapVector.empty(\"parent\", allocator);\n     ComplexWriter writer = new ComplexWriterImpl(\"root\", parent);\n     MapWriter rootWriter = writer.rootAsMap();\n+\n     for (int i = 0; i < 100; i++) {\n       BigIntWriter bigIntWriter = rootWriter.bigInt(\"a\");\n       bigIntWriter.setPosition(i);\n@@ -494,11 +511,18 @@ public void promotableWriter() {\n       tempBuf.setBytes(0, bytes);\n       varCharWriter.writeVarChar(0, bytes.length, tempBuf);\n     }\n+    for (int i = 200; i < 300 ; i++) {\n+      TimestampWriter timestampWriter = rootWriter.timestamp(\"a\", TimeUnit.SECOND, \"America/New_York\");\n+      timestampWriter.setPosition(i);\n+      timestampWriter.writeTimestamp(i * 60 * 60);\n+    }\n+\n     field = parent.getField().getChildren().get(0).getChildren().get(0);\n     Assert.assertEquals(\"a\", field.getName());\n     Assert.assertEquals(Union.TYPE_TYPE, field.getType().getTypeID());\n     Assert.assertEquals(Int.TYPE_TYPE, field.getChildren().get(0).getType().getTypeID());\n     Assert.assertEquals(Utf8.TYPE_TYPE, field.getChildren().get(1).getType().getTypeID());\n+    Assert.assertEquals(new ArrowType.Timestamp(TimeUnit.SECOND, \"America/New_York\"), field.getChildren().get(2).getType());\n     MapReader rootReader = new SingleMapReaderImpl(parent).reader(\"root\");\n     for (int i = 0; i < 100; i++) {\n       rootReader.setPosition(i);\n@@ -513,6 +537,12 @@ public void promotableWriter() {\n       Text value = reader.readText();\n       Assert.assertEquals(Integer.toString(i), value.toString());\n     }\n+    for (int i = 200; i < 300; i++) {\n+      rootReader.setPosition(i);\n+      FieldReader reader = rootReader.reader(\"a\");\n+      LocalDateTime value = reader.readLocalDateTime();\n+      Assert.assertEquals(new LocalDateTime(i * 60 * 60 * 1000, DateTimeZone.forID(\"America/New_York\")), value);\n+    }\n   }\n \n   /**\n@@ -525,6 +555,7 @@ public void promotableWriterSchema() {\n     MapWriter rootWriter = writer.rootAsMap();\n     rootWriter.bigInt(\"a\");\n     rootWriter.varChar(\"a\");\n+    rootWriter.timestamp(\"a\", TimeUnit.SECOND, \"America/New_York\");\n \n     Field field = parent.getField().getChildren().get(0).getChildren().get(0);\n     Assert.assertEquals(\"a\", field.getName());\n@@ -535,6 +566,8 @@ public void promotableWriterSchema() {\n     Assert.assertEquals(64, intType.getBitWidth());\n     Assert.assertTrue(intType.getIsSigned());\n     Assert.assertEquals(ArrowTypeID.Utf8, field.getChildren().get(1).getType().getTypeID());\n+    Assert.assertEquals(new ArrowType.Timestamp(TimeUnit.SECOND, \"America/New_York\"),\n+            field.getChildren().get(2).getType());\n   }\n \n   private Set<String> getFieldNames(List<Field> fields) {\n@@ -623,14 +656,14 @@ public void timeStampSecWriter() throws Exception {\n     MapWriter rootWriter = writer.rootAsMap();\n \n     {\n-      TimeStampSecWriter timeStampSecWriter = rootWriter.timeStampSec(\"sec\");\n+      TimestampWriter timeStampSecWriter = rootWriter.timestamp(\"sec\", TimeUnit.SECOND, null);\n       timeStampSecWriter.setPosition(0);\n-      timeStampSecWriter.writeTimeStampSec(expectedSecs);\n+      timeStampSecWriter.writeTimestamp(expectedSecs);\n     }\n     {\n-      TimeStampSecTZWriter timeStampSecTZWriter = rootWriter.timeStampSecTZ(\"secTZ\", \"UTC\");\n+      TimestampWriter timeStampSecTZWriter = rootWriter.timestamp(\"secTZ\", TimeUnit.SECOND, \"UTC\");\n       timeStampSecTZWriter.setPosition(1);\n-      timeStampSecTZWriter.writeTimeStampSecTZ(expectedSecs);\n+      timeStampSecTZWriter.writeTimestamp(expectedSecs);\n     }\n     // schema\n     List<Field> children = parent.getField().getChildren().get(0).getChildren();\n@@ -666,15 +699,15 @@ public void timeStampMilliWriters() throws Exception {\n     ComplexWriter writer = new ComplexWriterImpl(\"root\", parent);\n     MapWriter rootWriter = writer.rootAsMap();\n     {\n-      TimeStampMilliWriter timeStampWriter = rootWriter.timeStampMilli(\"milli\");\n+      TimestampWriter timeStampWriter = rootWriter.timestamp(\"milli\",TimeUnit.MILLISECOND, null);\n       timeStampWriter.setPosition(0);\n-      timeStampWriter.writeTimeStampMilli(expectedMillis);\n+      timeStampWriter.writeTimestamp(expectedMillis);\n     }\n     String tz = DateUtility.getTimeZone(10);\n     {\n-      TimeStampMilliTZWriter timeStampTZWriter = rootWriter.timeStampMilliTZ(\"milliTZ\", tz);\n+      TimestampWriter timeStampTZWriter = rootWriter.timestamp(\"milliTZ\", TimeUnit.MILLISECOND, tz);\n       timeStampTZWriter.setPosition(0);\n-      timeStampTZWriter.writeTimeStampMilliTZ(expectedMillis);\n+      timeStampTZWriter.writeTimestamp(expectedMillis);\n     }\n     // schema\n     List<Field> children = parent.getField().getChildren().get(0).getChildren();\n@@ -723,15 +756,15 @@ public void timeStampMicroWriters() throws Exception {\n     MapWriter rootWriter = writer.rootAsMap();\n \n     {\n-      TimeStampMicroWriter timeStampMicroWriter = rootWriter.timeStampMicro(\"micro\");\n+      TimestampWriter timeStampMicroWriter = rootWriter.timestamp(\"micro\", TimeUnit.MICROSECOND, null);\n       timeStampMicroWriter.setPosition(0);\n-      timeStampMicroWriter.writeTimeStampMicro(expectedMicros);\n+      timeStampMicroWriter.writeTimestamp(expectedMicros);\n     }\n     String tz = DateUtility.getTimeZone(5);\n     {\n-      TimeStampMicroTZWriter timeStampMicroWriter = rootWriter.timeStampMicroTZ(\"microTZ\", tz);\n+      TimestampWriter timeStampMicroWriter = rootWriter.timestamp(\"microTZ\", TimeUnit.MICROSECOND, tz);\n       timeStampMicroWriter.setPosition(1);\n-      timeStampMicroWriter.writeTimeStampMicroTZ(expectedMicros);\n+      timeStampMicroWriter.writeTimestamp(expectedMicros);\n     }\n \n     // schema\n@@ -770,15 +803,15 @@ public void timeStampNanoWriters() throws Exception {\n     MapWriter rootWriter = writer.rootAsMap();\n \n     {\n-      TimeStampNanoWriter timeStampNanoWriter = rootWriter.timeStampNano(\"nano\");\n+      TimestampWriter timeStampNanoWriter = rootWriter.timestamp(\"nano\", TimeUnit.NANOSECOND, null);\n       timeStampNanoWriter.setPosition(0);\n-      timeStampNanoWriter.writeTimeStampNano(expectedNanos);\n+      timeStampNanoWriter.writeTimestamp(expectedNanos);\n     }\n     String tz = DateUtility.getTimeZone(3);\n     {\n-      TimeStampNanoTZWriter timeStampNanoWriter = rootWriter.timeStampNanoTZ(\"nanoTZ\", tz);\n+      TimestampWriter timeStampNanoWriter = rootWriter.timestamp(\"nanoTZ\", TimeUnit.NANOSECOND, tz);\n       timeStampNanoWriter.setPosition(0);\n-      timeStampNanoWriter.writeTimeStampNanoTZ(expectedNanos);\n+      timeStampNanoWriter.writeTimestamp(expectedNanos);\n     }\n     // schema\n     List<Field> children = parent.getField().getChildren().get(0).getChildren();\n@@ -800,7 +833,7 @@ public void timeStampNanoWriters() throws Exception {\n       nanoReader.setPosition(0);\n       long nanoLong = nanoReader.readLong();\n       Assert.assertEquals(expectedNanos, nanoLong);\n-      NullableTimeStampNanoTZHolder h = new NullableTimeStampNanoTZHolder();\n+      NullableTimestampHolder h = new NullableTimestampHolder();\n       nanoReader.read(h);\n       Assert.assertEquals(expectedNanos, h.value);\n     }\ndiff --git a/java/vector/src/test/java/org/apache/arrow/vector/ipc/BaseFileTest.java b/java/vector/src/test/java/org/apache/arrow/vector/ipc/BaseFileTest.java\nindex 3514acaa2..10fbe88ea 100644\n--- a/java/vector/src/test/java/org/apache/arrow/vector/ipc/BaseFileTest.java\n+++ b/java/vector/src/test/java/org/apache/arrow/vector/ipc/BaseFileTest.java\n@@ -42,25 +42,23 @@\n import org.apache.arrow.vector.complex.impl.ComplexWriterImpl;\n import org.apache.arrow.vector.complex.impl.UnionListWriter;\n import org.apache.arrow.vector.complex.reader.FieldReader;\n+import org.apache.arrow.vector.complex.writer.*;\n import org.apache.arrow.vector.complex.writer.BaseWriter.ComplexWriter;\n import org.apache.arrow.vector.complex.writer.BaseWriter.ListWriter;\n import org.apache.arrow.vector.complex.writer.BaseWriter.MapWriter;\n-import org.apache.arrow.vector.complex.writer.BigIntWriter;\n-import org.apache.arrow.vector.complex.writer.DateMilliWriter;\n-import org.apache.arrow.vector.complex.writer.IntWriter;\n-import org.apache.arrow.vector.complex.writer.TimeMilliWriter;\n-import org.apache.arrow.vector.complex.writer.TimeStampMilliTZWriter;\n-import org.apache.arrow.vector.complex.writer.TimeStampMilliWriter;\n import org.apache.arrow.vector.dictionary.Dictionary;\n import org.apache.arrow.vector.dictionary.DictionaryEncoder;\n import org.apache.arrow.vector.dictionary.DictionaryProvider;\n-import org.apache.arrow.vector.holders.NullableTimeStampMilliHolder;\n+import org.apache.arrow.vector.holders.NullableTimestampHolder;\n+import org.apache.arrow.vector.types.TimeUnit;\n import org.apache.arrow.vector.types.pojo.ArrowType;\n import org.apache.arrow.vector.types.pojo.DictionaryEncoding;\n import org.apache.arrow.vector.types.pojo.Field;\n import org.apache.arrow.vector.types.pojo.FieldType;\n import org.apache.arrow.vector.util.DateUtility;\n import org.apache.arrow.vector.util.Text;\n+import org.joda.time.Chronology;\n+import org.joda.time.DateTime;\n import org.joda.time.DateTimeZone;\n import org.joda.time.LocalDateTime;\n import org.junit.After;\n@@ -130,7 +128,7 @@ protected void writeComplexData(int count, MapVector parent) {\n       listWriter.endList();\n       mapWriter.setPosition(i);\n       mapWriter.start();\n-      mapWriter.timeStampMilli(\"timestamp\").writeTimeStampMilli(i);\n+      mapWriter.timestamp(\"timestamp\", TimeUnit.MILLISECOND, null).writeTimestamp(i);\n       mapWriter.end();\n     }\n     writer.setValueCount(count);\n@@ -160,7 +158,7 @@ protected void validateComplexContent(int count, VectorSchemaRoot root) {\n       }\n       Assert.assertEquals(Long.valueOf(i), root.getVector(\"bigInt\").getObject(i));\n       Assert.assertEquals(i % 3, ((List<?>) root.getVector(\"list\").getObject(i)).size());\n-      NullableTimeStampMilliHolder h = new NullableTimeStampMilliHolder();\n+      NullableTimestampHolder h = new NullableTimestampHolder();\n       FieldReader mapReader = root.getVector(\"map\").getReader();\n       mapReader.setPosition(i);\n       mapReader.reader(\"timestamp\").read(h);\n@@ -172,16 +170,21 @@ private LocalDateTime makeDateTimeFromCount(int i) {\n     return new LocalDateTime(2000 + i, 1 + i, 1 + i, i, i, i, i);\n   }\n \n+  private DateTime makeDateTimeFromCount(int i, String tz) {\n+    return new DateTime(2000 + i, 1 + i, 1 + i, i, i, i, i, DateTimeZone.forID(tz));\n+  }\n+\n   protected void writeDateTimeData(int count, MapVector parent) {\n     Assert.assertTrue(count < 100);\n     ComplexWriter writer = new ComplexWriterImpl(\"root\", parent);\n     MapWriter rootWriter = writer.rootAsMap();\n     DateMilliWriter dateWriter = rootWriter.dateMilli(\"date\");\n     TimeMilliWriter timeWriter = rootWriter.timeMilli(\"time\");\n-    TimeStampMilliWriter timeStampMilliWriter = rootWriter.timeStampMilli(\"timestamp-milli\");\n-    TimeStampMilliTZWriter timeStampMilliTZWriter = rootWriter.timeStampMilliTZ(\"timestamp-milliTZ\", \"Europe/Paris\");\n+    TimestampWriter timeStampMilliWriter = rootWriter.timestamp(\"timestamp-milli\", TimeUnit.MILLISECOND, null);\n+    TimestampWriter timeStampMilliTZWriter = rootWriter.timestamp(\"timestamp-milliTZ\",TimeUnit.MILLISECOND, \"Europe/Paris\");\n     for (int i = 0; i < count; i++) {\n       LocalDateTime dt = makeDateTimeFromCount(i);\n+      DateTime dt2 = makeDateTimeFromCount(i, \"Europe/Paris\");\n       // Number of days in milliseconds since epoch, stored as 64-bit integer, only date part is used\n       dateWriter.setPosition(i);\n       long dateLong = DateUtility.toMillis(dt.minusMillis(dt.getMillisOfDay()));\n@@ -191,9 +194,9 @@ protected void writeDateTimeData(int count, MapVector parent) {\n       timeWriter.writeTimeMilli(dt.getMillisOfDay());\n       // Timestamp is milliseconds since the epoch, stored as 64-bit integer\n       timeStampMilliWriter.setPosition(i);\n-      timeStampMilliWriter.writeTimeStampMilli(DateUtility.toMillis(dt));\n+      timeStampMilliWriter.writeTimestamp(DateUtility.toMillis(dt));\n       timeStampMilliTZWriter.setPosition(i);\n-      timeStampMilliTZWriter.writeTimeStampMilliTZ(DateUtility.toMillis(dt));\n+      timeStampMilliTZWriter.writeTimestamp(dt2.getMillis());\n     }\n     writer.setValueCount(count);\n   }\n@@ -204,6 +207,7 @@ protected void validateDateTimeContent(int count, VectorSchemaRoot root) {\n     for (int i = 0; i < count; i++) {\n       long dateVal = ((DateMilliVector) root.getVector(\"date\")).get(i);\n       LocalDateTime dt = makeDateTimeFromCount(i);\n+      LocalDateTime dt2 = makeDateTimeFromCount(i, \"Europe/Paris\").toLocalDateTime();\n       LocalDateTime dateExpected = dt.minusMillis(dt.getMillisOfDay());\n       Assert.assertEquals(DateUtility.toMillis(dateExpected), dateVal);\n       long timeVal = ((TimeMilliVector) root.getVector(\"time\")).get(i);\n@@ -211,7 +215,7 @@ protected void validateDateTimeContent(int count, VectorSchemaRoot root) {\n       Object timestampMilliVal = root.getVector(\"timestamp-milli\").getObject(i);\n       Assert.assertEquals(dt, timestampMilliVal);\n       Object timestampMilliTZVal = root.getVector(\"timestamp-milliTZ\").getObject(i);\n-      Assert.assertEquals(DateUtility.toMillis(dt), timestampMilliTZVal);\n+      Assert.assertEquals(dt2, timestampMilliTZVal);\n     }\n   }\n \n@@ -483,7 +487,7 @@ public void validateUnionData(int count, VectorSchemaRoot root) {\n           Assert.assertEquals(i % 3, unionReader.size());\n           break;\n         case 3:\n-          NullableTimeStampMilliHolder h = new NullableTimeStampMilliHolder();\n+          NullableTimestampHolder h = new NullableTimestampHolder();\n           unionReader.reader(\"timestamp\").read(h);\n           Assert.assertEquals(i, h.value);\n           break;\n@@ -525,7 +529,7 @@ public void writeUnionData(int count, MapVector parent) {\n         case 3:\n           mapWriter.setPosition(i);\n           mapWriter.start();\n-          mapWriter.timeStampMilli(\"timestamp\").writeTimeStampMilli(i);\n+          mapWriter.timestamp(\"timestamp\", TimeUnit.MILLISECOND, null).writeTimestamp(i);\n           mapWriter.end();\n           break;\n       }\ndiff --git a/java/vector/src/test/java/org/apache/arrow/vector/pojo/TestConvert.java b/java/vector/src/test/java/org/apache/arrow/vector/pojo/TestConvert.java\nindex f6f1ad221..a9aa4baaf 100644\n--- a/java/vector/src/test/java/org/apache/arrow/vector/pojo/TestConvert.java\n+++ b/java/vector/src/test/java/org/apache/arrow/vector/pojo/TestConvert.java\n@@ -137,7 +137,7 @@ public void nestedSchema() {\n     childrenBuilder.add(new Field(\"child4\", FieldType.nullable(new List()), ImmutableList.<Field>of(\n         new Field(\"child4.1\", FieldType.nullable(Utf8.INSTANCE), null)\n     )));\n-    childrenBuilder.add(new Field(\"child5\", FieldType.nullable(new Union(UnionMode.Sparse, new int[] {MinorType.TIMESTAMPMILLI.ordinal(), MinorType.FLOAT8.ordinal()})), ImmutableList.<Field>of(\n+    childrenBuilder.add(new Field(\"child5\", FieldType.nullable(new Union(UnionMode.Sparse, new int[] {MinorType.TIMESTAMP.ordinal(), MinorType.FLOAT8.ordinal()})), ImmutableList.<Field>of(\n         new Field(\"child5.1\", FieldType.nullable(new Timestamp(TimeUnit.MILLISECOND, null)), null),\n         new Field(\"child5.2\", FieldType.nullable(new FloatingPoint(DOUBLE)), ImmutableList.<Field>of()),\n         new Field(\"child5.3\", true, new Timestamp(TimeUnit.MILLISECOND, \"UTC\"), null)\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-12-07T22:42:18.426+0000",
                    "updated": "2017-12-07T22:42:18.426+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13118606/comment/16282642",
                    "id": "16282642",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=icexelloss",
                        "name": "icexelloss",
                        "key": "icexelloss",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Li Jin",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Won't fix per discussion:\r\nhttps://docs.google.com/document/d/1n4qjO20wZyS7wSpISgYdIVuD22zstLgP-7gXxS5_7_E/edit",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=icexelloss",
                        "name": "icexelloss",
                        "key": "icexelloss",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Li Jin",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-12-07T22:44:36.865+0000",
                    "updated": "2017-12-07T22:44:36.865+0000"
                }
            ],
            "maxResults": 47,
            "total": 47,
            "startAt": 0
        },
        "customfield_12311820": "0|i3mtl3:",
        "customfield_12314139": null
    }
}