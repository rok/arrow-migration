{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13357187",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13357187",
    "key": "ARROW-11514",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12349983",
                "id": "12349983",
                "description": "",
                "name": "5.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-07-28"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12617387",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12617387",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13383817",
                    "key": "ARROW-13078",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13383817",
                    "fields": {
                        "summary": "[R] Bindings for str_replace_na()",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            },
            {
                "id": "12617630",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12617630",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13384397",
                    "key": "ARROW-13105",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13384397",
                    "fields": {
                        "summary": "[R] Bindings for glue()",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            },
            {
                "id": "12615313",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12615313",
                "type": {
                    "id": "10001",
                    "name": "dependent",
                    "inward": "is depended upon by",
                    "outward": "depends upon",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10001"
                },
                "outwardIssue": {
                    "id": "13377637",
                    "key": "ARROW-12709",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377637",
                    "fields": {
                        "summary": "[C++] Add variadic string join kernel",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=icook",
            "name": "icook",
            "key": "icook",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=icook&avatarId=29388",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=icook&avatarId=29388",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=icook&avatarId=29388",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=icook&avatarId=29388"
            },
            "displayName": "Ian Cook",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333008",
                "id": "12333008",
                "name": "R"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
            "name": "npr",
            "key": "npr",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Neal Richardson",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
            "name": "npr",
            "key": "npr",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Neal Richardson",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "aggregateprogress": {
            "progress": 6600,
            "total": 6600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 6600,
            "total": 6600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-11514/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 11,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13357187/worklog/611993",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #10547:\nURL: https://github.com/apache/arrow/pull/10547#discussion_r654573800\n\n\n\n##########\nFile path: r/R/dplyr-functions.R\n##########\n@@ -215,6 +215,54 @@ nse_funcs$nchar <- function(x, type = \"chars\", allowNA = FALSE, keepNA = NA) {\n   }\n }\n \n+nse_funcs$paste <- function(..., sep = \" \", collapse = NULL, recycle0 = FALSE) {\n+  assert_that(is.null(collapse))\n+  arrow_string_join_function(NullHandlingBehavior$REPLACE, \"NA\")(..., sep)\n+}\n+\n+nse_funcs$paste0 <- function(..., collapse = NULL, recycle0 = FALSE) {\n+  assert_that(is.null(collapse))\n+  arrow_string_join_function(NullHandlingBehavior$REPLACE, \"NA\")(..., \"\")\n+}\n+\n+nse_funcs$str_c <- function(..., sep = \"\", collapse = NULL) {\n+  assert_that(is.null(collapse))\n+  arrow_string_join_function(NullHandlingBehavior$EMIT_NULL)(..., sep)\n+}\n+\n+arrow_string_join_function <- function(null_handling, null_replacement = NULL) {\n+  # the `binary_join_element_wise` Arrow C++ compute kernel takes the separator\n+  # as the last argument, so pass `sep` as the last dots arg to this function\n+  function(...) {\n+    args <- lapply(list(...), function(arg) {\n+      # handle scalar literal args, and cast all args to string for\n+      # consistency with base::paste(), base::paste0(), and stringr::str_c()\n+      if (!inherits(arg, \"Expression\")) {\n+        assert_that(\n+          length(arg) == 1,\n+          msg = \"Literal vectors of length != 1 not supported in string concatenation\"\n+        )\n+        # handle scalar literal NA consistent with the binary_join_element_wise\n+        # kernel's handling of nulls in the data\n+        if (null_handling == NullHandlingBehavior$REPLACE && is.na(arg)) {\n+          arg <- null_replacement\n+        }\n\nReview comment:\n       This comment is incorrect:\r\n   ```c++\r\n   -      // This is redundant but expression simplification uses this to potentially replace\r\n   -      // calls with null\r\n   +      // binary_join_element_wise allocates its own null bitmap (and only produces an\r\n   +      // intersection of input null bitmaps for JoinOptions::EMIT_NULL)\r\n   ```\r\n   If we see an error in expression simplification, that should\r\n   be repaired in the expression simplification code. Kernels should never be required\r\n   to make concessions for how expressions will consume them.\r\n   \r\n   In this case the flag `kernel.null_handling = NullHandling::INTERSECTION;` is not correct\r\n   for `binary_join_element_wise` since `JoinOptions::SKIP, REPLACE` don't satisfy that\r\n   constraint. If a kernel does satisfy `INTERSECTION`, replacing calls with nulls will never\r\n   be an error.\r\n   \r\n   Sidebar: this is an example of why we might alter Function::Dispatch* to examine FunctionOptions\r\n   as well as argument types. NullHandling::INTERSECTION is more efficient when it's\r\n   available and we could break `binary_join_element_wise`'s kernels out into one for each\r\n   `JoinOptions::NullHandlingBehavior`. This would reduce branching inside the kernel as\r\n   well as giving the kernel for `JoinOptions::EMIT_NULL` a boost\r\n   \r\n   \n\n##########\nFile path: r/R/dplyr-functions.R\n##########\n@@ -215,6 +215,54 @@ nse_funcs$nchar <- function(x, type = \"chars\", allowNA = FALSE, keepNA = NA) {\n   }\n }\n \n+nse_funcs$paste <- function(..., sep = \" \", collapse = NULL, recycle0 = FALSE) {\n+  assert_that(is.null(collapse))\n+  arrow_string_join_function(NullHandlingBehavior$REPLACE, \"NA\")(..., sep)\n+}\n+\n+nse_funcs$paste0 <- function(..., collapse = NULL, recycle0 = FALSE) {\n+  assert_that(is.null(collapse))\n+  arrow_string_join_function(NullHandlingBehavior$REPLACE, \"NA\")(..., \"\")\n+}\n+\n+nse_funcs$str_c <- function(..., sep = \"\", collapse = NULL) {\n+  assert_that(is.null(collapse))\n+  arrow_string_join_function(NullHandlingBehavior$EMIT_NULL)(..., sep)\n+}\n+\n+arrow_string_join_function <- function(null_handling, null_replacement = NULL) {\n+  # the `binary_join_element_wise` Arrow C++ compute kernel takes the separator\n+  # as the last argument, so pass `sep` as the last dots arg to this function\n+  function(...) {\n+    args <- lapply(list(...), function(arg) {\n+      # handle scalar literal args, and cast all args to string for\n+      # consistency with base::paste(), base::paste0(), and stringr::str_c()\n+      if (!inherits(arg, \"Expression\")) {\n+        assert_that(\n+          length(arg) == 1,\n+          msg = \"Literal vectors of length != 1 not supported in string concatenation\"\n+        )\n+        # handle scalar literal NA consistent with the binary_join_element_wise\n+        # kernel's handling of nulls in the data\n+        if (null_handling == NullHandlingBehavior$REPLACE && is.na(arg)) {\n+          arg <- null_replacement\n+        }\n\nReview comment:\n       This comment is incorrect:\r\n   ```c++\r\n   -      // This is redundant but expression simplification uses this to potentially replace\r\n   -      // calls with null\r\n   +      // binary_join_element_wise allocates its own null bitmap (and only produces an\r\n   +      // intersection of input null bitmaps for JoinOptions::EMIT_NULL)\r\n   ```\r\n   If we see an error in expression simplification, that should be repaired in the expression simplification code. Kernels should never be required to make concessions for how expressions will consume them.\r\n   \r\n   In this case the flag `kernel.null_handling = NullHandling::INTERSECTION;` is not correct for `binary_join_element_wise` since `JoinOptions::SKIP, REPLACE` don't satisfy that constraint. If a kernel does satisfy `INTERSECTION`, replacing calls with nulls will never be an error.\r\n   \r\n   Sidebar: this is an example of why we might alter Function::Dispatch* to examine FunctionOptions as well as argument types. NullHandling::INTERSECTION is more efficient when it's available and we could break `binary_join_element_wise`'s kernels out into one for each `JoinOptions::NullHandlingBehavior`. This would reduce branching inside the kernel as well as giving the kernel for `JoinOptions::EMIT_NULL` a boost\n\n##########\nFile path: r/R/dplyr-functions.R\n##########\n@@ -215,6 +215,54 @@ nse_funcs$nchar <- function(x, type = \"chars\", allowNA = FALSE, keepNA = NA) {\n   }\n }\n \n+nse_funcs$paste <- function(..., sep = \" \", collapse = NULL, recycle0 = FALSE) {\n+  assert_that(is.null(collapse))\n+  arrow_string_join_function(NullHandlingBehavior$REPLACE, \"NA\")(..., sep)\n+}\n+\n+nse_funcs$paste0 <- function(..., collapse = NULL, recycle0 = FALSE) {\n+  assert_that(is.null(collapse))\n+  arrow_string_join_function(NullHandlingBehavior$REPLACE, \"NA\")(..., \"\")\n+}\n+\n+nse_funcs$str_c <- function(..., sep = \"\", collapse = NULL) {\n+  assert_that(is.null(collapse))\n+  arrow_string_join_function(NullHandlingBehavior$EMIT_NULL)(..., sep)\n+}\n+\n+arrow_string_join_function <- function(null_handling, null_replacement = NULL) {\n+  # the `binary_join_element_wise` Arrow C++ compute kernel takes the separator\n+  # as the last argument, so pass `sep` as the last dots arg to this function\n+  function(...) {\n+    args <- lapply(list(...), function(arg) {\n+      # handle scalar literal args, and cast all args to string for\n+      # consistency with base::paste(), base::paste0(), and stringr::str_c()\n+      if (!inherits(arg, \"Expression\")) {\n+        assert_that(\n+          length(arg) == 1,\n+          msg = \"Literal vectors of length != 1 not supported in string concatenation\"\n+        )\n+        # handle scalar literal NA consistent with the binary_join_element_wise\n+        # kernel's handling of nulls in the data\n+        if (null_handling == NullHandlingBehavior$REPLACE && is.na(arg)) {\n+          arg <- null_replacement\n+        }\n\nReview comment:\n       This comment is incorrect:\r\n   ```diff\r\n   -      // This is redundant but expression simplification uses this to potentially replace\r\n   -      // calls with null\r\n   +      // binary_join_element_wise allocates its own null bitmap (and only produces an\r\n   +      // intersection of input null bitmaps for JoinOptions::EMIT_NULL)\r\n   ```\r\n   If we see an error in expression simplification, that should be repaired in the expression simplification code. Kernels should never be required to make concessions for how expressions will consume them.\r\n   \r\n   In this case the flag `kernel.null_handling = NullHandling::INTERSECTION;` is not correct for `binary_join_element_wise` since `JoinOptions::SKIP, REPLACE` don't satisfy that constraint. If a kernel does satisfy `INTERSECTION`, replacing calls with nulls will never be an error.\r\n   \r\n   Sidebar: this is an example of why we might alter Function::Dispatch* to examine FunctionOptions as well as argument types. NullHandling::INTERSECTION is more efficient when it's available and we could break `binary_join_element_wise`'s kernels out into one for each `JoinOptions::NullHandlingBehavior`. This would reduce branching inside the kernel as well as giving the kernel for `JoinOptions::EMIT_NULL` a boost\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-18T21:06:42.467+0000",
                    "updated": "2021-06-18T21:06:42.467+0000",
                    "started": "2021-06-18T21:06:42.467+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "611993",
                    "issueId": "13357187"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13357187/worklog/612029",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm edited a comment on pull request #10547:\nURL: https://github.com/apache/arrow/pull/10547#issuecomment-864152392\n\n\n   Ah ok, thanks for confirming. Though, if there's another behavior we need for separators to match R's better we can extend the kernel.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-18T21:11:57.662+0000",
                    "updated": "2021-06-18T21:11:57.662+0000",
                    "started": "2021-06-18T21:11:57.661+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "612029",
                    "issueId": "13357187"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13357187/worklog/612050",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #10547:\nURL: https://github.com/apache/arrow/pull/10547#discussion_r654502869\n\n\n\n##########\nFile path: r/R/dplyr-functions.R\n##########\n@@ -215,6 +215,54 @@ nse_funcs$nchar <- function(x, type = \"chars\", allowNA = FALSE, keepNA = NA) {\n   }\n }\n \n+nse_funcs$paste <- function(..., sep = \" \", collapse = NULL, recycle0 = FALSE) {\n+  assert_that(is.null(collapse))\n+  arrow_string_join_function(NullHandlingBehavior$REPLACE, \"NA\")(..., sep)\n+}\n+\n+nse_funcs$paste0 <- function(..., collapse = NULL, recycle0 = FALSE) {\n+  assert_that(is.null(collapse))\n+  arrow_string_join_function(NullHandlingBehavior$REPLACE, \"NA\")(..., \"\")\n+}\n+\n+nse_funcs$str_c <- function(..., sep = \"\", collapse = NULL) {\n+  assert_that(is.null(collapse))\n+  arrow_string_join_function(NullHandlingBehavior$EMIT_NULL)(..., sep)\n+}\n+\n+arrow_string_join_function <- function(null_handling, null_replacement = NULL) {\n+  # the `binary_join_element_wise` Arrow C++ compute kernel takes the separator\n+  # as the last argument, so pass `sep` as the last dots arg to this function\n+  function(...) {\n+    args <- lapply(list(...), function(arg) {\n+      # handle scalar literal args, and cast all args to string for\n+      # consistency with base::paste(), base::paste0(), and stringr::str_c()\n+      if (!inherits(arg, \"Expression\")) {\n+        assert_that(\n+          length(arg) == 1,\n+          msg = \"Literal vectors of length != 1 not supported in string concatenation\"\n+        )\n+        # handle scalar literal NA consistent with the binary_join_element_wise\n+        # kernel's handling of nulls in the data\n+        if (null_handling == NullHandlingBehavior$REPLACE && is.na(arg)) {\n+          arg <- null_replacement\n+        }\n\nReview comment:\n       I need to dig more but it looks like at some point, this gets converted into a dataset scan of an in-memory dataset, where we project a column called `paste0(x, NA_character_, z)` to `null` (so something else made it null before it ever got evaluated).\n\n##########\nFile path: r/R/dplyr-functions.R\n##########\n@@ -215,6 +215,54 @@ nse_funcs$nchar <- function(x, type = \"chars\", allowNA = FALSE, keepNA = NA) {\n   }\n }\n \n+nse_funcs$paste <- function(..., sep = \" \", collapse = NULL, recycle0 = FALSE) {\n+  assert_that(is.null(collapse))\n+  arrow_string_join_function(NullHandlingBehavior$REPLACE, \"NA\")(..., sep)\n+}\n+\n+nse_funcs$paste0 <- function(..., collapse = NULL, recycle0 = FALSE) {\n+  assert_that(is.null(collapse))\n+  arrow_string_join_function(NullHandlingBehavior$REPLACE, \"NA\")(..., \"\")\n+}\n+\n+nse_funcs$str_c <- function(..., sep = \"\", collapse = NULL) {\n+  assert_that(is.null(collapse))\n+  arrow_string_join_function(NullHandlingBehavior$EMIT_NULL)(..., sep)\n+}\n+\n+arrow_string_join_function <- function(null_handling, null_replacement = NULL) {\n+  # the `binary_join_element_wise` Arrow C++ compute kernel takes the separator\n+  # as the last argument, so pass `sep` as the last dots arg to this function\n+  function(...) {\n+    args <- lapply(list(...), function(arg) {\n+      # handle scalar literal args, and cast all args to string for\n+      # consistency with base::paste(), base::paste0(), and stringr::str_c()\n+      if (!inherits(arg, \"Expression\")) {\n+        assert_that(\n+          length(arg) == 1,\n+          msg = \"Literal vectors of length != 1 not supported in string concatenation\"\n+        )\n+        # handle scalar literal NA consistent with the binary_join_element_wise\n+        # kernel's handling of nulls in the data\n+        if (null_handling == NullHandlingBehavior$REPLACE && is.na(arg)) {\n+          arg <- null_replacement\n+        }\n\nReview comment:\n       Ah, it's because we simplify the projection expression and in FoldConstants, we check for functions that handle nulls with INTERSECTION (i.e. any null inputs map to a null output). It looks like I incorrectly marked this kernel so it's simplifying this expression to null before evaluating.\n\n##########\nFile path: r/R/dplyr-functions.R\n##########\n@@ -215,6 +215,54 @@ nse_funcs$nchar <- function(x, type = \"chars\", allowNA = FALSE, keepNA = NA) {\n   }\n }\n \n+nse_funcs$paste <- function(..., sep = \" \", collapse = NULL, recycle0 = FALSE) {\n+  assert_that(is.null(collapse))\n+  arrow_string_join_function(NullHandlingBehavior$REPLACE, \"NA\")(..., sep)\n+}\n+\n+nse_funcs$paste0 <- function(..., collapse = NULL, recycle0 = FALSE) {\n+  assert_that(is.null(collapse))\n+  arrow_string_join_function(NullHandlingBehavior$REPLACE, \"NA\")(..., \"\")\n+}\n+\n+nse_funcs$str_c <- function(..., sep = \"\", collapse = NULL) {\n+  assert_that(is.null(collapse))\n+  arrow_string_join_function(NullHandlingBehavior$EMIT_NULL)(..., sep)\n+}\n+\n+arrow_string_join_function <- function(null_handling, null_replacement = NULL) {\n+  # the `binary_join_element_wise` Arrow C++ compute kernel takes the separator\n+  # as the last argument, so pass `sep` as the last dots arg to this function\n+  function(...) {\n+    args <- lapply(list(...), function(arg) {\n+      # handle scalar literal args, and cast all args to string for\n+      # consistency with base::paste(), base::paste0(), and stringr::str_c()\n+      if (!inherits(arg, \"Expression\")) {\n+        assert_that(\n+          length(arg) == 1,\n+          msg = \"Literal vectors of length != 1 not supported in string concatenation\"\n+        )\n+        # handle scalar literal NA consistent with the binary_join_element_wise\n+        # kernel's handling of nulls in the data\n+        if (null_handling == NullHandlingBehavior$REPLACE && is.na(arg)) {\n+          arg <- null_replacement\n+        }\n\nReview comment:\n       If you want to apply this patch, that should fix things:\r\n   \r\n   ```diff\r\n   diff --git a/cpp/src/arrow/compute/kernels/scalar_string.cc b/cpp/src/arrow/compute/kernels/scalar_string.cc\r\n   index 3f63bf2c4..7fe1fe092 100644\r\n   --- a/cpp/src/arrow/compute/kernels/scalar_string.cc\r\n   +++ b/cpp/src/arrow/compute/kernels/scalar_string.cc\r\n   @@ -3587,10 +3587,14 @@ void AddBinaryJoin(FunctionRegistry* registry) {\r\n            \"binary_join_element_wise\", Arity::VarArgs(/*min_args=*/1),\r\n            &binary_join_element_wise_doc, &kDefaultJoinOptions);\r\n        for (const auto& ty : BaseBinaryTypes()) {\r\n   -      DCHECK_OK(\r\n   -          func->AddKernel({InputType(ty)}, ty,\r\n   +      ScalarKernel kernel{KernelSignature::Make({InputType(ty)}, ty, /*is_varargs=*/true),\r\n                              GenerateTypeAgnosticVarBinaryBase<BinaryJoinElementWise>(ty),\r\n   -                          BinaryJoinElementWiseState::Init));\r\n   +                          BinaryJoinElementWiseState::Init};\r\n   +      // This is redundant but expression simplification uses this to potentially replace\r\n   +      // calls with null\r\n   +      kernel.null_handling = NullHandling::COMPUTED_NO_PREALLOCATE;\r\n   +      kernel.mem_allocation = MemAllocation::NO_PREALLOCATE;\r\n   +      DCHECK_OK(func->AddKernel(std::move(kernel)));\r\n        }\r\n        DCHECK_OK(registry->AddFunction(std::move(func)));\r\n      }\r\n   diff --git a/r/R/dplyr-functions.R b/r/R/dplyr-functions.R\r\n   index 78f83ef9d..bb21ee3f1 100644\r\n   --- a/r/R/dplyr-functions.R\r\n   +++ b/r/R/dplyr-functions.R\r\n   @@ -242,11 +242,6 @@ arrow_string_join_function <- function(null_handling, null_replacement = NULL) {\r\n              length(arg) == 1,\r\n              msg = \"Literal vectors of length != 1 not supported in string concatenation\"\r\n            )\r\n   -        # handle scalar literal NA consistent with the binary_join_element_wise\r\n   -        # kernel's handling of nulls in the data\r\n   -        if (null_handling == NullHandlingBehavior$REPLACE && is.na(arg)) {\r\n   -          arg <- null_replacement\r\n   -        }\r\n            Expression$scalar(as.character(arg))\r\n          } else {\r\n            nse_funcs$as.character(arg)\r\n   ```\n\n##########\nFile path: r/R/dplyr-functions.R\n##########\n@@ -215,6 +215,54 @@ nse_funcs$nchar <- function(x, type = \"chars\", allowNA = FALSE, keepNA = NA) {\n   }\n }\n \n+nse_funcs$paste <- function(..., sep = \" \", collapse = NULL, recycle0 = FALSE) {\n+  assert_that(is.null(collapse))\n+  arrow_string_join_function(NullHandlingBehavior$REPLACE, \"NA\")(..., sep)\n+}\n+\n+nse_funcs$paste0 <- function(..., collapse = NULL, recycle0 = FALSE) {\n+  assert_that(is.null(collapse))\n+  arrow_string_join_function(NullHandlingBehavior$REPLACE, \"NA\")(..., \"\")\n+}\n+\n+nse_funcs$str_c <- function(..., sep = \"\", collapse = NULL) {\n+  assert_that(is.null(collapse))\n+  arrow_string_join_function(NullHandlingBehavior$EMIT_NULL)(..., sep)\n+}\n+\n+arrow_string_join_function <- function(null_handling, null_replacement = NULL) {\n+  # the `binary_join_element_wise` Arrow C++ compute kernel takes the separator\n+  # as the last argument, so pass `sep` as the last dots arg to this function\n+  function(...) {\n+    args <- lapply(list(...), function(arg) {\n+      # handle scalar literal args, and cast all args to string for\n+      # consistency with base::paste(), base::paste0(), and stringr::str_c()\n+      if (!inherits(arg, \"Expression\")) {\n+        assert_that(\n+          length(arg) == 1,\n+          msg = \"Literal vectors of length != 1 not supported in string concatenation\"\n+        )\n+        # handle scalar literal NA consistent with the binary_join_element_wise\n+        # kernel's handling of nulls in the data\n+        if (null_handling == NullHandlingBehavior$REPLACE && is.na(arg)) {\n+          arg <- null_replacement\n+        }\n\nReview comment:\n       Hmm. I got this:\r\n   \r\n   ```\r\n   $ R -e 'library(arrow); library(dplyr); Table$create(x = \"a\", z = \"c\") %>% transmute(paste0(x, NA_character_, z)) %>% collect()'\r\n   \r\n   R version 4.0.3 (2020-10-10) -- \"Bunny-Wunnies Freak Out\"\r\n   Copyright (C) 2020 The R Foundation for Statistical Computing\r\n   Platform: x86_64-conda-linux-gnu (64-bit)\r\n   <SNIP>\r\n   > library(arrow); library(dplyr); Table$create(x = \"a\", z = \"c\") %>% transmute(paste0(x, NA_character_, z)) %>% collect()\r\n   <SNIP>\r\n   # A tibble: 1 x 1\r\n     `paste0(x, NA_character_, z)`\r\n     <chr>                        \r\n   1 aNAc                         \r\n   > \r\n   ```\r\n   which is expected, right?\r\n   \r\n   Just to make sure, was Arrow-C++ and the R package fully rebuilt? Sometimes I find I have to `git clean -fdx .` before things get picked up.\n\n##########\nFile path: r/R/dplyr-functions.R\n##########\n@@ -215,6 +215,54 @@ nse_funcs$nchar <- function(x, type = \"chars\", allowNA = FALSE, keepNA = NA) {\n   }\n }\n \n+nse_funcs$paste <- function(..., sep = \" \", collapse = NULL, recycle0 = FALSE) {\n+  assert_that(is.null(collapse))\n+  arrow_string_join_function(NullHandlingBehavior$REPLACE, \"NA\")(..., sep)\n+}\n+\n+nse_funcs$paste0 <- function(..., collapse = NULL, recycle0 = FALSE) {\n+  assert_that(is.null(collapse))\n+  arrow_string_join_function(NullHandlingBehavior$REPLACE, \"NA\")(..., \"\")\n+}\n+\n+nse_funcs$str_c <- function(..., sep = \"\", collapse = NULL) {\n+  assert_that(is.null(collapse))\n+  arrow_string_join_function(NullHandlingBehavior$EMIT_NULL)(..., sep)\n+}\n+\n+arrow_string_join_function <- function(null_handling, null_replacement = NULL) {\n+  # the `binary_join_element_wise` Arrow C++ compute kernel takes the separator\n+  # as the last argument, so pass `sep` as the last dots arg to this function\n+  function(...) {\n+    args <- lapply(list(...), function(arg) {\n+      # handle scalar literal args, and cast all args to string for\n+      # consistency with base::paste(), base::paste0(), and stringr::str_c()\n+      if (!inherits(arg, \"Expression\")) {\n+        assert_that(\n+          length(arg) == 1,\n+          msg = \"Literal vectors of length != 1 not supported in string concatenation\"\n+        )\n+        # handle scalar literal NA consistent with the binary_join_element_wise\n+        # kernel's handling of nulls in the data\n+        if (null_handling == NullHandlingBehavior$REPLACE && is.na(arg)) {\n+          arg <- null_replacement\n+        }\n\nReview comment:\n       Yes, sorry, I worded that comment badly - probably no comment needs to be there (as noted, it always allocates its own null bitmaps, it just wasn't correctly flagging that before, violating its contract).\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string.cc\n##########\n@@ -3587,10 +3587,14 @@ void AddBinaryJoin(FunctionRegistry* registry) {\n         \"binary_join_element_wise\", Arity::VarArgs(/*min_args=*/1),\n         &binary_join_element_wise_doc, &kDefaultJoinOptions);\n     for (const auto& ty : BaseBinaryTypes()) {\n-      DCHECK_OK(\n-          func->AddKernel({InputType(ty)}, ty,\n+      ScalarKernel kernel{KernelSignature::Make({InputType(ty)}, ty, /*is_varargs=*/true),\n                           GenerateTypeAgnosticVarBinaryBase<BinaryJoinElementWise>(ty),\n-                          BinaryJoinElementWiseState::Init));\n+                          BinaryJoinElementWiseState::Init};\n+      // This is redundant but expression simplification uses this to potentially replace\n+      // calls with null\n\nReview comment:\n       ```suggestion\r\n   ```\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string.cc\n##########\n@@ -3587,10 +3587,14 @@ void AddBinaryJoin(FunctionRegistry* registry) {\n         \"binary_join_element_wise\", Arity::VarArgs(/*min_args=*/1),\n         &binary_join_element_wise_doc, &kDefaultJoinOptions);\n     for (const auto& ty : BaseBinaryTypes()) {\n-      DCHECK_OK(\n-          func->AddKernel({InputType(ty)}, ty,\n+      ScalarKernel kernel{KernelSignature::Make({InputType(ty)}, ty, /*is_varargs=*/true),\n                           GenerateTypeAgnosticVarBinaryBase<BinaryJoinElementWise>(ty),\n-                          BinaryJoinElementWiseState::Init));\n+                          BinaryJoinElementWiseState::Init};\n+      // This is redundant but expression simplification uses this to potentially replace\n+      // calls with null\n\nReview comment:\n       Sorry, my bad - let's not leave this misleading comment here\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-18T21:14:30.455+0000",
                    "updated": "2021-06-18T21:14:30.455+0000",
                    "started": "2021-06-18T21:14:30.455+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "612050",
                    "issueId": "13357187"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13357187/worklog/612063",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #10547:\nURL: https://github.com/apache/arrow/pull/10547#issuecomment-864152392\n\n\n   Ah ok, thanks for confirming. Though, if there's another behavior we need for separators to match R's better we can extend the kernel.\n   \n   On Fri, Jun 18, 2021, at 12:26, Ian Cook wrote:\n   > \n   \n   > ***@***.**** commented on this pull request.\n   \n   > \n   > In r/R/dplyr-functions.R <https://github.com/apache/arrow/pull/10547#discussion_r654554241>:\n   \n   > > +        # handle scalar literal NA consistent with the binary_join_element_wise\n   +        # kernel's handling of nulls in the data\n   +        if (null_handling == NullHandlingBehavior$REPLACE && is.na(arg)) {\n   +          arg <- null_replacement\n   +        }\n   > \n   > Aha, sorry, yes\u2014I didn't look closely enough at the error messages. It's now only the case where the *separator* is a literal `NA` that's causing the function to emit `NA`, and that is the documented behavior:\n   \n   >> Null separators emit null.\n   \n   > So I think we're all good now. Thanks!\n   \n   \n   > \u2014\n   > You are receiving this because you were mentioned.\n   > Reply to this email directly, view it on GitHub <https://github.com/apache/arrow/pull/10547#discussion_r654554241>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AACQB3Y2D6DSFPYDU37BL43TTNXTZANCNFSM4625P4WQ>.\n   \n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-18T21:15:44.311+0000",
                    "updated": "2021-06-18T21:15:44.311+0000",
                    "started": "2021-06-18T21:15:44.311+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "612063",
                    "issueId": "13357187"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13357187/worklog/612151",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ianmcook commented on a change in pull request #10547:\nURL: https://github.com/apache/arrow/pull/10547#discussion_r654432688\n\n\n\n##########\nFile path: r/R/dplyr-functions.R\n##########\n@@ -215,6 +215,52 @@ nse_funcs$nchar <- function(x, type = \"chars\", allowNA = FALSE, keepNA = NA) {\n   }\n }\n \n+nse_funcs$paste <- function(..., sep = \" \", collapse = NULL, recycle0 = FALSE) {\n+  assert_that(is.null(collapse))\n+  arrow_string_join_function(NullHandlingBehavior$REPLACE, \"NA\")(..., sep)\n+}\n+\n+nse_funcs$paste0 <- function(..., collapse = NULL, recycle0 = FALSE) {\n+  assert_that(is.null(collapse))\n+  arrow_string_join_function(NullHandlingBehavior$REPLACE, \"NA\")(..., \"\")\n+}\n+\n+nse_funcs$str_c <- function(..., sep = \"\", collapse = NULL) {\n+  assert_that(is.null(collapse))\n+  arrow_string_join_function(NullHandlingBehavior$EMIT_NULL)(..., sep)\n+}\n+\n+arrow_string_join_function <- function(null_handling, null_replacement = NULL) {\n+  # the binary_join_element_wise kernel takes the separator as the last argument\n+  function(...) {\n+    dots <- list(...) # sep is the last value in dots\n+    for (i in seq_along(dots)) {\n+      # handle scalar literal args, and cast all args to string for\n+      # consistency with base::paste(), base::paste0(), and stringr::str_c()\n+      if (!inherits(dots[[i]], \"Expression\")) {\n+        assert_that(\n+          length(dots[[i]]) == 1,\n+          msg = \"Literal vectors of length != 1 not supported in string concatenation\"\n+        )\n+        # handle scalar literal NA consistent with the binary_join_element_wise\n+        # kernel's handling of nulls in the data\n+        if (null_handling == NullHandlingBehavior$REPLACE && is.na(dots[[i]])) {\n+          dots[[i]] <- null_replacement\n+        }\n\nReview comment:\n       This is necessary (for reasons I don't fully understand) to enable use of `NA` literal scalars in the `paste()`, `paste0()`, and `str_c()` expressions. See the discussion about this at https://github.com/apache/arrow/pull/10520#issuecomment-862962267\n\n##########\nFile path: r/R/dplyr-functions.R\n##########\n@@ -215,6 +215,52 @@ nse_funcs$nchar <- function(x, type = \"chars\", allowNA = FALSE, keepNA = NA) {\n   }\n }\n \n+nse_funcs$paste <- function(..., sep = \" \", collapse = NULL, recycle0 = FALSE) {\n+  assert_that(is.null(collapse))\n+  arrow_string_join_function(NullHandlingBehavior$REPLACE, \"NA\")(..., sep)\n+}\n+\n+nse_funcs$paste0 <- function(..., collapse = NULL, recycle0 = FALSE) {\n+  assert_that(is.null(collapse))\n+  arrow_string_join_function(NullHandlingBehavior$REPLACE, \"NA\")(..., \"\")\n+}\n+\n+nse_funcs$str_c <- function(..., sep = \"\", collapse = NULL) {\n+  assert_that(is.null(collapse))\n+  arrow_string_join_function(NullHandlingBehavior$EMIT_NULL)(..., sep)\n+}\n+\n+arrow_string_join_function <- function(null_handling, null_replacement = NULL) {\n+  # the binary_join_element_wise kernel takes the separator as the last argument\n+  function(...) {\n+    dots <- list(...) # sep is the last value in dots\n+    for (i in seq_along(dots)) {\n+      # handle scalar literal args, and cast all args to string for\n+      # consistency with base::paste(), base::paste0(), and stringr::str_c()\n+      if (!inherits(dots[[i]], \"Expression\")) {\n+        assert_that(\n+          length(dots[[i]]) == 1,\n+          msg = \"Literal vectors of length != 1 not supported in string concatenation\"\n+        )\n+        # handle scalar literal NA consistent with the binary_join_element_wise\n+        # kernel's handling of nulls in the data\n+        if (null_handling == NullHandlingBehavior$REPLACE && is.na(dots[[i]])) {\n+          dots[[i]] <- null_replacement\n+        }\n+        dots[[i]] <- Expression$scalar(as.character(dots[[i]]))\n+      } else {\n+        dots[[i]] <- nse_funcs$as.character(dots[[i]])\n+      }\n+    }\n+    args <- c(function_name = \"binary_join_element_wise\", dots)\n+    args$options <- list(\n+      null_handling = null_handling,\n+      null_replacement = null_replacement\n+    )\n+    do.call(Expression$create, args)\n\nReview comment:\n       @nealrichardson do you think this should call `compute___expr__call` directly to avoid the need for the `do.call` and so forth? (That's the arrow internal function that `Expression$create` calls.)\n\n##########\nFile path: r/R/dplyr-functions.R\n##########\n@@ -215,6 +215,52 @@ nse_funcs$nchar <- function(x, type = \"chars\", allowNA = FALSE, keepNA = NA) {\n   }\n }\n \n+nse_funcs$paste <- function(..., sep = \" \", collapse = NULL, recycle0 = FALSE) {\n+  assert_that(is.null(collapse))\n+  arrow_string_join_function(NullHandlingBehavior$REPLACE, \"NA\")(..., sep)\n+}\n+\n+nse_funcs$paste0 <- function(..., collapse = NULL, recycle0 = FALSE) {\n+  assert_that(is.null(collapse))\n+  arrow_string_join_function(NullHandlingBehavior$REPLACE, \"NA\")(..., \"\")\n+}\n+\n+nse_funcs$str_c <- function(..., sep = \"\", collapse = NULL) {\n+  assert_that(is.null(collapse))\n+  arrow_string_join_function(NullHandlingBehavior$EMIT_NULL)(..., sep)\n+}\n+\n+arrow_string_join_function <- function(null_handling, null_replacement = NULL) {\n+  # the binary_join_element_wise kernel takes the separator as the last argument\n+  function(...) {\n+    dots <- list(...) # sep is the last value in dots\n+    for (i in seq_along(dots)) {\n+      # handle scalar literal args, and cast all args to string for\n+      # consistency with base::paste(), base::paste0(), and stringr::str_c()\n+      if (!inherits(dots[[i]], \"Expression\")) {\n+        assert_that(\n+          length(dots[[i]]) == 1,\n+          msg = \"Literal vectors of length != 1 not supported in string concatenation\"\n+        )\n+        # handle scalar literal NA consistent with the binary_join_element_wise\n+        # kernel's handling of nulls in the data\n+        if (null_handling == NullHandlingBehavior$REPLACE && is.na(dots[[i]])) {\n+          dots[[i]] <- null_replacement\n+        }\n+        dots[[i]] <- Expression$scalar(as.character(dots[[i]]))\n+      } else {\n+        dots[[i]] <- nse_funcs$as.character(dots[[i]])\n+      }\n+    }\n+    args <- c(function_name = \"binary_join_element_wise\", dots)\n+    args$options <- list(\n+      null_handling = null_handling,\n+      null_replacement = null_replacement\n+    )\n+    do.call(Expression$create, args)\n\nReview comment:\n       If yes, I will include a comment in the code to explain.\n\n##########\nFile path: r/R/dplyr-functions.R\n##########\n@@ -215,6 +215,52 @@ nse_funcs$nchar <- function(x, type = \"chars\", allowNA = FALSE, keepNA = NA) {\n   }\n }\n \n+nse_funcs$paste <- function(..., sep = \" \", collapse = NULL, recycle0 = FALSE) {\n+  assert_that(is.null(collapse))\n+  arrow_string_join_function(NullHandlingBehavior$REPLACE, \"NA\")(..., sep)\n+}\n+\n+nse_funcs$paste0 <- function(..., collapse = NULL, recycle0 = FALSE) {\n+  assert_that(is.null(collapse))\n+  arrow_string_join_function(NullHandlingBehavior$REPLACE, \"NA\")(..., \"\")\n+}\n+\n+nse_funcs$str_c <- function(..., sep = \"\", collapse = NULL) {\n+  assert_that(is.null(collapse))\n+  arrow_string_join_function(NullHandlingBehavior$EMIT_NULL)(..., sep)\n+}\n+\n+arrow_string_join_function <- function(null_handling, null_replacement = NULL) {\n+  # the binary_join_element_wise kernel takes the separator as the last argument\n+  function(...) {\n+    dots <- list(...) # sep is the last value in dots\n+    for (i in seq_along(dots)) {\n+      # handle scalar literal args, and cast all args to string for\n+      # consistency with base::paste(), base::paste0(), and stringr::str_c()\n+      if (!inherits(dots[[i]], \"Expression\")) {\n+        assert_that(\n+          length(dots[[i]]) == 1,\n+          msg = \"Literal vectors of length != 1 not supported in string concatenation\"\n+        )\n+        # handle scalar literal NA consistent with the binary_join_element_wise\n+        # kernel's handling of nulls in the data\n+        if (null_handling == NullHandlingBehavior$REPLACE && is.na(dots[[i]])) {\n+          dots[[i]] <- null_replacement\n+        }\n+        dots[[i]] <- Expression$scalar(as.character(dots[[i]]))\n+      } else {\n+        dots[[i]] <- nse_funcs$as.character(dots[[i]])\n+      }\n+    }\n+    args <- c(function_name = \"binary_join_element_wise\", dots)\n+    args$options <- list(\n+      null_handling = null_handling,\n+      null_replacement = null_replacement\n+    )\n+    do.call(Expression$create, args)\n\nReview comment:\n       Oh, disregard this, I see now that I can pass `args` instead of `...` to `Expression$create`. \n\n##########\nFile path: r/R/dplyr-functions.R\n##########\n@@ -215,6 +215,52 @@ nse_funcs$nchar <- function(x, type = \"chars\", allowNA = FALSE, keepNA = NA) {\n   }\n }\n \n+nse_funcs$paste <- function(..., sep = \" \", collapse = NULL, recycle0 = FALSE) {\n+  assert_that(is.null(collapse))\n+  arrow_string_join_function(NullHandlingBehavior$REPLACE, \"NA\")(..., sep)\n+}\n+\n+nse_funcs$paste0 <- function(..., collapse = NULL, recycle0 = FALSE) {\n+  assert_that(is.null(collapse))\n+  arrow_string_join_function(NullHandlingBehavior$REPLACE, \"NA\")(..., \"\")\n+}\n+\n+nse_funcs$str_c <- function(..., sep = \"\", collapse = NULL) {\n+  assert_that(is.null(collapse))\n+  arrow_string_join_function(NullHandlingBehavior$EMIT_NULL)(..., sep)\n+}\n+\n+arrow_string_join_function <- function(null_handling, null_replacement = NULL) {\n+  # the binary_join_element_wise kernel takes the separator as the last argument\n+  function(...) {\n+    dots <- list(...) # sep is the last value in dots\n+    for (i in seq_along(dots)) {\n+      # handle scalar literal args, and cast all args to string for\n+      # consistency with base::paste(), base::paste0(), and stringr::str_c()\n+      if (!inherits(dots[[i]], \"Expression\")) {\n+        assert_that(\n+          length(dots[[i]]) == 1,\n+          msg = \"Literal vectors of length != 1 not supported in string concatenation\"\n+        )\n+        # handle scalar literal NA consistent with the binary_join_element_wise\n+        # kernel's handling of nulls in the data\n+        if (null_handling == NullHandlingBehavior$REPLACE && is.na(dots[[i]])) {\n+          dots[[i]] <- null_replacement\n+        }\n\nReview comment:\n       This is necessary (for reasons I don't fully understand) to enable use of `NA` literal scalars in the `paste()`, `paste0()`, and `str_c()` expressions. See the discussion about this at https://github.com/apache/arrow/pull/10520#issuecomment-862962267\n\n##########\nFile path: r/R/dplyr-functions.R\n##########\n@@ -215,6 +215,54 @@ nse_funcs$nchar <- function(x, type = \"chars\", allowNA = FALSE, keepNA = NA) {\n   }\n }\n \n+nse_funcs$paste <- function(..., sep = \" \", collapse = NULL, recycle0 = FALSE) {\n+  assert_that(is.null(collapse))\n+  arrow_string_join_function(NullHandlingBehavior$REPLACE, \"NA\")(..., sep)\n+}\n+\n+nse_funcs$paste0 <- function(..., collapse = NULL, recycle0 = FALSE) {\n+  assert_that(is.null(collapse))\n+  arrow_string_join_function(NullHandlingBehavior$REPLACE, \"NA\")(..., \"\")\n+}\n+\n+nse_funcs$str_c <- function(..., sep = \"\", collapse = NULL) {\n+  assert_that(is.null(collapse))\n+  arrow_string_join_function(NullHandlingBehavior$EMIT_NULL)(..., sep)\n+}\n+\n+arrow_string_join_function <- function(null_handling, null_replacement = NULL) {\n+  # the `binary_join_element_wise` Arrow C++ compute kernel takes the separator\n+  # as the last argument, so pass `sep` as the last dots arg to this function\n+  function(...) {\n+    args <- lapply(list(...), function(arg) {\n+      # handle scalar literal args, and cast all args to string for\n+      # consistency with base::paste(), base::paste0(), and stringr::str_c()\n+      if (!inherits(arg, \"Expression\")) {\n+        assert_that(\n+          length(arg) == 1,\n+          msg = \"Literal vectors of length != 1 not supported in string concatenation\"\n+        )\n+        # handle scalar literal NA consistent with the binary_join_element_wise\n+        # kernel's handling of nulls in the data\n+        if (null_handling == NullHandlingBehavior$REPLACE && is.na(arg)) {\n+          arg <- null_replacement\n+        }\n\nReview comment:\n       This is necessary (for reasons I don't fully understand) to enable use of `NA` literal scalars in the `paste()`, `paste0()`, and `str_c()` expressions. See the discussion about this at https://github.com/apache/arrow/pull/10520#issuecomment-862962267\n\n##########\nFile path: r/R/dplyr-functions.R\n##########\n@@ -215,6 +215,54 @@ nse_funcs$nchar <- function(x, type = \"chars\", allowNA = FALSE, keepNA = NA) {\n   }\n }\n \n+nse_funcs$paste <- function(..., sep = \" \", collapse = NULL, recycle0 = FALSE) {\n+  assert_that(is.null(collapse))\n+  arrow_string_join_function(NullHandlingBehavior$REPLACE, \"NA\")(..., sep)\n+}\n+\n+nse_funcs$paste0 <- function(..., collapse = NULL, recycle0 = FALSE) {\n+  assert_that(is.null(collapse))\n+  arrow_string_join_function(NullHandlingBehavior$REPLACE, \"NA\")(..., \"\")\n+}\n+\n+nse_funcs$str_c <- function(..., sep = \"\", collapse = NULL) {\n+  assert_that(is.null(collapse))\n+  arrow_string_join_function(NullHandlingBehavior$EMIT_NULL)(..., sep)\n+}\n+\n+arrow_string_join_function <- function(null_handling, null_replacement = NULL) {\n+  # the `binary_join_element_wise` Arrow C++ compute kernel takes the separator\n+  # as the last argument, so pass `sep` as the last dots arg to this function\n+  function(...) {\n+    args <- lapply(list(...), function(arg) {\n+      # handle scalar literal args, and cast all args to string for\n+      # consistency with base::paste(), base::paste0(), and stringr::str_c()\n+      if (!inherits(arg, \"Expression\")) {\n+        assert_that(\n+          length(arg) == 1,\n+          msg = \"Literal vectors of length != 1 not supported in string concatenation\"\n+        )\n+        # handle scalar literal NA consistent with the binary_join_element_wise\n+        # kernel's handling of nulls in the data\n+        if (null_handling == NullHandlingBehavior$REPLACE && is.na(arg)) {\n+          arg <- null_replacement\n+        }\n+        Expression$scalar(as.character(arg))\n+      } else {\n+        nse_funcs$as.character(arg)\n\nReview comment:\n       It might be better to check first whether `arg` is a string and only cast to string if it's not, but the type checking functions do not always work here for the reason described in ARROW-13118, and I can confirm from running some tests that `as.character()` incurs virtually zero compute cost when called on a string array.\n\n##########\nFile path: r/R/dplyr-functions.R\n##########\n@@ -215,6 +215,54 @@ nse_funcs$nchar <- function(x, type = \"chars\", allowNA = FALSE, keepNA = NA) {\n   }\n }\n \n+nse_funcs$paste <- function(..., sep = \" \", collapse = NULL, recycle0 = FALSE) {\n+  assert_that(is.null(collapse))\n+  arrow_string_join_function(NullHandlingBehavior$REPLACE, \"NA\")(..., sep)\n+}\n+\n+nse_funcs$paste0 <- function(..., collapse = NULL, recycle0 = FALSE) {\n+  assert_that(is.null(collapse))\n+  arrow_string_join_function(NullHandlingBehavior$REPLACE, \"NA\")(..., \"\")\n+}\n+\n+nse_funcs$str_c <- function(..., sep = \"\", collapse = NULL) {\n+  assert_that(is.null(collapse))\n+  arrow_string_join_function(NullHandlingBehavior$EMIT_NULL)(..., sep)\n+}\n+\n+arrow_string_join_function <- function(null_handling, null_replacement = NULL) {\n+  # the `binary_join_element_wise` Arrow C++ compute kernel takes the separator\n+  # as the last argument, so pass `sep` as the last dots arg to this function\n+  function(...) {\n+    args <- lapply(list(...), function(arg) {\n+      # handle scalar literal args, and cast all args to string for\n+      # consistency with base::paste(), base::paste0(), and stringr::str_c()\n+      if (!inherits(arg, \"Expression\")) {\n+        assert_that(\n+          length(arg) == 1,\n+          msg = \"Literal vectors of length != 1 not supported in string concatenation\"\n+        )\n+        # handle scalar literal NA consistent with the binary_join_element_wise\n+        # kernel's handling of nulls in the data\n+        if (null_handling == NullHandlingBehavior$REPLACE && is.na(arg)) {\n+          arg <- null_replacement\n+        }\n+        Expression$scalar(as.character(arg))\n+      } else {\n+        nse_funcs$as.character(arg)\n\nReview comment:\n       It might be better to check first whether `arg` is a string and only cast to string if it's not, but the type checking functions do not always work here for the reason described in ARROW-13118, and I can confirm from running some tests that `nse_funcs$as.character()` incurs virtually zero compute cost when called on a string array.\n\n##########\nFile path: r/R/dplyr-functions.R\n##########\n@@ -215,6 +215,54 @@ nse_funcs$nchar <- function(x, type = \"chars\", allowNA = FALSE, keepNA = NA) {\n   }\n }\n \n+nse_funcs$paste <- function(..., sep = \" \", collapse = NULL, recycle0 = FALSE) {\n+  assert_that(is.null(collapse))\n+  arrow_string_join_function(NullHandlingBehavior$REPLACE, \"NA\")(..., sep)\n+}\n+\n+nse_funcs$paste0 <- function(..., collapse = NULL, recycle0 = FALSE) {\n+  assert_that(is.null(collapse))\n+  arrow_string_join_function(NullHandlingBehavior$REPLACE, \"NA\")(..., \"\")\n+}\n+\n+nse_funcs$str_c <- function(..., sep = \"\", collapse = NULL) {\n+  assert_that(is.null(collapse))\n+  arrow_string_join_function(NullHandlingBehavior$EMIT_NULL)(..., sep)\n+}\n+\n+arrow_string_join_function <- function(null_handling, null_replacement = NULL) {\n+  # the `binary_join_element_wise` Arrow C++ compute kernel takes the separator\n+  # as the last argument, so pass `sep` as the last dots arg to this function\n+  function(...) {\n+    args <- lapply(list(...), function(arg) {\n+      # handle scalar literal args, and cast all args to string for\n+      # consistency with base::paste(), base::paste0(), and stringr::str_c()\n+      if (!inherits(arg, \"Expression\")) {\n+        assert_that(\n+          length(arg) == 1,\n+          msg = \"Literal vectors of length != 1 not supported in string concatenation\"\n+        )\n+        # handle scalar literal NA consistent with the binary_join_element_wise\n+        # kernel's handling of nulls in the data\n+        if (null_handling == NullHandlingBehavior$REPLACE && is.na(arg)) {\n+          arg <- null_replacement\n+        }\n+        Expression$scalar(as.character(arg))\n+      } else {\n+        nse_funcs$as.character(arg)\n\nReview comment:\n       It might be better to check first whether `arg` is a string and only cast to string if it's not, but the type checking functions do not always work here for the reason described in ARROW-13118, and I can confirm from running some tests that `nse_funcs$as.character()` incurs virtually zero compute cost when called on a Datum with string type.\n\n##########\nFile path: r/R/dplyr-functions.R\n##########\n@@ -215,6 +215,54 @@ nse_funcs$nchar <- function(x, type = \"chars\", allowNA = FALSE, keepNA = NA) {\n   }\n }\n \n+nse_funcs$paste <- function(..., sep = \" \", collapse = NULL, recycle0 = FALSE) {\n+  assert_that(is.null(collapse))\n+  arrow_string_join_function(NullHandlingBehavior$REPLACE, \"NA\")(..., sep)\n+}\n+\n+nse_funcs$paste0 <- function(..., collapse = NULL, recycle0 = FALSE) {\n+  assert_that(is.null(collapse))\n+  arrow_string_join_function(NullHandlingBehavior$REPLACE, \"NA\")(..., \"\")\n+}\n+\n+nse_funcs$str_c <- function(..., sep = \"\", collapse = NULL) {\n+  assert_that(is.null(collapse))\n+  arrow_string_join_function(NullHandlingBehavior$EMIT_NULL)(..., sep)\n+}\n+\n+arrow_string_join_function <- function(null_handling, null_replacement = NULL) {\n+  # the `binary_join_element_wise` Arrow C++ compute kernel takes the separator\n+  # as the last argument, so pass `sep` as the last dots arg to this function\n+  function(...) {\n+    args <- lapply(list(...), function(arg) {\n+      # handle scalar literal args, and cast all args to string for\n+      # consistency with base::paste(), base::paste0(), and stringr::str_c()\n+      if (!inherits(arg, \"Expression\")) {\n+        assert_that(\n+          length(arg) == 1,\n+          msg = \"Literal vectors of length != 1 not supported in string concatenation\"\n+        )\n+        # handle scalar literal NA consistent with the binary_join_element_wise\n+        # kernel's handling of nulls in the data\n+        if (null_handling == NullHandlingBehavior$REPLACE && is.na(arg)) {\n+          arg <- null_replacement\n+        }\n\nReview comment:\n       Will do, thanks David!\n\n##########\nFile path: r/R/dplyr-functions.R\n##########\n@@ -215,6 +215,54 @@ nse_funcs$nchar <- function(x, type = \"chars\", allowNA = FALSE, keepNA = NA) {\n   }\n }\n \n+nse_funcs$paste <- function(..., sep = \" \", collapse = NULL, recycle0 = FALSE) {\n+  assert_that(is.null(collapse))\n+  arrow_string_join_function(NullHandlingBehavior$REPLACE, \"NA\")(..., sep)\n+}\n+\n+nse_funcs$paste0 <- function(..., collapse = NULL, recycle0 = FALSE) {\n+  assert_that(is.null(collapse))\n+  arrow_string_join_function(NullHandlingBehavior$REPLACE, \"NA\")(..., \"\")\n+}\n+\n+nse_funcs$str_c <- function(..., sep = \"\", collapse = NULL) {\n+  assert_that(is.null(collapse))\n+  arrow_string_join_function(NullHandlingBehavior$EMIT_NULL)(..., sep)\n+}\n+\n+arrow_string_join_function <- function(null_handling, null_replacement = NULL) {\n+  # the `binary_join_element_wise` Arrow C++ compute kernel takes the separator\n+  # as the last argument, so pass `sep` as the last dots arg to this function\n+  function(...) {\n+    args <- lapply(list(...), function(arg) {\n+      # handle scalar literal args, and cast all args to string for\n+      # consistency with base::paste(), base::paste0(), and stringr::str_c()\n+      if (!inherits(arg, \"Expression\")) {\n+        assert_that(\n+          length(arg) == 1,\n+          msg = \"Literal vectors of length != 1 not supported in string concatenation\"\n+        )\n+        # handle scalar literal NA consistent with the binary_join_element_wise\n+        # kernel's handling of nulls in the data\n+        if (null_handling == NullHandlingBehavior$REPLACE && is.na(arg)) {\n+          arg <- null_replacement\n+        }\n\nReview comment:\n       @lidavidm I applied the patch in 9dda54a but unfortunately the problem persists\n\n##########\nFile path: r/R/dplyr-functions.R\n##########\n@@ -215,6 +215,54 @@ nse_funcs$nchar <- function(x, type = \"chars\", allowNA = FALSE, keepNA = NA) {\n   }\n }\n \n+nse_funcs$paste <- function(..., sep = \" \", collapse = NULL, recycle0 = FALSE) {\n+  assert_that(is.null(collapse))\n+  arrow_string_join_function(NullHandlingBehavior$REPLACE, \"NA\")(..., sep)\n+}\n+\n+nse_funcs$paste0 <- function(..., collapse = NULL, recycle0 = FALSE) {\n+  assert_that(is.null(collapse))\n+  arrow_string_join_function(NullHandlingBehavior$REPLACE, \"NA\")(..., \"\")\n+}\n+\n+nse_funcs$str_c <- function(..., sep = \"\", collapse = NULL) {\n+  assert_that(is.null(collapse))\n+  arrow_string_join_function(NullHandlingBehavior$EMIT_NULL)(..., sep)\n+}\n+\n+arrow_string_join_function <- function(null_handling, null_replacement = NULL) {\n+  # the `binary_join_element_wise` Arrow C++ compute kernel takes the separator\n+  # as the last argument, so pass `sep` as the last dots arg to this function\n+  function(...) {\n+    args <- lapply(list(...), function(arg) {\n+      # handle scalar literal args, and cast all args to string for\n+      # consistency with base::paste(), base::paste0(), and stringr::str_c()\n+      if (!inherits(arg, \"Expression\")) {\n+        assert_that(\n+          length(arg) == 1,\n+          msg = \"Literal vectors of length != 1 not supported in string concatenation\"\n+        )\n+        # handle scalar literal NA consistent with the binary_join_element_wise\n+        # kernel's handling of nulls in the data\n+        if (null_handling == NullHandlingBehavior$REPLACE && is.na(arg)) {\n+          arg <- null_replacement\n+        }\n\nReview comment:\n       Aha, sorry, yes\u2014I didn't look closely enough at the error messages. It's now only the case where the _separator_ is a literal `NA` that's causing the function to emit `NA`, and that is the documented behavior:\r\n   > Null separators emit  null.\r\n   So I think we're all good now. Thanks!\n\n##########\nFile path: r/R/dplyr-functions.R\n##########\n@@ -215,6 +215,54 @@ nse_funcs$nchar <- function(x, type = \"chars\", allowNA = FALSE, keepNA = NA) {\n   }\n }\n \n+nse_funcs$paste <- function(..., sep = \" \", collapse = NULL, recycle0 = FALSE) {\n+  assert_that(is.null(collapse))\n+  arrow_string_join_function(NullHandlingBehavior$REPLACE, \"NA\")(..., sep)\n+}\n+\n+nse_funcs$paste0 <- function(..., collapse = NULL, recycle0 = FALSE) {\n+  assert_that(is.null(collapse))\n+  arrow_string_join_function(NullHandlingBehavior$REPLACE, \"NA\")(..., \"\")\n+}\n+\n+nse_funcs$str_c <- function(..., sep = \"\", collapse = NULL) {\n+  assert_that(is.null(collapse))\n+  arrow_string_join_function(NullHandlingBehavior$EMIT_NULL)(..., sep)\n+}\n+\n+arrow_string_join_function <- function(null_handling, null_replacement = NULL) {\n+  # the `binary_join_element_wise` Arrow C++ compute kernel takes the separator\n+  # as the last argument, so pass `sep` as the last dots arg to this function\n+  function(...) {\n+    args <- lapply(list(...), function(arg) {\n+      # handle scalar literal args, and cast all args to string for\n+      # consistency with base::paste(), base::paste0(), and stringr::str_c()\n+      if (!inherits(arg, \"Expression\")) {\n+        assert_that(\n+          length(arg) == 1,\n+          msg = \"Literal vectors of length != 1 not supported in string concatenation\"\n+        )\n+        # handle scalar literal NA consistent with the binary_join_element_wise\n+        # kernel's handling of nulls in the data\n+        if (null_handling == NullHandlingBehavior$REPLACE && is.na(arg)) {\n+          arg <- null_replacement\n+        }\n\nReview comment:\n       Aha, sorry, yes\u2014I didn't look closely enough at the error messages. It's now only the case where the _separator_ is a literal `NA` that's causing the function to emit `NA`, and that is the documented behavior:\r\n   > Null separators emit  null.\r\n   \r\n   So I think we're all good now. Thanks!\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string.cc\n##########\n@@ -3587,10 +3587,14 @@ void AddBinaryJoin(FunctionRegistry* registry) {\n         \"binary_join_element_wise\", Arity::VarArgs(/*min_args=*/1),\n         &binary_join_element_wise_doc, &kDefaultJoinOptions);\n     for (const auto& ty : BaseBinaryTypes()) {\n-      DCHECK_OK(\n-          func->AddKernel({InputType(ty)}, ty,\n+      ScalarKernel kernel{KernelSignature::Make({InputType(ty)}, ty, /*is_varargs=*/true),\n                           GenerateTypeAgnosticVarBinaryBase<BinaryJoinElementWise>(ty),\n-                          BinaryJoinElementWiseState::Init));\n+                          BinaryJoinElementWiseState::Init};\n+      // This is redundant but expression simplification uses this to potentially replace\n+      // calls with null\n\nReview comment:\n       Done\n\n##########\nFile path: r/R/dplyr-functions.R\n##########\n@@ -215,6 +215,54 @@ nse_funcs$nchar <- function(x, type = \"chars\", allowNA = FALSE, keepNA = NA) {\n   }\n }\n \n+nse_funcs$paste <- function(..., sep = \" \", collapse = NULL, recycle0 = FALSE) {\n+  assert_that(is.null(collapse))\n+  arrow_string_join_function(NullHandlingBehavior$REPLACE, \"NA\")(..., sep)\n+}\n+\n+nse_funcs$paste0 <- function(..., collapse = NULL, recycle0 = FALSE) {\n+  assert_that(is.null(collapse))\n+  arrow_string_join_function(NullHandlingBehavior$REPLACE, \"NA\")(..., \"\")\n+}\n+\n+nse_funcs$str_c <- function(..., sep = \"\", collapse = NULL) {\n+  assert_that(is.null(collapse))\n+  arrow_string_join_function(NullHandlingBehavior$EMIT_NULL)(..., sep)\n+}\n+\n+arrow_string_join_function <- function(null_handling, null_replacement = NULL) {\n+  # the `binary_join_element_wise` Arrow C++ compute kernel takes the separator\n+  # as the last argument, so pass `sep` as the last dots arg to this function\n+  function(...) {\n+    args <- lapply(list(...), function(arg) {\n+      # handle scalar literal args, and cast all args to string for\n+      # consistency with base::paste(), base::paste0(), and stringr::str_c()\n+      if (!inherits(arg, \"Expression\")) {\n+        assert_that(\n+          length(arg) == 1,\n+          msg = \"Literal vectors of length != 1 not supported in string concatenation\"\n+        )\n+        # handle scalar literal NA consistent with the binary_join_element_wise\n+        # kernel's handling of nulls in the data\n+        if (null_handling == NullHandlingBehavior$REPLACE && is.na(arg)) {\n+          arg <- null_replacement\n+        }\n\nReview comment:\n       Comment fixed in 1f24ffd\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-18T21:26:32.892+0000",
                    "updated": "2021-06-18T21:26:32.892+0000",
                    "started": "2021-06-18T21:26:32.892+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "612151",
                    "issueId": "13357187"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13357187/worklog/614110",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on a change in pull request #10547:\nURL: https://github.com/apache/arrow/pull/10547#discussion_r657274423\n\n\n\n##########\nFile path: r/R/dplyr-functions.R\n##########\n@@ -215,6 +215,52 @@ nse_funcs$nchar <- function(x, type = \"chars\", allowNA = FALSE, keepNA = NA) {\n   }\n }\n \n+nse_funcs$paste <- function(..., sep = \" \", collapse = NULL, recycle0 = FALSE) {\n+  assert_that(is.null(collapse))\n\nReview comment:\n       Should we do better than this (i.e. explain in the error message that Arrow doesn't support it currently)?\n\n##########\nFile path: r/tests/testthat/test-dplyr-string-functions.R\n##########\n@@ -21,6 +21,162 @@ skip_if_not_available(\"utf8proc\")\n library(dplyr)\n library(stringr)\n \n+test_that(\"paste, paste0, and str_c\", {\n+  df <- tibble(\n+    v = c(\"\u03b1\", \"\u03b2\", \"\u03b3\"),\n\nReview comment:\n       I would advise against putting UTF-8 in this test file and just trust that the C++ library handles it correctly. Could just be outdated CRAN paranoia, but I've definitely had checks fail on some platform where it couldn't parse the test file because it had special characters in it (sounds like a Solaris thing right?). See also test-utf.R\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-23T16:39:02.037+0000",
                    "updated": "2021-06-23T16:39:02.037+0000",
                    "started": "2021-06-23T16:39:02.037+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "614110",
                    "issueId": "13357187"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13357187/worklog/614130",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ianmcook commented on a change in pull request #10547:\nURL: https://github.com/apache/arrow/pull/10547#discussion_r657296909\n\n\n\n##########\nFile path: r/R/dplyr-functions.R\n##########\n@@ -215,6 +215,52 @@ nse_funcs$nchar <- function(x, type = \"chars\", allowNA = FALSE, keepNA = NA) {\n   }\n }\n \n+nse_funcs$paste <- function(..., sep = \" \", collapse = NULL, recycle0 = FALSE) {\n+  assert_that(is.null(collapse))\n\nReview comment:\n       Improved the message in c8a4ab2\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-23T17:00:14.449+0000",
                    "updated": "2021-06-23T17:00:14.449+0000",
                    "started": "2021-06-23T17:00:14.449+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "614130",
                    "issueId": "13357187"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13357187/worklog/614131",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ianmcook commented on a change in pull request #10547:\nURL: https://github.com/apache/arrow/pull/10547#discussion_r657297060\n\n\n\n##########\nFile path: r/tests/testthat/test-dplyr-string-functions.R\n##########\n@@ -21,6 +21,162 @@ skip_if_not_available(\"utf8proc\")\n library(dplyr)\n library(stringr)\n \n+test_that(\"paste, paste0, and str_c\", {\n+  df <- tibble(\n+    v = c(\"\u03b1\", \"\u03b2\", \"\u03b3\"),\n\nReview comment:\n       Changed to ASCII chars in c8a4ab2\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-23T17:00:27.662+0000",
                    "updated": "2021-06-23T17:00:27.662+0000",
                    "started": "2021-06-23T17:00:27.662+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "614131",
                    "issueId": "13357187"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13357187/worklog/614196",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ianmcook commented on pull request #10547:\nURL: https://github.com/apache/arrow/pull/10547#issuecomment-867122944\n\n\n   @lidavidm before I merge this: could you take a quick look at the failing CI checks and confirm that they seem unrelated to the C++ changes here? Thanks!\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-23T20:06:58.813+0000",
                    "updated": "2021-06-23T20:06:58.813+0000",
                    "started": "2021-06-23T20:06:58.813+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "614196",
                    "issueId": "13357187"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13357187/worklog/614209",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #10547:\nURL: https://github.com/apache/arrow/pull/10547#issuecomment-867135971\n\n\n   You should be fine to merge.\r\n   \r\n   AppVeyor is because of ARROW-13134\r\n   MinGW is because of ARROW-13145\r\n   S390x looks like the usual flakiness (if I remember right, the machine doesn't have quite enough RAM?)\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-23T20:29:15.592+0000",
                    "updated": "2021-06-23T20:29:15.592+0000",
                    "started": "2021-06-23T20:29:15.592+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "614209",
                    "issueId": "13357187"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13357187/worklog/614220",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ianmcook closed pull request #10547:\nURL: https://github.com/apache/arrow/pull/10547\n\n\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-23T20:46:30.568+0000",
                    "updated": "2021-06-23T20:46:30.568+0000",
                    "started": "2021-06-23T20:46:30.567+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "614220",
                    "issueId": "13357187"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 6600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@712e6956[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@78bb36df[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7b370d82[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@5a1bc1f5[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@39113c35[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@4d4d14b7[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@ed54b81[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@a4537c7[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3a05422e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@1f480175[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3b65d85e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@183d2bfa[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 6600,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Jun 23 20:46:20 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-06-23T20:46:19.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-11514/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2021-02-05T23:14:55.000+0000",
        "updated": "2021-06-23T20:46:31.000+0000",
        "timeoriginalestimate": null,
        "description": "* In {{paste()}}\u00a0and {{paste0()}},\u00a0use the {{REPLACE}} null handling behavior with replacement string {{\"NA\"}}\u00a0(for consistency with base R)\r\n * In {{str_c()}}, use the {{EMIT_NULL}} null handling behavior (for consistency with stringr)",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "1h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 6600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[R][C++] Bindings for paste(), paste0(), str_c()",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13357187/comment/17368450",
                    "id": "17368450",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=icook",
                        "name": "icook",
                        "key": "icook",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=icook&avatarId=29388",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=icook&avatarId=29388",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=icook&avatarId=29388",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=icook&avatarId=29388"
                        },
                        "displayName": "Ian Cook",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 10547\n[https://github.com/apache/arrow/pull/10547]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=icook",
                        "name": "icook",
                        "key": "icook",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=icook&avatarId=29388",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=icook&avatarId=29388",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=icook&avatarId=29388",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=icook&avatarId=29388"
                        },
                        "displayName": "Ian Cook",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-06-23T20:46:20.022+0000",
                    "updated": "2021-06-23T20:46:20.022+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0nfk0:",
        "customfield_12314139": null
    }
}