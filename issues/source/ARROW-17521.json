{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13478504",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13478504",
    "key": "ARROW-17521",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351947",
                "id": "12351947",
                "description": "",
                "name": "10.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-10-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=vibhatha",
            "name": "vibhatha",
            "key": "vibhatha",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
            },
            "displayName": "Vibhatha Lakmal Abeykoon",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328936",
                "id": "12328936",
                "name": "Python"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
            "name": "westonpace",
            "key": "westonpace",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Weston Pace",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
            "name": "westonpace",
            "key": "westonpace",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Weston Pace",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "aggregateprogress": {
            "progress": 22800,
            "total": 22800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 22800,
            "total": 22800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-17521/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 38,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13478504/worklog/805570",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha opened a new pull request, #14024:\nURL: https://github.com/apache/arrow/pull/14024\n\n   This PR includes a basic prototype WIP version to use NamedTable feature in Substrait. The idea is to provide the flexibility to write Python tests with in-memory PyArrow tables. \r\n   \r\n   The test case here only covers the basic functionality. There is another level of refactor to integrate this with the existing API. Drafted for the purpose of testing with third-party applications. \n\n\n",
                    "created": "2022-09-01T16:04:22.893+0000",
                    "updated": "2022-09-01T16:04:22.893+0000",
                    "started": "2022-09-01T16:04:22.893+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "805570",
                    "issueId": "13478504"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13478504/worklog/805571",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on PR #14024:\nURL: https://github.com/apache/arrow/pull/14024#issuecomment-1234488508\n\n   cc @westonpace @richita\n\n\n",
                    "created": "2022-09-01T16:07:12.726+0000",
                    "updated": "2022-09-01T16:07:12.726+0000",
                    "started": "2022-09-01T16:07:12.726+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "805571",
                    "issueId": "13478504"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13478504/worklog/805578",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #14024:\nURL: https://github.com/apache/arrow/pull/14024#issuecomment-1234517265\n\n   https://issues.apache.org/jira/browse/ARROW-17521\n\n\n",
                    "created": "2022-09-01T16:32:27.469+0000",
                    "updated": "2022-09-01T16:32:27.469+0000",
                    "started": "2022-09-01T16:32:27.468+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "805578",
                    "issueId": "13478504"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13478504/worklog/805659",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on code in PR #14024:\nURL: https://github.com/apache/arrow/pull/14024#discussion_r961196591\n\n\n##########\ncpp/src/arrow/engine/substrait/util.cc:\n##########\n@@ -126,6 +131,36 @@ Result<std::shared_ptr<RecordBatchReader>> ExecuteSerializedPlan(\n   return sink_reader;\n }\n \n+Result<std::shared_ptr<RecordBatchReader>> ExecuteSerializedPlan(\n+    const Buffer& substrait_buffer, PythonTableProvider& table_provider,\n+    const ExtensionIdRegistry* registry, compute::FunctionRegistry* func_registry) {\n+  // TODO(ARROW-15732)\n+  // retrieve input table from table provider\n+\n+  NamedTableProvider named_table_provider =\n+      [table_provider](\n+          const std::vector<std::string>& names) -> Result<compute::Declaration> {\n+    ARROW_ASSIGN_OR_RAISE(std::shared_ptr<Table> input_table, table_provider(names));\n+    std::shared_ptr<compute::ExecNodeOptions> options =\n+        std::make_shared<compute::TableSourceNodeOptions>(input_table);\n+    return compute::Declaration(\"table_source\", {}, options,\n+                                \"substrait_table_provider_source\");\n+  };\n+\n+  ConversionOptions conversion_options;\n+  conversion_options.named_table_provider = std::move(named_table_provider);\n+\n+  compute::ExecContext exec_context(arrow::default_memory_pool(),\n+                                    ::arrow::internal::GetCpuThreadPool(), func_registry);\n+  ARROW_ASSIGN_OR_RAISE(auto plan, compute::ExecPlan::Make(&exec_context));\n+  SubstraitExecutor executor(std::move(plan), exec_context, conversion_options);\n+  RETURN_NOT_OK(executor.Init(substrait_buffer, registry));\n+  ARROW_ASSIGN_OR_RAISE(auto sink_reader, executor.Execute());\n+  // check closing here, not in destructor, to expose error to caller\n+  RETURN_NOT_OK(executor.Close());\n+  return sink_reader;\n\nReview Comment:\n   Rather than copy / paste can we call the other method here?\n\n\n\n##########\npython/pyarrow/_substrait.pyx:\n##########\n@@ -102,3 +103,40 @@ def get_supported_functions():\n     for c_id in c_ids:\n         functions_list.append(frombytes(c_id))\n     return functions_list\n+\n+\n+cdef shared_ptr[CTable] _process_named_table(dict named_args, const std_vector[c_string]& names):\n+    cdef c_string c_name\n+    py_names = []\n+    for i in range(names.size()):\n+        c_name = names[i]\n+        py_names.append(frombytes(c_name))\n+    return pyarrow_unwrap_table(named_args[\"provider\"](py_names))\n+\n+\n+def run_query_with_provider(plan, table_provider):\n\nReview Comment:\n   Can we make `table_provider` an optional argument for `run_query` rather than adding a new method?  I don't know if we can do it in cython (I think we can for a `def` method) or not but ideally the python API wouldn't need two methods.\n\n\n\n##########\ncpp/src/arrow/engine/substrait/util.h:\n##########\n@@ -20,18 +20,29 @@\n #include <memory>\n #include \"arrow/compute/registry.h\"\n #include \"arrow/engine/substrait/api.h\"\n+#include \"arrow/engine/substrait/options.h\"\n #include \"arrow/util/iterator.h\"\n #include \"arrow/util/optional.h\"\n \n namespace arrow {\n \n namespace engine {\n \n+using PythonTableProvider =\n+    std::function<Result<std::shared_ptr<Table>>(const std::vector<std::string>&)>;\n+\n /// \\brief Retrieve a RecordBatchReader from a Substrait plan.\n ARROW_ENGINE_EXPORT Result<std::shared_ptr<RecordBatchReader>> ExecuteSerializedPlan(\n     const Buffer& substrait_buffer, const ExtensionIdRegistry* registry = NULLPTR,\n     compute::FunctionRegistry* func_registry = NULLPTR);\n \n+/// \\brief Retrieve a RecordBatchReader from a Substrait plan.\n+/// Allows to use NamedT\n\nReview Comment:\n   Finish this comment?\n\n\n\n",
                    "created": "2022-09-02T00:32:57.802+0000",
                    "updated": "2022-09-02T00:32:57.802+0000",
                    "started": "2022-09-02T00:32:57.802+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "805659",
                    "issueId": "13478504"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13478504/worklog/805684",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on PR #14024:\nURL: https://github.com/apache/arrow/pull/14024#issuecomment-1235139399\n\n   @westonpace one doubt is handling multiple names in the provider. Assume we get multiple tables, how should we generate the output? \n\n\n",
                    "created": "2022-09-02T06:56:56.759+0000",
                    "updated": "2022-09-02T06:56:56.759+0000",
                    "started": "2022-09-02T06:56:56.759+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "805684",
                    "issueId": "13478504"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13478504/worklog/805686",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on code in PR #14024:\nURL: https://github.com/apache/arrow/pull/14024#discussion_r961349012\n\n\n##########\ncpp/src/arrow/engine/substrait/util.cc:\n##########\n@@ -126,6 +131,36 @@ Result<std::shared_ptr<RecordBatchReader>> ExecuteSerializedPlan(\n   return sink_reader;\n }\n \n+Result<std::shared_ptr<RecordBatchReader>> ExecuteSerializedPlan(\n+    const Buffer& substrait_buffer, PythonTableProvider& table_provider,\n+    const ExtensionIdRegistry* registry, compute::FunctionRegistry* func_registry) {\n+  // TODO(ARROW-15732)\n+  // retrieve input table from table provider\n+\n+  NamedTableProvider named_table_provider =\n+      [table_provider](\n+          const std::vector<std::string>& names) -> Result<compute::Declaration> {\n+    ARROW_ASSIGN_OR_RAISE(std::shared_ptr<Table> input_table, table_provider(names));\n+    std::shared_ptr<compute::ExecNodeOptions> options =\n+        std::make_shared<compute::TableSourceNodeOptions>(input_table);\n+    return compute::Declaration(\"table_source\", {}, options,\n+                                \"substrait_table_provider_source\");\n+  };\n+\n+  ConversionOptions conversion_options;\n+  conversion_options.named_table_provider = std::move(named_table_provider);\n+\n+  compute::ExecContext exec_context(arrow::default_memory_pool(),\n+                                    ::arrow::internal::GetCpuThreadPool(), func_registry);\n+  ARROW_ASSIGN_OR_RAISE(auto plan, compute::ExecPlan::Make(&exec_context));\n+  SubstraitExecutor executor(std::move(plan), exec_context, conversion_options);\n+  RETURN_NOT_OK(executor.Init(substrait_buffer, registry));\n+  ARROW_ASSIGN_OR_RAISE(auto sink_reader, executor.Execute());\n+  // check closing here, not in destructor, to expose error to caller\n+  RETURN_NOT_OK(executor.Close());\n+  return sink_reader;\n\nReview Comment:\n   Yes of course, this was merely a WIP proto code I just wrote for the sake of getting an insight from @richtia. I will update the code. \n\n\n\n",
                    "created": "2022-09-02T06:58:16.769+0000",
                    "updated": "2022-09-02T06:58:16.769+0000",
                    "started": "2022-09-02T06:58:16.768+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "805686",
                    "issueId": "13478504"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13478504/worklog/805687",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on code in PR #14024:\nURL: https://github.com/apache/arrow/pull/14024#discussion_r961349699\n\n\n##########\npython/pyarrow/_substrait.pyx:\n##########\n@@ -102,3 +103,40 @@ def get_supported_functions():\n     for c_id in c_ids:\n         functions_list.append(frombytes(c_id))\n     return functions_list\n+\n+\n+cdef shared_ptr[CTable] _process_named_table(dict named_args, const std_vector[c_string]& names):\n+    cdef c_string c_name\n+    py_names = []\n+    for i in range(names.size()):\n+        c_name = names[i]\n+        py_names.append(frombytes(c_name))\n+    return pyarrow_unwrap_table(named_args[\"provider\"](py_names))\n+\n+\n+def run_query_with_provider(plan, table_provider):\n\nReview Comment:\n   Of course, this was just a prototype code to show case for test purpose in a short time. I already refactored the code. I think it covers what you are asking for. \n\n\n\n",
                    "created": "2022-09-02T06:59:26.367+0000",
                    "updated": "2022-09-02T06:59:26.367+0000",
                    "started": "2022-09-02T06:59:26.366+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "805687",
                    "issueId": "13478504"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13478504/worklog/805867",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on code in PR #14024:\nURL: https://github.com/apache/arrow/pull/14024#discussion_r961978236\n\n\n##########\npython/pyarrow/tests/test_substrait.py:\n##########\n@@ -165,3 +165,172 @@ def test_get_supported_functions():\n                         'functions_arithmetic.yaml', 'add')\n     assert has_function(supported_functions,\n                         'functions_arithmetic.yaml', 'sum')\n+\n+\n+def test_named_table():\n+    test_table_1 = pa.Table.from_pydict({\"x\": [1, 2, 3]})\n+    test_table_2 = pa.Table.from_pydict({\"x\": [4, 5, 6]})\n+\n+    def table_provider(names):\n+        if not names:\n+            raise Exception(\"No names provided\")\n+        elif names[0] == \"t1\":\n+            return test_table_1\n+        elif names[1] == \"t2\":\n+            return test_table_2\n+        else:\n+            raise Exception(\"Unrecognized table name\")\n+\n+    substrait_query = \"\"\"\n+    {\n+        \"relations\": [\n+        {\"rel\": {\n+            \"read\": {\n+            \"base_schema\": {\n+                \"struct\": {\n+                \"types\": [\n+                            {\"i64\": {}}\n+                        ]\n+                },\n+                \"names\": [\n+                        \"x\"\n+                        ]\n+            },\n+            \"namedTable\": {\n+                    \"names\": [\"TABLE_NAME_PLACEHOLDER\"]\n+            }\n+            }\n+        }}\n+        ]\n+    }\n+    \"\"\"\n+    table_name = \"t1\"\n+    query = tobytes(substrait_query.replace(\n+        \"TABLE_NAME_PLACEHOLDER\", table_name))\n+    buf = pa._substrait._parse_json_plan(tobytes(query))\n+    reader = pa.substrait.run_query(buf, table_provider)\n+    res_tb = reader.read_all()\n+    assert res_tb == test_table_1\n+\n+\n+def test_named_table_invalid_table_name():\n+    test_table_1 = pa.Table.from_pydict({\"x\": [1, 2, 3]})\n+\n+    def table_provider(names):\n+        if not names:\n+            raise Exception(\"No names provided\")\n+        elif names[0] == \"t1\":\n+            return test_table_1\n+        else:\n+            raise Exception(\"Unrecognized table name\")\n+\n+    substrait_query = \"\"\"\n+    {\n+        \"relations\": [\n+        {\"rel\": {\n+            \"read\": {\n+            \"base_schema\": {\n+                \"struct\": {\n+                \"types\": [\n+                            {\"i64\": {}}\n+                        ]\n+                },\n+                \"names\": [\n+                        \"x\"\n+                        ]\n+            },\n+            \"namedTable\": {\n+                    \"names\": [\"TABLE_NAME_PLACEHOLDER\"]\n\nReview Comment:\n   No need to use a placeholder.\n\n\n\n##########\ncpp/src/arrow/engine/substrait/util.h:\n##########\n@@ -20,16 +20,22 @@\n #include <memory>\n #include \"arrow/compute/registry.h\"\n #include \"arrow/engine/substrait/api.h\"\n+#include \"arrow/engine/substrait/options.h\"\n #include \"arrow/util/iterator.h\"\n #include \"arrow/util/optional.h\"\n \n namespace arrow {\n \n namespace engine {\n \n+using PythonTableProvider =\n+    std::function<Result<std::shared_ptr<Table>>(const std::vector<std::string>&)>;\n+\n /// \\brief Retrieve a RecordBatchReader from a Substrait plan.\n+/// Allows to use NamedTableProvider in Substrait plan execution.\n\nReview Comment:\n   ```suggestion\r\n   ```\r\n   \r\n   If we are going to document one param we should document all the params\n\n\n\n##########\npython/pyarrow/_substrait.pyx:\n##########\n@@ -25,14 +26,84 @@ from pyarrow.includes.libarrow cimport *\n from pyarrow.includes.libarrow_substrait cimport *\n \n \n-def run_query(plan):\n+cdef shared_ptr[CTable] _process_named_table(dict named_args, const std_vector[c_string]& names):\n+    cdef:\n+        c_string c_name\n+        shared_ptr[CTable] empty_table\n+    py_names = []\n+\n+    # provider function could raise an exception\n+    try:\n+        for i in range(names.size()):\n+            c_name = names[i]\n+            py_names.append(frombytes(c_name))\n+        return pyarrow_unwrap_table(named_args[\"provider\"](py_names))\n+    except Exception:\n+        return empty_table\n+\n+\n+def run_query(plan, table_provider=None):\n     \"\"\"\n     Execute a Substrait plan and read the results as a RecordBatchReader.\n \n     Parameters\n     ----------\n     plan : Buffer\n         The serialized Substrait plan to execute.\n+    table_provider : object (optional)\n+        The function determining input table based on names\n+\n+    Returns\n+    -------\n+    RecordBatchReader\n+        A reader containing the result of the executed query\n+\n+    Examples\n+    --------\n+    >>> import pyarrow as pa\n+    >>> from pyarrow.lib import tobytes\n+    >>> import pyarrow.substrait as substrait\n+    >>> test_table_1 = pa.Table.from_pydict({\"x\": [1, 2, 3]})\n+    >>> test_table_2 = pa.Table.from_pydict({\"x\": [4, 5, 6]})\n+    >>> def table_provider(names):\n+    ...     if not names:\n+    ...        raise Exception(\"No names provided\")\n+    ...     elif names[0] == \"t1\":\n+    ...        return test_table_1\n+    ...     elif names[1] == \"t2\":\n+    ...        return test_table_2\n+    ...     else:\n+    ...        raise Exception(\"Unrecognized table name\")\n+    ... \n+    >>> substrait_query = '''\n+    ...         {\n+    ...             \"relations\": [\n+    ...             {\"rel\": {\n+    ...                 \"read\": {\n+    ...                 \"base_schema\": {\n+    ...                     \"struct\": {\n+    ...                     \"types\": [\n+    ...                                 {\"i64\": {}}\n+    ...                             ]\n+    ...                     },\n+    ...                     \"names\": [\n+    ...                             \"x\"\n+    ...                             ]\n+    ...                 },\n+    ...                 \"namedTable\": {\n+    ...                         \"names\": [\"TABLE_NAME_PLACEHOLDER\"]\n+    ...                 }\n+    ...                 }\n+    ...             }}\n+    ...             ]\n+    ...         }\n+    ... '''\n+    >>> table_name = \"t1\"\n+    >>> query = tobytes(substrait_query.replace(\n+    ...             \"TABLE_NAME_PLACEHOLDER\", table_name))\n\nReview Comment:\n   ```suggestion\r\n       >>> substrait_query = '''\r\n       ...         {\r\n       ...             \"relations\": [\r\n       ...             {\"rel\": {\r\n       ...                 \"read\": {\r\n       ...                 \"base_schema\": {\r\n       ...                     \"struct\": {\r\n       ...                     \"types\": [\r\n       ...                                 {\"i64\": {}}\r\n       ...                             ]\r\n       ...                     },\r\n       ...                     \"names\": [\r\n       ...                             \"x\"\r\n       ...                             ]\r\n       ...                 },\r\n       ...                 \"namedTable\": {\r\n       ...                         \"names\": [\"t1\"]\r\n       ...                 }\r\n       ...                 }\r\n       ...             }}\r\n       ...             ]\r\n       ...         }\r\n       ... '''\r\n   ```\r\n   There is no need to use the placeholder pattern here.\n\n\n\n##########\npython/pyarrow/_substrait.pyx:\n##########\n@@ -25,14 +26,84 @@ from pyarrow.includes.libarrow cimport *\n from pyarrow.includes.libarrow_substrait cimport *\n \n \n-def run_query(plan):\n+cdef shared_ptr[CTable] _process_named_table(dict named_args, const std_vector[c_string]& names):\n+    cdef:\n+        c_string c_name\n+        shared_ptr[CTable] empty_table\n+    py_names = []\n+\n+    # provider function could raise an exception\n+    try:\n+        for i in range(names.size()):\n+            c_name = names[i]\n+            py_names.append(frombytes(c_name))\n+        return pyarrow_unwrap_table(named_args[\"provider\"](py_names))\n+    except Exception:\n+        return empty_table\n+\n+\n+def run_query(plan, table_provider=None):\n     \"\"\"\n     Execute a Substrait plan and read the results as a RecordBatchReader.\n \n     Parameters\n     ----------\n     plan : Buffer\n         The serialized Substrait plan to execute.\n+    table_provider : object (optional)\n+        The function determining input table based on names\n\nReview Comment:\n   ```suggestion\r\n           A function to resolve any NamedTable relation to a table.  The function\r\n           will receive a single argument which will be a list of strings representing the table\r\n           name and should return a pyarrow.Table.\r\n   ```\r\n   \r\n   Presumably users of this API will be familiar with Substrait so we can reference `NamedTable` directly.\n\n\n\n##########\ncpp/src/arrow/engine/substrait/util.cc:\n##########\n@@ -107,19 +111,39 @@ class SubstraitExecutor {\n   bool plan_started_;\n   compute::ExecContext exec_context_;\n   std::shared_ptr<SubstraitSinkConsumer> sink_consumer_;\n+  const ConversionOptions& conversion_options_;\n };\n \n }  // namespace\n \n Result<std::shared_ptr<RecordBatchReader>> ExecuteSerializedPlan(\n-    const Buffer& substrait_buffer, const ExtensionIdRegistry* extid_registry,\n-    compute::FunctionRegistry* func_registry) {\n+    const Buffer& substrait_buffer, const PythonTableProvider& table_provider,\n+    const ExtensionIdRegistry* registry, compute::FunctionRegistry* func_registry) {\n   // TODO(ARROW-15732)\n+  // retrieve input table from table provider\n+  ConversionOptions conversion_options;\n+  if (table_provider) {\n+    NamedTableProvider named_table_provider =\n+        [table_provider](\n+            const std::vector<std::string>& names) -> Result<compute::Declaration> {\n+      if (names.empty()) {\n+        return Status::Invalid(\"names for NamedTable not provided\");\n+      }\n\nReview Comment:\n   It wasn't clear to me if a name was required or not so I added https://github.com/substrait-io/substrait/pull/308\r\n   \r\n   If that merges then we are fine returning an invalid status here since this would be an invalid plan.  However, we can probably reject it in `relation_internal.cc` instead so we don't have to repeat this logic for each binding.\n\n\n\n##########\npython/pyarrow/_substrait.pyx:\n##########\n@@ -25,14 +26,84 @@ from pyarrow.includes.libarrow cimport *\n from pyarrow.includes.libarrow_substrait cimport *\n \n \n-def run_query(plan):\n+cdef shared_ptr[CTable] _process_named_table(dict named_args, const std_vector[c_string]& names):\n+    cdef:\n+        c_string c_name\n+        shared_ptr[CTable] empty_table\n+    py_names = []\n+\n+    # provider function could raise an exception\n+    try:\n+        for i in range(names.size()):\n+            c_name = names[i]\n+            py_names.append(frombytes(c_name))\n+        return pyarrow_unwrap_table(named_args[\"provider\"](py_names))\n+    except Exception:\n+        return empty_table\n\nReview Comment:\n   I don't know that an empty table is the correct thing to return here.  Maybe we can return `CResult[shared_ptr[CTable]]` so that we can return an invalid status?  Ideally we would capture the exception message to put into the status too. I'm not sure if we have an example of that.\n\n\n\n##########\npython/pyarrow/tests/test_substrait.py:\n##########\n@@ -165,3 +165,172 @@ def test_get_supported_functions():\n                         'functions_arithmetic.yaml', 'add')\n     assert has_function(supported_functions,\n                         'functions_arithmetic.yaml', 'sum')\n+\n+\n+def test_named_table():\n+    test_table_1 = pa.Table.from_pydict({\"x\": [1, 2, 3]})\n+    test_table_2 = pa.Table.from_pydict({\"x\": [4, 5, 6]})\n+\n+    def table_provider(names):\n+        if not names:\n+            raise Exception(\"No names provided\")\n+        elif names[0] == \"t1\":\n+            return test_table_1\n+        elif names[1] == \"t2\":\n+            return test_table_2\n+        else:\n+            raise Exception(\"Unrecognized table name\")\n+\n+    substrait_query = \"\"\"\n+    {\n+        \"relations\": [\n+        {\"rel\": {\n+            \"read\": {\n+            \"base_schema\": {\n+                \"struct\": {\n+                \"types\": [\n+                            {\"i64\": {}}\n+                        ]\n+                },\n+                \"names\": [\n+                        \"x\"\n+                        ]\n+            },\n+            \"namedTable\": {\n+                    \"names\": [\"TABLE_NAME_PLACEHOLDER\"]\n+            }\n+            }\n+        }}\n+        ]\n+    }\n+    \"\"\"\n+    table_name = \"t1\"\n+    query = tobytes(substrait_query.replace(\n+        \"TABLE_NAME_PLACEHOLDER\", table_name))\n+    buf = pa._substrait._parse_json_plan(tobytes(query))\n+    reader = pa.substrait.run_query(buf, table_provider)\n+    res_tb = reader.read_all()\n+    assert res_tb == test_table_1\n+\n+\n+def test_named_table_invalid_table_name():\n+    test_table_1 = pa.Table.from_pydict({\"x\": [1, 2, 3]})\n+\n+    def table_provider(names):\n+        if not names:\n+            raise Exception(\"No names provided\")\n+        elif names[0] == \"t1\":\n+            return test_table_1\n+        else:\n+            raise Exception(\"Unrecognized table name\")\n+\n+    substrait_query = \"\"\"\n+    {\n+        \"relations\": [\n+        {\"rel\": {\n+            \"read\": {\n+            \"base_schema\": {\n+                \"struct\": {\n+                \"types\": [\n+                            {\"i64\": {}}\n+                        ]\n+                },\n+                \"names\": [\n+                        \"x\"\n+                        ]\n+            },\n+            \"namedTable\": {\n+                    \"names\": [\"TABLE_NAME_PLACEHOLDER\"]\n+            }\n+            }\n+        }}\n+        ]\n+    }\n+    \"\"\"\n+    table_name = \"t3\"\n+    query = tobytes(substrait_query.replace(\n+        \"TABLE_NAME_PLACEHOLDER\", table_name))\n+    buf = pa._substrait._parse_json_plan(tobytes(query))\n+\n+    exec_message = \"TableSourceNode requires table which is not null\"\n+    with pytest.raises(ArrowInvalid, match=exec_message):\n+        substrait.run_query(buf, table_provider)\n+\n+\n+def test_named_table_empty_names():\n+    test_table_1 = pa.Table.from_pydict({\"x\": [1, 2, 3]})\n+\n+    def table_provider(names):\n+        if not names:\n+            raise Exception(\"No names provided\")\n+        elif names[0] == \"t1\":\n+            return test_table_1\n+        else:\n+            raise Exception(\"Unrecognized table name\")\n+\n+    substrait_query = \"\"\"\n+    {\n+        \"relations\": [\n+        {\"rel\": {\n+            \"read\": {\n+            \"base_schema\": {\n+                \"struct\": {\n+                \"types\": [\n+                            {\"i64\": {}}\n+                        ]\n+                },\n+                \"names\": [\n+                        \"x\"\n+                        ]\n+            },\n+            \"namedTable\": {\n+                    \"names\": []\n+            }\n+            }\n+        }}\n+        ]\n+    }\n+    \"\"\"\n+    query = tobytes(substrait_query)\n+    buf = pa._substrait._parse_json_plan(tobytes(query))\n+    exec_message = \"names for NamedTable not provided\"\n+    with pytest.raises(ArrowInvalid, match=exec_message):\n+        substrait.run_query(buf, table_provider)\n+\n+\n+def test_named_table_no_named_table():\n\nReview Comment:\n   I'm not sure how much value this test is providing.  At the very least, it doesn't seem to be related to named tables at all and is more just testing the C++ consumer's ability to reject invalid plans.\n\n\n\n##########\npython/pyarrow/tests/test_substrait.py:\n##########\n@@ -165,3 +165,172 @@ def test_get_supported_functions():\n                         'functions_arithmetic.yaml', 'add')\n     assert has_function(supported_functions,\n                         'functions_arithmetic.yaml', 'sum')\n+\n+\n+def test_named_table():\n+    test_table_1 = pa.Table.from_pydict({\"x\": [1, 2, 3]})\n+    test_table_2 = pa.Table.from_pydict({\"x\": [4, 5, 6]})\n+\n+    def table_provider(names):\n+        if not names:\n+            raise Exception(\"No names provided\")\n+        elif names[0] == \"t1\":\n+            return test_table_1\n+        elif names[1] == \"t2\":\n+            return test_table_2\n+        else:\n+            raise Exception(\"Unrecognized table name\")\n+\n+    substrait_query = \"\"\"\n+    {\n+        \"relations\": [\n+        {\"rel\": {\n+            \"read\": {\n+            \"base_schema\": {\n+                \"struct\": {\n+                \"types\": [\n+                            {\"i64\": {}}\n+                        ]\n+                },\n+                \"names\": [\n+                        \"x\"\n+                        ]\n+            },\n+            \"namedTable\": {\n+                    \"names\": [\"TABLE_NAME_PLACEHOLDER\"]\n\nReview Comment:\n   No need to use a placeholder.\n\n\n\n",
                    "created": "2022-09-02T20:18:16.684+0000",
                    "updated": "2022-09-02T20:18:16.684+0000",
                    "started": "2022-09-02T20:18:16.683+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "805867",
                    "issueId": "13478504"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13478504/worklog/805889",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on code in PR #14024:\nURL: https://github.com/apache/arrow/pull/14024#discussion_r962049345\n\n\n##########\ncpp/src/arrow/engine/substrait/util.cc:\n##########\n@@ -107,19 +111,39 @@ class SubstraitExecutor {\n   bool plan_started_;\n   compute::ExecContext exec_context_;\n   std::shared_ptr<SubstraitSinkConsumer> sink_consumer_;\n+  const ConversionOptions& conversion_options_;\n };\n \n }  // namespace\n \n Result<std::shared_ptr<RecordBatchReader>> ExecuteSerializedPlan(\n-    const Buffer& substrait_buffer, const ExtensionIdRegistry* extid_registry,\n-    compute::FunctionRegistry* func_registry) {\n+    const Buffer& substrait_buffer, const PythonTableProvider& table_provider,\n+    const ExtensionIdRegistry* registry, compute::FunctionRegistry* func_registry) {\n   // TODO(ARROW-15732)\n+  // retrieve input table from table provider\n+  ConversionOptions conversion_options;\n+  if (table_provider) {\n+    NamedTableProvider named_table_provider =\n+        [table_provider](\n+            const std::vector<std::string>& names) -> Result<compute::Declaration> {\n+      if (names.empty()) {\n+        return Status::Invalid(\"names for NamedTable not provided\");\n+      }\n\nReview Comment:\n   Yeah that make sense. \n\n\n\n",
                    "created": "2022-09-02T22:35:46.597+0000",
                    "updated": "2022-09-02T22:35:46.597+0000",
                    "started": "2022-09-02T22:35:46.597+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "805889",
                    "issueId": "13478504"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13478504/worklog/805892",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on code in PR #14024:\nURL: https://github.com/apache/arrow/pull/14024#discussion_r962061860\n\n\n##########\npython/pyarrow/_substrait.pyx:\n##########\n@@ -25,14 +26,84 @@ from pyarrow.includes.libarrow cimport *\n from pyarrow.includes.libarrow_substrait cimport *\n \n \n-def run_query(plan):\n+cdef shared_ptr[CTable] _process_named_table(dict named_args, const std_vector[c_string]& names):\n+    cdef:\n+        c_string c_name\n+        shared_ptr[CTable] empty_table\n+    py_names = []\n+\n+    # provider function could raise an exception\n+    try:\n+        for i in range(names.size()):\n+            c_name = names[i]\n+            py_names.append(frombytes(c_name))\n+        return pyarrow_unwrap_table(named_args[\"provider\"](py_names))\n+    except Exception:\n+        return empty_table\n\nReview Comment:\n   How about doing a `raise` instead. \r\n   \r\n   ```bash\r\n   pyarrow/tests/test_substrait.py::test_named_table_invalid_table_name\r\n     /Users/vibhatha/venv/pyarrow_dev/lib/python3.10/site-packages/_pytest/unraisableexception.py:78: PytestUnraisableExceptionWarning: Exception ignored in: 'pyarrow._substrait._process_named_table'\r\n     \r\n     Traceback (most recent call last):\r\n       File \"pyarrow/_substrait.pyx\", line 39, in pyarrow._substrait._process_named_table\r\n         return pyarrow_unwrap_table(named_args[\"provider\"](py_names))\r\n       File \"/Users/vibhatha/github/fork/arrow/python/pyarrow/tests/test_substrait.py\", line 223, in table_provider\r\n         raise Exception(\"Unrecognized table name\")\r\n     Exception: Unrecognized table name\r\n     \r\n     During handling of the above exception, another exception occurred:\r\n     \r\n     Traceback (most recent call last):\r\n       File \"/Users/vibhatha/github/fork/arrow/python/pyarrow/tests/test_substrait.py\", line 252, in test_named_table_invalid_table_name\r\n         substrait.run_query(buf, table_provider)\r\n     ValueError: Error occurred in extracting NamedTable : Unrecognized table name\r\n     \r\n       warnings.warn(pytest.PytestUnraisableExceptionWarning(msg))\r\n   ```\r\n   \r\n   I want to fix this warning. Not sure if we can handle it here properly. \n\n\n\n",
                    "created": "2022-09-02T23:20:47.900+0000",
                    "updated": "2022-09-02T23:20:47.900+0000",
                    "started": "2022-09-02T23:20:47.899+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "805892",
                    "issueId": "13478504"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13478504/worklog/805893",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on code in PR #14024:\nURL: https://github.com/apache/arrow/pull/14024#discussion_r962062665\n\n\n##########\npython/pyarrow/_substrait.pyx:\n##########\n@@ -25,14 +26,84 @@ from pyarrow.includes.libarrow cimport *\n from pyarrow.includes.libarrow_substrait cimport *\n \n \n-def run_query(plan):\n+cdef shared_ptr[CTable] _process_named_table(dict named_args, const std_vector[c_string]& names):\n+    cdef:\n+        c_string c_name\n+        shared_ptr[CTable] empty_table\n+    py_names = []\n+\n+    # provider function could raise an exception\n+    try:\n+        for i in range(names.size()):\n+            c_name = names[i]\n+            py_names.append(frombytes(c_name))\n+        return pyarrow_unwrap_table(named_args[\"provider\"](py_names))\n+    except Exception:\n+        return empty_table\n\nReview Comment:\n   `raise` looks good to me.  I had forgotten that we were inside SafeCallIntoPython which handles that for us.  Although in that case do we need to even catch the exception?\n\n\n\n",
                    "created": "2022-09-02T23:24:13.881+0000",
                    "updated": "2022-09-02T23:24:13.881+0000",
                    "started": "2022-09-02T23:24:13.880+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "805893",
                    "issueId": "13478504"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13478504/worklog/806060",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on code in PR #14024:\nURL: https://github.com/apache/arrow/pull/14024#discussion_r962411864\n\n\n##########\npython/pyarrow/_substrait.pyx:\n##########\n@@ -25,14 +26,84 @@ from pyarrow.includes.libarrow cimport *\n from pyarrow.includes.libarrow_substrait cimport *\n \n \n-def run_query(plan):\n+cdef shared_ptr[CTable] _process_named_table(dict named_args, const std_vector[c_string]& names):\n+    cdef:\n+        c_string c_name\n+        shared_ptr[CTable] empty_table\n+    py_names = []\n+\n+    # provider function could raise an exception\n+    try:\n+        for i in range(names.size()):\n+            c_name = names[i]\n+            py_names.append(frombytes(c_name))\n+        return pyarrow_unwrap_table(named_args[\"provider\"](py_names))\n+    except Exception:\n+        return empty_table\n\nReview Comment:\n   I am not quite sure if there is a `SafeCallIntoPython`, aren't we just wraping `cython` function into `std::function`? \r\n   If we don't handle it here, the `pytests` gives the aforementioned warning. What do you think?\r\n   \n\n\n\n",
                    "created": "2022-09-05T01:26:33.353+0000",
                    "updated": "2022-09-05T01:26:33.353+0000",
                    "started": "2022-09-05T01:26:33.353+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "806060",
                    "issueId": "13478504"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13478504/worklog/806061",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on PR #14024:\nURL: https://github.com/apache/arrow/pull/14024#issuecomment-1236472120\n\n   > @westonpace one doubt is handling multiple names in the provider. Assume we get multiple tables, how should we generate the output? \n   \n   Each call to the function should return a single table.\n   \n   If multiple names are provided then they form a single combined name.  I'm not really sure why it is structured that way but I think the idea is a that tablenames are often namespaces, for example `[\"sales\", \"orders\"]` is a single table `sales.orders` and not two different tables.\n   \n   A provider function is free to know about as many tables as it wants but it can only return one table each call.\n\n\n",
                    "created": "2022-09-05T01:48:48.513+0000",
                    "updated": "2022-09-05T01:48:48.513+0000",
                    "started": "2022-09-05T01:48:48.513+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "806061",
                    "issueId": "13478504"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13478504/worklog/806062",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on code in PR #14024:\nURL: https://github.com/apache/arrow/pull/14024#discussion_r962420622\n\n\n##########\npython/pyarrow/_substrait.pyx:\n##########\n@@ -25,14 +26,84 @@ from pyarrow.includes.libarrow cimport *\n from pyarrow.includes.libarrow_substrait cimport *\n \n \n-def run_query(plan):\n+cdef shared_ptr[CTable] _process_named_table(dict named_args, const std_vector[c_string]& names):\n+    cdef:\n+        c_string c_name\n+        shared_ptr[CTable] empty_table\n+    py_names = []\n+\n+    # provider function could raise an exception\n+    try:\n+        for i in range(names.size()):\n+            c_name = names[i]\n+            py_names.append(frombytes(c_name))\n+        return pyarrow_unwrap_table(named_args[\"provider\"](py_names))\n+    except Exception:\n+        return empty_table\n\nReview Comment:\n   BindFunction used SafeCallIntoPython.  I  think what you suggested was good.\n\n\n\n",
                    "created": "2022-09-05T01:52:01.582+0000",
                    "updated": "2022-09-05T01:52:01.582+0000",
                    "started": "2022-09-05T01:52:01.582+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "806062",
                    "issueId": "13478504"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13478504/worklog/806063",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on code in PR #14024:\nURL: https://github.com/apache/arrow/pull/14024#discussion_r962420903\n\n\n##########\npython/pyarrow/_substrait.pyx:\n##########\n@@ -25,14 +26,84 @@ from pyarrow.includes.libarrow cimport *\n from pyarrow.includes.libarrow_substrait cimport *\n \n \n-def run_query(plan):\n+cdef shared_ptr[CTable] _process_named_table(dict named_args, const std_vector[c_string]& names):\n+    cdef:\n+        c_string c_name\n+        shared_ptr[CTable] empty_table\n+    py_names = []\n+\n+    # provider function could raise an exception\n+    try:\n+        for i in range(names.size()):\n+            c_name = names[i]\n+            py_names.append(frombytes(c_name))\n+        return pyarrow_unwrap_table(named_args[\"provider\"](py_names))\n+    except Exception:\n+        return empty_table\n\nReview Comment:\n   So should we leave as it is? \n\n\n\n",
                    "created": "2022-09-05T01:53:16.797+0000",
                    "updated": "2022-09-05T01:53:16.797+0000",
                    "started": "2022-09-05T01:53:16.797+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "806063",
                    "issueId": "13478504"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13478504/worklog/806064",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on PR #14024:\nURL: https://github.com/apache/arrow/pull/14024#issuecomment-1236474588\n\n   @westonpace any more thoughts on this one? Should we add more tests? \n\n\n",
                    "created": "2022-09-05T01:55:54.030+0000",
                    "updated": "2022-09-05T01:55:54.030+0000",
                    "started": "2022-09-05T01:55:54.030+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "806064",
                    "issueId": "13478504"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13478504/worklog/806414",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on code in PR #14024:\nURL: https://github.com/apache/arrow/pull/14024#discussion_r963795665\n\n\n##########\npython/pyarrow/_substrait.pyx:\n##########\n@@ -25,14 +26,84 @@ from pyarrow.includes.libarrow cimport *\n from pyarrow.includes.libarrow_substrait cimport *\n \n \n-def run_query(plan):\n+cdef shared_ptr[CTable] _process_named_table(dict named_args, const std_vector[c_string]& names):\n+    cdef:\n+        c_string c_name\n+        shared_ptr[CTable] empty_table\n+    py_names = []\n+\n+    # provider function could raise an exception\n+    try:\n+        for i in range(names.size()):\n+            c_name = names[i]\n+            py_names.append(frombytes(c_name))\n+        return pyarrow_unwrap_table(named_args[\"provider\"](py_names))\n+    except Exception:\n+        return empty_table\n\nReview Comment:\n   Yes\n\n\n\n",
                    "created": "2022-09-06T14:40:45.184+0000",
                    "updated": "2022-09-06T14:40:45.184+0000",
                    "started": "2022-09-06T14:40:45.184+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "806414",
                    "issueId": "13478504"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13478504/worklog/806422",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on code in PR #14024:\nURL: https://github.com/apache/arrow/pull/14024#discussion_r963800613\n\n\n##########\ncpp/src/arrow/engine/substrait/util.cc:\n##########\n@@ -107,19 +111,36 @@ class SubstraitExecutor {\n   bool plan_started_;\n   compute::ExecContext exec_context_;\n   std::shared_ptr<SubstraitSinkConsumer> sink_consumer_;\n+  const ConversionOptions& conversion_options_;\n };\n \n }  // namespace\n \n Result<std::shared_ptr<RecordBatchReader>> ExecuteSerializedPlan(\n-    const Buffer& substrait_buffer, const ExtensionIdRegistry* extid_registry,\n-    compute::FunctionRegistry* func_registry) {\n+    const Buffer& substrait_buffer, const PythonTableProvider& table_provider,\n+    const ExtensionIdRegistry* registry, compute::FunctionRegistry* func_registry) {\n\nReview Comment:\n   ```suggestion\r\n       const Buffer& substrait_buffer,\r\n       const ExtensionIdRegistry* registry, compute::FunctionRegistry* func_registry, const ConversionOptions& conversion_options = {}) {\r\n   ```\r\n   \r\n   I suspect it will only be a matter of time before we want to specify other conversion options.  Also, by defaulting to `{}` we can avoid changing existing tests that are unrelated to the table provider.\n\n\n\n##########\npython/pyarrow/_substrait.pyx:\n##########\n@@ -25,14 +26,84 @@ from pyarrow.includes.libarrow cimport *\n from pyarrow.includes.libarrow_substrait cimport *\n \n \n-def run_query(plan):\n+cdef shared_ptr[CTable] _process_named_table(dict named_args, const std_vector[c_string]& names):\n+    cdef:\n+        c_string c_name\n+        shared_ptr[CTable] empty_table\n+    py_names = []\n+\n+    # provider function could raise an exception\n+    try:\n+        for i in range(names.size()):\n+            c_name = names[i]\n+            py_names.append(frombytes(c_name))\n+        return pyarrow_unwrap_table(named_args[\"provider\"](py_names))\n+    except Exception:\n+        return empty_table\n\nReview Comment:\n   Actually, no, not quite.  I'm still not sure why we are catching the exception and rethrowing.  Wouldn't it be better to just not catch it at all?\n\n\n\n##########\ncpp/src/arrow/engine/substrait/serde_test.cc:\n##########\n@@ -1000,15 +1000,17 @@ TEST(Substrait, GetRecordBatchReader) {\n   GTEST_SKIP() << \"ARROW-16392: Substrait File URI not supported for Windows\";\n #else\n   ASSERT_OK_AND_ASSIGN(std::string substrait_json, GetSubstraitJSON());\n-  test_with_registries([&substrait_json](ExtensionIdRegistry* ext_id_reg,\n-                                         compute::FunctionRegistry* func_registry) {\n-    ASSERT_OK_AND_ASSIGN(auto buf, SerializeJsonPlan(substrait_json));\n-    ASSERT_OK_AND_ASSIGN(auto reader, ExecuteSerializedPlan(*buf));\n-    ASSERT_OK_AND_ASSIGN(auto table, Table::FromRecordBatchReader(reader.get()));\n-    // Note: assuming the binary.parquet file contains fixed amount of records\n-    // in case of a test failure, re-evalaute the content in the file\n-    EXPECT_EQ(table->num_rows(), 12);\n-  });\n+  PythonTableProvider table_provider;\n+  test_with_registries(\n+      [&substrait_json, table_provider](ExtensionIdRegistry* ext_id_reg,\n+                                        compute::FunctionRegistry* func_registry) {\n+        ASSERT_OK_AND_ASSIGN(auto buf, SerializeJsonPlan(substrait_json));\n+        ASSERT_OK_AND_ASSIGN(auto reader, ExecuteSerializedPlan(*buf, table_provider));\n+        ASSERT_OK_AND_ASSIGN(auto table, Table::FromRecordBatchReader(reader.get()));\n+        // Note: assuming the binary.parquet file contains fixed amount of records\n+        // in case of a test failure, re-evalaute the content in the file\n+        EXPECT_EQ(table->num_rows(), 12);\n+      });\n\nReview Comment:\n   ```suggestion\r\n     test_with_registries(\r\n         [&substrait_json](ExtensionIdRegistry* ext_id_reg,\r\n                                     compute::FunctionRegistry* func_registry) {\r\n           ASSERT_OK_AND_ASSIGN(auto buf, SerializeJsonPlan(substrait_json));\r\n           ASSERT_OK_AND_ASSIGN(auto reader, ExecuteSerializedPlan(*buf, {}));\r\n           ASSERT_OK_AND_ASSIGN(auto table, Table::FromRecordBatchReader(reader.get()));\r\n           // Note: assuming the binary.parquet file contains fixed amount of records\r\n           // in case of a test failure, re-evalaute the content in the file\r\n           EXPECT_EQ(table->num_rows(), 12);\r\n         });\r\n   ```\r\n   Although...I don't think this is the best change.  We should make `table_provider` an optional argument to `ExecuteSerializedPlan`.\n\n\n\n",
                    "created": "2022-09-06T14:49:31.240+0000",
                    "updated": "2022-09-06T14:49:31.240+0000",
                    "started": "2022-09-06T14:49:31.240+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "806422",
                    "issueId": "13478504"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13478504/worklog/806426",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on code in PR #14024:\nURL: https://github.com/apache/arrow/pull/14024#discussion_r963799075\n\n\n##########\ncpp/src/arrow/engine/substrait/serde_test.cc:\n##########\n@@ -1000,15 +1000,17 @@ TEST(Substrait, GetRecordBatchReader) {\n   GTEST_SKIP() << \"ARROW-16392: Substrait File URI not supported for Windows\";\n #else\n   ASSERT_OK_AND_ASSIGN(std::string substrait_json, GetSubstraitJSON());\n-  test_with_registries([&substrait_json](ExtensionIdRegistry* ext_id_reg,\n-                                         compute::FunctionRegistry* func_registry) {\n-    ASSERT_OK_AND_ASSIGN(auto buf, SerializeJsonPlan(substrait_json));\n-    ASSERT_OK_AND_ASSIGN(auto reader, ExecuteSerializedPlan(*buf));\n-    ASSERT_OK_AND_ASSIGN(auto table, Table::FromRecordBatchReader(reader.get()));\n-    // Note: assuming the binary.parquet file contains fixed amount of records\n-    // in case of a test failure, re-evalaute the content in the file\n-    EXPECT_EQ(table->num_rows(), 12);\n-  });\n+  PythonTableProvider table_provider;\n+  test_with_registries(\n+      [&substrait_json, table_provider](ExtensionIdRegistry* ext_id_reg,\n+                                        compute::FunctionRegistry* func_registry) {\n+        ASSERT_OK_AND_ASSIGN(auto buf, SerializeJsonPlan(substrait_json));\n+        ASSERT_OK_AND_ASSIGN(auto reader, ExecuteSerializedPlan(*buf, table_provider));\n+        ASSERT_OK_AND_ASSIGN(auto table, Table::FromRecordBatchReader(reader.get()));\n+        // Note: assuming the binary.parquet file contains fixed amount of records\n+        // in case of a test failure, re-evalaute the content in the file\n+        EXPECT_EQ(table->num_rows(), 12);\n+      });\n\nReview Comment:\n   ```suggestion\r\n     test_with_registries(\r\n         [&substrait_json](ExtensionIdRegistry* ext_id_reg,\r\n                                     compute::FunctionRegistry* func_registry) {\r\n           ASSERT_OK_AND_ASSIGN(auto buf, SerializeJsonPlan(substrait_json));\r\n           ASSERT_OK_AND_ASSIGN(auto reader, ExecuteSerializedPlan(*buf, {}));\r\n           ASSERT_OK_AND_ASSIGN(auto table, Table::FromRecordBatchReader(reader.get()));\r\n           // Note: assuming the binary.parquet file contains fixed amount of records\r\n           // in case of a test failure, re-evalaute the content in the file\r\n           EXPECT_EQ(table->num_rows(), 12);\r\n         });\r\n   ```\r\n   Although...I don't think this is the best suggestion.  We should make `table_provider` an optional argument to `ExecuteSerializedPlan`.\n\n\n\n",
                    "created": "2022-09-06T14:54:06.978+0000",
                    "updated": "2022-09-06T14:54:06.978+0000",
                    "started": "2022-09-06T14:54:06.977+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "806426",
                    "issueId": "13478504"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13478504/worklog/806581",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on code in PR #14024:\nURL: https://github.com/apache/arrow/pull/14024#discussion_r964374357\n\n\n##########\npython/pyarrow/_substrait.pyx:\n##########\n@@ -25,14 +26,84 @@ from pyarrow.includes.libarrow cimport *\n from pyarrow.includes.libarrow_substrait cimport *\n \n \n-def run_query(plan):\n+cdef shared_ptr[CTable] _process_named_table(dict named_args, const std_vector[c_string]& names):\n+    cdef:\n+        c_string c_name\n+        shared_ptr[CTable] empty_table\n+    py_names = []\n+\n+    # provider function could raise an exception\n+    try:\n+        for i in range(names.size()):\n+            c_name = names[i]\n+            py_names.append(frombytes(c_name))\n+        return pyarrow_unwrap_table(named_args[\"provider\"](py_names))\n+    except Exception:\n+        return empty_table\n\nReview Comment:\n   Only because of the warning. \ud83e\udd14 \n\n\n\n",
                    "created": "2022-09-07T04:39:45.203+0000",
                    "updated": "2022-09-07T04:39:45.203+0000",
                    "started": "2022-09-07T04:39:45.202+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "806581",
                    "issueId": "13478504"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 22800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@31e8cbda[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@24f391c8[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1e780f2a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@263da0fc[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7e14453b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@5af752ea[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@42807c1[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@4fd96df8[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1338c4a5[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@73b8b42a[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@376aa393[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@3358ae2b[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 22800,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Sep 14 19:48:05 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-09-14T19:48:05.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-17521/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2022-08-25T00:41:58.000+0000",
        "updated": "2022-10-20T00:47:21.000+0000",
        "timeoriginalestimate": null,
        "description": "The C++ Substrait consumer currently supports a named table provider to handle the NamedTable relation:\r\n\r\n{noformat}\r\nusing NamedTableProvider =\r\n    std::function<Result<compute::Declaration>(const std::vector<std::string>&)>;\r\nstatic NamedTableProvider kDefaultNamedTableProvider;\r\n\r\n/// Options that control the conversion between Substrait and Acero representations of a\r\n/// plan.\r\nstruct ConversionOptions {\r\n  /// \\brief How strictly the converter should adhere to the structure of the input.\r\n  ConversionStrictness strictness = ConversionStrictness::BEST_EFFORT;\r\n  /// \\brief A custom strategy to be used for providing named tables\r\n  ///\r\n  /// The default behavior will return an invalid status if the plan has any\r\n  /// named table relations.\r\n  NamedTableProvider named_table_provider = kDefaultNamedTableProvider;\r\n};\r\n{noformat}\r\n\r\nThis is very useful for testing and experimenting as it allows you to provide tables from memory (using a table_source node for example).  We should add pyarrow bindings.  I don't think they need to expose the full compute::DeclarationInfo range of table sources.  A simple approach might be a function that, given a list of names, returns either a table, an iterable of batches, or a record batch reader.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "6h 20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 22800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Python] Add python bindings for NamedTableProvider for Substrait consumer",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13478504/comment/17604943",
                    "id": "17604943",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "Issue resolved by pull request 14024\r\nhttps://github.com/apache/arrow/pull/14024",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2022-09-14T19:48:05.258+0000",
                    "updated": "2022-09-14T19:48:05.258+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z181mg:",
        "customfield_12314139": null
    }
}