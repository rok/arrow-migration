{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13438052",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13438052",
    "key": "ARROW-16131",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351051",
                "id": "12351051",
                "description": "",
                "name": "8.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-05-06"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12350591",
                "id": "12350591",
                "description": "",
                "name": "7.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-02-03"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12638047",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12638047",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13440208",
                    "key": "ARROW-16220",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13440208",
                    "fields": {
                        "summary": "[C++] IPC listener interface should allow receiving custom_metadata",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            },
            {
                "id": "12639106",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12639106",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13442672",
                    "key": "ARROW-16430",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13442672",
                    "fields": {
                        "summary": "[Python] Read/Write record batch custom metadata API in pyarrow",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/3",
                            "description": "This issue is being actively worked on at the moment by the assignee.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/inprogress.png",
                            "name": "In Progress",
                            "id": "3",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/4",
                                "id": 4,
                                "key": "indeterminate",
                                "colorName": "yellow",
                                "name": "In Progress"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            },
            {
                "id": "12638046",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12638046",
                "type": {
                    "id": "12310051",
                    "name": "Supercedes",
                    "inward": "is superceded by",
                    "outward": "supercedes",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310051"
                },
                "outwardIssue": {
                    "id": "13263300",
                    "key": "ARROW-6940",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13263300",
                    "fields": {
                        "summary": "[C++] Expose Message-level IPC metadata in both read and write interfaces",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                            "name": "Closed",
                            "id": "6",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=niyue",
            "name": "niyue",
            "key": "niyue",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=niyue&avatarId=48220",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=niyue&avatarId=48220",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=niyue&avatarId=48220",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=niyue&avatarId=48220"
            },
            "displayName": "Yue Ni",
            "active": true,
            "timeZone": "Asia/Shanghai"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=niyue",
            "name": "niyue",
            "key": "niyue",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=niyue&avatarId=48220",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=niyue&avatarId=48220",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=niyue&avatarId=48220",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=niyue&avatarId=48220"
            },
            "displayName": "Yue Ni",
            "active": true,
            "timeZone": "Asia/Shanghai"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=niyue",
            "name": "niyue",
            "key": "niyue",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=niyue&avatarId=48220",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=niyue&avatarId=48220",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=niyue&avatarId=48220",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=niyue&avatarId=48220"
            },
            "displayName": "Yue Ni",
            "active": true,
            "timeZone": "Asia/Shanghai"
        },
        "aggregateprogress": {
            "progress": 21600,
            "total": 21600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 21600,
            "total": 21600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-16131/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 36,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13438052/worklog/753369",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "niyue opened a new pull request, #12812:\nURL: https://github.com/apache/arrow/pull/12812\n\n   This PR aims to address https://issues.apache.org/jira/projects/ARROW/issues/ARROW-16131\r\n   \r\n   Currently, when writing an IPC file with multiple record batches using the `arrow::ipc::RecordBatchWriter`, the `custom_metadata` for each record batch is not saved and will be discarded silently. \r\n   \r\n   The current writer does provide the `AppendCustomMetadata` API internally, but it is never called. I use this API to add the custom metadata during writing and retrieve the custom metadata when reading the record batch. I am not completely sure if this is intentionally ignored or accidentally missing, but from a user's perspective, the metadata can be set via public API (see the example case in ARROW-16131) and I think it is not very friendly that this piece of data is silently discarded.\r\n   \r\n   Server test cases are added in the `read_write_test.cc` for verifying this change. \r\n   \r\n   \n\n\n",
                    "created": "2022-04-06T12:59:48.205+0000",
                    "updated": "2022-04-06T12:59:48.205+0000",
                    "started": "2022-04-06T12:59:48.205+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "753369",
                    "issueId": "13438052"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13438052/worklog/753371",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #12812:\nURL: https://github.com/apache/arrow/pull/12812#issuecomment-1090242647\n\n   https://issues.apache.org/jira/browse/ARROW-16131\n\n\n",
                    "created": "2022-04-06T13:02:10.393+0000",
                    "updated": "2022-04-06T13:02:10.393+0000",
                    "started": "2022-04-06T13:02:10.393+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "753371",
                    "issueId": "13438052"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13438052/worklog/753372",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #12812:\nURL: https://github.com/apache/arrow/pull/12812#issuecomment-1090242688\n\n   :warning: Ticket **has not been started in JIRA**, please click 'Start Progress'.\n\n\n",
                    "created": "2022-04-06T13:02:12.606+0000",
                    "updated": "2022-04-06T13:02:12.606+0000",
                    "started": "2022-04-06T13:02:12.606+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "753372",
                    "issueId": "13438052"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13438052/worklog/753786",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "niyue commented on PR #12812:\nURL: https://github.com/apache/arrow/pull/12812#issuecomment-1090938240\n\n   I checked out all the build failures reported , including `arrow-gcsfs-test (Timeout)` and `arrow-s3-test (Failed)`, and they don't seem to be related with my change. \r\n   \r\n   I can build and run the S3 test locally, and it ran into segfault locally as the CI server did for the test case `GetFileInfoRoot`:\r\n   ```\r\n   TEST_F(TestS3FS, GetFileInfoRoot) { AssertFileInfo(fs_.get(), \"\", FileType::Directory); }\r\n   ```\r\n   \r\n   For the gcs test, I failed to build the google cloud cpp lib and I am not able to run it locally so far, but it seems happened in other PR as well (for example, https://github.com/apache/arrow/pull/12816)\n\n\n",
                    "created": "2022-04-06T23:58:00.981+0000",
                    "updated": "2022-04-06T23:58:00.981+0000",
                    "started": "2022-04-06T23:58:00.981+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "753786",
                    "issueId": "13438052"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13438052/worklog/753787",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "niyue commented on code in PR #12812:\nURL: https://github.com/apache/arrow/pull/12812#discussion_r844528644\n\n\n##########\ncpp/src/arrow/ipc/test_common.cc:\n##########\n@@ -275,6 +275,20 @@ Status MakeIntRecordBatch(std::shared_ptr<RecordBatch>* out) {\n   return MakeIntBatchSized(10, out);\n }\n \n+Status MakeIntBatchWithMetadata(std::shared_ptr<KeyValueMetadata> key_value_metadata,\n+                                std::shared_ptr<RecordBatch>* out) {\n\nReview Comment:\n   I add a new test utility function to generate a random int batch with the provided metadata key value pairs.\n\n\n\n",
                    "created": "2022-04-06T23:59:31.562+0000",
                    "updated": "2022-04-06T23:59:31.562+0000",
                    "started": "2022-04-06T23:59:31.562+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "753787",
                    "issueId": "13438052"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13438052/worklog/753788",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "niyue commented on code in PR #12812:\nURL: https://github.com/apache/arrow/pull/12812#discussion_r844529211\n\n\n##########\ncpp/src/arrow/ipc/writer.cc:\n##########\n@@ -263,6 +263,14 @@ class RecordBatchSerializer {\n     out_->body_length = offset - buffer_start_offset_;\n     DCHECK(bit_util::IsMultipleOf8(out_->body_length));\n \n+    // copy given record batch's schema metadata to the serializer for serialization\n+    auto const &metadata = batch.schema()->metadata();\n+    if (metadata) {\n+      for (int64_t i = 0; i < metadata->size(); ++i) {\n+        AppendCustomMetadata(metadata->key(i), metadata->value(i));\n+      }\n+    }\n\nReview Comment:\n   When writing a batch, its batch specific metadata will be copied into the serializer's internal metadata variable. Previously, we have the `AppendCustomMetadata` API, but it is never called, so the serializer's internal metadata variable is always empty.\n\n\n\n",
                    "created": "2022-04-07T00:01:01.629+0000",
                    "updated": "2022-04-07T00:01:01.629+0000",
                    "started": "2022-04-07T00:01:01.629+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "753788",
                    "issueId": "13438052"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13438052/worklog/753789",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "niyue commented on code in PR #12812:\nURL: https://github.com/apache/arrow/pull/12812#discussion_r844529994\n\n\n##########\ncpp/src/arrow/ipc/reader.cc:\n##########\n@@ -676,7 +676,14 @@ Result<std::shared_ptr<RecordBatch>> ReadRecordBatchInternal(\n   }\n   context.compression = compression;\n   context.metadata_version = internal::GetMetadataVersion(message->version());\n-  return LoadRecordBatch(batch, schema, inclusion_mask, context, file);\n+\n+  auto schema_with_custom_meta = schema;\n+  if (message->custom_metadata() != nullptr) {\n+    std::shared_ptr<KeyValueMetadata> md;\n+    RETURN_NOT_OK(internal::GetKeyValueMetadata(message->custom_metadata(), &md));\n+    schema_with_custom_meta = schema->WithMetadata(std::move(md));\n+  }\n+  return LoadRecordBatch(batch, schema_with_custom_meta, inclusion_mask, context, file);\n\nReview Comment:\n   When reading a batch, if the batch message contains some custom metadata, it will be used to create a new schema with the custom metadata when creating the record batch. If the batch message doesn't contain custom metadata, we still use the original schema for creating the record batch as usual.\n\n\n\n",
                    "created": "2022-04-07T00:03:07.218+0000",
                    "updated": "2022-04-07T00:03:07.218+0000",
                    "started": "2022-04-07T00:03:07.217+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "753789",
                    "issueId": "13438052"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13438052/worklog/754019",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on code in PR #12812:\nURL: https://github.com/apache/arrow/pull/12812#discussion_r845076985\n\n\n##########\ncpp/src/arrow/ipc/writer.cc:\n##########\n@@ -263,6 +263,14 @@ class RecordBatchSerializer {\n     out_->body_length = offset - buffer_start_offset_;\n     DCHECK(bit_util::IsMultipleOf8(out_->body_length));\n \n+    // copy given record batch's schema metadata to the serializer for serialization\n+    auto const &metadata = batch.schema()->metadata();\n\nReview Comment:\n   Maybe we should instead add overloads that also allow explicitly passing in metadata to include with the message. Thoughts @pitrou @westonpace?\n\n\n\n##########\ncpp/src/arrow/ipc/writer.cc:\n##########\n@@ -263,6 +263,14 @@ class RecordBatchSerializer {\n     out_->body_length = offset - buffer_start_offset_;\n     DCHECK(bit_util::IsMultipleOf8(out_->body_length));\n \n+    // copy given record batch's schema metadata to the serializer for serialization\n+    auto const &metadata = batch.schema()->metadata();\n\nReview Comment:\n   ```suggestion\r\n       const auto& metadata = batch.schema()->metadata();\r\n   ```\r\n   for consistency\n\n\n\n##########\ncpp/src/arrow/ipc/writer.cc:\n##########\n@@ -263,6 +263,14 @@ class RecordBatchSerializer {\n     out_->body_length = offset - buffer_start_offset_;\n     DCHECK(bit_util::IsMultipleOf8(out_->body_length));\n \n+    // copy given record batch's schema metadata to the serializer for serialization\n+    auto const &metadata = batch.schema()->metadata();\n\nReview Comment:\n   I'm not sure about this change. If the overall schema has metadata, then won't this copy the schema metadata into every batch, duplicating it over and over?\n\n\n\n",
                    "created": "2022-04-07T12:33:10.278+0000",
                    "updated": "2022-04-07T12:33:10.278+0000",
                    "started": "2022-04-07T12:33:10.278+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "754019",
                    "issueId": "13438052"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13438052/worklog/754333",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on code in PR #12812:\nURL: https://github.com/apache/arrow/pull/12812#discussion_r845559633\n\n\n##########\ncpp/src/arrow/ipc/writer.cc:\n##########\n@@ -263,6 +263,14 @@ class RecordBatchSerializer {\n     out_->body_length = offset - buffer_start_offset_;\n     DCHECK(bit_util::IsMultipleOf8(out_->body_length));\n \n+    // copy given record batch's schema metadata to the serializer for serialization\n+    auto const &metadata = batch.schema()->metadata();\n\nReview Comment:\n   I think I agree.  This would make it too easy to write an inefficient file that contains a lot of duplicate metadata.  Adding an optional metadata field to the `WriteTable` method makes sense.\n\n\n\n",
                    "created": "2022-04-07T21:04:07.072+0000",
                    "updated": "2022-04-07T21:04:07.072+0000",
                    "started": "2022-04-07T21:04:07.071+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "754333",
                    "issueId": "13438052"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13438052/worklog/754419",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "niyue commented on code in PR #12812:\nURL: https://github.com/apache/arrow/pull/12812#discussion_r845757121\n\n\n##########\ncpp/src/arrow/ipc/writer.cc:\n##########\n@@ -263,6 +263,14 @@ class RecordBatchSerializer {\n     out_->body_length = offset - buffer_start_offset_;\n     DCHECK(bit_util::IsMultipleOf8(out_->body_length));\n \n+    // copy given record batch's schema metadata to the serializer for serialization\n+    auto const &metadata = batch.schema()->metadata();\n\nReview Comment:\n   I think there are two cases.\r\n   \r\n   1) in one case, a user simply re-uses the overall schema that happens to have some metadata, and it is less likely this user wants to duplicate the schema metadata in all batches and discard them silently is okay (and duplicating it all record batches may be undesirable and problematic):\r\n   ```python\r\n       schema = pa.schema(\r\n   \u00a0 \u00a0 \u00a0 \u00a0 [\r\n   \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 (\"values\", pa.int64()),\r\n   \u00a0 \u00a0 \u00a0 \u00a0 ],\r\n   \u00a0 \u00a0 \u00a0 \u00a0 metadata={\"foo\": \"bar\"},\r\n   \u00a0 \u00a0 )\r\n       writer = pa.RecordBatchFileWriter(\r\n           ipc_file, schema\r\n       )\r\n       for i in range(num_batches):\r\n           batch = pa.record_batch(\r\n               [int_array],\r\n               schema=schema # <=== re-use the overall schema having metadata\r\n           )\r\n           writer.write_batch(batch)\r\n   ```\r\n   \r\n   2) in the other case, a user provides metadata explicitly when creating a record batch, and discarding the metadata silently may not be desirable in this case:\r\n   ```python\r\n      schema = pa.schema(\r\n   \u00a0 \u00a0 \u00a0 \u00a0 [\r\n   \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 (\"values\", pa.int64()),\r\n   \u00a0 \u00a0 \u00a0 \u00a0 ],\r\n   \u00a0 \u00a0 \u00a0 \u00a0 metadata={\"foo\": \"bar\"},\r\n   \u00a0 \u00a0 )\r\n       writer = pa.RecordBatchFileWriter(\r\n           ipc_file, schema\r\n       )\r\n       for i in range(num_batches):\r\n           batch = pa.record_batch(\r\n               [int_array],\r\n               names=[\"values\"],\r\n               metadata={\"batch_id\": str(i)}, # <=== pass a metadata explicitly\r\n           )\r\n           writer.write_batch(batch)\r\n   ```\r\n   The underlying implementation is difficult to tell these two cases.\r\n   \r\n   Some current API, like `pyarrow.record_batch`, already allows users to specify metadata explicitly. If we provide an overloaded function asking users to provide metadata, it seems we make the `metadata` in these APIs useless (or only useful when the record batch is in memory). The code may look like:\r\n   ```python\r\n   batch = pa.record_batch(\r\n       [int_array],\r\n       names=[\"values\"] # <== `metadata` passed here will never be used by `write_batch` so users won't pass this parameter any more\r\n   )\r\n   writer.write_batch(batch, metadata={\"batch_id\": str(i)})\r\n   ```\r\n   \r\n   Maybe a boolean flag indicating if the metadata in record batch should be serialized?\r\n   ```python\r\n   batch = pa.record_batch(\r\n       [int_array],\r\n       names=[\"values\"],\r\n       metadata={\"batch_id\": str(i)}\r\n   )\r\n   writer.write_batch(batch, serializing_metadata=True)\r\n   ```\n\n\n\n",
                    "created": "2022-04-08T05:50:47.814+0000",
                    "updated": "2022-04-08T05:50:47.814+0000",
                    "started": "2022-04-08T05:50:47.814+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "754419",
                    "issueId": "13438052"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13438052/worklog/754427",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on code in PR #12812:\nURL: https://github.com/apache/arrow/pull/12812#discussion_r845759831\n\n\n##########\ncpp/src/arrow/ipc/writer.cc:\n##########\n@@ -263,6 +263,14 @@ class RecordBatchSerializer {\n     out_->body_length = offset - buffer_start_offset_;\n     DCHECK(bit_util::IsMultipleOf8(out_->body_length));\n \n+    // copy given record batch's schema metadata to the serializer for serialization\n+    auto const &metadata = batch.schema()->metadata();\n\nReview Comment:\n   A boolean parameter seems like a fine idea to me.  Let's call it `serialize_metadata` to keep the tenses consistent.\n\n\n\n",
                    "created": "2022-04-08T05:56:53.310+0000",
                    "updated": "2022-04-08T05:56:53.310+0000",
                    "started": "2022-04-08T05:56:53.309+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "754427",
                    "issueId": "13438052"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13438052/worklog/754864",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "niyue commented on code in PR #12812:\nURL: https://github.com/apache/arrow/pull/12812#discussion_r846549698\n\n\n##########\ncpp/src/arrow/ipc/writer.cc:\n##########\n@@ -263,6 +263,14 @@ class RecordBatchSerializer {\n     out_->body_length = offset - buffer_start_offset_;\n     DCHECK(bit_util::IsMultipleOf8(out_->body_length));\n \n+    // copy given record batch's schema metadata to the serializer for serialization\n+    auto const &metadata = batch.schema()->metadata();\n\nReview Comment:\n   @westonpace \r\n   >  Let's call it serialize_metadata to keep the tenses consistent\r\n   Sure. I am not a native English speaker, and feel free to let me know if there is better naming for this parameter.\r\n   \r\n   @westonpace @lidavidm \r\n   I will give it a try but I am not completely sure what kind of API compatibility is required. Could you give me some suggestions on what the overloaded function signatures are desirable?\r\n   \r\n   Currently in the C++ API, we have:\r\n   ```C++\r\n   class ARROW_EXPORT RecordBatchWriter {\r\n    public:\r\n     virtual ~RecordBatchWriter();\r\n   \r\n     /// \\brief Write a record batch to the stream\r\n     ///\r\n     /// \\param[in] batch the record batch to write to the stream\r\n     /// \\return Status\r\n     virtual Status WriteRecordBatch(const RecordBatch& batch) = 0;\r\n   \r\n     /// \\brief Write possibly-chunked table by creating sequence of record batches\r\n     /// \\param[in] table table to write\r\n     /// \\return Status\r\n     Status WriteTable(const Table& table);\r\n   \r\n     /// \\brief Write Table with a particular chunksize\r\n     /// \\param[in] table table to write\r\n     /// \\param[in] max_chunksize maximum length of table chunks. To indicate\r\n     /// that no maximum should be enforced, pass -1.\r\n     /// \\return Status\r\n     virtual Status WriteTable(const Table& table, int64_t max_chunksize);\r\n   ```\r\n   \r\n   Do we need to keep all existing APIs unchanged or is it allowed to introduce some compatible API changes?\r\n   Some options I can think of:\r\n   1) option 1, keep all existing APIs unchanged and add overloaded APIs only\r\n   ```C++\r\n   virtual Status WriteRecordBatch(const RecordBatch& batch) = 0;\r\n   virtual Status WriteRecordBatch(const RecordBatch& batch, bool serialize_metadata); // new overload API\r\n   Status WriteTable(const Table& table);\r\n   virtual Status WriteTable(const Table& table, int64_t max_chunksize);\r\n   virtual Status WriteTable(const Table& table, int64_t max_chunksize, bool serialize_metadata); // new overload API\r\n   ```\r\n   \r\n   2) option 2, add a default parameter to existing APIs\r\n   ```C++\r\n   virtual Status WriteRecordBatch(const RecordBatch& batch, bool serialize_metadatda=false) = 0; // this will require modification to all sub classes\r\n   Status WriteTable(const Table& table);\r\n   virtual Status WriteTable(const Table& table, int64_t max_chunksize, bool serialize_metadata=false);\r\n   ```\r\n   \r\n   I assume we expect option 1, is it correct?\r\n   \r\n   Additionally, there may be some higher level binding libraries (Python/Ruby/etc) using these APIs, and they may have to be changed to take advantage of these new APIs, what is our strategy for managing them for such a change? Do I need to change them all in this PR (I think I can try changing Python at least but I am not sure if I am familiar with all the binding languages to make such a change) or should I separate the changes into several PRs? Thanks.\r\n   \n\n\n\n##########\ncpp/src/arrow/ipc/writer.cc:\n##########\n@@ -263,6 +263,14 @@ class RecordBatchSerializer {\n     out_->body_length = offset - buffer_start_offset_;\n     DCHECK(bit_util::IsMultipleOf8(out_->body_length));\n \n+    // copy given record batch's schema metadata to the serializer for serialization\n+    auto const &metadata = batch.schema()->metadata();\n\nReview Comment:\n   @westonpace \r\n   >  Let's call it serialize_metadata to keep the tenses consistent\r\n   \r\n   Sure. I am not a native English speaker, and feel free to let me know if there is better naming for this parameter.\r\n   \r\n   @westonpace @lidavidm \r\n   I will give it a try but I am not completely sure what kind of API compatibility is required. Could you give me some suggestions on what the overloaded function signatures are desirable?\r\n   \r\n   Currently in the C++ API, we have:\r\n   ```C++\r\n   class ARROW_EXPORT RecordBatchWriter {\r\n    public:\r\n     virtual ~RecordBatchWriter();\r\n   \r\n     /// \\brief Write a record batch to the stream\r\n     ///\r\n     /// \\param[in] batch the record batch to write to the stream\r\n     /// \\return Status\r\n     virtual Status WriteRecordBatch(const RecordBatch& batch) = 0;\r\n   \r\n     /// \\brief Write possibly-chunked table by creating sequence of record batches\r\n     /// \\param[in] table table to write\r\n     /// \\return Status\r\n     Status WriteTable(const Table& table);\r\n   \r\n     /// \\brief Write Table with a particular chunksize\r\n     /// \\param[in] table table to write\r\n     /// \\param[in] max_chunksize maximum length of table chunks. To indicate\r\n     /// that no maximum should be enforced, pass -1.\r\n     /// \\return Status\r\n     virtual Status WriteTable(const Table& table, int64_t max_chunksize);\r\n   ```\r\n   \r\n   Do we need to keep all existing APIs unchanged or is it allowed to introduce some compatible API changes?\r\n   Some options I can think of:\r\n   1) option 1, keep all existing APIs unchanged and add overloaded APIs only\r\n   ```C++\r\n   virtual Status WriteRecordBatch(const RecordBatch& batch) = 0;\r\n   virtual Status WriteRecordBatch(const RecordBatch& batch, bool serialize_metadata); // new overload API\r\n   Status WriteTable(const Table& table);\r\n   virtual Status WriteTable(const Table& table, int64_t max_chunksize);\r\n   virtual Status WriteTable(const Table& table, int64_t max_chunksize, bool serialize_metadata); // new overload API\r\n   ```\r\n   \r\n   2) option 2, add a default parameter to existing APIs\r\n   ```C++\r\n   virtual Status WriteRecordBatch(const RecordBatch& batch, bool serialize_metadatda=false) = 0; // this will require modification to all sub classes\r\n   Status WriteTable(const Table& table);\r\n   virtual Status WriteTable(const Table& table, int64_t max_chunksize, bool serialize_metadata=false);\r\n   ```\r\n   \r\n   I assume we expect option 1, is it correct?\r\n   \r\n   Additionally, there may be some higher level binding libraries (Python/Ruby/etc) using these APIs, and they may have to be changed to take advantage of these new APIs, what is our strategy for managing them for such a change? Do I need to change them all in this PR (I think I can try changing Python at least but I am not sure if I am familiar with all the binding languages to make such a change) or should I separate the changes into several PRs? Thanks.\r\n   \n\n\n\n",
                    "created": "2022-04-09T00:27:10.870+0000",
                    "updated": "2022-04-09T00:27:10.870+0000",
                    "started": "2022-04-09T00:27:10.870+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "754864",
                    "issueId": "13438052"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13438052/worklog/754935",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on code in PR #12812:\nURL: https://github.com/apache/arrow/pull/12812#discussion_r846623192\n\n\n##########\ncpp/src/arrow/ipc/writer.cc:\n##########\n@@ -263,6 +263,14 @@ class RecordBatchSerializer {\n     out_->body_length = offset - buffer_start_offset_;\n     DCHECK(bit_util::IsMultipleOf8(out_->body_length));\n \n+    // copy given record batch's schema metadata to the serializer for serialization\n+    auto const &metadata = batch.schema()->metadata();\n\nReview Comment:\n   For the bindings: we can tackle them separately. CI will catch us if we make any breaking changes that need to be handled here. It's only Python/R/GLib (Ruby) we have to worry about (Java/Go have a few bindings I think but not at this level). \r\n   \r\n   For the APIs: I would prefer adding overloads. CC @pitrou for opinions too.\n\n\n\n",
                    "created": "2022-04-09T12:01:03.939+0000",
                    "updated": "2022-04-09T12:01:03.939+0000",
                    "started": "2022-04-09T12:01:03.938+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "754935",
                    "issueId": "13438052"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13438052/worklog/755677",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on PR #12812:\nURL: https://github.com/apache/arrow/pull/12812#issuecomment-1096461837\n\n   Hmm, I don't think this is the right way to do this. The IPC message's `custom_metadata` is independent from record batch (i.e. schema) metadata, one should not influence the other.\r\n   \r\n   (also, you could have a `custom_metadata` for other message types such as Tensor)\r\n   \r\n   cc @wesm for opinions.\n\n\n",
                    "created": "2022-04-12T09:44:12.653+0000",
                    "updated": "2022-04-12T09:44:12.653+0000",
                    "started": "2022-04-12T09:44:12.653+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "755677",
                    "issueId": "13438052"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13438052/worklog/756080",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "niyue commented on PR #12812:\nURL: https://github.com/apache/arrow/pull/12812#issuecomment-1097344685\n\n   > The IPC message's custom_metadata is independent from record batch (i.e. schema) metadata\r\n   \r\n   This is actually my initial understanding, according to this documentation (https://arrow.apache.org/docs/format/Columnar.html#custom-application-metadata), it says `This includes Field, Schema, and Message.` and it seems to indicate schema metadata is different from message metadata. \r\n   \r\n   But for the documentation here (https://arrow.apache.org/docs/python/data.html#custom-schema-and-field-metadata), it says `Arrow supports both schema-level and field-level custom key-value metadata allowing for systems to insert their own application defined metadata to customize behavior.` and record batch (message level) metadata is not mentioned.\r\n   \r\n   And I only see API/tests allowing users to modify schema's metadata (probably I am missing something), so I assumed my initial understanding is incorrect and came up with such a PR change.\r\n   \r\n   If message metadata is different from schema metadata, the question here may be slightly more complex since in this case, each record batch may provide 1) this record batch's schema specific metadata, this seems not serialized/deserialized  2) this record batch's message specific metadata, we don't seem to provide API for reading/writing this (internally we have `AppendCustomMetadata` but it is not called and there seems no higher level API allowing users to pass this information)\r\n   \r\n   Please advice what the correct behavior should be so that I could give it a try. Thanks.\n\n\n",
                    "created": "2022-04-12T23:20:21.425+0000",
                    "updated": "2022-04-12T23:20:21.425+0000",
                    "started": "2022-04-12T23:20:21.425+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "756080",
                    "issueId": "13438052"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13438052/worklog/756288",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on PR #12812:\nURL: https://github.com/apache/arrow/pull/12812#issuecomment-1097832538\n\n   So, basically, per-message metadata is an Arrow *IPC* feature that's independent from record batches or schemas. That's why you don't see it mentioned in the [schema metadata documentation](https://arrow.apache.org/docs/python/data.html#custom-schema-and-field-metadata).\r\n   \r\n   > If message metadata is different from schema metadata, the question here may be slightly more complex since in this case, each record batch may provide 1) this record batch's schema specific metadata, this seems not serialized/deserialized 2) this record batch's message specific metadata, we don't seem to provide API for reading/writing this\r\n   \r\n   Indeed the message metadata wouldn't be attached to the record batch or schema, but passed separately.\r\n   \r\n   One possible API on the write side:\r\n   ```c++\r\n   class ARROW_EXPORT RecordBatchWriter {\r\n    public:\r\n     // (default implementation could call `WriteRecordBatch(batch)` while ignoring metadata?)\r\n     virtual Status WriteRecordBatch(const RecordBatch& batch, const KeyValueMetadata& custom_metadata);\r\n   ```\r\n   \r\n   and on the read side:\r\n   ```c++\r\n   class ARROW_EXPORT RecordBatchReader {\r\n    public:\r\n     // (default implementation could call `ReadNext(batch)` and reset `*custom_metadata` to null)\r\n     virtual Status ReadNext(std::shared_ptr<RecordBatch>* batch, std::shared_ptr<KeyValueMetadata>* custom_metadata);\r\n   ```\r\n   \n\n\n",
                    "created": "2022-04-13T09:50:16.323+0000",
                    "updated": "2022-04-13T09:50:16.323+0000",
                    "started": "2022-04-13T09:50:16.322+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "756288",
                    "issueId": "13438052"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13438052/worklog/756944",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "niyue commented on PR #12812:\nURL: https://github.com/apache/arrow/pull/12812#issuecomment-1099117416\n\n   > One possible API on the write side\r\n   \r\n   Thanks for the advice. Let me give it a try.\n\n\n",
                    "created": "2022-04-14T12:07:16.597+0000",
                    "updated": "2022-04-14T12:07:16.597+0000",
                    "started": "2022-04-14T12:07:16.597+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "756944",
                    "issueId": "13438052"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13438052/worklog/757659",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "niyue commented on code in PR #12812:\nURL: https://github.com/apache/arrow/pull/12812#discussion_r851746529\n\n\n##########\ncpp/src/arrow/ipc/reader.h:\n##########\n@@ -190,6 +190,15 @@ class ARROW_EXPORT RecordBatchFileReader\n   /// \\return the read batch\n   virtual Result<std::shared_ptr<RecordBatch>> ReadRecordBatch(int i) = 0;\n \n+  /// \\brief Read a particular record batch along with its custom metadatda from the file.\n+  /// Does not copy memory if the input source supports zero-copy.\n+  ///\n+  /// \\param[in] i the index of the record batch to return\n+  /// \\return a pair of the read batch and its custom metadata\n+  virtual Result<\n+      std::pair<std::shared_ptr<RecordBatch>, std::shared_ptr<KeyValueMetadata>>>\n+  ReadRecordBatchWithCustomMetadata(int i) = 0;\n\nReview Comment:\n   This is a new API added for the `RecordBatchFileReader` class so that accessing a record batch with its metadata  by the index is possible.\n\n\n\n",
                    "created": "2022-04-17T12:06:29.635+0000",
                    "updated": "2022-04-17T12:06:29.635+0000",
                    "started": "2022-04-17T12:06:29.634+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "757659",
                    "issueId": "13438052"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13438052/worklog/757661",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "niyue commented on code in PR #12812:\nURL: https://github.com/apache/arrow/pull/12812#discussion_r851746729\n\n\n##########\ncpp/src/arrow/record_batch.h:\n##########\n@@ -227,6 +227,11 @@ class ARROW_EXPORT RecordBatchReader {\n   /// \\return Status\n   virtual Status ReadNext(std::shared_ptr<RecordBatch>* batch) = 0;\n \n+  virtual Status ReadNext(std::shared_ptr<RecordBatch>* batch,\n+                          std::shared_ptr<KeyValueMetadata>* custom_metadata) {\n+    return Status::NotImplemented(\"ReadNext with custom metadata\");\n+  }\n\nReview Comment:\n   I add this new API with a default implementation so that existing sub class of `RecordBatchReader` can still be compiled successfully.\n\n\n\n",
                    "created": "2022-04-17T12:08:34.739+0000",
                    "updated": "2022-04-17T12:08:34.739+0000",
                    "started": "2022-04-17T12:08:34.739+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "757661",
                    "issueId": "13438052"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13438052/worklog/757662",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "niyue commented on PR #12812:\nURL: https://github.com/apache/arrow/pull/12812#issuecomment-1100864075\n\n   @pitrou @lidavidm \r\n   I submitted a new commit following the suggestion above. I tried to keep the changes compatible with existing public APIs so several new APIs are added. Could you please help to review? Let me know if there is any issue. Thanks.\r\n   \r\n   For the CI:\r\n   1) I found one test case `80 - arrow-compute-hash-join-node-test` failed in `C++ / AMD64 Conda C++ (pull_request)`, but I guess this is probably not caused by my PR\r\n   2) another test case `51 - arrow-flight-test (Failed)` failed in `continuous-integration/appveyor/pr`, I am not able to find the detailed test report in the CI job, is this an issue?\n\n\n",
                    "created": "2022-04-17T12:15:51.924+0000",
                    "updated": "2022-04-17T12:15:51.924+0000",
                    "started": "2022-04-17T12:15:51.923+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "757662",
                    "issueId": "13438052"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
            "id": "1",
            "description": "A problem which impairs or prevents the functions of the product.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
            "name": "Bug",
            "subtask": false,
            "avatarId": 21133
        },
        "timespent": 21600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@112d7d78[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4b4dac5c[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@32b99004[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@14b0e543[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@372ff0b8[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@505b8f66[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2e1c0cd9[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@3d956ea4[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@75f7f39e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@795b72f9[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@37efc3cf[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@21997bd8[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 21600,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Apr 25 15:56:23 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-04-25T15:56:23.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-16131/watchers",
            "watchCount": 3,
            "isWatching": false
        },
        "created": "2022-04-06T05:21:19.000+0000",
        "updated": "2022-05-01T06:28:16.000+0000",
        "timeoriginalestimate": null,
        "description": "When writing an IPC file having multiple record batches, the schema provided to `IpcFormatWriter` is correctly written to IPC file's footer, however, if the record batch written has its batch specific metadata associated with it, this metadata is not written.\r\n\r\nThis can be reproduced with the following test case (using pyarrow):\r\n{code:java}\r\ndef test_chunked_record_batch_meta():\r\n\u00a0 \u00a0 num_batches = 2\r\n\u00a0 \u00a0 ipc_file = \"/tmp/batches_with_metadata.arrow\"\r\n\u00a0 \u00a0 int_array = pa.array([i for i in range(chunk_size)])\r\n\u00a0 \u00a0 schema = pa.schema(\r\n\u00a0 \u00a0 \u00a0 \u00a0 [\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 (\"values\", pa.int64()),\r\n\u00a0 \u00a0 \u00a0 \u00a0 ],\r\n\u00a0 \u00a0 \u00a0 \u00a0 metadata={\"foo\": \"bar\"},\r\n\u00a0 \u00a0 )\r\n\u00a0 \u00a0 writer = pa.RecordBatchFileWriter(\r\n\u00a0 \u00a0 \u00a0 \u00a0 ipc_file, schema\r\n\u00a0 \u00a0 )\r\n\u00a0 \u00a0 for i in range(num_batches):\r\n\u00a0 \u00a0 \u00a0 \u00a0 # follow examples here:\r\n\u00a0 \u00a0 \u00a0 \u00a0 # https://github.com/apache/arrow/blob/master/python/pyarrow/tests/test_table.py\r\n\u00a0 \u00a0 \u00a0 \u00a0 batch = pa.record_batch(\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 [int_array],\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 names=[\"values\"],\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 metadata={\"batch_id\": str(i)},\r\n\u00a0 \u00a0 \u00a0 \u00a0 )\r\n\u00a0 \u00a0 \u00a0 \u00a0 writer.write_batch(batch)\r\n\u00a0 \u00a0 writer.close()\r\n\u00a0 \u00a0 mmapped_file = pa.memory_map(ipc_file)\r\n\u00a0 \u00a0 reader = pa.ipc.open_file(mmapped_file)\r\n\u00a0 \u00a0 batch_0 = reader.get_record_batch(0)\r\n\u00a0 \u00a0 assert batch_0.schema.metadata {code}",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "6h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 21600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Record batch specific metadata is not saved in IPC file",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13438052/comment/17518080",
                    "id": "17518080",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Is this different from ARROW-6940 as mentioned on the mailing list?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2022-04-06T12:13:23.187+0000",
                    "updated": "2022-04-06T12:13:23.187+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13438052/comment/17518113",
                    "id": "17518113",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=niyue",
                        "name": "niyue",
                        "key": "niyue",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=niyue&avatarId=48220",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=niyue&avatarId=48220",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=niyue&avatarId=48220",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=niyue&avatarId=48220"
                        },
                        "displayName": "Yue Ni",
                        "active": true,
                        "timeZone": "Asia/Shanghai"
                    },
                    "body": "[~lidavidm]\u00a0this seems to be duplicated with ARROW-6940. I didn't see the latest reply on the mailing list so I created this ticket for tracking this issue. After creating this ticket, I went on to fix it by submitting PR [https://github.com/apache/arrow/pull/12812]\u00a0and then saw your comment here haha\r\n\r\nARROW-6940 has mentioned arrow flight change, which I don't touch here.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=niyue",
                        "name": "niyue",
                        "key": "niyue",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=niyue&avatarId=48220",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=niyue&avatarId=48220",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=niyue&avatarId=48220",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=niyue&avatarId=48220"
                        },
                        "displayName": "Yue Ni",
                        "active": true,
                        "timeZone": "Asia/Shanghai"
                    },
                    "created": "2022-04-06T13:08:04.474+0000",
                    "updated": "2022-04-06T13:08:30.784+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13438052/comment/17518114",
                    "id": "17518114",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Alright. I don't think there's anything Flight-specific, as indicated in the other ticket, but we can use it to double-check or add some tests on that side. ",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2022-04-06T13:10:06.384+0000",
                    "updated": "2022-04-06T13:10:06.384+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13438052/comment/17518522",
                    "id": "17518522",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=niyue",
                        "name": "niyue",
                        "key": "niyue",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=niyue&avatarId=48220",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=niyue&avatarId=48220",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=niyue&avatarId=48220",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=niyue&avatarId=48220"
                        },
                        "displayName": "Yue Ni",
                        "active": true,
                        "timeZone": "Asia/Shanghai"
                    },
                    "body": "[~lidavidm]\u00a0I checked the PR build failures and they don't seem related with the PR change, so I think it ready for review. I remember I used a button for requesting reviews but I cannot find it now for some reason. Could you please ask someone to review the PR? Take your time. Thanks.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=niyue",
                        "name": "niyue",
                        "key": "niyue",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=niyue&avatarId=48220",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=niyue&avatarId=48220",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=niyue&avatarId=48220",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=niyue&avatarId=48220"
                        },
                        "displayName": "Yue Ni",
                        "active": true,
                        "timeZone": "Asia/Shanghai"
                    },
                    "created": "2022-04-07T00:14:00.952+0000",
                    "updated": "2022-04-07T00:14:00.952+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13438052/comment/17527589",
                    "id": "17527589",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 12812\n[https://github.com/apache/arrow/pull/12812]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2022-04-25T15:56:23.417+0000",
                    "updated": "2022-04-25T15:56:23.417+0000"
                }
            ],
            "maxResults": 5,
            "total": 5,
            "startAt": 0
        },
        "customfield_12311820": "0|z11740:",
        "customfield_12314139": null
    }
}