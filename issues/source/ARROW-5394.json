{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13234931",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13234931",
    "key": "ARROW-5394",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12348823",
                "id": "12348823",
                "description": "",
                "name": "3.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-01-25"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12561456",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12561456",
                "type": {
                    "id": "12310461",
                    "name": "Dependency",
                    "inward": "Dependency",
                    "outward": "Dependency",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310461"
                },
                "inwardIssue": {
                    "id": "13235225",
                    "key": "ARROW-5409",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13235225",
                    "fields": {
                        "summary": "[C++] Improvement for IsIn Kernel when right array is small",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=david1437",
            "name": "david1437",
            "key": "david1437",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "David Sherrier",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=preeti_suman",
            "name": "preeti_suman",
            "key": "preeti_suman",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Preeti Suman",
            "active": true,
            "timeZone": "America/Chicago"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=preeti_suman",
            "name": "preeti_suman",
            "key": "preeti_suman",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Preeti Suman",
            "active": true,
            "timeZone": "America/Chicago"
        },
        "aggregateprogress": {
            "progress": 4800,
            "total": 4800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 4800,
            "total": 4800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-5394/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 8,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13234931/worklog/504792",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "david1437 opened a new pull request #8529:\nURL: https://github.com/apache/arrow/pull/8529\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-26T16:22:16.901+0000",
                    "updated": "2020-10-26T16:22:16.901+0000",
                    "started": "2020-10-26T16:22:16.901+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "504792",
                    "issueId": "13234931"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13234931/worklog/504829",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #8529:\nURL: https://github.com/apache/arrow/pull/8529#issuecomment-716717268\n\n\n   https://issues.apache.org/jira/browse/ARROW-5394\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-26T17:47:52.717+0000",
                    "updated": "2020-10-26T17:47:52.717+0000",
                    "started": "2020-10-26T17:47:52.717+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "504829",
                    "issueId": "13234931"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13234931/worklog/504855",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "david1437 commented on pull request #8529:\nURL: https://github.com/apache/arrow/pull/8529#issuecomment-716742511\n\n\n   CI errors seem unrelated\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-26T18:30:10.334+0000",
                    "updated": "2020-10-26T18:30:10.334+0000",
                    "started": "2020-10-26T18:30:10.334+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "504855",
                    "issueId": "13234931"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13234931/worklog/509215",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #8529:\nURL: https://github.com/apache/arrow/pull/8529#discussion_r519891890\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_set_lookup_benchmark.cc\n##########\n@@ -0,0 +1,143 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"benchmark/benchmark.h\"\n+\n+#include \"arrow/compute/api_scalar.h\"\n+#include \"arrow/compute/kernels/common.h\"\n+#include \"arrow/compute/kernels/test_util.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/testing/random.h\"\n+#include \"arrow/util/benchmark_util.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+constexpr auto kSeed = 0x94378165;\n+\n+static void SetLookupBenchmarkString(benchmark::State& state,\n+                                     const std::string& func_name,\n+                                     const int32_t valueSetLength) {\n\nReview comment:\n       Should be `value_set_length`.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_set_lookup_benchmark.cc\n##########\n@@ -0,0 +1,143 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"benchmark/benchmark.h\"\n+\n+#include \"arrow/compute/api_scalar.h\"\n+#include \"arrow/compute/kernels/common.h\"\n+#include \"arrow/compute/kernels/test_util.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/testing/random.h\"\n+#include \"arrow/util/benchmark_util.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+constexpr auto kSeed = 0x94378165;\n+\n+static void SetLookupBenchmarkString(benchmark::State& state,\n+                                     const std::string& func_name,\n+                                     const int32_t valueSetLength) {\n+  const int64_t array_length = 1 << 20;\n+  const int64_t value_min_size = 0;\n+  const int64_t value_max_size = 32;\n+  const double null_probability = 0.01;\n+  random::RandomArrayGenerator rng(kSeed);\n+\n+  auto values =\n+      rng.String(array_length, value_min_size, value_max_size, null_probability);\n+  auto value_set =\n+      rng.String(valueSetLength, value_min_size, value_max_size, null_probability);\n+  ABORT_NOT_OK(CallFunction(func_name, {values, value_set}));\n\nReview comment:\n       Is the first call for warmup?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_set_lookup_benchmark.cc\n##########\n@@ -0,0 +1,143 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"benchmark/benchmark.h\"\n+\n+#include \"arrow/compute/api_scalar.h\"\n+#include \"arrow/compute/kernels/common.h\"\n+#include \"arrow/compute/kernels/test_util.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/testing/random.h\"\n+#include \"arrow/util/benchmark_util.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+constexpr auto kSeed = 0x94378165;\n+\n+static void SetLookupBenchmarkString(benchmark::State& state,\n+                                     const std::string& func_name,\n+                                     const int32_t valueSetLength) {\n+  const int64_t array_length = 1 << 20;\n+  const int64_t value_min_size = 0;\n+  const int64_t value_max_size = 32;\n+  const double null_probability = 0.01;\n+  random::RandomArrayGenerator rng(kSeed);\n+\n+  auto values =\n+      rng.String(array_length, value_min_size, value_max_size, null_probability);\n+  auto value_set =\n+      rng.String(valueSetLength, value_min_size, value_max_size, null_probability);\n+  ABORT_NOT_OK(CallFunction(func_name, {values, value_set}));\n+  for (auto _ : state) {\n+    ABORT_NOT_OK(CallFunction(func_name, {values, value_set}));\n+  }\n+  state.SetItemsProcessed((state.iterations() * array_length) +\n+                          (state.iterations() * valueSetLength));\n+  state.SetBytesProcessed((state.iterations() * values->data()->buffers[2]->size()) +\n+                          (state.iterations() * value_set->data()->buffers[2]->size()));\n+}\n+\n+template <typename Type>\n+static void SetLookupBenchmarkNumeric(benchmark::State& state,\n+                                      const std::string& func_name,\n+                                      const int32_t valueSetLength) {\n+  const int64_t array_length = 1 << 20;\n+  const int64_t value_min_size = 0;\n+  const int64_t value_max_size = 32;\n+  const double null_probability = 0.01;\n+  random::RandomArrayGenerator rng(kSeed);\n+\n+  auto values =\n+      rng.Numeric<Type>(array_length, value_min_size, value_max_size, null_probability);\n+  auto value_set =\n+      rng.Numeric<Type>(valueSetLength, value_min_size, value_max_size, null_probability);\n+  ABORT_NOT_OK(CallFunction(func_name, {values, value_set}));\n+  for (auto _ : state) {\n+    ABORT_NOT_OK(CallFunction(func_name, {values, value_set}));\n+  }\n+  state.SetItemsProcessed((state.iterations() * array_length) +\n+                          (state.iterations() * valueSetLength));\n+  state.SetBytesProcessed((state.iterations() * values->data()->buffers[1]->size()) +\n+                          (state.iterations() * value_set->data()->buffers[1]->size()));\n+}\n+\n+static void IndexInStringSmall(benchmark::State& state) {\n\nReview comment:\n       Call this \"SmallSet\" instead of \"Small\"?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_set_lookup_benchmark.cc\n##########\n@@ -0,0 +1,143 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"benchmark/benchmark.h\"\n+\n+#include \"arrow/compute/api_scalar.h\"\n+#include \"arrow/compute/kernels/common.h\"\n+#include \"arrow/compute/kernels/test_util.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/testing/random.h\"\n+#include \"arrow/util/benchmark_util.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+constexpr auto kSeed = 0x94378165;\n+\n+static void SetLookupBenchmarkString(benchmark::State& state,\n+                                     const std::string& func_name,\n+                                     const int32_t valueSetLength) {\n+  const int64_t array_length = 1 << 20;\n+  const int64_t value_min_size = 0;\n+  const int64_t value_max_size = 32;\n+  const double null_probability = 0.01;\n+  random::RandomArrayGenerator rng(kSeed);\n+\n+  auto values =\n+      rng.String(array_length, value_min_size, value_max_size, null_probability);\n+  auto value_set =\n+      rng.String(valueSetLength, value_min_size, value_max_size, null_probability);\n+  ABORT_NOT_OK(CallFunction(func_name, {values, value_set}));\n+  for (auto _ : state) {\n+    ABORT_NOT_OK(CallFunction(func_name, {values, value_set}));\n+  }\n+  state.SetItemsProcessed((state.iterations() * array_length) +\n+                          (state.iterations() * valueSetLength));\n+  state.SetBytesProcessed((state.iterations() * values->data()->buffers[2]->size()) +\n+                          (state.iterations() * value_set->data()->buffers[2]->size()));\n+}\n+\n+template <typename Type>\n+static void SetLookupBenchmarkNumeric(benchmark::State& state,\n+                                      const std::string& func_name,\n+                                      const int32_t valueSetLength) {\n+  const int64_t array_length = 1 << 20;\n+  const int64_t value_min_size = 0;\n+  const int64_t value_max_size = 32;\n\nReview comment:\n       Well, for more realistic data, how about using `std::numeric_limits<Type::c_type>::max()` instead?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_set_lookup_benchmark.cc\n##########\n@@ -0,0 +1,143 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"benchmark/benchmark.h\"\n+\n+#include \"arrow/compute/api_scalar.h\"\n+#include \"arrow/compute/kernels/common.h\"\n+#include \"arrow/compute/kernels/test_util.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/testing/random.h\"\n+#include \"arrow/util/benchmark_util.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+constexpr auto kSeed = 0x94378165;\n+\n+static void SetLookupBenchmarkString(benchmark::State& state,\n+                                     const std::string& func_name,\n+                                     const int32_t valueSetLength) {\n+  const int64_t array_length = 1 << 20;\n+  const int64_t value_min_size = 0;\n+  const int64_t value_max_size = 32;\n+  const double null_probability = 0.01;\n+  random::RandomArrayGenerator rng(kSeed);\n+\n+  auto values =\n+      rng.String(array_length, value_min_size, value_max_size, null_probability);\n+  auto value_set =\n+      rng.String(valueSetLength, value_min_size, value_max_size, null_probability);\n+  ABORT_NOT_OK(CallFunction(func_name, {values, value_set}));\n+  for (auto _ : state) {\n+    ABORT_NOT_OK(CallFunction(func_name, {values, value_set}));\n+  }\n+  state.SetItemsProcessed((state.iterations() * array_length) +\n+                          (state.iterations() * valueSetLength));\n\nReview comment:\n       It doesn't seem logical to add this second term. The \"items\" processed are the input array items.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_set_lookup_benchmark.cc\n##########\n@@ -0,0 +1,143 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"benchmark/benchmark.h\"\n+\n+#include \"arrow/compute/api_scalar.h\"\n+#include \"arrow/compute/kernels/common.h\"\n+#include \"arrow/compute/kernels/test_util.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/testing/random.h\"\n+#include \"arrow/util/benchmark_util.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+constexpr auto kSeed = 0x94378165;\n+\n+static void SetLookupBenchmarkString(benchmark::State& state,\n+                                     const std::string& func_name,\n+                                     const int32_t valueSetLength) {\n+  const int64_t array_length = 1 << 20;\n+  const int64_t value_min_size = 0;\n+  const int64_t value_max_size = 32;\n+  const double null_probability = 0.01;\n+  random::RandomArrayGenerator rng(kSeed);\n+\n+  auto values =\n+      rng.String(array_length, value_min_size, value_max_size, null_probability);\n+  auto value_set =\n+      rng.String(valueSetLength, value_min_size, value_max_size, null_probability);\n+  ABORT_NOT_OK(CallFunction(func_name, {values, value_set}));\n+  for (auto _ : state) {\n+    ABORT_NOT_OK(CallFunction(func_name, {values, value_set}));\n+  }\n+  state.SetItemsProcessed((state.iterations() * array_length) +\n+                          (state.iterations() * valueSetLength));\n+  state.SetBytesProcessed((state.iterations() * values->data()->buffers[2]->size()) +\n+                          (state.iterations() * value_set->data()->buffers[2]->size()));\n+}\n+\n+template <typename Type>\n+static void SetLookupBenchmarkNumeric(benchmark::State& state,\n+                                      const std::string& func_name,\n+                                      const int32_t valueSetLength) {\n+  const int64_t array_length = 1 << 20;\n+  const int64_t value_min_size = 0;\n+  const int64_t value_max_size = 32;\n+  const double null_probability = 0.01;\n+  random::RandomArrayGenerator rng(kSeed);\n+\n+  auto values =\n+      rng.Numeric<Type>(array_length, value_min_size, value_max_size, null_probability);\n+  auto value_set =\n+      rng.Numeric<Type>(valueSetLength, value_min_size, value_max_size, null_probability);\n+  ABORT_NOT_OK(CallFunction(func_name, {values, value_set}));\n+  for (auto _ : state) {\n+    ABORT_NOT_OK(CallFunction(func_name, {values, value_set}));\n+  }\n+  state.SetItemsProcessed((state.iterations() * array_length) +\n+                          (state.iterations() * valueSetLength));\n+  state.SetBytesProcessed((state.iterations() * values->data()->buffers[1]->size()) +\n+                          (state.iterations() * value_set->data()->buffers[1]->size()));\n+}\n+\n+static void IndexInStringSmall(benchmark::State& state) {\n+  SetLookupBenchmarkString(state, \"index_in_meta_binary\", state.range(0));\n+}\n+\n+static void IsInStringSmall(benchmark::State& state) {\n+  SetLookupBenchmarkString(state, \"is_in_meta_binary\", state.range(0));\n+}\n+\n+static void IndexInStringLarge(benchmark::State& state) {\n+  SetLookupBenchmarkString(state, \"index_in_meta_binary\", 1 << 20);\n\nReview comment:\n       `1 << 20` sounds very large and irrealistic for a lookup set. How about `1 << 10` (which is already quite a lot of lookup strings).\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_set_lookup_benchmark.cc\n##########\n@@ -0,0 +1,143 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"benchmark/benchmark.h\"\n+\n+#include \"arrow/compute/api_scalar.h\"\n+#include \"arrow/compute/kernels/common.h\"\n+#include \"arrow/compute/kernels/test_util.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/testing/random.h\"\n+#include \"arrow/util/benchmark_util.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+constexpr auto kSeed = 0x94378165;\n+\n+static void SetLookupBenchmarkString(benchmark::State& state,\n+                                     const std::string& func_name,\n+                                     const int32_t valueSetLength) {\n+  const int64_t array_length = 1 << 20;\n+  const int64_t value_min_size = 0;\n+  const int64_t value_max_size = 32;\n+  const double null_probability = 0.01;\n+  random::RandomArrayGenerator rng(kSeed);\n+\n+  auto values =\n+      rng.String(array_length, value_min_size, value_max_size, null_probability);\n+  auto value_set =\n+      rng.String(valueSetLength, value_min_size, value_max_size, null_probability);\n+  ABORT_NOT_OK(CallFunction(func_name, {values, value_set}));\n+  for (auto _ : state) {\n+    ABORT_NOT_OK(CallFunction(func_name, {values, value_set}));\n+  }\n+  state.SetItemsProcessed((state.iterations() * array_length) +\n+                          (state.iterations() * valueSetLength));\n+  state.SetBytesProcessed((state.iterations() * values->data()->buffers[2]->size()) +\n+                          (state.iterations() * value_set->data()->buffers[2]->size()));\n\nReview comment:\n       Ditto here.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_set_lookup_benchmark.cc\n##########\n@@ -0,0 +1,143 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"benchmark/benchmark.h\"\n+\n+#include \"arrow/compute/api_scalar.h\"\n+#include \"arrow/compute/kernels/common.h\"\n+#include \"arrow/compute/kernels/test_util.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/testing/random.h\"\n+#include \"arrow/util/benchmark_util.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+constexpr auto kSeed = 0x94378165;\n+\n+static void SetLookupBenchmarkString(benchmark::State& state,\n+                                     const std::string& func_name,\n+                                     const int32_t valueSetLength) {\n+  const int64_t array_length = 1 << 20;\n+  const int64_t value_min_size = 0;\n+  const int64_t value_max_size = 32;\n+  const double null_probability = 0.01;\n+  random::RandomArrayGenerator rng(kSeed);\n+\n+  auto values =\n+      rng.String(array_length, value_min_size, value_max_size, null_probability);\n+  auto value_set =\n+      rng.String(valueSetLength, value_min_size, value_max_size, null_probability);\n+  ABORT_NOT_OK(CallFunction(func_name, {values, value_set}));\n+  for (auto _ : state) {\n+    ABORT_NOT_OK(CallFunction(func_name, {values, value_set}));\n+  }\n+  state.SetItemsProcessed((state.iterations() * array_length) +\n+                          (state.iterations() * valueSetLength));\n+  state.SetBytesProcessed((state.iterations() * values->data()->buffers[2]->size()) +\n+                          (state.iterations() * value_set->data()->buffers[2]->size()));\n+}\n+\n+template <typename Type>\n+static void SetLookupBenchmarkNumeric(benchmark::State& state,\n+                                      const std::string& func_name,\n+                                      const int32_t valueSetLength) {\n+  const int64_t array_length = 1 << 20;\n+  const int64_t value_min_size = 0;\n+  const int64_t value_max_size = 32;\n+  const double null_probability = 0.01;\n+  random::RandomArrayGenerator rng(kSeed);\n+\n+  auto values =\n+      rng.Numeric<Type>(array_length, value_min_size, value_max_size, null_probability);\n+  auto value_set =\n+      rng.Numeric<Type>(valueSetLength, value_min_size, value_max_size, null_probability);\n+  ABORT_NOT_OK(CallFunction(func_name, {values, value_set}));\n+  for (auto _ : state) {\n+    ABORT_NOT_OK(CallFunction(func_name, {values, value_set}));\n+  }\n+  state.SetItemsProcessed((state.iterations() * array_length) +\n+                          (state.iterations() * valueSetLength));\n+  state.SetBytesProcessed((state.iterations() * values->data()->buffers[1]->size()) +\n+                          (state.iterations() * value_set->data()->buffers[1]->size()));\n+}\n+\n+static void IndexInStringSmall(benchmark::State& state) {\n+  SetLookupBenchmarkString(state, \"index_in_meta_binary\", state.range(0));\n+}\n+\n+static void IsInStringSmall(benchmark::State& state) {\n+  SetLookupBenchmarkString(state, \"is_in_meta_binary\", state.range(0));\n+}\n+\n+static void IndexInStringLarge(benchmark::State& state) {\n\nReview comment:\n       \"LargeSet\"?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_set_lookup_benchmark.cc\n##########\n@@ -0,0 +1,143 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"benchmark/benchmark.h\"\n+\n+#include \"arrow/compute/api_scalar.h\"\n+#include \"arrow/compute/kernels/common.h\"\n+#include \"arrow/compute/kernels/test_util.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/testing/random.h\"\n+#include \"arrow/util/benchmark_util.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+constexpr auto kSeed = 0x94378165;\n+\n+static void SetLookupBenchmarkString(benchmark::State& state,\n+                                     const std::string& func_name,\n+                                     const int32_t valueSetLength) {\n+  const int64_t array_length = 1 << 20;\n+  const int64_t value_min_size = 0;\n+  const int64_t value_max_size = 32;\n+  const double null_probability = 0.01;\n+  random::RandomArrayGenerator rng(kSeed);\n+\n+  auto values =\n+      rng.String(array_length, value_min_size, value_max_size, null_probability);\n+  auto value_set =\n+      rng.String(valueSetLength, value_min_size, value_max_size, null_probability);\n+  ABORT_NOT_OK(CallFunction(func_name, {values, value_set}));\n+  for (auto _ : state) {\n+    ABORT_NOT_OK(CallFunction(func_name, {values, value_set}));\n+  }\n+  state.SetItemsProcessed((state.iterations() * array_length) +\n+                          (state.iterations() * valueSetLength));\n+  state.SetBytesProcessed((state.iterations() * values->data()->buffers[2]->size()) +\n+                          (state.iterations() * value_set->data()->buffers[2]->size()));\n+}\n+\n+template <typename Type>\n+static void SetLookupBenchmarkNumeric(benchmark::State& state,\n+                                      const std::string& func_name,\n+                                      const int32_t valueSetLength) {\n+  const int64_t array_length = 1 << 20;\n+  const int64_t value_min_size = 0;\n+  const int64_t value_max_size = 32;\n+  const double null_probability = 0.01;\n+  random::RandomArrayGenerator rng(kSeed);\n+\n+  auto values =\n+      rng.Numeric<Type>(array_length, value_min_size, value_max_size, null_probability);\n+  auto value_set =\n+      rng.Numeric<Type>(valueSetLength, value_min_size, value_max_size, null_probability);\n+  ABORT_NOT_OK(CallFunction(func_name, {values, value_set}));\n+  for (auto _ : state) {\n+    ABORT_NOT_OK(CallFunction(func_name, {values, value_set}));\n+  }\n+  state.SetItemsProcessed((state.iterations() * array_length) +\n+                          (state.iterations() * valueSetLength));\n+  state.SetBytesProcessed((state.iterations() * values->data()->buffers[1]->size()) +\n+                          (state.iterations() * value_set->data()->buffers[1]->size()));\n+}\n+\n+static void IndexInStringSmall(benchmark::State& state) {\n+  SetLookupBenchmarkString(state, \"index_in_meta_binary\", state.range(0));\n+}\n+\n+static void IsInStringSmall(benchmark::State& state) {\n+  SetLookupBenchmarkString(state, \"is_in_meta_binary\", state.range(0));\n+}\n+\n+static void IndexInStringLarge(benchmark::State& state) {\n+  SetLookupBenchmarkString(state, \"index_in_meta_binary\", 1 << 20);\n+}\n+\n+static void IsInStringLarge(benchmark::State& state) {\n+  SetLookupBenchmarkString(state, \"is_in_meta_binary\", 1 << 20);\n+}\n+\n+static void IndexInInt8Small(benchmark::State& state) {\n+  SetLookupBenchmarkNumeric<Int8Type>(state, \"index_in_meta_binary\", state.range(0));\n+}\n+\n+static void IndexInInt16Small(benchmark::State& state) {\n+  SetLookupBenchmarkNumeric<Int16Type>(state, \"index_in_meta_binary\", state.range(0));\n+}\n+\n+static void IndexInInt32Small(benchmark::State& state) {\n+  SetLookupBenchmarkNumeric<Int32Type>(state, \"index_in_meta_binary\", state.range(0));\n+}\n+\n+static void IndexInInt64Small(benchmark::State& state) {\n+  SetLookupBenchmarkNumeric<Int64Type>(state, \"index_in_meta_binary\", state.range(0));\n+}\n+\n+static void IsInInt8Small(benchmark::State& state) {\n+  SetLookupBenchmarkNumeric<Int8Type>(state, \"is_in_meta_binary\", state.range(0));\n+}\n+\n+static void IsInInt16Small(benchmark::State& state) {\n+  SetLookupBenchmarkNumeric<Int16Type>(state, \"is_in_meta_binary\", state.range(0));\n+}\n+\n+static void IsInInt32Small(benchmark::State& state) {\n+  SetLookupBenchmarkNumeric<Int32Type>(state, \"is_in_meta_binary\", state.range(0));\n+}\n+\n+static void IsInInt64Small(benchmark::State& state) {\n+  SetLookupBenchmarkNumeric<Int64Type>(state, \"is_in_meta_binary\", state.range(0));\n+}\n+\n+BENCHMARK(IndexInStringSmall)->RangeMultiplier(2)->Range(2, 64);\n\nReview comment:\n       We may cut down on the number of benchmark instances and use `RangeMultiplier(4)` instead.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-09T15:29:50.011+0000",
                    "updated": "2020-11-09T15:29:50.011+0000",
                    "started": "2020-11-09T15:29:50.011+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "509215",
                    "issueId": "13234931"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13234931/worklog/509272",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "david1437 commented on a change in pull request #8529:\nURL: https://github.com/apache/arrow/pull/8529#discussion_r520002950\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_set_lookup_benchmark.cc\n##########\n@@ -0,0 +1,143 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"benchmark/benchmark.h\"\n+\n+#include \"arrow/compute/api_scalar.h\"\n+#include \"arrow/compute/kernels/common.h\"\n+#include \"arrow/compute/kernels/test_util.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/testing/random.h\"\n+#include \"arrow/util/benchmark_util.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+constexpr auto kSeed = 0x94378165;\n+\n+static void SetLookupBenchmarkString(benchmark::State& state,\n+                                     const std::string& func_name,\n+                                     const int32_t valueSetLength) {\n+  const int64_t array_length = 1 << 20;\n+  const int64_t value_min_size = 0;\n+  const int64_t value_max_size = 32;\n+  const double null_probability = 0.01;\n+  random::RandomArrayGenerator rng(kSeed);\n+\n+  auto values =\n+      rng.String(array_length, value_min_size, value_max_size, null_probability);\n+  auto value_set =\n+      rng.String(valueSetLength, value_min_size, value_max_size, null_probability);\n+  ABORT_NOT_OK(CallFunction(func_name, {values, value_set}));\n\nReview comment:\n       Yes exactly\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-09T17:48:58.704+0000",
                    "updated": "2020-11-09T17:48:58.704+0000",
                    "started": "2020-11-09T17:48:58.703+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "509272",
                    "issueId": "13234931"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13234931/worklog/509273",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "david1437 commented on pull request #8529:\nURL: https://github.com/apache/arrow/pull/8529#issuecomment-724171027\n\n\n   Not too proficient with git so hopefully, I rebased correctly.  Added changes as you recommended.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-09T17:50:04.909+0000",
                    "updated": "2020-11-09T17:50:04.909+0000",
                    "started": "2020-11-09T17:50:04.909+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "509273",
                    "issueId": "13234931"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13234931/worklog/509308",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #8529:\nURL: https://github.com/apache/arrow/pull/8529#issuecomment-724216961\n\n\n   Ok, it seems the git situation is still a bit messed up, I'll fix it up :-)\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-09T19:11:11.812+0000",
                    "updated": "2020-11-09T19:11:11.812+0000",
                    "started": "2020-11-09T19:11:11.811+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "509308",
                    "issueId": "13234931"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13234931/worklog/509366",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou closed pull request #8529:\nURL: https://github.com/apache/arrow/pull/8529\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-09T21:28:50.272+0000",
                    "updated": "2020-11-09T21:28:50.272+0000",
                    "started": "2020-11-09T21:28:50.272+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "509366",
                    "issueId": "13234931"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 4800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@3d6e418[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4b4619b2[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@23203ea8[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@585038f7[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2b590199[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@2b48bbb4[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@9bf150b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@5071034b[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@33479515[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@5dbc1dd2[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2c5a4c23[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@74e969b8[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 4800,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Nov 09 21:28:39 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-11-09T21:28:39.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-5394/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2019-05-22T15:36:58.000+0000",
        "updated": "2020-11-09T21:29:27.000+0000",
        "timeoriginalestimate": null,
        "description": "Add benchmarks for IsIn kernel.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "1h 20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 4800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Benchmarks for IsIn Kernel",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13234931/comment/17228817",
                    "id": "17228817",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 8529\n[https://github.com/apache/arrow/pull/8529]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2020-11-09T21:28:39.597+0000",
                    "updated": "2020-11-09T21:28:39.597+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z02yq0:",
        "customfield_12314139": null
    }
}