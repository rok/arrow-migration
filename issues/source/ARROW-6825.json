{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13261278",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13261278",
    "key": "ARROW-6825",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12340948",
                "id": "12340948",
                "description": "",
                "name": "0.16.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-02-07"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "aggregateprogress": {
            "progress": 16800,
            "total": 16800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 16800,
            "total": 16800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-6825/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 32,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13261278/worklog/333503",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5727: ARROW-6825: [C++] Rework CSV reader IO around readahead iterator\nURL: https://github.com/apache/arrow/pull/5727\n \n \n   Make the delimiting chunker a common facility used by CSV and JSON.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-24T15:12:13.644+0000",
                    "updated": "2019-10-24T15:12:13.644+0000",
                    "started": "2019-10-24T15:12:13.644+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "333503",
                    "issueId": "13261278"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13261278/worklog/333504",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #5727: ARROW-6825: [C++] Rework CSV reader IO around readahead iterator\nURL: https://github.com/apache/arrow/pull/5727#issuecomment-545964993\n \n \n   @bkietz \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-24T15:12:22.367+0000",
                    "updated": "2019-10-24T15:12:22.367+0000",
                    "started": "2019-10-24T15:12:22.367+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "333504",
                    "issueId": "13261278"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13261278/worklog/333508",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on issue #5727: ARROW-6825: [C++] Rework CSV reader IO around readahead iterator\nURL: https://github.com/apache/arrow/pull/5727#issuecomment-545966575\n \n \n   https://issues.apache.org/jira/browse/ARROW-6825\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-24T15:15:56.653+0000",
                    "updated": "2019-10-24T15:15:56.653+0000",
                    "started": "2019-10-24T15:15:56.653+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "333508",
                    "issueId": "13261278"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13261278/worklog/333513",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #5727: ARROW-6825: [C++] Rework CSV reader IO around readahead iterator\nURL: https://github.com/apache/arrow/pull/5727#issuecomment-545967847\n \n \n   @kou There is a weird Github Actions error here: https://github.com/apache/arrow/pull/5727/checks?check_run_id=273513110\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-24T15:18:53.435+0000",
                    "updated": "2019-10-24T15:18:53.435+0000",
                    "started": "2019-10-24T15:18:53.435+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "333513",
                    "issueId": "13261278"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13261278/worklog/333514",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #5727: ARROW-6825: [C++] Rework CSV reader IO around readahead iterator\nURL: https://github.com/apache/arrow/pull/5727#issuecomment-545967847\n \n \n   @kou There is a weird Github Actions error here: https://github.com/apache/arrow/pull/5727/checks?check_run_id=273513110\r\n   \r\n   Looks like GH uses powershell by default?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-24T15:19:37.271+0000",
                    "updated": "2019-10-24T15:19:37.271+0000",
                    "started": "2019-10-24T15:19:37.270+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "333514",
                    "issueId": "13261278"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13261278/worklog/333520",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #5727: ARROW-6825: [C++] Rework CSV reader IO around readahead iterator\nURL: https://github.com/apache/arrow/pull/5727#issuecomment-545967847\n \n \n   @kou There is a weird Github Actions error here: https://github.com/apache/arrow/pull/5727/checks?check_run_id=273513110\r\n   \r\n   Looks like GH uses powershell by default?\r\n   \r\n   Edit: indeed: https://github.blog/changelog/2019-10-17-github-actions-default-shell-on-windows-runners-is-changing-to-powershell/\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-24T15:24:42.712+0000",
                    "updated": "2019-10-24T15:24:42.712+0000",
                    "started": "2019-10-24T15:24:42.712+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "333520",
                    "issueId": "13261278"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13261278/worklog/333543",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5727: ARROW-6825: [C++] Rework CSV reader IO around readahead iterator\nURL: https://github.com/apache/arrow/pull/5727#discussion_r338639381\n \n \n\n ##########\n File path: cpp/src/arrow/util/delimiting.h\n ##########\n @@ -0,0 +1,131 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+\n+#include \"arrow/status.h\"\n+#include \"arrow/util/macros.h\"\n+#include \"arrow/util/string_view.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+class Buffer;\n+\n+class ARROW_EXPORT Delimiter {\n+ public:\n+  Delimiter() = default;\n+\n+  virtual ~Delimiter();\n+\n+  /// \\brief Find the position of the first delimiter inside block\n+  ///\n+  /// `partial` is taken to be the beginning of the block, and `block`\n+  /// its continuation.  Also, `partial` doesn't contain a delimiter.\n+  ///\n+  /// The returned `out_pos` is relative to `block`'s start and should point\n+  /// *after* the first delimiter.\n+  /// `out_pos` will be -1 if no delimiter is found.\n+  virtual Status FindFirst(util::string_view partial, util::string_view block,\n+                           int64_t* out_pos) = 0;\n+\n+  /// \\brief Find the position of the last delimiter inside block\n+  ///\n+  /// The returned `out_pos` is relative to `block`'s start and should point\n+  /// *after* the first delimiter.\n+  /// `out_pos` will be -1 if no delimiter is found.\n+  virtual Status FindLast(util::string_view block, int64_t* out_pos) = 0;\n+\n+ protected:\n+  ARROW_DISALLOW_COPY_AND_ASSIGN(Delimiter);\n+};\n+\n+ARROW_EXPORT\n+std::shared_ptr<Delimiter> MakeNewlineDelimiter();\n+\n+/// \\brief A reusable block-based chunker for delimited data\n+///\n+/// The chunker takes a block of delimited data and finds a suitable place\n+/// to cut it up without splitting an object.\n \n Review comment:\n   ```suggestion\r\n   /// yields a sub block which begins and ends on delimiters (suitable for consumption by parsers which can only parse whole objects)\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-24T16:05:32.565+0000",
                    "updated": "2019-10-24T16:05:32.565+0000",
                    "started": "2019-10-24T16:05:32.565+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "333543",
                    "issueId": "13261278"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13261278/worklog/333544",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5727: ARROW-6825: [C++] Rework CSV reader IO around readahead iterator\nURL: https://github.com/apache/arrow/pull/5727#discussion_r338642091\n \n \n\n ##########\n File path: cpp/src/arrow/util/delimiting.h\n ##########\n @@ -0,0 +1,131 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+\n+#include \"arrow/status.h\"\n+#include \"arrow/util/macros.h\"\n+#include \"arrow/util/string_view.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+class Buffer;\n+\n+class ARROW_EXPORT Delimiter {\n+ public:\n+  Delimiter() = default;\n+\n+  virtual ~Delimiter();\n+\n+  /// \\brief Find the position of the first delimiter inside block\n+  ///\n+  /// `partial` is taken to be the beginning of the block, and `block`\n+  /// its continuation.  Also, `partial` doesn't contain a delimiter.\n+  ///\n+  /// The returned `out_pos` is relative to `block`'s start and should point\n+  /// *after* the first delimiter.\n+  /// `out_pos` will be -1 if no delimiter is found.\n+  virtual Status FindFirst(util::string_view partial, util::string_view block,\n+                           int64_t* out_pos) = 0;\n+\n+  /// \\brief Find the position of the last delimiter inside block\n+  ///\n+  /// The returned `out_pos` is relative to `block`'s start and should point\n+  /// *after* the first delimiter.\n+  /// `out_pos` will be -1 if no delimiter is found.\n+  virtual Status FindLast(util::string_view block, int64_t* out_pos) = 0;\n+\n+ protected:\n+  ARROW_DISALLOW_COPY_AND_ASSIGN(Delimiter);\n+};\n+\n+ARROW_EXPORT\n+std::shared_ptr<Delimiter> MakeNewlineDelimiter();\n+\n+/// \\brief A reusable block-based chunker for delimited data\n+///\n+/// The chunker takes a block of delimited data and finds a suitable place\n+/// to cut it up without splitting an object.\n+class ARROW_EXPORT DelimitedChunker {\n+ public:\n+  explicit DelimitedChunker(std::shared_ptr<Delimiter> delimiter);\n+  ~DelimitedChunker();\n+\n+  /// \\brief Carve up a chunk in a block of data to contain only whole objects\n+  ///\n+  /// Post-conditions:\n+  /// - block == whole + partial\n+  /// - `whole` is a valid block of delimited data\n+  /// - `partial` doesn't contain an entire delimited object\n+  ///\n+  /// This method will look for the last delimiter in `block` and may\n+  /// therefore be costly.\n+  ///\n+  /// \\param[in] block json data to be chunked\n+  /// \\param[out] whole subrange of block containing whole json objects\n+  /// \\param[out] partial subrange of block a partial json object\n+  Status Process(std::shared_ptr<Buffer> block, std::shared_ptr<Buffer>* whole,\n+                 std::shared_ptr<Buffer>* partial);\n+\n+  /// \\brief Carve the completion of a partial object out of a block\n+  ///\n+  /// Pre-conditions:\n+  /// - `partial` is the start of a valid block of delimited data\n+  ///\n+  /// Post-conditions:\n+  /// - block == completion + rest\n+  /// - `partial + completion` is a valid block of delimited data\n+  /// - `completion` doesn't contain an entire delimited object\n+  ///\n+  /// This method will look for the first delimiter in `block` and should\n+  /// therefore be reasonably cheap.\n+  ///\n+  /// \\param[in] partial incomplete json object\n \n Review comment:\n   ```suggestion\r\n     /// \\param[in] partial incomplete delimited data\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-24T16:05:32.863+0000",
                    "updated": "2019-10-24T16:05:32.863+0000",
                    "started": "2019-10-24T16:05:32.862+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "333544",
                    "issueId": "13261278"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13261278/worklog/333545",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5727: ARROW-6825: [C++] Rework CSV reader IO around readahead iterator\nURL: https://github.com/apache/arrow/pull/5727#discussion_r338662143\n \n \n\n ##########\n File path: cpp/src/arrow/json/chunker.cc\n ##########\n @@ -187,88 +118,60 @@ static size_t ConsumeWholeObject(Stream&& stream) {\n   }\n }\n \n-// A chunker implementation that assumes JSON objects can contain raw newlines,\n-// and uses actual JSON parsing to delimit chunks.\n-class ParsingChunker : public Chunker {\n+namespace {\n+\n+// A delimiter implementation that assumes JSON objects can contain raw newlines,\n+// and uses actual JSON parsing to delimit them.\n+class ParsingDelimiter : public Delimiter {\n  public:\n-  Status Process(std::shared_ptr<Buffer> block, std::shared_ptr<Buffer>* whole,\n-                 std::shared_ptr<Buffer>* partial) override {\n-    if (block->size() == 0) {\n-      *whole = SliceBuffer(block, 0, 0);\n-      *partial = block;\n-      return Status::OK();\n+  Status FindFirst(string_view partial, string_view block, int64_t* out_pos) override {\n+    // XXX should we bubble up JSON parse errors instead of ignoring them?\n \n Review comment:\n   I think it's fine to wait; in the (unusual) case of a parse error we'll just fail a little later by deferring those checks to the thread pool\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-24T16:05:33.140+0000",
                    "updated": "2019-10-24T16:05:33.140+0000",
                    "started": "2019-10-24T16:05:33.140+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "333545",
                    "issueId": "13261278"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13261278/worklog/333546",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5727: ARROW-6825: [C++] Rework CSV reader IO around readahead iterator\nURL: https://github.com/apache/arrow/pull/5727#discussion_r338637546\n \n \n\n ##########\n File path: cpp/src/arrow/util/delimiting.h\n ##########\n @@ -0,0 +1,131 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+\n+#include \"arrow/status.h\"\n+#include \"arrow/util/macros.h\"\n+#include \"arrow/util/string_view.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+class Buffer;\n+\n+class ARROW_EXPORT Delimiter {\n+ public:\n+  Delimiter() = default;\n+\n+  virtual ~Delimiter();\n+\n+  /// \\brief Find the position of the first delimiter inside block\n+  ///\n+  /// `partial` is taken to be the beginning of the block, and `block`\n+  /// its continuation.  Also, `partial` doesn't contain a delimiter.\n+  ///\n+  /// The returned `out_pos` is relative to `block`'s start and should point\n+  /// *after* the first delimiter.\n+  /// `out_pos` will be -1 if no delimiter is found.\n+  virtual Status FindFirst(util::string_view partial, util::string_view block,\n+                           int64_t* out_pos) = 0;\n+\n+  /// \\brief Find the position of the last delimiter inside block\n+  ///\n+  /// The returned `out_pos` is relative to `block`'s start and should point\n+  /// *after* the first delimiter.\n \n Review comment:\n   Do you mean that out_pos is guaranteed not to indicate the first delimiter in block? I think that's a more clear way to state this\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-24T16:05:33.348+0000",
                    "updated": "2019-10-24T16:05:33.348+0000",
                    "started": "2019-10-24T16:05:33.348+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "333546",
                    "issueId": "13261278"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13261278/worklog/333547",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5727: ARROW-6825: [C++] Rework CSV reader IO around readahead iterator\nURL: https://github.com/apache/arrow/pull/5727#discussion_r338659824\n \n \n\n ##########\n File path: cpp/src/arrow/util/delimiting.h\n ##########\n @@ -0,0 +1,131 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+\n+#include \"arrow/status.h\"\n+#include \"arrow/util/macros.h\"\n+#include \"arrow/util/string_view.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+class Buffer;\n+\n+class ARROW_EXPORT Delimiter {\n+ public:\n+  Delimiter() = default;\n+\n+  virtual ~Delimiter();\n+\n+  /// \\brief Find the position of the first delimiter inside block\n+  ///\n+  /// `partial` is taken to be the beginning of the block, and `block`\n+  /// its continuation.  Also, `partial` doesn't contain a delimiter.\n+  ///\n+  /// The returned `out_pos` is relative to `block`'s start and should point\n+  /// *after* the first delimiter.\n+  /// `out_pos` will be -1 if no delimiter is found.\n \n Review comment:\n   please add `static constexpr int64_t kNoDelimiterFound = -1;` (static member of Delimiter) to make this reserved value more clear everywhere\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-24T16:05:33.352+0000",
                    "updated": "2019-10-24T16:05:33.352+0000",
                    "started": "2019-10-24T16:05:33.352+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "333547",
                    "issueId": "13261278"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13261278/worklog/333548",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5727: ARROW-6825: [C++] Rework CSV reader IO around readahead iterator\nURL: https://github.com/apache/arrow/pull/5727#discussion_r338648923\n \n \n\n ##########\n File path: cpp/src/arrow/util/delimiting.h\n ##########\n @@ -0,0 +1,131 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+\n+#include \"arrow/status.h\"\n+#include \"arrow/util/macros.h\"\n+#include \"arrow/util/string_view.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+class Buffer;\n+\n+class ARROW_EXPORT Delimiter {\n \n Review comment:\n   Naming this `Delimiter` is confusing since that usually means the specific reserved characters which indicate a boundary (so ParsingDelimiter will surprise some users). Maybe `ChunkBoundsFinder`?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-24T16:05:33.352+0000",
                    "updated": "2019-10-24T16:05:33.352+0000",
                    "started": "2019-10-24T16:05:33.352+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "333548",
                    "issueId": "13261278"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13261278/worklog/333549",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5727: ARROW-6825: [C++] Rework CSV reader IO around readahead iterator\nURL: https://github.com/apache/arrow/pull/5727#discussion_r338643906\n \n \n\n ##########\n File path: cpp/src/arrow/util/delimiting.cc\n ##########\n @@ -0,0 +1,141 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/util/delimiting.h\"\n+#include \"arrow/buffer.h\"\n+\n+namespace arrow {\n+\n+Delimiter::~Delimiter() {}\n+\n+namespace {\n+\n+Status StraddlingTooLarge() {\n+  return Status::Invalid(\n+      \"straddling object straddles two block boundaries (try to increase block size?)\");\n+}\n+\n+const char* newline_delimiters = \"\\r\\n\";\n \n Review comment:\n   Since this is only used by NewlineDelimiter, please make it private to that class\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-24T16:05:33.576+0000",
                    "updated": "2019-10-24T16:05:33.576+0000",
                    "started": "2019-10-24T16:05:33.576+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "333549",
                    "issueId": "13261278"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13261278/worklog/333550",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5727: ARROW-6825: [C++] Rework CSV reader IO around readahead iterator\nURL: https://github.com/apache/arrow/pull/5727#discussion_r338651716\n \n \n\n ##########\n File path: cpp/src/arrow/csv/chunker.cc\n ##########\n @@ -18,168 +18,246 @@\n #include \"arrow/csv/chunker.h\"\n \n #include <cstdint>\n+#include <memory>\n+#include <utility>\n \n #include \"arrow/status.h\"\n #include \"arrow/util/logging.h\"\n+#include \"arrow/util/stl.h\"\n+#include \"arrow/util/string_view.h\"\n \n namespace arrow {\n namespace csv {\n \n namespace {\n \n-// Find the last newline character in the given data block.\n-// nullptr is returned if not found (like memchr()).\n-const char* FindNewlineReverse(const char* data, uint32_t size) {\n-  if (size == 0) {\n-    return nullptr;\n-  }\n-  const char* s = data + size - 1;\n-  while (size > 0) {\n-    if (*s == '\\r' || *s == '\\n') {\n-      return s;\n-    }\n-    --s;\n-    --size;\n-  }\n-  return nullptr;\n-}\n+// NOTE: cvsmonkey (https://github.com/dw/csvmonkey) has optimization ideas\n \n Review comment:\n   ```suggestion\r\n   // NOTE: csvmonkey (https://github.com/dw/csvmonkey) has optimization ideas\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-24T16:05:33.580+0000",
                    "updated": "2019-10-24T16:05:33.580+0000",
                    "started": "2019-10-24T16:05:33.580+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "333550",
                    "issueId": "13261278"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13261278/worklog/333551",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5727: ARROW-6825: [C++] Rework CSV reader IO around readahead iterator\nURL: https://github.com/apache/arrow/pull/5727#discussion_r338642926\n \n \n\n ##########\n File path: cpp/src/arrow/util/delimiting.h\n ##########\n @@ -0,0 +1,131 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+\n+#include \"arrow/status.h\"\n+#include \"arrow/util/macros.h\"\n+#include \"arrow/util/string_view.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+class Buffer;\n+\n+class ARROW_EXPORT Delimiter {\n+ public:\n+  Delimiter() = default;\n+\n+  virtual ~Delimiter();\n+\n+  /// \\brief Find the position of the first delimiter inside block\n+  ///\n+  /// `partial` is taken to be the beginning of the block, and `block`\n+  /// its continuation.  Also, `partial` doesn't contain a delimiter.\n+  ///\n+  /// The returned `out_pos` is relative to `block`'s start and should point\n+  /// *after* the first delimiter.\n+  /// `out_pos` will be -1 if no delimiter is found.\n+  virtual Status FindFirst(util::string_view partial, util::string_view block,\n+                           int64_t* out_pos) = 0;\n+\n+  /// \\brief Find the position of the last delimiter inside block\n+  ///\n+  /// The returned `out_pos` is relative to `block`'s start and should point\n+  /// *after* the first delimiter.\n+  /// `out_pos` will be -1 if no delimiter is found.\n+  virtual Status FindLast(util::string_view block, int64_t* out_pos) = 0;\n+\n+ protected:\n+  ARROW_DISALLOW_COPY_AND_ASSIGN(Delimiter);\n+};\n+\n+ARROW_EXPORT\n+std::shared_ptr<Delimiter> MakeNewlineDelimiter();\n+\n+/// \\brief A reusable block-based chunker for delimited data\n+///\n+/// The chunker takes a block of delimited data and finds a suitable place\n+/// to cut it up without splitting an object.\n+class ARROW_EXPORT DelimitedChunker {\n \n Review comment:\n   Should we just name this `Chunker`?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-24T16:05:33.632+0000",
                    "updated": "2019-10-24T16:05:33.632+0000",
                    "started": "2019-10-24T16:05:33.631+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "333551",
                    "issueId": "13261278"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13261278/worklog/333552",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5727: ARROW-6825: [C++] Rework CSV reader IO around readahead iterator\nURL: https://github.com/apache/arrow/pull/5727#discussion_r338645386\n \n \n\n ##########\n File path: cpp/src/arrow/json/chunker.h\n ##########\n @@ -19,76 +19,17 @@\n \n #include <memory>\n \n-#include \"arrow/status.h\"\n+#include \"arrow/util/delimiting.h\"\n #include \"arrow/util/macros.h\"\n #include \"arrow/util/visibility.h\"\n \n namespace arrow {\n-\n-class Buffer;\n-\n namespace json {\n \n struct ParseOptions;\n \n-/// \\class Chunker\n-/// \\brief A reusable block-based chunker for JSON data\n-///\n-/// The chunker takes a block of JSON data and finds a suitable place\n-/// to cut it up without splitting an object.\n-class ARROW_EXPORT Chunker {\n- public:\n-  virtual ~Chunker() = default;\n-\n-  /// \\brief Carve up a chunk in a block of data to contain only whole objects\n-  ///\n-  /// Post-conditions:\n-  /// - block == whole + partial\n-  /// - `whole` is a valid block of JSON data\n-  /// - `partial` doesn't contain an entire JSON object\n-  ///\n-  /// \\param[in] block json data to be chunked\n-  /// \\param[out] whole subrange of block containing whole json objects\n-  /// \\param[out] partial subrange of block a partial json object\n-  virtual Status Process(std::shared_ptr<Buffer> block, std::shared_ptr<Buffer>* whole,\n-                         std::shared_ptr<Buffer>* partial) = 0;\n-\n-  /// \\brief Carve the completion of a partial object out of a block\n-  ///\n-  /// Post-conditions:\n-  /// - block == completion + rest\n-  /// - `partial + completion` is a valid block of JSON data\n-  /// - `completion` doesn't contain an entire JSON object\n-  ///\n-  /// \\param[in] partial incomplete json object\n-  /// \\param[in] block json data\n-  /// \\param[out] completion subrange of block containing the completion of partial\n-  /// \\param[out] rest subrange of block containing what completion does not cover\n-  virtual Status ProcessWithPartial(std::shared_ptr<Buffer> partial,\n-                                    std::shared_ptr<Buffer> block,\n-                                    std::shared_ptr<Buffer>* completion,\n-                                    std::shared_ptr<Buffer>* rest) = 0;\n-\n-  /// \\brief Like ProcessWithPartial, but for the lastblock of a file\n-  ///\n-  /// This method allows for a final JSON object without a trailing newline\n-  /// (ProcessWithPartial would return an error in that case).\n-  ///\n-  /// Post-conditions:\n-  /// - block == completion + rest\n-  /// - `partial + completion` is a valid block of JSON data\n-  /// - `completion` doesn't contain an entire JSON object\n-  virtual Status ProcessFinal(std::shared_ptr<Buffer> partial,\n-                              std::shared_ptr<Buffer> block,\n-                              std::shared_ptr<Buffer>* completion,\n-                              std::shared_ptr<Buffer>* rest) = 0;\n-\n-  static std::unique_ptr<Chunker> Make(const ParseOptions& options);\n-\n- protected:\n-  Chunker() = default;\n-  ARROW_DISALLOW_COPY_AND_ASSIGN(Chunker);\n-};\n+ARROW_EXPORT\n \n Review comment:\n   This is empty enough to fold into `json/reader.cc`\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-24T16:05:33.780+0000",
                    "updated": "2019-10-24T16:05:33.780+0000",
                    "started": "2019-10-24T16:05:33.780+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "333552",
                    "issueId": "13261278"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13261278/worklog/333553",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5727: ARROW-6825: [C++] Rework CSV reader IO around readahead iterator\nURL: https://github.com/apache/arrow/pull/5727#discussion_r338642583\n \n \n\n ##########\n File path: cpp/src/arrow/util/delimiting.h\n ##########\n @@ -0,0 +1,131 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+\n+#include \"arrow/status.h\"\n+#include \"arrow/util/macros.h\"\n+#include \"arrow/util/string_view.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+class Buffer;\n+\n+class ARROW_EXPORT Delimiter {\n+ public:\n+  Delimiter() = default;\n+\n+  virtual ~Delimiter();\n+\n+  /// \\brief Find the position of the first delimiter inside block\n+  ///\n+  /// `partial` is taken to be the beginning of the block, and `block`\n+  /// its continuation.  Also, `partial` doesn't contain a delimiter.\n+  ///\n+  /// The returned `out_pos` is relative to `block`'s start and should point\n+  /// *after* the first delimiter.\n+  /// `out_pos` will be -1 if no delimiter is found.\n+  virtual Status FindFirst(util::string_view partial, util::string_view block,\n+                           int64_t* out_pos) = 0;\n+\n+  /// \\brief Find the position of the last delimiter inside block\n+  ///\n+  /// The returned `out_pos` is relative to `block`'s start and should point\n+  /// *after* the first delimiter.\n+  /// `out_pos` will be -1 if no delimiter is found.\n+  virtual Status FindLast(util::string_view block, int64_t* out_pos) = 0;\n+\n+ protected:\n+  ARROW_DISALLOW_COPY_AND_ASSIGN(Delimiter);\n+};\n+\n+ARROW_EXPORT\n+std::shared_ptr<Delimiter> MakeNewlineDelimiter();\n+\n+/// \\brief A reusable block-based chunker for delimited data\n+///\n+/// The chunker takes a block of delimited data and finds a suitable place\n+/// to cut it up without splitting an object.\n+class ARROW_EXPORT DelimitedChunker {\n+ public:\n+  explicit DelimitedChunker(std::shared_ptr<Delimiter> delimiter);\n+  ~DelimitedChunker();\n+\n+  /// \\brief Carve up a chunk in a block of data to contain only whole objects\n+  ///\n+  /// Post-conditions:\n+  /// - block == whole + partial\n+  /// - `whole` is a valid block of delimited data\n+  /// - `partial` doesn't contain an entire delimited object\n+  ///\n+  /// This method will look for the last delimiter in `block` and may\n+  /// therefore be costly.\n+  ///\n+  /// \\param[in] block json data to be chunked\n+  /// \\param[out] whole subrange of block containing whole json objects\n+  /// \\param[out] partial subrange of block a partial json object\n+  Status Process(std::shared_ptr<Buffer> block, std::shared_ptr<Buffer>* whole,\n+                 std::shared_ptr<Buffer>* partial);\n+\n+  /// \\brief Carve the completion of a partial object out of a block\n+  ///\n+  /// Pre-conditions:\n+  /// - `partial` is the start of a valid block of delimited data\n \n Review comment:\n   I think we should clarify \"valid\" here: is it synonymous with \"begins just after a delimiter\"?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-24T16:05:33.785+0000",
                    "updated": "2019-10-24T16:05:33.785+0000",
                    "started": "2019-10-24T16:05:33.785+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "333553",
                    "issueId": "13261278"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13261278/worklog/333555",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5727: ARROW-6825: [C++] Rework CSV reader IO around readahead iterator\nURL: https://github.com/apache/arrow/pull/5727#discussion_r338662899\n \n \n\n ##########\n File path: cpp/src/arrow/util/delimiting.h\n ##########\n @@ -0,0 +1,131 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+\n+#include \"arrow/status.h\"\n+#include \"arrow/util/macros.h\"\n+#include \"arrow/util/string_view.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+class Buffer;\n+\n+class ARROW_EXPORT Delimiter {\n+ public:\n+  Delimiter() = default;\n+\n+  virtual ~Delimiter();\n+\n+  /// \\brief Find the position of the first delimiter inside block\n+  ///\n+  /// `partial` is taken to be the beginning of the block, and `block`\n+  /// its continuation.  Also, `partial` doesn't contain a delimiter.\n+  ///\n+  /// The returned `out_pos` is relative to `block`'s start and should point\n+  /// *after* the first delimiter.\n+  /// `out_pos` will be -1 if no delimiter is found.\n+  virtual Status FindFirst(util::string_view partial, util::string_view block,\n+                           int64_t* out_pos) = 0;\n+\n+  /// \\brief Find the position of the last delimiter inside block\n+  ///\n+  /// The returned `out_pos` is relative to `block`'s start and should point\n+  /// *after* the first delimiter.\n+  /// `out_pos` will be -1 if no delimiter is found.\n+  virtual Status FindLast(util::string_view block, int64_t* out_pos) = 0;\n+\n+ protected:\n+  ARROW_DISALLOW_COPY_AND_ASSIGN(Delimiter);\n+};\n+\n+ARROW_EXPORT\n+std::shared_ptr<Delimiter> MakeNewlineDelimiter();\n+\n+/// \\brief A reusable block-based chunker for delimited data\n+///\n+/// The chunker takes a block of delimited data and finds a suitable place\n+/// to cut it up without splitting an object.\n+class ARROW_EXPORT DelimitedChunker {\n+ public:\n+  explicit DelimitedChunker(std::shared_ptr<Delimiter> delimiter);\n+  ~DelimitedChunker();\n+\n+  /// \\brief Carve up a chunk in a block of data to contain only whole objects\n+  ///\n+  /// Post-conditions:\n+  /// - block == whole + partial\n+  /// - `whole` is a valid block of delimited data\n+  /// - `partial` doesn't contain an entire delimited object\n+  ///\n+  /// This method will look for the last delimiter in `block` and may\n+  /// therefore be costly.\n+  ///\n+  /// \\param[in] block json data to be chunked\n+  /// \\param[out] whole subrange of block containing whole json objects\n+  /// \\param[out] partial subrange of block a partial json object\n+  Status Process(std::shared_ptr<Buffer> block, std::shared_ptr<Buffer>* whole,\n+                 std::shared_ptr<Buffer>* partial);\n+\n+  /// \\brief Carve the completion of a partial object out of a block\n+  ///\n+  /// Pre-conditions:\n+  /// - `partial` is the start of a valid block of delimited data\n \n Review comment:\n   Right.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-24T16:06:51.812+0000",
                    "updated": "2019-10-24T16:06:51.812+0000",
                    "started": "2019-10-24T16:06:51.812+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "333555",
                    "issueId": "13261278"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13261278/worklog/333557",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5727: ARROW-6825: [C++] Rework CSV reader IO around readahead iterator\nURL: https://github.com/apache/arrow/pull/5727#discussion_r338663214\n \n \n\n ##########\n File path: cpp/src/arrow/util/delimiting.h\n ##########\n @@ -0,0 +1,131 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+\n+#include \"arrow/status.h\"\n+#include \"arrow/util/macros.h\"\n+#include \"arrow/util/string_view.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+class Buffer;\n+\n+class ARROW_EXPORT Delimiter {\n \n Review comment:\n   Perhaps `BoundaryFinder`?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-24T16:07:25.848+0000",
                    "updated": "2019-10-24T16:07:25.848+0000",
                    "started": "2019-10-24T16:07:25.847+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "333557",
                    "issueId": "13261278"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13261278/worklog/333558",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5727: ARROW-6825: [C++] Rework CSV reader IO around readahead iterator\nURL: https://github.com/apache/arrow/pull/5727#discussion_r338663314\n \n \n\n ##########\n File path: cpp/src/arrow/csv/chunker.cc\n ##########\n @@ -18,168 +18,246 @@\n #include \"arrow/csv/chunker.h\"\n \n #include <cstdint>\n+#include <memory>\n+#include <utility>\n \n #include \"arrow/status.h\"\n #include \"arrow/util/logging.h\"\n+#include \"arrow/util/stl.h\"\n+#include \"arrow/util/string_view.h\"\n \n namespace arrow {\n namespace csv {\n \n namespace {\n \n-// Find the last newline character in the given data block.\n-// nullptr is returned if not found (like memchr()).\n-const char* FindNewlineReverse(const char* data, uint32_t size) {\n-  if (size == 0) {\n-    return nullptr;\n-  }\n-  const char* s = data + size - 1;\n-  while (size > 0) {\n-    if (*s == '\\r' || *s == '\\n') {\n-      return s;\n-    }\n-    --s;\n-    --size;\n-  }\n-  return nullptr;\n-}\n+// NOTE: cvsmonkey (https://github.com/dw/csvmonkey) has optimization ideas\n \n Review comment:\n   AH :-)\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-24T16:07:38.411+0000",
                    "updated": "2019-10-24T16:07:38.411+0000",
                    "started": "2019-10-24T16:07:38.411+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "333558",
                    "issueId": "13261278"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 16800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@a88cf2d[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7870f5de[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@25e9c8f4[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@5a481792[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5e671931[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@13e46f1a[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7821bbfa[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@62cfd7eb[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@487f412[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@34abd727[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@41a05423[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@5d4ca373[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 16800,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Nov 04 17:09:50 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-11-04T17:09:49.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-6825/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2019-10-09T09:55:54.000+0000",
        "updated": "2019-11-08T08:54:25.000+0000",
        "timeoriginalestimate": null,
        "description": "Following ARROW-6764, we should try to remove the custom ReadaheadSpooler and use the generic readahead iteration facility instead. This will require reworking the blocking / chunking logic to mimick what is done in the JSON reader.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "4h 40m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 16800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Rework CSV reader IO around readahead iterator",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13261278/comment/16966836",
                    "id": "16966836",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
                        "name": "bkietz",
                        "key": "bkietz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
                        },
                        "displayName": "Ben Kietzman",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 5727\n[https://github.com/apache/arrow/pull/5727]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
                        "name": "bkietz",
                        "key": "bkietz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
                        },
                        "displayName": "Ben Kietzman",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-11-04T17:09:50.022+0000",
                    "updated": "2019-11-04T17:09:50.022+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z07f3s:",
        "customfield_12314139": null
    }
}