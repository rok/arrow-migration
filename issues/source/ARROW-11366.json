{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13354213",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13354213",
    "key": "ARROW-11366",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12349493",
                "id": "12349493",
                "description": "",
                "name": "4.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-04-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
            "name": "Minor",
            "id": "4"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=houqp",
            "name": "houqp",
            "key": "houqp",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "QP Hou",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12335005",
                "id": "12335005",
                "name": "Rust - DataFusion"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=houqp",
            "name": "houqp",
            "key": "houqp",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "QP Hou",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=houqp",
            "name": "houqp",
            "key": "houqp",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "QP Hou",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "aggregateprogress": {
            "progress": 31800,
            "total": 31800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 31800,
            "total": 31800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-11366/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 53,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13354213/worklog/540794",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "houqp opened a new pull request #9309:\nURL: https://github.com/apache/arrow/pull/9309\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-24T23:38:28.888+0000",
                    "updated": "2021-01-24T23:38:28.888+0000",
                    "started": "2021-01-24T23:38:28.887+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "540794",
                    "issueId": "13354213"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13354213/worklog/540795",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #9309:\nURL: https://github.com/apache/arrow/pull/9309#issuecomment-766461000\n\n\n   https://issues.apache.org/jira/browse/ARROW-11366\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-24T23:38:42.263+0000",
                    "updated": "2021-01-24T23:38:42.263+0000",
                    "started": "2021-01-24T23:38:42.263+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "540795",
                    "issueId": "13354213"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13354213/worklog/540797",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "houqp commented on a change in pull request #9309:\nURL: https://github.com/apache/arrow/pull/9309#discussion_r563404985\n\n\n\n##########\nFile path: rust/rustfmt.toml\n##########\n@@ -15,9 +15,10 @@\n # specific language governing permissions and limitations\n # under the License.\n \n+edition = \"2018\"\n\nReview comment:\n       drive by config fix\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-24T23:52:52.537+0000",
                    "updated": "2021-01-24T23:52:52.537+0000",
                    "started": "2021-01-24T23:52:52.537+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "540797",
                    "issueId": "13354213"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13354213/worklog/540798",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on pull request #9309:\nURL: https://github.com/apache/arrow/pull/9309#issuecomment-766471716\n\n\n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/9309?src=pr&el=h1) Report\n   > Merging [#9309](https://codecov.io/gh/apache/arrow/pull/9309?src=pr&el=desc) (5656232) into [master](https://codecov.io/gh/apache/arrow/commit/67d0c2e38011cd883059e3a9fd0ea08088661707?el=desc) (67d0c2e) will **increase** coverage by `0.00%`.\n   > The diff coverage is `83.72%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/9309/graphs/tree.svg?width=650&height=150&src=pr&token=LpTCFbqVT1)](https://codecov.io/gh/apache/arrow/pull/9309?src=pr&el=tree)\n   \n   ```diff\n   @@           Coverage Diff            @@\n   ##           master    #9309    +/-   ##\n   ========================================\n     Coverage   81.84%   81.85%            \n   ========================================\n     Files         215      216     +1     \n     Lines       52949    53075   +126     \n   ========================================\n   + Hits        43336    43444   +108     \n   - Misses       9613     9631    +18     \n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/9309?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [...ust/datafusion/src/optimizer/boolean\\_comparison.rs](https://codecov.io/gh/apache/arrow/pull/9309/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9vcHRpbWl6ZXIvYm9vbGVhbl9jb21wYXJpc29uLnJz) | `81.41% <81.41%> (\u00f8)` | |\n   | [rust/datafusion/src/execution/context.rs](https://codecov.io/gh/apache/arrow/pull/9309/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9leGVjdXRpb24vY29udGV4dC5ycw==) | `88.36% <100.00%> (+0.11%)` | :arrow_up: |\n   | [rust/datafusion/src/sql/planner.rs](https://codecov.io/gh/apache/arrow/pull/9309/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9zcWwvcGxhbm5lci5ycw==) | `84.39% <100.00%> (+0.23%)` | :arrow_up: |\n   | [rust/datafusion/src/logical\\_plan/expr.rs](https://codecov.io/gh/apache/arrow/pull/9309/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9sb2dpY2FsX3BsYW4vZXhwci5ycw==) | `80.23% <0.00%> (+0.47%)` | :arrow_up: |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/9309?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/9309?src=pr&el=footer). Last update [67d0c2e...5656232](https://codecov.io/gh/apache/arrow/pull/9309?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-25T00:39:53.273+0000",
                    "updated": "2021-01-25T00:39:53.273+0000",
                    "started": "2021-01-25T00:39:53.273+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "540798",
                    "issueId": "13354213"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13354213/worklog/540807",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io edited a comment on pull request #9309:\nURL: https://github.com/apache/arrow/pull/9309#issuecomment-766471716\n\n\n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/9309?src=pr&el=h1) Report\n   > Merging [#9309](https://codecov.io/gh/apache/arrow/pull/9309?src=pr&el=desc) (474e14a) into [master](https://codecov.io/gh/apache/arrow/commit/10f4ada2bbad0770e422e5d70071e991ab3f5f57?el=desc) (10f4ada) will **increase** coverage by `0.00%`.\n   > The diff coverage is `81.30%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/9309/graphs/tree.svg?width=650&height=150&src=pr&token=LpTCFbqVT1)](https://codecov.io/gh/apache/arrow/pull/9309?src=pr&el=tree)\n   \n   ```diff\n   @@           Coverage Diff            @@\n   ##           master    #9309    +/-   ##\n   ========================================\n     Coverage   81.84%   81.85%            \n   ========================================\n     Files         215      216     +1     \n     Lines       52949    53069   +120     \n   ========================================\n   + Hits        43335    43437   +102     \n   - Misses       9614     9632    +18     \n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/9309?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [...ust/datafusion/src/optimizer/boolean\\_comparison.rs](https://codecov.io/gh/apache/arrow/pull/9309/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9vcHRpbWl6ZXIvYm9vbGVhbl9jb21wYXJpc29uLnJz) | `78.50% <78.50%> (\u00f8)` | |\n   | [rust/datafusion/src/execution/context.rs](https://codecov.io/gh/apache/arrow/pull/9309/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9leGVjdXRpb24vY29udGV4dC5ycw==) | `88.36% <100.00%> (+0.11%)` | :arrow_up: |\n   | [rust/datafusion/src/sql/planner.rs](https://codecov.io/gh/apache/arrow/pull/9309/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9zcWwvcGxhbm5lci5ycw==) | `84.39% <100.00%> (+0.23%)` | :arrow_up: |\n   | [rust/parquet/src/encodings/encoding.rs](https://codecov.io/gh/apache/arrow/pull/9309/diff?src=pr&el=tree#diff-cnVzdC9wYXJxdWV0L3NyYy9lbmNvZGluZ3MvZW5jb2RpbmcucnM=) | `95.43% <0.00%> (+0.19%)` | :arrow_up: |\n   | [rust/datafusion/src/optimizer/utils.rs](https://codecov.io/gh/apache/arrow/pull/9309/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9vcHRpbWl6ZXIvdXRpbHMucnM=) | `49.41% <0.00%> (+0.39%)` | :arrow_up: |\n   | [rust/datafusion/src/logical\\_plan/expr.rs](https://codecov.io/gh/apache/arrow/pull/9309/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9sb2dpY2FsX3BsYW4vZXhwci5ycw==) | `80.23% <0.00%> (+0.47%)` | :arrow_up: |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/9309?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/9309?src=pr&el=footer). Last update [10f4ada...474e14a](https://codecov.io/gh/apache/arrow/pull/9309?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-25T01:53:07.284+0000",
                    "updated": "2021-01-25T01:53:07.284+0000",
                    "started": "2021-01-25T01:53:07.284+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "540807",
                    "issueId": "13354213"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13354213/worklog/540808",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "houqp commented on pull request #9309:\nURL: https://github.com/apache/arrow/pull/9309#issuecomment-766489488\n\n\n   clippy is failing due to unrelated issue, should i fix it in the same PR or create a new dedicated one to address the issue?\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-25T01:53:40.394+0000",
                    "updated": "2021-01-25T01:53:40.394+0000",
                    "started": "2021-01-25T01:53:40.393+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "540808",
                    "issueId": "13354213"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13354213/worklog/540809",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "houqp edited a comment on pull request #9309:\nURL: https://github.com/apache/arrow/pull/9309#issuecomment-766489488\n\n\n   clippy is failing due to unrelated issue, can i fix it in the same PR or should I create a new dedicated one to address the issue?\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-25T01:53:53.493+0000",
                    "updated": "2021-01-25T01:53:53.493+0000",
                    "started": "2021-01-25T01:53:53.493+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "540809",
                    "issueId": "13354213"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13354213/worklog/541482",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "houqp edited a comment on pull request #9309:\nURL: https://github.com/apache/arrow/pull/9309#issuecomment-766489488\n\n\n   clippy is failing due to unrelated issue, can i fix it in the same PR or should I create a new dedicated one to address the issue?\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-26T03:49:23.402+0000",
                    "updated": "2021-01-26T03:49:23.402+0000",
                    "started": "2021-01-26T03:49:23.402+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "541482",
                    "issueId": "13354213"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13354213/worklog/541493",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "houqp commented on a change in pull request #9309:\nURL: https://github.com/apache/arrow/pull/9309#discussion_r563404985\n\n\n\n##########\nFile path: rust/rustfmt.toml\n##########\n@@ -15,9 +15,10 @@\n # specific language governing permissions and limitations\n # under the License.\n \n+edition = \"2018\"\n\nReview comment:\n       drive by config fix\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-26T03:50:56.405+0000",
                    "updated": "2021-01-26T03:50:56.405+0000",
                    "started": "2021-01-26T03:50:56.405+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "541493",
                    "issueId": "13354213"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13354213/worklog/541501",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on pull request #9309:\nURL: https://github.com/apache/arrow/pull/9309#issuecomment-766471716\n\n\n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/9309?src=pr&el=h1) Report\n   > Merging [#9309](https://codecov.io/gh/apache/arrow/pull/9309?src=pr&el=desc) (5656232) into [master](https://codecov.io/gh/apache/arrow/commit/67d0c2e38011cd883059e3a9fd0ea08088661707?el=desc) (67d0c2e) will **increase** coverage by `0.00%`.\n   > The diff coverage is `83.72%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/9309/graphs/tree.svg?width=650&height=150&src=pr&token=LpTCFbqVT1)](https://codecov.io/gh/apache/arrow/pull/9309?src=pr&el=tree)\n   \n   ```diff\n   @@           Coverage Diff            @@\n   ##           master    #9309    +/-   ##\n   ========================================\n     Coverage   81.84%   81.85%            \n   ========================================\n     Files         215      216     +1     \n     Lines       52949    53075   +126     \n   ========================================\n   + Hits        43336    43444   +108     \n   - Misses       9613     9631    +18     \n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/9309?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [...ust/datafusion/src/optimizer/boolean\\_comparison.rs](https://codecov.io/gh/apache/arrow/pull/9309/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9vcHRpbWl6ZXIvYm9vbGVhbl9jb21wYXJpc29uLnJz) | `81.41% <81.41%> (\u00f8)` | |\n   | [rust/datafusion/src/execution/context.rs](https://codecov.io/gh/apache/arrow/pull/9309/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9leGVjdXRpb24vY29udGV4dC5ycw==) | `88.36% <100.00%> (+0.11%)` | :arrow_up: |\n   | [rust/datafusion/src/sql/planner.rs](https://codecov.io/gh/apache/arrow/pull/9309/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9zcWwvcGxhbm5lci5ycw==) | `84.39% <100.00%> (+0.23%)` | :arrow_up: |\n   | [rust/datafusion/src/logical\\_plan/expr.rs](https://codecov.io/gh/apache/arrow/pull/9309/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9sb2dpY2FsX3BsYW4vZXhwci5ycw==) | `80.23% <0.00%> (+0.47%)` | :arrow_up: |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/9309?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/9309?src=pr&el=footer). Last update [67d0c2e...5656232](https://codecov.io/gh/apache/arrow/pull/9309?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-26T03:52:04.809+0000",
                    "updated": "2021-01-26T03:52:04.809+0000",
                    "started": "2021-01-26T03:52:04.809+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "541501",
                    "issueId": "13354213"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13354213/worklog/541502",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io edited a comment on pull request #9309:\nURL: https://github.com/apache/arrow/pull/9309#issuecomment-766471716\n\n\n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/9309?src=pr&el=h1) Report\n   > Merging [#9309](https://codecov.io/gh/apache/arrow/pull/9309?src=pr&el=desc) (474e14a) into [master](https://codecov.io/gh/apache/arrow/commit/10f4ada2bbad0770e422e5d70071e991ab3f5f57?el=desc) (10f4ada) will **increase** coverage by `0.00%`.\n   > The diff coverage is `81.30%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/9309/graphs/tree.svg?width=650&height=150&src=pr&token=LpTCFbqVT1)](https://codecov.io/gh/apache/arrow/pull/9309?src=pr&el=tree)\n   \n   ```diff\n   @@           Coverage Diff            @@\n   ##           master    #9309    +/-   ##\n   ========================================\n     Coverage   81.84%   81.85%            \n   ========================================\n     Files         215      216     +1     \n     Lines       52949    53069   +120     \n   ========================================\n   + Hits        43335    43437   +102     \n   - Misses       9614     9632    +18     \n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/9309?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [...ust/datafusion/src/optimizer/boolean\\_comparison.rs](https://codecov.io/gh/apache/arrow/pull/9309/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9vcHRpbWl6ZXIvYm9vbGVhbl9jb21wYXJpc29uLnJz) | `78.50% <78.50%> (\u00f8)` | |\n   | [rust/datafusion/src/execution/context.rs](https://codecov.io/gh/apache/arrow/pull/9309/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9leGVjdXRpb24vY29udGV4dC5ycw==) | `88.36% <100.00%> (+0.11%)` | :arrow_up: |\n   | [rust/datafusion/src/sql/planner.rs](https://codecov.io/gh/apache/arrow/pull/9309/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9zcWwvcGxhbm5lci5ycw==) | `84.39% <100.00%> (+0.23%)` | :arrow_up: |\n   | [rust/parquet/src/encodings/encoding.rs](https://codecov.io/gh/apache/arrow/pull/9309/diff?src=pr&el=tree#diff-cnVzdC9wYXJxdWV0L3NyYy9lbmNvZGluZ3MvZW5jb2RpbmcucnM=) | `95.43% <0.00%> (+0.19%)` | :arrow_up: |\n   | [rust/datafusion/src/optimizer/utils.rs](https://codecov.io/gh/apache/arrow/pull/9309/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9vcHRpbWl6ZXIvdXRpbHMucnM=) | `49.41% <0.00%> (+0.39%)` | :arrow_up: |\n   | [rust/datafusion/src/logical\\_plan/expr.rs](https://codecov.io/gh/apache/arrow/pull/9309/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9sb2dpY2FsX3BsYW4vZXhwci5ycw==) | `80.23% <0.00%> (+0.47%)` | :arrow_up: |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/9309?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/9309?src=pr&el=footer). Last update [10f4ada...474e14a](https://codecov.io/gh/apache/arrow/pull/9309?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-26T03:52:13.732+0000",
                    "updated": "2021-01-26T03:52:13.732+0000",
                    "started": "2021-01-26T03:52:13.732+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "541502",
                    "issueId": "13354213"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13354213/worklog/541507",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #9309:\nURL: https://github.com/apache/arrow/pull/9309#issuecomment-766461000\n\n\n   https://issues.apache.org/jira/browse/ARROW-11366\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-26T03:52:33.145+0000",
                    "updated": "2021-01-26T03:52:33.145+0000",
                    "started": "2021-01-26T03:52:33.145+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "541507",
                    "issueId": "13354213"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13354213/worklog/541513",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "houqp commented on pull request #9309:\nURL: https://github.com/apache/arrow/pull/9309#issuecomment-766489488\n\n\n   clippy is failing due to unrelated issue, should i fix it in the same PR or create a new dedicated one to address the issue?\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-26T03:53:20.460+0000",
                    "updated": "2021-01-26T03:53:20.460+0000",
                    "started": "2021-01-26T03:53:20.460+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "541513",
                    "issueId": "13354213"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13354213/worklog/541522",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "houqp opened a new pull request #9309:\nURL: https://github.com/apache/arrow/pull/9309\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-26T03:54:17.071+0000",
                    "updated": "2021-01-26T03:54:17.071+0000",
                    "started": "2021-01-26T03:54:17.071+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "541522",
                    "issueId": "13354213"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13354213/worklog/541996",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "houqp removed a comment on pull request #9309:\nURL: https://github.com/apache/arrow/pull/9309#issuecomment-766489488\n\n\n   clippy is failing due to unrelated issue, can i fix it in the same PR or should I create a new dedicated one to address the issue?\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-26T04:45:24.780+0000",
                    "updated": "2021-01-26T04:45:24.780+0000",
                    "started": "2021-01-26T04:45:24.780+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "541996",
                    "issueId": "13354213"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13354213/worklog/542000",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io edited a comment on pull request #9309:\nURL: https://github.com/apache/arrow/pull/9309#issuecomment-766471716\n\n\n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/9309?src=pr&el=h1) Report\n   > Merging [#9309](https://codecov.io/gh/apache/arrow/pull/9309?src=pr&el=desc) (325fa4d) into [master](https://codecov.io/gh/apache/arrow/commit/437c8c944acb3479b76804f041f5f8cbce309fa7?el=desc) (437c8c9) will **increase** coverage by `0.00%`.\n   > The diff coverage is `81.30%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/9309/graphs/tree.svg?width=650&height=150&src=pr&token=LpTCFbqVT1)](https://codecov.io/gh/apache/arrow/pull/9309?src=pr&el=tree)\n   \n   ```diff\n   @@           Coverage Diff            @@\n   ##           master    #9309    +/-   ##\n   ========================================\n     Coverage   81.88%   81.89%            \n   ========================================\n     Files         215      216     +1     \n     Lines       52988    53108   +120     \n   ========================================\n   + Hits        43391    43492   +101     \n   - Misses       9597     9616    +19     \n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/9309?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [...ust/datafusion/src/optimizer/boolean\\_comparison.rs](https://codecov.io/gh/apache/arrow/pull/9309/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9vcHRpbWl6ZXIvYm9vbGVhbl9jb21wYXJpc29uLnJz) | `78.50% <78.50%> (\u00f8)` | |\n   | [rust/datafusion/src/execution/context.rs](https://codecov.io/gh/apache/arrow/pull/9309/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9leGVjdXRpb24vY29udGV4dC5ycw==) | `88.36% <100.00%> (+0.11%)` | :arrow_up: |\n   | [rust/datafusion/src/sql/planner.rs](https://codecov.io/gh/apache/arrow/pull/9309/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9zcWwvcGxhbm5lci5ycw==) | `84.39% <100.00%> (+0.23%)` | :arrow_up: |\n   | [rust/datafusion/src/optimizer/utils.rs](https://codecov.io/gh/apache/arrow/pull/9309/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9vcHRpbWl6ZXIvdXRpbHMucnM=) | `49.41% <0.00%> (+0.39%)` | :arrow_up: |\n   | [rust/datafusion/src/logical\\_plan/expr.rs](https://codecov.io/gh/apache/arrow/pull/9309/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9sb2dpY2FsX3BsYW4vZXhwci5ycw==) | `80.23% <0.00%> (+0.47%)` | :arrow_up: |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/9309?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/9309?src=pr&el=footer). Last update [437c8c9...325fa4d](https://codecov.io/gh/apache/arrow/pull/9309?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-26T04:52:50.887+0000",
                    "updated": "2021-01-26T04:52:50.887+0000",
                    "started": "2021-01-26T04:52:50.887+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "542000",
                    "issueId": "13354213"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13354213/worklog/542048",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Dandandan commented on a change in pull request #9309:\nURL: https://github.com/apache/arrow/pull/9309#discussion_r564293129\n\n\n\n##########\nFile path: rust/datafusion/src/optimizer/boolean_comparison.rs\n##########\n@@ -0,0 +1,270 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Boolean comparision rule rewrites redudant comparison expression involing boolean literal into\n+//! unary expression.\n+\n+use std::sync::Arc;\n+\n+use crate::error::Result;\n+use crate::logical_plan::{Expr, LogicalPlan, Operator};\n+use crate::optimizer::optimizer::OptimizerRule;\n+use crate::optimizer::utils;\n+use crate::scalar::ScalarValue;\n+\n+/// Optimizer that simplifies comparison expressions involving boolean literals.\n+///\n+/// Recursively go through all expressionss and simplify the following cases:\n+/// * `expr = ture` to `expr`\n+/// * `expr = false` to `!expr`\n+pub struct BooleanComparison {}\n+\n+impl BooleanComparison {\n\nReview comment:\n       I think we could make this optimizer a bit more generic (not necessary in this PR) to split recursion / pattern match\r\n   \r\n   This is the more \"optimizer framework\" I had in mind in the comment on the roadmap\r\n   @alamb @jorgecarleitao @vertexclique .\r\n   \r\n   A common strategy (used by Spark) for rule / replacement based  to have a loop that just does something like this:\r\n   \r\n   ```rust\r\n   let changed = False;\r\n   \r\n   while !changed {\r\n       (logical_plan, changed)  = apply_optimizations(rules, logical_plan);\r\n   }\r\n   ```\r\n   \r\n   A rule could be something like (returning `Some` on replaced output) and doesn't need the boilerplate of recursion for every rule.\r\n   \r\n   ```rust\r\n   // Optimizer can work both on expr and logical plans, default returns `None`\r\n   impl OptimizerRule for BooleanComparison {\r\n      fn optimize_expr(&mut self, plan: &Expr) -> Option<Expr> {\r\n          match e {\r\n                Expr::BinaryExpr { left, op, right } => {\r\n               let left = optimize_expr(left);\r\n               let right = optimize_expr(right);\r\n               match op {\r\n                   Operator::Eq => match (&left, &right) {\r\n                       (Expr::Literal(ScalarValue::Boolean(b)), _) => match b {\r\n                           Some(true) => Some(right),\r\n                           Some(false) | None => Some(Expr::Not(Box::new(right))),\r\n                       },\r\n                       (_, Expr::Literal(ScalarValue::Boolean(b))) => match b {\r\n                           Some(true) => Some(left),\r\n                           Some(false) | None => Some(Expr::Not(Box::new(left))),\r\n                       },\r\n                       _ => None,\r\n                   },\r\n                   Operator::NotEq => match (&left, &right) {\r\n                       (Expr::Literal(ScalarValue::Boolean(b)), _) => match b {\r\n                           Some(false) | None => Some(right),\r\n                           Some(true) => Some(Expr::Not(Box::new(right))),\r\n                       },\r\n                       (_, Expr::Literal(ScalarValue::Boolean(b))) => match b {\r\n                           Some(false) | None => left,\r\n                           Some(true) => Some(Expr::Not(Box::new(left))),\r\n                       },\r\n                       _ => None,\r\n                   },\r\n                   _ => None\r\n               }\r\n           }\r\n          }\r\n      }\r\n   }\r\n   \r\n   ```\r\n       \n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-26T07:19:36.512+0000",
                    "updated": "2021-01-26T07:19:36.512+0000",
                    "started": "2021-01-26T07:19:36.512+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "542048",
                    "issueId": "13354213"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13354213/worklog/542133",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on a change in pull request #9309:\nURL: https://github.com/apache/arrow/pull/9309#discussion_r564440788\n\n\n\n##########\nFile path: rust/datafusion/src/optimizer/boolean_comparison.rs\n##########\n@@ -0,0 +1,270 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n\nReview comment:\n       I suggest calling this module 'constant_folding.rs` and the optimization `ConstantFolding` -- while this particular PR has code to fold boolean constants, the idea is much more general (e.g you might imagine folding things like `A < (5+3)` into `A < 8` and that sort of thing).\r\n   \r\n   \n\n##########\nFile path: rust/datafusion/src/optimizer/boolean_comparison.rs\n##########\n@@ -0,0 +1,270 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Boolean comparision rule rewrites redudant comparison expression involing boolean literal into\n+//! unary expression.\n+\n+use std::sync::Arc;\n+\n+use crate::error::Result;\n+use crate::logical_plan::{Expr, LogicalPlan, Operator};\n+use crate::optimizer::optimizer::OptimizerRule;\n+use crate::optimizer::utils;\n+use crate::scalar::ScalarValue;\n+\n+/// Optimizer that simplifies comparison expressions involving boolean literals.\n+///\n+/// Recursively go through all expressionss and simplify the following cases:\n+/// * `expr = ture` to `expr`\n+/// * `expr = false` to `!expr`\n+pub struct BooleanComparison {}\n+\n+impl BooleanComparison {\n+    #[allow(missing_docs)]\n+    pub fn new() -> Self {\n+        Self {}\n+    }\n+}\n+\n+impl OptimizerRule for BooleanComparison {\n+    fn optimize(&mut self, plan: &LogicalPlan) -> Result<LogicalPlan> {\n+        match plan {\n+            LogicalPlan::Filter { predicate, input } => Ok(LogicalPlan::Filter {\n+                predicate: optimize_expr(predicate),\n+                input: Arc::new(self.optimize(input)?),\n+            }),\n+            // Rest: recurse into plan, apply optimization where possible\n+            LogicalPlan::Projection { .. }\n+            | LogicalPlan::Aggregate { .. }\n+            | LogicalPlan::Limit { .. }\n+            | LogicalPlan::Repartition { .. }\n+            | LogicalPlan::CreateExternalTable { .. }\n+            | LogicalPlan::Extension { .. }\n+            | LogicalPlan::Sort { .. }\n+            | LogicalPlan::Explain { .. }\n+            | LogicalPlan::Join { .. } => {\n+                let expr = utils::expressions(plan);\n+\n+                // apply the optimization to all inputs of the plan\n+                let inputs = utils::inputs(plan);\n+                let new_inputs = inputs\n+                    .iter()\n+                    .map(|plan| self.optimize(plan))\n+                    .collect::<Result<Vec<_>>>()?;\n+\n+                utils::from_plan(plan, &expr, &new_inputs)\n+            }\n+            LogicalPlan::TableScan { .. } | LogicalPlan::EmptyRelation { .. } => {\n+                Ok(plan.clone())\n+            }\n+        }\n+    }\n+\n+    fn name(&self) -> &str {\n+        \"boolean_comparison\"\n+    }\n+}\n+\n+/// Recursively transverses the logical plan.\n+fn optimize_expr(e: &Expr) -> Expr {\n+    match e {\n+        Expr::BinaryExpr { left, op, right } => {\n+            let left = optimize_expr(left);\n+            let right = optimize_expr(right);\n+            match op {\n+                Operator::Eq => match (&left, &right) {\n+                    (Expr::Literal(ScalarValue::Boolean(b)), _) => match b {\n+                        Some(true) => right,\n+                        Some(false) | None => Expr::Not(Box::new(right)),\n+                    },\n+                    (_, Expr::Literal(ScalarValue::Boolean(b))) => match b {\n+                        Some(true) => left,\n+                        Some(false) | None => Expr::Not(Box::new(left)),\n+                    },\n+                    _ => Expr::BinaryExpr {\n+                        left: Box::new(left),\n+                        op: Operator::Eq,\n+                        right: Box::new(right),\n+                    },\n+                },\n+                Operator::NotEq => match (&left, &right) {\n+                    (Expr::Literal(ScalarValue::Boolean(b)), _) => match b {\n+                        Some(false) | None => right,\n+                        Some(true) => Expr::Not(Box::new(right)),\n+                    },\n+                    (_, Expr::Literal(ScalarValue::Boolean(b))) => match b {\n+                        Some(false) | None => left,\n+                        Some(true) => Expr::Not(Box::new(left)),\n+                    },\n+                    _ => Expr::BinaryExpr {\n+                        left: Box::new(left),\n+                        op: Operator::NotEq,\n+                        right: Box::new(right),\n+                    },\n+                },\n+                _ => Expr::BinaryExpr {\n+                    left: Box::new(left),\n+                    op: op.clone(),\n+                    right: Box::new(right),\n+                },\n+            }\n+        }\n+        Expr::Not(expr) => Expr::Not(Box::new(optimize_expr(&expr))),\n+        Expr::Case {\n+            expr,\n+            when_then_expr,\n+            else_expr,\n+        } => {\n+            if expr.is_none() {\n+                // recurse into CASE WHEN condition expressions\n+                Expr::Case {\n+                    expr: None,\n+                    when_then_expr: when_then_expr\n+                        .iter()\n+                        .map(|(when, then)| (Box::new(optimize_expr(when)), then.clone()))\n+                        .collect(),\n+                    else_expr: else_expr.clone(),\n+                }\n+            } else {\n+                // when base expression is specified, when_then_expr conditions are literal values\n+                // so we can just skip this case\n+                e.clone()\n+            }\n+        }\n+        Expr::Alias { .. }\n+        | Expr::Negative { .. }\n+        | Expr::Column { .. }\n+        | Expr::InList { .. }\n+        | Expr::IsNotNull { .. }\n+        | Expr::IsNull { .. }\n+        | Expr::Cast { .. }\n+        | Expr::ScalarVariable { .. }\n+        | Expr::Between { .. }\n+        | Expr::Literal { .. }\n+        | Expr::ScalarFunction { .. }\n+        | Expr::ScalarUDF { .. }\n+        | Expr::AggregateFunction { .. }\n+        | Expr::AggregateUDF { .. }\n+        | Expr::Sort { .. }\n+        | Expr::Wildcard => e.clone(),\n+    }\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+    use crate::logical_plan::{col, lit, LogicalPlanBuilder};\n+    use crate::test::*;\n+\n+    fn assert_optimized_plan_eq(plan: &LogicalPlan, expected: &str) {\n+        let mut rule = BooleanComparison::new();\n+        let optimized_plan = rule.optimize(plan).expect(\"failed to optimize plan\");\n+        let formatted_plan = format!(\"{:?}\", optimized_plan);\n+        assert_eq!(formatted_plan, expected);\n+    }\n+\n+    #[test]\n+    fn simplify_eq_expr() -> Result<()> {\n\nReview comment:\n       I think adding a test for rewriting expressions in a non-filter plan would be valuable (e.g. make a join plan or something)\n\n##########\nFile path: rust/datafusion/src/optimizer/boolean_comparison.rs\n##########\n@@ -0,0 +1,270 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Boolean comparision rule rewrites redudant comparison expression involing boolean literal into\n+//! unary expression.\n+\n+use std::sync::Arc;\n+\n+use crate::error::Result;\n+use crate::logical_plan::{Expr, LogicalPlan, Operator};\n+use crate::optimizer::optimizer::OptimizerRule;\n+use crate::optimizer::utils;\n+use crate::scalar::ScalarValue;\n+\n+/// Optimizer that simplifies comparison expressions involving boolean literals.\n+///\n+/// Recursively go through all expressionss and simplify the following cases:\n+/// * `expr = ture` to `expr`\n+/// * `expr = false` to `!expr`\n+pub struct BooleanComparison {}\n+\n+impl BooleanComparison {\n+    #[allow(missing_docs)]\n+    pub fn new() -> Self {\n+        Self {}\n+    }\n+}\n+\n+impl OptimizerRule for BooleanComparison {\n+    fn optimize(&mut self, plan: &LogicalPlan) -> Result<LogicalPlan> {\n+        match plan {\n+            LogicalPlan::Filter { predicate, input } => Ok(LogicalPlan::Filter {\n+                predicate: optimize_expr(predicate),\n+                input: Arc::new(self.optimize(input)?),\n+            }),\n+            // Rest: recurse into plan, apply optimization where possible\n+            LogicalPlan::Projection { .. }\n+            | LogicalPlan::Aggregate { .. }\n+            | LogicalPlan::Limit { .. }\n+            | LogicalPlan::Repartition { .. }\n+            | LogicalPlan::CreateExternalTable { .. }\n+            | LogicalPlan::Extension { .. }\n+            | LogicalPlan::Sort { .. }\n+            | LogicalPlan::Explain { .. }\n+            | LogicalPlan::Join { .. } => {\n+                let expr = utils::expressions(plan);\n+\n+                // apply the optimization to all inputs of the plan\n+                let inputs = utils::inputs(plan);\n+                let new_inputs = inputs\n+                    .iter()\n+                    .map(|plan| self.optimize(plan))\n+                    .collect::<Result<Vec<_>>>()?;\n+\n+                utils::from_plan(plan, &expr, &new_inputs)\n+            }\n+            LogicalPlan::TableScan { .. } | LogicalPlan::EmptyRelation { .. } => {\n+                Ok(plan.clone())\n+            }\n+        }\n+    }\n+\n+    fn name(&self) -> &str {\n+        \"boolean_comparison\"\n+    }\n+}\n+\n+/// Recursively transverses the logical plan.\n+fn optimize_expr(e: &Expr) -> Expr {\n+    match e {\n+        Expr::BinaryExpr { left, op, right } => {\n+            let left = optimize_expr(left);\n+            let right = optimize_expr(right);\n+            match op {\n+                Operator::Eq => match (&left, &right) {\n+                    (Expr::Literal(ScalarValue::Boolean(b)), _) => match b {\n+                        Some(true) => right,\n+                        Some(false) | None => Expr::Not(Box::new(right)),\n+                    },\n+                    (_, Expr::Literal(ScalarValue::Boolean(b))) => match b {\n+                        Some(true) => left,\n+                        Some(false) | None => Expr::Not(Box::new(left)),\n+                    },\n+                    _ => Expr::BinaryExpr {\n+                        left: Box::new(left),\n+                        op: Operator::Eq,\n+                        right: Box::new(right),\n+                    },\n+                },\n+                Operator::NotEq => match (&left, &right) {\n+                    (Expr::Literal(ScalarValue::Boolean(b)), _) => match b {\n+                        Some(false) | None => right,\n+                        Some(true) => Expr::Not(Box::new(right)),\n+                    },\n+                    (_, Expr::Literal(ScalarValue::Boolean(b))) => match b {\n+                        Some(false) | None => left,\n+                        Some(true) => Expr::Not(Box::new(left)),\n+                    },\n+                    _ => Expr::BinaryExpr {\n+                        left: Box::new(left),\n+                        op: Operator::NotEq,\n+                        right: Box::new(right),\n+                    },\n+                },\n+                _ => Expr::BinaryExpr {\n+                    left: Box::new(left),\n+                    op: op.clone(),\n+                    right: Box::new(right),\n+                },\n+            }\n+        }\n+        Expr::Not(expr) => Expr::Not(Box::new(optimize_expr(&expr))),\n+        Expr::Case {\n+            expr,\n+            when_then_expr,\n+            else_expr,\n+        } => {\n+            if expr.is_none() {\n+                // recurse into CASE WHEN condition expressions\n+                Expr::Case {\n+                    expr: None,\n+                    when_then_expr: when_then_expr\n+                        .iter()\n+                        .map(|(when, then)| (Box::new(optimize_expr(when)), then.clone()))\n+                        .collect(),\n+                    else_expr: else_expr.clone(),\n+                }\n+            } else {\n+                // when base expression is specified, when_then_expr conditions are literal values\n+                // so we can just skip this case\n+                e.clone()\n+            }\n+        }\n+        Expr::Alias { .. }\n+        | Expr::Negative { .. }\n+        | Expr::Column { .. }\n+        | Expr::InList { .. }\n+        | Expr::IsNotNull { .. }\n+        | Expr::IsNull { .. }\n+        | Expr::Cast { .. }\n+        | Expr::ScalarVariable { .. }\n+        | Expr::Between { .. }\n+        | Expr::Literal { .. }\n+        | Expr::ScalarFunction { .. }\n+        | Expr::ScalarUDF { .. }\n+        | Expr::AggregateFunction { .. }\n+        | Expr::AggregateUDF { .. }\n+        | Expr::Sort { .. }\n+        | Expr::Wildcard => e.clone(),\n+    }\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+    use crate::logical_plan::{col, lit, LogicalPlanBuilder};\n+    use crate::test::*;\n+\n+    fn assert_optimized_plan_eq(plan: &LogicalPlan, expected: &str) {\n+        let mut rule = BooleanComparison::new();\n+        let optimized_plan = rule.optimize(plan).expect(\"failed to optimize plan\");\n+        let formatted_plan = format!(\"{:?}\", optimized_plan);\n+        assert_eq!(formatted_plan, expected);\n+    }\n+\n+    #[test]\n+    fn simplify_eq_expr() -> Result<()> {\n+        let table_scan = test_table_scan()?;\n+        let plan = LogicalPlanBuilder::from(&table_scan)\n+            .filter(col(\"a\").eq(lit(true)))?\n+            .filter(col(\"b\").eq(lit(false)))?\n+            .project(vec![col(\"a\")])?\n+            .build()?;\n+\n+        let expected = \"\\\n+        Projection: #a\\\n+        \\n  Filter: NOT #b\\\n+        \\n    Filter: #a\\\n+        \\n      TableScan: test projection=None\";\n+\n+        assert_optimized_plan_eq(&plan, expected);\n+        Ok(())\n+    }\n+\n+    #[test]\n+    fn simplify_not_eq_expr() -> Result<()> {\n\nReview comment:\n       One suggestion on the tests (not needed in this PR) would be to separtate out the cases -- \r\n   1. one set in terms of `LogicalPlan` that makes sure rewrite was applied to all expressions in the plan node \r\n   2. Another set for just the logic in `optimize_expr` (aka make an `Expr`, rewrite it, and verify the rewrite was done correctly\r\n   \r\n   \n\n##########\nFile path: rust/datafusion/src/optimizer/boolean_comparison.rs\n##########\n@@ -0,0 +1,270 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Boolean comparision rule rewrites redudant comparison expression involing boolean literal into\n+//! unary expression.\n+\n+use std::sync::Arc;\n+\n+use crate::error::Result;\n+use crate::logical_plan::{Expr, LogicalPlan, Operator};\n+use crate::optimizer::optimizer::OptimizerRule;\n+use crate::optimizer::utils;\n+use crate::scalar::ScalarValue;\n+\n+/// Optimizer that simplifies comparison expressions involving boolean literals.\n+///\n+/// Recursively go through all expressionss and simplify the following cases:\n+/// * `expr = ture` to `expr`\n+/// * `expr = false` to `!expr`\n+pub struct BooleanComparison {}\n+\n+impl BooleanComparison {\n\nReview comment:\n       As you can probably guess given PRs like https://github.com/apache/arrow/pull/9278 my preference to avoid repeating the structure walking logic is via a Visitor. Perhaps after this PR is merged, I can take a shot at rewriting it using a general `ExprRewriter` type pattern. \n\n##########\nFile path: rust/datafusion/src/optimizer/boolean_comparison.rs\n##########\n@@ -0,0 +1,270 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Boolean comparision rule rewrites redudant comparison expression involing boolean literal into\n+//! unary expression.\n+\n+use std::sync::Arc;\n+\n+use crate::error::Result;\n+use crate::logical_plan::{Expr, LogicalPlan, Operator};\n+use crate::optimizer::optimizer::OptimizerRule;\n+use crate::optimizer::utils;\n+use crate::scalar::ScalarValue;\n+\n+/// Optimizer that simplifies comparison expressions involving boolean literals.\n+///\n+/// Recursively go through all expressionss and simplify the following cases:\n+/// * `expr = ture` to `expr`\n+/// * `expr = false` to `!expr`\n+pub struct BooleanComparison {}\n+\n+impl BooleanComparison {\n\nReview comment:\n       @Dandandan  -- I think this PR as written is quite efficient and doesn't need a convergence loop as you suggest (which I think ends up potentially being quite inefficient if many rewrites are required) -- it already does a depth first traversal of the tree, simplifying on the way up. \r\n   \r\n   I think convergence loops might be best used if we have several rules that can each potentially make changes that would unlock additional optimizations of the others\r\n   \r\n   For example, if you had two different optimization functions like `optimization_A` and `optimization_B` but parts of `optimization_A` wouldn't be applied unless you ran `optimization_B`. In that case a loop like the following would let you take full advantage of that\r\n   \r\n   ```\r\n   while !changed {\r\n     let exprA = optimization_A(expr);\r\n     let exprB = optimization_B(exprA);\r\n     changed = expr != exprB;\r\n     expr = exprB\r\n   }\r\n   ```\r\n   \n\n##########\nFile path: rust/datafusion/src/optimizer/boolean_comparison.rs\n##########\n@@ -0,0 +1,270 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Boolean comparision rule rewrites redudant comparison expression involing boolean literal into\n+//! unary expression.\n+\n+use std::sync::Arc;\n+\n+use crate::error::Result;\n+use crate::logical_plan::{Expr, LogicalPlan, Operator};\n+use crate::optimizer::optimizer::OptimizerRule;\n+use crate::optimizer::utils;\n+use crate::scalar::ScalarValue;\n+\n+/// Optimizer that simplifies comparison expressions involving boolean literals.\n+///\n+/// Recursively go through all expressionss and simplify the following cases:\n+/// * `expr = ture` to `expr`\n+/// * `expr = false` to `!expr`\n+pub struct BooleanComparison {}\n+\n+impl BooleanComparison {\n+    #[allow(missing_docs)]\n+    pub fn new() -> Self {\n+        Self {}\n+    }\n+}\n+\n+impl OptimizerRule for BooleanComparison {\n+    fn optimize(&mut self, plan: &LogicalPlan) -> Result<LogicalPlan> {\n+        match plan {\n+            LogicalPlan::Filter { predicate, input } => Ok(LogicalPlan::Filter {\n+                predicate: optimize_expr(predicate),\n+                input: Arc::new(self.optimize(input)?),\n+            }),\n+            // Rest: recurse into plan, apply optimization where possible\n+            LogicalPlan::Projection { .. }\n+            | LogicalPlan::Aggregate { .. }\n+            | LogicalPlan::Limit { .. }\n+            | LogicalPlan::Repartition { .. }\n+            | LogicalPlan::CreateExternalTable { .. }\n+            | LogicalPlan::Extension { .. }\n+            | LogicalPlan::Sort { .. }\n+            | LogicalPlan::Explain { .. }\n+            | LogicalPlan::Join { .. } => {\n+                let expr = utils::expressions(plan);\n+\n+                // apply the optimization to all inputs of the plan\n+                let inputs = utils::inputs(plan);\n+                let new_inputs = inputs\n+                    .iter()\n+                    .map(|plan| self.optimize(plan))\n+                    .collect::<Result<Vec<_>>>()?;\n+\n+                utils::from_plan(plan, &expr, &new_inputs)\n+            }\n+            LogicalPlan::TableScan { .. } | LogicalPlan::EmptyRelation { .. } => {\n+                Ok(plan.clone())\n+            }\n+        }\n+    }\n+\n+    fn name(&self) -> &str {\n+        \"boolean_comparison\"\n+    }\n+}\n+\n+/// Recursively transverses the logical plan.\n+fn optimize_expr(e: &Expr) -> Expr {\n+    match e {\n+        Expr::BinaryExpr { left, op, right } => {\n+            let left = optimize_expr(left);\n+            let right = optimize_expr(right);\n+            match op {\n+                Operator::Eq => match (&left, &right) {\n+                    (Expr::Literal(ScalarValue::Boolean(b)), _) => match b {\n+                        Some(true) => right,\n+                        Some(false) | None => Expr::Not(Box::new(right)),\n+                    },\n+                    (_, Expr::Literal(ScalarValue::Boolean(b))) => match b {\n+                        Some(true) => left,\n+                        Some(false) | None => Expr::Not(Box::new(left)),\n+                    },\n+                    _ => Expr::BinaryExpr {\n+                        left: Box::new(left),\n+                        op: Operator::Eq,\n+                        right: Box::new(right),\n+                    },\n+                },\n+                Operator::NotEq => match (&left, &right) {\n+                    (Expr::Literal(ScalarValue::Boolean(b)), _) => match b {\n+                        Some(false) | None => right,\n+                        Some(true) => Expr::Not(Box::new(right)),\n+                    },\n+                    (_, Expr::Literal(ScalarValue::Boolean(b))) => match b {\n+                        Some(false) | None => left,\n+                        Some(true) => Expr::Not(Box::new(left)),\n+                    },\n+                    _ => Expr::BinaryExpr {\n+                        left: Box::new(left),\n+                        op: Operator::NotEq,\n+                        right: Box::new(right),\n+                    },\n+                },\n+                _ => Expr::BinaryExpr {\n+                    left: Box::new(left),\n+                    op: op.clone(),\n+                    right: Box::new(right),\n+                },\n+            }\n+        }\n+        Expr::Not(expr) => Expr::Not(Box::new(optimize_expr(&expr))),\n+        Expr::Case {\n+            expr,\n+            when_then_expr,\n+            else_expr,\n+        } => {\n+            if expr.is_none() {\n+                // recurse into CASE WHEN condition expressions\n+                Expr::Case {\n+                    expr: None,\n+                    when_then_expr: when_then_expr\n+                        .iter()\n+                        .map(|(when, then)| (Box::new(optimize_expr(when)), then.clone()))\n+                        .collect(),\n+                    else_expr: else_expr.clone(),\n\nReview comment:\n       I think you could also apply `optimize_expr` to then and else_expr:\r\n   \r\n   ```suggestion\r\n                           .map(|(when, then)| (Box::new(optimize_expr(when)), optimize_expr(then))\r\n                           .collect(),\r\n                       else_expr: optimize_expr(else_expr),\r\n   ```\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-26T11:36:13.516+0000",
                    "updated": "2021-01-26T11:36:13.516+0000",
                    "started": "2021-01-26T11:36:13.516+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "542133",
                    "issueId": "13354213"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13354213/worklog/542139",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Dandandan commented on a change in pull request #9309:\nURL: https://github.com/apache/arrow/pull/9309#discussion_r564458819\n\n\n\n##########\nFile path: rust/datafusion/src/optimizer/boolean_comparison.rs\n##########\n@@ -0,0 +1,270 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Boolean comparision rule rewrites redudant comparison expression involing boolean literal into\n+//! unary expression.\n+\n+use std::sync::Arc;\n+\n+use crate::error::Result;\n+use crate::logical_plan::{Expr, LogicalPlan, Operator};\n+use crate::optimizer::optimizer::OptimizerRule;\n+use crate::optimizer::utils;\n+use crate::scalar::ScalarValue;\n+\n+/// Optimizer that simplifies comparison expressions involving boolean literals.\n+///\n+/// Recursively go through all expressionss and simplify the following cases:\n+/// * `expr = ture` to `expr`\n+/// * `expr = false` to `!expr`\n+pub struct BooleanComparison {}\n+\n+impl BooleanComparison {\n\nReview comment:\n       :+1: Yes, agreed this ATM doesn't need a loop as there is no interaction yet with other rules. But I guess once you'll add them you will need it if you want to combine it with other rules. Using `expr != exprB` for `changed` might be a good way to start. The main thing I want to stress is that at some point we don't want the recursion itself in a rule, but in a more general \"optimization framework\".\r\n   \r\n   The optimization loop itself can be written in such a way it does both top down and bottom up replacements, applying the same rule while the optimization \"generates\" a replacement for the node, so it doesn't need multiple traversals for cases like you mention. The concept is here in polars\r\n   https://github.com/ritchie46/polars/blob/master/polars/polars-lazy/src/logical_plan/optimizer/mod.rs#L69\r\n   \r\n   And sounds like a perfect candidate to try for `ExprRewriter` :+1: \n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-26T12:01:26.284+0000",
                    "updated": "2021-01-26T12:01:26.284+0000",
                    "started": "2021-01-26T12:01:26.283+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "542139",
                    "issueId": "13354213"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13354213/worklog/542141",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Dandandan commented on a change in pull request #9309:\nURL: https://github.com/apache/arrow/pull/9309#discussion_r564293129\n\n\n\n##########\nFile path: rust/datafusion/src/optimizer/boolean_comparison.rs\n##########\n@@ -0,0 +1,270 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Boolean comparision rule rewrites redudant comparison expression involing boolean literal into\n+//! unary expression.\n+\n+use std::sync::Arc;\n+\n+use crate::error::Result;\n+use crate::logical_plan::{Expr, LogicalPlan, Operator};\n+use crate::optimizer::optimizer::OptimizerRule;\n+use crate::optimizer::utils;\n+use crate::scalar::ScalarValue;\n+\n+/// Optimizer that simplifies comparison expressions involving boolean literals.\n+///\n+/// Recursively go through all expressionss and simplify the following cases:\n+/// * `expr = ture` to `expr`\n+/// * `expr = false` to `!expr`\n+pub struct BooleanComparison {}\n+\n+impl BooleanComparison {\n\nReview comment:\n       I think we could make this optimizer a bit more generic (not necessary in this PR) to split recursion / pattern match\r\n   \r\n   This is the more \"optimizer framework\" I had in mind in the comment on the roadmap\r\n   @alamb @jorgecarleitao @vertexclique .\r\n   \r\n   A common strategy (used by Spark) for rule / replacement based  to have a loop that just does something like this:\r\n   \r\n   ```rust\r\n   let changed = False;\r\n   \r\n   while !changed {\r\n       (logical_plan, changed)  = apply_optimizations(rules, logical_plan);\r\n   }\r\n   ```\r\n   \r\n   A rule could be something like (returning `Some` on replaced output) and doesn't need the boilerplate of recursion for every rule.\r\n   \r\n   ```rust\r\n   // Optimizer can work both on expr and logical plans, default returns `None`\r\n   impl OptimizerRule for BooleanComparison {\r\n      fn optimize_expr(&mut self, plan: &Expr) -> Option<Expr> {\r\n          match e {\r\n                Expr::BinaryExpr { left, op, right } => {\r\n               let left = optimize_expr(left);\r\n               let right = optimize_expr(right);\r\n               match op {\r\n                   Operator::Eq => match (&left, &right) {\r\n                       (Expr::Literal(ScalarValue::Boolean(b)), _) => match b {\r\n                           Some(true) => Some(right),\r\n                           Some(false) | None => Some(Expr::Not(Box::new(right))),\r\n                       },\r\n                       (_, Expr::Literal(ScalarValue::Boolean(b))) => match b {\r\n                           Some(true) => Some(left),\r\n                           Some(false) | None => Some(Expr::Not(Box::new(left))),\r\n                       },\r\n                       _ => None,\r\n                   },\r\n                   Operator::NotEq => match (&left, &right) {\r\n                       (Expr::Literal(ScalarValue::Boolean(b)), _) => match b {\r\n                           Some(false) | None => Some(right),\r\n                           Some(true) => Some(Expr::Not(Box::new(right))),\r\n                       },\r\n                       (_, Expr::Literal(ScalarValue::Boolean(b))) => match b {\r\n                           Some(false) | None => Some(left),\r\n                           Some(true) => Some(Expr::Not(Box::new(left))),\r\n                       },\r\n                       _ => None,\r\n                   },\r\n                   _ => None\r\n               }\r\n           }\r\n          }\r\n      }\r\n   }\r\n   \r\n   ```\r\n       \n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-26T12:05:25.340+0000",
                    "updated": "2021-01-26T12:05:25.340+0000",
                    "started": "2021-01-26T12:05:25.340+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "542141",
                    "issueId": "13354213"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/3",
            "id": "3",
            "description": "A task that needs to be done.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21148&avatarType=issuetype",
            "name": "Task",
            "subtask": false,
            "avatarId": 21148
        },
        "timespent": 31800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@266f83ff[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7693bd0c[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5bb679b2[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@3026d415[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5ccd8a6b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@3e23d7ad[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@56b05232[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@50b0a28d[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@601ef422[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@4020c933[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@14d522c7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@41245e1a[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 31800,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Feb 17 16:41:49 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-02-17T16:41:49.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-11366/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2021-01-24T23:32:09.000+0000",
        "updated": "2021-02-17T16:42:24.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "8h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 31800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Rust][DataFusion] Add Constant Folding / Support boolean literal in equality expression",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13354213/comment/17285964",
                    "id": "17285964",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=alamb",
                        "name": "alamb",
                        "key": "alamb",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=alamb&avatarId=43364",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alamb&avatarId=43364",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alamb&avatarId=43364",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alamb&avatarId=43364"
                        },
                        "displayName": "Andrew Lamb",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 9309\n[https://github.com/apache/arrow/pull/9309]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=alamb",
                        "name": "alamb",
                        "key": "alamb",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=alamb&avatarId=43364",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alamb&avatarId=43364",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alamb&avatarId=43364",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alamb&avatarId=43364"
                        },
                        "displayName": "Andrew Lamb",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-02-17T16:41:49.193+0000",
                    "updated": "2021-02-17T16:41:49.193+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0mx80:",
        "customfield_12314139": null
    }
}