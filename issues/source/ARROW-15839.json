{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13431783",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13431783",
    "key": "ARROW-15839",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351947",
                "id": "12351947",
                "description": "",
                "name": "10.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-10-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "good-second-issue",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12350591",
                "id": "12350591",
                "description": "",
                "name": "7.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-02-03"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=milesgranger",
            "name": "milesgranger",
            "key": "JIRAUSER293894",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34052",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34052",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34052",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34052"
            },
            "displayName": "Miles Granger",
            "active": true,
            "timeZone": "Europe/Oslo"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328936",
                "id": "12328936",
                "name": "Python"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=lhoestq",
            "name": "lhoestq",
            "key": "lhoestq",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "quentin lhoest",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=lhoestq",
            "name": "lhoestq",
            "key": "lhoestq",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "quentin lhoest",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 15000,
            "total": 15000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 15000,
            "total": 15000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-15839/votes",
            "votes": 1,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 25,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13431783/worklog/800913",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "milesgranger opened a new pull request, #13894:\nURL: https://github.com/apache/arrow/pull/13894\n\n   Will close [ARROW-15839](https://issues.apache.org/jira/browse/ARROW-15839)\r\n   \r\n   This will allow proper nulls in place of what is presently empty lists (on top level) when no mask is passed.\r\n   \r\n   ```python\r\n   import pyarrow as pa\r\n   \r\n   arr = pa.array([None, [0]])\r\n   reconstructed_arr = pa.ListArray.from_arrays(arr.offsets, arr.values, mask=arr.is_null())\r\n   print(reconstructed_arr.to_pylist())\r\n   # [None, [0]] \r\n   # Currently it doesn't accept `mask` and results in `[[], [0]]` unless explicit offsets set\r\n   ```\r\n   \r\n   There was also discussion with @jorisvandenbossche about renaming the added `null_bitmap` to `validity_bitmap`; but this will deviate from [existing `null_bitmap` use in the same area of code](https://github.com/apache/arrow/blob/d880d7517a33f2ac8ff259cad711bc210fd570c5/cpp/src/arrow/array/array_nested.h#L113). Should I change those names now or in a later PR/issue to standardize the `null_bitmap` / `validity_buf` naming?\n\n\n",
                    "created": "2022-08-16T11:32:20.305+0000",
                    "updated": "2022-08-16T11:32:20.305+0000",
                    "started": "2022-08-16T11:32:20.305+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "800913",
                    "issueId": "13431783"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13431783/worklog/800920",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on PR #13894:\nURL: https://github.com/apache/arrow/pull/13894#issuecomment-1216522382\n\n   Given that all the existing functions in array_nested.cc use `null_bitmap`, let's certainly be consistent with that (in general it seems that we typically use `null_bitmap` internally in the code, although we use \"validity bitmap\" in the format docs)\n\n\n",
                    "created": "2022-08-16T11:43:19.768+0000",
                    "updated": "2022-08-16T11:43:19.768+0000",
                    "started": "2022-08-16T11:43:19.768+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "800920",
                    "issueId": "13431783"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13431783/worklog/800921",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #13894:\nURL: https://github.com/apache/arrow/pull/13894#issuecomment-1216528449\n\n   https://issues.apache.org/jira/browse/ARROW-15839\n\n\n",
                    "created": "2022-08-16T11:48:49.351+0000",
                    "updated": "2022-08-16T11:48:49.351+0000",
                    "started": "2022-08-16T11:48:49.350+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "800921",
                    "issueId": "13431783"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13431783/worklog/800927",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on code in PR #13894:\nURL: https://github.com/apache/arrow/pull/13894#discussion_r946682571\n\n\n##########\ncpp/src/arrow/array/array_nested.cc:\n##########\n@@ -116,14 +117,20 @@ Result<std::shared_ptr<typename TypeTraits<TYPE>::ArrayType>> ListArrayFromArray\n     return Status::TypeError(\"List offsets must be \", OffsetArrowType::type_name());\n   }\n \n+  if (null_bitmap != NULLPTR && offsets.null_count() > 0) {\n\nReview Comment:\n   ```suggestion\r\n     if (null_bitmap != nullptr && offsets.null_count() > 0) {\r\n   ```\r\n   \r\n   (to be consistent in style)\n\n\n\n##########\ncpp/src/arrow/array/array_nested.h:\n##########\n@@ -127,11 +127,15 @@ class ARROW_EXPORT ListArray : public BaseListArray<ListType> {\n   /// allocated because of null values\n   static Result<std::shared_ptr<ListArray>> FromArrays(\n       const Array& offsets, const Array& values,\n-      MemoryPool* pool = default_memory_pool());\n+      MemoryPool* pool = default_memory_pool(),\n+      int64_t null_count = -1,\n+      std::shared_ptr<Buffer> null_bitmap = NULLPTR);\n\nReview Comment:\n   Small nit: it seems that existing functions here that support passing the bitmap typically have null_bitmap first and null_count second (also, they seem to use `kUnknownNullCount` instead of -1 explicitly, I don't know if that actually makes a difference for the compiler)\n\n\n\n##########\ncpp/src/arrow/array/array_nested.cc:\n##########\n@@ -116,14 +117,20 @@ Result<std::shared_ptr<typename TypeTraits<TYPE>::ArrayType>> ListArrayFromArray\n     return Status::TypeError(\"List offsets must be \", OffsetArrowType::type_name());\n   }\n \n+  if (null_bitmap != NULLPTR && offsets.null_count() > 0) {\n+    return Status::Invalid(\n+        \"Ambiguous to specify both validity map and offsets with nulls\");\n+  }\n+\n   std::shared_ptr<Buffer> offset_buf, validity_buf;\n   RETURN_NOT_OK(CleanListOffsets<TYPE>(offsets, pool, &offset_buf, &validity_buf));\n-  BufferVector buffers = {validity_buf, offset_buf};\n+  int64_t null_count_ = null_bitmap ? null_count : offsets.null_count();\n \n-  auto internal_data = ArrayData::Make(type, offsets.length() - 1, std::move(buffers),\n-                                       offsets.null_count(), offsets.offset());\n+  std::shared_ptr<arrow::ArrayData> internal_data = ArrayData::Make(\n+      type, offsets.length() - 1,\n+      BufferVector{null_bitmap ? std::move(null_bitmap) : validity_buf, offset_buf},\n\nReview Comment:\n   It might be more readable to move this if/else to where `buffers` gets defined (which actually no longer is used right now)\n\n\n\n##########\npython/pyarrow/array.pxi:\n##########\n@@ -2812,6 +2805,22 @@ cdef dict _array_classes = {\n }\n \n \n+cdef inline shared_ptr[CBuffer] c_mask_from_obj(object mask, MemoryPool pool) except *:\n\nReview Comment:\n   Maybe use \"inverted\" in the name of the function, so that when reading the code in `from_arrays`, you still have some notion about the fact that the mask gets inverted\n\n\n\n##########\npython/pyarrow/array.pxi:\n##########\n@@ -1890,7 +1890,7 @@ cdef class ListArray(BaseListArray):\n     \"\"\"\n \n     @staticmethod\n-    def from_arrays(offsets, values, DataType type=None, MemoryPool pool=None):\n+    def from_arrays(offsets, values, DataType type=None, MemoryPool pool=None, mask=None):\n\nReview Comment:\n   Can you also update the docstring for this?\n\n\n\n##########\npython/pyarrow/tests/test_array.py:\n##########\n@@ -3192,3 +3192,41 @@ def test_to_pandas_timezone():\n     arr = pa.chunked_array([arr])\n     s = arr.to_pandas()\n     assert s.dt.tz is not None\n+\n+\n+@pytest.mark.parametrize(\"arr\", (\n+    [None, [0]],\n+    [None, [0, None], [0]],\n+    [[0], [1]],\n+)\n+)\n+def test_list_array_from_arrays(arr):\n\nReview Comment:\n   There is already an existing `test_list_from_arrays` test, can you maybe move this one to just after the existing one? (to keep related tests close)\n\n\n\n",
                    "created": "2022-08-16T12:02:46.398+0000",
                    "updated": "2022-08-16T12:02:46.398+0000",
                    "started": "2022-08-16T12:02:46.398+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "800927",
                    "issueId": "13431783"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13431783/worklog/800945",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "milesgranger commented on code in PR #13894:\nURL: https://github.com/apache/arrow/pull/13894#discussion_r946738274\n\n\n##########\ncpp/src/arrow/array/array_nested.h:\n##########\n@@ -127,11 +127,15 @@ class ARROW_EXPORT ListArray : public BaseListArray<ListType> {\n   /// allocated because of null values\n   static Result<std::shared_ptr<ListArray>> FromArrays(\n       const Array& offsets, const Array& values,\n-      MemoryPool* pool = default_memory_pool());\n+      MemoryPool* pool = default_memory_pool(),\n+      int64_t null_count = -1,\n+      std::shared_ptr<Buffer> null_bitmap = NULLPTR);\n\nReview Comment:\n   Good point. I noticed the ordering part, but thought placing it after memory pool would lead to less API breakage since the two added have defaults. Maybe it's better to have parameter order consistent. \ud83d\udc4d \n\n\n\n",
                    "created": "2022-08-16T12:52:49.916+0000",
                    "updated": "2022-08-16T12:52:49.916+0000",
                    "started": "2022-08-16T12:52:49.916+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "800945",
                    "issueId": "13431783"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13431783/worklog/800946",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "milesgranger commented on code in PR #13894:\nURL: https://github.com/apache/arrow/pull/13894#discussion_r946738274\n\n\n##########\ncpp/src/arrow/array/array_nested.h:\n##########\n@@ -127,11 +127,15 @@ class ARROW_EXPORT ListArray : public BaseListArray<ListType> {\n   /// allocated because of null values\n   static Result<std::shared_ptr<ListArray>> FromArrays(\n       const Array& offsets, const Array& values,\n-      MemoryPool* pool = default_memory_pool());\n+      MemoryPool* pool = default_memory_pool(),\n+      int64_t null_count = -1,\n+      std::shared_ptr<Buffer> null_bitmap = NULLPTR);\n\nReview Comment:\n   Good point. I noticed the ordering part, but thought placing it after memory pool would lead to less API breakage since the two added have defaults. But inclined to agree, maybe it's better to have parameter order consistent. \ud83d\udc4d \n\n\n\n",
                    "created": "2022-08-16T12:54:50.040+0000",
                    "updated": "2022-08-16T12:54:50.040+0000",
                    "started": "2022-08-16T12:54:50.039+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "800946",
                    "issueId": "13431783"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13431783/worklog/800957",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "milesgranger commented on code in PR #13894:\nURL: https://github.com/apache/arrow/pull/13894#discussion_r946738274\n\n\n##########\ncpp/src/arrow/array/array_nested.h:\n##########\n@@ -127,11 +127,15 @@ class ARROW_EXPORT ListArray : public BaseListArray<ListType> {\n   /// allocated because of null values\n   static Result<std::shared_ptr<ListArray>> FromArrays(\n       const Array& offsets, const Array& values,\n-      MemoryPool* pool = default_memory_pool());\n+      MemoryPool* pool = default_memory_pool(),\n+      int64_t null_count = -1,\n+      std::shared_ptr<Buffer> null_bitmap = NULLPTR);\n\nReview Comment:\n   Good point. ~I noticed the ordering part, but thought placing it after memory pool would lead to less API breakage since the two added have defaults. But inclined to agree, maybe it's better to have parameter order consistent. \ud83d\udc4d~ I misread your comment.. :) \n\n\n\n",
                    "created": "2022-08-16T13:47:54.764+0000",
                    "updated": "2022-08-16T13:47:54.764+0000",
                    "started": "2022-08-16T13:47:54.763+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "800957",
                    "issueId": "13431783"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13431783/worklog/802897",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #13894:\nURL: https://github.com/apache/arrow/pull/13894#discussion_r952721077\n\n\n##########\npython/pyarrow/array.pxi:\n##########\n@@ -1943,21 +1944,24 @@ cdef class ListArray(BaseListArray):\n         cdef:\n             Array _offsets, _values\n             shared_ptr[CArray] out\n+            shared_ptr[CBuffer] c_mask\n         cdef CMemoryPool* cpool = maybe_unbox_memory_pool(pool)\n \n         _offsets = asarray(offsets, type='int32')\n         _values = asarray(values)\n \n+        c_mask = c_mask_inverted_from_obj(mask, pool)\n+\n         if type is not None:\n             with nogil:\n                 out = GetResultValue(\n                     CListArray.FromArraysAndType(\n-                        type.sp_type, _offsets.ap[0], _values.ap[0], cpool))\n+                        type.sp_type, _offsets.ap[0], _values.ap[0], cpool, c_mask, -1))\n\nReview Comment:\n   IMHO it would be less kludgy if we didn't pass -1 explicitly.\n\n\n\n##########\ncpp/src/arrow/array/array_nested.h:\n##########\n@@ -125,13 +125,19 @@ class ARROW_EXPORT ListArray : public BaseListArray<ListType> {\n   /// \\param[in] values Array containing list values\n   /// \\param[in] pool MemoryPool in case new offsets array needs to be\n\nReview Comment:\n   Please mention above that either a offsets Array's null bitmap can be present or an explicit null_bitmap, but not both.\n\n\n\n##########\ncpp/src/arrow/array/array_nested.h:\n##########\n@@ -125,13 +125,19 @@ class ARROW_EXPORT ListArray : public BaseListArray<ListType> {\n   /// \\param[in] values Array containing list values\n   /// \\param[in] pool MemoryPool in case new offsets array needs to be\n   /// allocated because of null values\n+  /// \\param[in] null_bitmap Array of valid and null values,\n+  /// where 0 represents null and 1 represents valid.\n+  /// \\param[in] null_count Count of null values\n   static Result<std::shared_ptr<ListArray>> FromArrays(\n-      const Array& offsets, const Array& values,\n-      MemoryPool* pool = default_memory_pool());\n+      const Array& offsets, const Array& values, MemoryPool* pool = default_memory_pool(),\n+      std::shared_ptr<Buffer> null_bitmap = NULLPTR,\n+      int64_t null_count = kUnknownNullCount);\n \n   static Result<std::shared_ptr<ListArray>> FromArrays(\n       std::shared_ptr<DataType> type, const Array& offsets, const Array& values,\n-      MemoryPool* pool = default_memory_pool());\n+      MemoryPool* pool = default_memory_pool(),\n+      std::shared_ptr<Buffer> null_bitmap = NULLPTR,\n+      int64_t null_count = kUnknownNullCount);\n \n\nReview Comment:\n   Also, should similar changes be done for `LargeListArray`?\n\n\n\n##########\npython/pyarrow/array.pxi:\n##########\n@@ -2812,6 +2806,25 @@ cdef dict _array_classes = {\n }\n \n \n+cdef inline shared_ptr[CBuffer] c_mask_inverted_from_obj(object mask, MemoryPool pool) except *:\n+    \"\"\"\n+    Convert mask array obj to c_mask while also inverting to signify 1 for valid and 0 for null\n+    \"\"\"\n+    cdef shared_ptr[CBuffer] c_mask\n+    if mask is None:\n+        c_mask = shared_ptr[CBuffer]()\n+    elif isinstance(mask, Array):\n+        if mask.type.id != Type_BOOL:\n+            raise ValueError('Mask must be a pyarrow.Array of type bool')\n\nReview Comment:\n   I'd rather use \"boolean\" as \"bool\" can be confused with the Python `bool` type.\n\n\n\n##########\npython/pyarrow/array.pxi:\n##########\n@@ -2812,6 +2806,25 @@ cdef dict _array_classes = {\n }\n \n \n+cdef inline shared_ptr[CBuffer] c_mask_inverted_from_obj(object mask, MemoryPool pool) except *:\n+    \"\"\"\n+    Convert mask array obj to c_mask while also inverting to signify 1 for valid and 0 for null\n+    \"\"\"\n+    cdef shared_ptr[CBuffer] c_mask\n+    if mask is None:\n+        c_mask = shared_ptr[CBuffer]()\n+    elif isinstance(mask, Array):\n+        if mask.type.id != Type_BOOL:\n+            raise ValueError('Mask must be a pyarrow.Array of type bool')\n\nReview Comment:\n   Also let's use `TypeError` here.\n\n\n\n##########\npython/pyarrow/array.pxi:\n##########\n@@ -2812,6 +2806,25 @@ cdef dict _array_classes = {\n }\n \n \n+cdef inline shared_ptr[CBuffer] c_mask_inverted_from_obj(object mask, MemoryPool pool) except *:\n+    \"\"\"\n+    Convert mask array obj to c_mask while also inverting to signify 1 for valid and 0 for null\n+    \"\"\"\n+    cdef shared_ptr[CBuffer] c_mask\n+    if mask is None:\n+        c_mask = shared_ptr[CBuffer]()\n+    elif isinstance(mask, Array):\n+        if mask.type.id != Type_BOOL:\n+            raise ValueError('Mask must be a pyarrow.Array of type bool')\n+        if mask.null_count != 0:\n+            raise ValueError('Mask must not contain nulls')\n+        inverted_mask = _pc().invert(mask, memory_pool=pool)\n+        c_mask = pyarrow_unwrap_buffer(inverted_mask.buffers()[1])\n+    else:\n+        raise ValueError('Mask must be a pyarrow.Array of type bool')\n\nReview Comment:\n   Definitely should be `TypeError` here.\n\n\n\n##########\ncpp/src/arrow/array/array_nested.h:\n##########\n@@ -125,13 +125,19 @@ class ARROW_EXPORT ListArray : public BaseListArray<ListType> {\n   /// \\param[in] values Array containing list values\n   /// \\param[in] pool MemoryPool in case new offsets array needs to be\n   /// allocated because of null values\n+  /// \\param[in] null_bitmap Array of valid and null values,\n+  /// where 0 represents null and 1 represents valid.\n+  /// \\param[in] null_count Count of null values\n\nReview Comment:\n   ```suggestion\r\n     /// \\param[in] null_bitmap Optional validity bitmap\r\n     /// \\param[in] null_count Optional null count in null_bitmap\r\n   ```\n\n\n\n",
                    "created": "2022-08-23T14:47:37.379+0000",
                    "updated": "2022-08-23T14:47:37.379+0000",
                    "started": "2022-08-23T14:47:37.378+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "802897",
                    "issueId": "13431783"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13431783/worklog/803529",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "milesgranger commented on PR #13894:\nURL: https://github.com/apache/arrow/pull/13894#issuecomment-1227004903\n\n   @pitrou Ready for another round at your leisure; I think the failures are not related. C++ failing on TestArrowReaderAdHoc.OldDataPageV2 which is failing in another recent C++ PR.\n\n\n",
                    "created": "2022-08-25T09:19:32.177+0000",
                    "updated": "2022-08-25T09:19:32.177+0000",
                    "started": "2022-08-25T09:19:32.177+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "803529",
                    "issueId": "13431783"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13431783/worklog/803530",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on PR #13894:\nURL: https://github.com/apache/arrow/pull/13894#issuecomment-1227006325\n\n   > C++ failing on TestArrowReaderAdHoc.OldDataPageV2 which is failing in another recent C++ PR.\r\n   \r\n   Yes, that should be fixed by rebasing/merging.\n\n\n",
                    "created": "2022-08-25T09:20:49.681+0000",
                    "updated": "2022-08-25T09:20:49.681+0000",
                    "started": "2022-08-25T09:20:49.681+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "803530",
                    "issueId": "13431783"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13431783/worklog/803531",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "milesgranger commented on code in PR #13894:\nURL: https://github.com/apache/arrow/pull/13894#discussion_r954728211\n\n\n##########\ncpp/src/arrow/array/array_nested.h:\n##########\n@@ -125,13 +125,19 @@ class ARROW_EXPORT ListArray : public BaseListArray<ListType> {\n   /// \\param[in] values Array containing list values\n   /// \\param[in] pool MemoryPool in case new offsets array needs to be\n   /// allocated because of null values\n+  /// \\param[in] null_bitmap Array of valid and null values,\n+  /// where 0 represents null and 1 represents valid.\n+  /// \\param[in] null_count Count of null values\n   static Result<std::shared_ptr<ListArray>> FromArrays(\n-      const Array& offsets, const Array& values,\n-      MemoryPool* pool = default_memory_pool());\n+      const Array& offsets, const Array& values, MemoryPool* pool = default_memory_pool(),\n+      std::shared_ptr<Buffer> null_bitmap = NULLPTR,\n+      int64_t null_count = kUnknownNullCount);\n \n   static Result<std::shared_ptr<ListArray>> FromArrays(\n       std::shared_ptr<DataType> type, const Array& offsets, const Array& values,\n-      MemoryPool* pool = default_memory_pool());\n+      MemoryPool* pool = default_memory_pool(),\n+      std::shared_ptr<Buffer> null_bitmap = NULLPTR,\n+      int64_t null_count = kUnknownNullCount);\n \n\nReview Comment:\n   Makes sense, couldn't get the unit tests in cpp to pass without it anyway. :) https://github.com/apache/arrow/pull/13894/commits/819f0c17e5cf412c944165d0a8b2b495967f0970\n\n\n\n",
                    "created": "2022-08-25T09:20:57.695+0000",
                    "updated": "2022-08-25T09:20:57.695+0000",
                    "started": "2022-08-25T09:20:57.695+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "803531",
                    "issueId": "13431783"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13431783/worklog/803691",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #13894:\nURL: https://github.com/apache/arrow/pull/13894#discussion_r955108267\n\n\n##########\npython/pyarrow/array.pxi:\n##########\n@@ -2004,7 +2008,7 @@ cdef class LargeListArray(BaseListArray):\n     \"\"\"\n \n     @staticmethod\n-    def from_arrays(offsets, values, DataType type=None, MemoryPool pool=None):\n+    def from_arrays(offsets, values, DataType type=None, MemoryPool pool=None, mask=None):\n         \"\"\"\n         Construct LargeListArray from arrays of int64 offsets and values.\n\nReview Comment:\n   Here as well, the docstring should be updated for the new argument.\n\n\n\n##########\ncpp/src/arrow/array/array_list_test.cc:\n##########\n@@ -197,6 +197,37 @@ class TestListArray : public ::testing::Test {\n     EXPECT_FALSE(left->Slice(offset)->Equals(right->Slice(offset)));\n   }\n \n+  void TestFromArraysWithNullBitMap() {\n+    std::shared_ptr<Array> offsets_w_nulls, offsets_wo_nulls, values;\n+\n+    std::vector<offset_type> offsets = {0, 1, 1, 3, 4};\n+\n+    std::vector<bool> offsets_w_nulls_flags = {true, false, true, true, true};\n+    std::vector<bool> offsets_wo_nulls_flags = {true, true, true, true, true};\n+\n+    std::vector<int32_t> null_bitmap_values = {1, 0, 1, 1};\n+    std::shared_ptr<Buffer> null_bitmap = Buffer::Wrap(null_bitmap_values);\n+\n+    ArrayFromVector<OffsetType, offset_type>(offsets_w_nulls_flags, offsets,\n+                                             &offsets_w_nulls);\n+    ArrayFromVector<OffsetType, offset_type>(offsets_wo_nulls_flags, offsets,\n+                                             &offsets_wo_nulls);\n+\n+    auto type = std::make_shared<T>(int32());\n+    auto expected = std::dynamic_pointer_cast<ArrayType>(\n+        ArrayFromJSON(type, \"[[0], null, [0, null], [0]]\"));\n+\n+    values = expected->values();\n+\n+    ASSERT_OK(ArrayType::FromArrays(*offsets_w_nulls, *values, pool_));\n+    ASSERT_OK(ArrayType::FromArrays(*offsets_wo_nulls, *values, pool_));\n\nReview Comment:\n   Ok, but can we also test the array that was just created? See `TestFromArrays` below for use of `ValidateFull` and `AssertArraysEqual`.\r\n   \n\n\n\n##########\npython/pyarrow/tests/test_array.py:\n##########\n@@ -919,6 +919,53 @@ def test_list_from_arrays(list_array_type, list_type_factory):\n         list_array_type.from_arrays(offsets, values, type=typ)\n \n \n+@pytest.mark.parametrize(('list_array_type', 'list_type_factory'), (\n+    (pa.ListArray, pa.list_),\n+    (pa.LargeListArray, pa.large_list)\n+))\n+@pytest.mark.parametrize(\"arr\", (\n+    [None, [0]],\n+    [None, [0, None], [0]],\n+    [[0], [1]],\n+))\n+def test_list_array_types_from_arrays(\n+    list_array_type, list_type_factory, arr\n+):\n+    arr = pa.array(arr, list_type_factory(pa.int8()))\n+    reconstructed_arr = list_array_type.from_arrays(\n+        arr.offsets, arr.values, mask=arr.is_null())\n+    assert arr == reconstructed_arr\n\nReview Comment:\n   I'm curious, does it work if the array is sliced? e.g.:\r\n   ```suggestion\r\n       assert arr == reconstructed_arr\r\n       arr = arr[1:]\r\n       reconstructed_arr = list_array_type.from_arrays(\r\n           arr.offsets, arr.values, mask=arr.is_null())\r\n       assert arr == reconstructed_arr\r\n   ```\n\n\n\n##########\ncpp/src/arrow/array/array_list_test.cc:\n##########\n@@ -197,6 +197,37 @@ class TestListArray : public ::testing::Test {\n     EXPECT_FALSE(left->Slice(offset)->Equals(right->Slice(offset)));\n   }\n \n+  void TestFromArraysWithNullBitMap() {\n+    std::shared_ptr<Array> offsets_w_nulls, offsets_wo_nulls, values;\n+\n+    std::vector<offset_type> offsets = {0, 1, 1, 3, 4};\n+\n+    std::vector<bool> offsets_w_nulls_flags = {true, false, true, true, true};\n+    std::vector<bool> offsets_wo_nulls_flags = {true, true, true, true, true};\n+\n+    std::vector<int32_t> null_bitmap_values = {1, 0, 1, 1};\n\nReview Comment:\n   I guess this is ok as an arbitrary null bitmap buffer, but for a 4-entries array this will be all ones, right?\n\n\n\n##########\ncpp/src/arrow/array/array_list_test.cc:\n##########\n@@ -197,6 +197,37 @@ class TestListArray : public ::testing::Test {\n     EXPECT_FALSE(left->Slice(offset)->Equals(right->Slice(offset)));\n   }\n \n+  void TestFromArraysWithNullBitMap() {\n+    std::shared_ptr<Array> offsets_w_nulls, offsets_wo_nulls, values;\n+\n+    std::vector<offset_type> offsets = {0, 1, 1, 3, 4};\n+\n+    std::vector<bool> offsets_w_nulls_flags = {true, false, true, true, true};\n+    std::vector<bool> offsets_wo_nulls_flags = {true, true, true, true, true};\n\nReview Comment:\n   I don't think this one is required, you can just call `ArrayFromVector` without a third argument.\n\n\n\n##########\npython/pyarrow/array.pxi:\n##########\n@@ -2812,6 +2810,25 @@ cdef dict _array_classes = {\n }\n \n \n+cdef inline shared_ptr[CBuffer] c_mask_inverted_from_obj(object mask, MemoryPool pool) except *:\n+    \"\"\"\n+    Convert mask array obj to c_mask while also inverting to signify 1 for valid and 0 for null\n+    \"\"\"\n+    cdef shared_ptr[CBuffer] c_mask\n+    if mask is None:\n+        c_mask = shared_ptr[CBuffer]()\n+    elif isinstance(mask, Array):\n+        if mask.type.id != Type_BOOL:\n+            raise TypeError('Mask must be a pyarrow.Array of type boolean')\n+        if mask.null_count != 0:\n+            raise ValueError('Mask must not contain nulls')\n+        inverted_mask = _pc().invert(mask, memory_pool=pool)\n+        c_mask = pyarrow_unwrap_buffer(inverted_mask.buffers()[1])\n+    else:\n+        raise TypeError('Mask must be a pyarrow.Array of type bool')\n\nReview Comment:\n   ```suggestion\r\n           raise TypeError('Mask must be a pyarrow.Array of type boolean')\r\n   ```\n\n\n\n##########\ncpp/src/arrow/array/array_list_test.cc:\n##########\n@@ -197,6 +197,37 @@ class TestListArray : public ::testing::Test {\n     EXPECT_FALSE(left->Slice(offset)->Equals(right->Slice(offset)));\n   }\n \n+  void TestFromArraysWithNullBitMap() {\n+    std::shared_ptr<Array> offsets_w_nulls, offsets_wo_nulls, values;\n+\n+    std::vector<offset_type> offsets = {0, 1, 1, 3, 4};\n+\n+    std::vector<bool> offsets_w_nulls_flags = {true, false, true, true, true};\n\nReview Comment:\n   The convention in other tests is to call this `xxx_is_valid`:\r\n   ```suggestion\r\n       std::vector<bool> offsets_w_nulls_is_valid = {true, false, true, true, true};\r\n   ```\n\n\n\n##########\npython/pyarrow/array.pxi:\n##########\n@@ -1902,6 +1902,7 @@ cdef class ListArray(BaseListArray):\n             If not specified, a default ListType with the values' type is\n             used.\n         pool : MemoryPool\n+        mask : Array (bool type)\n\nReview Comment:\n   I would spell it \"boolean\" (to avoid confusions with Python's `bool` type) and would also describe the argument a bit more:\r\n   ```suggestion\r\n           mask : Array (boolean type), optional\r\n               ... (fill this :-))\r\n   ```\n\n\n\n##########\ncpp/src/arrow/array/array_list_test.cc:\n##########\n@@ -539,6 +570,10 @@ TYPED_TEST(TestListArray, ValuesEquality) { this->TestValuesEquality(); }\n \n TYPED_TEST(TestListArray, FromArrays) { this->TestFromArrays(); }\n \n+TYPED_TEST(TestListArray, TestFromArraysWithNullBitMap) {\n\nReview Comment:\n   Nit :-)\r\n   ```suggestion\r\n   TYPED_TEST(TestListArray, FromArraysWithNullBitMap) {\r\n   ```\n\n\n\n##########\ncpp/src/arrow/array/array_nested.h:\n##########\n@@ -179,12 +187,15 @@ class ARROW_EXPORT LargeListArray : public BaseListArray<LargeListType> {\n   /// \\param[in] pool MemoryPool in case new offsets array needs to be\n\nReview Comment:\n   CI is complaining that you didn't document the new parameters here...\r\n   https://github.com/apache/arrow/runs/8012669293?check_suite_focus=true#step:6:2925\n\n\n\n",
                    "created": "2022-08-25T15:26:48.185+0000",
                    "updated": "2022-08-25T15:26:48.185+0000",
                    "started": "2022-08-25T15:26:48.185+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "803691",
                    "issueId": "13431783"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13431783/worklog/803895",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "milesgranger commented on code in PR #13894:\nURL: https://github.com/apache/arrow/pull/13894#discussion_r955899236\n\n\n##########\npython/pyarrow/tests/test_array.py:\n##########\n@@ -919,6 +919,53 @@ def test_list_from_arrays(list_array_type, list_type_factory):\n         list_array_type.from_arrays(offsets, values, type=typ)\n \n \n+@pytest.mark.parametrize(('list_array_type', 'list_type_factory'), (\n+    (pa.ListArray, pa.list_),\n+    (pa.LargeListArray, pa.large_list)\n+))\n+@pytest.mark.parametrize(\"arr\", (\n+    [None, [0]],\n+    [None, [0, None], [0]],\n+    [[0], [1]],\n+))\n+def test_list_array_types_from_arrays(\n+    list_array_type, list_type_factory, arr\n+):\n+    arr = pa.array(arr, list_type_factory(pa.int8()))\n+    reconstructed_arr = list_array_type.from_arrays(\n+        arr.offsets, arr.values, mask=arr.is_null())\n+    assert arr == reconstructed_arr\n\nReview Comment:\n   Doesn't appears so:\r\n   ```python\r\n   In [1]: import pyarrow as pa\r\n   In [2]: arr = pa.array([[0], None, [0, None], [0]], pa.list_(pa.int8()))\r\n   In [3]: arr = arr[1:]\r\n   In [4]: reconstructed_arr = pa.ListArray.from_arrays(arr.offsets, arr.values, mask=arr.is_null())\r\n   In [5]: arr == reconstructed_arr\r\n   Out[5]: False\r\n   In [6]: arr\r\n   Out[6]:\r\n   <pyarrow.lib.ListArray object at 0x7f85d8375e20>\r\n   [\r\n     null,\r\n     [\r\n       0,\r\n       null\r\n     ],\r\n     [\r\n       0\r\n     ]\r\n   ]\r\n   \r\n   In [7]: reconstructed_arr\r\n   Out[7]:\r\n   <pyarrow.lib.ListArray object at 0x7f85a031c580>\r\n   [\r\n     [],\r\n     [\r\n       0,\r\n       null\r\n     ],\r\n     null\r\n   ]\r\n   \r\n   In [8]:\r\n   ```\r\n   Maybe it's somewhat related to [ARROW-16174](https://issues.apache.org/jira/browse/ARROW-16174)?\n\n\n\n",
                    "created": "2022-08-26T10:22:51.643+0000",
                    "updated": "2022-08-26T10:22:51.643+0000",
                    "started": "2022-08-26T10:22:51.642+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "803895",
                    "issueId": "13431783"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13431783/worklog/803896",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "milesgranger commented on code in PR #13894:\nURL: https://github.com/apache/arrow/pull/13894#discussion_r955899787\n\n\n##########\ncpp/src/arrow/array/array_list_test.cc:\n##########\n@@ -197,6 +197,37 @@ class TestListArray : public ::testing::Test {\n     EXPECT_FALSE(left->Slice(offset)->Equals(right->Slice(offset)));\n   }\n \n+  void TestFromArraysWithNullBitMap() {\n+    std::shared_ptr<Array> offsets_w_nulls, offsets_wo_nulls, values;\n+\n+    std::vector<offset_type> offsets = {0, 1, 1, 3, 4};\n+\n+    std::vector<bool> offsets_w_nulls_flags = {true, false, true, true, true};\n+    std::vector<bool> offsets_wo_nulls_flags = {true, true, true, true, true};\n+\n+    std::vector<int32_t> null_bitmap_values = {1, 0, 1, 1};\n\nReview Comment:\n   Just removed it, realized I could just re-use the `expected->null_bitmap()`\n\n\n\n",
                    "created": "2022-08-26T10:23:31.695+0000",
                    "updated": "2022-08-26T10:23:31.695+0000",
                    "started": "2022-08-26T10:23:31.694+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "803896",
                    "issueId": "13431783"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13431783/worklog/803907",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on code in PR #13894:\nURL: https://github.com/apache/arrow/pull/13894#discussion_r955917621\n\n\n##########\npython/pyarrow/tests/test_array.py:\n##########\n@@ -919,6 +919,53 @@ def test_list_from_arrays(list_array_type, list_type_factory):\n         list_array_type.from_arrays(offsets, values, type=typ)\n \n \n+@pytest.mark.parametrize(('list_array_type', 'list_type_factory'), (\n+    (pa.ListArray, pa.list_),\n+    (pa.LargeListArray, pa.large_list)\n+))\n+@pytest.mark.parametrize(\"arr\", (\n+    [None, [0]],\n+    [None, [0, None], [0]],\n+    [[0], [1]],\n+))\n+def test_list_array_types_from_arrays(\n+    list_array_type, list_type_factory, arr\n+):\n+    arr = pa.array(arr, list_type_factory(pa.int8()))\n+    reconstructed_arr = list_array_type.from_arrays(\n+        arr.offsets, arr.values, mask=arr.is_null())\n+    assert arr == reconstructed_arr\n\nReview Comment:\n   It seems that the `values` is not sliced:\r\n   \r\n   ```\r\n   In [88]: arr = pa.array([[0], None, [0, None], [0]], pa.list_(pa.int8()))\r\n   \r\n   In [89]: arr2 = arr[1:]\r\n   \r\n   In [90]: arr\r\n   Out[90]: \r\n   <pyarrow.lib.ListArray object at 0x7f34394a1100>\r\n   [\r\n     [\r\n       0\r\n     ],\r\n     null,\r\n     [\r\n       0,\r\n       null\r\n     ],\r\n     [\r\n       0\r\n     ]\r\n   ]\r\n   \r\n   In [91]: arr2\r\n   Out[91]: \r\n   <pyarrow.lib.ListArray object at 0x7f34394a1dc0>\r\n   [\r\n     null,\r\n     [\r\n       0,\r\n       null\r\n     ],\r\n     [\r\n       0\r\n     ]\r\n   ]\r\n   \r\n   In [92]: arr.values\r\n   Out[92]: \r\n   <pyarrow.lib.Int8Array object at 0x7f34394a1e20>\r\n   [\r\n     0,\r\n     0,\r\n     null,\r\n     0\r\n   ]\r\n   \r\n   In [94]: arr2.values\r\n   Out[94]: \r\n   <pyarrow.lib.Int8Array object at 0x7f342a668d60>\r\n   [\r\n     0,\r\n     0,\r\n     null,\r\n     0\r\n   ]\r\n   \r\n   In [95]: arr.offsets\r\n   Out[95]: \r\n   <pyarrow.lib.Int32Array object at 0x7f34394a1880>\r\n   [\r\n     0,\r\n     1,\r\n     1,\r\n     3,\r\n     4\r\n   ]\r\n   \r\n   In [96]: arr2.offsets\r\n   Out[96]: \r\n   <pyarrow.lib.Int32Array object at 0x7f34394a1b20>\r\n   [\r\n     1,\r\n     1,\r\n     3,\r\n     4\r\n   ]\r\n   ```\r\n   \r\n   while the offsets are sliced.\n\n\n\n",
                    "created": "2022-08-26T10:47:48.603+0000",
                    "updated": "2022-08-26T10:47:48.603+0000",
                    "started": "2022-08-26T10:47:48.602+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "803907",
                    "issueId": "13431783"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13431783/worklog/803908",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on code in PR #13894:\nURL: https://github.com/apache/arrow/pull/13894#discussion_r955918653\n\n\n##########\npython/pyarrow/tests/test_array.py:\n##########\n@@ -919,6 +919,53 @@ def test_list_from_arrays(list_array_type, list_type_factory):\n         list_array_type.from_arrays(offsets, values, type=typ)\n \n \n+@pytest.mark.parametrize(('list_array_type', 'list_type_factory'), (\n+    (pa.ListArray, pa.list_),\n+    (pa.LargeListArray, pa.large_list)\n+))\n+@pytest.mark.parametrize(\"arr\", (\n+    [None, [0]],\n+    [None, [0, None], [0]],\n+    [[0], [1]],\n+))\n+def test_list_array_types_from_arrays(\n+    list_array_type, list_type_factory, arr\n+):\n+    arr = pa.array(arr, list_type_factory(pa.int8()))\n+    reconstructed_arr = list_array_type.from_arrays(\n+        arr.offsets, arr.values, mask=arr.is_null())\n+    assert arr == reconstructed_arr\n\nReview Comment:\n   So yes that seems related to ARROW-16174\n\n\n\n",
                    "created": "2022-08-26T10:49:18.770+0000",
                    "updated": "2022-08-26T10:49:18.770+0000",
                    "started": "2022-08-26T10:49:18.770+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "803908",
                    "issueId": "13431783"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13431783/worklog/804832",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "milesgranger commented on code in PR #13894:\nURL: https://github.com/apache/arrow/pull/13894#discussion_r958434899\n\n\n##########\npython/pyarrow/tests/test_array.py:\n##########\n@@ -919,6 +919,53 @@ def test_list_from_arrays(list_array_type, list_type_factory):\n         list_array_type.from_arrays(offsets, values, type=typ)\n \n \n+@pytest.mark.parametrize(('list_array_type', 'list_type_factory'), (\n+    (pa.ListArray, pa.list_),\n+    (pa.LargeListArray, pa.large_list)\n+))\n+@pytest.mark.parametrize(\"arr\", (\n+    [None, [0]],\n+    [None, [0, None], [0]],\n+    [[0], [1]],\n+))\n+def test_list_array_types_from_arrays(\n+    list_array_type, list_type_factory, arr\n+):\n+    arr = pa.array(arr, list_type_factory(pa.int8()))\n+    reconstructed_arr = list_array_type.from_arrays(\n+        arr.offsets, arr.values, mask=arr.is_null())\n+    assert arr == reconstructed_arr\n\nReview Comment:\n   Can fix this by padding the front of `mask` by offset length:\r\n   ```python\r\n   >>> arr = pa.array([[0], None, [0, None], [0]], pa.list_(pa.int8()))\r\n   >>> arr_ = arr[1:]\r\n   >>> arr_.is_null()\r\n   <pyarrow.lib.BooleanArray object at 0x7fcf3dce8f40>\r\n   [\r\n     true,\r\n     false,\r\n     false\r\n   ]\r\n   \r\n   >>> arr_\r\n   <pyarrow.lib.ListArray object at 0x7fcf3dce3a00>\r\n   [\r\n     null,\r\n     [\r\n       0,\r\n       null\r\n     ],\r\n     [\r\n       0\r\n     ]\r\n   ]\r\n   \r\n   # Prepending with any value seems to work True or False, just needs to align with the offset\r\n   >>> pa.ListArray.from_arrays(arr_.offsets, arr_.values, mask=pa.array([True, True, False, False]))\r\n   <pyarrow.lib.ListArray object at 0x7fcf3e9595e0>\r\n   [\r\n     null,\r\n     [\r\n       0,\r\n       null\r\n     ],\r\n     [\r\n       0\r\n     ]\r\n   ]\r\n   \r\n   ```\r\n   \r\n   Initially planning to modify the `null_bitmap` on the C++ side in such a scenario; where it's length doesn't match the length of values, but curious if it's 'safe' to modify that `Buffer`'s data, or if a small preprocessing of the mask at Cython level is \"more better\".\n\n\n\n",
                    "created": "2022-08-30T12:47:09.384+0000",
                    "updated": "2022-08-30T12:47:09.384+0000",
                    "started": "2022-08-30T12:47:09.383+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "804832",
                    "issueId": "13431783"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13431783/worklog/804835",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "milesgranger commented on code in PR #13894:\nURL: https://github.com/apache/arrow/pull/13894#discussion_r958434899\n\n\n##########\npython/pyarrow/tests/test_array.py:\n##########\n@@ -919,6 +919,53 @@ def test_list_from_arrays(list_array_type, list_type_factory):\n         list_array_type.from_arrays(offsets, values, type=typ)\n \n \n+@pytest.mark.parametrize(('list_array_type', 'list_type_factory'), (\n+    (pa.ListArray, pa.list_),\n+    (pa.LargeListArray, pa.large_list)\n+))\n+@pytest.mark.parametrize(\"arr\", (\n+    [None, [0]],\n+    [None, [0, None], [0]],\n+    [[0], [1]],\n+))\n+def test_list_array_types_from_arrays(\n+    list_array_type, list_type_factory, arr\n+):\n+    arr = pa.array(arr, list_type_factory(pa.int8()))\n+    reconstructed_arr = list_array_type.from_arrays(\n+        arr.offsets, arr.values, mask=arr.is_null())\n+    assert arr == reconstructed_arr\n\nReview Comment:\n   Can fix this by padding the front of `mask` by offset length:\r\n   ```python\r\n   >>> arr = pa.array([[0], None, [0, None], [0]], pa.list_(pa.int8()))\r\n   >>> arr_ = arr[1:]\r\n   >>> arr_.is_null()\r\n   <pyarrow.lib.BooleanArray object at 0x7fcf3dce8f40>\r\n   [\r\n     true,\r\n     false,\r\n     false\r\n   ]\r\n   \r\n   >>> arr_\r\n   <pyarrow.lib.ListArray object at 0x7fcf3dce3a00>\r\n   [\r\n     null,\r\n     [\r\n       0,\r\n       null\r\n     ],\r\n     [\r\n       0\r\n     ]\r\n   ]\r\n   \r\n   # Prepending with any value seems to work True or False, just needs to align with the offset\r\n   >>> pa.ListArray.from_arrays(arr_.offsets, arr_.values, mask=pa.array([True, True, False, False]))\r\n   <pyarrow.lib.ListArray object at 0x7fcf3e9595e0>\r\n   [\r\n     null,\r\n     [\r\n       0,\r\n       null\r\n     ],\r\n     [\r\n       0\r\n     ]\r\n   ]\r\n   \r\n   ```\r\n   \r\n   Initially planning to modify the `null_bitmap` on the C++ side in such a scenario; where its length doesn't match the length of values, but curious if it's 'safe' to modify that `Buffer`'s data, or if a small preprocessing of the mask at Cython level is \"more better\".\n\n\n\n",
                    "created": "2022-08-30T12:50:59.627+0000",
                    "updated": "2022-08-30T12:50:59.627+0000",
                    "started": "2022-08-30T12:50:59.627+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "804835",
                    "issueId": "13431783"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13431783/worklog/804841",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "milesgranger commented on code in PR #13894:\nURL: https://github.com/apache/arrow/pull/13894#discussion_r958434899\n\n\n##########\npython/pyarrow/tests/test_array.py:\n##########\n@@ -919,6 +919,53 @@ def test_list_from_arrays(list_array_type, list_type_factory):\n         list_array_type.from_arrays(offsets, values, type=typ)\n \n \n+@pytest.mark.parametrize(('list_array_type', 'list_type_factory'), (\n+    (pa.ListArray, pa.list_),\n+    (pa.LargeListArray, pa.large_list)\n+))\n+@pytest.mark.parametrize(\"arr\", (\n+    [None, [0]],\n+    [None, [0, None], [0]],\n+    [[0], [1]],\n+))\n+def test_list_array_types_from_arrays(\n+    list_array_type, list_type_factory, arr\n+):\n+    arr = pa.array(arr, list_type_factory(pa.int8()))\n+    reconstructed_arr = list_array_type.from_arrays(\n+        arr.offsets, arr.values, mask=arr.is_null())\n+    assert arr == reconstructed_arr\n\nReview Comment:\n   Can fix this by padding the front of `mask` by offset:\r\n   ```python\r\n   >>> arr = pa.array([[0], None, [0, None], [0]], pa.list_(pa.int8()))\r\n   >>> arr_ = arr[1:]\r\n   >>> arr_.is_null()\r\n   <pyarrow.lib.BooleanArray object at 0x7fcf3dce8f40>\r\n   [\r\n     true,\r\n     false,\r\n     false\r\n   ]\r\n   \r\n   >>> arr_\r\n   <pyarrow.lib.ListArray object at 0x7fcf3dce3a00>\r\n   [\r\n     null,\r\n     [\r\n       0,\r\n       null\r\n     ],\r\n     [\r\n       0\r\n     ]\r\n   ]\r\n   \r\n   # Prepending with any value seems to work True or False, just needs to align with the offset\r\n   >>> pa.ListArray.from_arrays(arr_.offsets, arr_.values, mask=pa.array([True, True, False, False]))\r\n   <pyarrow.lib.ListArray object at 0x7fcf3e9595e0>\r\n   [\r\n     null,\r\n     [\r\n       0,\r\n       null\r\n     ],\r\n     [\r\n       0\r\n     ]\r\n   ]\r\n   \r\n   ```\r\n   \r\n   Initially planning to modify the `null_bitmap` on the C++ side in such a scenario; where its length doesn't match the length of values, but curious if it's 'safe' to modify that `Buffer`'s data, or if a small preprocessing of the mask at Cython level is \"more better\".\n\n\n\n##########\npython/pyarrow/tests/test_array.py:\n##########\n@@ -919,6 +919,53 @@ def test_list_from_arrays(list_array_type, list_type_factory):\n         list_array_type.from_arrays(offsets, values, type=typ)\n \n \n+@pytest.mark.parametrize(('list_array_type', 'list_type_factory'), (\n+    (pa.ListArray, pa.list_),\n+    (pa.LargeListArray, pa.large_list)\n+))\n+@pytest.mark.parametrize(\"arr\", (\n+    [None, [0]],\n+    [None, [0, None], [0]],\n+    [[0], [1]],\n+))\n+def test_list_array_types_from_arrays(\n+    list_array_type, list_type_factory, arr\n+):\n+    arr = pa.array(arr, list_type_factory(pa.int8()))\n+    reconstructed_arr = list_array_type.from_arrays(\n+        arr.offsets, arr.values, mask=arr.is_null())\n+    assert arr == reconstructed_arr\n\nReview Comment:\n   Can fix this by padding the front of `mask` by the offset:\r\n   ```python\r\n   >>> arr = pa.array([[0], None, [0, None], [0]], pa.list_(pa.int8()))\r\n   >>> arr_ = arr[1:]\r\n   >>> arr_.is_null()\r\n   <pyarrow.lib.BooleanArray object at 0x7fcf3dce8f40>\r\n   [\r\n     true,\r\n     false,\r\n     false\r\n   ]\r\n   \r\n   >>> arr_\r\n   <pyarrow.lib.ListArray object at 0x7fcf3dce3a00>\r\n   [\r\n     null,\r\n     [\r\n       0,\r\n       null\r\n     ],\r\n     [\r\n       0\r\n     ]\r\n   ]\r\n   \r\n   # Prepending with any value seems to work True or False, just needs to align with the offset\r\n   >>> pa.ListArray.from_arrays(arr_.offsets, arr_.values, mask=pa.array([True, True, False, False]))\r\n   <pyarrow.lib.ListArray object at 0x7fcf3e9595e0>\r\n   [\r\n     null,\r\n     [\r\n       0,\r\n       null\r\n     ],\r\n     [\r\n       0\r\n     ]\r\n   ]\r\n   \r\n   ```\r\n   \r\n   Initially planning to modify the `null_bitmap` on the C++ side in such a scenario; where its length doesn't match the length of values, but curious if it's 'safe' to modify that `Buffer`'s data, or if a small preprocessing of the mask at Cython level is \"more better\".\n\n\n\n",
                    "created": "2022-08-30T12:57:40.181+0000",
                    "updated": "2022-08-30T12:57:40.181+0000",
                    "started": "2022-08-30T12:57:40.180+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "804841",
                    "issueId": "13431783"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13431783/worklog/805087",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "milesgranger commented on code in PR #13894:\nURL: https://github.com/apache/arrow/pull/13894#discussion_r959137809\n\n\n##########\npython/pyarrow/tests/test_array.py:\n##########\n@@ -919,6 +919,53 @@ def test_list_from_arrays(list_array_type, list_type_factory):\n         list_array_type.from_arrays(offsets, values, type=typ)\n \n \n+@pytest.mark.parametrize(('list_array_type', 'list_type_factory'), (\n+    (pa.ListArray, pa.list_),\n+    (pa.LargeListArray, pa.large_list)\n+))\n+@pytest.mark.parametrize(\"arr\", (\n+    [None, [0]],\n+    [None, [0, None], [0]],\n+    [[0], [1]],\n+))\n+def test_list_array_types_from_arrays(\n+    list_array_type, list_type_factory, arr\n+):\n+    arr = pa.array(arr, list_type_factory(pa.int8()))\n+    reconstructed_arr = list_array_type.from_arrays(\n+        arr.offsets, arr.values, mask=arr.is_null())\n+    assert arr == reconstructed_arr\n\nReview Comment:\n   After more discussion with @jorisvandenbossche it appears it wouldn't be possible after all. So in https://github.com/apache/arrow/pull/13894/commits/b04f2327306fd5365e6de2aa7dbe72e28a074aa0 I've simply caught and raised an error on this case.\n\n\n\n",
                    "created": "2022-08-31T03:51:16.951+0000",
                    "updated": "2022-08-31T03:51:16.951+0000",
                    "started": "2022-08-31T03:51:16.950+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "805087",
                    "issueId": "13431783"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 15000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@2982fb10[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4a36032d[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@438d05c3[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@395849f4[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7880a335[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@4c058eb3[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@678d29ed[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@1ce1cb01[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@61854aa3[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@1152036[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@f59b3b8[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@1d72c891[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 15000,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Sep 01 10:34:00 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-09-01T10:34:00.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-15839/watchers",
            "watchCount": 4,
            "isWatching": false
        },
        "created": "2022-03-03T18:01:48.000+0000",
        "updated": "2022-09-01T15:45:48.000+0000",
        "timeoriginalestimate": null,
        "description": "Hi ! Right now when one wants to reconstruct a ListArray using ListArrar.from_arrays, the `null` values may be lost:\r\n{code:java}\r\nimport pyarrow as pa\r\n\r\narr = pa.array([None, [0]])\r\nreconstructed_arr = pa.ListArray.from_arrays(arr.offsets, arr.values)\r\nprint(reconstructed_arr.to_pylist())\r\n# [[], [0]] {code}\r\nIt would be nice to have a `mask` parameter to `ListArray.from_arrays` (or any way to provide the validity bitmap) to be able to reconstruct the original array with the `null` values.\r\n\r\nIt would also be consistent with `StructArray.from_arrays` that already has the `mask` parameter.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "4h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 15000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++][Python] Allow to reconstruct a ListArray with ListArray.from_arrays and keep the nulls",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13431783/comment/17598874",
                    "id": "17598874",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 13894\n[https://github.com/apache/arrow/pull/13894]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2022-09-01T10:34:00.328+0000",
                    "updated": "2022-09-01T10:34:00.328+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z1051s:",
        "customfield_12314139": null
    }
}