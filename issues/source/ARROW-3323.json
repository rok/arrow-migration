{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13187090",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13187090",
    "key": "ARROW-3323",
    "fields": {
        "parent": {
            "id": "13110540",
            "key": "ARROW-1688",
            "self": "https://issues.apache.org/jira/rest/api/2/issue/13110540",
            "fields": {
                "summary": "[Java] Fail build on checkstyle warnings",
                "status": {
                    "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                    "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                    "name": "Resolved",
                    "id": "5",
                    "statusCategory": {
                        "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                        "id": 3,
                        "key": "done",
                        "colorName": "green",
                        "name": "Done"
                    }
                },
                "priority": {
                    "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                    "name": "Major",
                    "id": "3"
                },
                "issuetype": {
                    "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                    "id": "4",
                    "description": "An improvement or enhancement to an existing feature or task.",
                    "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                    "name": "Improvement",
                    "subtask": false,
                    "avatarId": 21140
                }
            }
        },
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343858",
                "id": "12343858",
                "description": "",
                "name": "0.12.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-01-20"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bryanc",
            "name": "bryanc",
            "key": "bryanc",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bryanc&avatarId=23479",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bryanc&avatarId=23479",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bryanc&avatarId=23479",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bryanc&avatarId=23479"
            },
            "displayName": "Bryan Cutler",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328933",
                "id": "12328933",
                "name": "Java"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bryanc",
            "name": "bryanc",
            "key": "bryanc",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bryanc&avatarId=23479",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bryanc&avatarId=23479",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bryanc&avatarId=23479",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bryanc&avatarId=23479"
            },
            "displayName": "Bryan Cutler",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bryanc",
            "name": "bryanc",
            "key": "bryanc",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bryanc&avatarId=23479",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bryanc&avatarId=23479",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bryanc&avatarId=23479",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bryanc&avatarId=23479"
            },
            "displayName": "Bryan Cutler",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "aggregateprogress": {
            "progress": 12600,
            "total": 12600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 12600,
            "total": 12600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3323/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 21,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13187090/worklog/147223",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "BryanCutler opened a new pull request #2621: [WIP] ARROW-3323: [Java] Fix checkstyle naming\nURL: https://github.com/apache/arrow/pull/2621\n \n \n   Fix checkstyle errors from naming\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-24T17:49:50.899+0000",
                    "updated": "2018-09-24T17:49:50.899+0000",
                    "started": "2018-09-24T17:49:50.898+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "147223",
                    "issueId": "13187090"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13187090/worklog/147224",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "BryanCutler commented on a change in pull request #2621: [WIP] ARROW-3323: [Java] Fix checkstyle naming\nURL: https://github.com/apache/arrow/pull/2621#discussion_r219929979\n \n \n\n ##########\n File path: java/memory/src/main/java/org/apache/arrow/memory/BaseAllocator.java\n ##########\n @@ -44,7 +44,7 @@\n   // Package exposed for sharing between AllocatorManger and BaseAllocator objects\n   final String name;\n   final RootAllocator root;\n-  private final Object DEBUG_LOCK = DEBUG ? new Object() : null;\n+  private final Object debugLock = DEBUG ? new Object() : null;\n \n Review comment:\n   I'm not sure if we want to be so strict with variable naming rules\r\n   `(naming) MemberName: Member name 'DEBUG_LOCK' must match pattern '^[a-z][a-z0-9][a-zA-Z0-9]*$'.`\r\n   \r\n   A lot of what I'm seeing looks fine to me, such as \"nBytes\", which gets the same error since it requires 2 lowercase letters in the front.  What are your thoughts @jacques-n @icexelloss ?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-24T17:53:56.269+0000",
                    "updated": "2018-09-24T17:53:56.269+0000",
                    "started": "2018-09-24T17:53:56.268+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "147224",
                    "issueId": "13187090"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13187090/worklog/147227",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2621: [WIP] ARROW-3323: [Java] Fix checkstyle naming\nURL: https://github.com/apache/arrow/pull/2621#discussion_r219933923\n \n \n\n ##########\n File path: java/memory/src/main/java/org/apache/arrow/memory/BaseAllocator.java\n ##########\n @@ -44,7 +44,7 @@\n   // Package exposed for sharing between AllocatorManger and BaseAllocator objects\n   final String name;\n   final RootAllocator root;\n-  private final Object DEBUG_LOCK = DEBUG ? new Object() : null;\n+  private final Object debugLock = DEBUG ? new Object() : null;\n \n Review comment:\n   Seems like this is basically a constant, which should be able to have different naming rules\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-24T18:05:40.795+0000",
                    "updated": "2018-09-24T18:05:40.795+0000",
                    "started": "2018-09-24T18:05:40.794+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "147227",
                    "issueId": "13187090"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13187090/worklog/147233",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "BryanCutler commented on a change in pull request #2621: [WIP] ARROW-3323: [Java] Fix checkstyle naming\nURL: https://github.com/apache/arrow/pull/2621#discussion_r219936854\n \n \n\n ##########\n File path: java/memory/src/main/java/org/apache/arrow/memory/BaseAllocator.java\n ##########\n @@ -44,7 +44,7 @@\n   // Package exposed for sharing between AllocatorManger and BaseAllocator objects\n   final String name;\n   final RootAllocator root;\n-  private final Object DEBUG_LOCK = DEBUG ? new Object() : null;\n+  private final Object debugLock = DEBUG ? new Object() : null;\n \n Review comment:\n   Yeah, there is a check for constants, statics and finals. It just isn't in our conf http://checkstyle.sourceforge.net/apidocs/com/puppycrawl/tools/checkstyle/checks/naming/ConstantNameCheck.html\r\n   \r\n   A suggested pattern is \"^log(ger)?|[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\"\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-24T18:14:56.766+0000",
                    "updated": "2018-09-24T18:14:56.766+0000",
                    "started": "2018-09-24T18:14:56.766+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "147233",
                    "issueId": "13187090"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13187090/worklog/147236",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "BryanCutler commented on a change in pull request #2621: [WIP] ARROW-3323: [Java] Fix checkstyle naming\nURL: https://github.com/apache/arrow/pull/2621#discussion_r219938304\n \n \n\n ##########\n File path: java/memory/src/main/java/org/apache/arrow/memory/BaseAllocator.java\n ##########\n @@ -44,7 +44,7 @@\n   // Package exposed for sharing between AllocatorManger and BaseAllocator objects\n   final String name;\n   final RootAllocator root;\n-  private final Object DEBUG_LOCK = DEBUG ? new Object() : null;\n+  private final Object debugLock = DEBUG ? new Object() : null;\n \n Review comment:\n   That doesn't look like it would be too disruptive to add, I see a few `final int isSet = 1;` that would need to be changed, but most are already in caps\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-24T18:19:34.736+0000",
                    "updated": "2018-09-24T18:19:34.736+0000",
                    "started": "2018-09-24T18:19:34.736+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "147236",
                    "issueId": "13187090"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13187090/worklog/147238",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "BryanCutler commented on a change in pull request #2621: [WIP] ARROW-3323: [Java] Fix checkstyle naming\nURL: https://github.com/apache/arrow/pull/2621#discussion_r219939199\n \n \n\n ##########\n File path: java/memory/src/main/java/org/apache/arrow/memory/BaseAllocator.java\n ##########\n @@ -44,7 +44,7 @@\n   // Package exposed for sharing between AllocatorManger and BaseAllocator objects\n   final String name;\n   final RootAllocator root;\n-  private final Object DEBUG_LOCK = DEBUG ? new Object() : null;\n+  private final Object debugLock = DEBUG ? new Object() : null;\n \n Review comment:\n   I take that back, there are quite a few finals in lower case\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-24T18:22:15.684+0000",
                    "updated": "2018-09-24T18:22:15.684+0000",
                    "started": "2018-09-24T18:22:15.684+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "147238",
                    "issueId": "13187090"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13187090/worklog/147239",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "BryanCutler commented on a change in pull request #2621: [WIP] ARROW-3323: [Java] Fix checkstyle naming\nURL: https://github.com/apache/arrow/pull/2621#discussion_r219938304\n \n \n\n ##########\n File path: java/memory/src/main/java/org/apache/arrow/memory/BaseAllocator.java\n ##########\n @@ -44,7 +44,7 @@\n   // Package exposed for sharing between AllocatorManger and BaseAllocator objects\n   final String name;\n   final RootAllocator root;\n-  private final Object DEBUG_LOCK = DEBUG ? new Object() : null;\n+  private final Object debugLock = DEBUG ? new Object() : null;\n \n Review comment:\n   ~That doesn't look like it would be too disruptive to add~, I see a few `final int isSet = 1;` that would need to be changed, but most are already in caps\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-24T18:22:39.989+0000",
                    "updated": "2018-09-24T18:22:39.989+0000",
                    "started": "2018-09-24T18:22:39.989+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "147239",
                    "issueId": "13187090"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13187090/worklog/148294",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "icexelloss commented on a change in pull request #2621: [WIP] ARROW-3323: [Java] Fix checkstyle naming\nURL: https://github.com/apache/arrow/pull/2621#discussion_r220691478\n \n \n\n ##########\n File path: java/memory/src/main/java/org/apache/arrow/memory/BaseAllocator.java\n ##########\n @@ -44,7 +44,7 @@\n   // Package exposed for sharing between AllocatorManger and BaseAllocator objects\n   final String name;\n   final RootAllocator root;\n-  private final Object DEBUG_LOCK = DEBUG ? new Object() : null;\n+  private final Object debugLock = DEBUG ? new Object() : null;\n \n Review comment:\n   I think we can allow both\r\n   ```\r\n   final int isSet = 1\r\n   ```\r\n   \r\n   and \r\n   \r\n   ```\r\n   final int MY_CONSTANT = 1\r\n   ```\r\n   \r\n   I think both are common and reasonable\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-26T19:20:46.839+0000",
                    "updated": "2018-09-26T19:20:46.839+0000",
                    "started": "2018-09-26T19:20:46.839+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "148294",
                    "issueId": "13187090"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13187090/worklog/149240",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "BryanCutler commented on a change in pull request #2621: [WIP] ARROW-3323: [Java] Fix checkstyle naming\nURL: https://github.com/apache/arrow/pull/2621#discussion_r221330272\n \n \n\n ##########\n File path: java/memory/src/main/java/org/apache/arrow/memory/BaseAllocator.java\n ##########\n @@ -44,7 +44,7 @@\n   // Package exposed for sharing between AllocatorManger and BaseAllocator objects\n   final String name;\n   final RootAllocator root;\n-  private final Object DEBUG_LOCK = DEBUG ? new Object() : null;\n+  private final Object debugLock = DEBUG ? new Object() : null;\n \n Review comment:\n   Sounds fine to me, I'll try to change to pattern to allow both\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-28T17:43:19.428+0000",
                    "updated": "2018-09-28T17:43:19.428+0000",
                    "started": "2018-09-28T17:43:19.427+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "149240",
                    "issueId": "13187090"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13187090/worklog/156170",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "BryanCutler commented on a change in pull request #2621: ARROW-3323: [Java] Fix checkstyle naming\nURL: https://github.com/apache/arrow/pull/2621#discussion_r226491436\n \n \n\n ##########\n File path: java/dev/checkstyle/checkstyle.xml\n ##########\n @@ -195,10 +195,6 @@\n             <property name=\"lineWrappingIndentation\" value=\"4\"/>\n             <property name=\"arrayInitIndent\" value=\"2\"/>\n         </module>\n-        <module name=\"AbbreviationAsWordInName\">\n \n Review comment:\n   This conflicts with some of the variable names we use as constants and it made the most sense to just remove this rule\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-18T22:58:52.906+0000",
                    "updated": "2018-10-18T22:58:52.906+0000",
                    "started": "2018-10-18T22:58:52.904+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "156170",
                    "issueId": "13187090"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13187090/worklog/156171",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "BryanCutler commented on a change in pull request #2621: ARROW-3323: [Java] Fix checkstyle naming\nURL: https://github.com/apache/arrow/pull/2621#discussion_r226491436\n \n \n\n ##########\n File path: java/dev/checkstyle/checkstyle.xml\n ##########\n @@ -195,10 +195,6 @@\n             <property name=\"lineWrappingIndentation\" value=\"4\"/>\n             <property name=\"arrayInitIndent\" value=\"2\"/>\n         </module>\n-        <module name=\"AbbreviationAsWordInName\">\n \n Review comment:\n   This conflicts with some of the variable names we use as constants and it made the most sense to just remove this rule. These seem ok to me, for example:\r\n   \r\n   ```\r\n   [WARNING] src/test/java/org/apache/arrow/vector/ipc/BaseFileTest.java:[233] (naming) AbbreviationAsWordInName: Abbreviation in name 'timestampMilliTZVal' must contain no more than '1' capital letters.\r\n   \r\n   [WARNING] src/test/java/org/apache/arrow/vector/ipc/TestJSONFile.java:[37] (naming) AbbreviationAsWordInName: Abbreviation in name 'TestJSONFile' must contain no more than '1' capital letters.\r\n   ```\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-18T23:01:22.823+0000",
                    "updated": "2018-10-18T23:01:22.823+0000",
                    "started": "2018-10-18T23:01:22.822+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "156171",
                    "issueId": "13187090"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13187090/worklog/156172",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "BryanCutler commented on a change in pull request #2621: ARROW-3323: [Java] Fix checkstyle naming\nURL: https://github.com/apache/arrow/pull/2621#discussion_r226491436\n \n \n\n ##########\n File path: java/dev/checkstyle/checkstyle.xml\n ##########\n @@ -195,10 +195,6 @@\n             <property name=\"lineWrappingIndentation\" value=\"4\"/>\n             <property name=\"arrayInitIndent\" value=\"2\"/>\n         </module>\n-        <module name=\"AbbreviationAsWordInName\">\n \n Review comment:\n   This guards against multiple capital letters together, most of which seem ok to me, for example:\r\n   \r\n   ```\r\n   [WARNING] src/test/java/org/apache/arrow/vector/ipc/BaseFileTest.java:[233] (naming) AbbreviationAsWordInName: Abbreviation in name 'timestampMilliTZVal' must contain no more than '1' capital letters.\r\n   \r\n   [WARNING] src/test/java/org/apache/arrow/vector/ipc/TestJSONFile.java:[37] (naming) AbbreviationAsWordInName: Abbreviation in name 'TestJSONFile' must contain no more than '1' capital letters.\r\n   ```\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-18T23:03:39.260+0000",
                    "updated": "2018-10-18T23:03:39.260+0000",
                    "started": "2018-10-18T23:03:39.259+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "156172",
                    "issueId": "13187090"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13187090/worklog/156173",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "BryanCutler commented on issue #2621: ARROW-3323: [Java] Fix checkstyle naming\nURL: https://github.com/apache/arrow/pull/2621#issuecomment-431192943\n \n \n   @jacques-n @icexelloss , I relaxed some of the rules a little to conform to existing naming so changes are minimal. Please take a look when you can, thanks!\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-18T23:06:13.975+0000",
                    "updated": "2018-10-18T23:06:13.975+0000",
                    "started": "2018-10-18T23:06:13.975+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "156173",
                    "issueId": "13187090"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13187090/worklog/156360",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "icexelloss commented on a change in pull request #2621: ARROW-3323: [Java] Fix checkstyle naming\nURL: https://github.com/apache/arrow/pull/2621#discussion_r226684540\n \n \n\n ##########\n File path: java/memory/src/main/java/org/apache/arrow/memory/AllocationManager.java\n ##########\n @@ -205,11 +205,11 @@ private void release(final BufferLedger ledger) {\n     private final AtomicInteger bufRefCnt = new AtomicInteger(0); // start at zero so we can\n     // manage request for retain\n     // correctly\n-    private final long lCreationTime = System.nanoTime();\n \n Review comment:\n   Just curious, the rule disallows single lower case character before upper case? \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-19T15:17:51.027+0000",
                    "updated": "2018-10-19T15:17:51.027+0000",
                    "started": "2018-10-19T15:17:51.027+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "156360",
                    "issueId": "13187090"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13187090/worklog/156379",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "BryanCutler commented on a change in pull request #2621: ARROW-3323: [Java] Fix checkstyle naming\nURL: https://github.com/apache/arrow/pull/2621#discussion_r226696454\n \n \n\n ##########\n File path: java/memory/src/main/java/org/apache/arrow/memory/AllocationManager.java\n ##########\n @@ -205,11 +205,11 @@ private void release(final BufferLedger ledger) {\n     private final AtomicInteger bufRefCnt = new AtomicInteger(0); // start at zero so we can\n     // manage request for retain\n     // correctly\n-    private final long lCreationTime = System.nanoTime();\n \n Review comment:\n   this one was MemberNameCheck, but I relaxed it to allow allow for single lower case before uppercase since there were some other instances that seemed fine. I just forgot to revert these changes, I'll do that now.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-19T15:54:39.324+0000",
                    "updated": "2018-10-19T15:54:39.324+0000",
                    "started": "2018-10-19T15:54:39.324+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "156379",
                    "issueId": "13187090"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13187090/worklog/156451",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "icexelloss commented on issue #2621: ARROW-3323: [Java] Fix checkstyle naming\nURL: https://github.com/apache/arrow/pull/2621#issuecomment-431477307\n \n \n   I think gandiva still has violations?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-19T19:43:45.845+0000",
                    "updated": "2018-10-19T19:43:45.845+0000",
                    "started": "2018-10-19T19:43:45.844+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "156451",
                    "issueId": "13187090"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13187090/worklog/156479",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "BryanCutler commented on issue #2621: ARROW-3323: [Java] Fix checkstyle naming\nURL: https://github.com/apache/arrow/pull/2621#issuecomment-431507741\n \n \n   >I think gandiva still has violations?\r\n   \r\n   Ah right, that's not included with the root pom. Let me take a look.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-19T21:41:30.328+0000",
                    "updated": "2018-10-19T21:41:30.328+0000",
                    "started": "2018-10-19T21:41:30.327+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "156479",
                    "issueId": "13187090"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13187090/worklog/156492",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #2621: ARROW-3323: [Java] Fix checkstyle naming\nURL: https://github.com/apache/arrow/pull/2621#issuecomment-431522575\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/2621?src=pr&el=h1) Report\n   > Merging [#2621](https://codecov.io/gh/apache/arrow/pull/2621?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/0ecba4f0479c159be86820096a6acac35088441b?src=pr&el=desc) will **decrease** coverage by `0.01%`.\n   > The diff coverage is `n/a`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/2621/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/2621?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #2621      +/-   ##\n   ==========================================\n   - Coverage   87.63%   87.62%   -0.02%     \n   ==========================================\n     Files         406      406              \n     Lines       62791    62791              \n   ==========================================\n   - Hits        55030    55020      -10     \n   - Misses       7691     7697       +6     \n   - Partials       70       74       +4\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/2621?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [go/arrow/math/int64\\_avx2\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2621/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC9pbnQ2NF9hdngyX2FtZDY0Lmdv) | `0% <0%> (-100%)` | :arrow_down: |\n   | [go/arrow/memory/memory\\_avx2\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2621/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWVtb3J5L21lbW9yeV9hdngyX2FtZDY0Lmdv) | `0% <0%> (-100%)` | :arrow_down: |\n   | [go/arrow/math/float64\\_avx2\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2621/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC9mbG9hdDY0X2F2eDJfYW1kNjQuZ28=) | `0% <0%> (-100%)` | :arrow_down: |\n   | [go/arrow/math/uint64\\_avx2\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2621/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC91aW50NjRfYXZ4Ml9hbWQ2NC5nbw==) | `0% <0%> (-100%)` | :arrow_down: |\n   | [go/arrow/memory/memory\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2621/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWVtb3J5L21lbW9yeV9hbWQ2NC5nbw==) | `28.57% <0%> (-14.29%)` | :arrow_down: |\n   | [go/arrow/math/math\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2621/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC9tYXRoX2FtZDY0Lmdv) | `31.57% <0%> (-5.27%)` | :arrow_down: |\n   | [go/arrow/math/float64\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2621/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC9mbG9hdDY0X2FtZDY0Lmdv) | `33.33% <0%> (\u00f8)` | :arrow_up: |\n   | [go/arrow/math/int64\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2621/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC9pbnQ2NF9hbWQ2NC5nbw==) | `33.33% <0%> (\u00f8)` | :arrow_up: |\n   | [go/arrow/math/uint64\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2621/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC91aW50NjRfYW1kNjQuZ28=) | `33.33% <0%> (\u00f8)` | :arrow_up: |\n   | [go/arrow/math/uint64\\_sse4\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2621/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC91aW50NjRfc3NlNF9hbWQ2NC5nbw==) | `100% <0%> (+100%)` | :arrow_up: |\n   | ... and [3 more](https://codecov.io/gh/apache/arrow/pull/2621/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/2621?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/2621?src=pr&el=footer). Last update [0ecba4f...d9d1b95](https://codecov.io/gh/apache/arrow/pull/2621?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-19T23:02:02.434+0000",
                    "updated": "2018-10-19T23:02:02.434+0000",
                    "started": "2018-10-19T23:02:02.433+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "156492",
                    "issueId": "13187090"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13187090/worklog/156493",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "BryanCutler commented on issue #2621: ARROW-3323: [Java] Fix checkstyle naming\nURL: https://github.com/apache/arrow/pull/2621#issuecomment-431522919\n \n \n   Ok, all checks are passing now.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-19T23:04:12.809+0000",
                    "updated": "2018-10-19T23:04:12.809+0000",
                    "started": "2018-10-19T23:04:12.808+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "156493",
                    "issueId": "13187090"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13187090/worklog/156542",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm closed pull request #2621: ARROW-3323: [Java] Fix checkstyle naming\nURL: https://github.com/apache/arrow/pull/2621\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/java/dev/checkstyle/checkstyle.xml b/java/dev/checkstyle/checkstyle.xml\nindex 5e509ba9ef..9ed5e3cc19 100644\n--- a/java/dev/checkstyle/checkstyle.xml\n+++ b/java/dev/checkstyle/checkstyle.xml\n@@ -140,39 +140,39 @@\n              value=\"Type name ''{0}'' must match pattern ''{1}''.\"/>\n         </module>\n         <module name=\"MemberName\">\n-            <property name=\"format\" value=\"^[a-z][a-z0-9][a-zA-Z0-9]*$\"/>\n+            <property name=\"format\" value=\"^[a-z][a-zA-Z0-9]*|[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\"/>\n             <message key=\"name.invalidPattern\"\n              value=\"Member name ''{0}'' must match pattern ''{1}''.\"/>\n         </module>\n         <module name=\"ParameterName\">\n-            <property name=\"format\" value=\"^[a-z][a-z0-9][a-zA-Z0-9]*$\"/>\n+            <property name=\"format\" value=\"^[a-z][a-zA-Z0-9]*$\"/>\n             <message key=\"name.invalidPattern\"\n              value=\"Parameter name ''{0}'' must match pattern ''{1}''.\"/>\n         </module>\n         <module name=\"CatchParameterName\">\n-            <property name=\"format\" value=\"^[a-z][a-z0-9][a-zA-Z0-9]*$\"/>\n+            <property name=\"format\" value=\"^(e|t|ex|[a-z]e|[a-z][a-z][a-zA-Z]+)$\"/>\n             <message key=\"name.invalidPattern\"\n              value=\"Catch parameter name ''{0}'' must match pattern ''{1}''.\"/>\n         </module>\n         <module name=\"LocalVariableName\">\n             <property name=\"tokens\" value=\"VARIABLE_DEF\"/>\n-            <property name=\"format\" value=\"^[a-z][a-z0-9][a-zA-Z0-9]*$\"/>\n+            <property name=\"format\" value=\"^[a-z][a-zA-Z0-9]*$\"/>\n             <property name=\"allowOneCharVarInForLoop\" value=\"true\"/>\n             <message key=\"name.invalidPattern\"\n              value=\"Local variable name ''{0}'' must match pattern ''{1}''.\"/>\n         </module>\n         <module name=\"ClassTypeParameterName\">\n-            <property name=\"format\" value=\"(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)\"/>\n+            <property name=\"format\" value=\"(^[A-Z]+[0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)\"/>\n             <message key=\"name.invalidPattern\"\n              value=\"Class type name ''{0}'' must match pattern ''{1}''.\"/>\n         </module>\n         <module name=\"MethodTypeParameterName\">\n-            <property name=\"format\" value=\"(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)\"/>\n+            <property name=\"format\" value=\"(^[A-Z]+[0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)\"/>\n             <message key=\"name.invalidPattern\"\n              value=\"Method type name ''{0}'' must match pattern ''{1}''.\"/>\n         </module>\n         <module name=\"InterfaceTypeParameterName\">\n-            <property name=\"format\" value=\"(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)\"/>\n+            <property name=\"format\" value=\"(^[A-Z]+[0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)\"/>\n             <message key=\"name.invalidPattern\"\n              value=\"Interface type name ''{0}'' must match pattern ''{1}''.\"/>\n         </module>\n@@ -195,10 +195,6 @@\n             <property name=\"lineWrappingIndentation\" value=\"4\"/>\n             <property name=\"arrayInitIndent\" value=\"2\"/>\n         </module>\n-        <module name=\"AbbreviationAsWordInName\">\n-            <property name=\"ignoreFinal\" value=\"false\"/>\n-            <property name=\"allowedAbbreviationLength\" value=\"1\"/>\n-        </module>\n         <module name=\"OverloadMethodsDeclarationOrder\"/>\n         <module name=\"VariableDeclarationUsageDistance\"/>\n         <module name=\"AvoidStarImport\">\ndiff --git a/java/dev/checkstyle/suppressions.xml b/java/dev/checkstyle/suppressions.xml\nindex 13ffd0e169..e157505022 100644\n--- a/java/dev/checkstyle/suppressions.xml\n+++ b/java/dev/checkstyle/suppressions.xml\n@@ -34,6 +34,6 @@\n \n   <!-- TODO: Temporarily suppress all but certain checks to fix in increments -->\n   <suppress\n-    checks=\"^(?!.*(ImportOrder|LineLength|Indentation|OperatorWrapCheck|SeparatorWrapCheck|NewlineAtEndOfFileCheck|WhitespaceAroundCheck|EmptyLineSeparatorCheck)).*\"\n+    checks=\"^(?!.*(ImportOrder|LineLength|Indentation|OperatorWrapCheck|SeparatorWrapCheck|NewlineAtEndOfFileCheck|WhitespaceAroundCheck|EmptyLineSeparatorCheck|LocalVariableNameCheck|CatchParameterNameCheck|ParameterNameCheck|MemberNameCheck|ClassTypeParameterName|MethodTypeParameterName|InterfaceTypeParameterName)).*\"\n     files=\".*\" />\n </suppressions>\ndiff --git a/java/gandiva/src/test/java/org/apache/arrow/gandiva/evaluator/ExpressionRegistryTest.java b/java/gandiva/src/test/java/org/apache/arrow/gandiva/evaluator/ExpressionRegistryTest.java\nindex 1fc271324e..738cc191f1 100644\n--- a/java/gandiva/src/test/java/org/apache/arrow/gandiva/evaluator/ExpressionRegistryTest.java\n+++ b/java/gandiva/src/test/java/org/apache/arrow/gandiva/evaluator/ExpressionRegistryTest.java\n@@ -32,15 +32,15 @@\n   @Test\n   public void testTypes() throws GandivaException {\n     Set<ArrowType> types = ExpressionRegistry.getInstance().getSupportedTypes();\n-    ArrowType.Int UINT8 = new ArrowType.Int(8, false);\n-    Assert.assertTrue(types.contains(UINT8));\n+    ArrowType.Int uint8 = new ArrowType.Int(8, false);\n+    Assert.assertTrue(types.contains(uint8));\n   }\n \n   @Test\n   public void testFunctions() throws GandivaException {\n-    ArrowType.Int UINT8 = new ArrowType.Int(8, false);\n+    ArrowType.Int uint8 = new ArrowType.Int(8, false);\n     FunctionSignature signature =\n-        new FunctionSignature(\"add\", UINT8, Lists.newArrayList(UINT8, UINT8));\n+        new FunctionSignature(\"add\", uint8, Lists.newArrayList(uint8, uint8));\n     Set<FunctionSignature> functions = ExpressionRegistry.getInstance().getSupportedFunctions();\n     Assert.assertTrue(functions.contains(signature));\n   }\ndiff --git a/java/gandiva/src/test/java/org/apache/arrow/gandiva/evaluator/FilterTest.java b/java/gandiva/src/test/java/org/apache/arrow/gandiva/evaluator/FilterTest.java\nindex fc6c767b56..19fcada55e 100644\n--- a/java/gandiva/src/test/java/org/apache/arrow/gandiva/evaluator/FilterTest.java\n+++ b/java/gandiva/src/test/java/org/apache/arrow/gandiva/evaluator/FilterTest.java\n@@ -68,11 +68,11 @@ public void testSimpleSV16() throws GandivaException, Exception {\n     int numRows = 16;\n     byte[] validity = new byte[] {(byte) 255, 0};\n     // second half is \"undefined\"\n-    int[] values_a = new int[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};\n-    int[] values_b = new int[] {2, 1, 4, 3, 6, 5, 8, 7, 10, 9, 12, 11, 14, 13, 14, 15};\n+    int[] aValues = new int[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};\n+    int[] bValues = new int[] {2, 1, 4, 3, 6, 5, 8, 7, 10, 9, 12, 11, 14, 13, 14, 15};\n     int[] expected = {0, 2, 4, 6};\n \n-    verifyTestCase(filter, numRows, validity, values_a, values_b, expected);\n+    verifyTestCase(filter, numRows, validity, aValues, bValues, expected);\n   }\n \n   @Test\n@@ -92,16 +92,16 @@ public void testSimpleSV16_AllMatched() throws GandivaException, Exception {\n \n     IntStream.range(0, numRows / 8).forEach(i -> validity[i] = (byte) 255);\n \n-    int[] values_a = new int[numRows];\n-    IntStream.range(0, numRows).forEach(i -> values_a[i] = i);\n+    int[] aValues = new int[numRows];\n+    IntStream.range(0, numRows).forEach(i -> aValues[i] = i);\n \n-    int[] values_b = new int[numRows];\n-    IntStream.range(0, numRows).forEach(i -> values_b[i] = i + 1);\n+    int[] bValues = new int[numRows];\n+    IntStream.range(0, numRows).forEach(i -> bValues[i] = i + 1);\n \n     int[] expected = new int[numRows];\n     IntStream.range(0, numRows).forEach(i -> expected[i] = i);\n \n-    verifyTestCase(filter, numRows, validity, values_a, values_b, expected);\n+    verifyTestCase(filter, numRows, validity, aValues, bValues, expected);\n   }\n \n   @Test\n@@ -121,18 +121,18 @@ public void testSimpleSV16_GreaterThan64Recs() throws GandivaException, Exceptio\n \n     IntStream.range(0, numRows / 8).forEach(i -> validity[i] = (byte) 255);\n \n-    int[] values_a = new int[numRows];\n-    IntStream.range(0, numRows).forEach(i -> values_a[i] = i);\n+    int[] aValues = new int[numRows];\n+    IntStream.range(0, numRows).forEach(i -> aValues[i] = i);\n \n-    int[] values_b = new int[numRows];\n-    IntStream.range(0, numRows).forEach(i -> values_b[i] = i + 1);\n+    int[] bValues = new int[numRows];\n+    IntStream.range(0, numRows).forEach(i -> bValues[i] = i + 1);\n \n-    values_a[0] = 5;\n-    values_b[0] = 0;\n+    aValues[0] = 5;\n+    bValues[0] = 0;\n \n     int[] expected = {0};\n \n-    verifyTestCase(filter, numRows, validity, values_a, values_b, expected);\n+    verifyTestCase(filter, numRows, validity, aValues, bValues, expected);\n   }\n \n   @Test\n@@ -149,20 +149,20 @@ public void testSimpleSV32() throws GandivaException, Exception {\n     int numRows = 16;\n     byte[] validity = new byte[] {(byte) 255, 0};\n     // second half is \"undefined\"\n-    int[] values_a = new int[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};\n-    int[] values_b = new int[] {2, 1, 4, 3, 6, 5, 8, 7, 10, 9, 12, 11, 14, 13, 14, 15};\n+    int[] aValues = new int[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};\n+    int[] bValues = new int[] {2, 1, 4, 3, 6, 5, 8, 7, 10, 9, 12, 11, 14, 13, 14, 15};\n     int[] expected = {0, 2, 4, 6};\n \n-    verifyTestCase(filter, numRows, validity, values_a, values_b, expected);\n+    verifyTestCase(filter, numRows, validity, aValues, bValues, expected);\n   }\n \n   private void verifyTestCase(\n-      Filter filter, int numRows, byte[] validity, int[] values_a, int[] values_b, int[] expected)\n+      Filter filter, int numRows, byte[] validity, int[] aValues, int[] bValues, int[] expected)\n       throws GandivaException {\n     ArrowBuf validitya = buf(validity);\n-    ArrowBuf valuesa = intBuf(values_a);\n+    ArrowBuf valuesa = intBuf(aValues);\n     ArrowBuf validityb = buf(validity);\n-    ArrowBuf valuesb = intBuf(values_b);\n+    ArrowBuf valuesb = intBuf(bValues);\n     ArrowRecordBatch batch =\n         new ArrowRecordBatch(\n             numRows,\ndiff --git a/java/gandiva/src/test/java/org/apache/arrow/gandiva/evaluator/MicroBenchmarkTest.java b/java/gandiva/src/test/java/org/apache/arrow/gandiva/evaluator/MicroBenchmarkTest.java\nindex a14f5968f2..4fa916ce9e 100644\n--- a/java/gandiva/src/test/java/org/apache/arrow/gandiva/evaluator/MicroBenchmarkTest.java\n+++ b/java/gandiva/src/test/java/org/apache/arrow/gandiva/evaluator/MicroBenchmarkTest.java\n@@ -38,19 +38,19 @@\n   @Test\n   public void testAdd3() throws Exception {\n     Field x = Field.nullable(\"x\", int32);\n-    Field N2x = Field.nullable(\"N2x\", int32);\n-    Field N3x = Field.nullable(\"N3x\", int32);\n+    Field n2x = Field.nullable(\"n2x\", int32);\n+    Field n3x = Field.nullable(\"n3x\", int32);\n \n-    // x + N2x + N3x\n+    // x + n2x + n3x\n     TreeNode add1 =\n         TreeBuilder.makeFunction(\n-            \"add\", Lists.newArrayList(TreeBuilder.makeField(x), TreeBuilder.makeField(N2x)), int32);\n+            \"add\", Lists.newArrayList(TreeBuilder.makeField(x), TreeBuilder.makeField(n2x)), int32);\n     TreeNode add =\n         TreeBuilder.makeFunction(\n-            \"add\", Lists.newArrayList(add1, TreeBuilder.makeField(N3x)), int32);\n+            \"add\", Lists.newArrayList(add1, TreeBuilder.makeField(n3x)), int32);\n     ExpressionTree expr = TreeBuilder.makeExpression(add, x);\n \n-    List<Field> cols = Lists.newArrayList(x, N2x, N3x);\n+    List<Field> cols = Lists.newArrayList(x, n2x, n3x);\n     Schema schema = new Schema(cols);\n \n     long timeTaken = timedProject(new Int32DataAndVectorGenerator(allocator),\n@@ -88,7 +88,7 @@ public void testIf() throws Exception {\n      * else 20\n      */\n     Field x = Field.nullable(\"x\", int32);\n-    TreeNode x_node = TreeBuilder.makeField(x);\n+    TreeNode xNode = TreeBuilder.makeField(x);\n \n     // if (x < 100) then 9 else 10\n     int returnValue = 20;\n@@ -99,7 +99,7 @@ public void testIf() throws Exception {\n       TreeNode condNode =\n           TreeBuilder.makeFunction(\n               \"less_than\",\n-              Lists.newArrayList(x_node, TreeBuilder.makeLiteral(compareWith)),\n+              Lists.newArrayList(xNode, TreeBuilder.makeLiteral(compareWith)),\n               boolType);\n       topNode =\n           TreeBuilder.makeIf(\n@@ -126,17 +126,17 @@ public void testIf() throws Exception {\n   @Test\n   public void testFilterAdd2() throws Exception {\n     Field x = Field.nullable(\"x\", int32);\n-    Field N2x = Field.nullable(\"N2x\", int32);\n-    Field N3x = Field.nullable(\"N3x\", int32);\n+    Field n2x = Field.nullable(\"n2x\", int32);\n+    Field n3x = Field.nullable(\"n3x\", int32);\n \n-    // x + N2x < N3x\n+    // x + n2x < n3x\n     TreeNode add = TreeBuilder.makeFunction(\"add\",\n-        Lists.newArrayList(TreeBuilder.makeField(x), TreeBuilder.makeField(N2x)), int32);\n-    TreeNode less_than = TreeBuilder\n-        .makeFunction(\"less_than\", Lists.newArrayList(add, TreeBuilder.makeField(N3x)), boolType);\n-    Condition condition = TreeBuilder.makeCondition(less_than);\n+        Lists.newArrayList(TreeBuilder.makeField(x), TreeBuilder.makeField(n2x)), int32);\n+    TreeNode lessThan = TreeBuilder\n+        .makeFunction(\"less_than\", Lists.newArrayList(add, TreeBuilder.makeField(n3x)), boolType);\n+    Condition condition = TreeBuilder.makeCondition(lessThan);\n \n-    List<Field> cols = Lists.newArrayList(x, N2x, N3x);\n+    List<Field> cols = Lists.newArrayList(x, n2x, n3x);\n     Schema schema = new Schema(cols);\n \n     long timeTaken = timedFilter(new Int32DataAndVectorGenerator(allocator),\ndiff --git a/java/gandiva/src/test/java/org/apache/arrow/gandiva/evaluator/ProjectorTest.java b/java/gandiva/src/test/java/org/apache/arrow/gandiva/evaluator/ProjectorTest.java\nindex f75fe786f3..fffe8ccaa5 100644\n--- a/java/gandiva/src/test/java/org/apache/arrow/gandiva/evaluator/ProjectorTest.java\n+++ b/java/gandiva/src/test/java/org/apache/arrow/gandiva/evaluator/ProjectorTest.java\n@@ -224,13 +224,13 @@ public void testEvaluate() throws GandivaException, Exception {\n     int numRows = 16;\n     byte[] validity = new byte[]{(byte) 255, 0};\n     // second half is \"undefined\"\n-    int[] values_a = new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};\n-    int[] values_b = new int[]{16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1};\n+    int[] aValues = new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};\n+    int[] bValues = new int[]{16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1};\n \n     ArrowBuf validitya = buf(validity);\n-    ArrowBuf valuesa = intBuf(values_a);\n+    ArrowBuf valuesa = intBuf(aValues);\n     ArrowBuf validityb = buf(validity);\n-    ArrowBuf valuesb = intBuf(values_b);\n+    ArrowBuf valuesb = intBuf(bValues);\n     ArrowRecordBatch batch =\n         new ArrowRecordBatch(\n             numRows,\n@@ -275,13 +275,13 @@ public void testEvaluateDivZero() throws GandivaException, Exception {\n     int numRows = 2;\n     byte[] validity = new byte[]{(byte) 255};\n     // second half is \"undefined\"\n-    int[] values_a = new int[]{2, 2};\n-    int[] values_b = new int[]{1, 0};\n+    int[] aValues = new int[]{2, 2};\n+    int[] bValues = new int[]{1, 0};\n \n     ArrowBuf validitya = buf(validity);\n-    ArrowBuf valuesa = intBuf(values_a);\n+    ArrowBuf valuesa = intBuf(aValues);\n     ArrowBuf validityb = buf(validity);\n-    ArrowBuf valuesb = intBuf(values_b);\n+    ArrowBuf valuesb = intBuf(bValues);\n     ArrowRecordBatch batch = new ArrowRecordBatch(\n         numRows,\n         Lists.newArrayList(new ArrowFieldNode(numRows, 0), new ArrowFieldNode(numRows, 0)),\n@@ -333,19 +333,19 @@ public void testDivZeroParallel() throws GandivaException, InterruptedException\n           Projector evaluator = Projector.make(s, exprs);\n           int numRows = 2;\n           byte[] validity = new byte[]{(byte) 255};\n-          int[] values_a = new int[]{2, 2};\n-          int[] values_b;\n+          int[] aValues = new int[]{2, 2};\n+          int[] bValues;\n           if (i % 2 == 0) {\n             errorCountExp.incrementAndGet();\n-            values_b = new int[]{1, 0};\n+            bValues = new int[]{1, 0};\n           } else {\n-            values_b = new int[]{1, 1};\n+            bValues = new int[]{1, 1};\n           }\n \n           ArrowBuf validitya = buf(validity);\n-          ArrowBuf valuesa = intBuf(values_a);\n+          ArrowBuf valuesa = intBuf(aValues);\n           ArrowBuf validityb = buf(validity);\n-          ArrowBuf valuesb = intBuf(values_b);\n+          ArrowBuf valuesb = intBuf(bValues);\n           ArrowRecordBatch batch = new ArrowRecordBatch(\n               numRows,\n               Lists.newArrayList(new ArrowFieldNode(numRows, 0), new ArrowFieldNode(numRows,\n@@ -378,21 +378,21 @@ public void testDivZeroParallel() throws GandivaException, InterruptedException\n   @Test\n   public void testAdd3() throws GandivaException, Exception {\n     Field x = Field.nullable(\"x\", int32);\n-    Field N2x = Field.nullable(\"N2x\", int32);\n-    Field N3x = Field.nullable(\"N3x\", int32);\n+    Field n2x = Field.nullable(\"n2x\", int32);\n+    Field n3x = Field.nullable(\"n3x\", int32);\n \n     List<TreeNode> args = new ArrayList<TreeNode>();\n \n-    // x + N2x + N3x\n+    // x + n2x + n3x\n     TreeNode add1 =\n         TreeBuilder.makeFunction(\n-            \"add\", Lists.newArrayList(TreeBuilder.makeField(x), TreeBuilder.makeField(N2x)), int32);\n+            \"add\", Lists.newArrayList(TreeBuilder.makeField(x), TreeBuilder.makeField(n2x)), int32);\n     TreeNode add =\n         TreeBuilder.makeFunction(\n-            \"add\", Lists.newArrayList(add1, TreeBuilder.makeField(N3x)), int32);\n+            \"add\", Lists.newArrayList(add1, TreeBuilder.makeField(n3x)), int32);\n     ExpressionTree expr = TreeBuilder.makeExpression(add, x);\n \n-    List<Field> cols = Lists.newArrayList(x, N2x, N3x);\n+    List<Field> cols = Lists.newArrayList(x, n2x, n3x);\n     Schema schema = new Schema(cols);\n \n     Projector eval = Projector.make(schema, Lists.newArrayList(expr));\n@@ -400,25 +400,25 @@ public void testAdd3() throws GandivaException, Exception {\n     int numRows = 16;\n     byte[] validity = new byte[]{(byte) 255, 0};\n     // second half is \"undefined\"\n-    int[] values_x = new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};\n-    int[] values_N2x = new int[]{16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1};\n-    int[] values_N3x = new int[]{1, 2, 3, 4, 4, 3, 2, 1, 5, 6, 7, 8, 8, 7, 6, 5};\n+    int[] xValues = new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};\n+    int[] n2xValues = new int[]{16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1};\n+    int[] n3xValues = new int[]{1, 2, 3, 4, 4, 3, 2, 1, 5, 6, 7, 8, 8, 7, 6, 5};\n \n     int[] expected = new int[]{18, 19, 20, 21, 21, 20, 19, 18, 18, 19, 20, 21, 21, 20, 19, 18};\n \n-    ArrowBuf validity_x = buf(validity);\n-    ArrowBuf data_x = intBuf(values_x);\n-    ArrowBuf validity_N2x = buf(validity);\n-    ArrowBuf data_N2x = intBuf(values_N2x);\n-    ArrowBuf validity_N3x = buf(validity);\n-    ArrowBuf data_N3x = intBuf(values_N3x);\n+    ArrowBuf xValidity = buf(validity);\n+    ArrowBuf xData = intBuf(xValues);\n+    ArrowBuf n2xValidity = buf(validity);\n+    ArrowBuf n2xData = intBuf(n2xValues);\n+    ArrowBuf n3xValidity = buf(validity);\n+    ArrowBuf n3xData = intBuf(n3xValues);\n \n     ArrowFieldNode fieldNode = new ArrowFieldNode(numRows, 8);\n     ArrowRecordBatch batch =\n         new ArrowRecordBatch(\n             numRows,\n             Lists.newArrayList(fieldNode, fieldNode, fieldNode),\n-            Lists.newArrayList(validity_x, data_x, validity_N2x, data_N2x, validity_N3x, data_N3x));\n+            Lists.newArrayList(xValidity, xData, n2xValidity, n2xData, n3xValidity, n3xData));\n \n     IntVector intVector = new IntVector(EMPTY_SCHEMA_PATH, allocator);\n     intVector.allocateNew(numRows);\n@@ -624,9 +624,9 @@ private TreeNode makeLongGreaterThanCond(TreeNode arg, long value) {\n   }\n \n   private TreeNode ifLongLessThanElse(\n-      TreeNode arg, long value, long then_value, TreeNode elseNode, ArrowType type) {\n+      TreeNode arg, long value, long thenValue, TreeNode elseNode, ArrowType type) {\n     return TreeBuilder.makeIf(\n-        makeLongLessThanCond(arg, value), TreeBuilder.makeLiteral(then_value), elseNode, type);\n+        makeLongLessThanCond(arg, value), TreeBuilder.makeLiteral(thenValue), elseNode, type);\n   }\n \n   @Test\n@@ -645,28 +645,28 @@ public void testIf() throws GandivaException, Exception {\n      * else 10\n      */\n     Field x = Field.nullable(\"x\", int64);\n-    TreeNode x_node = TreeBuilder.makeField(x);\n+    TreeNode xNode = TreeBuilder.makeField(x);\n \n     // if (x < 100) then 9 else 10\n-    TreeNode ifLess100 = ifLongLessThanElse(x_node, 100L, 9L, TreeBuilder.makeLiteral(10L), int64);\n+    TreeNode ifLess100 = ifLongLessThanElse(xNode, 100L, 9L, TreeBuilder.makeLiteral(10L), int64);\n     // if (x < 90) then 8 else ifLess100\n-    TreeNode ifLess90 = ifLongLessThanElse(x_node, 90L, 8L, ifLess100, int64);\n+    TreeNode ifLess90 = ifLongLessThanElse(xNode, 90L, 8L, ifLess100, int64);\n     // if (x < 80) then 7 else ifLess90\n-    TreeNode ifLess80 = ifLongLessThanElse(x_node, 80L, 7L, ifLess90, int64);\n+    TreeNode ifLess80 = ifLongLessThanElse(xNode, 80L, 7L, ifLess90, int64);\n     // if (x < 70) then 6 else ifLess80\n-    TreeNode ifLess70 = ifLongLessThanElse(x_node, 70L, 6L, ifLess80, int64);\n+    TreeNode ifLess70 = ifLongLessThanElse(xNode, 70L, 6L, ifLess80, int64);\n     // if (x < 60) then 5 else ifLess70\n-    TreeNode ifLess60 = ifLongLessThanElse(x_node, 60L, 5L, ifLess70, int64);\n+    TreeNode ifLess60 = ifLongLessThanElse(xNode, 60L, 5L, ifLess70, int64);\n     // if (x < 50) then 4 else ifLess60\n-    TreeNode ifLess50 = ifLongLessThanElse(x_node, 50L, 4L, ifLess60, int64);\n+    TreeNode ifLess50 = ifLongLessThanElse(xNode, 50L, 4L, ifLess60, int64);\n     // if (x < 40) then 3 else ifLess50\n-    TreeNode ifLess40 = ifLongLessThanElse(x_node, 40L, 3L, ifLess50, int64);\n+    TreeNode ifLess40 = ifLongLessThanElse(xNode, 40L, 3L, ifLess50, int64);\n     // if (x < 30) then 2 else ifLess40\n-    TreeNode ifLess30 = ifLongLessThanElse(x_node, 30L, 2L, ifLess40, int64);\n+    TreeNode ifLess30 = ifLongLessThanElse(xNode, 30L, 2L, ifLess40, int64);\n     // if (x < 20) then 1 else ifLess30\n-    TreeNode ifLess20 = ifLongLessThanElse(x_node, 20L, 1L, ifLess30, int64);\n+    TreeNode ifLess20 = ifLongLessThanElse(xNode, 20L, 1L, ifLess30, int64);\n     // if (x < 10) then 0 else ifLess20\n-    TreeNode ifLess10 = ifLongLessThanElse(x_node, 10L, 0L, ifLess20, int64);\n+    TreeNode ifLess10 = ifLongLessThanElse(xNode, 10L, 0L, ifLess20, int64);\n \n     ExpressionTree expr = TreeBuilder.makeExpression(ifLess10, x);\n     Schema schema = new Schema(Lists.newArrayList(x));\n@@ -674,16 +674,16 @@ public void testIf() throws GandivaException, Exception {\n \n     int numRows = 16;\n     byte[] validity = new byte[]{(byte) 255, (byte) 255};\n-    long[] values_x = new long[]{9, 15, 21, 32, 43, 54, 65, 76, 87, 98, 109, 200, -10, 60, 77, 80};\n+    long[] xValues = new long[]{9, 15, 21, 32, 43, 54, 65, 76, 87, 98, 109, 200, -10, 60, 77, 80};\n     long[] expected = new long[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 0, 6, 7, 8};\n \n-    ArrowBuf validity_buf = buf(validity);\n-    ArrowBuf data_x = longBuf(values_x);\n+    ArrowBuf bufValidity = buf(validity);\n+    ArrowBuf xData = longBuf(xValues);\n \n     ArrowFieldNode fieldNode = new ArrowFieldNode(numRows, 0);\n     ArrowRecordBatch batch =\n         new ArrowRecordBatch(\n-            numRows, Lists.newArrayList(fieldNode), Lists.newArrayList(validity_buf, data_x));\n+            numRows, Lists.newArrayList(fieldNode), Lists.newArrayList(bufValidity, xData));\n \n     BigIntVector bigIntVector = new BigIntVector(EMPTY_SCHEMA_PATH, allocator);\n     bigIntVector.allocateNew(numRows);\n@@ -710,9 +710,9 @@ public void testAnd() throws GandivaException, Exception {\n     ArrowType int64 = new ArrowType.Int(64, true);\n \n     Field x = Field.nullable(\"x\", int64);\n-    TreeNode x_node = TreeBuilder.makeField(x);\n-    TreeNode gt10 = makeLongGreaterThanCond(x_node, 10);\n-    TreeNode lt20 = makeLongLessThanCond(x_node, 20);\n+    TreeNode xNode = TreeBuilder.makeField(x);\n+    TreeNode gt10 = makeLongGreaterThanCond(xNode, 10);\n+    TreeNode lt20 = makeLongLessThanCond(xNode, 20);\n     TreeNode and = TreeBuilder.makeAnd(Lists.newArrayList(gt10, lt20));\n \n     Field res = Field.nullable(\"res\", boolType);\n@@ -723,16 +723,16 @@ public void testAnd() throws GandivaException, Exception {\n \n     int numRows = 4;\n     byte[] validity = new byte[]{(byte) 255};\n-    long[] values_x = new long[]{9, 15, 17, 25};\n+    long[] xValues = new long[]{9, 15, 17, 25};\n     boolean[] expected = new boolean[]{false, true, true, false};\n \n-    ArrowBuf validity_buf = buf(validity);\n-    ArrowBuf data_x = longBuf(values_x);\n+    ArrowBuf bufValidity = buf(validity);\n+    ArrowBuf xData = longBuf(xValues);\n \n     ArrowFieldNode fieldNode = new ArrowFieldNode(numRows, 0);\n     ArrowRecordBatch batch =\n         new ArrowRecordBatch(\n-            numRows, Lists.newArrayList(fieldNode), Lists.newArrayList(validity_buf, data_x));\n+            numRows, Lists.newArrayList(fieldNode), Lists.newArrayList(bufValidity, xData));\n \n     BitVector bitVector = new BitVector(EMPTY_SCHEMA_PATH, allocator);\n     bitVector.allocateNew(numRows);\n@@ -759,9 +759,9 @@ public void testOr() throws GandivaException, Exception {\n     ArrowType int64 = new ArrowType.Int(64, true);\n \n     Field x = Field.nullable(\"x\", int64);\n-    TreeNode x_node = TreeBuilder.makeField(x);\n-    TreeNode gt10 = makeLongGreaterThanCond(x_node, 10);\n-    TreeNode lt5 = makeLongLessThanCond(x_node, 5);\n+    TreeNode xNode = TreeBuilder.makeField(x);\n+    TreeNode gt10 = makeLongGreaterThanCond(xNode, 10);\n+    TreeNode lt5 = makeLongLessThanCond(xNode, 5);\n     TreeNode or = TreeBuilder.makeOr(Lists.newArrayList(gt10, lt5));\n \n     Field res = Field.nullable(\"res\", boolType);\n@@ -772,16 +772,16 @@ public void testOr() throws GandivaException, Exception {\n \n     int numRows = 4;\n     byte[] validity = new byte[]{(byte) 255};\n-    long[] values_x = new long[]{4, 9, 15, 17};\n+    long[] xValues = new long[]{4, 9, 15, 17};\n     boolean[] expected = new boolean[]{true, false, true, true};\n \n-    ArrowBuf validity_buf = buf(validity);\n-    ArrowBuf data_x = longBuf(values_x);\n+    ArrowBuf bufValidity = buf(validity);\n+    ArrowBuf xData = longBuf(xValues);\n \n     ArrowFieldNode fieldNode = new ArrowFieldNode(numRows, 0);\n     ArrowRecordBatch batch =\n         new ArrowRecordBatch(\n-            numRows, Lists.newArrayList(fieldNode), Lists.newArrayList(validity_buf, data_x));\n+            numRows, Lists.newArrayList(fieldNode), Lists.newArrayList(bufValidity, xData));\n \n     BitVector bitVector = new BitVector(EMPTY_SCHEMA_PATH, allocator);\n     bitVector.allocateNew(numRows);\n@@ -809,10 +809,10 @@ public void testNull() throws GandivaException, Exception {\n     ArrowType int64 = new ArrowType.Int(64, true);\n \n     Field x = Field.nullable(\"x\", int64);\n-    TreeNode x_node = TreeBuilder.makeField(x);\n+    TreeNode xNode = TreeBuilder.makeField(x);\n \n     // if (x < 10) then 1 else null\n-    TreeNode ifLess10 = ifLongLessThanElse(x_node, 10L, 1L, TreeBuilder.makeNull(int64), int64);\n+    TreeNode ifLess10 = ifLongLessThanElse(xNode, 10L, 1L, TreeBuilder.makeNull(int64), int64);\n \n     ExpressionTree expr = TreeBuilder.makeExpression(ifLess10, x);\n     Schema schema = new Schema(Lists.newArrayList(x));\n@@ -820,16 +820,16 @@ public void testNull() throws GandivaException, Exception {\n \n     int numRows = 2;\n     byte[] validity = new byte[]{(byte) 255};\n-    long[] values_x = new long[]{5, 32};\n+    long[] xValues = new long[]{5, 32};\n     long[] expected = new long[]{1, 0};\n \n-    ArrowBuf validity_buf = buf(validity);\n-    ArrowBuf data_x = longBuf(values_x);\n+    ArrowBuf bufValidity = buf(validity);\n+    ArrowBuf xData = longBuf(xValues);\n \n     ArrowFieldNode fieldNode = new ArrowFieldNode(numRows, 0);\n     ArrowRecordBatch batch =\n         new ArrowRecordBatch(\n-            numRows, Lists.newArrayList(fieldNode), Lists.newArrayList(validity_buf, data_x));\n+            numRows, Lists.newArrayList(fieldNode), Lists.newArrayList(bufValidity, xData));\n \n     BigIntVector bigIntVector = new BigIntVector(EMPTY_SCHEMA_PATH, allocator);\n     bigIntVector.allocateNew(numRows);\n@@ -856,23 +856,23 @@ public void testTimeNull() throws GandivaException, Exception {\n     ArrowType time64 = new ArrowType.Time(TimeUnit.MICROSECOND, 64);\n \n     Field x = Field.nullable(\"x\", time64);\n-    TreeNode x_node = TreeBuilder.makeNull(time64);\n+    TreeNode xNode = TreeBuilder.makeNull(time64);\n \n-    ExpressionTree expr = TreeBuilder.makeExpression(x_node, x);\n+    ExpressionTree expr = TreeBuilder.makeExpression(xNode, x);\n     Schema schema = new Schema(Lists.newArrayList(x));\n     Projector eval = Projector.make(schema, Lists.newArrayList(expr));\n \n     int numRows = 2;\n     byte[] validity = new byte[]{(byte) 255};\n-    int[] values_x = new int[]{5, 32};\n+    int[] xValues = new int[]{5, 32};\n \n-    ArrowBuf validity_buf = buf(validity);\n-    ArrowBuf data_x = intBuf(values_x);\n+    ArrowBuf bufValidity = buf(validity);\n+    ArrowBuf xData = intBuf(xValues);\n \n     ArrowFieldNode fieldNode = new ArrowFieldNode(numRows, 0);\n     ArrowRecordBatch batch =\n         new ArrowRecordBatch(\n-            numRows, Lists.newArrayList(fieldNode), Lists.newArrayList(validity_buf, data_x));\n+            numRows, Lists.newArrayList(fieldNode), Lists.newArrayList(bufValidity, xData));\n \n     BigIntVector bigIntVector = new BigIntVector(EMPTY_SCHEMA_PATH, allocator);\n     bigIntVector.allocateNew(numRows);\n@@ -895,42 +895,42 @@ public void testTimeEquals() throws GandivaException, Exception {    /*\n    * else y\n    */\n     Field x = Field.nullable(\"x\", new ArrowType.Time(TimeUnit.MILLISECOND, 32));\n-    TreeNode x_node = TreeBuilder.makeField(x);\n+    TreeNode xNode = TreeBuilder.makeField(x);\n \n     Field y = Field.nullable(\"y\", new ArrowType.Time(TimeUnit.MILLISECOND, 32));\n-    TreeNode y_node = TreeBuilder.makeField(y);\n+    TreeNode yNode = TreeBuilder.makeField(y);\n \n     // if isnotnull(x) then x else y\n-    TreeNode condition = TreeBuilder.makeFunction(\"isnotnull\", Lists.newArrayList(x_node),\n+    TreeNode condition = TreeBuilder.makeFunction(\"isnotnull\", Lists.newArrayList(xNode),\n         boolType);\n-    TreeNode if_coalesce = TreeBuilder.makeIf(\n+    TreeNode ifCoalesce = TreeBuilder.makeIf(\n         condition,\n-        x_node,\n-        y_node,\n+        xNode,\n+        yNode,\n         new ArrowType.Time(TimeUnit.MILLISECOND, 32));\n \n-    ExpressionTree expr = TreeBuilder.makeExpression(if_coalesce, x);\n+    ExpressionTree expr = TreeBuilder.makeExpression(ifCoalesce, x);\n     Schema schema = new Schema(Lists.newArrayList(x, y));\n     Projector eval = Projector.make(schema, Lists.newArrayList(expr));\n \n     int numRows = 2;\n     byte[] validity = new byte[]{(byte) 1};\n-    byte[] validity_y = new byte[]{(byte) 3};\n-    int[] values_x = new int[]{5, 1};\n-    int[] values_y = new int[]{10, 2};\n+    byte[] yValidity = new byte[]{(byte) 3};\n+    int[] xValues = new int[]{5, 1};\n+    int[] yValues = new int[]{10, 2};\n     int[] expected = new int[]{5, 2};\n \n-    ArrowBuf validity_buf = buf(validity);\n-    ArrowBuf data_x = intBuf(values_x);\n+    ArrowBuf bufValidity = buf(validity);\n+    ArrowBuf xData = intBuf(xValues);\n \n-    ArrowBuf validity_buf_y = buf(validity_y);\n-    ArrowBuf data_y = intBuf(values_y);\n+    ArrowBuf yBufValidity = buf(yValidity);\n+    ArrowBuf yData = intBuf(yValues);\n \n     ArrowFieldNode fieldNode = new ArrowFieldNode(numRows, 0);\n     ArrowRecordBatch batch = new ArrowRecordBatch(\n         numRows,\n         Lists.newArrayList(fieldNode),\n-        Lists.newArrayList(validity_buf, data_x, validity_buf_y, data_y));\n+        Lists.newArrayList(bufValidity, xData, yBufValidity, yData));\n \n     IntVector intVector = new IntVector(EMPTY_SCHEMA_PATH, allocator);\n     intVector.allocateNew(numRows);\n@@ -953,26 +953,26 @@ public void testTimeEquals() throws GandivaException, Exception {    /*\n   public void testIsNull() throws GandivaException, Exception {\n     Field x = Field.nullable(\"x\", float64);\n \n-    TreeNode x_node = TreeBuilder.makeField(x);\n-    TreeNode isNull = TreeBuilder.makeFunction(\"isnull\", Lists.newArrayList(x_node), boolType);\n+    TreeNode xNode = TreeBuilder.makeField(x);\n+    TreeNode isNull = TreeBuilder.makeFunction(\"isnull\", Lists.newArrayList(xNode), boolType);\n     ExpressionTree expr = TreeBuilder.makeExpression(isNull, Field.nullable(\"result\", boolType));\n     Schema schema = new Schema(Lists.newArrayList(x));\n     Projector eval = Projector.make(schema, Lists.newArrayList(expr));\n \n     int numRows = 16;\n     byte[] validity = new byte[]{(byte) 255, 0};\n-    double[] values_x =\n+    double[] xValues =\n         new double[]{\n             1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0\n         };\n \n-    ArrowBuf validity_buf = buf(validity);\n-    ArrowBuf data_x = doubleBuf(values_x);\n+    ArrowBuf bufValidity = buf(validity);\n+    ArrowBuf xData = doubleBuf(xValues);\n \n     ArrowFieldNode fieldNode = new ArrowFieldNode(numRows, 0);\n     ArrowRecordBatch batch =\n         new ArrowRecordBatch(\n-            numRows, Lists.newArrayList(fieldNode), Lists.newArrayList(validity_buf, data_x));\n+            numRows, Lists.newArrayList(fieldNode), Lists.newArrayList(bufValidity, xData));\n \n     BitVector bitVector = new BitVector(EMPTY_SCHEMA_PATH, allocator);\n     bitVector.allocateNew(numRows);\n@@ -998,30 +998,30 @@ public void testEquals() throws GandivaException, Exception {\n     Field c1 = Field.nullable(\"c1\", int32);\n     Field c2 = Field.nullable(\"c2\", int32);\n \n-    TreeNode c1_Node = TreeBuilder.makeField(c1);\n-    TreeNode c2_Node = TreeBuilder.makeField(c2);\n+    TreeNode c1Node = TreeBuilder.makeField(c1);\n+    TreeNode c2Node = TreeBuilder.makeField(c2);\n     TreeNode equals =\n-        TreeBuilder.makeFunction(\"equal\", Lists.newArrayList(c1_Node, c2_Node), boolType);\n+        TreeBuilder.makeFunction(\"equal\", Lists.newArrayList(c1Node, c2Node), boolType);\n     ExpressionTree expr = TreeBuilder.makeExpression(equals, Field.nullable(\"result\", boolType));\n     Schema schema = new Schema(Lists.newArrayList(c1, c2));\n     Projector eval = Projector.make(schema, Lists.newArrayList(expr));\n \n     int numRows = 16;\n     byte[] validity = new byte[]{(byte) 255, 0};\n-    int[] values_c1 = new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};\n-    int[] values_c2 = new int[]{1, 2, 3, 4, 8, 7, 6, 5, 16, 15, 14, 13, 12, 11, 10, 9};\n+    int[] c1Values = new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};\n+    int[] c2Values = new int[]{1, 2, 3, 4, 8, 7, 6, 5, 16, 15, 14, 13, 12, 11, 10, 9};\n \n-    ArrowBuf validity_c1 = buf(validity);\n-    ArrowBuf data_c1 = intBuf(values_c1);\n-    ArrowBuf validity_c2 = buf(validity);\n-    ArrowBuf data_c2 = intBuf(values_c2);\n+    ArrowBuf c1Validity = buf(validity);\n+    ArrowBuf c1Data = intBuf(c1Values);\n+    ArrowBuf c2Validity = buf(validity);\n+    ArrowBuf c2Data = intBuf(c2Values);\n \n     ArrowFieldNode fieldNode = new ArrowFieldNode(numRows, 0);\n     ArrowRecordBatch batch =\n         new ArrowRecordBatch(\n             numRows,\n             Lists.newArrayList(fieldNode, fieldNode),\n-            Lists.newArrayList(validity_c1, data_c1, validity_c2, data_c2));\n+            Lists.newArrayList(c1Validity, c1Data, c2Validity, c2Data));\n \n     BitVector bitVector = new BitVector(EMPTY_SCHEMA_PATH, allocator);\n     bitVector.allocateNew(numRows);\n@@ -1062,18 +1062,18 @@ public void testSmallOutputVectors() throws GandivaException, Exception {\n     int numRows = 16;\n     byte[] validity = new byte[]{(byte) 255, 0};\n     // second half is \"undefined\"\n-    int[] values_a = new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};\n-    int[] values_b = new int[]{16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1};\n+    int[] aValues = new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};\n+    int[] bValues = new int[]{16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1};\n \n-    ArrowBuf validity_a = buf(validity);\n-    ArrowBuf data_a = intBuf(values_a);\n-    ArrowBuf validity_b = buf(validity);\n-    ArrowBuf data_b = intBuf(values_b);\n+    ArrowBuf aValidity = buf(validity);\n+    ArrowBuf aData = intBuf(aValues);\n+    ArrowBuf bValidity = buf(validity);\n+    ArrowBuf bData = intBuf(bValues);\n     ArrowRecordBatch batch =\n         new ArrowRecordBatch(\n             numRows,\n             Lists.newArrayList(new ArrowFieldNode(numRows, 8), new ArrowFieldNode(numRows, 8)),\n-            Lists.newArrayList(validity_a, data_a, validity_b, data_b));\n+            Lists.newArrayList(aValidity, aData, bValidity, bData));\n \n     IntVector intVector = new IntVector(EMPTY_SCHEMA_PATH, allocator);\n \n@@ -1167,17 +1167,17 @@ public void testDateTime() throws GandivaException, Exception {\n             expYearFromDate, expMonthFromDate, expDayFromDate, expHourFromDate, expMinFromDate\n         };\n \n-    ArrowBuf validity_buf = buf(validity);\n-    ArrowBuf data_millis = stringToMillis(values);\n-    ArrowBuf validity_buf2 = buf(validity);\n-    ArrowBuf data_millis2 = stringToMillis(values);\n+    ArrowBuf bufValidity = buf(validity);\n+    ArrowBuf millisData = stringToMillis(values);\n+    ArrowBuf buf2Validity = buf(validity);\n+    ArrowBuf millis2Data = stringToMillis(values);\n \n     ArrowFieldNode fieldNode = new ArrowFieldNode(numRows, 0);\n     ArrowRecordBatch batch =\n         new ArrowRecordBatch(\n             numRows,\n             Lists.newArrayList(fieldNode, fieldNode),\n-            Lists.newArrayList(validity_buf, data_millis, validity_buf2, data_millis2));\n+            Lists.newArrayList(bufValidity, millisData, buf2Validity, millis2Data));\n \n     List<ValueVector> output = new ArrayList<ValueVector>();\n     for (int i = 0; i < exprs.size(); i++) {\n@@ -1207,11 +1207,11 @@ public void testUnknownFunction() {\n     Field c1 = Field.nullable(\"c1\", int8);\n     Field c2 = Field.nullable(\"c2\", int8);\n \n-    TreeNode c1_Node = TreeBuilder.makeField(c1);\n-    TreeNode c2_Node = TreeBuilder.makeField(c2);\n+    TreeNode c1Node = TreeBuilder.makeField(c1);\n+    TreeNode c2Node = TreeBuilder.makeField(c2);\n \n     TreeNode unknown =\n-        TreeBuilder.makeFunction(\"xxx_yyy\", Lists.newArrayList(c1_Node, c2_Node), int8);\n+        TreeBuilder.makeFunction(\"xxx_yyy\", Lists.newArrayList(c1Node, c2Node), int8);\n     ExpressionTree expr = TreeBuilder.makeExpression(unknown, Field.nullable(\"result\", int8));\n     Schema schema = new Schema(Lists.newArrayList(c1, c2));\n     boolean caughtException = false;\ndiff --git a/java/memory/src/main/java/org/apache/arrow/memory/LowCostIdentityHashMap.java b/java/memory/src/main/java/org/apache/arrow/memory/LowCostIdentityHashMap.java\nindex fabca6c576..c96717f6cb 100644\n--- a/java/memory/src/main/java/org/apache/arrow/memory/LowCostIdentityHashMap.java\n+++ b/java/memory/src/main/java/org/apache/arrow/memory/LowCostIdentityHashMap.java\n@@ -47,7 +47,7 @@\n   private static final int DEFAULT_MIN_SIZE = 1;\n \n   /* Default load factor of 0.75; */\n-  private static final int loadFactor = 7500;\n+  private static final int LOAD_FACTOR = 7500;\n \n   /**\n    * Creates an Map with default expected maximum size.\n@@ -80,7 +80,7 @@ private int getThreshold(int maxSize) {\n   }\n \n   private int computeElementArraySize() {\n-    int arraySize = (int) (((long) threshold * 10000) / loadFactor);\n+    int arraySize = (int) (((long) threshold * 10000) / LOAD_FACTOR);\n     // ensure arraySize is positive, the above cast from long to int type\n     // leads to overflow and negative arraySize if threshold is too big\n     return arraySize < 0 ? -arraySize : arraySize;\n@@ -197,17 +197,16 @@ static int getModuloHash(Object key, int length) {\n    */\n   public V put(V value) {\n     Preconditions.checkNotNull(value);\n-    K _key = value.getKey();\n-    Preconditions.checkNotNull(_key);\n-    V _value = value;\n+    K key = value.getKey();\n+    Preconditions.checkNotNull(key);\n \n-    int index = findIndex(_key, elementData);\n+    int index = findIndex(key, elementData);\n \n     // if the key doesn't exist in the table\n-    if (elementData[index] == null || ((V)elementData[index]).getKey() != _key) {\n+    if (elementData[index] == null || ((V)elementData[index]).getKey() != key) {\n       if (++size > threshold) {\n         rehash();\n-        index = findIndex(_key, elementData);\n+        index = findIndex(key, elementData);\n       }\n \n       // insert the key and assign the value to null initially\n@@ -216,7 +215,7 @@ public V put(V value) {\n \n     // insert value to where it needs to go, return the old value\n     Object result = elementData[index];\n-    elementData[index] = _value;\n+    elementData[index] = value;\n \n     return (V) result;\n   }\n@@ -241,7 +240,7 @@ void rehash() {\n   }\n \n   private void computeMaxSize() {\n-    threshold = (int) ((long) (elementData.length) * loadFactor / 10000);\n+    threshold = (int) ((long) (elementData.length) * LOAD_FACTOR / 10000);\n   }\n \n   /**\ndiff --git a/java/plasma/src/main/java/org/apache/arrow/plasma/PlasmaClientJNI.java b/java/plasma/src/main/java/org/apache/arrow/plasma/PlasmaClientJNI.java\nindex f0cf385a57..daea2091be 100644\n--- a/java/plasma/src/main/java/org/apache/arrow/plasma/PlasmaClientJNI.java\n+++ b/java/plasma/src/main/java/org/apache/arrow/plasma/PlasmaClientJNI.java\n@@ -25,27 +25,27 @@\n  */\n public class PlasmaClientJNI {\n \n-  native public static long connect(String store_socket_name, String manager_socket_name, int release_delay);\n+  native public static long connect(String storeSocketName, String managerSocketName, int releaseDelay);\n \n   native public static void disconnect(long conn);\n \n-  native public static ByteBuffer create(long conn, byte[] object_id, int size, byte[] metadata);\n+  native public static ByteBuffer create(long conn, byte[] objectId, int size, byte[] metadata);\n \n-  native public static byte[] hash(long conn, byte[] object_id);\n+  native public static byte[] hash(long conn, byte[] objectId);\n \n-  native public static void seal(long conn, byte[] object_id);\n+  native public static void seal(long conn, byte[] objectId);\n \n-  native public static void release(long conn, byte[] object_id);\n+  native public static void release(long conn, byte[] objectId);\n \n-  native public static ByteBuffer[][] get(long conn, byte[][] object_ids, int timeout_ms);\n+  native public static ByteBuffer[][] get(long conn, byte[][] objectIds, int timeoutMs);\n \n-  native public static boolean contains(long conn, byte[] object_id);\n+  native public static boolean contains(long conn, byte[] objectId);\n \n-  native public static void fetch(long conn, byte[][] object_ids);\n+  native public static void fetch(long conn, byte[][] objectIds);\n \n-  native public static byte[][] wait(long conn, byte[][] object_ids, int timeout_ms,\n-      int num_returns);\n+  native public static byte[][] wait(long conn, byte[][] objectIds, int timeoutMs,\n+      int numReturns);\n \n-  native public static long evict(long conn, long num_bytes);\n+  native public static long evict(long conn, long numBytes);\n \n }\ndiff --git a/java/vector/src/test/java/org/apache/arrow/vector/TestValueVector.java b/java/vector/src/test/java/org/apache/arrow/vector/TestValueVector.java\nindex 0f5909304f..cc6d80418d 100644\n--- a/java/vector/src/test/java/org/apache/arrow/vector/TestValueVector.java\n+++ b/java/vector/src/test/java/org/apache/arrow/vector/TestValueVector.java\n@@ -882,9 +882,9 @@ public void testNullableVarType1() {\n       vector.set(2, STR3);\n       vector.setSafe(3, STR3, 1, STR3.length - 1);\n       vector.setSafe(4, STR3, 2, STR3.length - 2);\n-      ByteBuffer STR3ByteBuffer = ByteBuffer.wrap(STR3);\n-      vector.setSafe(5, STR3ByteBuffer, 1, STR3.length - 1);\n-      vector.setSafe(6, STR3ByteBuffer, 2, STR3.length - 2);\n+      ByteBuffer str3ByteBuffer = ByteBuffer.wrap(STR3);\n+      vector.setSafe(5, str3ByteBuffer, 1, STR3.length - 1);\n+      vector.setSafe(6, str3ByteBuffer, 2, STR3.length - 2);\n \n       // Set with convenience function\n       Text txt = new Text(\"foo\");\n@@ -926,9 +926,9 @@ public void testNullableVarType2() {\n       vector.set(2, STR3);\n       vector.setSafe(3, STR3, 1, STR3.length - 1);\n       vector.setSafe(4, STR3, 2, STR3.length - 2);\n-      ByteBuffer STR3ByteBuffer = ByteBuffer.wrap(STR3);\n-      vector.setSafe(5, STR3ByteBuffer, 1, STR3.length - 1);\n-      vector.setSafe(6, STR3ByteBuffer, 2, STR3.length - 2);\n+      ByteBuffer str3ByteBuffer = ByteBuffer.wrap(STR3);\n+      vector.setSafe(5, str3ByteBuffer, 1, STR3.length - 1);\n+      vector.setSafe(6, str3ByteBuffer, 2, STR3.length - 2);\n \n       // Check the sample strings.\n       assertArrayEquals(STR1, vector.get(0));\ndiff --git a/java/vector/src/test/java/org/apache/arrow/vector/ipc/TestArrowStreamPipe.java b/java/vector/src/test/java/org/apache/arrow/vector/ipc/TestArrowStreamPipe.java\nindex 9ec9a078f7..97110d5583 100644\n--- a/java/vector/src/test/java/org/apache/arrow/vector/ipc/TestArrowStreamPipe.java\n+++ b/java/vector/src/test/java/org/apache/arrow/vector/ipc/TestArrowStreamPipe.java\n@@ -146,7 +146,7 @@ public long bytesRead() {\n   // Starts up a producer and consumer thread to read/write batches.\n   @Test\n   public void pipeTest() throws IOException, InterruptedException {\n-    int NUM_BATCHES = 10;\n+    final int NUM_BATCHES = 10;\n     Pipe pipe = Pipe.open();\n     WriterThread writer = new WriterThread(NUM_BATCHES, pipe.sink());\n     ReaderThread reader = new ReaderThread(pipe.source());\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-20T16:09:06.410+0000",
                    "updated": "2018-10-20T16:09:06.410+0000",
                    "started": "2018-10-20T16:09:06.409+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "156542",
                    "issueId": "13187090"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
            "id": "7",
            "description": "The sub-task of the issue",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
            "name": "Sub-task",
            "subtask": true,
            "avatarId": 21146
        },
        "timespent": 12600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@79894255[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@36d0d189[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2797bc77[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@177b6d95[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6ce39d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@6ac39178[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@70adfc53[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@3c763016[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5be14c0e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@2d5f4e5b[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@328f60c7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@3ff40000[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 12600,
        "customfield_12312520": null,
        "customfield_12312521": "Sat Oct 20 16:08:54 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-10-20T16:08:54.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3323/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2018-09-24T17:34:28.000+0000",
        "updated": "2018-10-22T21:29:52.000+0000",
        "timeoriginalestimate": null,
        "description": "enable naming rules",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "3.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 12600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Java] checkstyle - fix naming",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13187090/comment/16657896",
                    "id": "16657896",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 2621\n[https://github.com/apache/arrow/pull/2621]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-10-20T16:08:54.708+0000",
                    "updated": "2018-10-20T16:08:54.708+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|i3yfkf:",
        "customfield_12314139": null
    }
}