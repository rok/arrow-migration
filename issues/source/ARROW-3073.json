{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13179606",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13179606",
    "key": "ARROW-3073",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12342901",
                "id": "12342901",
                "description": "",
                "name": "JS-0.4.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-02-11"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bhulette",
            "name": "bhulette",
            "key": "bhulette",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Brian Hulette",
            "active": true,
            "timeZone": "America/Vancouver"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12332552",
                "id": "12332552",
                "name": "JavaScript"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bhulette",
            "name": "bhulette",
            "key": "bhulette",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Brian Hulette",
            "active": true,
            "timeZone": "America/Vancouver"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bhulette",
            "name": "bhulette",
            "key": "bhulette",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Brian Hulette",
            "active": true,
            "timeZone": "America/Vancouver"
        },
        "aggregateprogress": {
            "progress": 5400,
            "total": 5400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 5400,
            "total": 5400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3073/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 9,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13179606/worklog/135736",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "TheNeuralBit opened a new pull request #2445: ARROW-3073,3074: [JS] Add DateVector.from and fix DateVector.indexOf\nURL: https://github.com/apache/arrow/pull/2445\n \n \n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-17T16:17:35.808+0000",
                    "updated": "2018-08-17T16:17:35.808+0000",
                    "started": "2018-08-17T16:17:35.807+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "135736",
                    "issueId": "13179606"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13179606/worklog/135762",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "TheNeuralBit commented on issue #2445: ARROW-3073,3074: [JS] Add DateVector.from and fix DateVector.indexOf\nURL: https://github.com/apache/arrow/pull/2445#issuecomment-413939905\n \n \n   Looks like I broke the integration tests, I'll take a look tonight\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-17T17:46:19.486+0000",
                    "updated": "2018-08-17T17:46:19.486+0000",
                    "started": "2018-08-17T17:46:19.486+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "135762",
                    "issueId": "13179606"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13179606/worklog/137004",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #2445: ARROW-3073,3074: [JS] Add DateVector.from and fix DateVector.indexOf\nURL: https://github.com/apache/arrow/pull/2445#issuecomment-415089243\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/2445?src=pr&el=h1) Report\n   > Merging [#2445](https://codecov.io/gh/apache/arrow/pull/2445?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/4969da7a629e94d059b875956dc4f041bddf6d20?src=pr&el=desc) will **decrease** coverage by `0.02%`.\n   > The diff coverage is `n/a`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/2445/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/2445?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #2445      +/-   ##\n   ==========================================\n   - Coverage   86.15%   86.13%   -0.03%     \n   ==========================================\n     Files         306      306              \n     Lines       46667    46667              \n   ==========================================\n   - Hits        40208    40198      -10     \n   - Misses       6389     6395       +6     \n   - Partials       70       74       +4\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/2445?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [go/arrow/math/int64\\_avx2\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2445/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC9pbnQ2NF9hdngyX2FtZDY0Lmdv) | `0% <0%> (-100%)` | :arrow_down: |\n   | [go/arrow/math/float64\\_avx2\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2445/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC9mbG9hdDY0X2F2eDJfYW1kNjQuZ28=) | `0% <0%> (-100%)` | :arrow_down: |\n   | [go/arrow/memory/memory\\_avx2\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2445/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWVtb3J5L21lbW9yeV9hdngyX2FtZDY0Lmdv) | `0% <0%> (-100%)` | :arrow_down: |\n   | [go/arrow/math/uint64\\_avx2\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2445/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC91aW50NjRfYXZ4Ml9hbWQ2NC5nbw==) | `0% <0%> (-100%)` | :arrow_down: |\n   | [go/arrow/memory/memory\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2445/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWVtb3J5L21lbW9yeV9hbWQ2NC5nbw==) | `28.57% <0%> (-14.29%)` | :arrow_down: |\n   | [go/arrow/math/math\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2445/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC9tYXRoX2FtZDY0Lmdv) | `31.57% <0%> (-5.27%)` | :arrow_down: |\n   | [go/arrow/math/uint64\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2445/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC91aW50NjRfYW1kNjQuZ28=) | `33.33% <0%> (\u00f8)` | :arrow_up: |\n   | [go/arrow/math/float64\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2445/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC9mbG9hdDY0X2FtZDY0Lmdv) | `33.33% <0%> (\u00f8)` | :arrow_up: |\n   | [go/arrow/math/int64\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2445/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC9pbnQ2NF9hbWQ2NC5nbw==) | `33.33% <0%> (\u00f8)` | :arrow_up: |\n   | [go/arrow/math/float64\\_sse4\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2445/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC9mbG9hdDY0X3NzZTRfYW1kNjQuZ28=) | `100% <0%> (+100%)` | :arrow_up: |\n   | ... and [3 more](https://codecov.io/gh/apache/arrow/pull/2445/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/2445?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/2445?src=pr&el=footer). Last update [4969da7...fc88589](https://codecov.io/gh/apache/arrow/pull/2445?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-22T16:12:53.729+0000",
                    "updated": "2018-08-22T16:12:53.729+0000",
                    "started": "2018-08-22T16:12:53.729+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "137004",
                    "issueId": "13179606"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13179606/worklog/137379",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io edited a comment on issue #2445: ARROW-3073,3074: [JS] Add DateVector.from and fix DateVector.indexOf\nURL: https://github.com/apache/arrow/pull/2445#issuecomment-415089243\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/2445?src=pr&el=h1) Report\n   > Merging [#2445](https://codecov.io/gh/apache/arrow/pull/2445?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/4969da7a629e94d059b875956dc4f041bddf6d20?src=pr&el=desc) will **increase** coverage by `0.01%`.\n   > The diff coverage is `n/a`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/2445/graphs/tree.svg?token=LpTCFbqVT1&width=650&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/2445?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #2445      +/-   ##\n   ==========================================\n   + Coverage   86.15%   86.17%   +0.01%     \n   ==========================================\n     Files         306      306              \n     Lines       46667    46691      +24     \n   ==========================================\n   + Hits        40208    40234      +26     \n   + Misses       6389     6387       -2     \n     Partials       70       70\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/2445?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [cpp/src/arrow/python/python\\_to\\_arrow.cc](https://codecov.io/gh/apache/arrow/pull/2445/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9weXRob24vcHl0aG9uX3RvX2Fycm93LmNj) | `89.57% <0%> (+0.04%)` | :arrow_up: |\n   | [python/pyarrow/tests/test\\_serialization.py](https://codecov.io/gh/apache/arrow/pull/2445/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvdGVzdHMvdGVzdF9zZXJpYWxpemF0aW9uLnB5) | `90.12% <0%> (+0.32%)` | :arrow_up: |\n   | [cpp/src/arrow/python/serialize.cc](https://codecov.io/gh/apache/arrow/pull/2445/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9weXRob24vc2VyaWFsaXplLmNj) | `89.59% <0%> (+0.7%)` | :arrow_up: |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/2445?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/2445?src=pr&el=footer). Last update [4969da7...e87495b](https://codecov.io/gh/apache/arrow/pull/2445?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-23T13:32:52.134+0000",
                    "updated": "2018-08-23T13:32:52.134+0000",
                    "started": "2018-08-23T13:32:52.134+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "137379",
                    "issueId": "13179606"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13179606/worklog/137400",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "TheNeuralBit commented on issue #2445: ARROW-3073,3074: [JS] Add DateVector.from and fix DateVector.indexOf\nURL: https://github.com/apache/arrow/pull/2445#issuecomment-415436501\n \n \n   Any objections @trxcllnt?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-23T14:27:56.432+0000",
                    "updated": "2018-08-23T14:27:56.432+0000",
                    "started": "2018-08-23T14:27:56.432+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "137400",
                    "issueId": "13179606"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13179606/worklog/137638",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "trxcllnt commented on a change in pull request #2445: ARROW-3073,3074: [JS] Add DateVector.from and fix DateVector.indexOf\nURL: https://github.com/apache/arrow/pull/2445#discussion_r212503908\n \n \n\n ##########\n File path: js/src/vector/flat.ts\n ##########\n @@ -183,6 +183,15 @@ export class DateDayView extends PrimitiveView<Date_> {\n \n export class DateMillisecondView extends FixedSizeView<Date_> {\n     public toArray() { return [...this]; }\n+    public indexOf(search: Date) {\n+        let index = 0;\n+        for (let value of this) {\n+            if (value.getTime() === search.getTime()) { return index; }\n \n Review comment:\n   @TheNeuralBit One way to optimize this search is to store the result of `search.valueOf()` at the start and apply a view that doesn't convert the raw bytes to dates. We can move this function to be an override of `indexOf()` on the DateVector itself, then it can look like this:\r\n   ```ts\r\n   class DateVector {\r\n       indexOf(search: Date) {\r\n           return this.asEpochMilliseconds().indexOf(search.valueOf());\r\n       }\r\n   }\r\n   ```\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-24T01:57:58.544+0000",
                    "updated": "2018-08-24T01:57:58.544+0000",
                    "started": "2018-08-24T01:57:58.543+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "137638",
                    "issueId": "13179606"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13179606/worklog/138416",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "TheNeuralBit commented on a change in pull request #2445: ARROW-3073,3074: [JS] Add DateVector.from and fix DateVector.indexOf\nURL: https://github.com/apache/arrow/pull/2445#discussion_r212998966\n \n \n\n ##########\n File path: js/src/vector/flat.ts\n ##########\n @@ -183,6 +183,15 @@ export class DateDayView extends PrimitiveView<Date_> {\n \n export class DateMillisecondView extends FixedSizeView<Date_> {\n     public toArray() { return [...this]; }\n+    public indexOf(search: Date) {\n+        let index = 0;\n+        for (let value of this) {\n+            if (value.getTime() === search.getTime()) { return index; }\n \n Review comment:\n   of course! good call, adding the change now\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-27T14:37:22.735+0000",
                    "updated": "2018-08-27T14:37:22.735+0000",
                    "started": "2018-08-27T14:37:22.734+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "138416",
                    "issueId": "13179606"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13179606/worklog/139873",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2445: ARROW-3073,3074: [JS] Add DateVector.from and fix DateVector.indexOf\nURL: https://github.com/apache/arrow/pull/2445#issuecomment-417451486\n \n \n   Is this good to go? I can also test out the fix to the merge tool\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-30T20:11:08.748+0000",
                    "updated": "2018-08-30T20:11:08.748+0000",
                    "started": "2018-08-30T20:11:08.747+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "139873",
                    "issueId": "13179606"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13179606/worklog/148997",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "TheNeuralBit closed pull request #2445: ARROW-3073,3074: [JS] Add DateVector.from and fix DateVector.indexOf\nURL: https://github.com/apache/arrow/pull/2445\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/js/src/Arrow.externs.js b/js/src/Arrow.externs.js\nindex 8f284d2828..f01ea5cedc 100644\n--- a/js/src/Arrow.externs.js\n+++ b/js/src/Arrow.externs.js\n@@ -195,6 +195,12 @@ Uint64.add = function() {};\n /** @type {?} */\n Uint64.multiply = function() {};\n /** @type {?} */\n+Uint64.from = function() {};\n+/** @type {?} */\n+Uint64.fromNumber = function() {};\n+/** @type {?} */\n+Uint64.fromString = function() {};\n+/** @type {?} */\n Uint64.prototype.times;\n /** @type {?} */\n Uint64.prototype.plus\n@@ -205,6 +211,10 @@ Int64.add = function() {};\n /** @type {?} */\n Int64.multiply = function() {};\n /** @type {?} */\n+Int64.from = function() {};\n+/** @type {?} */\n+Int64.fromNumber = function() {};\n+/** @type {?} */\n Int64.fromString = function() {};\n /** @type {?} */\n Int64.prototype.negate\n@@ -221,6 +231,10 @@ Int128.add = function() {};\n /** @type {?} */\n Int128.multiply = function() {};\n /** @type {?} */\n+Int128.from = function() {};\n+/** @type {?} */\n+Int128.fromNumber = function() {};\n+/** @type {?} */\n Int128.fromString = function() {};\n /** @type {?} */\n Int128.prototype.negate\n@@ -539,6 +553,8 @@ FloatVector.from = function() {};\n \n var DateVector = function() {};\n /** @type {?} */\n+DateVector.from = function() {};\n+/** @type {?} */\n DateVector.prototype.asEpochMilliseconds;\n var DecimalVector = function() {};\n var TimeVector = function() {};\ndiff --git a/js/src/Arrow.ts b/js/src/Arrow.ts\nindex 61556c4a5b..b1f4a3a4fa 100644\n--- a/js/src/Arrow.ts\n+++ b/js/src/Arrow.ts\n@@ -246,14 +246,24 @@ RecordBatch['from'] = RecordBatch.from;\n \n util_int_.Uint64['add'] = util_int_.Uint64.add;\n util_int_.Uint64['multiply'] = util_int_.Uint64.multiply;\n+util_int_.Uint64['from'] = util_int_.Uint64.from;\n+util_int_.Uint64['fromNumber'] = util_int_.Uint64.fromNumber;\n+util_int_.Uint64['fromString'] = util_int_.Uint64.fromString;\n+util_int_.Uint64['convertArray'] = util_int_.Uint64.convertArray;\n \n util_int_.Int64['add'] = util_int_.Int64.add;\n util_int_.Int64['multiply'] = util_int_.Int64.multiply;\n+util_int_.Int64['from'] = util_int_.Int64.from;\n+util_int_.Int64['fromNumber'] = util_int_.Int64.fromNumber;\n util_int_.Int64['fromString'] = util_int_.Int64.fromString;\n+util_int_.Int64['convertArray'] = util_int_.Int64.convertArray;\n \n util_int_.Int128['add'] = util_int_.Int128.add;\n util_int_.Int128['multiply'] = util_int_.Int128.multiply;\n+util_int_.Int128['from'] = util_int_.Int128.from;\n+util_int_.Int128['fromNumber'] = util_int_.Int128.fromNumber;\n util_int_.Int128['fromString'] = util_int_.Int128.fromString;\n+util_int_.Int128['convertArray'] = util_int_.Int128.convertArray;\n \n data_.ChunkedData['computeOffsets'] = data_.ChunkedData.computeOffsets;\n \n@@ -301,6 +311,7 @@ type_.DataType['isMap'] = type_.DataType.isMap;\n type_.DataType['isDictionary'] = type_.DataType.isDictionary;\n \n vector_.BoolVector['from'] = vector_.BoolVector.from;\n+vector_.DateVector['from'] = vector_.DateVector.from;\n vector_.IntVector['from'] = vector_.IntVector.from;\n vector_.FloatVector['from'] = vector_.FloatVector.from;\n \ndiff --git a/js/src/ipc/reader/json.ts b/js/src/ipc/reader/json.ts\nindex e8ab498f9a..0f0c018d66 100644\n--- a/js/src/ipc/reader/json.ts\n+++ b/js/src/ipc/reader/json.ts\n@@ -100,13 +100,13 @@ export class JSONDataLoader extends TypeDataLoader {\n     protected readData<T extends DataType>(type: T, { offset }: BufferMetadata = this.getBufferMetadata()) {\n         const { sources } = this;\n         if (DataType.isTimestamp(type) === true) {\n-            return new Uint8Array(int64DataFromJSON(sources[offset] as string[]));\n+            return new Uint8Array(IntUtil.Int64.convertArray(sources[offset] as string[]).buffer);\n         } else if ((DataType.isInt(type) || DataType.isTime(type)) && type.bitWidth === 64) {\n-            return new Uint8Array(int64DataFromJSON(sources[offset] as string[]));\n+            return new Uint8Array(IntUtil.Int64.convertArray(sources[offset] as string[]).buffer);\n         } else if (DataType.isDate(type) && type.unit === DateUnit.MILLISECOND) {\n-            return new Uint8Array(int64DataFromJSON(sources[offset] as string[]));\n+            return new Uint8Array(IntUtil.Int64.convertArray(sources[offset] as string[]).buffer);\n         } else if (DataType.isDecimal(type) === true) {\n-            return new Uint8Array(decimalDataFromJSON(sources[offset] as string[]));\n+            return new Uint8Array(IntUtil.Int128.convertArray(sources[offset] as string[]).buffer);\n         } else if (DataType.isBinary(type) === true || DataType.isFixedSizeBinary(type) === true) {\n             return new Uint8Array(binaryDataFromJSON(sources[offset] as string[]));\n         } else if (DataType.isBool(type) === true) {\n@@ -119,28 +119,6 @@ export class JSONDataLoader extends TypeDataLoader {\n     }\n }\n \n-function int64DataFromJSON(values: string[]) {\n-    const data = new Uint32Array(values.length * 2);\n-    for (let i = -1, n = values.length; ++i < n;) {\n-        // Force all values (even numbers) to be parsed as strings since\n-        // pulling out high and low bits seems to lose precision sometimes\n-        // For example:\n-        //     > -4613034156400212000 >>> 0\n-        //     721782784\n-        // The correct lower 32-bits are 721782752\n-        IntUtil.Int64.fromString(values[i].toString(), new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));\n-    }\n-    return data.buffer;\n-}\n-\n-function decimalDataFromJSON(values: string[]) {\n-    const data = new Uint32Array(values.length * 4);\n-    for (let i = -1, n = values.length; ++i < n;) {\n-        IntUtil.Int128.fromString(values[i], new Uint32Array(data.buffer, data.byteOffset + 4 * 4 * i, 4));\n-    }\n-    return data.buffer;\n-}\n-\n function binaryDataFromJSON(values: string[]) {\n     // \"DATA\": [\"49BC7D5B6C47D2\",\"3F5FB6D9322026\"]\n     // There are definitely more efficient ways to do this... but it gets the\ndiff --git a/js/src/util/int.ts b/js/src/util/int.ts\nindex 9088e7b995..5b9497f5aa 100644\n--- a/js/src/util/int.ts\n+++ b/js/src/util/int.ts\n@@ -118,6 +118,50 @@ export class Uint64 extends BaseInt64 {\n         return this;\n     }\n \n+    static from(val: any, out_buffer = new Uint32Array(2)): Uint64 {\n+        return Uint64.fromString(\n+            typeof(val) === 'string' ? val : val.toString(),\n+            out_buffer\n+        );\n+    }\n+\n+    static fromNumber(num: number, out_buffer = new Uint32Array(2)): Uint64 {\n+        // Always parse numbers as strings - pulling out high and low bits\n+        // directly seems to lose precision sometimes\n+        // For example:\n+        //     > -4613034156400212000 >>> 0\n+        //     721782784\n+        // The correct lower 32-bits are 721782752\n+        return Uint64.fromString(num.toString(), out_buffer);\n+    }\n+\n+    static fromString(str: string, out_buffer = new Uint32Array(2)): Uint64 {\n+        const length = str.length;\n+\n+        let out = new Uint64(out_buffer);\n+        for (let posn = 0; posn < length;) {\n+            const group = kInt32DecimalDigits < length - posn ?\n+                          kInt32DecimalDigits : length - posn;\n+            const chunk = new Uint64(new Uint32Array([parseInt(str.substr(posn, group), 10), 0]));\n+            const multiple = new Uint64(new Uint32Array([kPowersOfTen[group], 0]));\n+\n+            out.times(multiple);\n+            out.plus(chunk);\n+\n+            posn += group;\n+        }\n+\n+        return out;\n+    }\n+\n+    static convertArray(values: (string|number)[]): Uint32Array {\n+        const data = new Uint32Array(values.length * 2);\n+        for (let i = -1, n = values.length; ++i < n;) {\n+            Uint64.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));\n+        }\n+        return data;\n+    }\n+\n     static multiply(left: Uint64, right: Uint64): Uint64 {\n         let rtrn = new Uint64(new Uint32Array(left.buffer));\n         return rtrn.times(right);\n@@ -156,6 +200,23 @@ export class Int64 extends BaseInt64 {\n             (this_high === other_high && this.buffer[0] < other.buffer[0]);\n     }\n \n+    static from(val: any, out_buffer = new Uint32Array(2)): Int64 {\n+        return Int64.fromString(\n+            typeof(val) === 'string' ? val : val.toString(),\n+            out_buffer\n+        );\n+    }\n+\n+    static fromNumber(num: number, out_buffer = new Uint32Array(2)): Int64 {\n+        // Always parse numbers as strings - pulling out high and low bits\n+        // directly seems to lose precision sometimes\n+        // For example:\n+        //     > -4613034156400212000 >>> 0\n+        //     721782784\n+        // The correct lower 32-bits are 721782752\n+        return Int64.fromString(num.toString(), out_buffer);\n+    }\n+\n     static fromString(str: string, out_buffer = new Uint32Array(2)): Int64 {\n         // TODO: Assert that out_buffer is 0 and length = 2\n         const negate = str.startsWith('-');\n@@ -173,10 +234,17 @@ export class Int64 extends BaseInt64 {\n \n             posn += group;\n         }\n-\n         return negate ? out.negate() : out;\n     }\n \n+    static convertArray(values: (string|number)[]): Uint32Array {\n+        const data = new Uint32Array(values.length * 2);\n+        for (let i = -1, n = values.length; ++i < n;) {\n+            Int64.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));\n+        }\n+        return data;\n+    }\n+\n     static multiply(left: Int64, right: Int64): Int64 {\n         let rtrn = new Int64(new Uint32Array(left.buffer));\n         return rtrn.times(right);\n@@ -297,6 +365,23 @@ export class Int128 {\n         return rtrn.plus(right);\n     }\n \n+    static from(val: any, out_buffer = new Uint32Array(4)): Int128 {\n+        return Int128.fromString(\n+            typeof(val) === 'string' ? val : val.toString(),\n+            out_buffer\n+        );\n+    }\n+\n+    static fromNumber(num: number, out_buffer = new Uint32Array(4)): Int128 {\n+        // Always parse numbers as strings - pulling out high and low bits\n+        // directly seems to lose precision sometimes\n+        // For example:\n+        //     > -4613034156400212000 >>> 0\n+        //     721782784\n+        // The correct lower 32-bits are 721782752\n+        return Int128.fromString(num.toString(), out_buffer);\n+    }\n+\n     static fromString(str: string, out_buffer = new Uint32Array(4)): Int128 {\n         // TODO: Assert that out_buffer is 0 and length = 4\n         const negate = str.startsWith('-');\n@@ -317,4 +402,13 @@ export class Int128 {\n \n         return negate ? out.negate() : out;\n     }\n+\n+    static convertArray(values: (string|number)[]): Uint32Array {\n+        // TODO: Distinguish between string and number at compile-time\n+        const data = new Uint32Array(values.length * 4);\n+        for (let i = -1, n = values.length; ++i < n;) {\n+            Int128.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 4 * 4 * i, 4));\n+        }\n+        return data;\n+    }\n }\ndiff --git a/js/src/vector.ts b/js/src/vector.ts\nindex 8eb591bc45..b01f4207cc 100644\n--- a/js/src/vector.ts\n+++ b/js/src/vector.ts\n@@ -19,6 +19,7 @@ import { Data, ChunkedData, FlatData, BoolData, FlatListData, NestedData, Dictio\n import { VisitorNode, TypeVisitor, VectorVisitor } from './visitor';\n import { DataType, ListType, FlatType, NestedType, FlatListType, TimeUnit } from './type';\n import { IterableArrayLike, Precision, DateUnit, IntervalUnit, UnionMode } from './type';\n+import * as IntUtil from './util/int';\n \n export interface VectorLike { length: number; nullCount: number; }\n \n@@ -259,6 +260,19 @@ export class FloatVector<T extends Float = Float<any>> extends FlatVector<T> {\n }\n \n export class DateVector extends FlatVector<Date_> {\n+    static from(data: Date[], unit: DateUnit = DateUnit.MILLISECOND): DateVector {\n+        const type_ = new Date_(unit);\n+        const converted =\n+            unit === DateUnit.MILLISECOND ?\n+            IntUtil.Int64.convertArray(data.map((d) => d.valueOf())) :\n+            unit === DateUnit.DAY ?\n+            Int32Array.from(data.map((d) => d.valueOf() / 86400000)) :\n+            undefined;\n+        if (converted === undefined) {\n+            throw new TypeError(`Unrecognized date unit \"${DateUnit[unit]}\"`);\n+        }\n+        return new DateVector(new FlatData(type_, data.length, null, converted));\n+    }\n     static defaultView<T extends Date_>(data: Data<T>) {\n         return data.type.unit === DateUnit.DAY ? new DateDayView(data) : new DateMillisecondView(data, 2);\n     }\n@@ -279,6 +293,9 @@ export class DateVector extends FlatVector<Date_> {\n         }\n         throw new TypeError(`Unrecognized date unit \"${DateUnit[this.type.unit]}\"`);\n     }\n+    public indexOf(search: Date) {\n+        return this.asEpochMilliseconds().indexOf(search.valueOf());\n+    }\n }\n \n export class DecimalVector extends FlatVector<Decimal> {\ndiff --git a/js/test/unit/int-tests.ts b/js/test/unit/int-tests.ts\nindex fbd92e7c73..4214600163 100644\n--- a/js/test/unit/int-tests.ts\n+++ b/js/test/unit/int-tests.ts\n@@ -63,6 +63,15 @@ describe(`Uint64`, () => {\n         let b = new Uint64(new Uint32Array([568, 32]));\n         expect(a.lessThan(b)).toBeTruthy();\n     });\n+    test(`fromString parses string`, () => {\n+        expect(Uint64.fromString('6789123456789')).toEqual(new Int64(new Uint32Array([0xb74abf15, 0x62c])));\n+    });\n+    test(`fromString parses big (full unsigned 64-bit) string`, () => {\n+        expect(Uint64.fromString('18364758544493064720')).toEqual(new Uint64(new Uint32Array([0x76543210, 0xfedcba98])));\n+    });\n+    test(`fromNumber converts 53-ish bit number`, () => {\n+        expect(Uint64.fromNumber(8086463330923024)).toEqual(new Uint64(new Uint32Array([0x76543210, 0x001cba98])));\n+    });\n });\n \n describe(`Int64`, () => {\n@@ -150,6 +159,10 @@ describe(`Int64`, () => {\n     test(`fromString parses negative string`, () => {\n         expect(Int64.fromString('-6789123456789')).toEqual(new Int64(new Uint32Array([0x48b540eb, 0xfffff9d3])));\n     });\n+    test(`fromNumber converts 53-ish bit number`, () => {\n+        expect(Int64.fromNumber(8086463330923024)).toEqual(new Int64(new Uint32Array([0x76543210, 0x001cba98])));\n+        expect(Int64.fromNumber(-8086463330923024)).toEqual(new Int64(new Uint32Array([0x89abcdf0, 0xffe34567])));\n+    });\n });\n \n describe(`Int128`, () => {\n@@ -221,4 +234,8 @@ describe(`Int128`, () => {\n                                                 0x0ffdccec,\n                                                 0xf6b64f09])));\n     });\n+    test(`fromNumber converts 53-ish bit number`, () => {\n+        expect(Int128.fromNumber(8086463330923024)).toEqual(new Int128(new Uint32Array([0x76543210, 0x001cba98, 0, 0])));\n+        expect(Int128.fromNumber(-8086463330923024)).toEqual(new Int128(new Uint32Array([0x89abcdf0, 0xffe34567, 0xffffffff, 0xffffffff])));\n+    });\n });\ndiff --git a/js/test/unit/vector-tests.ts b/js/test/unit/vector-tests.ts\nindex d25e0e9fde..7b46890abf 100644\n--- a/js/test/unit/vector-tests.ts\n+++ b/js/test/unit/vector-tests.ts\n@@ -23,7 +23,7 @@ const utf8Encoder = new TextEncoder('utf-8');\n \n const { packBools } = Arrow.util;\n const { BoolData, FlatData, FlatListData, DictionaryData } = Arrow.data;\n-const { Vector, IntVector, FloatVector, BoolVector, Utf8Vector, DictionaryVector } = Arrow.vector;\n+const { Vector, IntVector, FloatVector, BoolVector, Utf8Vector, DateVector, DictionaryVector } = Arrow.vector;\n const {\n     Dictionary, Utf8, Bool,\n     Float16, Float32, Float64,\n@@ -31,6 +31,8 @@ const {\n     Uint8, Uint16, Uint32, Uint64,\n } = Arrow.type;\n \n+const { DateUnit } = Arrow.enum_;\n+\n const FixedSizeVectors = {\n     Int64Vector: [IntVector, Int64] as [typeof IntVector, typeof Int64],\n     Uint64Vector: [IntVector, Uint64] as [typeof IntVector, typeof Uint64],\n@@ -317,6 +319,34 @@ describe(`Utf8Vector`, () => {\n     });\n });\n \n+describe(`DateVector`, () => {\n+    const extras = [\n+        new Date(2000, 0, 1),\n+        new Date(1991, 5, 28, 12, 11, 10)\n+    ];\n+    describe(`unit = MILLISECOND`, () => {\n+        const values = [\n+            new Date(1989, 5, 22, 1, 2, 3),\n+            new Date(1988, 3, 25, 4, 5, 6),\n+            new Date(1987, 2, 24, 7, 8, 9),\n+            new Date(2018, 4, 12, 17, 30, 0)\n+        ];\n+        const vector = DateVector.from(values);\n+        basicVectorTests(vector, values, extras);\n+    });\n+    describe(`unit = DAY`, () => {\n+        // Use UTC to ensure that dates are always at midnight\n+        const values = [\n+            new Date(Date.UTC(1989, 5, 22)),\n+            new Date(Date.UTC(1988, 3, 25)),\n+            new Date(Date.UTC(1987, 2, 24)),\n+            new Date(Date.UTC(2018, 4, 12))\n+        ];\n+        const vector = DateVector.from(values, DateUnit.DAY);\n+        basicVectorTests(vector, values, extras);\n+    });\n+});\n+\n describe(`DictionaryVector`, () => {\n     const dictionary = ['foo', 'bar', 'baz'];\n     const extras = ['abc', '123']; // values to search for that should NOT be found\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-28T01:45:01.764+0000",
                    "updated": "2018-09-28T01:45:01.764+0000",
                    "started": "2018-09-28T01:45:01.764+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "148997",
                    "issueId": "13179606"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 5400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@447d968[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@410a0d98[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@410aa735[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@507d0441[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@64a7ca9a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@7ae83218[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6ecf117f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@56285feb[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@c01bcae[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@37c227c4[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@21108caa[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@35d34864[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 5400,
        "customfield_12312520": null,
        "customfield_12312521": "Fri Sep 28 01:45:04 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-09-28T01:45:04.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3073/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2018-08-17T15:16:57.000+0000",
        "updated": "2018-09-28T01:45:04.000+0000",
        "timeoriginalestimate": null,
        "description": "It should be possible to construct a {{DateVector}} from a list of Date objects",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "1.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 5400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[JS] Add DateVector.from",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13179606/comment/16631248",
                    "id": "16631248",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bhulette",
                        "name": "bhulette",
                        "key": "bhulette",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Brian Hulette",
                        "active": true,
                        "timeZone": "America/Vancouver"
                    },
                    "body": "Issue resolved by pull request 2445\n[https://github.com/apache/arrow/pull/2445]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bhulette",
                        "name": "bhulette",
                        "key": "bhulette",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Brian Hulette",
                        "active": true,
                        "timeZone": "America/Vancouver"
                    },
                    "created": "2018-09-28T01:45:04.210+0000",
                    "updated": "2018-09-28T01:45:04.210+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|i3x5qv:",
        "customfield_12314139": null
    }
}