{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13190873",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190873",
    "key": "ARROW-3487",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343858",
                "id": "12343858",
                "description": "",
                "name": "0.12.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-01-20"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=pravindra",
            "name": "pravindra",
            "key": "pravindra",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34055",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34055",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34055",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34055"
            },
            "displayName": "Pindikura Ravindra",
            "active": true,
            "timeZone": "Asia/Kolkata"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12334626",
                "id": "12334626",
                "name": "C++ - Gandiva"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=pravindra",
            "name": "pravindra",
            "key": "pravindra",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34055",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34055",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34055",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34055"
            },
            "displayName": "Pindikura Ravindra",
            "active": true,
            "timeZone": "Asia/Kolkata"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=pravindra",
            "name": "pravindra",
            "key": "pravindra",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34055",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34055",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34055",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34055"
            },
            "displayName": "Pindikura Ravindra",
            "active": true,
            "timeZone": "Asia/Kolkata"
        },
        "aggregateprogress": {
            "progress": 4800,
            "total": 4800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 4800,
            "total": 4800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3487/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 9,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190873/worklog/158853",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pravindra opened a new pull request #2840:  ARROW-3487: [Gandiva] simplify fns that return errors\nURL: https://github.com/apache/arrow/pull/2840\n \n \n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-25T19:17:05.045+0000",
                    "updated": "2018-10-25T19:17:05.045+0000",
                    "started": "2018-10-25T19:17:05.044+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "158853",
                    "issueId": "13190873"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190873/worklog/158964",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pravindra commented on issue #2840:  ARROW-3487: [Gandiva] simplify fns that return errors\nURL: https://github.com/apache/arrow/pull/2840#issuecomment-433270493\n \n \n   @praveenbingo @pitrou can you please review this change ?\r\n   \r\n   The travis tests passed except for the R build, which is unrelated to my change.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-26T02:59:06.093+0000",
                    "updated": "2018-10-26T02:59:06.093+0000",
                    "started": "2018-10-26T02:59:06.092+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "158964",
                    "issueId": "13190873"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190873/worklog/159009",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "praveenbingo commented on a change in pull request #2840:  ARROW-3487: [Gandiva] simplify fns that return errors\nURL: https://github.com/apache/arrow/pull/2840#discussion_r228419637\n \n \n\n ##########\n File path: cpp/src/gandiva/native_function.h\n ##########\n @@ -39,28 +39,32 @@ enum ResultNullableType {\n /// precompiled function.\n class NativeFunction {\n  public:\n+  // fucntion attributes.\n+  static constexpr int32_t NEEDS_CONTEXT = (1 << 1);\n+  static constexpr int32_t NEEDS_FUNCTION_HOLDER = (1 << 2);\n+  static constexpr int32_t CAN_RETURN_ERRORS = (1 << 3);\n+\n   const FunctionSignature& signature() const { return signature_; }\n   std::string pc_name() const { return pc_name_; }\n   ResultNullableType result_nullable_type() const { return result_nullable_type_; }\n-  bool needs_holder() const { return needs_holder_; }\n-  bool needs_context() const { return needs_context_; }\n+\n+  bool NeedsContext() const { return (flags_ & NEEDS_CONTEXT) != 0; }\n \n Review comment:\n   nice one :)\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-26T06:58:50.885+0000",
                    "updated": "2018-10-26T06:58:50.885+0000",
                    "started": "2018-10-26T06:58:50.884+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "159009",
                    "issueId": "13190873"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190873/worklog/159041",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pravindra commented on issue #2840:  ARROW-3487: [Gandiva] simplify fns that return errors\nURL: https://github.com/apache/arrow/pull/2840#issuecomment-433339730\n \n \n   @pitrou - can you please merge this ?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-26T09:02:38.246+0000",
                    "updated": "2018-10-26T09:02:38.246+0000",
                    "started": "2018-10-26T09:02:38.245+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "159041",
                    "issueId": "13190873"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190873/worklog/159063",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2840:  ARROW-3487: [Gandiva] simplify fns that return errors\nURL: https://github.com/apache/arrow/pull/2840#discussion_r228466076\n \n \n\n ##########\n File path: cpp/src/gandiva/native_function.h\n ##########\n @@ -39,28 +39,32 @@ enum ResultNullableType {\n /// precompiled function.\n class NativeFunction {\n  public:\n+  // fucntion attributes.\n+  static constexpr int32_t NEEDS_CONTEXT = (1 << 1);\n+  static constexpr int32_t NEEDS_FUNCTION_HOLDER = (1 << 2);\n+  static constexpr int32_t CAN_RETURN_ERRORS = (1 << 3);\n \n Review comment:\n   Should use `kMacroName` style\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-26T09:46:41.241+0000",
                    "updated": "2018-10-26T09:46:41.241+0000",
                    "started": "2018-10-26T09:46:41.240+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "159063",
                    "issueId": "13190873"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190873/worklog/159064",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2840:  ARROW-3487: [Gandiva] simplify fns that return errors\nURL: https://github.com/apache/arrow/pull/2840#discussion_r228466645\n \n \n\n ##########\n File path: cpp/src/gandiva/precompiled/time_test.cc\n ##########\n @@ -31,58 +31,22 @@ timestamp StringToTimestamp(const char* buf) {\n }\n \n TEST(TestTime, TestCastDate) {\n-  const char* date = \"1967-12-1\";\n   ExecutionContext context;\n-  bool valid;\n-  int64_t cast_to_date = castDATE_utf8(date, 9, true, (int64_t)&context, &valid);\n-  EXPECT_EQ(cast_to_date, -65836800000);\n-  EXPECT_EQ(valid, true);\n-\n-  const char* date1 = \"1972-12-1\";\n-  cast_to_date = castDATE_utf8(date1, 9, true, (int64_t)&context, &valid);\n-  EXPECT_EQ(cast_to_date, 92016000000);\n-  EXPECT_EQ(valid, true);\n-\n-  const char* date2 = \"1972222222\";\n-  cast_to_date = castDATE_utf8(date2, 10, true, (int64_t)&context, &valid);\n-  EXPECT_EQ(cast_to_date, 0);\n+\n+  EXPECT_EQ(castDATE_utf8((int64_t)&context, \"1967-12-1\", 9), -65836800000);\n \n Review comment:\n   C-style casts\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-26T09:46:41.248+0000",
                    "updated": "2018-10-26T09:46:41.248+0000",
                    "started": "2018-10-26T09:46:41.248+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "159064",
                    "issueId": "13190873"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190873/worklog/159065",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2840:  ARROW-3487: [Gandiva] simplify fns that return errors\nURL: https://github.com/apache/arrow/pull/2840#discussion_r228467097\n \n \n\n ##########\n File path: cpp/src/gandiva/tests/generate_data.h\n ##########\n @@ -91,7 +103,7 @@ class FastUtf8DataGenerator : public DataGenerator<std::string> {\n     return cur_char_;\n   }\n \n-  std::random_device random_;\n+  Random random_;\n   unsigned int max_len_;\n   char cur_char_;\n };\n \n Review comment:\n   We should merge all of this data generation with the code in `arrow/test-util.h`, probably create `arrow/util/random.h`. cc @pitrou \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-26T09:46:41.254+0000",
                    "updated": "2018-10-26T09:46:41.254+0000",
                    "started": "2018-10-26T09:46:41.253+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "159065",
                    "issueId": "13190873"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190873/worklog/159070",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm closed pull request #2840: ARROW-3487: [Gandiva] simplify fns that return errors\nURL: https://github.com/apache/arrow/pull/2840\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/cpp/src/gandiva/execution_context.h b/cpp/src/gandiva/execution_context.h\nindex 8a529eeb1f..c3c863c6b8 100644\n--- a/cpp/src/gandiva/execution_context.h\n+++ b/cpp/src/gandiva/execution_context.h\n@@ -37,6 +37,8 @@ class ExecutionContext {\n \n   bool has_error() const { return !error_msg_.empty(); }\n \n+  void Reset() { error_msg_.clear(); }\n+\n  private:\n   std::string error_msg_;\n };\ndiff --git a/cpp/src/gandiva/expr_decomposer.cc b/cpp/src/gandiva/expr_decomposer.cc\nindex 2f37dd552c..a46c16e5c6 100644\n--- a/cpp/src/gandiva/expr_decomposer.cc\n+++ b/cpp/src/gandiva/expr_decomposer.cc\n@@ -79,7 +79,7 @@ Status ExprDecomposer::Visit(const FunctionNode& in_node) {\n \n   // Make a function holder, if required.\n   std::shared_ptr<FunctionHolder> holder;\n-  if (native_function->needs_holder()) {\n+  if (native_function->NeedsFunctionHolder()) {\n     auto status = FunctionHolderRegistry::Make(desc->name(), node, &holder);\n     GANDIVA_RETURN_NOT_OK(status);\n   }\ndiff --git a/cpp/src/gandiva/function_registry.cc b/cpp/src/gandiva/function_registry.cc\nindex 81bbdbf986..a8aecb15c5 100644\n--- a/cpp/src/gandiva/function_registry.cc\n+++ b/cpp/src/gandiva/function_registry.cc\n@@ -55,13 +55,13 @@ using std::vector;\n // - can return error.\n //\n // The pre-compiled fn name includes the base name & input type names. eg. add_int32_int32\n-#define BINARY_UNSAFE_NULL_INTERNAL(NAME, IN_TYPE, OUT_TYPE)                    \\\n-  NativeFunction(#NAME, DataTypeVector{IN_TYPE(), IN_TYPE()}, OUT_TYPE(),       \\\n-                 RESULT_NULL_INTERNAL, STRINGIFY(NAME##_##IN_TYPE##_##IN_TYPE), \\\n-                 false /* does not need holder */, true /* can return error */)\n+#define BINARY_UNSAFE_NULL_IF_NULL(NAME, IN_TYPE, OUT_TYPE)                    \\\n+  NativeFunction(#NAME, DataTypeVector{IN_TYPE(), IN_TYPE()}, OUT_TYPE(),      \\\n+                 RESULT_NULL_IF_NULL, STRINGIFY(NAME##_##IN_TYPE##_##IN_TYPE), \\\n+                 NativeFunction::NEEDS_CONTEXT | NativeFunction::CAN_RETURN_ERRORS)\n \n-// Divide function\n-#define DIVIDE(NAME, TYPE) BINARY_UNSAFE_NULL_INTERNAL(NAME, TYPE, TYPE)\n+#define BINARY_SYMMETRIC_UNSAFE_NULL_IF_NULL(NAME, TYPE) \\\n+  BINARY_UNSAFE_NULL_IF_NULL(NAME, TYPE, TYPE)\n \n // Binary functions that :\n // - have different input types, or output type\n@@ -103,10 +103,10 @@ using std::vector;\n // - NULL handling is of type NULL_INTERNAL\n //\n // The pre-compiled fn name includes the base name & input type name. eg. castFloat_int32\n-#define UNARY_UNSAFE_NULL_INTERNAL(NAME, IN_TYPE, OUT_TYPE)                          \\\n-  NativeFunction(#NAME, DataTypeVector{IN_TYPE()}, OUT_TYPE(), RESULT_NULL_INTERNAL, \\\n-                 STRINGIFY(NAME##_##IN_TYPE), false /* does not need holder */,      \\\n-                 true /* can return error */)\n+#define UNARY_UNSAFE_NULL_IF_NULL(NAME, IN_TYPE, OUT_TYPE)                          \\\n+  NativeFunction(#NAME, DataTypeVector{IN_TYPE()}, OUT_TYPE(), RESULT_NULL_IF_NULL, \\\n+                 STRINGIFY(NAME##_##IN_TYPE),                                       \\\n+                 NativeFunction::NEEDS_CONTEXT | NativeFunction::CAN_RETURN_ERRORS)\n \n // Binary functions that :\n // - NULL handling is of type NULL_NEVER\n@@ -190,7 +190,7 @@ NativeFunction FunctionRegistry::pc_registry_[] = {\n     NUMERIC_TYPES(BINARY_SYMMETRIC_SAFE_NULL_IF_NULL, add),\n     NUMERIC_TYPES(BINARY_SYMMETRIC_SAFE_NULL_IF_NULL, subtract),\n     NUMERIC_TYPES(BINARY_SYMMETRIC_SAFE_NULL_IF_NULL, multiply),\n-    NUMERIC_TYPES(DIVIDE, divide),\n+    NUMERIC_TYPES(BINARY_SYMMETRIC_UNSAFE_NULL_IF_NULL, divide),\n     BINARY_GENERIC_SAFE_NULL_IF_NULL(mod, int64, int32, int32),\n     BINARY_GENERIC_SAFE_NULL_IF_NULL(mod, int64, int64, int64),\n     NUMERIC_BOOL_DATE_TYPES(BINARY_RELATIONAL_SAFE_NULL_IF_NULL, equal),\n@@ -239,12 +239,12 @@ NativeFunction FunctionRegistry::pc_registry_[] = {\n     UNARY_SAFE_NULL_IF_NULL(log10, float32, float64),\n     UNARY_SAFE_NULL_IF_NULL(log10, float64, float64),\n \n-    BINARY_UNSAFE_NULL_INTERNAL(log, int32, float64),\n-    BINARY_UNSAFE_NULL_INTERNAL(log, int64, float64),\n-    BINARY_UNSAFE_NULL_INTERNAL(log, uint32, float64),\n-    BINARY_UNSAFE_NULL_INTERNAL(log, uint64, float64),\n-    BINARY_UNSAFE_NULL_INTERNAL(log, float32, float64),\n-    BINARY_UNSAFE_NULL_INTERNAL(log, float64, float64),\n+    BINARY_UNSAFE_NULL_IF_NULL(log, int32, float64),\n+    BINARY_UNSAFE_NULL_IF_NULL(log, int64, float64),\n+    BINARY_UNSAFE_NULL_IF_NULL(log, uint32, float64),\n+    BINARY_UNSAFE_NULL_IF_NULL(log, uint64, float64),\n+    BINARY_UNSAFE_NULL_IF_NULL(log, float32, float64),\n+    BINARY_UNSAFE_NULL_IF_NULL(log, float64, float64),\n \n     BINARY_SYMMETRIC_SAFE_NULL_IF_NULL(power, float64),\n \n@@ -401,9 +401,9 @@ NativeFunction FunctionRegistry::pc_registry_[] = {\n     UNARY_SAFE_NULL_IF_NULL(octet_length, binary, int32),\n     UNARY_SAFE_NULL_IF_NULL(bit_length, utf8, int32),\n     UNARY_SAFE_NULL_IF_NULL(bit_length, binary, int32),\n-    UNARY_UNSAFE_NULL_INTERNAL(char_length, utf8, int32),\n-    UNARY_UNSAFE_NULL_INTERNAL(length, utf8, int32),\n-    UNARY_UNSAFE_NULL_INTERNAL(lengthUtf8, binary, int32),\n+    UNARY_UNSAFE_NULL_IF_NULL(char_length, utf8, int32),\n+    UNARY_UNSAFE_NULL_IF_NULL(length, utf8, int32),\n+    UNARY_UNSAFE_NULL_IF_NULL(lengthUtf8, binary, int32),\n \n     VAR_LEN_TYPES(BINARY_RELATIONAL_SAFE_NULL_IF_NULL, equal),\n     VAR_LEN_TYPES(BINARY_RELATIONAL_SAFE_NULL_IF_NULL, not_equal),\n@@ -416,17 +416,16 @@ NativeFunction FunctionRegistry::pc_registry_[] = {\n     BINARY_RELATIONAL_SAFE_NULL_IF_NULL(ends_with, utf8),\n \n     NativeFunction(\"like\", DataTypeVector{utf8(), utf8()}, boolean(), RESULT_NULL_IF_NULL,\n-                   \"gdv_fn_like_utf8_utf8\", true /*needs_holder*/),\n-\n-    NativeFunction(\"to_date\", DataTypeVector{utf8(), utf8(), int32()}, date64(),\n-                   RESULT_NULL_INTERNAL, \"gdv_fn_to_date_utf8_utf8_int32\", true, true),\n+                   \"gdv_fn_like_utf8_utf8\", NativeFunction::NEEDS_FUNCTION_HOLDER),\n \n-    NativeFunction(\"castDATE\", DataTypeVector{utf8()}, date64(), RESULT_NULL_INTERNAL,\n-                   \"castDATE_utf8\", false /*needs_holder*/, true /*needs context*/),\n+    NativeFunction(\"castDATE\", DataTypeVector{utf8()}, date64(), RESULT_NULL_IF_NULL,\n+                   \"castDATE_utf8\",\n+                   NativeFunction::NEEDS_CONTEXT | NativeFunction::CAN_RETURN_ERRORS),\n \n-    // Null internal (sample)\n-    NativeFunction(\"half_or_null\", DataTypeVector{int32()}, int32(), RESULT_NULL_INTERNAL,\n-                   \"half_or_null_int32\"),\n+    NativeFunction(\"to_date\", DataTypeVector{utf8(), utf8(), int32()}, date64(),\n+                   RESULT_NULL_INTERNAL, \"gdv_fn_to_date_utf8_utf8_int32\",\n+                   NativeFunction::NEEDS_CONTEXT | NativeFunction::NEEDS_FUNCTION_HOLDER |\n+                       NativeFunction::CAN_RETURN_ERRORS),\n };  // namespace gandiva\n \n FunctionRegistry::iterator FunctionRegistry::begin() const {\ndiff --git a/cpp/src/gandiva/gdv_function_stubs.cc b/cpp/src/gandiva/gdv_function_stubs.cc\nindex 26e38b42a7..5eacdf769d 100644\n--- a/cpp/src/gandiva/gdv_function_stubs.cc\n+++ b/cpp/src/gandiva/gdv_function_stubs.cc\n@@ -36,14 +36,15 @@ bool gdv_fn_like_utf8_utf8(int64_t ptr, const char* data, int data_len,\n   return (*holder)(std::string(data, data_len));\n }\n \n-int64_t gdv_fn_to_date_utf8_utf8_int32(int64_t ptr, const char* data, int data_len,\n-                                       bool in1_validity, const char* pattern,\n-                                       int pattern_len, bool in2_validity,\n-                                       int32_t suppress_errors, bool in3_validity,\n-                                       int64_t execution_context, bool* out_valid) {\n-  gandiva::ToDateHolder* holder = reinterpret_cast<gandiva::ToDateHolder*>(ptr);\n-  return (*holder)(std::string(data, data_len), in1_validity, execution_context,\n-                   out_valid);\n+int64_t gdv_fn_to_date_utf8_utf8_int32(int64_t context_ptr, int64_t holder_ptr,\n+                                       const char* data, int data_len, bool in1_validity,\n+                                       const char* pattern, int pattern_len,\n+                                       bool in2_validity, int32_t suppress_errors,\n+                                       bool in3_validity, bool* out_valid) {\n+  gandiva::ExecutionContext* context =\n+      reinterpret_cast<gandiva::ExecutionContext*>(context_ptr);\n+  gandiva::ToDateHolder* holder = reinterpret_cast<gandiva::ToDateHolder*>(holder_ptr);\n+  return (*holder)(context, std::string(data, data_len), in1_validity, out_valid);\n }\n \n bool gdv_fn_in_expr_lookup_int32(int64_t ptr, int32_t value, bool in_validity) {\n@@ -91,7 +92,8 @@ void ExportedStubFunctions::AddMappings(Engine* engine) const {\n                                   reinterpret_cast<void*>(gdv_fn_like_utf8_utf8));\n \n   // gdv_fn_to_date_utf8_utf8_int32\n-  args = {types->i64_type(),                   // int64_t ptr\n+  args = {types->i64_type(),                   // int64_t execution_context\n+          types->i64_type(),                   // int64_t holder_ptr\n           types->i8_ptr_type(),                // const char* data\n           types->i32_type(),                   // int data_len\n           types->i1_type(),                    // bool in1_validity\n@@ -100,7 +102,6 @@ void ExportedStubFunctions::AddMappings(Engine* engine) const {\n           types->i1_type(),                    // bool in2_validity\n           types->i32_type(),                   // int32_t suppress_errors\n           types->i1_type(),                    // bool in3_validity\n-          types->i64_type(),                   // int64_t execution_context\n           types->ptr_type(types->i8_type())};  // bool* out_valid\n \n   engine->AddGlobalMappingForFunc(\ndiff --git a/cpp/src/gandiva/gdv_function_stubs.h b/cpp/src/gandiva/gdv_function_stubs.h\nindex 6cba06529b..6d2c3a3d58 100644\n--- a/cpp/src/gandiva/gdv_function_stubs.h\n+++ b/cpp/src/gandiva/gdv_function_stubs.h\n@@ -26,11 +26,11 @@ extern \"C\" {\n bool gdv_fn_like_utf8_utf8(int64_t ptr, const char* data, int data_len,\n                            const char* pattern, int pattern_len);\n \n-int64_t gdv_fn_to_date_utf8_utf8_int32(int64_t ptr, const char* data, int data_len,\n-                                       bool in1_validity, const char* pattern,\n-                                       int pattern_len, bool in2_validity,\n-                                       int32_t suppress_errors, bool in3_validity,\n-                                       int64_t execution_context, bool* out_valid);\n+int64_t gdv_fn_to_date_utf8_utf8_int32(int64_t context, int64_t ptr, const char* data,\n+                                       int data_len, bool in1_validity,\n+                                       const char* pattern, int pattern_len,\n+                                       bool in2_validity, int32_t suppress_errors,\n+                                       bool in3_validity, bool* out_valid);\n \n void gdv_fn_context_set_error_msg(int64_t context_ptr, const char* err_msg);\n \ndiff --git a/cpp/src/gandiva/llvm_generator.cc b/cpp/src/gandiva/llvm_generator.cc\nindex 6ac2f95d2f..46f42e16fe 100644\n--- a/cpp/src/gandiva/llvm_generator.cc\n+++ b/cpp/src/gandiva/llvm_generator.cc\n@@ -559,36 +559,63 @@ void LLVMGenerator::Visitor::Visit(const LiteralDex& dex) {\n }\n \n void LLVMGenerator::Visitor::Visit(const NonNullableFuncDex& dex) {\n-  ADD_VISITOR_TRACE(\"visit NonNullableFunc base function \" +\n-                    dex.func_descriptor()->name());\n-  LLVMTypes* types = generator_->types();\n+  const std::string& function_name = dex.func_descriptor()->name();\n+  ADD_VISITOR_TRACE(\"visit NonNullableFunc base function \" + function_name);\n \n   const NativeFunction* native_function = dex.native_function();\n \n   // build the function params (ignore validity).\n   auto params = BuildParams(dex.function_holder().get(), dex.args(), false,\n-                            native_function->needs_context());\n+                            native_function->NeedsContext());\n \n-  llvm::Type* ret_type = types->IRType(native_function->signature().ret_type()->id());\n+  if (native_function->CanReturnErrors()) {\n+    // slow path : if a function can return errors, skip invoking the function\n+    // unless all of the input args are valid. Otherwise, it can cause spurious errors.\n \n-  llvm::Value* value =\n-      generator_->AddFunctionCall(native_function->pc_name(), ret_type, params);\n-  result_.reset(new LValue(value));\n+    llvm::IRBuilder<>* builder = ir_builder();\n+    LLVMTypes* types = generator_->types();\n+    auto result_type = types->IRType(native_function->signature().ret_type()->id());\n+\n+    // Build combined validity of the args.\n+    llvm::Value* is_valid = types->true_constant();\n+    for (auto& pair : dex.args()) {\n+      auto arg_validity = BuildCombinedValidity(pair->validity_exprs());\n+      is_valid = builder->CreateAnd(is_valid, arg_validity, \"validityBitAnd\");\n+    }\n+\n+    // then block\n+    auto then_lambda = [&] {\n+      ADD_VISITOR_TRACE(\"fn \" + function_name +\n+                        \" can return errors : all args valid, invoke fn\");\n+      llvm::Value* then_value = BuildFunctionCall(native_function, params);\n+      return std::make_shared<LValue>(then_value);\n+    };\n+\n+    // else block\n+    auto else_lambda = [&] {\n+      ADD_VISITOR_TRACE(\"fn \" + function_name +\n+                        \" can return errors : not all args valid, return dummy value\");\n+      llvm::Value* else_value = generator_->types()->NullConstant(result_type);\n+      return std::make_shared<LValue>(else_value);\n+    };\n+\n+    result_ = BuildIfElse(is_valid, then_lambda, else_lambda, result_type);\n+  } else {\n+    // fast path : invoke function without computing validities.\n+    auto value = BuildFunctionCall(native_function, params);\n+    result_.reset(new LValue(value));\n+  }\n }\n \n void LLVMGenerator::Visitor::Visit(const NullableNeverFuncDex& dex) {\n   ADD_VISITOR_TRACE(\"visit NullableNever base function \" + dex.func_descriptor()->name());\n-  LLVMTypes* types = generator_->types();\n-\n   const NativeFunction* native_function = dex.native_function();\n \n   // build function params along with validity.\n   auto params = BuildParams(dex.function_holder().get(), dex.args(), true,\n-                            native_function->needs_context());\n+                            native_function->NeedsContext());\n \n-  llvm::Type* ret_type = types->IRType(native_function->signature().ret_type()->id());\n-  llvm::Value* value =\n-      generator_->AddFunctionCall(native_function->pc_name(), ret_type, params);\n+  auto value = BuildFunctionCall(native_function, params);\n   result_.reset(new LValue(value));\n }\n \n@@ -602,16 +629,14 @@ void LLVMGenerator::Visitor::Visit(const NullableInternalFuncDex& dex) {\n \n   // build function params along with validity.\n   auto params = BuildParams(dex.function_holder().get(), dex.args(), true,\n-                            native_function->needs_context());\n+                            native_function->NeedsContext());\n \n   // add an extra arg for validity (alloced on stack).\n   llvm::AllocaInst* result_valid_ptr =\n       new llvm::AllocaInst(types->i8_type(), 0, \"result_valid\", entry_block_);\n   params.push_back(result_valid_ptr);\n \n-  llvm::Type* ret_type = types->IRType(native_function->signature().ret_type()->id());\n-  llvm::Value* value =\n-      generator_->AddFunctionCall(native_function->pc_name(), ret_type, params);\n+  auto value = BuildFunctionCall(native_function, params);\n \n   // load the result validity and truncate to i1.\n   llvm::Value* result_valid_i8 = builder->CreateLoad(result_valid_ptr);\n@@ -635,68 +660,45 @@ void LLVMGenerator::Visitor::Visit(const IfDex& dex) {\n   llvm::Value* validAndMatched =\n       builder->CreateAnd(if_condition->data(), if_condition->validity(), \"validAndMatch\");\n \n-  // Create blocks for the then, else and merge cases.\n-  llvm::LLVMContext* context = generator_->context();\n-  llvm::BasicBlock* then_bb = llvm::BasicBlock::Create(*context, \"then\", function_);\n-  llvm::BasicBlock* else_bb = llvm::BasicBlock::Create(*context, \"else\", function_);\n-  llvm::BasicBlock* merge_bb = llvm::BasicBlock::Create(*context, \"merge\", function_);\n-\n-  builder->CreateCondBr(validAndMatched, then_bb, else_bb);\n-\n-  // Emit the then block.\n-  builder->SetInsertPoint(then_bb);\n-  ADD_VISITOR_TRACE(\"branch to then block\");\n-  LValuePtr then_lvalue = BuildValueAndValidity(dex.then_vv());\n-  ClearLocalBitMapIfNotValid(dex.local_bitmap_idx(), then_lvalue->validity());\n-  ADD_VISITOR_TRACE(\"IfExpression result validity %T in matching then\",\n-                    then_lvalue->validity());\n-  builder->CreateBr(merge_bb);\n-\n-  // refresh then_bb for phi (could have changed due to code generation of then_vv).\n-  then_bb = builder->GetInsertBlock();\n-\n-  // Emit the else block.\n-  builder->SetInsertPoint(else_bb);\n-  LValuePtr else_lvalue;\n-  if (dex.is_terminal_else()) {\n-    ADD_VISITOR_TRACE(\"branch to terminal else block\");\n-\n-    else_lvalue = BuildValueAndValidity(dex.else_vv());\n-    // update the local bitmap with the validity.\n-    ClearLocalBitMapIfNotValid(dex.local_bitmap_idx(), else_lvalue->validity());\n-    ADD_VISITOR_TRACE(\"IfExpression result validity %T in terminal else\",\n-                      else_lvalue->validity());\n-  } else {\n-    ADD_VISITOR_TRACE(\"branch to non-terminal else block\");\n-\n-    // this is a non-terminal else. let the child (nested if/else) handle validity.\n-    auto value_expr = dex.else_vv().value_expr();\n-    value_expr->Accept(*this);\n-    else_lvalue = result();\n-  }\n-  builder->CreateBr(merge_bb);\n-\n-  // refresh else_bb for phi (could have changed due to code generation of else_vv).\n-  else_bb = builder->GetInsertBlock();\n-\n-  // Emit the merge block.\n-  builder->SetInsertPoint(merge_bb);\n-  llvm::Type* result_llvm_type = types->DataVecType(dex.result_type());\n-  llvm::PHINode* result_value = builder->CreatePHI(result_llvm_type, 2, \"res_value\");\n-  result_value->addIncoming(then_lvalue->data(), then_bb);\n-  result_value->addIncoming(else_lvalue->data(), else_bb);\n-\n-  llvm::PHINode* result_length = nullptr;\n-  if (then_lvalue->length() != nullptr) {\n-    result_length = builder->CreatePHI(types->i32_type(), 2, \"res_length\");\n-    result_length->addIncoming(then_lvalue->length(), then_bb);\n-    result_length->addIncoming(else_lvalue->length(), else_bb);\n-\n-    ADD_VISITOR_TRACE(\"IfExpression result length %T\", result_length);\n+  // then block\n+  auto then_lambda = [&] {\n+    ADD_VISITOR_TRACE(\"branch to then block\");\n+    LValuePtr then_lvalue = BuildValueAndValidity(dex.then_vv());\n+    ClearLocalBitMapIfNotValid(dex.local_bitmap_idx(), then_lvalue->validity());\n+    ADD_VISITOR_TRACE(\"IfExpression result validity %T in matching then\",\n+                      then_lvalue->validity());\n+    return then_lvalue;\n+  };\n+\n+  // else block\n+  auto else_lambda = [&] {\n+    LValuePtr else_lvalue;\n+    if (dex.is_terminal_else()) {\n+      ADD_VISITOR_TRACE(\"branch to terminal else block\");\n+\n+      else_lvalue = BuildValueAndValidity(dex.else_vv());\n+      // update the local bitmap with the validity.\n+      ClearLocalBitMapIfNotValid(dex.local_bitmap_idx(), else_lvalue->validity());\n+      ADD_VISITOR_TRACE(\"IfExpression result validity %T in terminal else\",\n+                        else_lvalue->validity());\n+    } else {\n+      ADD_VISITOR_TRACE(\"branch to non-terminal else block\");\n+\n+      // this is a non-terminal else. let the child (nested if/else) handle validity.\n+      auto value_expr = dex.else_vv().value_expr();\n+      value_expr->Accept(*this);\n+      else_lvalue = result();\n+    }\n+    return else_lvalue;\n+  };\n+\n+  // build the if-else condition.\n+  auto result_type = types->IRType(dex.result_type()->id());\n+  result_ = BuildIfElse(validAndMatched, then_lambda, else_lambda, result_type);\n+  if (result_type == types->i8_ptr_type()) {\n+    ADD_VISITOR_TRACE(\"IfElse result length %T\", result_->length());\n   }\n-  ADD_VISITOR_TRACE(\"IfExpression result value %T\", result_value);\n-\n-  result_.reset(new LValue(result_value, result_length));\n+  ADD_VISITOR_TRACE(\"IfElse result value %T\", result_->data());\n }\n \n // Boolean AND\n@@ -880,6 +882,52 @@ void LLVMGenerator::Visitor::VisitInExpression(const InExprDexBase<Type>& dex) {\n   result_.reset(new LValue(value));\n }\n \n+LValuePtr LLVMGenerator::Visitor::BuildIfElse(llvm::Value* condition,\n+                                              std::function<LValuePtr()> then_func,\n+                                              std::function<LValuePtr()> else_func,\n+                                              llvm::Type* result_type) {\n+  llvm::IRBuilder<>* builder = ir_builder();\n+  llvm::LLVMContext* context = generator_->context();\n+  LLVMTypes* types = generator_->types();\n+\n+  // Create blocks for the then, else and merge cases.\n+  llvm::BasicBlock* then_bb = llvm::BasicBlock::Create(*context, \"then\", function_);\n+  llvm::BasicBlock* else_bb = llvm::BasicBlock::Create(*context, \"else\", function_);\n+  llvm::BasicBlock* merge_bb = llvm::BasicBlock::Create(*context, \"merge\", function_);\n+\n+  builder->CreateCondBr(condition, then_bb, else_bb);\n+\n+  // Emit the then block.\n+  builder->SetInsertPoint(then_bb);\n+  LValuePtr then_lvalue = then_func();\n+  builder->CreateBr(merge_bb);\n+\n+  // refresh then_bb for phi (could have changed due to code generation of then_vv).\n+  then_bb = builder->GetInsertBlock();\n+\n+  // Emit the else block.\n+  builder->SetInsertPoint(else_bb);\n+  LValuePtr else_lvalue = else_func();\n+  builder->CreateBr(merge_bb);\n+\n+  // refresh else_bb for phi (could have changed due to code generation of else_vv).\n+  else_bb = builder->GetInsertBlock();\n+\n+  // Emit the merge block.\n+  builder->SetInsertPoint(merge_bb);\n+  llvm::PHINode* result_value = builder->CreatePHI(result_type, 2, \"res_value\");\n+  result_value->addIncoming(then_lvalue->data(), then_bb);\n+  result_value->addIncoming(else_lvalue->data(), else_bb);\n+\n+  llvm::PHINode* result_length = nullptr;\n+  if (result_type == types->i8_ptr_type()) {\n+    result_length = builder->CreatePHI(types->i32_type(), 2, \"res_length\");\n+    result_length->addIncoming(then_lvalue->length(), then_bb);\n+    result_length->addIncoming(else_lvalue->length(), else_bb);\n+  }\n+  return std::make_shared<LValue>(result_value, result_length);\n+}\n+\n LValuePtr LLVMGenerator::Visitor::BuildValueAndValidity(const ValueValidityPair& pair) {\n   // generate code for value\n   auto value_expr = pair.value_expr();\n@@ -893,13 +941,24 @@ LValuePtr LLVMGenerator::Visitor::BuildValueAndValidity(const ValueValidityPair&\n   return std::make_shared<LValue>(value, length, validity);\n }\n \n+llvm::Value* LLVMGenerator::Visitor::BuildFunctionCall(\n+    const NativeFunction* func, const std::vector<llvm::Value*>& params) {\n+  auto ret_type = generator_->types()->IRType(func->signature().ret_type()->id());\n+  return generator_->AddFunctionCall(func->pc_name(), ret_type, params);\n+}\n+\n std::vector<llvm::Value*> LLVMGenerator::Visitor::BuildParams(\n     FunctionHolder* holder, const ValueValidityPairVector& args, bool with_validity,\n     bool with_context) {\n   LLVMTypes* types = generator_->types();\n   std::vector<llvm::Value*> params;\n \n-  // if the function has holder, add the holder pointer first.\n+  // add context if required.\n+  if (with_context) {\n+    params.push_back(arg_context_ptr_);\n+  }\n+\n+  // if the function has holder, add the holder pointer.\n   if (holder != nullptr) {\n     auto ptr = types->i64_constant((int64_t)holder);\n     params.push_back(ptr);\n@@ -925,11 +984,6 @@ std::vector<llvm::Value*> LLVMGenerator::Visitor::BuildParams(\n     }\n   }\n \n-  // add error holder if function can return error\n-  if (with_context) {\n-    params.push_back(arg_context_ptr_);\n-  }\n-\n   return params;\n }\n \ndiff --git a/cpp/src/gandiva/llvm_generator.h b/cpp/src/gandiva/llvm_generator.h\nindex 953cb7425d..ec3163b089 100644\n--- a/cpp/src/gandiva/llvm_generator.h\n+++ b/cpp/src/gandiva/llvm_generator.h\n@@ -118,6 +118,14 @@ class LLVMGenerator {\n                                           const ValueValidityPairVector& args,\n                                           bool with_validity, bool with_context);\n \n+    // Generate code to onvoke a function call.\n+    llvm::Value* BuildFunctionCall(const NativeFunction* func,\n+                                   const std::vector<llvm::Value*>& params);\n+\n+    // Generate code for an if-else condition.\n+    LValuePtr BuildIfElse(llvm::Value* condition, std::function<LValuePtr()> then_func,\n+                          std::function<LValuePtr()> else_func, llvm::Type* result_type);\n+\n     // Switch to the entry_block and get reference of the validity/value/offsets buffer\n     llvm::Value* GetBufferReference(int idx, BufferType buffer_type, FieldPtr field);\n \ndiff --git a/cpp/src/gandiva/llvm_generator_test.cc b/cpp/src/gandiva/llvm_generator_test.cc\nindex 798df2009a..998aacb8e9 100644\n--- a/cpp/src/gandiva/llvm_generator_test.cc\n+++ b/cpp/src/gandiva/llvm_generator_test.cc\n@@ -114,76 +114,6 @@ TEST_F(TestLLVMGenerator, TestAdd) {\n   }\n }\n \n-TEST_F(TestLLVMGenerator, TestNullInternal) {\n-  // Setup LLVM generator to evaluate a NULL_INTERNAL type function.\n-  std::unique_ptr<LLVMGenerator> generator;\n-  Status status =\n-      LLVMGenerator::Make(ConfigurationBuilder::DefaultConfiguration(), &generator);\n-  EXPECT_TRUE(status.ok());\n-  Annotator annotator;\n-\n-  // generator.enable_ir_traces_ = true;\n-  auto field0 = std::make_shared<arrow::Field>(\"f0\", arrow::int32());\n-  auto desc0 = annotator.CheckAndAddInputFieldDescriptor(field0);\n-  auto validity_dex0 = std::make_shared<VectorReadValidityDex>(desc0);\n-  auto value_dex0 = std::make_shared<VectorReadFixedLenValueDex>(desc0);\n-  auto pair0 = std::make_shared<ValueValidityPair>(validity_dex0, value_dex0);\n-\n-  DataTypeVector params{arrow::int32()};\n-  auto func_desc =\n-      std::make_shared<FuncDescriptor>(\"half_or_null\", params, arrow::int32());\n-  FunctionSignature signature(func_desc->name(), func_desc->params(),\n-                              func_desc->return_type());\n-  const NativeFunction* native_func =\n-      generator->function_registry_.LookupSignature(signature);\n-\n-  int local_bitmap_idx = annotator.AddLocalBitMap();\n-  std::vector<ValueValidityPairPtr> pairs{pair0};\n-  auto func_dex = std::make_shared<NullableInternalFuncDex>(\n-      func_desc, native_func, FunctionHolderPtr(nullptr), pairs, local_bitmap_idx);\n-\n-  auto field_result = std::make_shared<arrow::Field>(\"out\", arrow::int32());\n-  auto desc_result = annotator.CheckAndAddInputFieldDescriptor(field_result);\n-\n-  llvm::Function* ir_func;\n-  status = generator->CodeGenExprValue(func_dex, desc_result, 0, &ir_func);\n-  ASSERT_TRUE(status.ok());\n-\n-  generator->engine_->FinalizeModule(true /*optimise_ir*/, false /*dump_ir*/);\n-\n-  EvalFunc eval_func = (EvalFunc)generator->engine_->CompiledFunction(ir_func);\n-\n-  int num_records = 4;\n-  uint32_t a0[] = {1, 2, 3, 4};\n-  uint64_t in_bitmap = 0xffffffffffffffffull;\n-\n-  uint32_t out[] = {0, 0, 0, 0};\n-  uint64_t out_bitmap = 0;\n-\n-  uint64_t local_bitmap = UINT64_MAX;\n-\n-  uint8_t* addrs[] = {\n-      reinterpret_cast<uint8_t*>(a0),\n-      reinterpret_cast<uint8_t*>(&in_bitmap),\n-      reinterpret_cast<uint8_t*>(out),\n-      reinterpret_cast<uint8_t*>(&out_bitmap),\n-  };\n-\n-  uint8_t* local_bitmap_addrs[] = {\n-      reinterpret_cast<uint8_t*>(&local_bitmap),\n-  };\n-\n-  eval_func(addrs, local_bitmap_addrs, 0 /* dummy context ptr */, num_records);\n-\n-  uint32_t expected_value[] = {0, 1, 0, 2};\n-  bool expected_validity[] = {false, true, false, true};\n-\n-  for (int i = 0; i < num_records; i++) {\n-    EXPECT_EQ(expected_value[i], out[i]);\n-    EXPECT_EQ(expected_validity[i], (local_bitmap & (1 << i)) != 0);\n-  }\n-}\n-\n int main(int argc, char** argv) {\n   ::testing::InitGoogleTest(&argc, argv);\n   return RUN_ALL_TESTS();\ndiff --git a/cpp/src/gandiva/llvm_types.h b/cpp/src/gandiva/llvm_types.h\nindex a40790adf4..dab47d059f 100644\n--- a/cpp/src/gandiva/llvm_types.h\n+++ b/cpp/src/gandiva/llvm_types.h\n@@ -24,6 +24,7 @@\n #include <llvm/IR/IRBuilder.h>\n #include <llvm/IR/LLVMContext.h>\n #include \"gandiva/arrow.h\"\n+#include \"gandiva/logging.h\"\n \n namespace gandiva {\n \n@@ -94,6 +95,17 @@ class LLVMTypes {\n     return llvm::ConstantFP::get(double_type(), val);\n   }\n \n+  llvm::Constant* NullConstant(llvm::Type* type) {\n+    if (type->isIntegerTy()) {\n+      return llvm::ConstantInt::get(type, 0);\n+    } else if (type->isFloatingPointTy()) {\n+      return llvm::ConstantFP::get(type, 0);\n+    } else {\n+      DCHECK(type->isPointerTy());\n+      return llvm::ConstantPointerNull::getNullValue(type);\n+    }\n+  }\n+\n   /// For a given data type, find the ir type used for the data vector slot.\n   llvm::Type* DataVecType(const DataTypePtr& data_type) {\n     return IRType(data_type->id());\ndiff --git a/cpp/src/gandiva/native_function.h b/cpp/src/gandiva/native_function.h\nindex e00941020f..0e6d278ab3 100644\n--- a/cpp/src/gandiva/native_function.h\n+++ b/cpp/src/gandiva/native_function.h\n@@ -39,28 +39,32 @@ enum ResultNullableType {\n /// precompiled function.\n class NativeFunction {\n  public:\n+  // fucntion attributes.\n+  static constexpr int32_t NEEDS_CONTEXT = (1 << 1);\n+  static constexpr int32_t NEEDS_FUNCTION_HOLDER = (1 << 2);\n+  static constexpr int32_t CAN_RETURN_ERRORS = (1 << 3);\n+\n   const FunctionSignature& signature() const { return signature_; }\n   std::string pc_name() const { return pc_name_; }\n   ResultNullableType result_nullable_type() const { return result_nullable_type_; }\n-  bool needs_holder() const { return needs_holder_; }\n-  bool needs_context() const { return needs_context_; }\n+\n+  bool NeedsContext() const { return (flags_ & NEEDS_CONTEXT) != 0; }\n+  bool NeedsFunctionHolder() const { return (flags_ & NEEDS_FUNCTION_HOLDER) != 0; }\n+  bool CanReturnErrors() const { return (flags_ & CAN_RETURN_ERRORS) != 0; }\n \n  private:\n   NativeFunction(const std::string& base_name, const DataTypeVector& param_types,\n                  DataTypePtr ret_type, const ResultNullableType& result_nullable_type,\n-                 const std::string& pc_name, bool needs_holder = false,\n-                 bool needs_context = false)\n+                 const std::string& pc_name, int32_t flags = 0)\n       : signature_(base_name, param_types, ret_type),\n-        needs_holder_(needs_holder),\n-        needs_context_(needs_context),\n+        flags_(flags),\n         result_nullable_type_(result_nullable_type),\n         pc_name_(pc_name) {}\n \n   FunctionSignature signature_;\n \n   /// attributes\n-  bool needs_holder_;\n-  bool needs_context_;\n+  int32_t flags_;\n   ResultNullableType result_nullable_type_;\n \n   /// pre-compiled function name.\ndiff --git a/cpp/src/gandiva/precompiled/CMakeLists.txt b/cpp/src/gandiva/precompiled/CMakeLists.txt\nindex 630d270362..a4414cae0f 100644\n--- a/cpp/src/gandiva/precompiled/CMakeLists.txt\n+++ b/cpp/src/gandiva/precompiled/CMakeLists.txt\n@@ -23,7 +23,6 @@ set(PRECOMPILED_SRCS\n     extended_math_ops.cc\n     hash.cc\n     print.cc\n-    sample.cc\n     string_ops.cc\n     time.cc\n     timestamp_arithmetic.cc)\n@@ -57,7 +56,6 @@ add_precompiled_unit_test(bitmap_test.cc bitmap.cc)\n add_precompiled_unit_test(epoch_time_point_test.cc)\n add_precompiled_unit_test(time_test.cc time.cc timestamp_arithmetic.cc ../context_helper.cc)\n add_precompiled_unit_test(hash_test.cc hash.cc)\n-add_precompiled_unit_test(sample_test.cc sample.cc)\n add_precompiled_unit_test(string_ops_test.cc string_ops.cc ../context_helper.cc)\n add_precompiled_unit_test(arithmetic_ops_test.cc arithmetic_ops.cc ../context_helper.cc)\n add_precompiled_unit_test(extended_math_ops_test.cc extended_math_ops.cc ../context_helper.cc)\ndiff --git a/cpp/src/gandiva/precompiled/arithmetic_ops.cc b/cpp/src/gandiva/precompiled/arithmetic_ops.cc\nindex 758dc86bc7..950264025b 100644\n--- a/cpp/src/gandiva/precompiled/arithmetic_ops.cc\n+++ b/cpp/src/gandiva/precompiled/arithmetic_ops.cc\n@@ -157,24 +157,17 @@ boolean not_boolean(boolean in) { return !in; }\n NUMERIC_BOOL_DATE_FUNCTION(IS_DISTINCT_FROM)\n NUMERIC_BOOL_DATE_FUNCTION(IS_NOT_DISTINCT_FROM)\n \n-// divide - handles invalid args as nulls\n-#define DIVIDE_NULL_INTERNAL(TYPE)                                                      \\\n-  FORCE_INLINE                                                                          \\\n-  TYPE divide_##TYPE##_##TYPE(TYPE in1, boolean is_valid1, TYPE in2, boolean is_valid2, \\\n-                              int64 execution_context, bool* out_valid) {               \\\n-    *out_valid = false;                                                                 \\\n-    if (!is_valid1 || !is_valid2) {                                                     \\\n-      return 0;                                                                         \\\n-    }                                                                                   \\\n-    if (in2 == 0) {                                                                     \\\n-      char const* err_msg = \"divide by zero error\";                                     \\\n-      gdv_fn_context_set_error_msg(execution_context, err_msg);                         \\\n-      return 0;                                                                         \\\n-    }                                                                                   \\\n-    *out_valid = true;                                                                  \\\n-    return static_cast<TYPE>(in1 / in2);                                                \\\n+#define DIVIDE(TYPE)                                               \\\n+  FORCE_INLINE                                                     \\\n+  TYPE divide_##TYPE##_##TYPE(int64 context, TYPE in1, TYPE in2) { \\\n+    if (in2 == 0) {                                                \\\n+      char const* err_msg = \"divide by zero error\";                \\\n+      gdv_fn_context_set_error_msg(context, err_msg);              \\\n+      return 0;                                                    \\\n+    }                                                              \\\n+    return static_cast<TYPE>(in1 / in2);                           \\\n   }\n \n-NUMERIC_FUNCTION(DIVIDE_NULL_INTERNAL)\n+NUMERIC_FUNCTION(DIVIDE)\n \n }  // extern \"C\"\ndiff --git a/cpp/src/gandiva/precompiled/arithmetic_ops_test.cc b/cpp/src/gandiva/precompiled/arithmetic_ops_test.cc\nindex b9fa7ae2bd..e4f4ad8991 100644\n--- a/cpp/src/gandiva/precompiled/arithmetic_ops_test.cc\n+++ b/cpp/src/gandiva/precompiled/arithmetic_ops_test.cc\n@@ -36,21 +36,14 @@ TEST(TestArithmeticOps, TestIsDistinctFrom) {\n TEST(TestArithmeticOps, TestMod) { EXPECT_EQ(mod_int64_int32(10, 0), 10); }\n \n TEST(TestArithmeticOps, TestDivide) {\n-  boolean is_valid;\n-  gandiva::ExecutionContext error_holder;\n-  int64 out = divide_int64_int64(10, true, 0, true,\n-                                 reinterpret_cast<int64>(&error_holder), &is_valid);\n-  EXPECT_EQ(out, 0);\n-  EXPECT_EQ(is_valid, false);\n-  EXPECT_EQ(error_holder.has_error(), true);\n-  EXPECT_EQ(error_holder.get_error(), \"divide by zero error\");\n-\n-  gandiva::ExecutionContext error_holder1;\n-  out = divide_int64_int64(10, true, 2, true, reinterpret_cast<int64>(&error_holder),\n-                           &is_valid);\n-  EXPECT_EQ(out, 5);\n-  EXPECT_EQ(is_valid, true);\n-  EXPECT_EQ(error_holder1.has_error(), false);\n+  gandiva::ExecutionContext context;\n+  EXPECT_EQ(divide_int64_int64(reinterpret_cast<int64>(&context), 10, 0), 0);\n+  EXPECT_EQ(context.has_error(), true);\n+  EXPECT_EQ(context.get_error(), \"divide by zero error\");\n+\n+  context.Reset();\n+  EXPECT_EQ(divide_int64_int64(reinterpret_cast<int64>(&context), 10, 2), 5);\n+  EXPECT_EQ(context.has_error(), false);\n }\n \n }  // namespace gandiva\ndiff --git a/cpp/src/gandiva/precompiled/extended_math_ops.cc b/cpp/src/gandiva/precompiled/extended_math_ops.cc\nindex cee369ed18..1b7642cc3b 100644\n--- a/cpp/src/gandiva/precompiled/extended_math_ops.cc\n+++ b/cpp/src/gandiva/precompiled/extended_math_ops.cc\n@@ -71,22 +71,15 @@ void set_error_for_logbase(int64_t execution_context, double base) {\n }\n \n // log with base\n-#define LOG_WITH_BASE(IN_TYPE1, IN_TYPE2, OUT_TYPE)                            \\\n-  FORCE_INLINE                                                                 \\\n-  OUT_TYPE log_##IN_TYPE1##_##IN_TYPE2(IN_TYPE1 base, boolean is_base_valid,   \\\n-                                       IN_TYPE2 value, boolean is_value_valid, \\\n-                                       int64 context, boolean* out_valid) {    \\\n-    *out_valid = false;                                                        \\\n-    if (!is_base_valid || !is_value_valid) {                                   \\\n-      return 0;                                                                \\\n-    }                                                                          \\\n-    OUT_TYPE log_of_base = static_cast<float64>(logl(base));                   \\\n-    if (log_of_base == 0) {                                                    \\\n-      set_error_for_logbase(context, static_cast<float64>(base));              \\\n-      return 0;                                                                \\\n-    }                                                                          \\\n-    *out_valid = true;                                                         \\\n-    return static_cast<float64>(logl(value) / logl(base));                     \\\n+#define LOG_WITH_BASE(IN_TYPE1, IN_TYPE2, OUT_TYPE)                                    \\\n+  FORCE_INLINE                                                                         \\\n+  OUT_TYPE log_##IN_TYPE1##_##IN_TYPE2(int64 context, IN_TYPE1 base, IN_TYPE2 value) { \\\n+    OUT_TYPE log_of_base = static_cast<float64>(logl(base));                           \\\n+    if (log_of_base == 0) {                                                            \\\n+      set_error_for_logbase(context, static_cast<float64>(base));                      \\\n+      return 0;                                                                        \\\n+    }                                                                                  \\\n+    return static_cast<float64>(logl(value) / logl(base));                             \\\n   }\n \n LOG_WITH_BASE(int32, int32, float64)\ndiff --git a/cpp/src/gandiva/precompiled/extended_math_ops_test.cc b/cpp/src/gandiva/precompiled/extended_math_ops_test.cc\nindex ddc45e0f16..fc9fadd7ce 100644\n--- a/cpp/src/gandiva/precompiled/extended_math_ops_test.cc\n+++ b/cpp/src/gandiva/precompiled/extended_math_ops_test.cc\n@@ -64,23 +64,19 @@ TEST(TestExtendedMathOps, TestPower) {\n   EXPECT_EQ(power_float64_float64(5.4, 2), 29.160000000000004);\n }\n \n-TEST(TestArithmeticOps, TestLogWithBase) {\n-  boolean is_valid;\n-  gandiva::ExecutionContext error_holder;\n-  float64 out = log_int32_int32(1, true, 10, true, reinterpret_cast<int64>(&error_holder),\n-                                &is_valid);\n+TEST(TestExtendedMathOps, TestLogWithBase) {\n+  gandiva::ExecutionContext context;\n+  float64 out =\n+      log_int32_int32(reinterpret_cast<int64>(&context), 1 /*base*/, 10 /*value*/);\n   EXPECT_EQ(out, 0);\n-  EXPECT_EQ(is_valid, false);\n-  EXPECT_EQ(error_holder.has_error(), true);\n-  EXPECT_TRUE(error_holder.get_error().find(\"divide by zero error\") != std::string::npos)\n-      << error_holder.get_error();\n+  EXPECT_EQ(context.has_error(), true);\n+  EXPECT_TRUE(context.get_error().find(\"divide by zero error\") != std::string::npos)\n+      << context.get_error();\n \n-  gandiva::ExecutionContext error_holder1;\n-  out = log_int32_int32(2, true, 64, true, reinterpret_cast<int64>(&error_holder),\n-                        &is_valid);\n+  gandiva::ExecutionContext context1;\n+  out = log_int32_int32(reinterpret_cast<int64>(&context), 2 /*base*/, 64 /*value*/);\n   EXPECT_EQ(out, 6);\n-  EXPECT_EQ(is_valid, true);\n-  EXPECT_EQ(error_holder1.has_error(), false);\n+  EXPECT_EQ(context1.has_error(), false);\n }\n \n }  // namespace gandiva\ndiff --git a/cpp/src/gandiva/precompiled/sample.cc b/cpp/src/gandiva/precompiled/sample.cc\ndeleted file mode 100644\nindex 0f94af0baa..0000000000\n--- a/cpp/src/gandiva/precompiled/sample.cc\n+++ /dev/null\n@@ -1,38 +0,0 @@\n-// Licensed to the Apache Software Foundation (ASF) under one\n-// or more contributor license agreements.  See the NOTICE file\n-// distributed with this work for additional information\n-// regarding copyright ownership.  The ASF licenses this file\n-// to you under the Apache License, Version 2.0 (the\n-// \"License\"); you may not use this file except in compliance\n-// with the License.  You may obtain a copy of the License at\n-//\n-//   http://www.apache.org/licenses/LICENSE-2.0\n-//\n-// Unless required by applicable law or agreed to in writing,\n-// software distributed under the License is distributed on an\n-// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-// KIND, either express or implied.  See the License for the\n-// specific language governing permissions and limitations\n-// under the License.\n-\n-extern \"C\" {\n-\n-#include \"./types.h\"\n-\n-// Dummy function to test NULL_INTERNAL (most valid ones need varchar).\n-\n-// If input is valid and a multiple of 2, return half the value. else, null.\n-FORCE_INLINE\n-int half_or_null_int32(int32 val, bool in_valid, bool* out_valid) {\n-  if (in_valid && (val % 2 == 0)) {\n-    // output is valid.\n-    *out_valid = true;\n-    return val / 2;\n-  } else {\n-    // output is invalid.\n-    *out_valid = false;\n-    return 0;\n-  }\n-}\n-\n-}  // extern \"C\"\ndiff --git a/cpp/src/gandiva/precompiled/sample_test.cc b/cpp/src/gandiva/precompiled/sample_test.cc\ndeleted file mode 100644\nindex 2be41f1ead..0000000000\n--- a/cpp/src/gandiva/precompiled/sample_test.cc\n+++ /dev/null\n@@ -1,51 +0,0 @@\n-// Licensed to the Apache Software Foundation (ASF) under one\n-// or more contributor license agreements.  See the NOTICE file\n-// distributed with this work for additional information\n-// regarding copyright ownership.  The ASF licenses this file\n-// to you under the Apache License, Version 2.0 (the\n-// \"License\"); you may not use this file except in compliance\n-// with the License.  You may obtain a copy of the License at\n-//\n-//   http://www.apache.org/licenses/LICENSE-2.0\n-//\n-// Unless required by applicable law or agreed to in writing,\n-// software distributed under the License is distributed on an\n-// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-// KIND, either express or implied.  See the License for the\n-// specific language governing permissions and limitations\n-// under the License.\n-\n-#include <gtest/gtest.h>\n-\n-extern \"C\" int half_or_null_int32(int val, bool in_valid, bool* out_valid);\n-\n-namespace gandiva {\n-\n-TEST(TestSample, half_or_null) {\n-  bool is_valid = false;\n-  int ret;\n-\n-  // 4 is a multiple, so expect 2.\n-  ret = half_or_null_int32(4, true, &is_valid);\n-  EXPECT_EQ(ret, 2);\n-  EXPECT_EQ(is_valid, true);\n-\n-  // if input is not valid, expect null.\n-  ret = half_or_null_int32(4, false, &is_valid);\n-  EXPECT_EQ(is_valid, false);\n-\n-  // -16 is a multiple, so expect 8.\n-  ret = half_or_null_int32(-16, true, &is_valid);\n-  EXPECT_EQ(ret, -8);\n-  EXPECT_EQ(is_valid, true);\n-\n-  // 5 is not a multiple, so expect null.\n-  ret = half_or_null_int32(5, true, &is_valid);\n-  EXPECT_EQ(is_valid, false);\n-\n-  // -31 is not a multiple, so expect null.\n-  ret = half_or_null_int32(-31, true, &is_valid);\n-  EXPECT_EQ(is_valid, false);\n-}\n-\n-}  // namespace gandiva\ndiff --git a/cpp/src/gandiva/precompiled/string_ops.cc b/cpp/src/gandiva/precompiled/string_ops.cc\nindex 7f3747cc33..d6873cd229 100644\n--- a/cpp/src/gandiva/precompiled/string_ops.cc\n+++ b/cpp/src/gandiva/precompiled/string_ops.cc\n@@ -116,13 +116,7 @@ void set_error_for_invalid_utf(int64_t execution_context, char val) {\n \n // Count the number of utf8 characters\n FORCE_INLINE\n-int32 utf8_length(const char* data, int32 data_len, boolean is_valid, int64 context,\n-                  boolean* out_valid) {\n-  *out_valid = false;\n-  if (!is_valid) {\n-    return 0;\n-  }\n-\n+int32 utf8_length(int64 context, const char* data, int32 data_len) {\n   int char_len = 0;\n   int count = 0;\n   for (int i = 0; i < data_len; i += char_len) {\n@@ -133,19 +127,17 @@ int32 utf8_length(const char* data, int32 data_len, boolean is_valid, int64 cont\n     }\n     ++count;\n   }\n-  *out_valid = true;\n   return count;\n }\n \n-#define UTF8_LENGTH_NULL_INTERNAL(NAME, TYPE)                                 \\\n-  FORCE_INLINE                                                                \\\n-  int32 NAME##_##TYPE(TYPE in, int32 in_len, boolean is_valid, int64 context, \\\n-                      boolean* out_valid) {                                   \\\n-    return utf8_length(in, in_len, is_valid, context, out_valid);             \\\n+#define UTF8_LENGTH(NAME, TYPE)                               \\\n+  FORCE_INLINE                                                \\\n+  int32 NAME##_##TYPE(int64 context, TYPE in, int32 in_len) { \\\n+    return utf8_length(context, in, in_len);                  \\\n   }\n \n-UTF8_LENGTH_NULL_INTERNAL(char_length, utf8)\n-UTF8_LENGTH_NULL_INTERNAL(length, utf8)\n-UTF8_LENGTH_NULL_INTERNAL(lengthUtf8, binary)\n+UTF8_LENGTH(char_length, utf8)\n+UTF8_LENGTH(length, utf8)\n+UTF8_LENGTH(lengthUtf8, binary)\n \n }  // extern \"C\"\ndiff --git a/cpp/src/gandiva/precompiled/string_ops_test.cc b/cpp/src/gandiva/precompiled/string_ops_test.cc\nindex 91f40606b5..78d7e9ea7f 100644\n--- a/cpp/src/gandiva/precompiled/string_ops_test.cc\n+++ b/cpp/src/gandiva/precompiled/string_ops_test.cc\n@@ -54,32 +54,24 @@ TEST(TestStringOps, TestBeginsEnds) {\n }\n \n TEST(TestStringOps, TestCharLength) {\n-  bool valid;\n+  gandiva::ExecutionContext ctx;\n+  uint64_t ctx_ptr = reinterpret_cast<int64>(&ctx);\n \n-  EXPECT_EQ(utf8_length(\"hello sir\", 9, true, 0, &valid), 9);\n-  EXPECT_TRUE(valid);\n+  EXPECT_EQ(utf8_length(ctx_ptr, \"hello sir\", 9), 9);\n \n   std::string a(\"\u00e2pple\");\n-  EXPECT_EQ(utf8_length(a.data(), static_cast<int>(a.length()), true, 0, &valid), 5);\n-  EXPECT_TRUE(valid);\n+  EXPECT_EQ(utf8_length(ctx_ptr, a.data(), static_cast<int>(a.length())), 5);\n \n   std::string b(\"\u092e\u0926\u0928\");\n-  EXPECT_EQ(static_cast<int>(\n-                utf8_length(b.data(), static_cast<int>(b.length()), true, 0, &valid)),\n-            3);\n-  EXPECT_TRUE(valid);\n+  EXPECT_EQ(utf8_length(ctx_ptr, b.data(), static_cast<int>(b.length())), 3);\n \n   // invalid utf8\n-  gandiva::ExecutionContext ctx;\n   std::string c(\"\\xf8\\x28\");\n-  EXPECT_EQ(utf8_length(c.data(), static_cast<int>(c.length()), true,\n-                        reinterpret_cast<int64>(&ctx), &valid),\n-            0);\n+  EXPECT_EQ(utf8_length(ctx_ptr, c.data(), static_cast<int>(c.length())), 0);\n   EXPECT_TRUE(ctx.get_error().find(\n                   \"unexpected byte \\\\f8 encountered while decoding utf8 string\") !=\n               std::string::npos)\n       << ctx.get_error();\n-  EXPECT_FALSE(valid);\n }\n \n }  // namespace gandiva\ndiff --git a/cpp/src/gandiva/precompiled/time.cc b/cpp/src/gandiva/precompiled/time.cc\nindex 836eb5cda7..2ea7cd4eed 100644\n--- a/cpp/src/gandiva/precompiled/time.cc\n+++ b/cpp/src/gandiva/precompiled/time.cc\n@@ -517,12 +517,7 @@ void set_error_for_date(int32 length, const char* input, const char* msg,\n   free(error);\n }\n \n-date64 castDATE_utf8(const char* input, int32 length, boolean is_valid1,\n-                     int64_t execution_context, boolean* out_valid) {\n-  *out_valid = false;\n-  if (!is_valid1) {\n-    return 0;\n-  }\n+date64 castDATE_utf8(int64_t context, const char* input, int32 length) {\n   // format : 0 is year, 1 is month and 2 is day.\n   int dateFields[3];\n   int dateIndex = 0, index = 0, value = 0;\n@@ -543,7 +538,7 @@ date64 castDATE_utf8(const char* input, int32 length, boolean is_valid1,\n   }\n   const char* msg = \"Not a valid date value \";\n   if (dateIndex != 3) {\n-    set_error_for_date(length, input, msg, execution_context);\n+    set_error_for_date(length, input, msg, context);\n     return 0;\n   }\n \n@@ -561,10 +556,9 @@ date64 castDATE_utf8(const char* input, int32 length, boolean is_valid1,\n   date::year_month_day day =\n       date::year(dateFields[0]) / date::month(dateFields[1]) / date::day(dateFields[2]);\n   if (!day.ok()) {\n-    set_error_for_date(length, input, msg, execution_context);\n+    set_error_for_date(length, input, msg, context);\n     return 0;\n   }\n-  *out_valid = true;\n   return std::chrono::time_point_cast<std::chrono::milliseconds>(date::sys_days(day))\n       .time_since_epoch()\n       .count();\ndiff --git a/cpp/src/gandiva/precompiled/time_test.cc b/cpp/src/gandiva/precompiled/time_test.cc\nindex 72b9577f46..db4a692924 100644\n--- a/cpp/src/gandiva/precompiled/time_test.cc\n+++ b/cpp/src/gandiva/precompiled/time_test.cc\n@@ -31,58 +31,22 @@ timestamp StringToTimestamp(const char* buf) {\n }\n \n TEST(TestTime, TestCastDate) {\n-  const char* date = \"1967-12-1\";\n   ExecutionContext context;\n-  bool valid;\n-  int64_t cast_to_date = castDATE_utf8(date, 9, true, (int64_t)&context, &valid);\n-  EXPECT_EQ(cast_to_date, -65836800000);\n-  EXPECT_EQ(valid, true);\n-\n-  const char* date1 = \"1972-12-1\";\n-  cast_to_date = castDATE_utf8(date1, 9, true, (int64_t)&context, &valid);\n-  EXPECT_EQ(cast_to_date, 92016000000);\n-  EXPECT_EQ(valid, true);\n-\n-  const char* date2 = \"1972222222\";\n-  cast_to_date = castDATE_utf8(date2, 10, true, (int64_t)&context, &valid);\n-  EXPECT_EQ(cast_to_date, 0);\n+\n+  EXPECT_EQ(castDATE_utf8((int64_t)&context, \"1967-12-1\", 9), -65836800000);\n+  EXPECT_EQ(castDATE_utf8((int64_t)&context, \"1972-12-1\", 9), 92016000000);\n+\n+  EXPECT_EQ(castDATE_utf8((int64_t)&context, \"1972222222\", 10), 0);\n   EXPECT_EQ(context.get_error(), \"Not a valid date value 1972222222\");\n-  EXPECT_EQ(valid, false);\n-\n-  const char* date3 = \"blahblah\";\n-  cast_to_date = castDATE_utf8(date3, 8, true, (int64_t)&context, &valid);\n-  EXPECT_EQ(cast_to_date, 0);\n-  EXPECT_EQ(valid, false);\n-\n-  const char* date4 = \"1967-12-1bb\";\n-  cast_to_date = castDATE_utf8(date4, 11, true, (int64_t)&context, &valid);\n-  EXPECT_EQ(cast_to_date, -65836800000);\n-  EXPECT_EQ(valid, true);\n-\n-  const char* date5 = \"67-12-1\";\n-  cast_to_date = castDATE_utf8(date5, 7, true, (int64_t)&context, &valid);\n-  EXPECT_EQ(cast_to_date, 3089923200000);\n-  EXPECT_EQ(valid, true);\n-\n-  const char* date6 = \"67-1-1\";\n-  cast_to_date = castDATE_utf8(date6, 7, true, (int64_t)&context, &valid);\n-  EXPECT_EQ(cast_to_date, 3061065600000);\n-  EXPECT_EQ(valid, true);\n-\n-  const char* date7 = \"71-1-1\";\n-  cast_to_date = castDATE_utf8(date7, 7, true, (int64_t)&context, &valid);\n-  EXPECT_EQ(cast_to_date, 31536000000);\n-  EXPECT_EQ(valid, true);\n-\n-  const char* date8 = \"71-45-1\";\n-  cast_to_date = castDATE_utf8(date8, 7, true, (int64_t)&context, &valid);\n-  EXPECT_EQ(cast_to_date, 0);\n-  EXPECT_EQ(valid, false);\n-\n-  const char* date9 = \"71-12-XX\";\n-  cast_to_date = castDATE_utf8(date9, 8, true, (int64_t)&context, &valid);\n-  EXPECT_EQ(cast_to_date, 0);\n-  EXPECT_EQ(valid, false);\n+\n+  EXPECT_EQ(castDATE_utf8((int64_t)&context, \"blahblah\", 8), 0);\n+  EXPECT_EQ(castDATE_utf8((int64_t)&context, \"1967-12-1bb\", 11), -65836800000);\n+\n+  EXPECT_EQ(castDATE_utf8((int64_t)&context, \"67-12-1\", 7), 3089923200000);\n+  EXPECT_EQ(castDATE_utf8((int64_t)&context, \"67-1-1\", 7), 3061065600000);\n+  EXPECT_EQ(castDATE_utf8((int64_t)&context, \"71-1-1\", 7), 31536000000);\n+  EXPECT_EQ(castDATE_utf8((int64_t)&context, \"71-45-1\", 7), 0);\n+  EXPECT_EQ(castDATE_utf8((int64_t)&context, \"71-12-XX\", 8), 0);\n }\n \n TEST(TestTime, TestExtractTime) {\ndiff --git a/cpp/src/gandiva/precompiled/types.h b/cpp/src/gandiva/precompiled/types.h\nindex 32fb47518f..9c574ba6e3 100644\n--- a/cpp/src/gandiva/precompiled/types.h\n+++ b/cpp/src/gandiva/precompiled/types.h\n@@ -122,8 +122,7 @@ int32 mem_compare(const char* left, int32 left_len, const char* right, int32 rig\n \n int32 mod_int64_int32(int64 left, int32 right);\n \n-int64 divide_int64_int64(int64 in1, boolean is_valid1, int64 in2, boolean is_valid2,\n-                         int64 error_holder, bool* out_valid);\n+int64 divide_int64_int64(int64 context, int64 in1, int64 in2);\n \n float64 cbrt_int32(int32);\n float64 cbrt_int64(int64);\n@@ -147,23 +146,16 @@ float64 log10_float64(float64);\n \n float64 power_float64_float64(float64, float64);\n \n-float64 log_int32_int32(int32 base, boolean is_base_valid, int32 value,\n-                        boolean is_value_valid, int64 context, boolean* out_valid);\n+float64 log_int32_int32(int64 context, int32 base, int32 value);\n \n bool starts_with_utf8_utf8(const char* data, int32 data_len, const char* prefix,\n                            int32 prefix_len);\n bool ends_with_utf8_utf8(const char* data, int32 data_len, const char* suffix,\n                          int32 suffix_len);\n-bool starts_with_plus_one_utf8_utf8(const char* data, int32 data_len, const char* prefix,\n-                                    int32 prefix_len);\n-bool ends_with_plus_one_utf8_utf8(const char* data, int32 data_len, const char* suffix,\n-                                  int32 suffix_len);\n \n-int32 utf8_length(const char* data, int32 data_len, boolean is_valid, int64 context,\n-                  boolean* out_valid);\n+int32 utf8_length(int64 context, const char* data, int32 data_len);\n \n-date64 castDATE_utf8(const char* input, int32 length, boolean is_valid1,\n-                     int64_t execution_context, boolean* out_valid);\n+date64 castDATE_utf8(int64_t execution_context, const char* input, int32 length);\n \n }  // extern \"C\"\n \ndiff --git a/cpp/src/gandiva/tests/generate_data.h b/cpp/src/gandiva/tests/generate_data.h\nindex a273de2d75..884c211c5c 100644\n--- a/cpp/src/gandiva/tests/generate_data.h\n+++ b/cpp/src/gandiva/tests/generate_data.h\n@@ -32,14 +32,27 @@ class DataGenerator {\n   virtual C_TYPE GenerateData() = 0;\n };\n \n+class Random {\n+ public:\n+  explicit Random(uint32_t seed = 100) : seed_(seed) {}\n+\n+  // This is 3 times faster than random_device\n+  int32_t next() { return rand_r(&seed_); }\n+  // int32_t next() { return random_dev_(); }\n+\n+ private:\n+  uint32_t seed_;\n+  std::random_device random_dev_;\n+};\n+\n class Int32DataGenerator : public DataGenerator<int32_t> {\n  public:\n   Int32DataGenerator() {}\n \n-  int32_t GenerateData() { return random_(); }\n+  int32_t GenerateData() { return random_.next(); }\n \n  protected:\n-  std::random_device random_;\n+  Random random_;\n };\n \n class BoundedInt32DataGenerator : public Int32DataGenerator {\n@@ -48,24 +61,23 @@ class BoundedInt32DataGenerator : public Int32DataGenerator {\n       : Int32DataGenerator(), upperBound_(upperBound) {}\n \n   int32_t GenerateData() {\n-    int32_t value = (random_() % upperBound_);\n-    // std::cout << value << std::endl;\n+    int32_t value = (random_.next() % upperBound_);\n     return value;\n   }\n \n  protected:\n   uint32_t upperBound_;\n-  std::random_device random_;\n+  Random random_;\n };\n \n class Int64DataGenerator : public DataGenerator<int64_t> {\n  public:\n   Int64DataGenerator() {}\n \n-  int64_t GenerateData() { return random_(); }\n+  int64_t GenerateData() { return random_.next(); }\n \n  protected:\n-  std::random_device random_;\n+  Random random_;\n };\n \n class FastUtf8DataGenerator : public DataGenerator<std::string> {\n@@ -75,7 +87,7 @@ class FastUtf8DataGenerator : public DataGenerator<std::string> {\n   std::string GenerateData() {\n     std::string generated_str;\n \n-    int slen = random_() % max_len_;\n+    int slen = random_.next() % max_len_;\n     for (int i = 0; i < slen; ++i) {\n       generated_str += generate_next_char();\n     }\n@@ -91,7 +103,7 @@ class FastUtf8DataGenerator : public DataGenerator<std::string> {\n     return cur_char_;\n   }\n \n-  std::random_device random_;\n+  Random random_;\n   unsigned int max_len_;\n   char cur_char_;\n };\ndiff --git a/cpp/src/gandiva/tests/micro_benchmarks.cc b/cpp/src/gandiva/tests/micro_benchmarks.cc\nindex d7a1cf0824..936378a3f5 100644\n--- a/cpp/src/gandiva/tests/micro_benchmarks.cc\n+++ b/cpp/src/gandiva/tests/micro_benchmarks.cc\n@@ -249,10 +249,10 @@ TEST_F(TestBenchmarks, TimedTestMultiOr) {\n   FastUtf8DataGenerator data_generator(250);\n   ProjectEvaluator evaluator(projector);\n   status = TimedEvaluate<arrow::StringType, std::string>(\n-      schema, evaluator, data_generator, pool_, 1 * MILLION, 16 * THOUSAND,\n+      schema, evaluator, data_generator, pool_, 100 * THOUSAND, 16 * THOUSAND,\n       elapsed_millis);\n   ASSERT_TRUE(status.ok());\n-  std::cout << \"Time taken for BooleanOr \" << elapsed_millis << \" ms\\n\";\n+  std::cout << \"Time taken for BooleanOr (100K) \" << elapsed_millis << \" ms\\n\";\n }\n \n TEST_F(TestBenchmarks, TimedTestInExpr) {\n@@ -285,11 +285,11 @@ TEST_F(TestBenchmarks, TimedTestInExpr) {\n   ProjectEvaluator evaluator(projector);\n \n   status = TimedEvaluate<arrow::StringType, std::string>(\n-      schema, evaluator, data_generator, pool_, 1 * MILLION, 16 * THOUSAND,\n+      schema, evaluator, data_generator, pool_, 100 * THOUSAND, 16 * THOUSAND,\n       elapsed_millis);\n \n   ASSERT_TRUE(status.ok());\n-  std::cout << \"Time taken for BooleanIn \" << elapsed_millis << \" ms\\n\";\n+  std::cout << \"Time taken for BooleanIn (100K) \" << elapsed_millis << \" ms\\n\";\n }\n \n }  // namespace gandiva\ndiff --git a/cpp/src/gandiva/tests/projector_test.cc b/cpp/src/gandiva/tests/projector_test.cc\nindex e97c3a461e..becaf8f1ba 100644\n--- a/cpp/src/gandiva/tests/projector_test.cc\n+++ b/cpp/src/gandiva/tests/projector_test.cc\n@@ -468,91 +468,6 @@ TEST_F(TestProjector, TestIsNotNull) {\n   EXPECT_ARROW_ARRAY_EQUALS(exp, outputs.at(0));\n }\n \n-TEST_F(TestProjector, TestNullInternal) {\n-  // schema for input fields\n-  auto field0 = field(\"f0\", int32());\n-  auto schema = arrow::schema({field0});\n-\n-  // output fields\n-  auto field_result = field(\"res\", int32());\n-\n-  // build expression.\n-  auto myexpr = TreeExprBuilder::MakeExpression(\"half_or_null\", {field0}, field_result);\n-\n-  // Build a projector for the expressions.\n-  std::shared_ptr<Projector> projector;\n-  Status status = Projector::Make(schema, {myexpr}, &projector);\n-  EXPECT_TRUE(status.ok());\n-\n-  // Create a row-batch with some sample data\n-  int num_records = 5;\n-  auto array0 =\n-      MakeArrowArrayInt32({10, 10, -20, 5, -7}, {true, false, true, true, true});\n-\n-  // expected output\n-  auto exp = MakeArrowArrayInt32({5, 0, -10, 0, 0}, {true, false, true, false, false});\n-\n-  // prepare input record batch\n-  auto in_batch = arrow::RecordBatch::Make(schema, num_records, {array0});\n-\n-  // Evaluate expression\n-  arrow::ArrayVector outputs;\n-  status = projector->Evaluate(*in_batch, pool_, &outputs);\n-  EXPECT_TRUE(status.ok());\n-\n-  // Validate results\n-  EXPECT_ARROW_ARRAY_EQUALS(exp, outputs.at(0));\n-}\n-\n-TEST_F(TestProjector, TestNestedFunctions) {\n-  // schema for input fields\n-  auto field0 = field(\"f0\", int32());\n-  auto field1 = field(\"f1\", int32());\n-  auto schema = arrow::schema({field0, field1});\n-\n-  // output fields\n-  auto field_res1 = field(\"res1\", int32());\n-  auto field_res2 = field(\"res2\", boolean());\n-\n-  // build expression.\n-  // expr1 : half_or_null(f0) * f1\n-  // expr2 : isnull(half_or_null(f0) * f1)\n-  auto node_f0 = TreeExprBuilder::MakeField(field0);\n-  auto node_f1 = TreeExprBuilder::MakeField(field1);\n-  auto half = TreeExprBuilder::MakeFunction(\"half_or_null\", {node_f0}, int32());\n-  auto mult = TreeExprBuilder::MakeFunction(\"multiply\", {half, node_f1}, int32());\n-  auto expr1 = TreeExprBuilder::MakeExpression(mult, field_res1);\n-\n-  auto isnull = TreeExprBuilder::MakeFunction(\"isnull\", {mult}, boolean());\n-  auto expr2 = TreeExprBuilder::MakeExpression(isnull, field_res2);\n-\n-  // Build a projector for the expressions.\n-  std::shared_ptr<Projector> projector;\n-  Status status = Projector::Make(schema, {expr1, expr2}, &projector);\n-  EXPECT_TRUE(status.ok());\n-\n-  // Create a row-batch with some sample data\n-  int num_records = 4;\n-  auto array0 = MakeArrowArrayInt32({10, 10, -20, 5}, {true, false, true, true});\n-  auto array1 = MakeArrowArrayInt32({11, 13, 15, 17}, {true, true, false, true});\n-\n-  // expected output\n-  auto exp1 = MakeArrowArrayInt32({55, 65, -150, 0}, {true, false, false, false});\n-  auto exp2 = MakeArrowArrayBool({false, true, true, true}, {true, true, true, true});\n-\n-  // prepare input record batch\n-  auto in_batch = arrow::RecordBatch::Make(schema, num_records, {array0, array1});\n-\n-  // Evaluate expression\n-  arrow::ArrayVector outputs;\n-  status = projector->Evaluate(*in_batch, pool_, &outputs);\n-  EXPECT_TRUE(status.ok());\n-\n-  // Validate results\n-  EXPECT_ARROW_ARRAY_EQUALS(exp1, outputs.at(0));\n-  EXPECT_ARROW_ARRAY_EQUALS(exp2, outputs.at(1));\n-}\n-\n TEST_F(TestProjector, TestZeroCopy) {\n   // schema for input fields\n   auto field0 = field(\"f0\", int32());\ndiff --git a/cpp/src/gandiva/to_date_holder.cc b/cpp/src/gandiva/to_date_holder.cc\nindex ceb7aada34..4f08b10f50 100644\n--- a/cpp/src/gandiva/to_date_holder.cc\n+++ b/cpp/src/gandiva/to_date_holder.cc\n@@ -71,19 +71,20 @@ Status ToDateHolder::Make(const std::string& sql_pattern, int32_t suppress_error\n   return Status::OK();\n }\n \n-int64_t ToDateHolder::operator()(const std::string& data, bool in_valid,\n-                                 int64_t execution_context, bool* out_valid) {\n-  // Issues\n-  // 1. processes date that do not match the format.\n-  // 2. does not process time in format +08:00 (or) id.\n+int64_t ToDateHolder::operator()(ExecutionContext* context, const std::string& data,\n+                                 bool in_valid, bool* out_valid) {\n   *out_valid = false;\n   if (!in_valid) {\n     return 0;\n   }\n+\n+  // Issues\n+  // 1. processes date that do not match the format.\n+  // 2. does not process time in format +08:00 (or) id.\n   struct tm result = {};\n   char* ret = strptime(data.c_str(), pattern_.c_str(), &result);\n   if (ret == nullptr) {\n-    return_error(execution_context, data);\n+    return_error(context, data);\n     return 0;\n   }\n   *out_valid = true;\n@@ -92,20 +93,19 @@ int64_t ToDateHolder::operator()(const std::string& data, bool in_valid,\n                                           (result.tm_mon + 1) / result.tm_mday);\n   int64_t seconds_since_epoch = secs.time_since_epoch().count();\n   if (seconds_since_epoch == 0) {\n-    return_error(execution_context, data);\n+    return_error(context, data);\n     return 0;\n   }\n   return seconds_since_epoch * 1000;\n }\n \n-void ToDateHolder::return_error(int64_t execution_context, const std::string& data) {\n+void ToDateHolder::return_error(ExecutionContext* context, const std::string& data) {\n   if (suppress_errors_ == 1) {\n     return;\n   }\n-  ExecutionContext* execution_context_ptr =\n-      reinterpret_cast<ExecutionContext*>(execution_context);\n+\n   std::string err_msg = \"Error parsing value \" + data + \" for given format.\";\n-  (execution_context_ptr)->set_error_msg(err_msg.c_str());\n+  context->set_error_msg(err_msg.c_str());\n }\n \n }  // namespace gandiva\ndiff --git a/cpp/src/gandiva/to_date_holder.h b/cpp/src/gandiva/to_date_holder.h\nindex d86f6780dc..8feff3d340 100644\n--- a/cpp/src/gandiva/to_date_holder.h\n+++ b/cpp/src/gandiva/to_date_holder.h\n@@ -22,6 +22,7 @@\n #include <string>\n #include <unordered_map>\n \n+#include \"gandiva/execution_context.h\"\n #include \"gandiva/function_holder.h\"\n #include \"gandiva/node.h\"\n #include \"gandiva/status.h\"\n@@ -39,14 +40,14 @@ class ToDateHolder : public FunctionHolder {\n                      std::shared_ptr<ToDateHolder>* holder);\n \n   /// Return true if the data matches the pattern.\n-  int64_t operator()(const std::string& data, bool in_valid, int64_t execution_context,\n+  int64_t operator()(ExecutionContext* context, const std::string& data, bool in_valid,\n                      bool* out_valid);\n \n  private:\n   ToDateHolder(const std::string& pattern, int32_t suppress_errors)\n       : pattern_(pattern), suppress_errors_(suppress_errors) {}\n \n-  void return_error(int64_t execution_context, const std::string& data);\n+  void return_error(ExecutionContext* context, const std::string& data);\n \n   std::string pattern_;  // date format string\n \ndiff --git a/cpp/src/gandiva/to_date_holder_test.cc b/cpp/src/gandiva/to_date_holder_test.cc\nindex f8ded27534..2a207b2ad7 100644\n--- a/cpp/src/gandiva/to_date_holder_test.cc\n+++ b/cpp/src/gandiva/to_date_holder_test.cc\n@@ -48,19 +48,19 @@ TEST_F(TestToDateHolder, TestSimpleDateTime) {\n   auto& to_date = *to_date_holder;\n   bool out_valid;\n   int64_t millis_since_epoch =\n-      to_date(\"1986-12-01 01:01:01\", true, (int64_t)&execution_context, &out_valid);\n+      to_date(&execution_context, \"1986-12-01 01:01:01\", true, &out_valid);\n   EXPECT_EQ(millis_since_epoch, 533779200000);\n \n   millis_since_epoch =\n-      to_date(\"1986-12-01 01:01:01.11\", true, (int64_t)&execution_context, &out_valid);\n+      to_date(&execution_context, \"1986-12-01 01:01:01.11\", true, &out_valid);\n   EXPECT_EQ(millis_since_epoch, 533779200000);\n \n   millis_since_epoch =\n-      to_date(\"1986-12-01 01:01:01 +0800\", true, (int64_t)&execution_context, &out_valid);\n+      to_date(&execution_context, \"1986-12-01 01:01:01 +0800\", true, &out_valid);\n   EXPECT_EQ(millis_since_epoch, 533779200000);\n \n   millis_since_epoch =\n-      to_date(\"1986-12-11 01:30:00\", true, (int64_t)&execution_context, &out_valid);\n+      to_date(&execution_context, \"1986-12-11 01:30:00\", true, &out_valid);\n   EXPECT_EQ(millis_since_epoch, 534643200000);\n }\n \n@@ -73,24 +73,21 @@ TEST_F(TestToDateHolder, TestSimpleDate) {\n   auto& to_date = *to_date_holder;\n   bool out_valid;\n   int64_t millis_since_epoch =\n-      to_date(\"1986-12-01\", true, (int64_t)&execution_context, &out_valid);\n+      to_date(&execution_context, \"1986-12-01\", true, &out_valid);\n   EXPECT_EQ(millis_since_epoch, 533779200000);\n \n-  millis_since_epoch =\n-      to_date(\"1986-12-1\", true, (int64_t)&execution_context, &out_valid);\n+  millis_since_epoch = to_date(&execution_context, \"1986-12-1\", true, &out_valid);\n   EXPECT_EQ(millis_since_epoch, 533779200000);\n \n-  millis_since_epoch =\n-      to_date(\"1886-12-1\", true, (int64_t)&execution_context, &out_valid);\n+  millis_since_epoch = to_date(&execution_context, \"1886-12-1\", true, &out_valid);\n   EXPECT_EQ(millis_since_epoch, -2621894400000);\n \n-  millis_since_epoch =\n-      to_date(\"2012-12-1\", true, (int64_t)&execution_context, &out_valid);\n+  millis_since_epoch = to_date(&execution_context, \"2012-12-1\", true, &out_valid);\n   EXPECT_EQ(millis_since_epoch, 1354320000000);\n \n   // wrong month. should return 0 since we are suppresing errors.\n   millis_since_epoch =\n-      to_date(\"1986-21-01 01:01:01 +0800\", true, (int64_t)&execution_context, &out_valid);\n+      to_date(&execution_context, \"1986-21-01 01:01:01 +0800\", true, &out_valid);\n   EXPECT_EQ(millis_since_epoch, 0);\n }\n \n@@ -104,18 +101,17 @@ TEST_F(TestToDateHolder, TestSimpleDateTimeError) {\n   bool out_valid;\n \n   int64_t millis_since_epoch =\n-      to_date(\"1986-21-01 01:01:01 +0800\", true, (int64_t)&execution_context, &out_valid);\n+      to_date(&execution_context, \"1986-21-01 01:01:01 +0800\", true, &out_valid);\n   std::string expected_error =\n       \"Error parsing value 1986-21-01 01:01:01 +0800 for given format\";\n   EXPECT_TRUE(execution_context.get_error().find(expected_error) != std::string::npos)\n       << status.message();\n \n-  ExecutionContext execution_context1;\n   // not valid should not return error\n-  millis_since_epoch =\n-      to_date(\"nullptr\", false, (int64_t)&execution_context1, &out_valid);\n+  execution_context.Reset();\n+  millis_since_epoch = to_date(&execution_context, \"nullptr\", false, &out_valid);\n   EXPECT_EQ(millis_since_epoch, 0);\n-  EXPECT_TRUE(execution_context1.has_error() == false);\n+  EXPECT_TRUE(execution_context.has_error() == false);\n }\n \n TEST_F(TestToDateHolder, TestSimpleDateTimeMakeError) {\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-26T09:51:14.793+0000",
                    "updated": "2018-10-26T09:51:14.793+0000",
                    "started": "2018-10-26T09:51:14.792+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "159070",
                    "issueId": "13190873"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190873/worklog/159081",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pravindra commented on issue #2840: ARROW-3487: [Gandiva] simplify fns that return errors\nURL: https://github.com/apache/arrow/pull/2840#issuecomment-433354532\n \n \n   thanks @wesm. I'll address these comments in my next PR.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-26T09:53:58.607+0000",
                    "updated": "2018-10-26T09:53:58.607+0000",
                    "started": "2018-10-26T09:53:58.606+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "159081",
                    "issueId": "13190873"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/3",
            "id": "3",
            "description": "A task that needs to be done.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21148&avatarType=issuetype",
            "name": "Task",
            "subtask": false,
            "avatarId": 21148
        },
        "timespent": 4800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@56dc8d7d[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1537a43b[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@55ddfcd7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@7de38c2b[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1dc54402[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@3b2a8c8c[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@12be47a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@6048a2a0[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@571a1fff[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@38bba77c[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@666d9c25[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@43157fea[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 4800,
        "customfield_12312520": null,
        "customfield_12312521": "Fri Oct 26 09:51:18 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-10-26T09:51:18.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3487/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2018-10-11T10:58:10.000+0000",
        "updated": "2018-10-26T09:53:58.000+0000",
        "timeoriginalestimate": null,
        "description": "NULL_IF_NULL functions that can return errors eg. divide currently look at the validity bits in each function (to avoid returning spurious errors).\r\n\r\n\u00a0\r\n{code:java}\r\ndivide(TYPE in1, boolean is_valid1, TYPE in2, boolean is_valid2, ..) {\r\n\u00a0 \u00a0 if (!is_valid1 || !is_valid2) {\u00a0\r\n\u00a0 \u00a0 \u00a0 return 0;\r\n\u00a0 \u00a0 }\r\n    if (in2 == 0) { /* set error */ }\r\n}\r\n{code}\r\n\u00a0\r\n\r\nThis validity check is duplicated for multiple functions and should be moved to the common layer (for all NULL_IF_NULL functions that can return error).\r\n\r\n\u00a0\r\n\r\n\u00a0",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "1h 20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 4800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Gandiva] simplify NULL_IF_NULL functions that can return errors",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190873/comment/16664956",
                    "id": "16664956",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 2840\n[https://github.com/apache/arrow/pull/2840]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-10-26T09:51:18.588+0000",
                    "updated": "2018-10-26T09:51:18.588+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|i3z2r3:",
        "customfield_12314139": null
    }
}