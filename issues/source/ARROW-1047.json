{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13072907",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13072907",
    "key": "ARROW-1047",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12341352",
                "id": "12341352",
                "name": "0.8.0",
                "archived": false,
                "released": true,
                "releaseDate": "2017-12-18"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": null,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12518420",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12518420",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13086952",
                    "key": "ARROW-1214",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13086952",
                    "fields": {
                        "summary": "[Python] Add classes / functions to enable stream message components to be handled outside of the stream reader class",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bryanc",
            "name": "bryanc",
            "key": "bryanc",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bryanc&avatarId=23479",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bryanc&avatarId=23479",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bryanc&avatarId=23479",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bryanc&avatarId=23479"
            },
            "displayName": "Bryan Cutler",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328933",
                "id": "12328933",
                "name": "Java"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": null,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1047/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 0,
            "worklogs": []
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": null,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@182dec07[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5dff426f[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2a1ee419[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@d55370f[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5f8047fe[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@2169cd66[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7c8acb7e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@584366af[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@52165ee[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@6acc8ad1[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@40376dcd[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@3020d7a[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": null,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Nov 23 18:26:39 UTC 2017",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2017-11-22T18:47:05.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1047/watchers",
            "watchCount": 4,
            "isWatching": false
        },
        "created": "2017-05-17T19:18:48.000+0000",
        "updated": "2017-11-23T18:26:39.000+0000",
        "timeoriginalestimate": null,
        "description": "cc [~julienledem] [~elahrvivaz] [~nongli]\n\nThe ArrowWriter https://github.com/apache/arrow/blob/master/java/vector/src/main/java/org/apache/arrow/vector/file/ArrowWriter.java accepts a WriteableByteChannel where the stream is written\n\nIt would be useful to be able to support other kinds of message framing and transport, like GRPC or HTTP. So rather than writing a complete Arrow stream as a single contiguous byte stream, the component messages (schema, dictionaries, and record batches) would be framed as separate messages in the underlying protocol. \n\nSo if we were using ProtocolBuffers and gRPC as the underlying transport for the stream, we could encapsulate components of an Arrow stream in objects like:\n\n{code:language=protobuf}\nmessage ArrowMessagePB {\n  required bytes serialized_data;\n}\n{code}\n\nIf the transport supports zero copy, that is obviously better than serializing then parsing a protocol buffer.\n\nWe should do this work in C++ as well to support more flexible stream transport. ",
        "customfield_10010": null,
        "timetracking": {},
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Java] Add generalized stream writer and reader interfaces that are decoupled from IO / message framing",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13072907/comment/16014648",
                    "id": "16014648",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "The benefits of this work is that stream readers and writers would not need to know about the underlying transport (whether the messages are being written directly to a byte channel, or placed in a queue to be sent asynchronously through some RPC protocol). ",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2017-05-17T19:20:44.277+0000",
                    "updated": "2017-05-17T19:21:40.991+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13072907/comment/16224275",
                    "id": "16224275",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on issue #1259: ARROW-1047: [Java] Add Generic Reader Interface for Stream Format\nURL: https://github.com/apache/arrow/pull/1259#issuecomment-340318241\n \n \n   @BryanCutler at a high level this sounds great to me. cc @nongli also to take a look\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-10-30T01:00:20.664+0000",
                    "updated": "2017-10-30T01:00:20.664+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13072907/comment/16224883",
                    "id": "16224883",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "elahrvivaz commented on a change in pull request #1259: ARROW-1047: [Java] Add Generic Reader Interface for Stream Format\nURL: https://github.com/apache/arrow/pull/1259#discussion_r147695368\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/ipc/ArrowReader.java\n ##########\n @@ -216,9 +171,32 @@ private void initialize() throws IOException {\n     this.root = new VectorSchemaRoot(schema, vectors, 0);\n     this.loader = new VectorLoader(root);\n     this.dictionaries = Collections.unmodifiableMap(dictionaries);\n+\n+    // Read and load all dictionaries from schema\n+    for (int i = 0; i < dictionaries.size(); i++) {\n \n Review comment:\n   sometimes it's useful to be able to just read the schema out of a message, without loading up any dictionaries or record batches. is there a way to preserve that functionality somehow?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-10-30T13:03:02.975+0000",
                    "updated": "2017-10-30T13:03:02.975+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13072907/comment/16225347",
                    "id": "16225347",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "icexelloss commented on issue #1259: ARROW-1047: [Java] Add Generic Reader Interface for Stream Format\nURL: https://github.com/apache/arrow/pull/1259#issuecomment-340517275\n \n \n   At the high level, @BryanCutler what do you feel about having  `ipc` should be a top level package rather than a subpackage under `vector`, i.e. `org.apache.arrow.ipc`\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-10-30T17:16:55.931+0000",
                    "updated": "2017-10-30T17:16:55.931+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13072907/comment/16225348",
                    "id": "16225348",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "icexelloss commented on issue #1259: ARROW-1047: [Java] Add Generic Reader Interface for Stream Format\nURL: https://github.com/apache/arrow/pull/1259#issuecomment-340517275\n \n \n   At the high level, @BryanCutler what do you feel about having  `ipc` be a top level package rather than a subpackage under `vector`, i.e. `org.apache.arrow.ipc`\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-10-30T17:17:05.349+0000",
                    "updated": "2017-10-30T17:17:05.349+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13072907/comment/16225520",
                    "id": "16225520",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "BryanCutler commented on a change in pull request #1259: ARROW-1047: [Java] Add Generic Reader Interface for Stream Format\nURL: https://github.com/apache/arrow/pull/1259#discussion_r147797804\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/ipc/ArrowReader.java\n ##########\n @@ -216,9 +171,32 @@ private void initialize() throws IOException {\n     this.root = new VectorSchemaRoot(schema, vectors, 0);\n     this.loader = new VectorLoader(root);\n     this.dictionaries = Collections.unmodifiableMap(dictionaries);\n+\n+    // Read and load all dictionaries from schema\n+    for (int i = 0; i < dictionaries.size(); i++) {\n \n Review comment:\n   Yeah, we could still do that.  I think it just comes down to either reading the dictionaries after the schema, or reading them before the first data batch.  I thought it made a little more sense to read them with the schema, otherwise the user could create the reader, load the schema and try to decode it but fail.\r\n   \r\n   Would it work for you to maybe overload `ArrowReader.readSchema` which will be able to return the original schema before loading the dictionaries?  Similarly, if using the stream format, you could make a subclass of `MessageReader` (introduced here) and react after reading a schema message. If not, I'm ok with reading them before data batches and documenting for the user that you can't decode until batches are read.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-10-30T18:43:26.014+0000",
                    "updated": "2017-10-30T18:43:26.014+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13072907/comment/16225530",
                    "id": "16225530",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "elahrvivaz commented on a change in pull request #1259: ARROW-1047: [Java] Add Generic Reader Interface for Stream Format\nURL: https://github.com/apache/arrow/pull/1259#discussion_r147799085\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/ipc/ArrowReader.java\n ##########\n @@ -216,9 +171,32 @@ private void initialize() throws IOException {\n     this.root = new VectorSchemaRoot(schema, vectors, 0);\n     this.loader = new VectorLoader(root);\n     this.dictionaries = Collections.unmodifiableMap(dictionaries);\n+\n+    // Read and load all dictionaries from schema\n+    for (int i = 0; i < dictionaries.size(); i++) {\n \n Review comment:\n   yeah, an overloaded method would be fine. I agree that having to load a batch before reading dictionaries is a bit confusing for the general use case.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-10-30T18:47:37.455+0000",
                    "updated": "2017-10-30T18:47:37.455+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13072907/comment/16225531",
                    "id": "16225531",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "BryanCutler commented on issue #1259: ARROW-1047: [Java] Add Generic Reader Interface for Stream Format\nURL: https://github.com/apache/arrow/pull/1259#issuecomment-340546565\n \n \n   > having ipc should be a top level package rather than a subpackage under vector, i.e. org.apache.arrow.ipc\r\n   \r\n   I'm not sure, all of the current messages are geared towards vectors so it makes sense to keep it there.  Are you thinking of possible messages in the future that might not be vector related?\r\n   \r\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-10-30T18:48:43.380+0000",
                    "updated": "2017-10-30T18:48:43.380+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13072907/comment/16225608",
                    "id": "16225608",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "icexelloss commented on issue #1259: ARROW-1047: [Java] Add Generic Reader Interface for Stream Format\nURL: https://github.com/apache/arrow/pull/1259#issuecomment-340558357\n \n \n   > I'm not sure, all of the current messages are geared towards vectors so it makes sense to keep it there. Are you thinking of possible messages in the future that might not be vector related?\r\n   I think this is fine for now. \r\n   \r\n   Longer term, I kind of think we can improve the current package hierarchy where all API is under the name space `org.apache.arrow.vector`. A hierarchy similar to C++ might make more sense - `o.a.a.vector` `o.a.a.ipc` and etc. But no need to do it here I think.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-10-30T19:31:32.910+0000",
                    "updated": "2017-10-30T19:31:32.910+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13072907/comment/16225621",
                    "id": "16225621",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "icexelloss commented on a change in pull request #1259: ARROW-1047: [Java] Add Generic Reader Interface for Stream Format\nURL: https://github.com/apache/arrow/pull/1259#discussion_r147812345\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/ipc/file/ArrowFileWriter.java\n ##########\n @@ -16,14 +16,18 @@\n  * limitations under the License.\n  */\n \n-package org.apache.arrow.vector.file;\n+package org.apache.arrow.vector.ipc.file;\n \n Review comment:\n   What do you feel about get rid of \"file\" and \"stream\" sub namespace, i.e.\r\n   \r\n   ```\r\n   org.apache.arrow.vector.ipc.ArrowFileWriter\r\n   ```\r\n   ```\r\n   org.apache.arrow.vector.ipc.ArrowStreamWriter\r\n   ```\r\n   I think these two namespaces `file` and `stream` are not very complicated, they can probably be combined\r\n   \r\n    \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-10-30T19:39:59.308+0000",
                    "updated": "2017-10-30T19:39:59.308+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13072907/comment/16225638",
                    "id": "16225638",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "icexelloss commented on issue #1259: ARROW-1047: [Java] Add Generic Reader Interface for Stream Format\nURL: https://github.com/apache/arrow/pull/1259#issuecomment-340562836\n \n \n   @BryanCutler This looks great! What do people feel about having less sub namespaces?\r\n   \r\n   Original, \r\n   ```\r\n   o.a.a.vector.ipc\r\n         file\r\n             ArrowFileReader\r\n             ArrowFileWriter\r\n             ArrowMagic\r\n         stream\r\n             ArrowStreamReader\r\n             ArrowStreamWriter\r\n         json\r\n             JsonFileReader\r\n             JsonFileWriter\r\n         message\r\n             ArrowBlock\r\n             ArrowFooter\r\n             ArrowMessage\r\n             ArrowRecordBatch\r\n             ArrowDictionaryBatch\r\n             FBSerializable\r\n             FBSerializables          \r\n             MessageSerializer\r\n         ArrowReader\r\n         ArrowWriter\r\n         ReadChannel\r\n         WriteChannel\r\n   ```\r\n   How do people feel about:\r\n   ```\r\n   o.a.a.vector.ipc\r\n         message\r\n             ArrowBlock\r\n             ArrowFooter\r\n             ArrowMessage\r\n             ArrowRecordBatch\r\n             ArrowDictionaryBatch\r\n             FBSerializable\r\n             FBSerializables          \r\n             MessageSerializer\r\n         ArrowReader\r\n         ArrowWriter\r\n         ArrowFileReader\r\n         ArrowFileWriter\r\n         ArrowMagic\r\n         ArrowStreamReader\r\n         ArrowStreamWriter\r\n         ReadChannel\r\n         WriteChannel\r\n         JsonFileReader\r\n         JsonFileWriter\r\n   ```\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-10-30T19:48:19.823+0000",
                    "updated": "2017-10-30T19:48:19.823+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13072907/comment/16225639",
                    "id": "16225639",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "icexelloss commented on issue #1259: ARROW-1047: [Java] Add Generic Reader Interface for Stream Format\nURL: https://github.com/apache/arrow/pull/1259#issuecomment-340562836\n \n \n   @BryanCutler This looks great! What do people feel about having less sub namespaces?\r\n   \r\n   Original, \r\n   ```\r\n   o.a.a.vector.ipc\r\n         file\r\n             ArrowFileReader\r\n             ArrowFileWriter\r\n             ArrowMagic\r\n         stream\r\n             ArrowStreamReader\r\n             ArrowStreamWriter\r\n         json\r\n             JsonFileReader\r\n             JsonFileWriter\r\n         message\r\n             ArrowBlock\r\n             ArrowFooter\r\n             ArrowMessage\r\n             ArrowRecordBatch\r\n             ArrowDictionaryBatch\r\n             FBSerializable\r\n             FBSerializables          \r\n             MessageSerializer\r\n         ArrowReader\r\n         ArrowWriter\r\n         ReadChannel\r\n         WriteChannel\r\n   ```\r\n   Less sub namespaces:\r\n   ```\r\n   o.a.a.vector.ipc\r\n         message\r\n             ArrowBlock\r\n             ArrowFooter\r\n             ArrowMessage\r\n             ArrowRecordBatch\r\n             ArrowDictionaryBatch\r\n             FBSerializable\r\n             FBSerializables          \r\n             MessageSerializer\r\n         ArrowReader\r\n         ArrowWriter\r\n         ArrowFileReader\r\n         ArrowFileWriter\r\n         ArrowMagic\r\n         ArrowStreamReader\r\n         ArrowStreamWriter\r\n         ReadChannel\r\n         WriteChannel\r\n         JsonFileReader\r\n         JsonFileWriter\r\n   ```\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-10-30T19:48:45.812+0000",
                    "updated": "2017-10-30T19:48:45.812+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13072907/comment/16225640",
                    "id": "16225640",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "icexelloss commented on issue #1259: ARROW-1047: [Java] Add Generic Reader Interface for Stream Format\nURL: https://github.com/apache/arrow/pull/1259#issuecomment-340563276\n \n \n   Also maybe `JsonFileReader` -> `ArrowJsonReader` for more consistent naming?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-10-30T19:49:53.065+0000",
                    "updated": "2017-10-30T19:49:53.065+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13072907/comment/16225650",
                    "id": "16225650",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "icexelloss commented on issue #1259: ARROW-1047: [Java] Add Generic Reader Interface for Stream Format\nURL: https://github.com/apache/arrow/pull/1259#issuecomment-340565857\n \n \n   Backward compatibility wise, I think we should probably change this along with vector changes in one arrow release?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-10-30T19:59:03.965+0000",
                    "updated": "2017-10-30T19:59:03.965+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13072907/comment/16225879",
                    "id": "16225879",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "BryanCutler commented on issue #1259: ARROW-1047: [Java] Add Generic Reader Interface for Stream Format\nURL: https://github.com/apache/arrow/pull/1259#issuecomment-340606975\n \n \n   Thanks @elahrvivaz, @icexelloss and @wesm !\r\n   \r\n   >What do people feel about having less sub namespaces?\r\n   \r\n   I sort of prefer having separate packages for the different readers/writers.  There are some supporting files that are specific to certain formats, like `ArrowMagic` and `InvalidArrowFileException`, and I like pushing it down to the feature that uses them.  I think users will be more likely to import reader/writer from 1 format for a particular use too.  I'm not tied to this though, we can simplify if that's the consensus. \r\n   \r\n   >Also maybe JsonFileReader -> ArrowJsonReader for more consistent naming?\r\n   \r\n   +1 for me on renaming this\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-10-30T22:43:38.813+0000",
                    "updated": "2017-10-30T22:43:38.813+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13072907/comment/16226731",
                    "id": "16226731",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "elahrvivaz commented on issue #1259: ARROW-1047: [Java] Add Generic Reader Interface for Stream Format\nURL: https://github.com/apache/arrow/pull/1259#issuecomment-340753115\n \n \n   imo i like the current package layout with file, stream, json, message.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-10-31T12:53:50.155+0000",
                    "updated": "2017-10-31T12:53:50.155+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13072907/comment/16226999",
                    "id": "16226999",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "icexelloss commented on issue #1259: ARROW-1047: [Java] Add Generic Reader Interface for Stream Format\nURL: https://github.com/apache/arrow/pull/1259#issuecomment-340803970\n \n \n   > I sort of prefer having separate packages for the different readers/writers. There are some supporting files that are specific to certain formats, like ArrowMagic and InvalidArrowFileException, and I like pushing it down to the feature that uses them. I think users will be more likely to import reader/writer from 1 format for a particular use too. I'm not tied to this though, we can simplify if that's the consensus.\r\n   \r\n   \r\n    > imo i like the current package layout with file, stream, json, message.\r\n   \r\n   Sounds good to me.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-10-31T15:42:00.798+0000",
                    "updated": "2017-10-31T15:42:00.798+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13072907/comment/16227214",
                    "id": "16227214",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "icexelloss commented on a change in pull request #1259: ARROW-1047: [Java] Add Generic Reader Interface for Stream Format\nURL: https://github.com/apache/arrow/pull/1259#discussion_r148078259\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/ipc/message/MessageChannelReader.java\n ##########\n @@ -0,0 +1,79 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.vector.ipc.message;\n+\n+\n+import io.netty.buffer.ArrowBuf;\n+import org.apache.arrow.flatbuf.Message;\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.vector.ipc.ReadChannel;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+\n+public class MessageChannelReader implements MessageReader {\n+\n+  private ReadChannel in;\n+\n+  public MessageChannelReader(ReadChannel in) {\n \n Review comment:\n   add override?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-10-31T17:57:32.983+0000",
                    "updated": "2017-10-31T17:57:32.983+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13072907/comment/16227216",
                    "id": "16227216",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "icexelloss commented on a change in pull request #1259: ARROW-1047: [Java] Add Generic Reader Interface for Stream Format\nURL: https://github.com/apache/arrow/pull/1259#discussion_r148078259\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/ipc/message/MessageChannelReader.java\n ##########\n @@ -0,0 +1,79 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.vector.ipc.message;\n+\n+\n+import io.netty.buffer.ArrowBuf;\n+import org.apache.arrow.flatbuf.Message;\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.vector.ipc.ReadChannel;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+\n+public class MessageChannelReader implements MessageReader {\n+\n+  private ReadChannel in;\n+\n+  public MessageChannelReader(ReadChannel in) {\n \n Review comment:\n   add override?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-10-31T17:57:40.725+0000",
                    "updated": "2017-10-31T17:57:40.725+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13072907/comment/16227217",
                    "id": "16227217",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "icexelloss commented on a change in pull request #1259: ARROW-1047: [Java] Add Generic Reader Interface for Stream Format\nURL: https://github.com/apache/arrow/pull/1259#discussion_r148078355\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/ipc/message/MessageChannelReader.java\n ##########\n @@ -0,0 +1,79 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.vector.ipc.message;\n+\n+\n+import io.netty.buffer.ArrowBuf;\n+import org.apache.arrow.flatbuf.Message;\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.vector.ipc.ReadChannel;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+\n+public class MessageChannelReader implements MessageReader {\n+\n+  private ReadChannel in;\n+\n+  public MessageChannelReader(ReadChannel in) {\n+    this.in = in;\n+  }\n+\n+  public Message readNextMessage() throws IOException {\n \n Review comment:\n   Add override?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-10-31T17:57:56.250+0000",
                    "updated": "2017-10-31T17:57:56.250+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13072907/comment/16227221",
                    "id": "16227221",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "icexelloss commented on a change in pull request #1259: ARROW-1047: [Java] Add Generic Reader Interface for Stream Format\nURL: https://github.com/apache/arrow/pull/1259#discussion_r148079120\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/ipc/message/MessageReader.java\n ##########\n @@ -0,0 +1,37 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.vector.ipc.message;\n+\n+\n+import io.netty.buffer.ArrowBuf;\n+import org.apache.arrow.flatbuf.Message;\n+import org.apache.arrow.memory.BufferAllocator;\n+\n+import java.io.IOException;\n+\n+public interface MessageReader {\n+\n+  Message readNextMessage() throws IOException;\n+\n+  ArrowBuf readMessageBody(Message message, BufferAllocator allocator) throws IOException;\n \n Review comment:\n   Maybe add a bit doc of what these methods are supposed to do? It's not very clear how to use `readNextMessage` and `readMessageBody`\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-10-31T18:00:35.577+0000",
                    "updated": "2017-10-31T18:00:35.577+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13072907/comment/16227234",
                    "id": "16227234",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "icexelloss commented on a change in pull request #1259: ARROW-1047: [Java] Add Generic Reader Interface for Stream Format\nURL: https://github.com/apache/arrow/pull/1259#discussion_r148080722\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/ipc/message/MessageSerializer.java\n ##########\n @@ -102,12 +96,12 @@ public static long serialize(WriteChannel out, Schema schema) throws IOException\n   /**\n    * Deserializes a schema object. Format is from serialize().\n    *\n-   * @param in the channel to deserialize from\n+   * @param reader the reader interface to deserialize from\n    * @return the deserialized object\n    * @throws IOException if something went wrong\n    */\n-  public static Schema deserializeSchema(ReadChannel in) throws IOException {\n-    Message message = deserializeMessage(in);\n+  public static Schema deserializeSchema(MessageReader reader) throws IOException {\n \n Review comment:\n   This method seems to closer to `read schema` rather than `deserialize schema`\r\n   \r\n   ```\r\n   public static Schema deserializeSchema(Message message)\r\n   ```\r\n   seem to make more sense to me\r\n   \r\n   Maybe this method can be made into:\r\n   ```\r\n   public static Schema readSchema(MessageReader reader) {\r\n   \r\n       Message message = reader.readNextMessage();\r\n       return deserializeSchema(message);\r\n   }\r\n   ```\r\n   ?\r\n   \r\n   @BryanCutler what do you think\r\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-10-31T18:06:17.011+0000",
                    "updated": "2017-10-31T18:06:17.011+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13072907/comment/16227258",
                    "id": "16227258",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "icexelloss commented on a change in pull request #1259: ARROW-1047: [Java] Add Generic Reader Interface for Stream Format\nURL: https://github.com/apache/arrow/pull/1259#discussion_r148083371\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/ipc/message/MessageSerializer.java\n ##########\n @@ -377,8 +371,8 @@ public static ArrowDictionaryBatch deserializeDictionaryBatch(ReadChannel in,\n     return new ArrowDictionaryBatch(dictionaryBatchFB.id(), recordBatch);\n   }\n \n-  public static ArrowMessage deserializeMessageBatch(ReadChannel in, BufferAllocator alloc) throws IOException {\n-    Message message = deserializeMessage(in);\n+  public static ArrowMessage deserializeMessageBatch(MessageReader reader, BufferAllocator alloc) throws IOException {\n \n Review comment:\n   The word \"Batch\" in the function name is a bit unintuitive. I kind of feel \"Message\" is a better term than \"MessageBatch\".\r\n   \r\n   Should we maybe rename this to `deserializeMessage`? \r\n   \r\n   Also, this message doesn't seem to exclude schema message explicitly. Which also feels a bit weird.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-10-31T18:16:21.851+0000",
                    "updated": "2017-10-31T18:16:21.851+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13072907/comment/16227286",
                    "id": "16227286",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "elahrvivaz commented on a change in pull request #1259: ARROW-1047: [Java] Add Generic Reader Interface for Stream Format\nURL: https://github.com/apache/arrow/pull/1259#discussion_r148088136\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/ipc/message/MessageSerializer.java\n ##########\n @@ -377,8 +371,8 @@ public static ArrowDictionaryBatch deserializeDictionaryBatch(ReadChannel in,\n     return new ArrowDictionaryBatch(dictionaryBatchFB.id(), recordBatch);\n   }\n \n-  public static ArrowMessage deserializeMessageBatch(ReadChannel in, BufferAllocator alloc) throws IOException {\n-    Message message = deserializeMessage(in);\n+  public static ArrowMessage deserializeMessageBatch(MessageReader reader, BufferAllocator alloc) throws IOException {\n \n Review comment:\n   this method won't read any generic message, it only works with RecordBatches or DictionaryBatches, hence the name...\r\n   in the streaming format the first message after the schema could be either a record batch or a dictionary batch, this method is to handle either case.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-10-31T18:32:54.147+0000",
                    "updated": "2017-10-31T18:32:54.147+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13072907/comment/16234429",
                    "id": "16234429",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "BryanCutler commented on a change in pull request #1259: ARROW-1047: [Java] Add Generic Reader Interface for Stream Format\nURL: https://github.com/apache/arrow/pull/1259#discussion_r148328047\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/ipc/message/MessageReader.java\n ##########\n @@ -0,0 +1,37 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.vector.ipc.message;\n+\n+\n+import io.netty.buffer.ArrowBuf;\n+import org.apache.arrow.flatbuf.Message;\n+import org.apache.arrow.memory.BufferAllocator;\n+\n+import java.io.IOException;\n+\n+public interface MessageReader {\n+\n+  Message readNextMessage() throws IOException;\n+\n+  ArrowBuf readMessageBody(Message message, BufferAllocator allocator) throws IOException;\n \n Review comment:\n   Yeah, I meant to say that I still need to go through these changes and make sure everything is documented properly.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-01T17:30:59.077+0000",
                    "updated": "2017-11-01T17:30:59.077+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13072907/comment/16234494",
                    "id": "16234494",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "BryanCutler commented on a change in pull request #1259: ARROW-1047: [Java] Add Generic Reader Interface for Stream Format\nURL: https://github.com/apache/arrow/pull/1259#discussion_r148337707\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/ipc/message/MessageSerializer.java\n ##########\n @@ -102,12 +96,12 @@ public static long serialize(WriteChannel out, Schema schema) throws IOException\n   /**\n    * Deserializes a schema object. Format is from serialize().\n    *\n-   * @param in the channel to deserialize from\n+   * @param reader the reader interface to deserialize from\n    * @return the deserialized object\n    * @throws IOException if something went wrong\n    */\n-  public static Schema deserializeSchema(ReadChannel in) throws IOException {\n-    Message message = deserializeMessage(in);\n+  public static Schema deserializeSchema(MessageReader reader) throws IOException {\n \n Review comment:\n   I think it's ok to include reading the message as part of deserialization and some messages also require to read another chunk after the message.  I do think the behavior of these functions could be made to be more consistent, but we should probably do that as a followup.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-01T18:03:50.073+0000",
                    "updated": "2017-11-01T18:03:50.073+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13072907/comment/16234499",
                    "id": "16234499",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "BryanCutler commented on a change in pull request #1259: ARROW-1047: [Java] Add Generic Reader Interface for Stream Format\nURL: https://github.com/apache/arrow/pull/1259#discussion_r148338482\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/ipc/message/MessageSerializer.java\n ##########\n @@ -377,8 +371,8 @@ public static ArrowDictionaryBatch deserializeDictionaryBatch(ReadChannel in,\n     return new ArrowDictionaryBatch(dictionaryBatchFB.id(), recordBatch);\n   }\n \n-  public static ArrowMessage deserializeMessageBatch(ReadChannel in, BufferAllocator alloc) throws IOException {\n-    Message message = deserializeMessage(in);\n+  public static ArrowMessage deserializeMessageBatch(MessageReader reader, BufferAllocator alloc) throws IOException {\n \n Review comment:\n   Yeah, I think it's ok as is but this seems to be used only in a test.  How about we do a followup PR to refine these functions and we can discuss there?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-01T18:06:41.863+0000",
                    "updated": "2017-11-01T18:06:41.863+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13072907/comment/16234505",
                    "id": "16234505",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "icexelloss commented on a change in pull request #1259: ARROW-1047: [Java] Add Generic Reader Interface for Stream Format\nURL: https://github.com/apache/arrow/pull/1259#discussion_r148339853\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/ipc/message/MessageSerializer.java\n ##########\n @@ -377,8 +371,8 @@ public static ArrowDictionaryBatch deserializeDictionaryBatch(ReadChannel in,\n     return new ArrowDictionaryBatch(dictionaryBatchFB.id(), recordBatch);\n   }\n \n-  public static ArrowMessage deserializeMessageBatch(ReadChannel in, BufferAllocator alloc) throws IOException {\n-    Message message = deserializeMessage(in);\n+  public static ArrowMessage deserializeMessageBatch(MessageReader reader, BufferAllocator alloc) throws IOException {\n \n Review comment:\n   Ok.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-01T18:11:39.046+0000",
                    "updated": "2017-11-01T18:11:39.046+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13072907/comment/16234506",
                    "id": "16234506",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "icexelloss commented on a change in pull request #1259: ARROW-1047: [Java] Add Generic Reader Interface for Stream Format\nURL: https://github.com/apache/arrow/pull/1259#discussion_r148339956\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/ipc/message/MessageSerializer.java\n ##########\n @@ -102,12 +96,12 @@ public static long serialize(WriteChannel out, Schema schema) throws IOException\n   /**\n    * Deserializes a schema object. Format is from serialize().\n    *\n-   * @param in the channel to deserialize from\n+   * @param reader the reader interface to deserialize from\n    * @return the deserialized object\n    * @throws IOException if something went wrong\n    */\n-  public static Schema deserializeSchema(ReadChannel in) throws IOException {\n-    Message message = deserializeMessage(in);\n+  public static Schema deserializeSchema(MessageReader reader) throws IOException {\n \n Review comment:\n   Ok. Agree this can be a follow upl\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-01T18:11:58.590+0000",
                    "updated": "2017-11-01T18:11:58.590+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13072907/comment/16234543",
                    "id": "16234543",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "icexelloss commented on issue #1259: ARROW-1047: [Java] Add Generic Reader Interface for Stream Format\nURL: https://github.com/apache/arrow/pull/1259#issuecomment-341199634\n \n \n   One thing I am not sure is if this patch will make java-refactor-branch hard to merge - cc @siddharthteotia for comment.\r\n   \r\n   Maybe we should keep all refactor changes in java-refactor-branch to make it easier to merge? Not sure though.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-01T18:38:21.575+0000",
                    "updated": "2017-11-01T18:38:21.575+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13072907/comment/16234560",
                    "id": "16234560",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "siddharthteotia commented on issue #1259: ARROW-1047: [Java] Add Generic Reader Interface for Stream Format\nURL: https://github.com/apache/arrow/pull/1259#issuecomment-341202073\n \n \n   Yes I am concerned that this will make patches in java-vector-refactor branch hard to merge into master, Secondly, the nature of changes suggest that we should be testing this with Dremio as well -- I would have loved to offer help but I am in the process of moving Dremio to new code in java-vector-refactor branch. \r\n   \r\n   I would prefer to have these changes merged after java-vector-refactor changes are merged into master.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-01T18:46:50.336+0000",
                    "updated": "2017-11-01T18:46:50.336+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13072907/comment/16234843",
                    "id": "16234843",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "BryanCutler commented on issue #1259: ARROW-1047: [Java] Add Generic Reader Interface for Stream Format\nURL: https://github.com/apache/arrow/pull/1259#issuecomment-341260009\n \n \n   @siddharthteotia the Java refactoring is the priority right now so I don't want to hinder that, but I would like to get this in for the 0.8 release if possible.  I think changes to the ArrowReader should be mostly transparent, although there might be conflicts with some of the tests I had to change. What about if I try to cherry pick this into the java-vector-refactor branch?  If it doesn't go in cleanly then we can put it on hold until the refactor branch is merge.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-01T22:17:42.502+0000",
                    "updated": "2017-11-01T22:17:42.502+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13072907/comment/16239462",
                    "id": "16239462",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "siddharthteotia commented on issue #1259: ARROW-1047: [Java] Add Generic Reader Interface for Stream Format\nURL: https://github.com/apache/arrow/pull/1259#issuecomment-341959674\n \n \n   @BryanCutler, are you suggesting to cherry pick your changes in refactor branch and revert commit in case things don't look good?\r\n   \r\n   I am not entirely sure what's the best option here but I believe that adding orthogonal set of changes to java-vector-refactor branch at this point may not be a good idea. However, I don't want to block other work. So feel free to proceed based on your best judgement.\r\n   \r\n   Note that there are currently two patches in that branch. While making changes in Dremio and debugging test failures, I had to go back and make some changes in vector code (minor only, no redesign). Currently those additional changes are in Dremio's fork (as I wanted to make quick progress) and I will put a PR against java-vector-refactor branch for the third patch very soon -- better to do at last when testing with Dremio completes.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-05T09:22:36.521+0000",
                    "updated": "2017-11-05T09:22:36.521+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13072907/comment/16240897",
                    "id": "16240897",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "BryanCutler commented on issue #1259: ARROW-1047: [Java] Add Generic Reader Interface for Stream Format\nURL: https://github.com/apache/arrow/pull/1259#issuecomment-342286410\n \n \n   @siddharthteotia that's fair enough, I don't want to complicate the refactoring.  I mostly just want to make sure that these changes don't make things harder to merge the java-vector-refactor branch into master.  I can try that out locally and report back.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-06T21:05:32.874+0000",
                    "updated": "2017-11-06T21:05:32.874+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13072907/comment/16257849",
                    "id": "16257849",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "BryanCutler commented on issue #1259: ARROW-1047: [Java] Add Generic Reader Interface for Stream Format\nURL: https://github.com/apache/arrow/pull/1259#issuecomment-345407725\n \n \n   @siddharthteotia is this something you would like to run with the Dremio suite of tests before merging?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-18T01:31:27.655+0000",
                    "updated": "2017-11-18T01:31:27.655+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13072907/comment/16259607",
                    "id": "16259607",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "siddharthteotia commented on issue #1259: ARROW-1047: [Java] Add Generic Reader Interface for Stream Format\nURL: https://github.com/apache/arrow/pull/1259#issuecomment-345785258\n \n \n   @BryanCutler , I would like to test this with Dremio but I am not sure how quickly I will be able to do that and revert back after making necessary changes in Dremio and doing proper testing. \r\n   \r\n   Part of me says you should go ahead and merge this since you were already waiting for the refactor work to get done before this. \r\n   \r\n   Since we will anyway have to rebase on Arrow master after the ongoing timestamp vector related changes in https://github.com/apache/arrow/pull/1330, we can take care of testing this out with Dremio at that time unless @jacques-n thinks otherwise?\r\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-20T18:28:49.649+0000",
                    "updated": "2017-11-20T18:28:49.649+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13072907/comment/16259717",
                    "id": "16259717",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on a change in pull request #1259: ARROW-1047: [Java] Add Generic Reader Interface for Stream Format\nURL: https://github.com/apache/arrow/pull/1259#discussion_r152087227\n \n \n\n ##########\n File path: java/tools/src/main/java/org/apache/arrow/tools/EchoServer.java\n ##########\n @@ -23,8 +23,8 @@\n import org.apache.arrow.memory.BufferAllocator;\n import org.apache.arrow.memory.RootAllocator;\n import org.apache.arrow.vector.VectorSchemaRoot;\n-import org.apache.arrow.vector.stream.ArrowStreamReader;\n-import org.apache.arrow.vector.stream.ArrowStreamWriter;\n+import org.apache.arrow.vector.ipc.stream.ArrowStreamReader;\n+import org.apache.arrow.vector.ipc.stream.ArrowStreamWriter;\n \n Review comment:\n   I would either make this `ipc.ArrowStreamReader` but not `ipc.stream`\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-20T19:26:37.904+0000",
                    "updated": "2017-11-20T19:26:37.904+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13072907/comment/16259718",
                    "id": "16259718",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on a change in pull request #1259: ARROW-1047: [Java] Add Generic Reader Interface for Stream Format\nURL: https://github.com/apache/arrow/pull/1259#discussion_r152087227\n \n \n\n ##########\n File path: java/tools/src/main/java/org/apache/arrow/tools/EchoServer.java\n ##########\n @@ -23,8 +23,8 @@\n import org.apache.arrow.memory.BufferAllocator;\n import org.apache.arrow.memory.RootAllocator;\n import org.apache.arrow.vector.VectorSchemaRoot;\n-import org.apache.arrow.vector.stream.ArrowStreamReader;\n-import org.apache.arrow.vector.stream.ArrowStreamWriter;\n+import org.apache.arrow.vector.ipc.stream.ArrowStreamReader;\n+import org.apache.arrow.vector.ipc.stream.ArrowStreamWriter;\n \n Review comment:\n   I would make this `ipc.ArrowStreamReader` but not `ipc.stream`\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-20T19:27:00.096+0000",
                    "updated": "2017-11-20T19:27:00.096+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13072907/comment/16261181",
                    "id": "16261181",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "BryanCutler commented on a change in pull request #1259: ARROW-1047: [Java] Add Generic Reader Interface for Stream Format\nURL: https://github.com/apache/arrow/pull/1259#discussion_r152356580\n \n \n\n ##########\n File path: java/tools/src/main/java/org/apache/arrow/tools/EchoServer.java\n ##########\n @@ -23,8 +23,8 @@\n import org.apache.arrow.memory.BufferAllocator;\n import org.apache.arrow.memory.RootAllocator;\n import org.apache.arrow.vector.VectorSchemaRoot;\n-import org.apache.arrow.vector.stream.ArrowStreamReader;\n-import org.apache.arrow.vector.stream.ArrowStreamWriter;\n+import org.apache.arrow.vector.ipc.stream.ArrowStreamReader;\n+import org.apache.arrow.vector.ipc.stream.ArrowStreamWriter;\n \n Review comment:\n   Do you think the same for file and json readers, e.g. `ipc.ArrowFileReader`?  I most made these subpackages because there were some supporting files specific to just the file reader, so they could be grouped together.  But I'm ok either way, @icexelloss brought this up here https://github.com/apache/arrow/pull/1259#issuecomment-340562836\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-21T18:04:59.804+0000",
                    "updated": "2017-11-21T18:04:59.804+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13072907/comment/16261192",
                    "id": "16261192",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "BryanCutler commented on issue #1259: ARROW-1047: [Java] Add Generic Reader Interface for Stream Format\nURL: https://github.com/apache/arrow/pull/1259#issuecomment-346112886\n \n \n   @siddharthteotia what ever is easier for this, but I would like to hear that I didn't break anything on your side :)  It's pretty easy to rebase this, so no need to rush\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-21T18:09:39.333+0000",
                    "updated": "2017-11-21T18:09:39.333+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13072907/comment/16261508",
                    "id": "16261508",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on a change in pull request #1259: ARROW-1047: [Java] Add Generic Reader Interface for Stream Format\nURL: https://github.com/apache/arrow/pull/1259#discussion_r152406142\n \n \n\n ##########\n File path: java/tools/src/main/java/org/apache/arrow/tools/EchoServer.java\n ##########\n @@ -23,8 +23,8 @@\n import org.apache.arrow.memory.BufferAllocator;\n import org.apache.arrow.memory.RootAllocator;\n import org.apache.arrow.vector.VectorSchemaRoot;\n-import org.apache.arrow.vector.stream.ArrowStreamReader;\n-import org.apache.arrow.vector.stream.ArrowStreamWriter;\n+import org.apache.arrow.vector.ipc.stream.ArrowStreamReader;\n+import org.apache.arrow.vector.ipc.stream.ArrowStreamWriter;\n \n Review comment:\n   These classes are all quite similar (the file format is very nearly the stream format, plus a file footer and magic numbers at start and end), I think it would make sense to keep them in a flat package namespace (but I'm not a Java expert)\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-21T21:26:19.131+0000",
                    "updated": "2017-11-21T21:26:19.131+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13072907/comment/16261521",
                    "id": "16261521",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "BryanCutler commented on a change in pull request #1259: ARROW-1047: [Java] Add Generic Reader Interface for Stream Format\nURL: https://github.com/apache/arrow/pull/1259#discussion_r152356580\n \n \n\n ##########\n File path: java/tools/src/main/java/org/apache/arrow/tools/EchoServer.java\n ##########\n @@ -23,8 +23,8 @@\n import org.apache.arrow.memory.BufferAllocator;\n import org.apache.arrow.memory.RootAllocator;\n import org.apache.arrow.vector.VectorSchemaRoot;\n-import org.apache.arrow.vector.stream.ArrowStreamReader;\n-import org.apache.arrow.vector.stream.ArrowStreamWriter;\n+import org.apache.arrow.vector.ipc.stream.ArrowStreamReader;\n+import org.apache.arrow.vector.ipc.stream.ArrowStreamWriter;\n \n Review comment:\n   Do you think the same for file and json readers, e.g. `ipc.ArrowFileReader`?  I made these subpackages because there were some supporting files specific to just the file reader, so they could be grouped together.  But I'm ok either way, @icexelloss brought this up here https://github.com/apache/arrow/pull/1259#issuecomment-340562836\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-21T21:38:00.376+0000",
                    "updated": "2017-11-21T21:38:00.376+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13072907/comment/16261735",
                    "id": "16261735",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on a change in pull request #1259: ARROW-1047: [Java] Add Generic Reader Interface for Stream Format\nURL: https://github.com/apache/arrow/pull/1259#discussion_r152439165\n \n \n\n ##########\n File path: java/tools/src/main/java/org/apache/arrow/tools/EchoServer.java\n ##########\n @@ -23,8 +23,8 @@\n import org.apache.arrow.memory.BufferAllocator;\n import org.apache.arrow.memory.RootAllocator;\n import org.apache.arrow.vector.VectorSchemaRoot;\n-import org.apache.arrow.vector.stream.ArrowStreamReader;\n-import org.apache.arrow.vector.stream.ArrowStreamWriter;\n+import org.apache.arrow.vector.ipc.stream.ArrowStreamReader;\n+import org.apache.arrow.vector.ipc.stream.ArrowStreamWriter;\n \n Review comment:\n   @icexelloss do you have an opinion on this? Would be good to get this patch in soon to facilitate testing\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-22T00:19:02.423+0000",
                    "updated": "2017-11-22T00:19:02.423+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13072907/comment/16261747",
                    "id": "16261747",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "icexelloss commented on a change in pull request #1259: ARROW-1047: [Java] Add Generic Reader Interface for Stream Format\nURL: https://github.com/apache/arrow/pull/1259#discussion_r152439921\n \n \n\n ##########\n File path: java/tools/src/main/java/org/apache/arrow/tools/EchoServer.java\n ##########\n @@ -23,8 +23,8 @@\n import org.apache.arrow.memory.BufferAllocator;\n import org.apache.arrow.memory.RootAllocator;\n import org.apache.arrow.vector.VectorSchemaRoot;\n-import org.apache.arrow.vector.stream.ArrowStreamReader;\n-import org.apache.arrow.vector.stream.ArrowStreamWriter;\n+import org.apache.arrow.vector.ipc.stream.ArrowStreamReader;\n+import org.apache.arrow.vector.ipc.stream.ArrowStreamWriter;\n \n Review comment:\n   I prefer `ipc.ArrowStreamReader` to `ipc.stream.ArrowStreamReader`\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-22T00:24:21.752+0000",
                    "updated": "2017-11-22T00:24:21.752+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13072907/comment/16261934",
                    "id": "16261934",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "icexelloss commented on issue #1259: ARROW-1047: [Java] Add Generic Reader Interface for Stream Format\nURL: https://github.com/apache/arrow/pull/1259#issuecomment-346235425\n \n \n   This looks good to me. Once the package name hierarchy I think this should be good to go. \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-22T03:49:28.779+0000",
                    "updated": "2017-11-22T03:49:28.779+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13072907/comment/16262873",
                    "id": "16262873",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "BryanCutler commented on a change in pull request #1259: ARROW-1047: [Java] Add Generic Reader Interface for Stream Format\nURL: https://github.com/apache/arrow/pull/1259#discussion_r152614571\n \n \n\n ##########\n File path: java/tools/src/main/java/org/apache/arrow/tools/EchoServer.java\n ##########\n @@ -23,8 +23,8 @@\n import org.apache.arrow.memory.BufferAllocator;\n import org.apache.arrow.memory.RootAllocator;\n import org.apache.arrow.vector.VectorSchemaRoot;\n-import org.apache.arrow.vector.stream.ArrowStreamReader;\n-import org.apache.arrow.vector.stream.ArrowStreamWriter;\n+import org.apache.arrow.vector.ipc.stream.ArrowStreamReader;\n+import org.apache.arrow.vector.ipc.stream.ArrowStreamWriter;\n \n Review comment:\n   Sure, I'm fine with this.  I'll change it now\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-22T16:23:35.264+0000",
                    "updated": "2017-11-22T16:23:35.264+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13072907/comment/16262925",
                    "id": "16262925",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "icexelloss commented on issue #1259: ARROW-1047: [Java] Add Generic Reader Interface for Stream Format\nURL: https://github.com/apache/arrow/pull/1259#issuecomment-346415200\n \n \n   LGTM. +1\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-22T17:10:11.509+0000",
                    "updated": "2017-11-22T17:10:11.509+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13072907/comment/16263020",
                    "id": "16263020",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on issue #1259: ARROW-1047: [Java] Add Generic Reader Interface for Stream Format\nURL: https://github.com/apache/arrow/pull/1259#issuecomment-346429291\n \n \n   Squashed and rebased so we can get a passing build. While we are waiting, do we also want the `vector.ipc.message` subnamespace? Do not have a strong feeling\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-22T18:01:54.230+0000",
                    "updated": "2017-11-22T18:01:54.230+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13072907/comment/16263033",
                    "id": "16263033",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "icexelloss commented on issue #1259: ARROW-1047: [Java] Add Generic Reader Interface for Stream Format\nURL: https://github.com/apache/arrow/pull/1259#issuecomment-346431446\n \n \n   I do not have a strong feeling either, I think `vector.ipc.message` subnamespace are fine. Although maybe we can move `ArrowMagic` to `message` subnamespace? @BryanCutler what do you think\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-22T18:10:35.096+0000",
                    "updated": "2017-11-22T18:10:35.096+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13072907/comment/16263034",
                    "id": "16263034",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "icexelloss commented on issue #1259: ARROW-1047: [Java] Add Generic Reader Interface for Stream Format\nURL: https://github.com/apache/arrow/pull/1259#issuecomment-346431446\n \n \n   I do not have a strong feeling either, I think `vector.ipc.message` subnamespace are fine. Although maybe we can move `ArrowMagic` to `message` subnamespace? Sorry for the oversight. @BryanCutler what do you think\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-22T18:10:51.829+0000",
                    "updated": "2017-11-22T18:10:51.829+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13072907/comment/16263122",
                    "id": "16263122",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on issue #1259: ARROW-1047: [Java] Add Generic Reader Interface for Stream Format\nURL: https://github.com/apache/arrow/pull/1259#issuecomment-346440612\n \n \n   Reviewing the past comments, since these classes are generally internal, I think it's fine. master is broken right now (ARROW-1845) so I will merge this\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-22T18:46:39.865+0000",
                    "updated": "2017-11-22T18:46:39.865+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13072907/comment/16263124",
                    "id": "16263124",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 1259\n[https://github.com/apache/arrow/pull/1259]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2017-11-22T18:47:05.696+0000",
                    "updated": "2017-11-22T18:47:05.696+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13072907/comment/16263125",
                    "id": "16263125",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm closed pull request #1259: ARROW-1047: [Java] Add Generic Reader Interface for Stream Format\nURL: https://github.com/apache/arrow/pull/1259\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/java/tools/src/main/java/org/apache/arrow/tools/EchoServer.java b/java/tools/src/main/java/org/apache/arrow/tools/EchoServer.java\nindex 3091bc4da..ce6b5164a 100644\n--- a/java/tools/src/main/java/org/apache/arrow/tools/EchoServer.java\n+++ b/java/tools/src/main/java/org/apache/arrow/tools/EchoServer.java\n@@ -23,8 +23,8 @@\n import org.apache.arrow.memory.BufferAllocator;\n import org.apache.arrow.memory.RootAllocator;\n import org.apache.arrow.vector.VectorSchemaRoot;\n-import org.apache.arrow.vector.stream.ArrowStreamReader;\n-import org.apache.arrow.vector.stream.ArrowStreamWriter;\n+import org.apache.arrow.vector.ipc.ArrowStreamReader;\n+import org.apache.arrow.vector.ipc.ArrowStreamWriter;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \ndiff --git a/java/tools/src/main/java/org/apache/arrow/tools/FileRoundtrip.java b/java/tools/src/main/java/org/apache/arrow/tools/FileRoundtrip.java\nindex ab8fa6e45..6e45305bf 100644\n--- a/java/tools/src/main/java/org/apache/arrow/tools/FileRoundtrip.java\n+++ b/java/tools/src/main/java/org/apache/arrow/tools/FileRoundtrip.java\n@@ -22,8 +22,8 @@\n import org.apache.arrow.memory.BufferAllocator;\n import org.apache.arrow.memory.RootAllocator;\n import org.apache.arrow.vector.VectorSchemaRoot;\n-import org.apache.arrow.vector.file.ArrowFileReader;\n-import org.apache.arrow.vector.file.ArrowFileWriter;\n+import org.apache.arrow.vector.ipc.ArrowFileReader;\n+import org.apache.arrow.vector.ipc.ArrowFileWriter;\n import org.apache.arrow.vector.types.pojo.Schema;\n import org.apache.commons.cli.CommandLine;\n import org.apache.commons.cli.CommandLineParser;\ndiff --git a/java/tools/src/main/java/org/apache/arrow/tools/FileToStream.java b/java/tools/src/main/java/org/apache/arrow/tools/FileToStream.java\nindex 6722b30fa..3db01f40c 100644\n--- a/java/tools/src/main/java/org/apache/arrow/tools/FileToStream.java\n+++ b/java/tools/src/main/java/org/apache/arrow/tools/FileToStream.java\n@@ -21,8 +21,8 @@\n import org.apache.arrow.memory.BufferAllocator;\n import org.apache.arrow.memory.RootAllocator;\n import org.apache.arrow.vector.VectorSchemaRoot;\n-import org.apache.arrow.vector.file.ArrowFileReader;\n-import org.apache.arrow.vector.stream.ArrowStreamWriter;\n+import org.apache.arrow.vector.ipc.ArrowFileReader;\n+import org.apache.arrow.vector.ipc.ArrowStreamWriter;\n \n import java.io.File;\n import java.io.FileInputStream;\ndiff --git a/java/tools/src/main/java/org/apache/arrow/tools/Integration.java b/java/tools/src/main/java/org/apache/arrow/tools/Integration.java\nindex d2b35e65a..666f1ddea 100644\n--- a/java/tools/src/main/java/org/apache/arrow/tools/Integration.java\n+++ b/java/tools/src/main/java/org/apache/arrow/tools/Integration.java\n@@ -22,11 +22,11 @@\n import org.apache.arrow.memory.BufferAllocator;\n import org.apache.arrow.memory.RootAllocator;\n import org.apache.arrow.vector.VectorSchemaRoot;\n-import org.apache.arrow.vector.file.ArrowBlock;\n-import org.apache.arrow.vector.file.ArrowFileReader;\n-import org.apache.arrow.vector.file.ArrowFileWriter;\n-import org.apache.arrow.vector.file.json.JsonFileReader;\n-import org.apache.arrow.vector.file.json.JsonFileWriter;\n+import org.apache.arrow.vector.ipc.message.ArrowBlock;\n+import org.apache.arrow.vector.ipc.ArrowFileReader;\n+import org.apache.arrow.vector.ipc.ArrowFileWriter;\n+import org.apache.arrow.vector.ipc.JsonFileReader;\n+import org.apache.arrow.vector.ipc.JsonFileWriter;\n import org.apache.arrow.vector.types.pojo.DictionaryEncoding;\n import org.apache.arrow.vector.types.pojo.Field;\n import org.apache.arrow.vector.types.pojo.Schema;\ndiff --git a/java/tools/src/main/java/org/apache/arrow/tools/StreamToFile.java b/java/tools/src/main/java/org/apache/arrow/tools/StreamToFile.java\nindex ef1a11f6b..42d336af9 100644\n--- a/java/tools/src/main/java/org/apache/arrow/tools/StreamToFile.java\n+++ b/java/tools/src/main/java/org/apache/arrow/tools/StreamToFile.java\n@@ -21,8 +21,8 @@\n import org.apache.arrow.memory.BufferAllocator;\n import org.apache.arrow.memory.RootAllocator;\n import org.apache.arrow.vector.VectorSchemaRoot;\n-import org.apache.arrow.vector.file.ArrowFileWriter;\n-import org.apache.arrow.vector.stream.ArrowStreamReader;\n+import org.apache.arrow.vector.ipc.ArrowFileWriter;\n+import org.apache.arrow.vector.ipc.ArrowStreamReader;\n \n import java.io.File;\n import java.io.FileInputStream;\ndiff --git a/java/tools/src/test/java/org/apache/arrow/tools/ArrowFileTestFixtures.java b/java/tools/src/test/java/org/apache/arrow/tools/ArrowFileTestFixtures.java\nindex c56a5a330..eac517d96 100644\n--- a/java/tools/src/test/java/org/apache/arrow/tools/ArrowFileTestFixtures.java\n+++ b/java/tools/src/test/java/org/apache/arrow/tools/ArrowFileTestFixtures.java\n@@ -28,9 +28,9 @@\n import org.apache.arrow.vector.complex.writer.BaseWriter.MapWriter;\n import org.apache.arrow.vector.complex.writer.BigIntWriter;\n import org.apache.arrow.vector.complex.writer.IntWriter;\n-import org.apache.arrow.vector.file.ArrowBlock;\n-import org.apache.arrow.vector.file.ArrowFileReader;\n-import org.apache.arrow.vector.file.ArrowFileWriter;\n+import org.apache.arrow.vector.ipc.message.ArrowBlock;\n+import org.apache.arrow.vector.ipc.ArrowFileReader;\n+import org.apache.arrow.vector.ipc.ArrowFileWriter;\n import org.apache.arrow.vector.types.pojo.Schema;\n import org.junit.Assert;\n \ndiff --git a/java/tools/src/test/java/org/apache/arrow/tools/EchoServerTest.java b/java/tools/src/test/java/org/apache/arrow/tools/EchoServerTest.java\nindex 89714e447..d8693c596 100644\n--- a/java/tools/src/test/java/org/apache/arrow/tools/EchoServerTest.java\n+++ b/java/tools/src/test/java/org/apache/arrow/tools/EchoServerTest.java\n@@ -44,8 +44,8 @@\n import org.apache.arrow.vector.dictionary.Dictionary;\n import org.apache.arrow.vector.dictionary.DictionaryProvider;\n import org.apache.arrow.vector.dictionary.DictionaryProvider.MapDictionaryProvider;\n-import org.apache.arrow.vector.stream.ArrowStreamReader;\n-import org.apache.arrow.vector.stream.ArrowStreamWriter;\n+import org.apache.arrow.vector.ipc.ArrowStreamReader;\n+import org.apache.arrow.vector.ipc.ArrowStreamWriter;\n import org.apache.arrow.vector.types.Types.MinorType;\n import org.apache.arrow.vector.types.pojo.ArrowType;\n import org.apache.arrow.vector.types.pojo.ArrowType.Int;\ndiff --git a/java/vector/src/main/codegen/templates/UnionVector.java b/java/vector/src/main/codegen/templates/UnionVector.java\nindex e44edbd47..73165315e 100644\n--- a/java/vector/src/main/codegen/templates/UnionVector.java\n+++ b/java/vector/src/main/codegen/templates/UnionVector.java\n@@ -32,7 +32,7 @@\n import org.apache.arrow.vector.BaseDataValueVector;\n import org.apache.arrow.vector.complex.impl.ComplexCopier;\n import org.apache.arrow.vector.util.CallBack;\n-import org.apache.arrow.vector.schema.ArrowFieldNode;\n+import org.apache.arrow.vector.ipc.message.ArrowFieldNode;\n import org.apache.arrow.memory.BaseAllocator;\n import org.apache.arrow.vector.BaseValueVector;\n import org.apache.arrow.vector.util.OversizedAllocationException;\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/BaseDataValueVector.java b/java/vector/src/main/java/org/apache/arrow/vector/BaseDataValueVector.java\nindex 38524ff8a..6d9eb1db0 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/BaseDataValueVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/BaseDataValueVector.java\n@@ -22,7 +22,7 @@\n import java.util.List;\n \n import org.apache.arrow.memory.BufferAllocator;\n-import org.apache.arrow.vector.schema.ArrowFieldNode;\n+import org.apache.arrow.vector.ipc.message.ArrowFieldNode;\n \n import io.netty.buffer.ArrowBuf;\n import org.apache.arrow.vector.util.CallBack;\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/BaseNullableFixedWidthVector.java b/java/vector/src/main/java/org/apache/arrow/vector/BaseNullableFixedWidthVector.java\nindex 209758e4e..f82077f69 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/BaseNullableFixedWidthVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/BaseNullableFixedWidthVector.java\n@@ -28,7 +28,7 @@\n import org.apache.arrow.memory.OutOfMemoryException;\n import org.apache.arrow.memory.BaseAllocator;\n import org.apache.arrow.memory.BufferAllocator;\n-import org.apache.arrow.vector.schema.ArrowFieldNode;\n+import org.apache.arrow.vector.ipc.message.ArrowFieldNode;\n import org.apache.arrow.vector.types.pojo.Field;\n import org.apache.arrow.vector.types.pojo.FieldType;\n import org.apache.arrow.vector.util.CallBack;\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/BaseNullableVariableWidthVector.java b/java/vector/src/main/java/org/apache/arrow/vector/BaseNullableVariableWidthVector.java\nindex edf4987de..b9e5442ec 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/BaseNullableVariableWidthVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/BaseNullableVariableWidthVector.java\n@@ -25,7 +25,7 @@\n import org.apache.arrow.memory.BaseAllocator;\n import org.apache.arrow.memory.BufferAllocator;\n import org.apache.arrow.vector.complex.NullableMapVector;\n-import org.apache.arrow.vector.schema.ArrowFieldNode;\n+import org.apache.arrow.vector.ipc.message.ArrowFieldNode;\n import org.apache.arrow.vector.types.pojo.Field;\n import org.apache.arrow.vector.types.pojo.FieldType;\n import org.apache.arrow.vector.util.CallBack;\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/BitVector.java b/java/vector/src/main/java/org/apache/arrow/vector/BitVector.java\nindex c6d404e15..26c817008 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/BitVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/BitVector.java\n@@ -24,7 +24,7 @@\n import org.apache.arrow.vector.complex.reader.FieldReader;\n import org.apache.arrow.vector.holders.BitHolder;\n import org.apache.arrow.vector.holders.NullableBitHolder;\n-import org.apache.arrow.vector.schema.ArrowFieldNode;\n+import org.apache.arrow.vector.ipc.message.ArrowFieldNode;\n import org.apache.arrow.vector.types.Types.MinorType;\n import org.apache.arrow.vector.types.pojo.Field;\n import org.apache.arrow.vector.util.OversizedAllocationException;\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/BitVectorHelper.java b/java/vector/src/main/java/org/apache/arrow/vector/BitVectorHelper.java\nindex 23252ca69..2d4db85c5 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/BitVectorHelper.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/BitVectorHelper.java\n@@ -20,7 +20,7 @@\n \n import io.netty.buffer.ArrowBuf;\n import org.apache.arrow.memory.BufferAllocator;\n-import org.apache.arrow.vector.schema.ArrowFieldNode;\n+import org.apache.arrow.vector.ipc.message.ArrowFieldNode;\n \n /**\n  * Helper class for performing generic operations on a bit vector buffer.\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/BufferBacked.java b/java/vector/src/main/java/org/apache/arrow/vector/BufferBacked.java\nindex a0dbf2bdc..332ca228a 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/BufferBacked.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/BufferBacked.java\n@@ -18,7 +18,7 @@\n \n package org.apache.arrow.vector;\n \n-import org.apache.arrow.vector.schema.ArrowFieldNode;\n+import org.apache.arrow.vector.ipc.message.ArrowFieldNode;\n \n import io.netty.buffer.ArrowBuf;\n \ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/FieldVector.java b/java/vector/src/main/java/org/apache/arrow/vector/FieldVector.java\nindex c2ed17eb4..509eeda75 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/FieldVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/FieldVector.java\n@@ -20,7 +20,7 @@\n \n import java.util.List;\n \n-import org.apache.arrow.vector.schema.ArrowFieldNode;\n+import org.apache.arrow.vector.ipc.message.ArrowFieldNode;\n import org.apache.arrow.vector.types.pojo.Field;\n \n import io.netty.buffer.ArrowBuf;\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/VectorLoader.java b/java/vector/src/main/java/org/apache/arrow/vector/VectorLoader.java\nindex 58fc80bbb..2cd4099c6 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/VectorLoader.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/VectorLoader.java\n@@ -24,9 +24,9 @@\n import java.util.Iterator;\n import java.util.List;\n \n-import org.apache.arrow.vector.schema.ArrowFieldNode;\n-import org.apache.arrow.vector.schema.ArrowRecordBatch;\n-import org.apache.arrow.vector.schema.VectorLayout;\n+import org.apache.arrow.vector.ipc.message.ArrowFieldNode;\n+import org.apache.arrow.vector.ipc.message.ArrowRecordBatch;\n+import org.apache.arrow.vector.ipc.message.VectorLayout;\n import org.apache.arrow.vector.types.pojo.Field;\n \n import com.google.common.collect.Iterators;\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/VectorUnloader.java b/java/vector/src/main/java/org/apache/arrow/vector/VectorUnloader.java\nindex fd9677312..2b034894a 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/VectorUnloader.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/VectorUnloader.java\n@@ -22,9 +22,9 @@\n import java.util.List;\n \n import io.netty.buffer.ArrowBuf;\n-import org.apache.arrow.vector.schema.ArrowFieldNode;\n-import org.apache.arrow.vector.schema.ArrowRecordBatch;\n-import org.apache.arrow.vector.schema.ArrowVectorType;\n+import org.apache.arrow.vector.ipc.message.ArrowFieldNode;\n+import org.apache.arrow.vector.ipc.message.ArrowRecordBatch;\n+import org.apache.arrow.vector.ipc.message.ArrowVectorType;\n \n public class VectorUnloader {\n \ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/ZeroVector.java b/java/vector/src/main/java/org/apache/arrow/vector/ZeroVector.java\nindex 3cc93a2a3..0ab3a7b68 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/ZeroVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/ZeroVector.java\n@@ -28,7 +28,7 @@\n import org.apache.arrow.memory.OutOfMemoryException;\n import org.apache.arrow.vector.complex.impl.NullReader;\n import org.apache.arrow.vector.complex.reader.FieldReader;\n-import org.apache.arrow.vector.schema.ArrowFieldNode;\n+import org.apache.arrow.vector.ipc.message.ArrowFieldNode;\n import org.apache.arrow.vector.types.Types.MinorType;\n import org.apache.arrow.vector.types.pojo.ArrowType.Null;\n import org.apache.arrow.vector.types.pojo.Field;\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/complex/FixedSizeListVector.java b/java/vector/src/main/java/org/apache/arrow/vector/complex/FixedSizeListVector.java\nindex 6713b1c78..774a10dbf 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/complex/FixedSizeListVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/complex/FixedSizeListVector.java\n@@ -33,7 +33,7 @@\n import org.apache.arrow.memory.OutOfMemoryException;\n import org.apache.arrow.vector.*;\n import org.apache.arrow.vector.complex.impl.UnionFixedSizeListReader;\n-import org.apache.arrow.vector.schema.ArrowFieldNode;\n+import org.apache.arrow.vector.ipc.message.ArrowFieldNode;\n import org.apache.arrow.vector.types.Types.MinorType;\n import org.apache.arrow.vector.types.pojo.ArrowType;\n import org.apache.arrow.vector.types.pojo.DictionaryEncoding;\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/complex/ListVector.java b/java/vector/src/main/java/org/apache/arrow/vector/complex/ListVector.java\nindex afe86a692..d50d4c447 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/complex/ListVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/complex/ListVector.java\n@@ -42,7 +42,7 @@\n import org.apache.arrow.vector.complex.impl.UnionListWriter;\n import org.apache.arrow.vector.complex.reader.FieldReader;\n import org.apache.arrow.vector.complex.writer.FieldWriter;\n-import org.apache.arrow.vector.schema.ArrowFieldNode;\n+import org.apache.arrow.vector.ipc.message.ArrowFieldNode;\n import org.apache.arrow.vector.types.Types.MinorType;\n import org.apache.arrow.vector.types.pojo.ArrowType;\n import org.apache.arrow.vector.types.pojo.DictionaryEncoding;\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/complex/NullableMapVector.java b/java/vector/src/main/java/org/apache/arrow/vector/complex/NullableMapVector.java\nindex f95302f55..e223d1ce6 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/complex/NullableMapVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/complex/NullableMapVector.java\n@@ -34,7 +34,7 @@\n import org.apache.arrow.vector.complex.impl.NullableMapReaderImpl;\n import org.apache.arrow.vector.complex.impl.NullableMapWriter;\n import org.apache.arrow.vector.holders.ComplexHolder;\n-import org.apache.arrow.vector.schema.ArrowFieldNode;\n+import org.apache.arrow.vector.ipc.message.ArrowFieldNode;\n import org.apache.arrow.vector.types.pojo.ArrowType;\n import org.apache.arrow.vector.types.pojo.ArrowType.Struct;\n import org.apache.arrow.vector.types.pojo.DictionaryEncoding;\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/file/ArrowFileReader.java b/java/vector/src/main/java/org/apache/arrow/vector/ipc/ArrowFileReader.java\nsimilarity index 77%\nrename from java/vector/src/main/java/org/apache/arrow/vector/file/ArrowFileReader.java\nrename to java/vector/src/main/java/org/apache/arrow/vector/ipc/ArrowFileReader.java\nindex d711b9c6c..4cd702622 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/file/ArrowFileReader.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/ipc/ArrowFileReader.java\n@@ -16,7 +16,7 @@\n  * limitations under the License.\n  */\n \n-package org.apache.arrow.vector.file;\n+package org.apache.arrow.vector.ipc;\n \n import java.io.IOException;\n import java.nio.ByteBuffer;\n@@ -26,32 +26,45 @@\n \n import org.apache.arrow.flatbuf.Footer;\n import org.apache.arrow.memory.BufferAllocator;\n-import org.apache.arrow.vector.schema.ArrowDictionaryBatch;\n-import org.apache.arrow.vector.schema.ArrowMessage;\n-import org.apache.arrow.vector.schema.ArrowRecordBatch;\n-import org.apache.arrow.vector.stream.MessageSerializer;\n+import org.apache.arrow.vector.ipc.message.ArrowBlock;\n+import org.apache.arrow.vector.ipc.message.ArrowFooter;\n+import org.apache.arrow.vector.ipc.message.ArrowDictionaryBatch;\n+import org.apache.arrow.vector.ipc.message.ArrowRecordBatch;\n+import org.apache.arrow.vector.ipc.message.MessageSerializer;\n import org.apache.arrow.vector.types.pojo.Schema;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-public class ArrowFileReader extends ArrowReader<SeekableReadChannel> {\n+public class ArrowFileReader extends ArrowReader {\n \n   private static final Logger LOGGER = LoggerFactory.getLogger(ArrowFileReader.class);\n \n+  private SeekableReadChannel in;\n   private ArrowFooter footer;\n   private int currentDictionaryBatch = 0;\n   private int currentRecordBatch = 0;\n \n+  public ArrowFileReader(SeekableReadChannel in, BufferAllocator allocator) {\n+    super(allocator);\n+    this.in = in;\n+  }\n+\n   public ArrowFileReader(SeekableByteChannel in, BufferAllocator allocator) {\n-    super(new SeekableReadChannel(in), allocator);\n+    this(new SeekableReadChannel(in), allocator);\n   }\n \n-  public ArrowFileReader(SeekableReadChannel in, BufferAllocator allocator) {\n-    super(in, allocator);\n+  @Override\n+  public long bytesRead() {\n+    return in.bytesRead();\n+  }\n+\n+  @Override\n+  protected void closeReadSource() throws IOException {\n+    in.close();\n   }\n \n   @Override\n-  protected Schema readSchema(SeekableReadChannel in) throws IOException {\n+  protected Schema readSchema() throws IOException {\n     if (footer == null) {\n       if (in.size() <= (ArrowMagic.MAGIC_LENGTH * 2 + 4)) {\n         throw new InvalidArrowFileException(\"file too small: \" + in.size());\n@@ -82,18 +95,30 @@ protected Schema readSchema(SeekableReadChannel in) throws IOException {\n   }\n \n   @Override\n-  protected ArrowMessage readMessage(SeekableReadChannel in, BufferAllocator allocator) throws IOException {\n-    if (currentDictionaryBatch < footer.getDictionaries().size()) {\n-      ArrowBlock block = footer.getDictionaries().get(currentDictionaryBatch++);\n-      return readDictionaryBatch(in, block, allocator);\n-    } else if (currentRecordBatch < footer.getRecordBatches().size()) {\n+  public ArrowDictionaryBatch readDictionary() throws IOException {\n+    if (currentDictionaryBatch >= footer.getDictionaries().size()) {\n+      throw new IOException(\"Requested more dictionaries than defined in footer: \" + currentDictionaryBatch);\n+    }\n+    ArrowBlock block = footer.getDictionaries().get(currentDictionaryBatch++);\n+    return readDictionaryBatch(in, block, allocator);\n+  }\n+\n+  // Returns true if a batch was read, false if no more batches\n+  @Override\n+  public boolean loadNextBatch() throws IOException {\n+    prepareLoadNextBatch();\n+\n+    if (currentRecordBatch < footer.getRecordBatches().size()) {\n       ArrowBlock block = footer.getRecordBatches().get(currentRecordBatch++);\n-      return readRecordBatch(in, block, allocator);\n+      ArrowRecordBatch batch = readRecordBatch(in, block, allocator);\n+      loadRecordBatch(batch);\n+      return true;\n     } else {\n-      return null;\n+      return false;\n     }\n   }\n \n+\n   public List<ArrowBlock> getDictionaryBlocks() throws IOException {\n     ensureInitialized();\n     return footer.getDictionaries();\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/file/ArrowFileWriter.java b/java/vector/src/main/java/org/apache/arrow/vector/ipc/ArrowFileWriter.java\nsimilarity index 94%\nrename from java/vector/src/main/java/org/apache/arrow/vector/file/ArrowFileWriter.java\nrename to java/vector/src/main/java/org/apache/arrow/vector/ipc/ArrowFileWriter.java\nindex 1d92d2bde..1b687c9f2 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/file/ArrowFileWriter.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/ipc/ArrowFileWriter.java\n@@ -16,7 +16,7 @@\n  * limitations under the License.\n  */\n \n-package org.apache.arrow.vector.file;\n+package org.apache.arrow.vector.ipc;\n \n import java.io.IOException;\n import java.nio.channels.WritableByteChannel;\n@@ -24,6 +24,8 @@\n \n import org.apache.arrow.vector.VectorSchemaRoot;\n import org.apache.arrow.vector.dictionary.DictionaryProvider;\n+import org.apache.arrow.vector.ipc.message.ArrowBlock;\n+import org.apache.arrow.vector.ipc.message.ArrowFooter;\n import org.apache.arrow.vector.types.pojo.Schema;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/file/ArrowMagic.java b/java/vector/src/main/java/org/apache/arrow/vector/ipc/ArrowMagic.java\nsimilarity index 93%\nrename from java/vector/src/main/java/org/apache/arrow/vector/file/ArrowMagic.java\nrename to java/vector/src/main/java/org/apache/arrow/vector/ipc/ArrowMagic.java\nindex 68313e787..a9310a608 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/file/ArrowMagic.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/ipc/ArrowMagic.java\n@@ -16,7 +16,9 @@\n  * limitations under the License.\n  */\n \n-package org.apache.arrow.vector.file;\n+package org.apache.arrow.vector.ipc;\n+\n+import org.apache.arrow.vector.ipc.WriteChannel;\n \n import java.io.IOException;\n import java.nio.charset.StandardCharsets;\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/file/ArrowReader.java b/java/vector/src/main/java/org/apache/arrow/vector/ipc/ArrowReader.java\nsimilarity index 65%\nrename from java/vector/src/main/java/org/apache/arrow/vector/file/ArrowReader.java\nrename to java/vector/src/main/java/org/apache/arrow/vector/ipc/ArrowReader.java\nindex 21fb2207e..6d708a03c 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/file/ArrowReader.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/ipc/ArrowReader.java\n@@ -16,7 +16,7 @@\n  * limitations under the License.\n  */\n \n-package org.apache.arrow.vector.file;\n+package org.apache.arrow.vector.ipc;\n \n import java.io.IOException;\n import java.util.ArrayList;\n@@ -33,32 +33,25 @@\n import org.apache.arrow.vector.VectorSchemaRoot;\n import org.apache.arrow.vector.dictionary.Dictionary;\n import org.apache.arrow.vector.dictionary.DictionaryProvider;\n-import org.apache.arrow.vector.schema.ArrowDictionaryBatch;\n-import org.apache.arrow.vector.schema.ArrowMessage;\n-import org.apache.arrow.vector.schema.ArrowMessage.ArrowMessageVisitor;\n-import org.apache.arrow.vector.schema.ArrowRecordBatch;\n+import org.apache.arrow.vector.ipc.message.ArrowDictionaryBatch;\n+import org.apache.arrow.vector.ipc.message.ArrowRecordBatch;\n import org.apache.arrow.vector.types.pojo.Field;\n import org.apache.arrow.vector.types.pojo.Schema;\n import org.apache.arrow.vector.util.DictionaryUtility;\n \n /**\n- * Abstract class to read ArrowRecordBatches from a ReadChannel.\n+ * Abstract class to read Schema and ArrowRecordBatches.\n  *\n- * @param <T> Type of ReadChannel to use\n  */\n-public abstract class ArrowReader<T extends ReadChannel> implements DictionaryProvider, AutoCloseable {\n-\n-  private final T in;\n-  private final BufferAllocator allocator;\n+public abstract class ArrowReader implements DictionaryProvider, AutoCloseable {\n \n+  protected final BufferAllocator allocator;\n   private VectorLoader loader;\n   private VectorSchemaRoot root;\n   private Map<Long, Dictionary> dictionaries;\n-\n   private boolean initialized = false;\n \n-  protected ArrowReader(T in, BufferAllocator allocator) {\n-    this.in = in;\n+  protected ArrowReader(BufferAllocator allocator) {\n     this.allocator = allocator;\n   }\n \n@@ -105,58 +98,18 @@ public Dictionary lookup(long id) {\n    * @return true if a batch was read, false on EOS\n    * @throws IOException\n    */\n-  public boolean loadNextBatch() throws IOException {\n-    ensureInitialized();\n-    // read in all dictionary batches, then stop after our first record batch\n-    ArrowMessageVisitor<Boolean> visitor = new ArrowMessageVisitor<Boolean>() {\n-      @Override\n-      public Boolean visit(ArrowDictionaryBatch message) {\n-        try {\n-          load(message);\n-        } finally {\n-          message.close();\n-        }\n-        return true;\n-      }\n-\n-      @Override\n-      public Boolean visit(ArrowRecordBatch message) {\n-        try {\n-          loader.load(message);\n-        } finally {\n-          message.close();\n-        }\n-        return false;\n-      }\n-    };\n-    root.setRowCount(0);\n-    ArrowMessage message = readMessage(in, allocator);\n-\n-    boolean readBatch = false;\n-    while (message != null) {\n-      if (!message.accepts(visitor)) {\n-        readBatch = true;\n-        break;\n-      }\n-      // else read a dictionary\n-      message = readMessage(in, allocator);\n-    }\n-\n-    return readBatch;\n-  }\n+  public abstract boolean loadNextBatch() throws IOException;\n \n   /**\n    * Return the number of bytes read from the ReadChannel.\n    *\n    * @return number of bytes read\n    */\n-  public long bytesRead() {\n-    return in.bytesRead();\n-  }\n+  public abstract long bytesRead();\n \n   /**\n    * Close resources, including vector schema root and dictionary vectors, and the\n-   * underlying ReadChannel.\n+   * underlying read source.\n    *\n    * @throws IOException\n    */\n@@ -167,12 +120,12 @@ public void close() throws IOException {\n \n   /**\n    * Close resources, including vector schema root and dictionary vectors. If the flag\n-   * closeReadChannel is true then close the underlying ReadChannel, otherwise leave it open.\n+   * closeReadChannel is true then close the underlying read source, otherwise leave it open.\n    *\n-   * @param closeReadChannel Flag to control if closing the underlying ReadChannel\n+   * @param closeReadSource Flag to control if closing the underlying read source\n    * @throws IOException\n    */\n-  public void close(boolean closeReadChannel) throws IOException {\n+  public void close(boolean closeReadSource) throws IOException {\n     if (initialized) {\n       root.close();\n       for (Dictionary dictionary : dictionaries.values()) {\n@@ -180,15 +133,40 @@ public void close(boolean closeReadChannel) throws IOException {\n       }\n     }\n \n-    if (closeReadChannel) {\n-      in.close();\n+    if (closeReadSource) {\n+      closeReadSource();\n     }\n   }\n \n-  protected abstract Schema readSchema(T in) throws IOException;\n+  /**\n+   * Close the underlying read source.\n+   *\n+   * @throws IOException\n+   */\n+  protected abstract void closeReadSource() throws IOException;\n+\n+  /**\n+   * Read the Schema from the source, will be invoked at the beginning the initialization.\n+   *\n+   * @return the read Schema\n+   * @throws IOException\n+   */\n+  protected abstract Schema readSchema() throws IOException;\n \n-  protected abstract ArrowMessage readMessage(T in, BufferAllocator allocator) throws IOException;\n+  /**\n+   * Read a dictionary batch from the source, will be invoked after the schema has been read and\n+   * called N times, where N is the number of dictionaries indicated by the schema Fields.\n+   *\n+   * @return the read ArrowDictionaryBatch\n+   * @throws IOException\n+   */\n+  protected abstract ArrowDictionaryBatch readDictionary() throws IOException;\n \n+  /**\n+   * Initialize if not done previously.\n+   *\n+   * @throws IOException\n+   */\n   protected void ensureInitialized() throws IOException {\n     if (!initialized) {\n       initialize();\n@@ -200,7 +178,7 @@ protected void ensureInitialized() throws IOException {\n    * Reads the schema and initializes the vectors\n    */\n   private void initialize() throws IOException {\n-    Schema originalSchema = readSchema(in);\n+    Schema originalSchema = readSchema();\n     List<Field> fields = new ArrayList<>();\n     List<FieldVector> vectors = new ArrayList<>();\n     Map<Long, Dictionary> dictionaries = new HashMap<>();\n@@ -216,9 +194,43 @@ private void initialize() throws IOException {\n     this.root = new VectorSchemaRoot(schema, vectors, 0);\n     this.loader = new VectorLoader(root);\n     this.dictionaries = Collections.unmodifiableMap(dictionaries);\n+\n+    // Read and load all dictionaries from schema\n+    for (int i = 0; i < dictionaries.size(); i++) {\n+      ArrowDictionaryBatch dictionaryBatch = readDictionary();\n+      loadDictionary(dictionaryBatch);\n+    }\n   }\n \n-  private void load(ArrowDictionaryBatch dictionaryBatch) {\n+  /**\n+   * Ensure the reader has been initialized and reset the VectorSchemaRoot row count to 0.\n+   *\n+   * @throws IOException\n+   */\n+  protected void prepareLoadNextBatch() throws IOException {\n+    ensureInitialized();\n+    root.setRowCount(0);\n+  }\n+\n+  /**\n+   * Load an ArrowRecordBatch to the readers VectorSchemaRoot.\n+   *\n+   * @param batch the record batch to load\n+   */\n+  protected void loadRecordBatch(ArrowRecordBatch batch) {\n+    try {\n+      loader.load(batch);\n+    } finally {\n+      batch.close();\n+    }\n+  }\n+\n+  /**\n+   * Load an ArrowDictionaryBatch to the readers dictionary vectors.\n+   *\n+   * @param dictionaryBatch\n+   */\n+  protected void loadDictionary(ArrowDictionaryBatch dictionaryBatch) {\n     long id = dictionaryBatch.getDictionaryId();\n     Dictionary dictionary = dictionaries.get(id);\n     if (dictionary == null) {\n@@ -227,6 +239,10 @@ private void load(ArrowDictionaryBatch dictionaryBatch) {\n     FieldVector vector = dictionary.getVector();\n     VectorSchemaRoot root = new VectorSchemaRoot(ImmutableList.of(vector.getField()), ImmutableList.of(vector), 0);\n     VectorLoader loader = new VectorLoader(root);\n-    loader.load(dictionaryBatch.getDictionary());\n+    try {\n+      loader.load(dictionaryBatch.getDictionary());\n+    } finally {\n+      dictionaryBatch.close();\n+    }\n   }\n }\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/ipc/ArrowStreamReader.java b/java/vector/src/main/java/org/apache/arrow/vector/ipc/ArrowStreamReader.java\nnew file mode 100644\nindex 000000000..d1e480218\n--- /dev/null\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/ipc/ArrowStreamReader.java\n@@ -0,0 +1,148 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.vector.ipc;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.channels.Channels;\n+import java.nio.channels.ReadableByteChannel;\n+\n+import org.apache.arrow.flatbuf.Message;\n+import org.apache.arrow.flatbuf.MessageHeader;\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.vector.ipc.ArrowReader;\n+import org.apache.arrow.vector.ipc.message.ArrowDictionaryBatch;\n+import org.apache.arrow.vector.ipc.message.ArrowRecordBatch;\n+import org.apache.arrow.vector.ipc.message.MessageChannelReader;\n+import org.apache.arrow.vector.ipc.message.MessageReader;\n+import org.apache.arrow.vector.ipc.message.MessageSerializer;\n+import org.apache.arrow.vector.ipc.ReadChannel;\n+import org.apache.arrow.vector.types.pojo.Schema;\n+\n+/**\n+ * This classes reads from an input stream and produces ArrowRecordBatches.\n+ */\n+public class ArrowStreamReader extends ArrowReader {\n+\n+  private MessageReader messageReader;\n+\n+  /**\n+   * Constructs a streaming reader using the MessageReader interface. Non-blocking.\n+   *\n+   * @param messageReader interface to get read messages\n+   * @param allocator to allocate new buffers\n+   */\n+  public ArrowStreamReader(MessageReader messageReader, BufferAllocator allocator) {\n+    super(allocator);\n+    this.messageReader = messageReader;\n+  }\n+\n+  /**\n+   * Constructs a streaming reader from a ReadableByteChannel input. Non-blocking.\n+   *\n+   * @param in ReadableByteChannel to read messages from\n+   * @param allocator to allocate new buffers\n+   */\n+  public ArrowStreamReader(ReadableByteChannel in, BufferAllocator allocator) {\n+    this(new MessageChannelReader(new ReadChannel(in)), allocator);\n+  }\n+\n+  /**\n+   * Constructs a streaming reader from an InputStream. Non-blocking.\n+   *\n+   * @param in InputStream to read messages from\n+   * @param allocator to allocate new buffers\n+   */\n+  public ArrowStreamReader(InputStream in, BufferAllocator allocator) {\n+    this(Channels.newChannel(in), allocator);\n+  }\n+\n+  /**\n+   * Get the number of bytes read from the stream since constructing the reader.\n+   *\n+   * @return number of bytes\n+   */\n+  @Override\n+  public long bytesRead() {\n+    return messageReader.bytesRead();\n+  }\n+\n+  /**\n+   * Closes the underlying read source.\n+   *\n+   * @throws IOException\n+   */\n+  @Override\n+  protected void closeReadSource() throws IOException {\n+    messageReader.close();\n+  }\n+\n+  /**\n+   * Load the next ArrowRecordBatch to the vector schema root if available.\n+   *\n+   * @return true if a batch was read, false on EOS\n+   * @throws IOException\n+   */\n+  public boolean loadNextBatch() throws IOException {\n+    prepareLoadNextBatch();\n+\n+    Message message = messageReader.readNextMessage();\n+\n+    // Reached EOS\n+    if (message == null) {\n+      return false;\n+    }\n+\n+    if (message.headerType() != MessageHeader.RecordBatch) {\n+      throw new IOException(\"Expected RecordBatch but header was \" + message.headerType());\n+    }\n+\n+    ArrowRecordBatch batch = MessageSerializer.deserializeRecordBatch(messageReader, message, allocator);\n+    loadRecordBatch(batch);\n+    return true;\n+  }\n+\n+  /**\n+   * Reads the schema message from the beginning of the stream.\n+   *\n+   * @return the deserialized arrow schema\n+   */\n+  @Override\n+  protected Schema readSchema() throws IOException {\n+    return MessageSerializer.deserializeSchema(messageReader);\n+  }\n+\n+  /**\n+   * Read a dictionary batch message, will be invoked after the schema and before normal record\n+   * batches are read.\n+   *\n+   * @return the deserialized dictionary batch\n+   * @throws IOException\n+   */\n+  @Override\n+  protected ArrowDictionaryBatch readDictionary() throws IOException {\n+    Message message = messageReader.readNextMessage();\n+\n+    if (message.headerType() != MessageHeader.DictionaryBatch) {\n+      throw new IOException(\"Expected DictionaryBatch but header was \" + message.headerType());\n+    }\n+\n+    return MessageSerializer.deserializeDictionaryBatch(messageReader, message, allocator);\n+  }\n+}\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/stream/ArrowStreamWriter.java b/java/vector/src/main/java/org/apache/arrow/vector/ipc/ArrowStreamWriter.java\nsimilarity index 84%\nrename from java/vector/src/main/java/org/apache/arrow/vector/stream/ArrowStreamWriter.java\nrename to java/vector/src/main/java/org/apache/arrow/vector/ipc/ArrowStreamWriter.java\nindex b854cd2bb..d731d05b8 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/stream/ArrowStreamWriter.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/ipc/ArrowStreamWriter.java\n@@ -16,16 +16,13 @@\n  * limitations under the License.\n  */\n \n-package org.apache.arrow.vector.stream;\n+package org.apache.arrow.vector.ipc;\n \n-import org.apache.arrow.memory.BufferAllocator;\n-import org.apache.arrow.vector.FieldVector;\n import org.apache.arrow.vector.VectorSchemaRoot;\n import org.apache.arrow.vector.dictionary.DictionaryProvider;\n-import org.apache.arrow.vector.file.ArrowBlock;\n-import org.apache.arrow.vector.file.ArrowWriter;\n-import org.apache.arrow.vector.file.WriteChannel;\n-import org.apache.arrow.vector.types.pojo.Field;\n+import org.apache.arrow.vector.ipc.message.ArrowBlock;\n+import org.apache.arrow.vector.ipc.ArrowWriter;\n+import org.apache.arrow.vector.ipc.WriteChannel;\n import org.apache.arrow.vector.types.pojo.Schema;\n \n import java.io.IOException;\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/file/ArrowWriter.java b/java/vector/src/main/java/org/apache/arrow/vector/ipc/ArrowWriter.java\nsimilarity index 95%\nrename from java/vector/src/main/java/org/apache/arrow/vector/file/ArrowWriter.java\nrename to java/vector/src/main/java/org/apache/arrow/vector/ipc/ArrowWriter.java\nindex 7dc10b5e6..4b483d010 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/file/ArrowWriter.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/ipc/ArrowWriter.java\n@@ -16,7 +16,7 @@\n  * limitations under the License.\n  */\n \n-package org.apache.arrow.vector.file;\n+package org.apache.arrow.vector.ipc;\n \n import java.io.IOException;\n import java.nio.channels.WritableByteChannel;\n@@ -30,9 +30,10 @@\n import org.apache.arrow.vector.VectorUnloader;\n import org.apache.arrow.vector.dictionary.Dictionary;\n import org.apache.arrow.vector.dictionary.DictionaryProvider;\n-import org.apache.arrow.vector.schema.ArrowDictionaryBatch;\n-import org.apache.arrow.vector.schema.ArrowRecordBatch;\n-import org.apache.arrow.vector.stream.MessageSerializer;\n+import org.apache.arrow.vector.ipc.message.ArrowBlock;\n+import org.apache.arrow.vector.ipc.message.ArrowDictionaryBatch;\n+import org.apache.arrow.vector.ipc.message.ArrowRecordBatch;\n+import org.apache.arrow.vector.ipc.message.MessageSerializer;\n import org.apache.arrow.vector.types.pojo.Field;\n import org.apache.arrow.vector.types.pojo.Schema;\n import org.apache.arrow.vector.util.DictionaryUtility;\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/file/InvalidArrowFileException.java b/java/vector/src/main/java/org/apache/arrow/vector/ipc/InvalidArrowFileException.java\nsimilarity index 96%\nrename from java/vector/src/main/java/org/apache/arrow/vector/file/InvalidArrowFileException.java\nrename to java/vector/src/main/java/org/apache/arrow/vector/ipc/InvalidArrowFileException.java\nindex 607207f41..ad9d8776e 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/file/InvalidArrowFileException.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/ipc/InvalidArrowFileException.java\n@@ -16,7 +16,7 @@\n  * limitations under the License.\n  */\n \n-package org.apache.arrow.vector.file;\n+package org.apache.arrow.vector.ipc;\n \n public class InvalidArrowFileException extends RuntimeException {\n   private static final long serialVersionUID = 1L;\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/file/json/JsonFileReader.java b/java/vector/src/main/java/org/apache/arrow/vector/ipc/JsonFileReader.java\nsimilarity index 98%\nrename from java/vector/src/main/java/org/apache/arrow/vector/file/json/JsonFileReader.java\nrename to java/vector/src/main/java/org/apache/arrow/vector/ipc/JsonFileReader.java\nindex 8017b385d..cb11a2530 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/file/json/JsonFileReader.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/ipc/JsonFileReader.java\n@@ -16,19 +16,18 @@\n  * limitations under the License.\n  ******************************************************************************/\n \n-package org.apache.arrow.vector.file.json;\n+package org.apache.arrow.vector.ipc;\n \n import static com.fasterxml.jackson.core.JsonToken.END_ARRAY;\n import static com.fasterxml.jackson.core.JsonToken.END_OBJECT;\n import static com.fasterxml.jackson.core.JsonToken.START_ARRAY;\n import static com.fasterxml.jackson.core.JsonToken.START_OBJECT;\n import static java.nio.charset.StandardCharsets.UTF_8;\n-import static org.apache.arrow.vector.schema.ArrowVectorType.*;\n+import static org.apache.arrow.vector.ipc.message.ArrowVectorType.*;\n \n import java.io.File;\n import java.io.IOException;\n import java.math.BigDecimal;\n-import java.math.BigInteger;\n import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.List;\n@@ -42,9 +41,8 @@\n import org.apache.arrow.vector.*;\n import org.apache.arrow.vector.dictionary.Dictionary;\n import org.apache.arrow.vector.dictionary.DictionaryProvider;\n-import org.apache.arrow.vector.file.InvalidArrowFileException;\n-import org.apache.arrow.vector.schema.ArrowFieldNode;\n-import org.apache.arrow.vector.schema.ArrowVectorType;\n+import org.apache.arrow.vector.ipc.message.ArrowFieldNode;\n+import org.apache.arrow.vector.ipc.message.ArrowVectorType;\n import org.apache.arrow.vector.types.Types;\n import org.apache.arrow.vector.types.pojo.Field;\n import org.apache.arrow.vector.types.pojo.Schema;\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/file/json/JsonFileWriter.java b/java/vector/src/main/java/org/apache/arrow/vector/ipc/JsonFileWriter.java\nsimilarity index 98%\nrename from java/vector/src/main/java/org/apache/arrow/vector/file/json/JsonFileWriter.java\nrename to java/vector/src/main/java/org/apache/arrow/vector/ipc/JsonFileWriter.java\nindex 0c8507b51..22423b844 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/file/json/JsonFileWriter.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/ipc/JsonFileWriter.java\n@@ -16,9 +16,9 @@\n  * limitations under the License.\n  ******************************************************************************/\n \n-package org.apache.arrow.vector.file.json;\n+package org.apache.arrow.vector.ipc;\n \n-import static org.apache.arrow.vector.schema.ArrowVectorType.*;\n+import static org.apache.arrow.vector.ipc.message.ArrowVectorType.*;\n \n import java.io.File;\n import java.io.IOException;\n@@ -33,7 +33,7 @@\n import org.apache.arrow.vector.*;\n import org.apache.arrow.vector.dictionary.Dictionary;\n import org.apache.arrow.vector.dictionary.DictionaryProvider;\n-import org.apache.arrow.vector.schema.ArrowVectorType;\n+import org.apache.arrow.vector.ipc.message.ArrowVectorType;\n import org.apache.arrow.vector.types.Types;\n import org.apache.arrow.vector.types.pojo.Field;\n import org.apache.arrow.vector.types.pojo.Schema;\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/file/ReadChannel.java b/java/vector/src/main/java/org/apache/arrow/vector/ipc/ReadChannel.java\nsimilarity index 98%\nrename from java/vector/src/main/java/org/apache/arrow/vector/file/ReadChannel.java\nrename to java/vector/src/main/java/org/apache/arrow/vector/ipc/ReadChannel.java\nindex b0eb8f3d8..395fd7db5 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/file/ReadChannel.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/ipc/ReadChannel.java\n@@ -16,7 +16,7 @@\n  * limitations under the License.\n  */\n \n-package org.apache.arrow.vector.file;\n+package org.apache.arrow.vector.ipc;\n \n import java.io.IOException;\n import java.nio.ByteBuffer;\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/file/SeekableReadChannel.java b/java/vector/src/main/java/org/apache/arrow/vector/ipc/SeekableReadChannel.java\nsimilarity index 97%\nrename from java/vector/src/main/java/org/apache/arrow/vector/file/SeekableReadChannel.java\nrename to java/vector/src/main/java/org/apache/arrow/vector/ipc/SeekableReadChannel.java\nindex 46bea1314..62ba3b73e 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/file/SeekableReadChannel.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/ipc/SeekableReadChannel.java\n@@ -16,7 +16,7 @@\n  * limitations under the License.\n  */\n \n-package org.apache.arrow.vector.file;\n+package org.apache.arrow.vector.ipc;\n \n import java.io.IOException;\n import java.nio.channels.SeekableByteChannel;\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/file/WriteChannel.java b/java/vector/src/main/java/org/apache/arrow/vector/ipc/WriteChannel.java\nsimilarity index 97%\nrename from java/vector/src/main/java/org/apache/arrow/vector/file/WriteChannel.java\nrename to java/vector/src/main/java/org/apache/arrow/vector/ipc/WriteChannel.java\nindex 89c9d1f9b..da500aa97 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/file/WriteChannel.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/ipc/WriteChannel.java\n@@ -16,7 +16,7 @@\n  * limitations under the License.\n  */\n \n-package org.apache.arrow.vector.file;\n+package org.apache.arrow.vector.ipc;\n \n import java.io.IOException;\n import java.nio.ByteBuffer;\n@@ -25,7 +25,7 @@\n import com.google.flatbuffers.FlatBufferBuilder;\n \n import io.netty.buffer.ArrowBuf;\n-import org.apache.arrow.vector.schema.FBSerializable;\n+import org.apache.arrow.vector.ipc.message.FBSerializable;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/file/ArrowBlock.java b/java/vector/src/main/java/org/apache/arrow/vector/ipc/message/ArrowBlock.java\nsimilarity index 96%\nrename from java/vector/src/main/java/org/apache/arrow/vector/file/ArrowBlock.java\nrename to java/vector/src/main/java/org/apache/arrow/vector/ipc/message/ArrowBlock.java\nindex e1b4d6a8b..8731f77ac 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/file/ArrowBlock.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/ipc/message/ArrowBlock.java\n@@ -16,10 +16,9 @@\n  * limitations under the License.\n  */\n \n-package org.apache.arrow.vector.file;\n+package org.apache.arrow.vector.ipc.message;\n \n import org.apache.arrow.flatbuf.Block;\n-import org.apache.arrow.vector.schema.FBSerializable;\n \n import com.google.flatbuffers.FlatBufferBuilder;\n \ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/schema/ArrowBuffer.java b/java/vector/src/main/java/org/apache/arrow/vector/ipc/message/ArrowBuffer.java\nsimilarity index 97%\nrename from java/vector/src/main/java/org/apache/arrow/vector/schema/ArrowBuffer.java\nrename to java/vector/src/main/java/org/apache/arrow/vector/ipc/message/ArrowBuffer.java\nindex 4e0187e79..6b0eeaad4 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/schema/ArrowBuffer.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/ipc/message/ArrowBuffer.java\n@@ -16,7 +16,7 @@\n  * limitations under the License.\n  */\n \n-package org.apache.arrow.vector.schema;\n+package org.apache.arrow.vector.ipc.message;\n \n import org.apache.arrow.flatbuf.Buffer;\n \ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/schema/ArrowDictionaryBatch.java b/java/vector/src/main/java/org/apache/arrow/vector/ipc/message/ArrowDictionaryBatch.java\nsimilarity index 97%\nrename from java/vector/src/main/java/org/apache/arrow/vector/schema/ArrowDictionaryBatch.java\nrename to java/vector/src/main/java/org/apache/arrow/vector/ipc/message/ArrowDictionaryBatch.java\nindex 635fa3fb4..cd23cb96b 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/schema/ArrowDictionaryBatch.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/ipc/message/ArrowDictionaryBatch.java\n@@ -16,7 +16,7 @@\n  * limitations under the License.\n  */\n \n-package org.apache.arrow.vector.schema;\n+package org.apache.arrow.vector.ipc.message;\n \n import com.google.flatbuffers.FlatBufferBuilder;\n import org.apache.arrow.flatbuf.DictionaryBatch;\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/schema/ArrowFieldNode.java b/java/vector/src/main/java/org/apache/arrow/vector/ipc/message/ArrowFieldNode.java\nsimilarity index 97%\nrename from java/vector/src/main/java/org/apache/arrow/vector/schema/ArrowFieldNode.java\nrename to java/vector/src/main/java/org/apache/arrow/vector/ipc/message/ArrowFieldNode.java\nindex 3ed384ed7..ca0087f70 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/schema/ArrowFieldNode.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/ipc/message/ArrowFieldNode.java\n@@ -16,7 +16,7 @@\n  * limitations under the License.\n  */\n \n-package org.apache.arrow.vector.schema;\n+package org.apache.arrow.vector.ipc.message;\n \n import org.apache.arrow.flatbuf.FieldNode;\n \ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/file/ArrowFooter.java b/java/vector/src/main/java/org/apache/arrow/vector/ipc/message/ArrowFooter.java\nsimilarity index 96%\nrename from java/vector/src/main/java/org/apache/arrow/vector/file/ArrowFooter.java\nrename to java/vector/src/main/java/org/apache/arrow/vector/ipc/message/ArrowFooter.java\nindex 1e95321fd..f7794f736 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/file/ArrowFooter.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/ipc/message/ArrowFooter.java\n@@ -16,16 +16,15 @@\n  * limitations under the License.\n  */\n \n-package org.apache.arrow.vector.file;\n+package org.apache.arrow.vector.ipc.message;\n \n-import static org.apache.arrow.vector.schema.FBSerializables.writeAllStructsToVector;\n+import static org.apache.arrow.vector.ipc.message.FBSerializables.writeAllStructsToVector;\n \n import java.util.ArrayList;\n import java.util.List;\n \n import org.apache.arrow.flatbuf.Block;\n import org.apache.arrow.flatbuf.Footer;\n-import org.apache.arrow.vector.schema.FBSerializable;\n import org.apache.arrow.vector.types.pojo.Schema;\n \n import com.google.flatbuffers.FlatBufferBuilder;\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/schema/ArrowMessage.java b/java/vector/src/main/java/org/apache/arrow/vector/ipc/message/ArrowMessage.java\nsimilarity index 96%\nrename from java/vector/src/main/java/org/apache/arrow/vector/schema/ArrowMessage.java\nrename to java/vector/src/main/java/org/apache/arrow/vector/ipc/message/ArrowMessage.java\nindex f59b4b6c1..92fb58e16 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/schema/ArrowMessage.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/ipc/message/ArrowMessage.java\n@@ -16,7 +16,7 @@\n  * limitations under the License.\n  */\n \n-package org.apache.arrow.vector.schema;\n+package org.apache.arrow.vector.ipc.message;\n \n public interface ArrowMessage extends FBSerializable, AutoCloseable {\n \ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/schema/ArrowRecordBatch.java b/java/vector/src/main/java/org/apache/arrow/vector/ipc/message/ArrowRecordBatch.java\nsimilarity index 94%\nrename from java/vector/src/main/java/org/apache/arrow/vector/schema/ArrowRecordBatch.java\nrename to java/vector/src/main/java/org/apache/arrow/vector/ipc/message/ArrowRecordBatch.java\nindex bf0967a27..6c6481e74 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/schema/ArrowRecordBatch.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/ipc/message/ArrowRecordBatch.java\n@@ -16,9 +16,7 @@\n  * limitations under the License.\n  */\n \n-package org.apache.arrow.vector.schema;\n-\n-import static org.apache.arrow.vector.schema.FBSerializables.writeAllStructsToVector;\n+package org.apache.arrow.vector.ipc.message;\n \n import java.nio.ByteBuffer;\n import java.util.ArrayList;\n@@ -113,9 +111,9 @@ public int getLength() {\n   @Override\n   public int writeTo(FlatBufferBuilder builder) {\n     RecordBatch.startNodesVector(builder, nodes.size());\n-    int nodesOffset = writeAllStructsToVector(builder, nodes);\n+    int nodesOffset = FBSerializables.writeAllStructsToVector(builder, nodes);\n     RecordBatch.startBuffersVector(builder, buffers.size());\n-    int buffersOffset = writeAllStructsToVector(builder, buffersLayout);\n+    int buffersOffset = FBSerializables.writeAllStructsToVector(builder, buffersLayout);\n     RecordBatch.startRecordBatch(builder);\n     RecordBatch.addLength(builder, length);\n     RecordBatch.addNodes(builder, nodesOffset);\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/schema/ArrowVectorType.java b/java/vector/src/main/java/org/apache/arrow/vector/ipc/message/ArrowVectorType.java\nsimilarity index 98%\nrename from java/vector/src/main/java/org/apache/arrow/vector/schema/ArrowVectorType.java\nrename to java/vector/src/main/java/org/apache/arrow/vector/ipc/message/ArrowVectorType.java\nindex 9d2fdfaaf..3342652be 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/schema/ArrowVectorType.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/ipc/message/ArrowVectorType.java\n@@ -16,7 +16,7 @@\n  * limitations under the License.\n  */\n \n-package org.apache.arrow.vector.schema;\n+package org.apache.arrow.vector.ipc.message;\n \n import java.util.Map;\n \ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/schema/FBSerializable.java b/java/vector/src/main/java/org/apache/arrow/vector/ipc/message/FBSerializable.java\nsimilarity index 95%\nrename from java/vector/src/main/java/org/apache/arrow/vector/schema/FBSerializable.java\nrename to java/vector/src/main/java/org/apache/arrow/vector/ipc/message/FBSerializable.java\nindex 91d60ea99..31f55bd52 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/schema/FBSerializable.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/ipc/message/FBSerializable.java\n@@ -16,7 +16,7 @@\n  * limitations under the License.\n  */\n \n-package org.apache.arrow.vector.schema;\n+package org.apache.arrow.vector.ipc.message;\n \n import com.google.flatbuffers.FlatBufferBuilder;\n \ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/schema/FBSerializables.java b/java/vector/src/main/java/org/apache/arrow/vector/ipc/message/FBSerializables.java\nsimilarity index 96%\nrename from java/vector/src/main/java/org/apache/arrow/vector/schema/FBSerializables.java\nrename to java/vector/src/main/java/org/apache/arrow/vector/ipc/message/FBSerializables.java\nindex ae5aa555e..6717ed7ab 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/schema/FBSerializables.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/ipc/message/FBSerializables.java\n@@ -16,7 +16,7 @@\n  * limitations under the License.\n  */\n \n-package org.apache.arrow.vector.schema;\n+package org.apache.arrow.vector.ipc.message;\n \n import java.util.ArrayList;\n import java.util.Collections;\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/ipc/message/MessageChannelReader.java b/java/vector/src/main/java/org/apache/arrow/vector/ipc/message/MessageChannelReader.java\nnew file mode 100644\nindex 000000000..5bc3e1fff\n--- /dev/null\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/ipc/message/MessageChannelReader.java\n@@ -0,0 +1,115 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.vector.ipc.message;\n+\n+\n+import io.netty.buffer.ArrowBuf;\n+import org.apache.arrow.flatbuf.Message;\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.vector.ipc.ReadChannel;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+\n+/**\n+ * Reads a sequence of messages using a ReadChannel.\n+ */\n+public class MessageChannelReader implements MessageReader {\n+\n+  private ReadChannel in;\n+\n+  /**\n+   * Construct from an existing ReadChannel.\n+   *\n+   * @param in Channel to read messages from\n+   */\n+  public MessageChannelReader(ReadChannel in) {\n+    this.in = in;\n+  }\n+\n+  /**\n+   * Read the next message from the ReadChannel.\n+   *\n+   * @return A Message or null if ReadChannel has no more messages, indicated by message length of 0\n+   * @throws IOException\n+   */\n+  @Override\n+  public Message readNextMessage() throws IOException {\n+    // Read the message size. There is an i32 little endian prefix.\n+    ByteBuffer buffer = ByteBuffer.allocate(4);\n+    if (in.readFully(buffer) != 4) {\n+      return null;\n+    }\n+    int messageLength = MessageSerializer.bytesToInt(buffer.array());\n+    if (messageLength == 0) {\n+      return null;\n+    }\n+\n+    buffer = ByteBuffer.allocate(messageLength);\n+    if (in.readFully(buffer) != messageLength) {\n+      throw new IOException(\n+          \"Unexpected end of stream trying to read message.\");\n+    }\n+    buffer.rewind();\n+\n+    return Message.getRootAsMessage(buffer);\n+  }\n+\n+  /**\n+   * Read a message body from the ReadChannel.\n+   *\n+   * @param message Read message that is followed by a body of data\n+   * @param allocator BufferAllocator to allocate memory for body data\n+   * @return ArrowBuf containing the message body data\n+   * @throws IOException\n+   */\n+  @Override\n+  public ArrowBuf readMessageBody(Message message, BufferAllocator allocator) throws IOException {\n+\n+    int bodyLength = (int) message.bodyLength();\n+\n+    // Now read the record batch body\n+    ArrowBuf buffer = allocator.buffer(bodyLength);\n+    if (in.readFully(buffer, bodyLength) != bodyLength) {\n+      throw new IOException(\"Unexpected end of input trying to read batch.\");\n+    }\n+\n+    return buffer;\n+  }\n+\n+  /**\n+   * Get the number of bytes read from the ReadChannel.\n+   *\n+   * @return number of bytes\n+   */\n+  @Override\n+  public long bytesRead() {\n+    return in.bytesRead();\n+  }\n+\n+  /**\n+   * Close the ReadChannel.\n+   *\n+   * @throws IOException\n+   */\n+  @Override\n+  public void close() throws IOException {\n+    in.close();\n+  }\n+}\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/ipc/message/MessageReader.java b/java/vector/src/main/java/org/apache/arrow/vector/ipc/message/MessageReader.java\nnew file mode 100644\nindex 000000000..b277c5829\n--- /dev/null\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/ipc/message/MessageReader.java\n@@ -0,0 +1,65 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.vector.ipc.message;\n+\n+\n+import io.netty.buffer.ArrowBuf;\n+import org.apache.arrow.flatbuf.Message;\n+import org.apache.arrow.memory.BufferAllocator;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Interface for reading a sequence of messages.\n+ */\n+public interface MessageReader {\n+\n+  /**\n+   * Read the next message in the sequence.\n+   *\n+   * @return The read message or null if reached the end of the message sequence\n+   * @throws IOException\n+   */\n+  Message readNextMessage() throws IOException;\n+\n+  /**\n+   * When a message is followed by a body of data, read that data into an ArrowBuf. This should\n+   * only be called when a Message has a body length > 0.\n+   *\n+   * @param message Read message that is followed by a body of data\n+   * @param allocator BufferAllocator to allocate memory for body data\n+   * @return An ArrowBuf containing the body of the message that was read\n+   * @throws IOException\n+   */\n+  ArrowBuf readMessageBody(Message message, BufferAllocator allocator) throws IOException;\n+\n+  /**\n+   * Return the current number of bytes that have been read.\n+   *\n+   * @return number of bytes read\n+   */\n+  long bytesRead();\n+\n+  /**\n+   * Close any resource opened by the message reader, not including message body allocations.\n+   *\n+   * @throws IOException\n+   */\n+  void close() throws IOException;\n+}\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/stream/MessageSerializer.java b/java/vector/src/main/java/org/apache/arrow/vector/ipc/message/MessageSerializer.java\nsimilarity index 86%\nrename from java/vector/src/main/java/org/apache/arrow/vector/stream/MessageSerializer.java\nrename to java/vector/src/main/java/org/apache/arrow/vector/ipc/message/MessageSerializer.java\nindex c397cec72..e2f8f7d9a 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/stream/MessageSerializer.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/ipc/message/MessageSerializer.java\n@@ -16,7 +16,7 @@\n  * limitations under the License.\n  */\n \n-package org.apache.arrow.vector.stream;\n+package org.apache.arrow.vector.ipc.message;\n \n import java.io.IOException;\n import java.nio.ByteBuffer;\n@@ -31,14 +31,8 @@\n import org.apache.arrow.flatbuf.MetadataVersion;\n import org.apache.arrow.flatbuf.RecordBatch;\n import org.apache.arrow.memory.BufferAllocator;\n-import org.apache.arrow.vector.file.ArrowBlock;\n-import org.apache.arrow.vector.file.ReadChannel;\n-import org.apache.arrow.vector.file.WriteChannel;\n-import org.apache.arrow.vector.schema.ArrowBuffer;\n-import org.apache.arrow.vector.schema.ArrowDictionaryBatch;\n-import org.apache.arrow.vector.schema.ArrowFieldNode;\n-import org.apache.arrow.vector.schema.ArrowMessage;\n-import org.apache.arrow.vector.schema.ArrowRecordBatch;\n+import org.apache.arrow.vector.ipc.ReadChannel;\n+import org.apache.arrow.vector.ipc.WriteChannel;\n import org.apache.arrow.vector.types.pojo.Schema;\n \n import com.google.flatbuffers.FlatBufferBuilder;\n@@ -102,12 +96,12 @@ public static long serialize(WriteChannel out, Schema schema) throws IOException\n   /**\n    * Deserializes a schema object. Format is from serialize().\n    *\n-   * @param in the channel to deserialize from\n+   * @param reader the reader interface to deserialize from\n    * @return the deserialized object\n    * @throws IOException if something went wrong\n    */\n-  public static Schema deserializeSchema(ReadChannel in) throws IOException {\n-    Message message = deserializeMessage(in);\n+  public static Schema deserializeSchema(MessageReader reader) throws IOException {\n+    Message message = reader.readNextMessage();\n     if (message == null) {\n       throw new IOException(\"Unexpected end of input. Missing schema.\");\n     }\n@@ -119,6 +113,16 @@ public static Schema deserializeSchema(ReadChannel in) throws IOException {\n         message.header(new org.apache.arrow.flatbuf.Schema()));\n   }\n \n+  /**\n+   * Deserializes a schema object. Format is from serialize().\n+   *\n+   * @param in the channel to deserialize from\n+   * @return the deserialized object\n+   * @throws IOException if something went wrong\n+   */\n+  public static Schema deserializeSchema(ReadChannel in) throws IOException {\n+    return deserializeSchema(new MessageChannelReader(in));\n+  }\n \n   /**\n    * Serializes an ArrowRecordBatch. Returns the offset and length of the written batch.\n@@ -184,25 +188,20 @@ public static long writeBatchBuffers(WriteChannel out, ArrowRecordBatch batch) t\n   }\n \n   /**\n-   * Deserializes a RecordBatch\n+   * Deserializes a RecordBatch.\n    *\n-   * @param in      the channel to deserialize from\n+   * @param reader  the reader interface to deserialize from\n    * @param message the object to derialize to\n    * @param alloc   to allocate buffers\n    * @return the deserialized object\n    * @throws IOException if something went wrong\n    */\n-  public static ArrowRecordBatch deserializeRecordBatch(ReadChannel in, Message message, BufferAllocator alloc)\n+  public static ArrowRecordBatch deserializeRecordBatch(MessageReader reader, Message message, BufferAllocator alloc)\n       throws IOException {\n     RecordBatch recordBatchFB = (RecordBatch) message.header(new RecordBatch());\n \n-    int bodyLength = (int) message.bodyLength();\n-\n     // Now read the record batch body\n-    ArrowBuf buffer = alloc.buffer(bodyLength);\n-    if (in.readFully(buffer, bodyLength) != bodyLength) {\n-      throw new IOException(\"Unexpected end of input trying to read batch.\");\n-    }\n+    ArrowBuf buffer = reader.readMessageBody(message, alloc);\n     return deserializeRecordBatch(recordBatchFB, buffer);\n   }\n \n@@ -243,7 +242,14 @@ public static ArrowRecordBatch deserializeRecordBatch(ReadChannel in, ArrowBlock\n     return deserializeRecordBatch(recordBatchFB, body);\n   }\n \n-  // Deserializes a record batch given the Flatbuffer metadata and in-memory body\n+  /**\n+   * Deserializes a record batch given the Flatbuffer metadata and in-memory body.\n+   *\n+   * @param recordBatchFB Deserialized FlatBuffer record batch\n+   * @param body Read body of the record batch\n+   * @return ArrowRecordBatch from metadata and in-memory body\n+   * @throws IOException\n+   */\n   public static ArrowRecordBatch deserializeRecordBatch(RecordBatch recordBatchFB,\n                                                         ArrowBuf body) throws IOException {\n     // Now read the body\n@@ -314,26 +320,21 @@ public static ArrowBlock serialize(WriteChannel out, ArrowDictionaryBatch batch)\n   }\n \n   /**\n-   * Deserializes a DictionaryBatch\n+   * Deserializes a DictionaryBatch.\n    *\n-   * @param in      where to read from\n+   * @param reader  where to read from\n    * @param message the message message metadata to deserialize\n    * @param alloc   the allocator for new buffers\n    * @return the corresponding dictionary batch\n    * @throws IOException if something went wrong\n    */\n-  public static ArrowDictionaryBatch deserializeDictionaryBatch(ReadChannel in,\n+  public static ArrowDictionaryBatch deserializeDictionaryBatch(MessageReader reader,\n                                                                 Message message,\n                                                                 BufferAllocator alloc) throws IOException {\n     DictionaryBatch dictionaryBatchFB = (DictionaryBatch) message.header(new DictionaryBatch());\n \n-    int bodyLength = (int) message.bodyLength();\n-\n     // Now read the record batch body\n-    ArrowBuf body = alloc.buffer(bodyLength);\n-    if (in.readFully(body, bodyLength) != bodyLength) {\n-      throw new IOException(\"Unexpected end of input trying to read batch.\");\n-    }\n+    ArrowBuf body = reader.readMessageBody(message, alloc);\n     ArrowRecordBatch recordBatch = deserializeRecordBatch(dictionaryBatchFB.data(), body);\n     return new ArrowDictionaryBatch(dictionaryBatchFB.id(), recordBatch);\n   }\n@@ -377,8 +378,16 @@ public static ArrowDictionaryBatch deserializeDictionaryBatch(ReadChannel in,\n     return new ArrowDictionaryBatch(dictionaryBatchFB.id(), recordBatch);\n   }\n \n-  public static ArrowMessage deserializeMessageBatch(ReadChannel in, BufferAllocator alloc) throws IOException {\n-    Message message = deserializeMessage(in);\n+  /**\n+   * Deserialize a message that is either an ArrowDictionaryBatch or ArrowRecordBatch.\n+   *\n+   * @param reader Interface to read messages from\n+   * @param alloc Allocator for message data\n+   * @return The deserialized record batch\n+   * @throws IOException if the message is not an ArrowDictionaryBatch or ArrowRecordBatch\n+   */\n+  public static ArrowMessage deserializeMessageBatch(MessageReader reader, BufferAllocator alloc) throws IOException {\n+    Message message = reader.readNextMessage();\n     if (message == null) {\n       return null;\n     } else if (message.bodyLength() > Integer.MAX_VALUE) {\n@@ -391,14 +400,26 @@ public static ArrowMessage deserializeMessageBatch(ReadChannel in, BufferAllocat\n \n     switch (message.headerType()) {\n       case MessageHeader.RecordBatch:\n-        return deserializeRecordBatch(in, message, alloc);\n+        return deserializeRecordBatch(reader, message, alloc);\n       case MessageHeader.DictionaryBatch:\n-        return deserializeDictionaryBatch(in, message, alloc);\n+        return deserializeDictionaryBatch(reader, message, alloc);\n       default:\n         throw new IOException(\"Unexpected message header type \" + message.headerType());\n     }\n   }\n \n+  /**\n+   * Deserialize a message that is either an ArrowDictionaryBatch or ArrowRecordBatch.\n+   *\n+   * @param in ReadChannel to read messages from\n+   * @param alloc Allocator for message data\n+   * @return The deserialized record batch\n+   * @throws IOException if the message is not an ArrowDictionaryBatch or ArrowRecordBatch\n+   */\n+  public static ArrowMessage deserializeMessageBatch(ReadChannel in, BufferAllocator alloc) throws IOException {\n+    return deserializeMessageBatch(new MessageChannelReader(in), alloc);\n+  }\n+\n   /**\n    * Serializes a message header.\n    *\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/schema/TypeLayout.java b/java/vector/src/main/java/org/apache/arrow/vector/ipc/message/TypeLayout.java\nsimilarity index 80%\nrename from java/vector/src/main/java/org/apache/arrow/vector/schema/TypeLayout.java\nrename to java/vector/src/main/java/org/apache/arrow/vector/ipc/message/TypeLayout.java\nindex 29407bf1a..06fe94816 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/schema/TypeLayout.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/ipc/message/TypeLayout.java\n@@ -16,15 +16,9 @@\n  * limitations under the License.\n  */\n \n-package org.apache.arrow.vector.schema;\n+package org.apache.arrow.vector.ipc.message;\n \n import static java.util.Arrays.asList;\n-import static org.apache.arrow.vector.schema.VectorLayout.booleanVector;\n-import static org.apache.arrow.vector.schema.VectorLayout.byteVector;\n-import static org.apache.arrow.vector.schema.VectorLayout.dataVector;\n-import static org.apache.arrow.vector.schema.VectorLayout.offsetVector;\n-import static org.apache.arrow.vector.schema.VectorLayout.typeVector;\n-import static org.apache.arrow.vector.schema.VectorLayout.validityVector;\n \n import java.util.ArrayList;\n import java.util.Collections;\n@@ -64,7 +58,7 @@ public static TypeLayout getTypeLayout(final ArrowType arrowType) {\n \n       @Override\n       public TypeLayout visit(Int type) {\n-        return newFixedWidthTypeLayout(dataVector(type.getBitWidth()));\n+        return newFixedWidthTypeLayout(VectorLayout.dataVector(type.getBitWidth()));\n       }\n \n       @Override\n@@ -74,14 +68,14 @@ public TypeLayout visit(Union type) {\n           case Dense:\n             vectors = asList(\n                 // TODO: validate this\n-                validityVector(),\n-                typeVector(),\n-                offsetVector() // offset to find the vector\n+                VectorLayout.validityVector(),\n+                VectorLayout.typeVector(),\n+                VectorLayout.offsetVector() // offset to find the vector\n             );\n             break;\n           case Sparse:\n             vectors = asList(\n-                typeVector() // type of the value at the index or 0 if null\n+                VectorLayout.typeVector() // type of the value at the index or 0 if null\n             );\n             break;\n           default:\n@@ -93,21 +87,21 @@ public TypeLayout visit(Union type) {\n       @Override\n       public TypeLayout visit(Struct type) {\n         List<VectorLayout> vectors = asList(\n-            validityVector()\n+            VectorLayout.validityVector()\n         );\n         return new TypeLayout(vectors);\n       }\n \n       @Override\n       public TypeLayout visit(Timestamp type) {\n-        return newFixedWidthTypeLayout(dataVector(64));\n+        return newFixedWidthTypeLayout(VectorLayout.dataVector(64));\n       }\n \n       @Override\n       public TypeLayout visit(org.apache.arrow.vector.types.pojo.ArrowType.List type) {\n         List<VectorLayout> vectors = asList(\n-            validityVector(),\n-            offsetVector()\n+            VectorLayout.validityVector(),\n+            VectorLayout.offsetVector()\n         );\n         return new TypeLayout(vectors);\n       }\n@@ -115,7 +109,7 @@ public TypeLayout visit(org.apache.arrow.vector.types.pojo.ArrowType.List type)\n       @Override\n       public TypeLayout visit(FixedSizeList type) {\n         List<VectorLayout> vectors = asList(\n-            validityVector()\n+            VectorLayout.validityVector()\n         );\n         return new TypeLayout(vectors);\n       }\n@@ -136,18 +130,18 @@ public TypeLayout visit(FloatingPoint type) {\n           default:\n             throw new UnsupportedOperationException(\"Unsupported Precision: \" + type.getPrecision());\n         }\n-        return newFixedWidthTypeLayout(dataVector(bitWidth));\n+        return newFixedWidthTypeLayout(VectorLayout.dataVector(bitWidth));\n       }\n \n       @Override\n       public TypeLayout visit(Decimal type) {\n         // TODO: check size\n-        return newFixedWidthTypeLayout(dataVector(64)); // actually depends on the type fields\n+        return newFixedWidthTypeLayout(VectorLayout.dataVector(64)); // actually depends on the type fields\n       }\n \n       @Override\n       public TypeLayout visit(Bool type) {\n-        return newFixedWidthTypeLayout(booleanVector());\n+        return newFixedWidthTypeLayout(VectorLayout.booleanVector());\n       }\n \n       @Override\n@@ -161,7 +155,7 @@ public TypeLayout visit(Utf8 type) {\n       }\n \n       private TypeLayout newVariableWidthTypeLayout() {\n-        return newPrimitiveTypeLayout(validityVector(), offsetVector(), byteVector());\n+        return newPrimitiveTypeLayout(VectorLayout.validityVector(), VectorLayout.offsetVector(), VectorLayout.byteVector());\n       }\n \n       private TypeLayout newPrimitiveTypeLayout(VectorLayout... vectors) {\n@@ -169,7 +163,7 @@ private TypeLayout newPrimitiveTypeLayout(VectorLayout... vectors) {\n       }\n \n       public TypeLayout newFixedWidthTypeLayout(VectorLayout dataVector) {\n-        return newPrimitiveTypeLayout(validityVector(), dataVector);\n+        return newPrimitiveTypeLayout(VectorLayout.validityVector(), dataVector);\n       }\n \n       @Override\n@@ -179,21 +173,21 @@ public TypeLayout visit(Null type) {\n \n       @Override\n       public TypeLayout visit(Date type) {\n-        return newFixedWidthTypeLayout(dataVector(64));\n+        return newFixedWidthTypeLayout(VectorLayout.dataVector(64));\n       }\n \n       @Override\n       public TypeLayout visit(Time type) {\n-        return newFixedWidthTypeLayout(dataVector(type.getBitWidth()));\n+        return newFixedWidthTypeLayout(VectorLayout.dataVector(type.getBitWidth()));\n       }\n \n       @Override\n       public TypeLayout visit(Interval type) { // TODO: check size\n         switch (type.getUnit()) {\n           case DAY_TIME:\n-            return newFixedWidthTypeLayout(dataVector(64));\n+            return newFixedWidthTypeLayout(VectorLayout.dataVector(64));\n           case YEAR_MONTH:\n-            return newFixedWidthTypeLayout(dataVector(64));\n+            return newFixedWidthTypeLayout(VectorLayout.dataVector(64));\n           default:\n             throw new UnsupportedOperationException(\"Unknown unit \" + type.getUnit());\n         }\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/schema/VectorLayout.java b/java/vector/src/main/java/org/apache/arrow/vector/ipc/message/VectorLayout.java\nsimilarity index 89%\nrename from java/vector/src/main/java/org/apache/arrow/vector/schema/VectorLayout.java\nrename to java/vector/src/main/java/org/apache/arrow/vector/ipc/message/VectorLayout.java\nindex 0871baf38..e4f2f98fd 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/schema/VectorLayout.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/ipc/message/VectorLayout.java\n@@ -16,12 +16,7 @@\n  * limitations under the License.\n  */\n \n-package org.apache.arrow.vector.schema;\n-\n-import static org.apache.arrow.vector.schema.ArrowVectorType.DATA;\n-import static org.apache.arrow.vector.schema.ArrowVectorType.OFFSET;\n-import static org.apache.arrow.vector.schema.ArrowVectorType.TYPE;\n-import static org.apache.arrow.vector.schema.ArrowVectorType.VALIDITY;\n+package org.apache.arrow.vector.ipc.message;\n \n import com.fasterxml.jackson.annotation.JsonCreator;\n import com.fasterxml.jackson.annotation.JsonProperty;\n@@ -30,14 +25,14 @@\n \n public class VectorLayout implements FBSerializable {\n \n-  private static final VectorLayout VALIDITY_VECTOR = new VectorLayout(VALIDITY, 1);\n-  private static final VectorLayout OFFSET_VECTOR = new VectorLayout(OFFSET, 32);\n-  private static final VectorLayout TYPE_VECTOR = new VectorLayout(TYPE, 32);\n-  private static final VectorLayout BOOLEAN_VECTOR = new VectorLayout(DATA, 1);\n-  private static final VectorLayout VALUES_64 = new VectorLayout(DATA, 64);\n-  private static final VectorLayout VALUES_32 = new VectorLayout(DATA, 32);\n-  private static final VectorLayout VALUES_16 = new VectorLayout(DATA, 16);\n-  private static final VectorLayout VALUES_8 = new VectorLayout(DATA, 8);\n+  private static final VectorLayout VALIDITY_VECTOR = new VectorLayout(ArrowVectorType.VALIDITY, 1);\n+  private static final VectorLayout OFFSET_VECTOR = new VectorLayout(ArrowVectorType.OFFSET, 32);\n+  private static final VectorLayout TYPE_VECTOR = new VectorLayout(ArrowVectorType.TYPE, 32);\n+  private static final VectorLayout BOOLEAN_VECTOR = new VectorLayout(ArrowVectorType.DATA, 1);\n+  private static final VectorLayout VALUES_64 = new VectorLayout(ArrowVectorType.DATA, 64);\n+  private static final VectorLayout VALUES_32 = new VectorLayout(ArrowVectorType.DATA, 32);\n+  private static final VectorLayout VALUES_16 = new VectorLayout(ArrowVectorType.DATA, 16);\n+  private static final VectorLayout VALUES_8 = new VectorLayout(ArrowVectorType.DATA, 8);\n \n   public static VectorLayout typeVector() {\n     return TYPE_VECTOR;\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/stream/ArrowStreamReader.java b/java/vector/src/main/java/org/apache/arrow/vector/stream/ArrowStreamReader.java\ndeleted file mode 100644\nindex 5b6300076..000000000\n--- a/java/vector/src/main/java/org/apache/arrow/vector/stream/ArrowStreamReader.java\n+++ /dev/null\n@@ -1,66 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.arrow.vector.stream;\n-\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.nio.channels.Channels;\n-import java.nio.channels.ReadableByteChannel;\n-\n-import org.apache.arrow.memory.BufferAllocator;\n-import org.apache.arrow.vector.file.ArrowReader;\n-import org.apache.arrow.vector.file.ReadChannel;\n-import org.apache.arrow.vector.schema.ArrowMessage;\n-import org.apache.arrow.vector.types.pojo.Schema;\n-\n-/**\n- * This classes reads from an input stream and produces ArrowRecordBatches.\n- */\n-public class ArrowStreamReader extends ArrowReader<ReadChannel> {\n-\n-  /**\n-   * Constructs a streaming read, reading bytes from 'in'. Non-blocking.\n-   *\n-   * @param in        the stream to read from\n-   * @param allocator to allocate new buffers\n-   */\n-  public ArrowStreamReader(ReadableByteChannel in, BufferAllocator allocator) {\n-    super(new ReadChannel(in), allocator);\n-  }\n-\n-  public ArrowStreamReader(InputStream in, BufferAllocator allocator) {\n-    this(Channels.newChannel(in), allocator);\n-  }\n-\n-  /**\n-   * Reads the schema message from the beginning of the stream.\n-   *\n-   * @param in to allocate new buffers\n-   * @return the deserialized arrow schema\n-   */\n-  @Override\n-  protected Schema readSchema(ReadChannel in) throws IOException {\n-    return MessageSerializer.deserializeSchema(in);\n-  }\n-\n-  @Override\n-  protected ArrowMessage readMessage(ReadChannel in, BufferAllocator allocator) throws IOException {\n-    return MessageSerializer.deserializeMessageBatch(in, allocator);\n-  }\n-}\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/types/pojo/Field.java b/java/vector/src/main/java/org/apache/arrow/vector/types/pojo/Field.java\nindex eba149bf7..574612833 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/types/pojo/Field.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/types/pojo/Field.java\n@@ -43,8 +43,8 @@\n import org.apache.arrow.flatbuf.Type;\n import org.apache.arrow.memory.BufferAllocator;\n import org.apache.arrow.vector.FieldVector;\n-import org.apache.arrow.vector.schema.TypeLayout;\n-import org.apache.arrow.vector.schema.VectorLayout;\n+import org.apache.arrow.vector.ipc.message.VectorLayout;\n+import org.apache.arrow.vector.ipc.message.TypeLayout;\n import org.apache.arrow.vector.types.pojo.ArrowType.Int;\n \n public class Field {\n@@ -117,9 +117,9 @@ public static Field convertField(org.apache.arrow.flatbuf.Field field) {\n       }\n       dictionary = new DictionaryEncoding(dictionaryFB.id(), dictionaryFB.isOrdered(), indexType);\n     }\n-    ImmutableList.Builder<org.apache.arrow.vector.schema.VectorLayout> layout = ImmutableList.builder();\n+    ImmutableList.Builder<VectorLayout> layout = ImmutableList.builder();\n     for (int i = 0; i < field.layoutLength(); ++i) {\n-      layout.add(new org.apache.arrow.vector.schema.VectorLayout(field.layout(i)));\n+      layout.add(new VectorLayout(field.layout(i)));\n     }\n     ImmutableList.Builder<Field> childrenBuilder = ImmutableList.builder();\n     for (int i = 0; i < field.childrenLength(); i++) {\ndiff --git a/java/vector/src/test/java/org/apache/arrow/vector/TestValueVector.java b/java/vector/src/test/java/org/apache/arrow/vector/TestValueVector.java\nindex c7ee202f9..f51a87436 100644\n--- a/java/vector/src/test/java/org/apache/arrow/vector/TestValueVector.java\n+++ b/java/vector/src/test/java/org/apache/arrow/vector/TestValueVector.java\n@@ -17,7 +17,6 @@\n  */\n \n package org.apache.arrow.vector;\n-import org.apache.arrow.vector.holders.VarCharHolder;\n import org.apache.arrow.vector.util.OversizedAllocationException;\n \n import static org.apache.arrow.vector.TestUtils.newNullableVarBinaryVector;\n@@ -38,15 +37,14 @@\n import org.apache.arrow.memory.BufferAllocator;\n import org.apache.arrow.memory.RootAllocator;\n \n-import org.apache.arrow.vector.schema.ArrowRecordBatch;\n-import org.apache.arrow.vector.schema.TypeLayout;\n+import org.apache.arrow.vector.ipc.message.ArrowRecordBatch;\n+import org.apache.arrow.vector.ipc.message.TypeLayout;\n import org.apache.arrow.vector.types.Types.MinorType;\n import org.apache.arrow.vector.types.pojo.Schema;\n import org.apache.arrow.vector.types.pojo.ArrowType;\n import org.apache.arrow.vector.types.pojo.Field;\n import org.apache.arrow.vector.util.TransferPair;\n import org.junit.After;\n-import org.junit.Assert;\n import org.junit.Before;\n import org.junit.Test;\n \ndiff --git a/java/vector/src/test/java/org/apache/arrow/vector/TestVectorUnloadLoad.java b/java/vector/src/test/java/org/apache/arrow/vector/TestVectorUnloadLoad.java\nindex 3853eecac..e61dbecf4 100644\n--- a/java/vector/src/test/java/org/apache/arrow/vector/TestVectorUnloadLoad.java\n+++ b/java/vector/src/test/java/org/apache/arrow/vector/TestVectorUnloadLoad.java\n@@ -39,8 +39,8 @@\n import org.apache.arrow.vector.complex.writer.BaseWriter.MapWriter;\n import org.apache.arrow.vector.complex.writer.BigIntWriter;\n import org.apache.arrow.vector.complex.writer.IntWriter;\n-import org.apache.arrow.vector.schema.ArrowFieldNode;\n-import org.apache.arrow.vector.schema.ArrowRecordBatch;\n+import org.apache.arrow.vector.ipc.message.ArrowFieldNode;\n+import org.apache.arrow.vector.ipc.message.ArrowRecordBatch;\n import org.apache.arrow.vector.types.pojo.ArrowType;\n import org.apache.arrow.vector.types.pojo.Field;\n import org.apache.arrow.vector.types.pojo.FieldType;\ndiff --git a/java/vector/src/test/java/org/apache/arrow/vector/file/BaseFileTest.java b/java/vector/src/test/java/org/apache/arrow/vector/ipc/BaseFileTest.java\nsimilarity index 99%\nrename from java/vector/src/test/java/org/apache/arrow/vector/file/BaseFileTest.java\nrename to java/vector/src/test/java/org/apache/arrow/vector/ipc/BaseFileTest.java\nindex 874ba99e2..233b682c9 100644\n--- a/java/vector/src/test/java/org/apache/arrow/vector/file/BaseFileTest.java\n+++ b/java/vector/src/test/java/org/apache/arrow/vector/ipc/BaseFileTest.java\n@@ -16,7 +16,7 @@\n  * limitations under the License.\n  */\n \n-package org.apache.arrow.vector.file;\n+package org.apache.arrow.vector.ipc;\n \n import java.math.BigDecimal;\n import java.math.BigInteger;\ndiff --git a/java/vector/src/test/java/org/apache/arrow/vector/stream/MessageSerializerTest.java b/java/vector/src/test/java/org/apache/arrow/vector/ipc/MessageSerializerTest.java\nsimilarity index 94%\nrename from java/vector/src/test/java/org/apache/arrow/vector/stream/MessageSerializerTest.java\nrename to java/vector/src/test/java/org/apache/arrow/vector/ipc/MessageSerializerTest.java\nindex f968768f5..239d3034a 100644\n--- a/java/vector/src/test/java/org/apache/arrow/vector/stream/MessageSerializerTest.java\n+++ b/java/vector/src/test/java/org/apache/arrow/vector/ipc/MessageSerializerTest.java\n@@ -16,7 +16,7 @@\n  * limitations under the License.\n  */\n \n-package org.apache.arrow.vector.stream;\n+package org.apache.arrow.vector.ipc;\n \n import static java.util.Arrays.asList;\n import static org.junit.Assert.assertArrayEquals;\n@@ -33,12 +33,11 @@\n import io.netty.buffer.ArrowBuf;\n import org.apache.arrow.memory.BufferAllocator;\n import org.apache.arrow.memory.RootAllocator;\n-import org.apache.arrow.vector.file.ArrowBlock;\n-import org.apache.arrow.vector.file.ReadChannel;\n-import org.apache.arrow.vector.file.WriteChannel;\n-import org.apache.arrow.vector.schema.ArrowFieldNode;\n-import org.apache.arrow.vector.schema.ArrowMessage;\n-import org.apache.arrow.vector.schema.ArrowRecordBatch;\n+import org.apache.arrow.vector.ipc.message.MessageSerializer;\n+import org.apache.arrow.vector.ipc.message.ArrowBlock;\n+import org.apache.arrow.vector.ipc.message.ArrowFieldNode;\n+import org.apache.arrow.vector.ipc.message.ArrowMessage;\n+import org.apache.arrow.vector.ipc.message.ArrowRecordBatch;\n import org.apache.arrow.vector.types.pojo.ArrowType;\n import org.apache.arrow.vector.types.pojo.DictionaryEncoding;\n import org.apache.arrow.vector.types.pojo.Field;\ndiff --git a/java/vector/src/test/java/org/apache/arrow/vector/file/TestArrowFile.java b/java/vector/src/test/java/org/apache/arrow/vector/ipc/TestArrowFile.java\nsimilarity index 94%\nrename from java/vector/src/test/java/org/apache/arrow/vector/file/TestArrowFile.java\nrename to java/vector/src/test/java/org/apache/arrow/vector/ipc/TestArrowFile.java\nindex 8559969a2..4387db036 100644\n--- a/java/vector/src/test/java/org/apache/arrow/vector/file/TestArrowFile.java\n+++ b/java/vector/src/test/java/org/apache/arrow/vector/ipc/TestArrowFile.java\n@@ -16,7 +16,7 @@\n  * limitations under the License.\n  */\n \n-package org.apache.arrow.vector.file;\n+package org.apache.arrow.vector.ipc;\n \n import java.io.ByteArrayInputStream;\n import java.io.ByteArrayOutputStream;\n@@ -40,16 +40,14 @@\n import org.apache.arrow.vector.NullableIntVector;\n import org.apache.arrow.vector.NullableTinyIntVector;\n import org.apache.arrow.vector.VectorSchemaRoot;\n+import org.apache.arrow.vector.VectorUnloader;\n import org.apache.arrow.vector.complex.FixedSizeListVector;\n import org.apache.arrow.vector.complex.MapVector;\n import org.apache.arrow.vector.complex.NullableMapVector;\n import org.apache.arrow.vector.dictionary.DictionaryProvider.MapDictionaryProvider;\n-import org.apache.arrow.vector.schema.ArrowBuffer;\n-import org.apache.arrow.vector.schema.ArrowMessage;\n-import org.apache.arrow.vector.schema.ArrowRecordBatch;\n-import org.apache.arrow.vector.stream.ArrowStreamReader;\n-import org.apache.arrow.vector.stream.ArrowStreamWriter;\n-import org.apache.arrow.vector.stream.MessageSerializerTest;\n+import org.apache.arrow.vector.ipc.message.ArrowBlock;\n+import org.apache.arrow.vector.ipc.message.ArrowBuffer;\n+import org.apache.arrow.vector.ipc.message.ArrowRecordBatch;\n import org.apache.arrow.vector.types.FloatingPointPrecision;\n import org.apache.arrow.vector.types.Types.MinorType;\n import org.apache.arrow.vector.types.pojo.ArrowType;\n@@ -108,52 +106,41 @@ public void testWriteRead() throws IOException {\n     // read\n     try (BufferAllocator readerAllocator = allocator.newChildAllocator(\"reader\", 0, Integer.MAX_VALUE);\n          FileInputStream fileInputStream = new FileInputStream(file);\n-         ArrowFileReader arrowReader = new ArrowFileReader(fileInputStream.getChannel(), readerAllocator) {\n-           @Override\n-           protected ArrowMessage readMessage(SeekableReadChannel in, BufferAllocator allocator) throws IOException {\n-             ArrowMessage message = super.readMessage(in, allocator);\n-             if (message != null) {\n-               ArrowRecordBatch batch = (ArrowRecordBatch) message;\n-               List<ArrowBuffer> buffersLayout = batch.getBuffersLayout();\n-               for (ArrowBuffer arrowBuffer : buffersLayout) {\n-                 Assert.assertEquals(0, arrowBuffer.getOffset() % 8);\n-               }\n-             }\n-             return message;\n-           }\n-         }) {\n-      Schema schema = arrowReader.getVectorSchemaRoot().getSchema();\n-      LOGGER.debug(\"reading schema: \" + schema);\n+         ArrowFileReader arrowReader = new ArrowFileReader(fileInputStream.getChannel(), readerAllocator)) {\n+\n       VectorSchemaRoot root = arrowReader.getVectorSchemaRoot();\n+      VectorUnloader unloader = new VectorUnloader(root);\n+      Schema schema = root.getSchema();\n+      LOGGER.debug(\"reading schema: \" + schema);\n       for (ArrowBlock rbBlock : arrowReader.getRecordBlocks()) {\n         arrowReader.loadRecordBatch(rbBlock);\n         Assert.assertEquals(count, root.getRowCount());\n+        ArrowRecordBatch batch = unloader.getRecordBatch();\n+        List<ArrowBuffer> buffersLayout = batch.getBuffersLayout();\n+        for (ArrowBuffer arrowBuffer : buffersLayout) {\n+          Assert.assertEquals(0, arrowBuffer.getOffset() % 8);\n+        }\n         validateContent(count, root);\n+        batch.close();\n       }\n     }\n \n     // Read from stream.\n     try (BufferAllocator readerAllocator = allocator.newChildAllocator(\"reader\", 0, Integer.MAX_VALUE);\n          ByteArrayInputStream input = new ByteArrayInputStream(stream.toByteArray());\n-         ArrowStreamReader arrowReader = new ArrowStreamReader(input, readerAllocator) {\n-           @Override\n-           protected ArrowMessage readMessage(ReadChannel in, BufferAllocator allocator) throws IOException {\n-             ArrowMessage message = super.readMessage(in, allocator);\n-             if (message != null) {\n-               ArrowRecordBatch batch = (ArrowRecordBatch) message;\n-               List<ArrowBuffer> buffersLayout = batch.getBuffersLayout();\n-               for (ArrowBuffer arrowBuffer : buffersLayout) {\n-                 Assert.assertEquals(0, arrowBuffer.getOffset() % 8);\n-               }\n-             }\n-             return message;\n-           }\n-         }) {\n+         ArrowStreamReader arrowReader = new ArrowStreamReader(input, readerAllocator)) {\n \n       VectorSchemaRoot root = arrowReader.getVectorSchemaRoot();\n+      VectorUnloader unloader = new VectorUnloader(root);\n       Schema schema = root.getSchema();\n       LOGGER.debug(\"reading schema: \" + schema);\n       Assert.assertTrue(arrowReader.loadNextBatch());\n+      ArrowRecordBatch batch = unloader.getRecordBatch();\n+      List<ArrowBuffer> buffersLayout = batch.getBuffersLayout();\n+      for (ArrowBuffer arrowBuffer : buffersLayout) {\n+        Assert.assertEquals(0, arrowBuffer.getOffset() % 8);\n+      }\n+      batch.close();\n       Assert.assertEquals(count, root.getRowCount());\n       validateContent(count, root);\n     }\ndiff --git a/java/vector/src/test/java/org/apache/arrow/vector/file/TestArrowFooter.java b/java/vector/src/test/java/org/apache/arrow/vector/ipc/TestArrowFooter.java\nsimilarity index 93%\nrename from java/vector/src/test/java/org/apache/arrow/vector/file/TestArrowFooter.java\nrename to java/vector/src/test/java/org/apache/arrow/vector/ipc/TestArrowFooter.java\nindex 461246532..235e8c164 100644\n--- a/java/vector/src/test/java/org/apache/arrow/vector/file/TestArrowFooter.java\n+++ b/java/vector/src/test/java/org/apache/arrow/vector/ipc/TestArrowFooter.java\n@@ -16,7 +16,7 @@\n  * limitations under the License.\n  */\n \n-package org.apache.arrow.vector.file;\n+package org.apache.arrow.vector.ipc;\n \n import static java.util.Arrays.asList;\n import static org.junit.Assert.assertEquals;\n@@ -27,6 +27,8 @@\n import java.util.List;\n \n import org.apache.arrow.flatbuf.Footer;\n+import org.apache.arrow.vector.ipc.message.ArrowBlock;\n+import org.apache.arrow.vector.ipc.message.ArrowFooter;\n import org.apache.arrow.vector.types.pojo.ArrowType;\n import org.apache.arrow.vector.types.pojo.Field;\n import org.apache.arrow.vector.types.pojo.FieldType;\ndiff --git a/java/vector/src/test/java/org/apache/arrow/vector/file/TestArrowReaderWriter.java b/java/vector/src/test/java/org/apache/arrow/vector/ipc/TestArrowReaderWriter.java\nsimilarity index 85%\nrename from java/vector/src/test/java/org/apache/arrow/vector/file/TestArrowReaderWriter.java\nrename to java/vector/src/test/java/org/apache/arrow/vector/ipc/TestArrowReaderWriter.java\nindex 3ce01a268..49e194b51 100644\n--- a/java/vector/src/test/java/org/apache/arrow/vector/file/TestArrowReaderWriter.java\n+++ b/java/vector/src/test/java/org/apache/arrow/vector/ipc/TestArrowReaderWriter.java\n@@ -16,7 +16,7 @@\n  * limitations under the License.\n  */\n \n-package org.apache.arrow.vector.file;\n+package org.apache.arrow.vector.ipc;\n \n import static java.nio.channels.Channels.newChannel;\n import static java.util.Arrays.asList;\n@@ -37,9 +37,15 @@\n import org.apache.arrow.memory.RootAllocator;\n import org.apache.arrow.vector.FieldVector;\n import org.apache.arrow.vector.TestUtils;\n+import org.apache.arrow.vector.VectorLoader;\n import org.apache.arrow.vector.VectorSchemaRoot;\n-import org.apache.arrow.vector.schema.ArrowFieldNode;\n-import org.apache.arrow.vector.schema.ArrowRecordBatch;\n+import org.apache.arrow.vector.VectorUnloader;\n+import org.apache.arrow.vector.ipc.ArrowFileReader;\n+import org.apache.arrow.vector.ipc.ArrowFileWriter;\n+import org.apache.arrow.vector.ipc.SeekableReadChannel;\n+import org.apache.arrow.vector.ipc.message.ArrowBlock;\n+import org.apache.arrow.vector.ipc.message.ArrowFieldNode;\n+import org.apache.arrow.vector.ipc.message.ArrowRecordBatch;\n import org.apache.arrow.vector.types.pojo.ArrowType;\n import org.apache.arrow.vector.types.pojo.Field;\n import org.apache.arrow.vector.types.pojo.FieldType;\n@@ -87,7 +93,10 @@ public void test() throws IOException {\n          ArrowFileWriter writer = new ArrowFileWriter(root, null, newChannel(out))) {\n       ArrowBuf validityb = buf(validity);\n       ArrowBuf valuesb = buf(values);\n-      writer.writeRecordBatch(new ArrowRecordBatch(16, asList(new ArrowFieldNode(16, 8)), asList(validityb, valuesb)));\n+      ArrowRecordBatch batch = new ArrowRecordBatch(16, asList(new ArrowFieldNode(16, 8)), asList(validityb, valuesb));\n+      VectorLoader loader = new VectorLoader(root);\n+      loader.load(batch);\n+      writer.writeBatch();\n     }\n \n     byte[] byteArray = out.toByteArray();\n@@ -100,7 +109,9 @@ public void test() throws IOException {\n       // TODO: dictionaries\n       List<ArrowBlock> recordBatches = reader.getRecordBlocks();\n       assertEquals(1, recordBatches.size());\n-      ArrowRecordBatch recordBatch = (ArrowRecordBatch) reader.readMessage(channel, allocator);\n+      reader.loadNextBatch();\n+      VectorUnloader unloader = new VectorUnloader(reader.getVectorSchemaRoot());\n+      ArrowRecordBatch recordBatch = unloader.getRecordBatch();\n       List<ArrowFieldNode> nodes = recordBatch.getNodes();\n       assertEquals(1, nodes.size());\n       ArrowFieldNode node = nodes.get(0);\ndiff --git a/java/vector/src/test/java/org/apache/arrow/vector/file/TestArrowStream.java b/java/vector/src/test/java/org/apache/arrow/vector/ipc/TestArrowStream.java\nsimilarity index 88%\nrename from java/vector/src/test/java/org/apache/arrow/vector/file/TestArrowStream.java\nrename to java/vector/src/test/java/org/apache/arrow/vector/ipc/TestArrowStream.java\nindex c7e34191a..7a8586a9e 100644\n--- a/java/vector/src/test/java/org/apache/arrow/vector/file/TestArrowStream.java\n+++ b/java/vector/src/test/java/org/apache/arrow/vector/ipc/TestArrowStream.java\n@@ -16,9 +16,8 @@\n  * limitations under the License.\n  */\n \n-package org.apache.arrow.vector.file;\n+package org.apache.arrow.vector.ipc;\n \n-import static java.util.Arrays.asList;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertTrue;\n@@ -27,16 +26,12 @@\n import java.io.ByteArrayOutputStream;\n import java.io.IOException;\n \n-import io.netty.buffer.ArrowBuf;\n-import org.apache.arrow.memory.BufferAllocator;\n import org.apache.arrow.vector.NullableTinyIntVector;\n import org.apache.arrow.vector.VectorSchemaRoot;\n-import org.apache.arrow.vector.schema.ArrowFieldNode;\n-import org.apache.arrow.vector.schema.ArrowMessage;\n-import org.apache.arrow.vector.schema.ArrowRecordBatch;\n-import org.apache.arrow.vector.stream.ArrowStreamReader;\n-import org.apache.arrow.vector.stream.ArrowStreamWriter;\n-import org.apache.arrow.vector.stream.MessageSerializerTest;\n+import org.apache.arrow.vector.ipc.ArrowStreamReader;\n+import org.apache.arrow.vector.ipc.ArrowStreamWriter;\n+import org.apache.arrow.vector.ipc.BaseFileTest;\n+import org.apache.arrow.vector.ipc.MessageSerializerTest;\n import org.apache.arrow.vector.types.pojo.Schema;\n import org.junit.Assert;\n import org.junit.Test;\ndiff --git a/java/vector/src/test/java/org/apache/arrow/vector/file/TestArrowStreamPipe.java b/java/vector/src/test/java/org/apache/arrow/vector/ipc/TestArrowStreamPipe.java\nsimilarity index 78%\nrename from java/vector/src/test/java/org/apache/arrow/vector/file/TestArrowStreamPipe.java\nrename to java/vector/src/test/java/org/apache/arrow/vector/ipc/TestArrowStreamPipe.java\nindex f393733cc..65e6cea2e 100644\n--- a/java/vector/src/test/java/org/apache/arrow/vector/file/TestArrowStreamPipe.java\n+++ b/java/vector/src/test/java/org/apache/arrow/vector/ipc/TestArrowStreamPipe.java\n@@ -16,7 +16,7 @@\n  * limitations under the License.\n  */\n \n-package org.apache.arrow.vector.file;\n+package org.apache.arrow.vector.ipc;\n \n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertTrue;\n@@ -30,10 +30,9 @@\n import org.apache.arrow.memory.RootAllocator;\n import org.apache.arrow.vector.NullableTinyIntVector;\n import org.apache.arrow.vector.VectorSchemaRoot;\n-import org.apache.arrow.vector.schema.ArrowMessage;\n-import org.apache.arrow.vector.stream.ArrowStreamReader;\n-import org.apache.arrow.vector.stream.ArrowStreamWriter;\n-import org.apache.arrow.vector.stream.MessageSerializerTest;\n+import org.apache.arrow.vector.ipc.ArrowStreamReader;\n+import org.apache.arrow.vector.ipc.ArrowStreamWriter;\n+import org.apache.arrow.vector.ipc.MessageSerializerTest;\n import org.apache.arrow.vector.types.pojo.Schema;\n import org.junit.Assert;\n import org.junit.Test;\n@@ -95,37 +94,28 @@ public long bytesWritten() {\n     public ReaderThread(ReadableByteChannel sourceChannel)\n         throws IOException {\n       reader = new ArrowStreamReader(sourceChannel, alloc) {\n-        @Override\n-        protected ArrowMessage readMessage(ReadChannel in, BufferAllocator allocator) throws IOException {\n-          // Read all the batches. Each batch contains an incrementing id and then some\n-          // constant data. Verify both.\n-          ArrowMessage message = super.readMessage(in, allocator);\n-          if (message == null) {\n-            done = true;\n-          } else {\n-            batchesRead++;\n-          }\n-          return message;\n-        }\n \n         @Override\n         public boolean loadNextBatch() throws IOException {\n-          if (!super.loadNextBatch()) {\n+          if (super.loadNextBatch()) {\n+            batchesRead++;\n+          } else {\n+            done = true;\n             return false;\n           }\n-          if (!done) {\n-            VectorSchemaRoot root = getVectorSchemaRoot();\n-            Assert.assertEquals(16, root.getRowCount());\n-            NullableTinyIntVector vector = (NullableTinyIntVector) root.getFieldVectors().get(0);\n-            Assert.assertEquals((byte) (batchesRead - 1), vector.get(0));\n-            for (int i = 1; i < 16; i++) {\n-              if (i < 8) {\n-                Assert.assertEquals((byte) (i + 1), vector.get(i));\n-              } else {\n-                Assert.assertTrue(vector.isNull(i));\n-              }\n+\n+          VectorSchemaRoot root = getVectorSchemaRoot();\n+          Assert.assertEquals(16, root.getRowCount());\n+          NullableTinyIntVector vector = (NullableTinyIntVector) root.getFieldVectors().get(0);\n+          Assert.assertEquals((byte) (batchesRead - 1), vector.get(0));\n+          for (int i = 1; i < 16; i++) {\n+            if (i < 8) {\n+              Assert.assertEquals((byte) (i + 1), vector.get(i));\n+            } else {\n+              Assert.assertTrue(vector.isNull(i));\n             }\n           }\n+\n           return true;\n         }\n       };\n@@ -139,7 +129,7 @@ public void run() {\n             reader.getVectorSchemaRoot().getSchema().getFields().get(0).getTypeLayout().getVectorTypes().toString(),\n             reader.getVectorSchemaRoot().getSchema().getFields().get(0).getTypeLayout().getVectors().size() > 0);\n         while (!done) {\n-          assertTrue(reader.loadNextBatch());\n+          assertTrue(reader.loadNextBatch() != done);\n         }\n         reader.close();\n       } catch (IOException e) {\ndiff --git a/java/vector/src/test/java/org/apache/arrow/vector/file/json/TestJSONFile.java b/java/vector/src/test/java/org/apache/arrow/vector/ipc/TestJSONFile.java\nsimilarity index 99%\nrename from java/vector/src/test/java/org/apache/arrow/vector/file/json/TestJSONFile.java\nrename to java/vector/src/test/java/org/apache/arrow/vector/ipc/TestJSONFile.java\nindex 5c4c48cd2..c3e0b7951 100644\n--- a/java/vector/src/test/java/org/apache/arrow/vector/file/json/TestJSONFile.java\n+++ b/java/vector/src/test/java/org/apache/arrow/vector/ipc/TestJSONFile.java\n@@ -16,7 +16,7 @@\n  * limitations under the License.\n  */\n \n-package org.apache.arrow.vector.file.json;\n+package org.apache.arrow.vector.ipc;\n \n import java.io.File;\n import java.io.IOException;\n@@ -28,7 +28,6 @@\n import org.apache.arrow.vector.complex.NullableMapVector;\n import org.apache.arrow.vector.dictionary.DictionaryProvider;\n import org.apache.arrow.vector.dictionary.DictionaryProvider.MapDictionaryProvider;\n-import org.apache.arrow.vector.file.BaseFileTest;\n import org.apache.arrow.vector.types.pojo.Schema;\n import org.apache.arrow.vector.util.Validator;\n import org.junit.Assert;\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-22T18:47:06.658+0000",
                    "updated": "2017-11-22T18:47:06.658+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13072907/comment/16263161",
                    "id": "16263161",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "BryanCutler commented on issue #1259: ARROW-1047: [Java] Add Generic Reader Interface for Stream Format\nURL: https://github.com/apache/arrow/pull/1259#issuecomment-346444019\n \n \n   I'd like to keep the `vector.ipc.message` package, I think these generally define messages that serialize to FB.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-22T18:59:47.096+0000",
                    "updated": "2017-11-22T18:59:47.096+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13072907/comment/16263162",
                    "id": "16263162",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "BryanCutler commented on issue #1259: ARROW-1047: [Java] Add Generic Reader Interface for Stream Format\nURL: https://github.com/apache/arrow/pull/1259#issuecomment-346444248\n \n \n   Thanks @wesm @icexelloss @elahrvivaz and @siddharthteotia !\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-22T19:00:40.992+0000",
                    "updated": "2017-11-22T19:00:40.992+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13072907/comment/16263229",
                    "id": "16263229",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "icexelloss opened a new pull request #1349: ARROW-1047: [Java] [FollowUp] Add Generic Reader Interface for Stream Format\nURL: https://github.com/apache/arrow/pull/1349\n \n \n   Move ArrowMagic from vector.ipc to vector.ipc.message package.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-22T19:44:12.127+0000",
                    "updated": "2017-11-22T19:44:12.127+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13072907/comment/16263230",
                    "id": "16263230",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "icexelloss commented on issue #1349: ARROW-1047: [Java] [FollowUp] Add Generic Reader Interface for Stream Format\nURL: https://github.com/apache/arrow/pull/1349#issuecomment-346454899\n \n \n   cc @BryanCutler \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-22T19:44:46.956+0000",
                    "updated": "2017-11-22T19:44:46.956+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13072907/comment/16263809",
                    "id": "16263809",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "BryanCutler commented on issue #1349: ARROW-1047: [Java] [FollowUp] Move ArrowMagic to ipc.message package\nURL: https://github.com/apache/arrow/pull/1349#issuecomment-346531235\n \n \n   I was thinking of `ArrowMagic` more being part of the file protocol than a message, but it's fine with me if you prefer to move it there.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-23T04:45:09.452+0000",
                    "updated": "2017-11-23T04:45:09.452+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13072907/comment/16264414",
                    "id": "16264414",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on issue #1349: ARROW-1047: [Java] [FollowUp] Move ArrowMagic to ipc.message package\nURL: https://github.com/apache/arrow/pull/1349#issuecomment-346635131\n \n \n   I suggest we do not merge this because the magic number is only used in the file implementation, if that's OK\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-23T14:40:39.145+0000",
                    "updated": "2017-11-23T14:40:39.145+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13072907/comment/16264438",
                    "id": "16264438",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "icexelloss commented on issue #1349: ARROW-1047: [Java] [FollowUp] Move ArrowMagic to ipc.message package\nURL: https://github.com/apache/arrow/pull/1349#issuecomment-346639218\n \n \n   Yes that's good point. I will change the PR to make it ArrowMagic non public class.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-23T14:57:14.261+0000",
                    "updated": "2017-11-23T14:57:14.261+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13072907/comment/16264675",
                    "id": "16264675",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on issue #1349: ARROW-1047: [Java] [FollowUp] Change ArrowMagic to be non-public class\nURL: https://github.com/apache/arrow/pull/1349#issuecomment-346679417\n \n \n   +1\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-23T18:26:19.641+0000",
                    "updated": "2017-11-23T18:26:19.641+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13072907/comment/16264676",
                    "id": "16264676",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm closed pull request #1349: ARROW-1047: [Java] [FollowUp] Change ArrowMagic to be non-public class\nURL: https://github.com/apache/arrow/pull/1349\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/ipc/ArrowMagic.java b/java/vector/src/main/java/org/apache/arrow/vector/ipc/ArrowMagic.java\nindex a9310a608..f71318ee6 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/ipc/ArrowMagic.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/ipc/ArrowMagic.java\n@@ -18,13 +18,11 @@\n \n package org.apache.arrow.vector.ipc;\n \n-import org.apache.arrow.vector.ipc.WriteChannel;\n-\n import java.io.IOException;\n import java.nio.charset.StandardCharsets;\n import java.util.Arrays;\n \n-public class ArrowMagic {\n+class ArrowMagic {\n \n   private static final byte[] MAGIC = \"ARROW1\".getBytes(StandardCharsets.UTF_8);\n \n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-23T18:26:39.781+0000",
                    "updated": "2017-11-23T18:26:39.781+0000"
                }
            ],
            "maxResults": 62,
            "total": 62,
            "startAt": 0
        },
        "customfield_12311820": "0|i3f4sf:",
        "customfield_12314139": null
    }
}