{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13154553",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13154553",
    "key": "ARROW-2499",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12342562",
                "id": "12342562",
                "description": "",
                "name": "0.10.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-08-06"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "aggregateprogress": {
            "progress": 6600,
            "total": 6600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 6600,
            "total": 6600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2499/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 11,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13154553/worklog/94676",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou opened a new pull request #1940: [WIP] ARROW-2499: [C++] Factor out Python iteration routines\nURL: https://github.com/apache/arrow/pull/1940\n \n \n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-04-24T16:44:55.975+0000",
                    "updated": "2018-04-24T16:44:55.975+0000",
                    "started": "2018-04-24T16:44:55.975+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "94676",
                    "issueId": "13154553"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13154553/worklog/94790",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #1940: ARROW-2499: [C++] Factor out Python iteration routines\nURL: https://github.com/apache/arrow/pull/1940#issuecomment-384076896\n \n \n   There are npm failures on Travis-CI (most probably unrelated, I'd say :-)).\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-04-24T20:55:23.152+0000",
                    "updated": "2018-04-24T20:55:23.152+0000",
                    "started": "2018-04-24T20:55:23.151+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "94790",
                    "issueId": "13154553"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13154553/worklog/95088",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "xhochy commented on a change in pull request #1940: ARROW-2499: [C++] Factor out Python iteration routines\nURL: https://github.com/apache/arrow/pull/1940#discussion_r184126008\n \n \n\n ##########\n File path: cpp/src/arrow/python/builtin_convert.cc\n ##########\n @@ -103,6 +113,12 @@ class ScalarVisitor {\n         ss << type->ToString();\n         return Status::Invalid(ss.str());\n       }\n+    } else if (PyList_Check(obj) || PyArray_Check(obj)) {\n+      // XXX This code path is used for non-object arrays, which leads\n \n Review comment:\n   Can you make a JIRA for this and reference as `// TODO(ARROW-XXX): `?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-04-25T16:30:38.674+0000",
                    "updated": "2018-04-25T16:30:38.674+0000",
                    "started": "2018-04-25T16:30:38.673+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "95088",
                    "issueId": "13154553"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13154553/worklog/95597",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #1940: ARROW-2499: [C++] Factor out Python iteration routines\nURL: https://github.com/apache/arrow/pull/1940#discussion_r184455879\n \n \n\n ##########\n File path: cpp/src/arrow/python/builtin_convert.cc\n ##########\n @@ -103,6 +113,12 @@ class ScalarVisitor {\n         ss << type->ToString();\n         return Status::Invalid(ss.str());\n       }\n+    } else if (PyList_Check(obj) || PyArray_Check(obj)) {\n+      // XXX This code path is used for non-object arrays, which leads\n \n Review comment:\n   Done.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-04-26T16:38:57.610+0000",
                    "updated": "2018-04-26T16:38:57.610+0000",
                    "started": "2018-04-26T16:38:57.610+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "95597",
                    "issueId": "13154553"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13154553/worklog/97036",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "xhochy commented on a change in pull request #1940: ARROW-2499: [C++] Factor out Python iteration routines\nURL: https://github.com/apache/arrow/pull/1940#discussion_r185203754\n \n \n\n ##########\n File path: cpp/src/arrow/python/numpy-internal.h\n ##########\n @@ -57,6 +57,7 @@ class Ndarray1DIndexer {\n   T* begin() const { return data(); }\n   T* end() const { return begin() + size() * stride_; }\n \n+  // XXX should be `stride_ != 1`\n   bool is_strided() const { return stride_ == 1; }\n \n Review comment:\n   Is this is a problem that should be fixed here? \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-01T11:14:11.712+0000",
                    "updated": "2018-05-01T11:14:11.712+0000",
                    "started": "2018-05-01T11:14:11.711+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "97036",
                    "issueId": "13154553"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13154553/worklog/97037",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #1940: ARROW-2499: [C++] Factor out Python iteration routines\nURL: https://github.com/apache/arrow/pull/1940#discussion_r185203934\n \n \n\n ##########\n File path: cpp/src/arrow/python/numpy-internal.h\n ##########\n @@ -57,6 +57,7 @@ class Ndarray1DIndexer {\n   T* begin() const { return data(); }\n   T* end() const { return begin() + size() * stride_; }\n \n+  // XXX should be `stride_ != 1`\n   bool is_strided() const { return stride_ == 1; }\n \n Review comment:\n   I don't know. Perhaps the naming is simply wrong. I should take a look where it's used.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-01T11:14:56.675+0000",
                    "updated": "2018-05-01T11:14:56.675+0000",
                    "started": "2018-05-01T11:14:56.675+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "97037",
                    "issueId": "13154553"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13154553/worklog/97039",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #1940: ARROW-2499: [C++] Factor out Python iteration routines\nURL: https://github.com/apache/arrow/pull/1940#discussion_r185204215\n \n \n\n ##########\n File path: cpp/src/arrow/python/numpy-internal.h\n ##########\n @@ -57,6 +57,7 @@ class Ndarray1DIndexer {\n   T* begin() const { return data(); }\n   T* end() const { return begin() + size() * stride_; }\n \n+  // XXX should be `stride_ != 1`\n   bool is_strided() const { return stride_ == 1; }\n \n Review comment:\n   Turns out it's unused currently.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-01T11:17:54.673+0000",
                    "updated": "2018-05-01T11:17:54.673+0000",
                    "started": "2018-05-01T11:17:54.673+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "97039",
                    "issueId": "13154553"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13154553/worklog/97043",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #1940: ARROW-2499: [C++] Factor out Python iteration routines\nURL: https://github.com/apache/arrow/pull/1940#issuecomment-385656194\n \n \n   Looks like PR #1945 to solve the build issues.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-01T12:04:58.106+0000",
                    "updated": "2018-05-01T12:04:58.106+0000",
                    "started": "2018-05-01T12:04:58.105+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "97043",
                    "issueId": "13154553"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13154553/worklog/97045",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #1940: ARROW-2499: [C++] Factor out Python iteration routines\nURL: https://github.com/apache/arrow/pull/1940#issuecomment-385656194\n \n \n   Looks like PR #1945 needs merging to solve the build issues (or at least some of them).\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-01T12:06:49.078+0000",
                    "updated": "2018-05-01T12:06:49.078+0000",
                    "started": "2018-05-01T12:06:49.078+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "97045",
                    "issueId": "13154553"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13154553/worklog/97177",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #1940: ARROW-2499: [C++] Factor out Python iteration routines\nURL: https://github.com/apache/arrow/pull/1940#issuecomment-385750011\n \n \n   AppVeyor build: https://ci.appveyor.com/project/pitrou/arrow/build/1.0.366\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-01T18:31:55.043+0000",
                    "updated": "2018-05-01T18:31:55.043+0000",
                    "started": "2018-05-01T18:31:55.043+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "97177",
                    "issueId": "13154553"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13154553/worklog/97184",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou closed pull request #1940: ARROW-2499: [C++] Factor out Python iteration routines\nURL: https://github.com/apache/arrow/pull/1940\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/cpp/src/arrow/python/CMakeLists.txt b/cpp/src/arrow/python/CMakeLists.txt\nindex f6c92a79b..7b80b0704 100644\n--- a/cpp/src/arrow/python/CMakeLists.txt\n+++ b/cpp/src/arrow/python/CMakeLists.txt\n@@ -109,6 +109,7 @@ install(FILES\n   helpers.h\n   init.h\n   io.h\n+  iterators.h\n   numpy_convert.h\n   numpy_interop.h\n   numpy_to_arrow.h\ndiff --git a/cpp/src/arrow/python/builtin_convert.cc b/cpp/src/arrow/python/builtin_convert.cc\nindex 740c89666..88674d095 100644\n--- a/cpp/src/arrow/python/builtin_convert.cc\n+++ b/cpp/src/arrow/python/builtin_convert.cc\n@@ -36,6 +36,7 @@\n \n #include \"arrow/python/decimal.h\"\n #include \"arrow/python/helpers.h\"\n+#include \"arrow/python/iterators.h\"\n #include \"arrow/python/numpy_convert.h\"\n #include \"arrow/python/util/datetime.h\"\n \n@@ -76,33 +77,7 @@ class TypeInferrer {\n \n   // Infer value type from a sequence of values\n   Status VisitSequence(PyObject* obj) {\n-    // Loop through a sequence\n-    if (PyArray_Check(obj)) {\n-      Py_ssize_t size = PySequence_Size(obj);\n-      OwnedRef value_ref;\n-\n-      for (Py_ssize_t i = 0; i < size; ++i) {\n-        auto array = reinterpret_cast<PyArrayObject*>(obj);\n-        auto ptr = reinterpret_cast<const char*>(PyArray_GETPTR1(array, i));\n-\n-        value_ref.reset(PyArray_GETITEM(array, ptr));\n-        RETURN_IF_PYERROR();\n-        RETURN_NOT_OK(Visit(value_ref.obj()));\n-      }\n-    } else if (PySequence_Check(obj)) {\n-      OwnedRef seq_ref(PySequence_Fast(obj, \"Object is not a sequence or iterable\"));\n-      RETURN_IF_PYERROR();\n-      PyObject* seq = seq_ref.obj();\n-\n-      Py_ssize_t size = PySequence_Fast_GET_SIZE(seq);\n-      for (Py_ssize_t i = 0; i < size; ++i) {\n-        PyObject* value = PySequence_Fast_GET_ITEM(seq, i);\n-        RETURN_NOT_OK(Visit(value));\n-      }\n-    } else {\n-      return Status::TypeError(\"Object is not a sequence or iterable\");\n-    }\n-    return Status::OK();\n+    return internal::VisitSequence(obj, [this](PyObject* value) { return Visit(value); });\n   }\n \n   Status Visit(PyObject* obj) {\n@@ -139,6 +114,8 @@ class TypeInferrer {\n         return Status::Invalid(ss.str());\n       }\n     } else if (PyList_Check(obj) || PyArray_Check(obj)) {\n+      // TODO(ARROW-2514): This code path is used for non-object arrays, which\n+      // leads to wasteful creation and inspection of temporary Python objects.\n       return VisitList(obj);\n     } else if (PyDict_Check(obj)) {\n       return VisitDict(obj);\n@@ -397,16 +374,9 @@ class TypedConverterVisitor : public TypedConverter<BuilderType> {\n     /// Ensure we've allocated enough space\n     RETURN_NOT_OK(this->typed_builder_->Reserve(size));\n     // Iterate over the items adding each one\n-    if (PySequence_Check(obj)) {\n-      auto self = static_cast<Derived*>(this);\n-      for (int64_t i = 0; i < size; ++i) {\n-        OwnedRef ref(PySequence_GetItem(obj, i));\n-        RETURN_NOT_OK(self->AppendSingle(ref.obj()));\n-      }\n-    } else {\n-      return Status::TypeError(\"Object is not a sequence\");\n-    }\n-    return Status::OK();\n+    auto self = static_cast<Derived*>(this);\n+    auto visit = [self](PyObject* item) { return self->AppendSingle(item); };\n+    return internal::VisitSequence(obj, visit);\n   }\n \n   // Append a missing item (default implementation)\n@@ -591,6 +561,9 @@ class ListConverter : public TypedConverterVisitor<ListBuilder, ListConverter> {\n   Status AppendItem(PyObject* obj) {\n     RETURN_NOT_OK(typed_builder_->Append());\n     const auto list_size = static_cast<int64_t>(PySequence_Size(obj));\n+    if (ARROW_PREDICT_FALSE(list_size == -1)) {\n+      RETURN_IF_PYERROR();\n+    }\n     return value_converter_->AppendMultiple(obj, list_size);\n   }\n \ndiff --git a/cpp/src/arrow/python/common.h b/cpp/src/arrow/python/common.h\nindex 76aee16e1..a61d067e4 100644\n--- a/cpp/src/arrow/python/common.h\n+++ b/cpp/src/arrow/python/common.h\n@@ -35,6 +35,7 @@ class MemoryPool;\n \n namespace py {\n \n+// TODO: inline the successful case\n ARROW_EXPORT Status CheckPyError(StatusCode code = StatusCode::UnknownError);\n \n ARROW_EXPORT Status PassPyError();\ndiff --git a/cpp/src/arrow/python/iterators.h b/cpp/src/arrow/python/iterators.h\nnew file mode 100644\nindex 000000000..efada6e17\n--- /dev/null\n+++ b/cpp/src/arrow/python/iterators.h\n@@ -0,0 +1,103 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#ifndef ARROW_PYTHON_ITERATORS_H\n+#define ARROW_PYTHON_ITERATORS_H\n+\n+#include <utility>\n+\n+#include \"arrow/python/common.h\"\n+#include \"arrow/python/numpy-internal.h\"\n+\n+namespace arrow {\n+namespace py {\n+namespace internal {\n+\n+// Visit the Python sequence, calling the given callable on each element.\n+// If the callable returns a non-OK status, iteration stops and the status is returned.\n+template <class UnaryFunction>\n+inline Status VisitSequence(PyObject* obj, UnaryFunction&& func) {\n+  if (PyArray_Check(obj)) {\n+    PyArrayObject* arr_obj = reinterpret_cast<PyArrayObject*>(obj);\n+    if (PyArray_NDIM(arr_obj) != 1) {\n+      return Status::Invalid(\"Only 1D arrays accepted\");\n+    }\n+\n+    if (PyArray_DESCR(arr_obj)->type_num == NPY_OBJECT) {\n+      // It's an array object, we can fetch object pointers directly\n+      const Ndarray1DIndexer<PyObject*> objects(arr_obj);\n+      for (int64_t i = 0; i < objects.size(); ++i) {\n+        RETURN_NOT_OK(func(objects[i]));\n+      }\n+      return Status::OK();\n+    }\n+    // It's a non-object array, fall back on regular sequence access.\n+    // (note PyArray_GETITEM() is slightly different: it returns standard\n+    //  Python types, not Numpy scalar types)\n+    // This code path is inefficient: callers should implement dedicated\n+    // logic for non-object arrays.\n+  }\n+  if (PySequence_Check(obj)) {\n+    if (PyList_Check(obj) || PyTuple_Check(obj)) {\n+      // Use fast item access\n+      const Py_ssize_t size = PySequence_Fast_GET_SIZE(obj);\n+      for (Py_ssize_t i = 0; i < size; ++i) {\n+        PyObject* value = PySequence_Fast_GET_ITEM(obj, i);\n+        RETURN_NOT_OK(func(value));\n+      }\n+    } else {\n+      // Regular sequence: avoid making a potentially large copy\n+      const Py_ssize_t size = PySequence_Size(obj);\n+      RETURN_IF_PYERROR();\n+      for (Py_ssize_t i = 0; i < size; ++i) {\n+        OwnedRef value_ref(PySequence_ITEM(obj, i));\n+        RETURN_IF_PYERROR();\n+        RETURN_NOT_OK(func(value_ref.obj()));\n+      }\n+    }\n+  } else {\n+    return Status::TypeError(\"Object is not a sequence\");\n+  }\n+  return Status::OK();\n+}\n+\n+// Like IterateSequence, but accepts any generic iterable (including\n+// non-restartable iterators, e.g. generators).\n+template <class UnaryFunction>\n+inline Status VisitIterable(PyObject* obj, UnaryFunction&& func) {\n+  if (PySequence_Check(obj)) {\n+    // Numpy arrays fall here as well\n+    return VisitSequence(obj, std::forward<UnaryFunction>(func));\n+  }\n+  // Fall back on the iterator protocol\n+  OwnedRef iter_ref(PyObject_GetIter(obj));\n+  PyObject* iter = iter_ref.obj();\n+  RETURN_IF_PYERROR();\n+  PyObject* value;\n+  while ((value = PyIter_Next(iter))) {\n+    OwnedRef value_ref(value);\n+    RETURN_NOT_OK(func(value_ref.obj()));\n+  }\n+  RETURN_IF_PYERROR();  // __next__() might have raised\n+  return Status::OK();\n+}\n+\n+}  // namespace internal\n+}  // namespace py\n+}  // namespace arrow\n+\n+#endif  // ARROW_PYTHON_ITERATORS_H\ndiff --git a/cpp/src/arrow/python/numpy-internal.h b/cpp/src/arrow/python/numpy-internal.h\nindex 7672861d4..12319aae9 100644\n--- a/cpp/src/arrow/python/numpy-internal.h\n+++ b/cpp/src/arrow/python/numpy-internal.h\n@@ -57,7 +57,7 @@ class Ndarray1DIndexer {\n   T* begin() const { return data(); }\n   T* end() const { return begin() + size() * stride_; }\n \n-  bool is_strided() const { return stride_ == 1; }\n+  bool is_strided() const { return stride_ != 1; }\n \n   T& operator[](size_type index) { return data_[index * stride_]; }\n   T& operator[](size_type index) const { return data_[index * stride_]; }\ndiff --git a/cpp/src/arrow/python/numpy_to_arrow.cc b/cpp/src/arrow/python/numpy_to_arrow.cc\nindex f5e093a20..646fb74e0 100644\n--- a/cpp/src/arrow/python/numpy_to_arrow.cc\n+++ b/cpp/src/arrow/python/numpy_to_arrow.cc\n@@ -51,6 +51,7 @@\n #include \"arrow/python/config.h\"\n #include \"arrow/python/decimal.h\"\n #include \"arrow/python/helpers.h\"\n+#include \"arrow/python/iterators.h\"\n #include \"arrow/python/numpy-internal.h\"\n #include \"arrow/python/numpy_convert.h\"\n #include \"arrow/python/type_traits.h\"\n@@ -1171,70 +1172,20 @@ Status NumPyConverter::ConvertObjects() {\n   }\n }\n \n-template <typename T>\n-Status LoopPySequence(PyObject* sequence, T func) {\n-  if (PySequence_Check(sequence)) {\n-    OwnedRef ref;\n-    Py_ssize_t size = PySequence_Size(sequence);\n-    if (PyArray_Check(sequence)) {\n-      auto array = reinterpret_cast<PyArrayObject*>(sequence);\n-      Ndarray1DIndexer<PyObject*> objects(array);\n-      for (int64_t i = 0; i < size; ++i) {\n-        RETURN_NOT_OK(func(objects[i]));\n-      }\n-    } else {\n-      for (int64_t i = 0; i < size; ++i) {\n-        ref.reset(PySequence_GetItem(sequence, i));\n-        RETURN_NOT_OK(func(ref.obj()));\n-      }\n-    }\n-  } else if (PyObject_HasAttrString(sequence, \"__iter__\")) {\n-    OwnedRef iter(PyObject_GetIter(sequence));\n-    PyObject* item;\n-    while ((item = PyIter_Next(iter.obj()))) {\n-      OwnedRef ref(item);\n-      RETURN_NOT_OK(func(ref.obj()));\n-    }\n-  } else {\n-    return Status::TypeError(\"Object is not a sequence or iterable\");\n-  }\n-\n-  return Status::OK();\n-}\n-\n-template <typename T>\n+// Like VisitIterable, but the function takes a second boolean argument\n+// deducted from `have_mask` and `mask_values`\n+template <class BinaryFunction>\n Status LoopPySequenceWithMasks(PyObject* sequence,\n                                const Ndarray1DIndexer<uint8_t>& mask_values,\n-                               bool have_mask, T func) {\n-  if (PySequence_Check(sequence)) {\n-    OwnedRef ref;\n-    Py_ssize_t size = PySequence_Size(sequence);\n-    if (PyArray_Check(sequence)) {\n-      auto array = reinterpret_cast<PyArrayObject*>(sequence);\n-      Ndarray1DIndexer<PyObject*> objects(array);\n-      for (int64_t i = 0; i < size; ++i) {\n-        RETURN_NOT_OK(func(objects[i], have_mask && mask_values[i]));\n-      }\n-    } else {\n-      for (int64_t i = 0; i < size; ++i) {\n-        ref.reset(PySequence_GetItem(sequence, i));\n-        RETURN_NOT_OK(func(ref.obj(), have_mask && mask_values[i]));\n-      }\n-    }\n-  } else if (PyObject_HasAttrString(sequence, \"__iter__\")) {\n-    OwnedRef iter(PyObject_GetIter(sequence));\n-    PyObject* item;\n+                               bool have_mask, BinaryFunction&& func) {\n+  if (have_mask) {\n     int64_t i = 0;\n-    while ((item = PyIter_Next(iter.obj()))) {\n-      OwnedRef ref(item);\n-      RETURN_NOT_OK(func(ref.obj(), have_mask && mask_values[i]));\n-      i++;\n-    }\n+    auto visit = [&](PyObject* obj) { return func(obj, mask_values[i++] != 0); };\n+    return internal::VisitIterable(sequence, visit);\n   } else {\n-    return Status::TypeError(\"Object is not a sequence or iterable\");\n+    auto visit = [&](PyObject* obj) { return func(obj, false); };\n+    return internal::VisitIterable(sequence, visit);\n   }\n-\n-  return Status::OK();\n }\n \n template <int ITEM_TYPE, typename ArrowType>\n@@ -1473,7 +1424,7 @@ Status NumPyConverter::ConvertLists(const std::shared_ptr<DataType>& type,\n         }\n       };\n \n-      return LoopPySequence(list, foreach_item);\n+      return internal::VisitIterable(list, foreach_item);\n     }\n     default: {\n       std::stringstream ss;\ndiff --git a/cpp/src/arrow/python/python_to_arrow.cc b/cpp/src/arrow/python/python_to_arrow.cc\nindex 279ce1f27..64cf2b4c1 100644\n--- a/cpp/src/arrow/python/python_to_arrow.cc\n+++ b/cpp/src/arrow/python/python_to_arrow.cc\n@@ -40,6 +40,7 @@\n \n #include \"arrow/python/common.h\"\n #include \"arrow/python/helpers.h\"\n+#include \"arrow/python/iterators.h\"\n #include \"arrow/python/numpy_convert.h\"\n #include \"arrow/python/platform.h\"\n #include \"arrow/python/util/datetime.h\"\n@@ -577,17 +578,11 @@ Status SerializeSequences(PyObject* context, std::vector<PyObject*> sequences,\n   SequenceBuilder builder(nullptr);\n   std::vector<PyObject*> sublists, subtuples, subdicts, subsets;\n   for (const auto& sequence : sequences) {\n-    OwnedRef iterator(PyObject_GetIter(sequence));\n-    RETURN_IF_PYERROR();\n-    OwnedRef item;\n-    while (true) {\n-      item.reset(PyIter_Next(iterator.obj()));\n-      if (!item.obj()) {\n-        break;\n-      }\n-      RETURN_NOT_OK(Append(context, item.obj(), &builder, &sublists, &subtuples,\n-                           &subdicts, &subsets, blobs_out));\n-    }\n+    auto visit = [&](PyObject* obj) {\n+      return Append(context, obj, &builder, &sublists, &subtuples, &subdicts, &subsets,\n+                    blobs_out);\n+    };\n+    RETURN_NOT_OK(internal::VisitIterable(sequence, visit));\n   }\n   std::shared_ptr<Array> list;\n   if (sublists.size() > 0) {\ndiff --git a/python/pyarrow/tests/test_convert_builtin.py b/python/pyarrow/tests/test_convert_builtin.py\nindex 7fb43015e..8a8e5542e 100644\n--- a/python/pyarrow/tests/test_convert_builtin.py\n+++ b/python/pyarrow/tests/test_convert_builtin.py\n@@ -21,6 +21,7 @@\n from pyarrow.compat import unittest, u  # noqa\n import pyarrow as pa\n \n+import collections\n import datetime\n import decimal\n import itertools\n@@ -118,12 +119,22 @@ def _as_tuple(xs):\n     return tuple(xs)\n \n \n+def _as_deque(xs):\n+    # deque is a sequence while neither tuple nor list\n+    return collections.deque(xs)\n+\n+\n def _as_dict_values(xs):\n+    # a dict values object is not a sequence, just a regular iterable\n     dct = {k: v for k, v in enumerate(xs)}\n     return six.viewvalues(dct)\n \n \n-@pytest.mark.parametrize(\"seq\", [_as_list, _as_tuple, _as_dict_values])\n+parametrize_with_iterable_types = pytest.mark.parametrize(\n+    \"seq\", [_as_list, _as_tuple, _as_deque, _as_dict_values])\n+\n+\n+@parametrize_with_iterable_types\n def test_sequence_types(seq):\n     arr1 = pa.array(seq([1, 2, 3]))\n     arr2 = pa.array([1, 2, 3])\n@@ -131,7 +142,7 @@ def test_sequence_types(seq):\n     assert arr1.equals(arr2)\n \n \n-@pytest.mark.parametrize(\"seq\", [_as_list, _as_tuple, _as_dict_values])\n+@parametrize_with_iterable_types\n def test_sequence_boolean(seq):\n     expected = [True, None, False, None]\n     arr = pa.array(seq(expected))\n@@ -141,7 +152,7 @@ def test_sequence_boolean(seq):\n     assert arr.to_pylist() == expected\n \n \n-@pytest.mark.parametrize(\"seq\", [_as_list, _as_tuple, _as_dict_values])\n+@parametrize_with_iterable_types\n def test_sequence_numpy_boolean(seq):\n     expected = [np.bool(True), None, np.bool(False), None]\n     arr = pa.array(seq(expected))\n@@ -151,7 +162,7 @@ def test_sequence_numpy_boolean(seq):\n     assert arr.to_pylist() == expected\n \n \n-@pytest.mark.parametrize(\"seq\", [_as_list, _as_tuple, _as_dict_values])\n+@parametrize_with_iterable_types\n def test_empty_list(seq):\n     arr = pa.array(seq([]))\n     assert len(arr) == 0\n@@ -160,16 +171,30 @@ def test_empty_list(seq):\n     assert arr.to_pylist() == []\n \n \n-@pytest.mark.parametrize(\"seq\", [_as_list, _as_tuple, _as_dict_values])\n+@parametrize_with_iterable_types\n def test_nested_lists(seq):\n-    arr = pa.array(seq([[], [1, 2], None]))\n+    data = [[], [1, 2], None]\n+    arr = pa.array(seq(data))\n     assert len(arr) == 3\n     assert arr.null_count == 1\n     assert arr.type == pa.list_(pa.int64())\n-    assert arr.to_pylist() == [[], [1, 2], None]\n+    assert arr.to_pylist() == data\n+    # With explicit type\n+    arr = pa.array(seq(data), type=pa.list_(pa.int32()))\n+    assert len(arr) == 3\n+    assert arr.null_count == 1\n+    assert arr.type == pa.list_(pa.int32())\n+    assert arr.to_pylist() == data\n+\n+\n+@parametrize_with_iterable_types\n+def test_list_with_non_list(seq):\n+    # List types don't accept non-sequences\n+    with pytest.raises(pa.ArrowTypeError):\n+        pa.array(seq([[], [1, 2], 3]), type=pa.list_(pa.int64()))\n \n \n-@pytest.mark.parametrize(\"seq\", [_as_list, _as_tuple, _as_dict_values])\n+@parametrize_with_iterable_types\n def test_nested_arrays(seq):\n     arr = pa.array(seq([np.array([], dtype=int), np.array([1, 2]), None]))\n     assert len(arr) == 3\n@@ -178,15 +203,16 @@ def test_nested_arrays(seq):\n     assert arr.to_pylist() == [[], [1, 2], None]\n \n \n-def test_sequence_all_none():\n-    arr = pa.array([None, None])\n+@parametrize_with_iterable_types\n+def test_sequence_all_none(seq):\n+    arr = pa.array(seq([None, None]))\n     assert len(arr) == 2\n     assert arr.null_count == 2\n     assert arr.type == pa.null()\n     assert arr.to_pylist() == [None, None]\n \n \n-@pytest.mark.parametrize(\"seq\", [_as_list, _as_tuple, _as_dict_values])\n+@parametrize_with_iterable_types\n @pytest.mark.parametrize(\"np_scalar_pa_type\", int_type_pairs)\n def test_sequence_integer(seq, np_scalar_pa_type):\n     np_scalar, pa_type = np_scalar_pa_type\n@@ -199,7 +225,7 @@ def test_sequence_integer(seq, np_scalar_pa_type):\n     assert arr.to_pylist() == expected\n \n \n-@pytest.mark.parametrize(\"seq\", [_as_list, _as_tuple, _as_dict_values])\n+@parametrize_with_iterable_types\n def test_sequence_integer_inferred(seq):\n     expected = [1, None, 3, None]\n     arr = pa.array(seq(expected))\n@@ -209,7 +235,7 @@ def test_sequence_integer_inferred(seq):\n     assert arr.to_pylist() == expected\n \n \n-@pytest.mark.parametrize(\"seq\", [_as_list, _as_tuple, _as_dict_values])\n+@parametrize_with_iterable_types\n @pytest.mark.parametrize(\"np_scalar_pa_type\", int_type_pairs)\n def test_sequence_numpy_integer(seq, np_scalar_pa_type):\n     np_scalar, pa_type = np_scalar_pa_type\n@@ -223,7 +249,7 @@ def test_sequence_numpy_integer(seq, np_scalar_pa_type):\n     assert arr.to_pylist() == expected\n \n \n-@pytest.mark.parametrize(\"seq\", [_as_list, _as_tuple, _as_dict_values])\n+@parametrize_with_iterable_types\n @pytest.mark.parametrize(\"np_scalar_pa_type\", int_type_pairs)\n def test_sequence_numpy_integer_inferred(seq, np_scalar_pa_type):\n     np_scalar, pa_type = np_scalar_pa_type\n@@ -282,7 +308,7 @@ def test_sequence_double():\n     assert arr.to_pylist() == data\n \n \n-@pytest.mark.parametrize(\"seq\", [_as_list, _as_tuple, _as_dict_values])\n+@parametrize_with_iterable_types\n @pytest.mark.parametrize(\"np_scalar\", [np.float16, np.float32, np.float64])\n def test_sequence_numpy_double(seq, np_scalar):\n     data = [np_scalar(1.5), np_scalar(1), None, np_scalar(2.5), None, None]\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-01T18:55:47.876+0000",
                    "updated": "2018-05-01T18:55:47.876+0000",
                    "started": "2018-05-01T18:55:47.875+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "97184",
                    "issueId": "13154553"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/5",
            "id": "5",
            "description": "General wishlist item.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Wish",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 6600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@7e7f9eb2[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1896e61a[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@35c164fe[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@1a48e26a[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1d75926e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@65f14345[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5ba92d91[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@62fcf3c[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@37f8db75[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@587c4da4[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4aab369f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@320556d9[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 6600,
        "customfield_12312520": null,
        "customfield_12312521": "Tue May 01 18:56:00 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-05-01T18:56:00.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2499/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2018-04-23T18:08:59.000+0000",
        "updated": "2018-05-01T18:56:00.000+0000",
        "timeoriginalestimate": null,
        "description": "The idea is to factor out something like the following:\r\nhttps://github.com/apache/arrow/pull/1935/files#diff-6ea0fcd65b95b76eab9ddfbd7a173725R78\r\n\r\nHowever I'm not sure which idiom or pattern we should choose. [~cpcloud] any idea?",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "1h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 6600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Add iterator facility for Python sequences",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13154553/comment/16448739",
                    "id": "16448739",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=cpcloud",
                        "name": "cpcloud",
                        "key": "cpcloud",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=cpcloud&avatarId=31265",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=cpcloud&avatarId=31265",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=cpcloud&avatarId=31265",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=cpcloud&avatarId=31265"
                        },
                        "displayName": "Phillip Cloud",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "pybind11 actually has a nice implementation of C++ iterators on the core python sequence types (https://github.com/pybind/pybind11/blob/master/include/pybind11/pytypes.h#L559-L682). Maybe we take some ideas from there?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=cpcloud",
                        "name": "cpcloud",
                        "key": "cpcloud",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=cpcloud&avatarId=31265",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=cpcloud&avatarId=31265",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=cpcloud&avatarId=31265",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=cpcloud&avatarId=31265"
                        },
                        "displayName": "Phillip Cloud",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-04-23T19:23:23.482+0000",
                    "updated": "2018-04-23T19:23:23.482+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13154553/comment/16448756",
                    "id": "16448756",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "That looks nice, but I would like to know how to abstract away the fact that we need two separate loops for performance in the example above. pybind11 basically has us write the checks and separate loops by hands. Perhaps a `for_each` like facility? But what should the signature look like?\r\n\r\nAlso, should we take the pybind11 code as-is or write our own?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2018-04-23T19:39:27.018+0000",
                    "updated": "2018-04-23T19:39:27.018+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13154553/comment/16448767",
                    "id": "16448767",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=cpcloud",
                        "name": "cpcloud",
                        "key": "cpcloud",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=cpcloud&avatarId=31265",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=cpcloud&avatarId=31265",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=cpcloud&avatarId=31265",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=cpcloud&avatarId=31265"
                        },
                        "displayName": "Phillip Cloud",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "You'd still have to do the checks and choose the right _specific_ iterator but in theory you'd be able to have a single {{VisitSequence(const generic_iterator& iter)}} and loop over the elements using range-based for loops, which gets rid of the loop duplication. I'm not sure how to get rid of the checks since we only have {{PyObject*}} at the call site.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=cpcloud",
                        "name": "cpcloud",
                        "key": "cpcloud",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=cpcloud&avatarId=31265",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=cpcloud&avatarId=31265",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=cpcloud&avatarId=31265",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=cpcloud&avatarId=31265"
                        },
                        "displayName": "Phillip Cloud",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-04-23T19:46:59.587+0000",
                    "updated": "2018-04-23T19:46:59.587+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13154553/comment/16448780",
                    "id": "16448780",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "{{generic_iterator}} is a template class in pybind11, so I'm not sure how that works.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2018-04-23T19:56:29.646+0000",
                    "updated": "2018-04-23T19:56:29.646+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13154553/comment/16448786",
                    "id": "16448786",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=cpcloud",
                        "name": "cpcloud",
                        "key": "cpcloud",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=cpcloud&avatarId=31265",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=cpcloud&avatarId=31265",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=cpcloud&avatarId=31265",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=cpcloud&avatarId=31265"
                        },
                        "displayName": "Phillip Cloud",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "I can take a crack at this to show you what I mean (my suggestion may also not work out, there are still some things about idiomatic C++ that I don't yet grok). [~joshuastorck] might also have suggestions here.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=cpcloud",
                        "name": "cpcloud",
                        "key": "cpcloud",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=cpcloud&avatarId=31265",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=cpcloud&avatarId=31265",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=cpcloud&avatarId=31265",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=cpcloud&avatarId=31265"
                        },
                        "displayName": "Phillip Cloud",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-04-23T20:02:20.773+0000",
                    "updated": "2018-04-23T20:02:20.773+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13154553/comment/16448790",
                    "id": "16448790",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "That would be nice. Otherwise I might end up writing a {{for_each}}-like primitive, something like:\r\n\r\n{code:cpp}\r\n// Iterate on the Python sequence, calling the given callable on each element.\r\n// If the callable returns a non-OK status, iteration stops and the status is returned.\r\nStatus IterateSequence(PyObject*, const std::function<Status(PyObject*)>&);\r\n{code}",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2018-04-23T20:07:50.299+0000",
                    "updated": "2018-04-23T20:07:50.299+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13154553/comment/16448795",
                    "id": "16448795",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=cpcloud",
                        "name": "cpcloud",
                        "key": "cpcloud",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=cpcloud&avatarId=31265",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=cpcloud&avatarId=31265",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=cpcloud&avatarId=31265",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=cpcloud&avatarId=31265"
                        },
                        "displayName": "Phillip Cloud",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "That works well too.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=cpcloud",
                        "name": "cpcloud",
                        "key": "cpcloud",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=cpcloud&avatarId=31265",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=cpcloud&avatarId=31265",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=cpcloud&avatarId=31265",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=cpcloud&avatarId=31265"
                        },
                        "displayName": "Phillip Cloud",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-04-23T20:10:22.448+0000",
                    "updated": "2018-04-23T20:10:22.448+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13154553/comment/16448799",
                    "id": "16448799",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=cpcloud",
                        "name": "cpcloud",
                        "key": "cpcloud",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=cpcloud&avatarId=31265",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=cpcloud&avatarId=31265",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=cpcloud&avatarId=31265",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=cpcloud&avatarId=31265"
                        },
                        "displayName": "Phillip Cloud",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "[~pitrou] Looks like there's {{LoopPySequence}} in {{numpy_to_arrow.cc}}, if that satisfies the need.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=cpcloud",
                        "name": "cpcloud",
                        "key": "cpcloud",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=cpcloud&avatarId=31265",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=cpcloud&avatarId=31265",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=cpcloud&avatarId=31265",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=cpcloud&avatarId=31265"
                        },
                        "displayName": "Phillip Cloud",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-04-23T20:17:33.171+0000",
                    "updated": "2018-04-23T20:17:33.171+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13154553/comment/16448800",
                    "id": "16448800",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Thanks! We can start from that indeed.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2018-04-23T20:19:29.378+0000",
                    "updated": "2018-04-23T20:19:29.378+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13154553/comment/16460012",
                    "id": "16460012",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 1940\n[https://github.com/apache/arrow/pull/1940]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2018-05-01T18:56:00.459+0000",
                    "updated": "2018-05-01T18:56:00.459+0000"
                }
            ],
            "maxResults": 10,
            "total": 10,
            "startAt": 0
        },
        "customfield_12311820": "0|i3swt3:",
        "customfield_12314139": null
    }
}