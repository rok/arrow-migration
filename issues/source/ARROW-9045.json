{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13309775",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13309775",
    "key": "ARROW-9045",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12347769",
                "id": "12347769",
                "description": "",
                "name": "1.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-07-24"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12590518",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12590518",
                "type": {
                    "id": "12310460",
                    "name": "Child-Issue",
                    "inward": "is a child of",
                    "outward": "is a parent of",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310460"
                },
                "inwardIssue": {
                    "id": "13306872",
                    "key": "ARROW-8894",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13306872",
                    "fields": {
                        "summary": "[C++] C++ array kernels framework and execution buildout (umbrella issue)",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            },
            {
                "id": "12590520",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12590520",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "outwardIssue": {
                    "id": "13242002",
                    "key": "ARROW-5760",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13242002",
                    "fields": {
                        "summary": "[C++] Optimize Take implementation",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            },
            {
                "id": "12590519",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12590519",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "outwardIssue": {
                    "id": "13306914",
                    "key": "ARROW-8903",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13306914",
                    "fields": {
                        "summary": "[C++] Implement optimized \"unsafe take\" for use with selection vectors for kernel execution",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 3000,
            "total": 3000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 3000,
            "total": 3000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-9045/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 5,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13309775/worklog/441947",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm opened a new pull request #7358:\nURL: https://github.com/apache/arrow/pull/7358\n\n\n   The idea of this patch is to provide a more comprehensive baseline for the optimization work I'm undertaking.\r\n   \r\n   Summary:\r\n   \r\n   * Benchmark take when indices are monotonic and contain no nulls. Monotonic takes perform much faster because it accesses memory consecutively rather than at random\r\n   * Test null percentages down to 0.01% (1% is even a lot of nulls, and obscures behavior between 1% and 0%). \r\n   * Benchmark indices/filter-mask with and without nulls, because there may be faster code paths for the no-nulls case\r\n   * Benchmark when values being taken/filtered are all not null\r\n   * Benchmark filtering/taking smaller strings. The benchmarks were doing strings of size 0 to 128 -- realistic workloads generally will be working with smaller strings, so I set a range instead of 0 to 32 with 16 the average\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-05T17:56:05.992+0000",
                    "updated": "2020-06-05T17:56:05.992+0000",
                    "started": "2020-06-05T17:56:05.991+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "441947",
                    "issueId": "13309775"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13309775/worklog/441954",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #7358:\nURL: https://github.com/apache/arrow/pull/7358#issuecomment-639672332\n\n\n   https://issues.apache.org/jira/browse/ARROW-9045\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-05T18:03:20.195+0000",
                    "updated": "2020-06-05T18:03:20.195+0000",
                    "started": "2020-06-05T18:03:20.194+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "441954",
                    "issueId": "13309775"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13309775/worklog/441985",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on a change in pull request #7358:\nURL: https://github.com/apache/arrow/pull/7358#discussion_r436089235\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/vector_selection_benchmark.cc\n##########\n@@ -0,0 +1,291 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"benchmark/benchmark.h\"\n+\n+#include \"arrow/compute/api_vector.h\"\n+#include \"arrow/compute/benchmark_util.h\"\n+#include \"arrow/compute/kernels/test_util.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/testing/random.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+constexpr auto kSeed = 0x0ff1ce;\n+\n+struct FilterParams {\n+  // proportion of nulls in the values array\n+  const double values_null_proportion;\n+\n+  // proportion of true in filter\n+  const double selected_proportion;\n+\n+  // proportion of nulls in the filter\n+  const double filter_null_proportion;\n+};\n+\n+std::vector<int64_t> g_data_sizes = {kL1Size, 1 << 20};\n+\n+// The benchmark state parameter references this vector of cases. Test high and\n+// low selectivity filters.\n+std::vector<FilterParams> g_filter_params = {\n+    {0., 0.95, 0.05},   {0., 0.10, 0.05},   {0.001, 0.95, 0.05}, {0.001, 0.10, 0.05},\n+    {0.01, 0.95, 0.05}, {0.01, 0.10, 0.05}, {0.1, 0.95, 0.05},   {0.1, 0.10, 0.05},\n+    {0.9, 0.95, 0.05},  {0.9, 0.10, 0.05}};\n+\n+// RAII struct to handle some of the boilerplate in filter\n+struct FilterArgs {\n+  // size of memory tested (per iteration) in bytes\n+  const int64_t size;\n+\n+  double values_null_proportion = 0.;\n+  double selected_proportion = 0.;\n+  double filter_null_proportion = 0.;\n+\n+  FilterArgs(benchmark::State& state, bool filter_has_nulls)\n+      : size(state.range(0)), state_(state) {\n+    auto params = g_filter_params[state.range(1)];\n+    values_null_proportion = params.values_null_proportion;\n+    selected_proportion = params.selected_proportion;\n+    filter_null_proportion = filter_has_nulls ? params.filter_null_proportion : 0;\n+  }\n+\n+  ~FilterArgs() {\n+    state_.counters[\"size\"] = static_cast<double>(size);\n+    state_.counters[\"select%\"] = selected_proportion * 100;\n+    state_.counters[\"data null%\"] = values_null_proportion * 100;\n+    state_.counters[\"mask null%\"] = filter_null_proportion * 100;\n+    state_.SetBytesProcessed(state_.iterations() * size);\n+  }\n+\n+ private:\n+  benchmark::State& state_;\n+};\n+\n+struct TakeBenchmark {\n+  benchmark::State& state;\n+  RegressionArgs args;\n+  random::RandomArrayGenerator rand;\n+  bool indices_have_nulls;\n+  bool monotonic_indices = false;\n+\n+  TakeBenchmark(benchmark::State& state, bool indices_have_nulls,\n+                bool monotonic_indices = false)\n+      : state(state),\n+        args(state),\n+        rand(kSeed),\n+        indices_have_nulls(indices_have_nulls),\n+        monotonic_indices(false) {}\n+\n+  void Int64() {\n+    const int64_t array_size = args.size / sizeof(int64_t);\n+    auto values = rand.Int64(array_size, -100, 100, args.null_proportion);\n+    Bench(values);\n+  }\n+\n+  void FSLInt64() {\n+    const int64_t array_size = args.size / sizeof(int64_t);\n+    auto int_array = rand.Int64(array_size, -100, 100, args.null_proportion);\n+    auto values = std::make_shared<FixedSizeListArray>(\n+        fixed_size_list(int64(), 1), array_size, int_array, int_array->null_bitmap(),\n+        int_array->null_count());\n+    Bench(values);\n+  }\n+\n+  void String() {\n+    int32_t string_min_length = 0, string_max_length = 32;\n+    int32_t string_mean_length = (string_max_length + string_min_length) / 2;\n+    // for an array of 50% null strings, we need to generate twice as many strings\n+    // to ensure that they have an average of args.size total characters\n+    int64_t array_size = args.size;\n+    if (args.null_proportion < 1) {\n+      array_size = static_cast<int64_t>(args.size / string_mean_length /\n+                                        (1 - args.null_proportion));\n+    }\n+    auto values = std::static_pointer_cast<StringArray>(rand.String(\n+        array_size, string_min_length, string_max_length, args.null_proportion));\n+    Bench(values);\n+  }\n+\n+  void Bench(const std::shared_ptr<Array>& values) {\n+    bool indices_null_proportion = indices_have_nulls ? args.null_proportion : 0;\n+    auto indices =\n+        rand.Int32(static_cast<int32_t>(values->length()), 0,\n+                   static_cast<int32_t>(values->length() - 1), indices_null_proportion);\n+\n+    if (monotonic_indices) {\n+      auto arg_sorter = *SortToIndices(*indices);\n+      indices = *Take(*indices, *arg_sorter);\n+    }\n+\n+    for (auto _ : state) {\n+      ABORT_NOT_OK(Take(values, indices).status());\n+    }\n+  }\n+};\n+\n+struct FilterBenchmark {\n+  benchmark::State& state;\n+  FilterArgs args;\n+  random::RandomArrayGenerator rand;\n+  bool filter_has_nulls;\n+\n+  FilterBenchmark(benchmark::State& state, bool filter_has_nulls)\n+      : state(state),\n+        args(state, filter_has_nulls),\n+        rand(kSeed),\n+        filter_has_nulls(filter_has_nulls) {}\n+\n+  void Int64() {\n+    const int64_t array_size = args.size / sizeof(int64_t);\n+    auto values = std::static_pointer_cast<NumericArray<Int64Type>>(\n+        rand.Int64(array_size, -100, 100, args.values_null_proportion));\n+    Bench(values);\n+  }\n+\n+  void FSLInt64() {\n+    const int64_t array_size = args.size / sizeof(int64_t);\n+    auto int_array = std::static_pointer_cast<NumericArray<Int64Type>>(\n+        rand.Int64(array_size, -100, 100, args.values_null_proportion));\n+    auto values = std::make_shared<FixedSizeListArray>(\n+        fixed_size_list(int64(), 1), array_size, int_array, int_array->null_bitmap(),\n+        int_array->null_count());\n+    Bench(values);\n+  }\n+\n+  void String() {\n+    int32_t string_min_length = 0, string_max_length = 32;\n+    int32_t string_mean_length = (string_max_length + string_min_length) / 2;\n+    // for an array of 50% null strings, we need to generate twice as many strings\n+    // to ensure that they have an average of args.size total characters\n+    int64_t array_size = args.size;\n+    if (args.values_null_proportion < 1) {\n+      array_size = static_cast<int64_t>(args.size / string_mean_length /\n+                                        (1 - args.values_null_proportion));\n+    }\n+    auto values = std::static_pointer_cast<StringArray>(rand.String(\n+        array_size, string_min_length, string_max_length, args.values_null_proportion));\n+    Bench(values);\n+  }\n+\n+  void Bench(const std::shared_ptr<Array>& values) {\n+    auto filter = rand.Boolean(values->length(), args.selected_proportion,\n+                               args.filter_null_proportion);\n+    for (auto _ : state) {\n+      ABORT_NOT_OK(Filter(values, filter).status());\n+    }\n+  }\n+};\n+\n+static void FilterInt64FilterNoNulls(benchmark::State& state) {\n+  return FilterBenchmark(state, false).Int64();\n\nReview comment:\n       You might get compiler warnings for returning in a void function.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-05T18:45:43.533+0000",
                    "updated": "2020-06-05T18:45:43.533+0000",
                    "started": "2020-06-05T18:45:43.532+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "441985",
                    "issueId": "13309775"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13309775/worklog/441990",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #7358:\nURL: https://github.com/apache/arrow/pull/7358#discussion_r436103434\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/vector_selection_benchmark.cc\n##########\n@@ -0,0 +1,291 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"benchmark/benchmark.h\"\n+\n+#include \"arrow/compute/api_vector.h\"\n+#include \"arrow/compute/benchmark_util.h\"\n+#include \"arrow/compute/kernels/test_util.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/testing/random.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+constexpr auto kSeed = 0x0ff1ce;\n+\n+struct FilterParams {\n+  // proportion of nulls in the values array\n+  const double values_null_proportion;\n+\n+  // proportion of true in filter\n+  const double selected_proportion;\n+\n+  // proportion of nulls in the filter\n+  const double filter_null_proportion;\n+};\n+\n+std::vector<int64_t> g_data_sizes = {kL1Size, 1 << 20};\n+\n+// The benchmark state parameter references this vector of cases. Test high and\n+// low selectivity filters.\n+std::vector<FilterParams> g_filter_params = {\n+    {0., 0.95, 0.05},   {0., 0.10, 0.05},   {0.001, 0.95, 0.05}, {0.001, 0.10, 0.05},\n+    {0.01, 0.95, 0.05}, {0.01, 0.10, 0.05}, {0.1, 0.95, 0.05},   {0.1, 0.10, 0.05},\n+    {0.9, 0.95, 0.05},  {0.9, 0.10, 0.05}};\n+\n+// RAII struct to handle some of the boilerplate in filter\n+struct FilterArgs {\n+  // size of memory tested (per iteration) in bytes\n+  const int64_t size;\n+\n+  double values_null_proportion = 0.;\n+  double selected_proportion = 0.;\n+  double filter_null_proportion = 0.;\n+\n+  FilterArgs(benchmark::State& state, bool filter_has_nulls)\n+      : size(state.range(0)), state_(state) {\n+    auto params = g_filter_params[state.range(1)];\n+    values_null_proportion = params.values_null_proportion;\n+    selected_proportion = params.selected_proportion;\n+    filter_null_proportion = filter_has_nulls ? params.filter_null_proportion : 0;\n+  }\n+\n+  ~FilterArgs() {\n+    state_.counters[\"size\"] = static_cast<double>(size);\n+    state_.counters[\"select%\"] = selected_proportion * 100;\n+    state_.counters[\"data null%\"] = values_null_proportion * 100;\n+    state_.counters[\"mask null%\"] = filter_null_proportion * 100;\n+    state_.SetBytesProcessed(state_.iterations() * size);\n+  }\n+\n+ private:\n+  benchmark::State& state_;\n+};\n+\n+struct TakeBenchmark {\n+  benchmark::State& state;\n+  RegressionArgs args;\n+  random::RandomArrayGenerator rand;\n+  bool indices_have_nulls;\n+  bool monotonic_indices = false;\n+\n+  TakeBenchmark(benchmark::State& state, bool indices_have_nulls,\n+                bool monotonic_indices = false)\n+      : state(state),\n+        args(state),\n+        rand(kSeed),\n+        indices_have_nulls(indices_have_nulls),\n+        monotonic_indices(false) {}\n+\n+  void Int64() {\n+    const int64_t array_size = args.size / sizeof(int64_t);\n+    auto values = rand.Int64(array_size, -100, 100, args.null_proportion);\n+    Bench(values);\n+  }\n+\n+  void FSLInt64() {\n+    const int64_t array_size = args.size / sizeof(int64_t);\n+    auto int_array = rand.Int64(array_size, -100, 100, args.null_proportion);\n+    auto values = std::make_shared<FixedSizeListArray>(\n+        fixed_size_list(int64(), 1), array_size, int_array, int_array->null_bitmap(),\n+        int_array->null_count());\n+    Bench(values);\n+  }\n+\n+  void String() {\n+    int32_t string_min_length = 0, string_max_length = 32;\n+    int32_t string_mean_length = (string_max_length + string_min_length) / 2;\n+    // for an array of 50% null strings, we need to generate twice as many strings\n+    // to ensure that they have an average of args.size total characters\n+    int64_t array_size = args.size;\n+    if (args.null_proportion < 1) {\n+      array_size = static_cast<int64_t>(args.size / string_mean_length /\n+                                        (1 - args.null_proportion));\n+    }\n+    auto values = std::static_pointer_cast<StringArray>(rand.String(\n+        array_size, string_min_length, string_max_length, args.null_proportion));\n+    Bench(values);\n+  }\n+\n+  void Bench(const std::shared_ptr<Array>& values) {\n+    bool indices_null_proportion = indices_have_nulls ? args.null_proportion : 0;\n+    auto indices =\n+        rand.Int32(static_cast<int32_t>(values->length()), 0,\n+                   static_cast<int32_t>(values->length() - 1), indices_null_proportion);\n+\n+    if (monotonic_indices) {\n+      auto arg_sorter = *SortToIndices(*indices);\n+      indices = *Take(*indices, *arg_sorter);\n+    }\n+\n+    for (auto _ : state) {\n+      ABORT_NOT_OK(Take(values, indices).status());\n+    }\n+  }\n+};\n+\n+struct FilterBenchmark {\n+  benchmark::State& state;\n+  FilterArgs args;\n+  random::RandomArrayGenerator rand;\n+  bool filter_has_nulls;\n+\n+  FilterBenchmark(benchmark::State& state, bool filter_has_nulls)\n+      : state(state),\n+        args(state, filter_has_nulls),\n+        rand(kSeed),\n+        filter_has_nulls(filter_has_nulls) {}\n+\n+  void Int64() {\n+    const int64_t array_size = args.size / sizeof(int64_t);\n+    auto values = std::static_pointer_cast<NumericArray<Int64Type>>(\n+        rand.Int64(array_size, -100, 100, args.values_null_proportion));\n+    Bench(values);\n+  }\n+\n+  void FSLInt64() {\n+    const int64_t array_size = args.size / sizeof(int64_t);\n+    auto int_array = std::static_pointer_cast<NumericArray<Int64Type>>(\n+        rand.Int64(array_size, -100, 100, args.values_null_proportion));\n+    auto values = std::make_shared<FixedSizeListArray>(\n+        fixed_size_list(int64(), 1), array_size, int_array, int_array->null_bitmap(),\n+        int_array->null_count());\n+    Bench(values);\n+  }\n+\n+  void String() {\n+    int32_t string_min_length = 0, string_max_length = 32;\n+    int32_t string_mean_length = (string_max_length + string_min_length) / 2;\n+    // for an array of 50% null strings, we need to generate twice as many strings\n+    // to ensure that they have an average of args.size total characters\n+    int64_t array_size = args.size;\n+    if (args.values_null_proportion < 1) {\n+      array_size = static_cast<int64_t>(args.size / string_mean_length /\n+                                        (1 - args.values_null_proportion));\n+    }\n+    auto values = std::static_pointer_cast<StringArray>(rand.String(\n+        array_size, string_min_length, string_max_length, args.values_null_proportion));\n+    Bench(values);\n+  }\n+\n+  void Bench(const std::shared_ptr<Array>& values) {\n+    auto filter = rand.Boolean(values->length(), args.selected_proportion,\n+                               args.filter_null_proportion);\n+    for (auto _ : state) {\n+      ABORT_NOT_OK(Filter(values, filter).status());\n+    }\n+  }\n+};\n+\n+static void FilterInt64FilterNoNulls(benchmark::State& state) {\n+  return FilterBenchmark(state, false).Int64();\n\nReview comment:\n       ah thanks, fixing\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-05T18:47:47.335+0000",
                    "updated": "2020-06-05T18:47:47.335+0000",
                    "started": "2020-06-05T18:47:47.334+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "441990",
                    "issueId": "13309775"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13309775/worklog/442009",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm closed pull request #7358:\nURL: https://github.com/apache/arrow/pull/7358\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-05T19:42:57.745+0000",
                    "updated": "2020-06-05T19:42:57.745+0000",
                    "started": "2020-06-05T19:42:57.745+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "442009",
                    "issueId": "13309775"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 3000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@49d826fd[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@553a0f73[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5c78b38c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@593c7ee7[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3ccfe635[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@14b947e8[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@d446220[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@37b5fe29[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@740858a4[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@2ad0c7ca[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@42be5d2[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@1c7717c8[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 3000,
        "customfield_12312520": null,
        "customfield_12312521": "Fri Jun 05 19:42:50 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-06-05T19:42:50.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-9045/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2020-06-05T17:15:33.000+0000",
        "updated": "2020-06-05T19:42:58.000+0000",
        "timeoriginalestimate": null,
        "description": "I'm putting this up as a separate patch for review",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 3000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Improve and expand Take/Filter benchmarks",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13309775/comment/17127038",
                    "id": "17127038",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 7358\n[https://github.com/apache/arrow/pull/7358]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2020-06-05T19:42:50.827+0000",
                    "updated": "2020-06-05T19:42:50.827+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0fkdc:",
        "customfield_12314139": null
    }
}