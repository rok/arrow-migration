{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13117616",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13117616",
    "key": "ARROW-1796",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12347769",
                "id": "12347769",
                "description": "",
                "name": "1.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-07-24"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "dataset",
            "dataset-parquet-read",
            "parquet",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12541281",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12541281",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13117615",
                    "key": "PARQUET-1158",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13117615",
                    "fields": {
                        "summary": "[C++] Basic RowGroup filtering",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            },
            {
                "id": "12583479",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12583479",
                "type": {
                    "id": "10001",
                    "name": "dependent",
                    "inward": "is depended upon by",
                    "outward": "depends upon",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10001"
                },
                "outwardIssue": {
                    "id": "13290584",
                    "key": "ARROW-8039",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13290584",
                    "fields": {
                        "summary": "[Python][Dataset] Support using dataset API in pyarrow.parquet with a minimal ParquetDataset shim",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
                            "id": "7",
                            "description": "The sub-task of the issue",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
                            "name": "Sub-task",
                            "subtask": true,
                            "avatarId": 21146
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
            "name": "jorisvandenbossche",
            "key": "jorisvandenbossche",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Joris Van den Bossche",
            "active": true,
            "timeZone": "Europe/Brussels"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
            "name": "Closed",
            "id": "6",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
            "name": "uwe",
            "key": "xhochy",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
            },
            "displayName": "Uwe Korn",
            "active": true,
            "timeZone": "Europe/Berlin"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
            "name": "uwe",
            "key": "xhochy",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
            },
            "displayName": "Uwe Korn",
            "active": true,
            "timeZone": "Europe/Berlin"
        },
        "aggregateprogress": {
            "progress": 5400,
            "total": 5400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 5400,
            "total": 5400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1796/votes",
            "votes": 2,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 11,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13117616/worklog/147486",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "xhochy opened a new pull request #2623: WIP: ARROW-1796: [Python/Parquet] RowGroup filtering on file level\nURL: https://github.com/apache/arrow/pull/2623\n \n \n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-25T09:39:28.598+0000",
                    "updated": "2018-09-25T09:39:28.598+0000",
                    "started": "2018-09-25T09:39:28.597+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "147486",
                    "issueId": "13117616"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13117616/worklog/147487",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "xhochy commented on issue #2623: WIP: ARROW-1796: [Python/Parquet] RowGroup filtering on file level\nURL: https://github.com/apache/arrow/pull/2623#issuecomment-424274946\n \n \n   Just as a heads-up. This is missing some more granular tests and the exact filtering converts to Pandas and back again. Changing that to work on pure Arrow tables will be a lot more work. \r\n   \r\n   I will separate out some things into smaller pull requests.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-25T09:40:30.463+0000",
                    "updated": "2018-09-25T09:40:30.463+0000",
                    "started": "2018-09-25T09:40:30.462+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "147487",
                    "issueId": "13117616"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13117616/worklog/147488",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "xhochy commented on issue #2623: WIP: ARROW-1796: [Python/Parquet] RowGroup filtering on file level\nURL: https://github.com/apache/arrow/pull/2623#issuecomment-424275069\n \n \n   cc @rgruener I think you were one of the interested people in this topic.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-25T09:40:54.527+0000",
                    "updated": "2018-09-25T09:40:54.527+0000",
                    "started": "2018-09-25T09:40:54.527+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "147488",
                    "issueId": "13117616"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13117616/worklog/148227",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rgruener commented on a change in pull request #2623: WIP: ARROW-1796: [Python/Parquet] RowGroup filtering on file level\nURL: https://github.com/apache/arrow/pull/2623#discussion_r220662933\n \n \n\n ##########\n File path: python/pyarrow/parquet.py\n ##########\n @@ -825,8 +1175,11 @@ def __init__(self, path_or_paths, filesystem=None, schema=None,\n         if validate_schema:\n             self.validate_schemas()\n \n-        if filters:\n+        if filters is not None:\n \n Review comment:\n   `filters` can now be either List[Tuple] or List[List[Tuple]] and can either filter on partitions or row groups depending on if the dataset is partitioned. Either way the current state should be mentioned in the docstring (unless that will be worked out before this PR is merged)\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-26T17:55:37.423+0000",
                    "updated": "2018-09-26T17:55:37.423+0000",
                    "started": "2018-09-26T17:55:37.422+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "148227",
                    "issueId": "13117616"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13117616/worklog/148228",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rgruener commented on a change in pull request #2623: WIP: ARROW-1796: [Python/Parquet] RowGroup filtering on file level\nURL: https://github.com/apache/arrow/pull/2623#discussion_r220656014\n \n \n\n ##########\n File path: python/pyarrow/parquet.py\n ##########\n @@ -36,6 +38,253 @@\n                                 _get_fs_from_path)\n from pyarrow.util import _is_path_like, _stringify_path, _deprecate_nthreads\n \n+\n+EPOCH_ORDINAL = datetime.date(1970, 1, 1).toordinal()\n+\n+\n+def _timelike_to_arrow_encoding(value, pa_type):\n+    # Date32 columns are encoded as days since 1970\n+    if pa.types.is_date32(pa_type):\n+        if isinstance(value, datetime.date):\n+            return value.toordinal() - EPOCH_ORDINAL\n+    elif pa.types.is_temporal(pa_type):\n+        unit = pa_type.unit\n+        if unit == \"ns\":\n+            conversion_factor = 1\n+        elif unit == \"us\":\n+            conversion_factor = 10 ** 3\n+        elif unit == \"ms\":\n+            conversion_factor = 10 ** 6\n+        elif unit == \"s\":\n+            conversion_factor = 10 ** 9\n+        else:\n+            raise TypeError(\n+                \"Unkwnown timestamp resolution encoudtered `{}`\".format(unit)\n+            )\n+        val = np.datetime64(value, 'ns').to_datetime64()\n+        val = int(val.astype(\"int64\") / conversion_factor)\n+        return val\n+    else:\n+        return value\n+\n+\n+def _normalize_value(value, pa_type):\n+    if pa.types.is_string(pa_type):\n+        if isinstance(value, six.binary_type):\n+            return value.decode(\"utf-8\")\n+        elif isinstance(value, six.text_type):\n+            return value\n+    elif pa.types.is_binary(pa_type):\n+        if isinstance(value, six.binary_type):\n+            return value\n+        elif isinstance(value, six.text_type):\n+            return six.text_type(value).encode(\"utf-8\")\n+    elif (\n+        pa.types.is_integer(pa_type)\n+        and pa.types.is_integer_object(value)\n+        or pa.types.is_floating(pa_type)\n+        and pa.types.is_float_object(value)\n+        or pa.types.is_boolean(pa_type)\n+        and pa.types.is_boolean_object(value)\n+        or pa.types.is_timestamp(pa_type)\n+        and not isinstance(value, (six.binary_type, six.text_type))\n+        and (\n+            isinstance(value, (datetime.datetime, np.datetime64))\n+        )\n+    ):\n+        return value\n+    elif pa.types.is_date(pa_type):\n+        if isinstance(value, six.string_types):\n+            return datetime.datetime.strptime(value, \"%Y-%m-%d\").date()\n+        elif isinstance(value, six.binary_type):\n+            value = value.decode(\"utf-8\")\n+            return datetime.datetime.strptime(value, \"%Y-%m-%d\").date()\n+        elif isinstance(value, datetime.date) and not isinstance(\n+            value, datetime.datetime\n+        ):\n+            return value\n+    raise TypeError(\n+        \"Unexpected type for predicate. Expected `{} ({})` but got `{} ({})`\".format(\n+            pa_type, pa_type.to_pandas_dtype(), value, type(value)\n+        )\n+    )\n+\n+\n+def _highest_significant_position(num):\n+    \"\"\"\n+    >>> _highest_significant_position(1.0)\n+    1\n+    >>> _highest_significant_position(9.0)\n+    1\n+    >>> _highest_significant_position(39.0)\n+    2\n+    >>> _highest_significant_position(0.1)\n+    -1\n+    >>> _highest_significant_position(0.9)\n+    -1\n+    >>> _highest_significant_position(0.000123)\n+    -4\n+    >>> _highest_significant_position(1234567.0)\n+    7\n+    >>> _highest_significant_position(-0.1)\n+    -1\n+    >>> _highest_significant_position(-100.0)\n+    3\n+    \"\"\"\n+    abs_num = np.absolute(num)\n+    log_of_abs = np.log10(abs_num)\n+    position = int(np.floor(log_of_abs))\n+\n+    # is position left of decimal point?\n+    if abs_num >= 1.0:\n+        position += 1\n+\n+    return position\n+\n+\n+def _epsilon(num):\n+    \"\"\"\n+    >>> _epsilon(123456)\n+    1\n+    >>> _epsilon(0.123456)\n+    1e-06\n+    >>> _epsilon(0.123)\n+    1e-06\n+    >>> _epsilon(0)\n+    0\n+    >>> _epsilon(-0.123456)\n+    1e-06\n+    >>> _epsilon(-123456)\n+    1\n+    \"\"\"\n+    SIGNIFICANT_DIGITS = 6\n+\n+    if num == 0:\n+        return 0\n+\n+    epsilon_position = _highest_significant_position(num) - SIGNIFICANT_DIGITS\n+\n+    # is position right of decimal point?\n+    if epsilon_position < 0:\n+        epsilon_position += 1\n+\n+    return 10 ** epsilon_position\n+\n+\n+def _predicate_accepts(predicate, row_meta, arrow_schema, parquet_reader):\n+    \"\"\"\n+    Checks if a predicate evaluates on a column.\n+\n+    This method first casts the value of the predicate to the type used for this column\n+    in the statistics and then applies the relevant operator. The operation applied here\n+    is done in a fashion to check if the predicate would evaluate to True for any possible\n+    row in the RowGroup. Thus e.g. for the `==` predicate, we check if the predicate value\n+    is in the (min, max) range of the RowGroup.\n+    \"\"\"\n+    col, op, val = predicate\n+    col_idx = parquet_reader.column_name_idx(col)\n+    pa_type = arrow_schema[col_idx].type\n+    parquet_statistics = row_meta.column(col_idx).statistics\n+    min_value = parquet_statistics.min\n+    max_value = parquet_statistics.max\n+    # Transform the predicate value to the respective type used in the statistics.\n+\n+    if pa.types.is_string(pa_type):\n+        # String types are always UTF-8 encoded binary strings in parquet\n+        min_value = min_value.decode(\"utf-8\")\n+        max_value = max_value.decode(\"utf-8\")\n+\n+    # The statistics for floats only contain the 6 most significant digits.\n+    # So a suitable epsilon has to be considered below min and above max.\n+    if isinstance(val, float):\n+        min_value -= _epsilon(min_value)\n+        max_value += _epsilon(max_value)\n+    if op == \"==\":\n+        return (min_value <= val) and (val <= max_value)\n+    elif op == \"!=\":\n+        return not ((min_value >= val) and (val >= max_value))\n+    elif op == \"<=\":\n+        return min_value <= val\n+    elif op == \">=\":\n+        return max_value >= val\n+    elif op == \"<\":\n+        return min_value < val\n+    elif op == \">\":\n+        return max_value > val\n+    elif op == \"in\":\n \n Review comment:\n   what about `\"not in\"`\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-26T17:55:37.425+0000",
                    "updated": "2018-09-26T17:55:37.425+0000",
                    "started": "2018-09-26T17:55:37.424+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "148228",
                    "issueId": "13117616"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13117616/worklog/148229",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rgruener commented on a change in pull request #2623: WIP: ARROW-1796: [Python/Parquet] RowGroup filtering on file level\nURL: https://github.com/apache/arrow/pull/2623#discussion_r220653441\n \n \n\n ##########\n File path: python/pyarrow/parquet.py\n ##########\n @@ -36,6 +38,253 @@\n                                 _get_fs_from_path)\n from pyarrow.util import _is_path_like, _stringify_path, _deprecate_nthreads\n \n+\n+EPOCH_ORDINAL = datetime.date(1970, 1, 1).toordinal()\n+\n+\n+def _timelike_to_arrow_encoding(value, pa_type):\n+    # Date32 columns are encoded as days since 1970\n+    if pa.types.is_date32(pa_type):\n+        if isinstance(value, datetime.date):\n+            return value.toordinal() - EPOCH_ORDINAL\n+    elif pa.types.is_temporal(pa_type):\n+        unit = pa_type.unit\n+        if unit == \"ns\":\n+            conversion_factor = 1\n+        elif unit == \"us\":\n+            conversion_factor = 10 ** 3\n+        elif unit == \"ms\":\n+            conversion_factor = 10 ** 6\n+        elif unit == \"s\":\n+            conversion_factor = 10 ** 9\n+        else:\n+            raise TypeError(\n+                \"Unkwnown timestamp resolution encoudtered `{}`\".format(unit)\n+            )\n+        val = np.datetime64(value, 'ns').to_datetime64()\n+        val = int(val.astype(\"int64\") / conversion_factor)\n+        return val\n+    else:\n+        return value\n+\n+\n+def _normalize_value(value, pa_type):\n+    if pa.types.is_string(pa_type):\n+        if isinstance(value, six.binary_type):\n+            return value.decode(\"utf-8\")\n+        elif isinstance(value, six.text_type):\n+            return value\n+    elif pa.types.is_binary(pa_type):\n+        if isinstance(value, six.binary_type):\n+            return value\n+        elif isinstance(value, six.text_type):\n+            return six.text_type(value).encode(\"utf-8\")\n+    elif (\n+        pa.types.is_integer(pa_type)\n+        and pa.types.is_integer_object(value)\n+        or pa.types.is_floating(pa_type)\n+        and pa.types.is_float_object(value)\n+        or pa.types.is_boolean(pa_type)\n+        and pa.types.is_boolean_object(value)\n+        or pa.types.is_timestamp(pa_type)\n+        and not isinstance(value, (six.binary_type, six.text_type))\n+        and (\n+            isinstance(value, (datetime.datetime, np.datetime64))\n+        )\n+    ):\n+        return value\n+    elif pa.types.is_date(pa_type):\n+        if isinstance(value, six.string_types):\n+            return datetime.datetime.strptime(value, \"%Y-%m-%d\").date()\n+        elif isinstance(value, six.binary_type):\n+            value = value.decode(\"utf-8\")\n+            return datetime.datetime.strptime(value, \"%Y-%m-%d\").date()\n+        elif isinstance(value, datetime.date) and not isinstance(\n+            value, datetime.datetime\n+        ):\n+            return value\n+    raise TypeError(\n+        \"Unexpected type for predicate. Expected `{} ({})` but got `{} ({})`\".format(\n+            pa_type, pa_type.to_pandas_dtype(), value, type(value)\n+        )\n+    )\n+\n+\n+def _highest_significant_position(num):\n+    \"\"\"\n+    >>> _highest_significant_position(1.0)\n+    1\n+    >>> _highest_significant_position(9.0)\n+    1\n+    >>> _highest_significant_position(39.0)\n+    2\n+    >>> _highest_significant_position(0.1)\n+    -1\n+    >>> _highest_significant_position(0.9)\n+    -1\n+    >>> _highest_significant_position(0.000123)\n+    -4\n+    >>> _highest_significant_position(1234567.0)\n+    7\n+    >>> _highest_significant_position(-0.1)\n+    -1\n+    >>> _highest_significant_position(-100.0)\n+    3\n+    \"\"\"\n+    abs_num = np.absolute(num)\n+    log_of_abs = np.log10(abs_num)\n+    position = int(np.floor(log_of_abs))\n+\n+    # is position left of decimal point?\n+    if abs_num >= 1.0:\n+        position += 1\n+\n+    return position\n+\n+\n+def _epsilon(num):\n+    \"\"\"\n+    >>> _epsilon(123456)\n+    1\n+    >>> _epsilon(0.123456)\n+    1e-06\n+    >>> _epsilon(0.123)\n+    1e-06\n+    >>> _epsilon(0)\n+    0\n+    >>> _epsilon(-0.123456)\n+    1e-06\n+    >>> _epsilon(-123456)\n+    1\n+    \"\"\"\n+    SIGNIFICANT_DIGITS = 6\n+\n+    if num == 0:\n+        return 0\n+\n+    epsilon_position = _highest_significant_position(num) - SIGNIFICANT_DIGITS\n+\n+    # is position right of decimal point?\n+    if epsilon_position < 0:\n+        epsilon_position += 1\n+\n+    return 10 ** epsilon_position\n+\n+\n+def _predicate_accepts(predicate, row_meta, arrow_schema, parquet_reader):\n+    \"\"\"\n+    Checks if a predicate evaluates on a column.\n+\n+    This method first casts the value of the predicate to the type used for this column\n+    in the statistics and then applies the relevant operator. The operation applied here\n+    is done in a fashion to check if the predicate would evaluate to True for any possible\n+    row in the RowGroup. Thus e.g. for the `==` predicate, we check if the predicate value\n+    is in the (min, max) range of the RowGroup.\n+    \"\"\"\n+    col, op, val = predicate\n+    col_idx = parquet_reader.column_name_idx(col)\n+    pa_type = arrow_schema[col_idx].type\n+    parquet_statistics = row_meta.column(col_idx).statistics\n+    min_value = parquet_statistics.min\n+    max_value = parquet_statistics.max\n+    # Transform the predicate value to the respective type used in the statistics.\n+\n+    if pa.types.is_string(pa_type):\n+        # String types are always UTF-8 encoded binary strings in parquet\n+        min_value = min_value.decode(\"utf-8\")\n+        max_value = max_value.decode(\"utf-8\")\n+\n+    # The statistics for floats only contain the 6 most significant digits.\n+    # So a suitable epsilon has to be considered below min and above max.\n+    if isinstance(val, float):\n+        min_value -= _epsilon(min_value)\n+        max_value += _epsilon(max_value)\n+    if op == \"==\":\n+        return (min_value <= val) and (val <= max_value)\n+    elif op == \"!=\":\n+        return not ((min_value >= val) and (val >= max_value))\n+    elif op == \"<=\":\n+        return min_value <= val\n+    elif op == \">=\":\n+        return max_value >= val\n+    elif op == \"<\":\n+        return min_value < val\n+    elif op == \">\":\n+        return max_value > val\n+    elif op == \"in\":\n+        return not ((max_value < val[0]) or (min_value > val[1]))\n+    else:\n+        raise NotImplementedError(\"op not supported\")\n+\n+\n+# TODO: replace with arrow-builtins\n+def filter_df_from_predicates(df, predicates):\n+    indexer = np.broadcast_to(False, len(df))\n+    for conjunction in predicates:\n+        inner_indexer = np.broadcast_to(True, len(df))\n+        for column, op, value in conjunction:\n+            # datetime is a subclass of date which is why we need this double check\n+            if isinstance(value, datetime.date):\n+                value = np.datetime64(value, 'ns')\n+            elif isinstance(value, list) and isinstance(value[0], datetime.date):\n+                value = [np.datetime64(value, 'ns') for val in value]\n+            ser = df[column].values\n+            if op == \"==\":\n+                inner_indexer = (ser == value) & inner_indexer\n+            elif op == \"!=\":\n+                inner_indexer = (ser != value) & inner_indexer\n+            elif op == \"<=\":\n+                inner_indexer = (ser <= value) & inner_indexer\n+            elif op == \">=\":\n+                inner_indexer = (ser >= value) & inner_indexer\n+            elif op == \"<\":\n+                inner_indexer = (ser < value) & inner_indexer\n+            elif op == \">\":\n+                inner_indexer = (ser > value) & inner_indexer\n+            elif op == \"in\":\n+                inner_indexer = (np.isin(ser, value)) & inner_indexer\n+            else:\n+                raise NotImplementedError(\"op not supported\")\n+        indexer = inner_indexer | indexer\n+    return df[indexer]\n+\n+\n+def _check_contains_null(val):\n+    if isinstance(val, six.binary_type):\n+        for byte in val:\n+            if isinstance(byte, six.binary_type):\n+                compare_to = chr(0)\n+            else:\n+                compare_to = 0\n+            if byte == compare_to:\n+                return True\n+    return False\n+\n+\n+def check_filters(filters):\n+    \"\"\"\n+    Check if filters are well-formed.\n+    \"\"\"\n+    if filters is not None:\n+        if len(filters) == 0 or any(len(f) == 0 for f in filters):\n+            raise ValueError(\"Malformed filters\")\n+        if isinstance(filters[0][0], six.string_types):\n+            # We have encountered the situation where we have one nesting level too few:\n+            # We have [(,,), ..] instead of [[(,,), ..]]\n+            filters = [filters]\n \n Review comment:\n   This automatic fix isn't my favorite though I see that it is necessary to not have a braking change in the api for  ParquetDataset (with the filters argument). Perhaps though it would be better to throw an error here and have this fix in that specific case instead of allowing a wrong nesting level in all cases.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-26T17:55:37.429+0000",
                    "updated": "2018-09-26T17:55:37.429+0000",
                    "started": "2018-09-26T17:55:37.428+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "148229",
                    "issueId": "13117616"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13117616/worklog/148230",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rgruener commented on a change in pull request #2623: WIP: ARROW-1796: [Python/Parquet] RowGroup filtering on file level\nURL: https://github.com/apache/arrow/pull/2623#discussion_r220655385\n \n \n\n ##########\n File path: python/pyarrow/parquet.py\n ##########\n @@ -36,6 +38,253 @@\n                                 _get_fs_from_path)\n from pyarrow.util import _is_path_like, _stringify_path, _deprecate_nthreads\n \n+\n+EPOCH_ORDINAL = datetime.date(1970, 1, 1).toordinal()\n+\n+\n+def _timelike_to_arrow_encoding(value, pa_type):\n+    # Date32 columns are encoded as days since 1970\n+    if pa.types.is_date32(pa_type):\n+        if isinstance(value, datetime.date):\n+            return value.toordinal() - EPOCH_ORDINAL\n+    elif pa.types.is_temporal(pa_type):\n+        unit = pa_type.unit\n+        if unit == \"ns\":\n+            conversion_factor = 1\n+        elif unit == \"us\":\n+            conversion_factor = 10 ** 3\n+        elif unit == \"ms\":\n+            conversion_factor = 10 ** 6\n+        elif unit == \"s\":\n+            conversion_factor = 10 ** 9\n+        else:\n+            raise TypeError(\n+                \"Unkwnown timestamp resolution encoudtered `{}`\".format(unit)\n+            )\n+        val = np.datetime64(value, 'ns').to_datetime64()\n+        val = int(val.astype(\"int64\") / conversion_factor)\n+        return val\n+    else:\n+        return value\n+\n+\n+def _normalize_value(value, pa_type):\n+    if pa.types.is_string(pa_type):\n+        if isinstance(value, six.binary_type):\n+            return value.decode(\"utf-8\")\n+        elif isinstance(value, six.text_type):\n+            return value\n+    elif pa.types.is_binary(pa_type):\n+        if isinstance(value, six.binary_type):\n+            return value\n+        elif isinstance(value, six.text_type):\n+            return six.text_type(value).encode(\"utf-8\")\n+    elif (\n+        pa.types.is_integer(pa_type)\n+        and pa.types.is_integer_object(value)\n+        or pa.types.is_floating(pa_type)\n+        and pa.types.is_float_object(value)\n+        or pa.types.is_boolean(pa_type)\n+        and pa.types.is_boolean_object(value)\n+        or pa.types.is_timestamp(pa_type)\n+        and not isinstance(value, (six.binary_type, six.text_type))\n+        and (\n+            isinstance(value, (datetime.datetime, np.datetime64))\n+        )\n+    ):\n+        return value\n+    elif pa.types.is_date(pa_type):\n+        if isinstance(value, six.string_types):\n+            return datetime.datetime.strptime(value, \"%Y-%m-%d\").date()\n+        elif isinstance(value, six.binary_type):\n+            value = value.decode(\"utf-8\")\n+            return datetime.datetime.strptime(value, \"%Y-%m-%d\").date()\n+        elif isinstance(value, datetime.date) and not isinstance(\n+            value, datetime.datetime\n+        ):\n+            return value\n+    raise TypeError(\n+        \"Unexpected type for predicate. Expected `{} ({})` but got `{} ({})`\".format(\n+            pa_type, pa_type.to_pandas_dtype(), value, type(value)\n+        )\n+    )\n+\n+\n+def _highest_significant_position(num):\n+    \"\"\"\n+    >>> _highest_significant_position(1.0)\n+    1\n+    >>> _highest_significant_position(9.0)\n+    1\n+    >>> _highest_significant_position(39.0)\n+    2\n+    >>> _highest_significant_position(0.1)\n+    -1\n+    >>> _highest_significant_position(0.9)\n+    -1\n+    >>> _highest_significant_position(0.000123)\n+    -4\n+    >>> _highest_significant_position(1234567.0)\n+    7\n+    >>> _highest_significant_position(-0.1)\n+    -1\n+    >>> _highest_significant_position(-100.0)\n+    3\n+    \"\"\"\n+    abs_num = np.absolute(num)\n+    log_of_abs = np.log10(abs_num)\n+    position = int(np.floor(log_of_abs))\n+\n+    # is position left of decimal point?\n+    if abs_num >= 1.0:\n+        position += 1\n+\n+    return position\n+\n+\n+def _epsilon(num):\n+    \"\"\"\n+    >>> _epsilon(123456)\n+    1\n+    >>> _epsilon(0.123456)\n+    1e-06\n+    >>> _epsilon(0.123)\n+    1e-06\n+    >>> _epsilon(0)\n+    0\n+    >>> _epsilon(-0.123456)\n+    1e-06\n+    >>> _epsilon(-123456)\n+    1\n+    \"\"\"\n+    SIGNIFICANT_DIGITS = 6\n+\n+    if num == 0:\n+        return 0\n+\n+    epsilon_position = _highest_significant_position(num) - SIGNIFICANT_DIGITS\n+\n+    # is position right of decimal point?\n+    if epsilon_position < 0:\n+        epsilon_position += 1\n+\n+    return 10 ** epsilon_position\n+\n+\n+def _predicate_accepts(predicate, row_meta, arrow_schema, parquet_reader):\n+    \"\"\"\n+    Checks if a predicate evaluates on a column.\n+\n+    This method first casts the value of the predicate to the type used for this column\n+    in the statistics and then applies the relevant operator. The operation applied here\n+    is done in a fashion to check if the predicate would evaluate to True for any possible\n+    row in the RowGroup. Thus e.g. for the `==` predicate, we check if the predicate value\n+    is in the (min, max) range of the RowGroup.\n+    \"\"\"\n+    col, op, val = predicate\n+    col_idx = parquet_reader.column_name_idx(col)\n+    pa_type = arrow_schema[col_idx].type\n+    parquet_statistics = row_meta.column(col_idx).statistics\n+    min_value = parquet_statistics.min\n+    max_value = parquet_statistics.max\n+    # Transform the predicate value to the respective type used in the statistics.\n+\n+    if pa.types.is_string(pa_type):\n+        # String types are always UTF-8 encoded binary strings in parquet\n+        min_value = min_value.decode(\"utf-8\")\n+        max_value = max_value.decode(\"utf-8\")\n+\n+    # The statistics for floats only contain the 6 most significant digits.\n+    # So a suitable epsilon has to be considered below min and above max.\n+    if isinstance(val, float):\n+        min_value -= _epsilon(min_value)\n+        max_value += _epsilon(max_value)\n+    if op == \"==\":\n+        return (min_value <= val) and (val <= max_value)\n+    elif op == \"!=\":\n+        return not ((min_value >= val) and (val >= max_value))\n+    elif op == \"<=\":\n+        return min_value <= val\n+    elif op == \">=\":\n+        return max_value >= val\n+    elif op == \"<\":\n+        return min_value < val\n+    elif op == \">\":\n+        return max_value > val\n+    elif op == \"in\":\n+        return not ((max_value < val[0]) or (min_value > val[1]))\n+    else:\n+        raise NotImplementedError(\"op not supported\")\n+\n+\n+# TODO: replace with arrow-builtins\n+def filter_df_from_predicates(df, predicates):\n+    indexer = np.broadcast_to(False, len(df))\n+    for conjunction in predicates:\n+        inner_indexer = np.broadcast_to(True, len(df))\n+        for column, op, value in conjunction:\n+            # datetime is a subclass of date which is why we need this double check\n+            if isinstance(value, datetime.date):\n+                value = np.datetime64(value, 'ns')\n+            elif isinstance(value, list) and isinstance(value[0], datetime.date):\n+                value = [np.datetime64(value, 'ns') for val in value]\n+            ser = df[column].values\n+            if op == \"==\":\n+                inner_indexer = (ser == value) & inner_indexer\n+            elif op == \"!=\":\n+                inner_indexer = (ser != value) & inner_indexer\n+            elif op == \"<=\":\n+                inner_indexer = (ser <= value) & inner_indexer\n+            elif op == \">=\":\n+                inner_indexer = (ser >= value) & inner_indexer\n+            elif op == \"<\":\n+                inner_indexer = (ser < value) & inner_indexer\n+            elif op == \">\":\n+                inner_indexer = (ser > value) & inner_indexer\n+            elif op == \"in\":\n \n Review comment:\n   What about the operator `\"not in\"`?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-26T17:55:37.433+0000",
                    "updated": "2018-09-26T17:55:37.433+0000",
                    "started": "2018-09-26T17:55:37.432+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "148230",
                    "issueId": "13117616"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13117616/worklog/203202",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on issue #2623: WIP: ARROW-1796: [Python/Parquet] RowGroup filtering on file level\nURL: https://github.com/apache/arrow/pull/2623#issuecomment-466748669\n \n \n   @xhochy is this still WIP?  Anything I can help with?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-24T08:37:34.250+0000",
                    "updated": "2019-02-24T08:37:34.250+0000",
                    "started": "2019-02-24T08:37:34.250+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "203202",
                    "issueId": "13117616"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13117616/worklog/206890",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "xhochy commented on issue #2623: WIP: ARROW-1796: [Python/Parquet] RowGroup filtering on file level\nURL: https://github.com/apache/arrow/pull/2623#issuecomment-469015603\n \n \n   @emkornfield I'm not actively working on this at the moment. Feel free to pick this up or just to integrate parts of the PR into arrow.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-03T11:54:07.245+0000",
                    "updated": "2019-03-03T11:54:07.245+0000",
                    "started": "2019-03-03T11:54:07.244+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "206890",
                    "issueId": "13117616"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13117616/worklog/260638",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2623: WIP: ARROW-1796: [Python/Parquet] RowGroup filtering on file level\nURL: https://github.com/apache/arrow/pull/2623#issuecomment-502219710\n \n \n   Closing this for now. I'll refer to this PR in the course of implementing Scanner logic in the Datasets project\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-14T18:38:51.968+0000",
                    "updated": "2019-06-14T18:38:51.968+0000",
                    "started": "2019-06-14T18:38:51.967+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "260638",
                    "issueId": "13117616"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13117616/worklog/260639",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #2623: WIP: ARROW-1796: [Python/Parquet] RowGroup filtering on file level\nURL: https://github.com/apache/arrow/pull/2623\n \n \n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-14T18:38:52.273+0000",
                    "updated": "2019-06-14T18:38:52.273+0000",
                    "started": "2019-06-14T18:38:52.272+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "260639",
                    "issueId": "13117616"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 5400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@456212fe[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1d5cae40[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@54d9dac7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@2c8f50b2[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@115e421a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@5e872ba8[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4412cd5d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@124e1fad[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7163d16c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@16de7e83[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@44f43120[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@26a5ed64[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 5400,
        "customfield_12312520": null,
        "customfield_12312521": "Fri Apr 10 15:53:55 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-06-11T15:44:24.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1796/watchers",
            "watchCount": 7,
            "isWatching": false
        },
        "created": "2017-11-10T16:28:52.000+0000",
        "updated": "2020-06-11T15:44:24.000+0000",
        "timeoriginalestimate": null,
        "description": "We can build upon the API defined in {{fastparquet}} for defining RowGroup filters: https://github.com/dask/fastparquet/blob/master/fastparquet/api.py#L296-L300 and translate them into the C++ enums we will define in https://issues.apache.org/jira/browse/PARQUET-1158 . This should enable us to provide the user with a simple predicate pushdown API that we can extend in the background from RowGroup to Page level later on.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "1.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 5400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Python] RowGroup filtering on file level",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13117616/comment/16527852",
                    "id": "16527852",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "If Gandiva becomes a part of Apache Arrow, then we should look at compiling filters and pushing them down into parquet-cpp",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-06-29T15:51:31.887+0000",
                    "updated": "2018-06-29T15:51:31.887+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13117616/comment/16568181",
                    "id": "16568181",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "body": "I would start by contributing a pure Python implementation that already implements all necessary filters and then we can move the predicate evaluation either to Gandiva or pre-compiled C++. The pure Python pass is much simpler as a first step and provides already a working interface at acceptable performance.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "created": "2018-08-03T13:06:36.226+0000",
                    "updated": "2018-08-03T13:06:36.226+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13117616/comment/16568182",
                    "id": "16568182",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "body": "As an interface I would add a new kwarg to {{read_table}} called filters that accepts a list of list of tuples. This will be\u00a0in\u00a0disjunctive normal form representation. The innermost triples consist of {{(column_name, operation, value(s))}}, e.g. {{('name', '==', 'John')}}. These innermost triples are combined into a list and all predicates in this list and combined with {{AND}}. The outer list is then an {{OR}} combination of the {{AND}}-combined triples.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "created": "2018-08-03T13:11:05.077+0000",
                    "updated": "2018-08-03T13:11:05.077+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13117616/comment/16604756",
                    "id": "16604756",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=rgruener",
                        "name": "rgruener",
                        "key": "rgruener",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Robbie Gruener",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "That sounds good to me. I would like to point out it would be nice if it would be possible to apply it at the ParquetDataset level as well extending the filter parameter that already exists to handle both hive partitions and row group level filtering [https://github.com/apache/arrow/blob/master/python/pyarrow/parquet.py#L777]\u00a0It could do this by using the summary _metadata file or by reading all footers.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=rgruener",
                        "name": "rgruener",
                        "key": "rgruener",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Robbie Gruener",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-09-05T18:20:47.583+0000",
                    "updated": "2018-09-05T18:20:47.583+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13117616/comment/16616315",
                    "id": "16616315",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Since we're on a critical path to get 0.11 out in the next week or two, I'm moving this to 0.12",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-09-15T14:18:33.015+0000",
                    "updated": "2018-09-15T14:18:33.015+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13117616/comment/17030696",
                    "id": "17030696",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "body": "I think we can close this issue, since this is now possible with the dataset API? \r\n\r\n(we can have a separate one about actually using this in {{pyarrow.parquet.read_table}} filter argument.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "created": "2020-02-05T14:27:04.809+0000",
                    "updated": "2020-02-05T14:27:04.809+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13117616/comment/17080594",
                    "id": "17080594",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Let's close as soon as it's documented",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2020-04-10T15:53:55.497+0000",
                    "updated": "2020-04-10T15:53:55.497+0000"
                }
            ],
            "maxResults": 7,
            "total": 7,
            "startAt": 0
        },
        "customfield_12311820": "0|i3mnhb:",
        "customfield_12314139": null
    }
}