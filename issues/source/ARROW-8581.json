{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13300736",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13300736",
    "key": "ARROW-8581",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12345977",
                "id": "12345977",
                "description": "",
                "name": "2.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-10-19"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12346687",
                "id": "12346687",
                "description": "",
                "name": "0.17.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-04-20"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": null,
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12334712",
                "id": "12334712",
                "name": "C#"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=mr_smidge",
            "name": "mr_smidge",
            "key": "mr_smidge",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=mr_smidge&avatarId=42832",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=mr_smidge&avatarId=42832",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=mr_smidge&avatarId=42832",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=mr_smidge&avatarId=42832"
            },
            "displayName": "Adam Szmigin",
            "active": true,
            "timeZone": "Europe/London"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=mr_smidge",
            "name": "mr_smidge",
            "key": "mr_smidge",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=mr_smidge&avatarId=42832",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=mr_smidge&avatarId=42832",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=mr_smidge&avatarId=42832",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=mr_smidge&avatarId=42832"
            },
            "displayName": "Adam Szmigin",
            "active": true,
            "timeZone": "Europe/London"
        },
        "aggregateprogress": {
            "progress": 18000,
            "total": 18000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 18000,
            "total": 18000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-8581/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 30,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13300736/worklog/455315",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mr-smidge opened a new pull request #7654:\nURL: https://github.com/apache/arrow/pull/7654\n\n\n   This PR introduces a _breaking change_ to the public API for `Date32Array` and `Date64Array` by changing the accepted and returned data type from `Sysetm.DateTimeOffset` to `System.DateTime`.\r\n   \r\n   The rationale for making this change is explained in detail on the [JIRA ticket](https://issues.apache.org/jira/browse/ARROW-8581), but briefly: making this change avoids a class of bugs that manifest based on the user's timezone, and where it is very easy to unknowingly fall into a trap.\r\n   \r\n   In addition, the new unit tests bring `Date32Array` and `Date64Array` up to 100% test coverage.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-07T09:39:15.547+0000",
                    "updated": "2020-07-07T09:39:15.547+0000",
                    "started": "2020-07-07T09:39:15.547+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "455315",
                    "issueId": "13300736"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13300736/worklog/455322",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #7654:\nURL: https://github.com/apache/arrow/pull/7654#issuecomment-654734988\n\n\n   https://issues.apache.org/jira/browse/ARROW-8581\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-07T09:46:49.937+0000",
                    "updated": "2020-07-07T09:46:49.937+0000",
                    "started": "2020-07-07T09:46:49.937+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "455322",
                    "issueId": "13300736"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13300736/worklog/457307",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "eerhardt commented on pull request #7654:\nURL: https://github.com/apache/arrow/pull/7654#issuecomment-656832270\n\n\n   Can we just introduce new `Append(DateTime value)` and `GetDateAsDateTime(int index)` APIs instead of making a breaking change?\r\n   \r\n   In general, DateTimeOffset is the preferred type to use when talking about dates and times. The reasoning is because exactly what you point out in the JIRA issue - DateTime.Kind is very confusing and can cause a lot of problems. So we generally recommend users to use DateTimeOffset unless they have a strong reason to use DateTime.\r\n   \r\n   So I'd suggest to keep the existing code (the builder is based on DateTimeOffset), but to also add new `Append(DateTime value)` overloads to solve the issue you logged.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-10T18:56:30.234+0000",
                    "updated": "2020-07-10T18:56:30.234+0000",
                    "started": "2020-07-10T18:56:30.234+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "457307",
                    "issueId": "13300736"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13300736/worklog/457927",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mr-smidge commented on pull request #7654:\nURL: https://github.com/apache/arrow/pull/7654#issuecomment-657438635\n\n\n   > In general, DateTimeOffset is the preferred type to use when talking about dates and times. The reasoning is because exactly what you point out in the JIRA issue - DateTime.Kind is very confusing and can cause a lot of problems.\r\n   \r\n   I suspect this is a matter of codebase/team preference.  By contract, my organisation previously recommended `DateTime` for dates.  I say \"previously\" because now we would use NodaTime's `LocalDate` instead :-).\r\n   \r\n   Nonetheless, in the absence of a proper type just for dates, I can see arguments for either, and I'll modify the API accordingly to accept both in a non-breaking manner.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-13T09:25:25.148+0000",
                    "updated": "2020-07-13T09:25:25.148+0000",
                    "started": "2020-07-13T09:25:25.147+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "457927",
                    "issueId": "13300736"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13300736/worklog/458060",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mr-smidge commented on a change in pull request #7654:\nURL: https://github.com/apache/arrow/pull/7654#discussion_r453670993\n\n\n\n##########\nFile path: csharp/src/Apache.Arrow/Arrays/Date32Array.cs\n##########\n@@ -55,16 +70,39 @@ public Date32Array(ArrayData data)\n \n         public override void Accept(IArrowArrayVisitor visitor) => Accept(this, visitor);\n \n-        public DateTimeOffset? GetDate(int index)\n+        [Obsolete(\"Use `GetDateTimeOffset()` instead\")]\n+        public DateTimeOffset? GetDate(int index) => GetDateTimeOffset(index);\n+\n+        /// <summary>\n+        /// Get the date at the specified index in the form of a <see cref=\"DateTime\"/> object.\n+        /// </summary>\n+        /// <remarks>\n+        /// The <see cref=\"DateTime.Kind\"/> property of the returned object is set to\n+        /// <see cref=\"DateTimeKind.Unspecified\"/>.\n+        /// </remarks>\n+        /// <param name=\"index\">Index at which to get the date.</param>\n+        /// <returns>Returns a <see cref=\"DateTime\"/> object, or <c>null</c> if there is no object at that index.\n+        /// </returns>\n+        public DateTime? GetDateTime(int index)\n\nReview comment:\n       In the absence of being able to overload return types, this class (and `Date64Array`) follows the naming convention of [System.Convert](https://docs.microsoft.com/en-us/dotnet/api/system.convert?view=netcore-3.1), and mentions the return type in the method name.\r\n   \r\n   As such, the original `GetDate()` method is marked as _obsolete_.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-13T14:00:17.073+0000",
                    "updated": "2020-07-13T14:00:17.073+0000",
                    "started": "2020-07-13T14:00:17.073+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "458060",
                    "issueId": "13300736"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13300736/worklog/458062",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mr-smidge commented on a change in pull request #7654:\nURL: https://github.com/apache/arrow/pull/7654#discussion_r453673591\n\n\n\n##########\nFile path: csharp/src/Apache.Arrow/Arrays/DateArrayBuilder.cs\n##########\n@@ -0,0 +1,179 @@\n+\ufeff//------------------------------------------------------------------------------\n+// <copyright file=\"DateArrayBuilder.cs\" company=\"Jetstone Asset Management LLP\">\n+// Copyright (C) Jetstone Asset Management LLP.  All rights reserved.\n+// Unauthorised copying of this file, via any medium, is strictly prohibited.\n+// Proprietary and confidential\n+// </copyright>\n+// <author>Adam Szmigin</author>\n+//------------------------------------------------------------------------------\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Linq;\n+\n+namespace Apache.Arrow\n+{\n+    /// <summary>\n+    /// The <see cref=\"DateArrayBuilder{TUnderlyingType,TArray,TBuilder}\"/> class is an abstract array builder that can\n+    /// accept dates in the form of <see cref=\"DateTime\"/> or <see cref=\"DateTimeOffset\"/> and convert to some\n+    /// underlying date representation.\n+    /// </summary>\n+    public abstract class DateArrayBuilder<TUnderlyingType, TArray, TBuilder> :\n\nReview comment:\n       This new class is a bit like splitting `PrimitiveArrayBuilder<TFrom, TTo, ...>` into two: one class whose interface is to do with accepting values of differing types for conversion, and another (`DelegatingArrayBuilder`) which simply delegates to an 'inner' array builder for methods like `Resize()` that don't care about the type of value.\r\n   \r\n   For clarity:  `PrimitiveArrayBuilder<TFrom, TTo, ...>` would no longer work as a base class for `DateXXArray.Builder` because the builder now accepts two different kinds of type for writing to the array.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-13T14:03:57.448+0000",
                    "updated": "2020-07-13T14:03:57.448+0000",
                    "started": "2020-07-13T14:03:57.448+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "458062",
                    "issueId": "13300736"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13300736/worklog/458064",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mr-smidge commented on a change in pull request #7654:\nURL: https://github.com/apache/arrow/pull/7654#discussion_r453675969\n\n\n\n##########\nFile path: csharp/src/Apache.Arrow/Arrays/DelegatingArrayBuilder.cs\n##########\n@@ -0,0 +1,96 @@\n+\ufeff//------------------------------------------------------------------------------\n+// <copyright file=\"DelegatingArrayBuilder.cs\" company=\"Jetstone Asset Management LLP\">\n+// Copyright (C) Jetstone Asset Management LLP.  All rights reserved.\n+// Unauthorised copying of this file, via any medium, is strictly prohibited.\n+// Proprietary and confidential\n+// </copyright>\n+// <author>Adam Szmigin</author>\n+//------------------------------------------------------------------------------\n+\n+using System;\n+using Apache.Arrow.Memory;\n+\n+namespace Apache.Arrow\n+{\n+    /// <summary>\n+    /// The <see cref=\"DelegatingArrayBuilder{T,TArray,TBuilder}\"/> class can be used as the base for any array builder\n+    /// that needs to delegate most of its functionality to an inner array builder.\n+    /// </summary>\n+    /// <remarks>\n+    /// The typical use case is when an array builder may accept a number of different types as input, but which are\n+    /// all internally converted to a single type for assembly into an array.\n+    /// </remarks>\n+    /// <typeparam name=\"T\">Type of item accepted by inner array builder.</typeparam>\n+    /// <typeparam name=\"TArray\">Type of array produced by this (and the inner) builder.</typeparam>\n+    /// <typeparam name=\"TBuilder\">Type of builder (see Curiously-Recurring Template Pattern).</typeparam>\n+    public abstract class DelegatingArrayBuilder<T, TArray, TBuilder> : IArrowArrayBuilder<TArray, TBuilder>\n\nReview comment:\n       Perhaps  `PrimitiveArrayBuilder<TFrom, TTo, ...>`  could now use this as a base class?\r\n   \r\n   The issue is that the only remaining user of  `PrimitiveArrayBuilder<TFrom, TTo, ...>`  is now `TimestampArray`, and that class has a number of problems that mean it may need to be refactored to derive from a different base class (in short: it needs to understand IANA/Olson timezone identifiers, and NodaTime is the obvious library to do that, but if we include NodaTime then the class might as well accept `NodaTime.Instant`, etc).  This made me think that  `PrimitiveArrayBuilder<TFrom, TTo, ...>` should probably be marked obsolete.\r\n   \r\n   Opinions welcomed!\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-13T14:07:31.815+0000",
                    "updated": "2020-07-13T14:07:31.815+0000",
                    "started": "2020-07-13T14:07:31.815+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "458064",
                    "issueId": "13300736"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13300736/worklog/458518",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mr-smidge edited a comment on pull request #7654:\nURL: https://github.com/apache/arrow/pull/7654#issuecomment-657438635\n\n\n   > In general, DateTimeOffset is the preferred type to use when talking about dates and times. The reasoning is because exactly what you point out in the JIRA issue - DateTime.Kind is very confusing and can cause a lot of problems.\r\n   \r\n   I suspect this is a matter of codebase/team preference.  By contrast, my organisation previously recommended `DateTime` for dates.  I say \"previously\" because now we would use NodaTime's `LocalDate` instead :-).\r\n   \r\n   Nonetheless, in the absence of a proper type just for dates, I can see arguments for either, and I'll modify the API accordingly to accept both in a non-breaking manner.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-14T08:29:49.942+0000",
                    "updated": "2020-07-14T08:29:49.942+0000",
                    "started": "2020-07-14T08:29:49.942+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "458518",
                    "issueId": "13300736"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13300736/worklog/459969",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "eerhardt commented on a change in pull request #7654:\nURL: https://github.com/apache/arrow/pull/7654#discussion_r456091623\n\n\n\n##########\nFile path: csharp/src/Apache.Arrow/Arrays/Date64Array.cs\n##########\n@@ -15,56 +15,94 @@\n \n using Apache.Arrow.Types;\n using System;\n-using System.Collections.Generic;\n-using Apache.Arrow.Memory;\n \n namespace Apache.Arrow\n {\n+    /// <summary>\n+    /// The <see cref=\"Date64Array\"/> class holds an array of dates in the <c>Date64</c> format, where each date is\n+    /// stored as the number of milliseconds since the dawn of (UNIX) time, excluding leap seconds.\n+    /// </summary>\n     public class Date64Array: PrimitiveArray<long>\n     {\n+        private static readonly DateTime _epoch = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Unspecified);\n+\n         public Date64Array(\n             ArrowBuffer valueBuffer, ArrowBuffer nullBitmapBuffer,\n             int length, int nullCount, int offset)\n             : this(new ArrayData(Date64Type.Default, length, nullCount, offset,\n                 new[] { nullBitmapBuffer, valueBuffer }))\n         { }\n \n-        public class Builder : PrimitiveArrayBuilder<DateTimeOffset, long, Date64Array, Builder>\n+        /// <summary>\n+        /// The <see cref=\"Builder\"/> class can be used to fluently build <see cref=\"Date64Array\"/> objects.\n+        /// </summary>\n+        public class Builder : DateArrayBuilder<long, Date64Array, Builder>\n         {\n-            internal class DateBuilder: PrimitiveArrayBuilder<long, Date64Array, DateBuilder>\n+            private class DateBuilder: PrimitiveArrayBuilder<long, Date64Array, DateBuilder>\n             {\n                 protected override Date64Array Build(\n                     ArrowBuffer valueBuffer, ArrowBuffer nullBitmapBuffer,\n                     int length, int nullCount, int offset) =>\n                     new Date64Array(valueBuffer, nullBitmapBuffer, length, nullCount, offset);\n-            } \n+            }\n \n+            /// <summary>\n+            /// Construct a new instance of the <see cref=\"Builder\"/> class.\n+            /// </summary>\n             public Builder() : base(new DateBuilder()) { }\n \n-            protected override long ConvertTo(DateTimeOffset value)\n+            protected override long Convert(DateTime dateTime)\n+            {\n+                return (long)(dateTime - _epoch).TotalMilliseconds;\n+            }\n+\n+            protected override long Convert(DateTimeOffset dateTimeOffset)\n             {\n-                return value.ToUnixTimeMilliseconds();\n+                return (long)(dateTimeOffset.Date - _epoch).TotalMilliseconds;\n\nReview comment:\n       I believe this should stay `value.ToUnixTimeMilliseconds()`. Same for Date32 above.\n\n##########\nFile path: csharp/test/Apache.Arrow.Tests/Date32ArrayTests.cs\n##########\n@@ -20,28 +20,46 @@ namespace Apache.Arrow.Tests\n {\n     public class Date32ArrayTests\n     {\n-        public class Set\n+        public class GetDate\n\nReview comment:\n       The `GetDate` method is now obsolete. So this should probably be updated to the new method name.\n\n##########\nFile path: csharp/src/Apache.Arrow/Arrays/DelegatingArrayBuilder.cs\n##########\n@@ -0,0 +1,96 @@\n+\ufeff//------------------------------------------------------------------------------\n+// <copyright file=\"DelegatingArrayBuilder.cs\" company=\"Jetstone Asset Management LLP\">\n+// Copyright (C) Jetstone Asset Management LLP.  All rights reserved.\n+// Unauthorised copying of this file, via any medium, is strictly prohibited.\n+// Proprietary and confidential\n+// </copyright>\n+// <author>Adam Szmigin</author>\n+//------------------------------------------------------------------------------\n+\n+using System;\n+using Apache.Arrow.Memory;\n+\n+namespace Apache.Arrow\n+{\n+    /// <summary>\n+    /// The <see cref=\"DelegatingArrayBuilder{T,TArray,TBuilder}\"/> class can be used as the base for any array builder\n+    /// that needs to delegate most of its functionality to an inner array builder.\n+    /// </summary>\n+    /// <remarks>\n+    /// The typical use case is when an array builder may accept a number of different types as input, but which are\n+    /// all internally converted to a single type for assembly into an array.\n+    /// </remarks>\n+    /// <typeparam name=\"T\">Type of item accepted by inner array builder.</typeparam>\n+    /// <typeparam name=\"TArray\">Type of array produced by this (and the inner) builder.</typeparam>\n+    /// <typeparam name=\"TBuilder\">Type of builder (see Curiously-Recurring Template Pattern).</typeparam>\n+    public abstract class DelegatingArrayBuilder<T, TArray, TBuilder> : IArrowArrayBuilder<TArray, TBuilder>\n\nReview comment:\n       Do we have to have this extra layer of abstraction? If we don't think TimestampArray could use this base class, then maybe let's wait with this extra base class. We can always refactor it out of `DateArrayBuilder` later, when it provides value.\n\n##########\nFile path: csharp/test/Apache.Arrow.Tests/Date32ArrayTests.cs\n##########\n@@ -20,28 +20,46 @@ namespace Apache.Arrow.Tests\n {\n     public class Date32ArrayTests\n     {\n-        public class Set\n+        public class GetDate\n         {\n             [Fact]\n-            public void SetAndGet()\n+            public void SetAndGetNull()\n             {\n-                var now = DateTimeOffset.UtcNow;\n+                // Arrange\n+                var array = new Date32Array.Builder()\n+                    .AppendNull()\n+                    .Build();\n+\n+                // Act\n+                var actual = array.GetDateTime(0);\n\nReview comment:\n       Can we also get tests for `GetDateTimeOffset`?\n\n##########\nFile path: csharp/src/Apache.Arrow/Arrays/Date64Array.cs\n##########\n@@ -15,56 +15,94 @@\n \n using Apache.Arrow.Types;\n using System;\n-using System.Collections.Generic;\n-using Apache.Arrow.Memory;\n \n namespace Apache.Arrow\n {\n+    /// <summary>\n+    /// The <see cref=\"Date64Array\"/> class holds an array of dates in the <c>Date64</c> format, where each date is\n+    /// stored as the number of milliseconds since the dawn of (UNIX) time, excluding leap seconds.\n+    /// </summary>\n     public class Date64Array: PrimitiveArray<long>\n     {\n+        private static readonly DateTime _epoch = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Unspecified);\n+\n         public Date64Array(\n             ArrowBuffer valueBuffer, ArrowBuffer nullBitmapBuffer,\n             int length, int nullCount, int offset)\n             : this(new ArrayData(Date64Type.Default, length, nullCount, offset,\n                 new[] { nullBitmapBuffer, valueBuffer }))\n         { }\n \n-        public class Builder : PrimitiveArrayBuilder<DateTimeOffset, long, Date64Array, Builder>\n+        /// <summary>\n+        /// The <see cref=\"Builder\"/> class can be used to fluently build <see cref=\"Date64Array\"/> objects.\n+        /// </summary>\n+        public class Builder : DateArrayBuilder<long, Date64Array, Builder>\n         {\n-            internal class DateBuilder: PrimitiveArrayBuilder<long, Date64Array, DateBuilder>\n+            private class DateBuilder: PrimitiveArrayBuilder<long, Date64Array, DateBuilder>\n             {\n                 protected override Date64Array Build(\n                     ArrowBuffer valueBuffer, ArrowBuffer nullBitmapBuffer,\n                     int length, int nullCount, int offset) =>\n                     new Date64Array(valueBuffer, nullBitmapBuffer, length, nullCount, offset);\n-            } \n+            }\n \n+            /// <summary>\n+            /// Construct a new instance of the <see cref=\"Builder\"/> class.\n+            /// </summary>\n             public Builder() : base(new DateBuilder()) { }\n \n-            protected override long ConvertTo(DateTimeOffset value)\n+            protected override long Convert(DateTime dateTime)\n+            {\n+                return (long)(dateTime - _epoch).TotalMilliseconds;\n+            }\n+\n+            protected override long Convert(DateTimeOffset dateTimeOffset)\n             {\n-                return value.ToUnixTimeMilliseconds();\n+                return (long)(dateTimeOffset.Date - _epoch).TotalMilliseconds;\n             }\n         }\n \n-        public Date64Array(ArrayData data) \n+        public Date64Array(ArrayData data)\n             : base(data)\n         {\n             data.EnsureDataType(ArrowTypeId.Date64);\n         }\n \n         public override void Accept(IArrowArrayVisitor visitor) => Accept(this, visitor);\n \n-        public DateTimeOffset? GetDate(int index)\n+        [Obsolete(\"Use `GetDateTimeOffset()` instead\")]\n+        public DateTimeOffset? GetDate(int index) => GetDateTimeOffset(index);\n+\n+        /// <summary>\n+        /// Get the date at the specified index in the form of a <see cref=\"DateTime\"/> object.\n+        /// </summary>\n+        /// <remarks>\n+        /// The <see cref=\"DateTime.Kind\"/> property of the returned object is set to\n+        /// <see cref=\"DateTimeKind.Unspecified\"/>.\n+        /// </remarks>\n+        /// <param name=\"index\">Index at which to get the date.</param>\n+        /// <returns>Returns a <see cref=\"DateTime\"/> object, or <c>null</c> if there is no object at that index.\n+        /// </returns>\n+        public DateTime? GetDateTime(int index)\n         {\n             long? value = GetValue(index);\n+            return value.HasValue\n+                ? _epoch.AddMilliseconds(value.Value)\n+                : default(DateTime?);\n+        }\n \n-            if (!value.HasValue)\n-            {\n-                return default;\n-            }\n-\n-            return DateTimeOffset.FromUnixTimeMilliseconds(value.Value);\n+        /// <summary>\n+        /// Get the date at the specified index in the form of a <see cref=\"DateTimeOffset\"/> object.\n+        /// </summary>\n+        /// <param name=\"index\">Index at which to get the date.</param>\n+        /// <returns>Returns a <see cref=\"DateTimeOffset\"/> object, or <c>null</c> if there is no object at that index.\n+        /// </returns>\n+        public DateTimeOffset? GetDateTimeOffset(int index)\n+        {\n+            long? value = GetValue(index);\n+            return value.HasValue\n+                ? new DateTimeOffset(_epoch.AddMilliseconds(value.Value), TimeSpan.Zero)\n\nReview comment:\n       I believe this should stay `return DateTimeOffset.FromUnixTimeMilliseconds(value.Value);`. Same for Date32 above.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-16T21:37:57.248+0000",
                    "updated": "2020-07-16T21:37:57.248+0000",
                    "started": "2020-07-16T21:37:57.248+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "459969",
                    "issueId": "13300736"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13300736/worklog/460384",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mr-smidge commented on a change in pull request #7654:\nURL: https://github.com/apache/arrow/pull/7654#discussion_r456557580\n\n\n\n##########\nFile path: csharp/src/Apache.Arrow/Arrays/Date64Array.cs\n##########\n@@ -15,56 +15,94 @@\n \n using Apache.Arrow.Types;\n using System;\n-using System.Collections.Generic;\n-using Apache.Arrow.Memory;\n \n namespace Apache.Arrow\n {\n+    /// <summary>\n+    /// The <see cref=\"Date64Array\"/> class holds an array of dates in the <c>Date64</c> format, where each date is\n+    /// stored as the number of milliseconds since the dawn of (UNIX) time, excluding leap seconds.\n+    /// </summary>\n     public class Date64Array: PrimitiveArray<long>\n     {\n+        private static readonly DateTime _epoch = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Unspecified);\n+\n         public Date64Array(\n             ArrowBuffer valueBuffer, ArrowBuffer nullBitmapBuffer,\n             int length, int nullCount, int offset)\n             : this(new ArrayData(Date64Type.Default, length, nullCount, offset,\n                 new[] { nullBitmapBuffer, valueBuffer }))\n         { }\n \n-        public class Builder : PrimitiveArrayBuilder<DateTimeOffset, long, Date64Array, Builder>\n+        /// <summary>\n+        /// The <see cref=\"Builder\"/> class can be used to fluently build <see cref=\"Date64Array\"/> objects.\n+        /// </summary>\n+        public class Builder : DateArrayBuilder<long, Date64Array, Builder>\n         {\n-            internal class DateBuilder: PrimitiveArrayBuilder<long, Date64Array, DateBuilder>\n+            private class DateBuilder: PrimitiveArrayBuilder<long, Date64Array, DateBuilder>\n             {\n                 protected override Date64Array Build(\n                     ArrowBuffer valueBuffer, ArrowBuffer nullBitmapBuffer,\n                     int length, int nullCount, int offset) =>\n                     new Date64Array(valueBuffer, nullBitmapBuffer, length, nullCount, offset);\n-            } \n+            }\n \n+            /// <summary>\n+            /// Construct a new instance of the <see cref=\"Builder\"/> class.\n+            /// </summary>\n             public Builder() : base(new DateBuilder()) { }\n \n-            protected override long ConvertTo(DateTimeOffset value)\n+            protected override long Convert(DateTime dateTime)\n+            {\n+                return (long)(dateTime - _epoch).TotalMilliseconds;\n+            }\n+\n+            protected override long Convert(DateTimeOffset dateTimeOffset)\n             {\n-                return value.ToUnixTimeMilliseconds();\n+                return (long)(dateTimeOffset.Date - _epoch).TotalMilliseconds;\n\nReview comment:\n       I've restored this to use `.ToUnixTimeMilliseconds()` (and with the conversion in the other direction).\r\n   \r\n   However, I'm not sure whether it is such a good idea to make the same change in `Date32Array`.  My personal opinion is that `(dateTime - _epoch).TotalDays` is more readable as a day count than having to make a trip into milliseconds and then convert again.  Involving milliseconds may also distract the reader into momentarily thinking about leap seconds, when they are not relevant for a day count.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-17T16:49:12.348+0000",
                    "updated": "2020-07-17T16:49:12.348+0000",
                    "started": "2020-07-17T16:49:12.348+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "460384",
                    "issueId": "13300736"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13300736/worklog/460385",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mr-smidge commented on a change in pull request #7654:\nURL: https://github.com/apache/arrow/pull/7654#discussion_r456557697\n\n\n\n##########\nFile path: csharp/src/Apache.Arrow/Arrays/Date64Array.cs\n##########\n@@ -15,56 +15,94 @@\n \n using Apache.Arrow.Types;\n using System;\n-using System.Collections.Generic;\n-using Apache.Arrow.Memory;\n \n namespace Apache.Arrow\n {\n+    /// <summary>\n+    /// The <see cref=\"Date64Array\"/> class holds an array of dates in the <c>Date64</c> format, where each date is\n+    /// stored as the number of milliseconds since the dawn of (UNIX) time, excluding leap seconds.\n+    /// </summary>\n     public class Date64Array: PrimitiveArray<long>\n     {\n+        private static readonly DateTime _epoch = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Unspecified);\n+\n         public Date64Array(\n             ArrowBuffer valueBuffer, ArrowBuffer nullBitmapBuffer,\n             int length, int nullCount, int offset)\n             : this(new ArrayData(Date64Type.Default, length, nullCount, offset,\n                 new[] { nullBitmapBuffer, valueBuffer }))\n         { }\n \n-        public class Builder : PrimitiveArrayBuilder<DateTimeOffset, long, Date64Array, Builder>\n+        /// <summary>\n+        /// The <see cref=\"Builder\"/> class can be used to fluently build <see cref=\"Date64Array\"/> objects.\n+        /// </summary>\n+        public class Builder : DateArrayBuilder<long, Date64Array, Builder>\n         {\n-            internal class DateBuilder: PrimitiveArrayBuilder<long, Date64Array, DateBuilder>\n+            private class DateBuilder: PrimitiveArrayBuilder<long, Date64Array, DateBuilder>\n             {\n                 protected override Date64Array Build(\n                     ArrowBuffer valueBuffer, ArrowBuffer nullBitmapBuffer,\n                     int length, int nullCount, int offset) =>\n                     new Date64Array(valueBuffer, nullBitmapBuffer, length, nullCount, offset);\n-            } \n+            }\n \n+            /// <summary>\n+            /// Construct a new instance of the <see cref=\"Builder\"/> class.\n+            /// </summary>\n             public Builder() : base(new DateBuilder()) { }\n \n-            protected override long ConvertTo(DateTimeOffset value)\n+            protected override long Convert(DateTime dateTime)\n+            {\n+                return (long)(dateTime - _epoch).TotalMilliseconds;\n+            }\n+\n+            protected override long Convert(DateTimeOffset dateTimeOffset)\n             {\n-                return value.ToUnixTimeMilliseconds();\n+                return (long)(dateTimeOffset.Date - _epoch).TotalMilliseconds;\n             }\n         }\n \n-        public Date64Array(ArrayData data) \n+        public Date64Array(ArrayData data)\n             : base(data)\n         {\n             data.EnsureDataType(ArrowTypeId.Date64);\n         }\n \n         public override void Accept(IArrowArrayVisitor visitor) => Accept(this, visitor);\n \n-        public DateTimeOffset? GetDate(int index)\n+        [Obsolete(\"Use `GetDateTimeOffset()` instead\")]\n+        public DateTimeOffset? GetDate(int index) => GetDateTimeOffset(index);\n+\n+        /// <summary>\n+        /// Get the date at the specified index in the form of a <see cref=\"DateTime\"/> object.\n+        /// </summary>\n+        /// <remarks>\n+        /// The <see cref=\"DateTime.Kind\"/> property of the returned object is set to\n+        /// <see cref=\"DateTimeKind.Unspecified\"/>.\n+        /// </remarks>\n+        /// <param name=\"index\">Index at which to get the date.</param>\n+        /// <returns>Returns a <see cref=\"DateTime\"/> object, or <c>null</c> if there is no object at that index.\n+        /// </returns>\n+        public DateTime? GetDateTime(int index)\n         {\n             long? value = GetValue(index);\n+            return value.HasValue\n+                ? _epoch.AddMilliseconds(value.Value)\n+                : default(DateTime?);\n+        }\n \n-            if (!value.HasValue)\n-            {\n-                return default;\n-            }\n-\n-            return DateTimeOffset.FromUnixTimeMilliseconds(value.Value);\n+        /// <summary>\n+        /// Get the date at the specified index in the form of a <see cref=\"DateTimeOffset\"/> object.\n+        /// </summary>\n+        /// <param name=\"index\">Index at which to get the date.</param>\n+        /// <returns>Returns a <see cref=\"DateTimeOffset\"/> object, or <c>null</c> if there is no object at that index.\n+        /// </returns>\n+        public DateTimeOffset? GetDateTimeOffset(int index)\n+        {\n+            long? value = GetValue(index);\n+            return value.HasValue\n+                ? new DateTimeOffset(_epoch.AddMilliseconds(value.Value), TimeSpan.Zero)\n\nReview comment:\n       Restored to use `.FromUnixTimeMilliseconds()`.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-17T16:49:25.396+0000",
                    "updated": "2020-07-17T16:49:25.396+0000",
                    "started": "2020-07-17T16:49:25.396+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "460385",
                    "issueId": "13300736"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13300736/worklog/460386",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mr-smidge commented on a change in pull request #7654:\nURL: https://github.com/apache/arrow/pull/7654#discussion_r456557817\n\n\n\n##########\nFile path: csharp/test/Apache.Arrow.Tests/Date32ArrayTests.cs\n##########\n@@ -20,28 +20,46 @@ namespace Apache.Arrow.Tests\n {\n     public class Date32ArrayTests\n     {\n-        public class Set\n+        public class GetDate\n\nReview comment:\n       Done.\n\n##########\nFile path: csharp/test/Apache.Arrow.Tests/Date32ArrayTests.cs\n##########\n@@ -20,28 +20,46 @@ namespace Apache.Arrow.Tests\n {\n     public class Date32ArrayTests\n     {\n-        public class Set\n+        public class GetDate\n         {\n             [Fact]\n-            public void SetAndGet()\n+            public void SetAndGetNull()\n             {\n-                var now = DateTimeOffset.UtcNow;\n+                // Arrange\n+                var array = new Date32Array.Builder()\n+                    .AppendNull()\n+                    .Build();\n+\n+                // Act\n+                var actual = array.GetDateTime(0);\n\nReview comment:\n       Added.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-17T16:49:48.354+0000",
                    "updated": "2020-07-17T16:49:48.354+0000",
                    "started": "2020-07-17T16:49:48.353+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "460386",
                    "issueId": "13300736"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13300736/worklog/460387",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mr-smidge commented on a change in pull request #7654:\nURL: https://github.com/apache/arrow/pull/7654#discussion_r456563263\n\n\n\n##########\nFile path: csharp/src/Apache.Arrow/Arrays/DelegatingArrayBuilder.cs\n##########\n@@ -0,0 +1,96 @@\n+\ufeff//------------------------------------------------------------------------------\n+// <copyright file=\"DelegatingArrayBuilder.cs\" company=\"Jetstone Asset Management LLP\">\n+// Copyright (C) Jetstone Asset Management LLP.  All rights reserved.\n+// Unauthorised copying of this file, via any medium, is strictly prohibited.\n+// Proprietary and confidential\n+// </copyright>\n+// <author>Adam Szmigin</author>\n+//------------------------------------------------------------------------------\n+\n+using System;\n+using Apache.Arrow.Memory;\n+\n+namespace Apache.Arrow\n+{\n+    /// <summary>\n+    /// The <see cref=\"DelegatingArrayBuilder{T,TArray,TBuilder}\"/> class can be used as the base for any array builder\n+    /// that needs to delegate most of its functionality to an inner array builder.\n+    /// </summary>\n+    /// <remarks>\n+    /// The typical use case is when an array builder may accept a number of different types as input, but which are\n+    /// all internally converted to a single type for assembly into an array.\n+    /// </remarks>\n+    /// <typeparam name=\"T\">Type of item accepted by inner array builder.</typeparam>\n+    /// <typeparam name=\"TArray\">Type of array produced by this (and the inner) builder.</typeparam>\n+    /// <typeparam name=\"TBuilder\">Type of builder (see Curiously-Recurring Template Pattern).</typeparam>\n+    public abstract class DelegatingArrayBuilder<T, TArray, TBuilder> : IArrowArrayBuilder<TArray, TBuilder>\n\nReview comment:\n       If I were to refactor `TimestampArray` today, I would use `DelegatingArrayBuilder` as the builder's base class, adding methods to accept `DateTimeOffset` (and probably `NodaTime.Instant` if we use NodaTime for the TZDB).\r\n   \r\n   I don't mind which direction we take for this PR, but have a minor preference to keep `DelegatingArrayBuilder` (because we know that we will need to refactor `TimestampArray` in order for the C# codebase to become Production-ready).\r\n   \r\n   I've raised https://issues.apache.org/jira/browse/ARROW-9515 for the enhancements to `TimestampArray` in future.\n\n##########\nFile path: csharp/src/Apache.Arrow/Arrays/DelegatingArrayBuilder.cs\n##########\n@@ -0,0 +1,96 @@\n+\ufeff//------------------------------------------------------------------------------\n+// <copyright file=\"DelegatingArrayBuilder.cs\" company=\"Jetstone Asset Management LLP\">\n+// Copyright (C) Jetstone Asset Management LLP.  All rights reserved.\n+// Unauthorised copying of this file, via any medium, is strictly prohibited.\n+// Proprietary and confidential\n+// </copyright>\n+// <author>Adam Szmigin</author>\n+//------------------------------------------------------------------------------\n+\n+using System;\n+using Apache.Arrow.Memory;\n+\n+namespace Apache.Arrow\n+{\n+    /// <summary>\n+    /// The <see cref=\"DelegatingArrayBuilder{T,TArray,TBuilder}\"/> class can be used as the base for any array builder\n+    /// that needs to delegate most of its functionality to an inner array builder.\n+    /// </summary>\n+    /// <remarks>\n+    /// The typical use case is when an array builder may accept a number of different types as input, but which are\n+    /// all internally converted to a single type for assembly into an array.\n+    /// </remarks>\n+    /// <typeparam name=\"T\">Type of item accepted by inner array builder.</typeparam>\n+    /// <typeparam name=\"TArray\">Type of array produced by this (and the inner) builder.</typeparam>\n+    /// <typeparam name=\"TBuilder\">Type of builder (see Curiously-Recurring Template Pattern).</typeparam>\n+    public abstract class DelegatingArrayBuilder<T, TArray, TBuilder> : IArrowArrayBuilder<TArray, TBuilder>\n\nReview comment:\n       If I were to refactor `TimestampArray` today, I would use `DelegatingArrayBuilder` as the builder's base class, adding methods to accept `DateTimeOffset` (and probably `NodaTime.Instant` if we use NodaTime for the TZDB).\r\n   \r\n   I don't mind which direction we take for this PR, but have a preference to keep `DelegatingArrayBuilder` (because we know that we will need to refactor `TimestampArray` in order for the C# codebase to become Production-ready).\r\n   \r\n   I've raised https://issues.apache.org/jira/browse/ARROW-9515 for the enhancements to `TimestampArray` in future.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-17T17:00:49.501+0000",
                    "updated": "2020-07-17T17:00:49.501+0000",
                    "started": "2020-07-17T17:00:49.501+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "460387",
                    "issueId": "13300736"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13300736/worklog/461035",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mr-smidge commented on pull request #7654:\nURL: https://github.com/apache/arrow/pull/7654#issuecomment-660971998\n\n\n   @eerhardt , is there a way to re-trigger build checks?  The `C# / AMD64 MacOS 10.15 C# 2.2.103 (pull_request)` check failed with an unhelpful \"This check failed\" error message - I assume this is transient?\r\n   \r\n   Thanks!\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-20T11:32:07.832+0000",
                    "updated": "2020-07-20T11:32:07.832+0000",
                    "started": "2020-07-20T11:32:07.832+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "461035",
                    "issueId": "13300736"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13300736/worklog/461157",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "eerhardt commented on pull request #7654:\nURL: https://github.com/apache/arrow/pull/7654#issuecomment-661158367\n\n\n   > is there a way to re-trigger build checks?\r\n   \r\n   In other repos I've used the \"Ru-run jobs\" button on the \"Checks\" tab:\r\n   \r\n   ![image](https://user-images.githubusercontent.com/8291187/87962072-41633e80-ca7c-11ea-967c-08ed9a9a62eb.png)\r\n   \r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-20T16:30:20.340+0000",
                    "updated": "2020-07-20T16:30:20.340+0000",
                    "started": "2020-07-20T16:30:20.340+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "461157",
                    "issueId": "13300736"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13300736/worklog/461170",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "eerhardt commented on a change in pull request #7654:\nURL: https://github.com/apache/arrow/pull/7654#discussion_r457560950\n\n\n\n##########\nFile path: csharp/src/Apache.Arrow/Arrays/Date64Array.cs\n##########\n@@ -15,56 +15,94 @@\n \n using Apache.Arrow.Types;\n using System;\n-using System.Collections.Generic;\n-using Apache.Arrow.Memory;\n \n namespace Apache.Arrow\n {\n+    /// <summary>\n+    /// The <see cref=\"Date64Array\"/> class holds an array of dates in the <c>Date64</c> format, where each date is\n+    /// stored as the number of milliseconds since the dawn of (UNIX) time, excluding leap seconds.\n+    /// </summary>\n     public class Date64Array: PrimitiveArray<long>\n     {\n+        private static readonly DateTime _epoch = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Unspecified);\n+\n         public Date64Array(\n             ArrowBuffer valueBuffer, ArrowBuffer nullBitmapBuffer,\n             int length, int nullCount, int offset)\n             : this(new ArrayData(Date64Type.Default, length, nullCount, offset,\n                 new[] { nullBitmapBuffer, valueBuffer }))\n         { }\n \n-        public class Builder : PrimitiveArrayBuilder<DateTimeOffset, long, Date64Array, Builder>\n+        /// <summary>\n+        /// The <see cref=\"Builder\"/> class can be used to fluently build <see cref=\"Date64Array\"/> objects.\n+        /// </summary>\n+        public class Builder : DateArrayBuilder<long, Date64Array, Builder>\n         {\n-            internal class DateBuilder: PrimitiveArrayBuilder<long, Date64Array, DateBuilder>\n+            private class DateBuilder: PrimitiveArrayBuilder<long, Date64Array, DateBuilder>\n             {\n                 protected override Date64Array Build(\n                     ArrowBuffer valueBuffer, ArrowBuffer nullBitmapBuffer,\n                     int length, int nullCount, int offset) =>\n                     new Date64Array(valueBuffer, nullBitmapBuffer, length, nullCount, offset);\n-            } \n+            }\n \n+            /// <summary>\n+            /// Construct a new instance of the <see cref=\"Builder\"/> class.\n+            /// </summary>\n             public Builder() : base(new DateBuilder()) { }\n \n-            protected override long ConvertTo(DateTimeOffset value)\n+            protected override long Convert(DateTime dateTime)\n+            {\n+                return (long)(dateTime - _epoch).TotalMilliseconds;\n+            }\n+\n+            protected override long Convert(DateTimeOffset dateTimeOffset)\n             {\n-                return value.ToUnixTimeMilliseconds();\n+                return (long)(dateTimeOffset.Date - _epoch).TotalMilliseconds;\n\nReview comment:\n       > However, I'm not sure whether it is such a good idea to make the same change in Date32Array. My personal opinion is that (dateTime - _epoch).TotalDays is more readable as a day count than having to make a trip into milliseconds and then convert again.\r\n   \r\n   This isn't about read-ability, but instead about correctness. The logic needs to take into account the Offset portion of the `DateTimeOffset`.\r\n   \r\n   The Unix Epoch is defined as `00:00:00 UTC Thursday, 1 January 1970`. At that specific time, half of the world was on the day `1 January 1970`, and the other half of the world was still on `31 December 1969`. I can have the same **moment in time** represented with 2 different DateTimeOffsets - one with a negative Offset, and one with a positive Offset. If used the proposed `Date32Array.Builder`, I would get 2 different days. This is not correct.\r\n   \r\n   For example, the following test should pass, but it doesn't:\r\n   \r\n   ```C#\r\n               [Fact]\r\n               public void RespectsOffset()\r\n               {\r\n                   // Arrange\r\n                   var westernHemisphereTime = new DateTimeOffset(2020, 7, 20, 20, 0, 0, TimeSpan.FromHours(-5));\r\n                   var easternHemisphereTime = new DateTimeOffset(2020, 7, 21, 10, 0, 0, TimeSpan.FromHours(9));\r\n                   var array = new Date32Array.Builder()\r\n                       .Append(westernHemisphereTime)\r\n                       .Append(easternHemisphereTime)\r\n                       .Build();\r\n   \r\n                   // Act\r\n                   var actualFirst = array.GetDate(0);\r\n                   var actualSecond = array.GetDate(1);\r\n   \r\n                   // Assert\r\n                   Assert.NotNull(actualFirst);\r\n                   Assert.NotNull(actualSecond);\r\n                   Assert.Equal(actualFirst, actualSecond);\r\n                   Assert.Equal(new DateTimeOffset(2020, 7, 21, 0, 0, 0, TimeSpan.Zero), actualFirst);\r\n               }\r\n   ```\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-20T17:04:18.259+0000",
                    "updated": "2020-07-20T17:04:18.259+0000",
                    "started": "2020-07-20T17:04:18.259+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "461170",
                    "issueId": "13300736"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13300736/worklog/461180",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "eerhardt commented on a change in pull request #7654:\nURL: https://github.com/apache/arrow/pull/7654#discussion_r457569636\n\n\n\n##########\nFile path: csharp/src/Apache.Arrow/Arrays/DelegatingArrayBuilder.cs\n##########\n@@ -0,0 +1,96 @@\n+\ufeff//------------------------------------------------------------------------------\n+// <copyright file=\"DelegatingArrayBuilder.cs\" company=\"Jetstone Asset Management LLP\">\n+// Copyright (C) Jetstone Asset Management LLP.  All rights reserved.\n+// Unauthorised copying of this file, via any medium, is strictly prohibited.\n+// Proprietary and confidential\n+// </copyright>\n+// <author>Adam Szmigin</author>\n+//------------------------------------------------------------------------------\n+\n+using System;\n+using Apache.Arrow.Memory;\n+\n+namespace Apache.Arrow\n+{\n+    /// <summary>\n+    /// The <see cref=\"DelegatingArrayBuilder{T,TArray,TBuilder}\"/> class can be used as the base for any array builder\n+    /// that needs to delegate most of its functionality to an inner array builder.\n+    /// </summary>\n+    /// <remarks>\n+    /// The typical use case is when an array builder may accept a number of different types as input, but which are\n+    /// all internally converted to a single type for assembly into an array.\n+    /// </remarks>\n+    /// <typeparam name=\"T\">Type of item accepted by inner array builder.</typeparam>\n+    /// <typeparam name=\"TArray\">Type of array produced by this (and the inner) builder.</typeparam>\n+    /// <typeparam name=\"TBuilder\">Type of builder (see Curiously-Recurring Template Pattern).</typeparam>\n+    public abstract class DelegatingArrayBuilder<T, TArray, TBuilder> : IArrowArrayBuilder<TArray, TBuilder>\n\nReview comment:\n       > and probably NodaTime.Instant if we use NodaTime for the TZDB\r\n   \r\n   Just a FYI, see this [previous discussion](https://github.com/apache/arrow/pull/5965#discussion_r356233161) where we discussed NodaTime. In short, I don't believe the Arrow library should have a dependency on NodaTime. But instead, the Arrow API should allow for a consumer to use NodaTime and Arrow together.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-20T17:19:44.053+0000",
                    "updated": "2020-07-20T17:19:44.053+0000",
                    "started": "2020-07-20T17:19:44.053+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "461180",
                    "issueId": "13300736"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13300736/worklog/461299",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on pull request #7654:\nURL: https://github.com/apache/arrow/pull/7654#issuecomment-661361050\n\n\n   I think that a member of the \"arrow-committers\" team can use \"Re-run jobs\". (I re-ran jobs.)\r\n   \r\n   Others can use `git commit --amend && git push --force ...` or ask a committer to use \"Re-run jobs\".\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-20T22:01:42.584+0000",
                    "updated": "2020-07-20T22:01:42.584+0000",
                    "started": "2020-07-20T22:01:42.583+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "461299",
                    "issueId": "13300736"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13300736/worklog/461302",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "eerhardt commented on pull request #7654:\nURL: https://github.com/apache/arrow/pull/7654#issuecomment-661363849\n\n\n   > I think that a member of the \"arrow-committers\" team can use \"Re-run jobs\". (I re-ran jobs.)\r\n   \r\n   Ah, I didn't know committers were special that way. Thanks for re-running, and thanks for the info.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-20T22:04:31.341+0000",
                    "updated": "2020-07-20T22:04:31.341+0000",
                    "started": "2020-07-20T22:04:31.341+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "461302",
                    "issueId": "13300736"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13300736/worklog/461315",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mr-smidge commented on a change in pull request #7654:\nURL: https://github.com/apache/arrow/pull/7654#discussion_r457739938\n\n\n\n##########\nFile path: csharp/src/Apache.Arrow/Arrays/Date64Array.cs\n##########\n@@ -15,56 +15,94 @@\n \n using Apache.Arrow.Types;\n using System;\n-using System.Collections.Generic;\n-using Apache.Arrow.Memory;\n \n namespace Apache.Arrow\n {\n+    /// <summary>\n+    /// The <see cref=\"Date64Array\"/> class holds an array of dates in the <c>Date64</c> format, where each date is\n+    /// stored as the number of milliseconds since the dawn of (UNIX) time, excluding leap seconds.\n+    /// </summary>\n     public class Date64Array: PrimitiveArray<long>\n     {\n+        private static readonly DateTime _epoch = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Unspecified);\n+\n         public Date64Array(\n             ArrowBuffer valueBuffer, ArrowBuffer nullBitmapBuffer,\n             int length, int nullCount, int offset)\n             : this(new ArrayData(Date64Type.Default, length, nullCount, offset,\n                 new[] { nullBitmapBuffer, valueBuffer }))\n         { }\n \n-        public class Builder : PrimitiveArrayBuilder<DateTimeOffset, long, Date64Array, Builder>\n+        /// <summary>\n+        /// The <see cref=\"Builder\"/> class can be used to fluently build <see cref=\"Date64Array\"/> objects.\n+        /// </summary>\n+        public class Builder : DateArrayBuilder<long, Date64Array, Builder>\n         {\n-            internal class DateBuilder: PrimitiveArrayBuilder<long, Date64Array, DateBuilder>\n+            private class DateBuilder: PrimitiveArrayBuilder<long, Date64Array, DateBuilder>\n             {\n                 protected override Date64Array Build(\n                     ArrowBuffer valueBuffer, ArrowBuffer nullBitmapBuffer,\n                     int length, int nullCount, int offset) =>\n                     new Date64Array(valueBuffer, nullBitmapBuffer, length, nullCount, offset);\n-            } \n+            }\n \n+            /// <summary>\n+            /// Construct a new instance of the <see cref=\"Builder\"/> class.\n+            /// </summary>\n             public Builder() : base(new DateBuilder()) { }\n \n-            protected override long ConvertTo(DateTimeOffset value)\n+            protected override long Convert(DateTime dateTime)\n+            {\n+                return (long)(dateTime - _epoch).TotalMilliseconds;\n+            }\n+\n+            protected override long Convert(DateTimeOffset dateTimeOffset)\n             {\n-                return value.ToUnixTimeMilliseconds();\n+                return (long)(dateTimeOffset.Date - _epoch).TotalMilliseconds;\n\nReview comment:\n       > The Unix Epoch is defined as 00:00:00 UTC Thursday, 1 January 1970.\r\n   \r\n   Apologies, I've been too colloquial with use of the word epoch when talking about dates.  You are right that the UNIX epoch is a point in time, not a date.\r\n   \r\n   However, `Date32` and `Date64` are measures of _dates_.  As the standard C# library does not have a dedicated type for dates, we have to infer a date from either `DateTime` or `DateTimeOffset`.  Dates and instants in time aren't implicitly convertible in the natural sense because of timezones: there has to be some logic in the conversion.\r\n   \r\n   >  The logic needs to take into account the Offset portion of the DateTimeOffset.\r\n   > I can have the same moment in time represented with 2 different DateTimeOffsets\r\n   \r\n   Absolutely right - the same point in time can lie within two different calendar dates depending on one's timezone.  At the time I'm writing this it's just gone midnight in the UK, so I think it's 21st July right now.  But if you're on CDT, it's 20th July for you at the very same instant.\r\n   \r\n   For clarity: I think the most natural way to infer a meaningful date from `DateTime`/`DateTimeOffset` is to call the `.Date` property, i.e. I would expect the time and offset to be _ignored_ when considering the date.\r\n   \r\n   > I can have the same moment in time represented with 2 different DateTimeOffsets - one with a negative Offset, and one with a positive Offset. If used the proposed Date32Array.Builder, I would get 2 different days. This is not correct.\r\n   \r\n   I disagree with the statement that this is not correct, but I want to understand your viewpoint better...\r\n   \r\n   From looking at your test case, do you mean to suggest that you believe a conversion to UTC first and then taking the date from the UTC date/time is the most natural way to infer a date from a `DateTimeOffset`?  This is what happens by doing `(int)(dto.ToUnixTimeMilliseconds() / MillisecondsPerDay)`, but it's an interpretation of dates from times that I've never seen in any other project!\r\n   \r\n   If you take the \"simplest approach\" and call `.Date` (or its equivalent in NodaTime), time and offset are always ignored:\r\n   \r\n   ```csharp\r\n   // Using System types\r\n   var westernHemisphereTime = new DateTimeOffset(2020, 7, 20, 20, 0, 0, TimeSpan.FromHours(-5));\r\n   var easternHemisphereTime = new DateTimeOffset(2020, 7, 21, 10, 0, 0, TimeSpan.FromHours(9));\r\n   Assert.NotEqual(westernHemisphereTime.Date == easternHemisphereTime.Date);\r\n   Assert.Equal(westernHemisphereTime.UtcTicks == easternHemisphereTime.UtcTicks);\r\n   \r\n   // Using NodaTime types\r\n   var westernHemisphereZtd = new LocalDateTime(2020, 7, 20, 20, 0, 0).InZoneStrictly(DateTimeZoneProviders.Tzdb[\"America/Chicago\"]);\r\n   var easternHemisphereZtd = new LocalDateTime(2020, 7, 21, 10, 0, 0).InZoneStrictly(DateTimeZoneProviders.Tzdb[\"Asia/Tokyo\"]);\r\n   Assert.NotEqual(westernHemisphereZtd.Date == easternHemisphereZtd.Date);\r\n   Assert.Equal(westernHemisphereZtd.ToInstant() == easternHemisphereZtd.ToInstant());\r\n   ```\r\n   \r\n   Separately, I've realised that `Date64Array` had an existing bug that I would not be fixing if I were to retain the previous code: the previous code would not truncate non-date parts and hence could store values that were not a multiple of 8640000, which is a violation of the spec.\r\n   \r\n   I think the best thing to do is to put this PR back into draft mode, implement a _full set_ of unit tests for both `Date32` and `Date64` (and their respective builders), and hence ensure we have full clarity on expected behaviour.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-20T23:03:44.207+0000",
                    "updated": "2020-07-20T23:03:44.207+0000",
                    "started": "2020-07-20T23:03:44.206+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "461315",
                    "issueId": "13300736"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 18000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@6640da5d[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@649309ad[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@63be660e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@1f9cc5b5[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@452e5596[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@203737ad[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@30a9bbb3[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@49e1717e[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7e541f31[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@67c7c509[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1a4e9e61[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@586666d7[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 18000,
        "customfield_12312520": null,
        "customfield_12312521": "Fri Aug 14 23:52:13 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-08-14T23:52:13.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-8581/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2020-04-24T08:18:11.000+0000",
        "updated": "2020-08-14T23:52:28.000+0000",
        "timeoriginalestimate": null,
        "description": "h1. Summary Proposal\r\n\r\nThe {{Date32Array.Builder}} and {{Date64.Builder}} classes both accept values of type {{DateTimeOffset}}, but this makes it very easy for the user to introduce subtle bugs when they work with the {{DateTime}} type in their own code.\u00a0 This class of bugs could be avoided if these builders were instead typed on {{DateTime}} rather than {{DateTimeOffset}}.\r\nh1. Details\r\n\r\nThe danger is introduced by the implicit widening conversion provided by the _DateTimeOffset.Implicit(DateTime to DateTimeOffset)_ operator:\r\n [https://docs.microsoft.com/en-us/dotnet/api/system.datetimeoffset.op_implicit?view=netcore-3.1]\r\n\r\nThe important part is this text:\r\n{quote}The offset of the resulting DateTimeOffset object depends on the value of the DateTime.Kind property of the dateTime parameter:\r\n * If the value of the DateTime.Kind property is DateTimeKind.Local or DateTimeKind.Unspecified, the date and time of the DateTimeOffset object is set equal to dateTime, and its Offset property *is set equal to the offset of the local system's current time zone*.{quote}\r\n\u00a0(Emphasis mine)\r\n\r\n\u00a0If the user is operating in an environment with a positive GMT offset, it is very easy to write the wrong date to the builder:\r\n{code:c#}\r\nConsole.WriteLine(TimeZoneInfo.Local.GetUtcOffset(DateTime.UtcNow)); // Bug triggers if > 00:00:00\r\nvar builder = new Date32Array.Builder();\r\nbuilder.Append(new DateTime(2020, 4, 24)); // Kind == DateTimeKind.Unspecified\r\nvar allocator = new NativeMemoryAllocator();\r\nConsole.WriteLine(builder.Build(allocator).GetDate(0)); // Prints 2020-04-23!\r\n{code}\r\nAssume that the user is in the UK (as I am), where the GMT offset on the above date is 1 hour ahead.\u00a0 This means that the conversion to {{DateTimeOffset}} will actually result in a value of {{2020-04-23T23:00:00+01:00}} being passed to the {{Append()}} method.\u00a0 Arrow then calls {{ToUnixTimeMilliseconds()}}, which [only considers the date portion|https://referencesource.microsoft.com/#mscorlib/system/datetimeoffset.cs,8f33340c07c4787e] of its object, not the time portion or offset.\u00a0 This means that the number of days gets calculated based on 2020-04-23, not 2020-04-24 as the user thought they were specifying.\r\n\r\nIf the user chooses to use NodaTime as a \"better\" date and time-handling library, they will still likely run into the bug if they do the obvious thing:\r\n{code:c#}\r\nConsole.WriteLine(TimeZoneInfo.Local.GetUtcOffset(DateTime.UtcNow)); // Bug triggers if > 00:00:00\r\nvar builder = new Date32Array.Builder();\r\nvar ld = new NodaTime.LocalDate(2020, 4, 24);\r\nbuilder.Append(ld.ToDateTimeUnspecified()); // Kind == DateTimeKind.Unspecified\r\nvar allocator = new NativeMemoryAllocator();\r\nConsole.WriteLine(builder.Build(allocator).GetDate(0)); // Prints 2020-04-23!\r\n{code}\r\nh1. Suggested Improvement\r\n * Change {{Date32Array.Builder}} and {{Date64Array.Builder}} to specify a {{TFrom}} parameter of {{DateTime}}, not {{DateTimeOffset}} (breaking change).\r\n * Change {{Date32Array.GetDate()}} and {{Date64Array.GetDate()}} to return a {{DateTime}}, not {{DateTimeOffset}} (also a breaking change).\r\n\r\n\u00a0\r\n\r\nThe conversion method for a {{Date32Array}} would then look a bit like this:\r\n{code:c#}\r\nprivate static readonly DateTime Epoch = new DateTime(1970, 1, 1);\r\n\r\nprotected override int ConvertTo(DateTime value)\r\n{\r\n    return (int)(value - Epoch).TotalDays;\r\n} {code}",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 18000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C#] Date32/64Array.Builder should accept DateTime, not DateTimeOffset",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13300736/comment/17178105",
                    "id": "17178105",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=eerhardt",
                        "name": "eerhardt",
                        "key": "eerhardt",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=eerhardt&avatarId=37925",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=eerhardt&avatarId=37925",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=eerhardt&avatarId=37925",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=eerhardt&avatarId=37925"
                        },
                        "displayName": "Eric Erhardt",
                        "active": true,
                        "timeZone": "America/North_Dakota/New_Salem"
                    },
                    "body": "Issue resolved by pull request 7654\n[https://github.com/apache/arrow/pull/7654]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=eerhardt",
                        "name": "eerhardt",
                        "key": "eerhardt",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=eerhardt&avatarId=37925",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=eerhardt&avatarId=37925",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=eerhardt&avatarId=37925",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=eerhardt&avatarId=37925"
                        },
                        "displayName": "Eric Erhardt",
                        "active": true,
                        "timeZone": "America/North_Dakota/New_Salem"
                    },
                    "created": "2020-08-14T23:52:13.965+0000",
                    "updated": "2020-08-14T23:52:13.965+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0e0zs:",
        "customfield_12314139": null
    }
}