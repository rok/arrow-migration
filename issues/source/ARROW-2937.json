{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13175579",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13175579",
    "key": "ARROW-2937",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12342562",
                "id": "12342562",
                "description": "",
                "name": "0.10.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-08-06"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bryanc",
            "name": "bryanc",
            "key": "bryanc",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bryanc&avatarId=23479",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bryanc&avatarId=23479",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bryanc&avatarId=23479",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bryanc&avatarId=23479"
            },
            "displayName": "Bryan Cutler",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328933",
                "id": "12328933",
                "name": "Java"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 16200,
            "total": 16200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 16200,
            "total": 16200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2937/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 27,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13175579/worklog/128743",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2340: ARROW-2937: [Java] Followup to ARROW-2704. Make MessageReader classes immutable and clarify docs \nURL: https://github.com/apache/arrow/pull/2340#issuecomment-408895261\n \n \n   I created a new JIRA so people can see this patch outstanding for 0.10.0\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-07-30T15:03:16.695+0000",
                    "updated": "2018-07-30T15:03:16.695+0000",
                    "started": "2018-07-30T15:03:16.694+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "128743",
                    "issueId": "13175579"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13175579/worklog/128748",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "icexelloss commented on a change in pull request #2340: ARROW-2937: [Java] Followup to ARROW-2704. Make MessageReader classes immutable and clarify docs \nURL: https://github.com/apache/arrow/pull/2340#discussion_r206188197\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/ipc/message/MessageMetadataResult.java\n ##########\n @@ -0,0 +1,107 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.vector.ipc.message;\n+\n+import java.nio.ByteBuffer;\n+\n+import org.apache.arrow.flatbuf.Message;\n+\n+/**\n+ * Class to hold resulting Message metadata and buffer containing the serialized Flatbuffer\n+ * message when reading messages from a ReadChannel. This handles Message metadata only and\n+ * does not include the message body data, which should be subsequently read into an ArrowBuf.\n+ */\n+public class MessageMetadataResult {\n+\n+  /**\n+   * Construct a container to hold a deserialized Message metadata, and buffer\n+   * with the serialized Message as read from a ReadChannel.\n+   *\n+   * @param messageLength the length of the serialized Flatbuffer message in bytes\n+   * @param messageBuffer contains the serialized Flatbuffer Message metadata\n+   * @param message the deserialized Flatbuffer Message metadata description\n+   */\n+  MessageMetadataResult(int messageLength, ByteBuffer messageBuffer, Message message) {\n+    this.messageLength = messageLength;\n+    this.messageBuffer = messageBuffer;\n+    this.message = message;\n+  }\n+\n+  /**\n+   * Returns status indicating if the MessageResult has a valid message.\n+   *\n+   * @return true if the result contains a valid message\n+   */\n+  public boolean hasMessage() {\n+    return message != null;\n+  }\n+\n+  /**\n+   * Get the length of the message in bytes.\n+   *\n+   * @return number of bytes in the message buffer.\n+   */\n+  public int getMessageLength() {\n+    return messageLength;\n+  }\n+\n+  /**\n+   * Get the buffer containing the raw message bytes.\n+   *\n+   * @return buffer containing the message\n+   */\n+  public ByteBuffer getMessageBuffer() {\n+    return messageBuffer;\n+  }\n+\n+  /**\n+   * Check if the message is valid and is followed by a body.\n+   *\n+   * @return true if message has a body\n+   */\n+  public boolean messageHasBody() {\n \n Review comment:\n   nit: Why is this not `hasMessageBody`?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-07-30T15:13:36.634+0000",
                    "updated": "2018-07-30T15:13:36.634+0000",
                    "started": "2018-07-30T15:13:36.633+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "128748",
                    "issueId": "13175579"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13175579/worklog/128749",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "icexelloss commented on a change in pull request #2340: ARROW-2937: [Java] Followup to ARROW-2704. Make MessageReader classes immutable and clarify docs \nURL: https://github.com/apache/arrow/pull/2340#discussion_r206191850\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/ipc/message/MessageMetadataResult.java\n ##########\n @@ -0,0 +1,107 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.vector.ipc.message;\n+\n+import java.nio.ByteBuffer;\n+\n+import org.apache.arrow.flatbuf.Message;\n+\n+/**\n+ * Class to hold resulting Message metadata and buffer containing the serialized Flatbuffer\n+ * message when reading messages from a ReadChannel. This handles Message metadata only and\n+ * does not include the message body data, which should be subsequently read into an ArrowBuf.\n+ */\n+public class MessageMetadataResult {\n+\n+  /**\n+   * Construct a container to hold a deserialized Message metadata, and buffer\n+   * with the serialized Message as read from a ReadChannel.\n+   *\n+   * @param messageLength the length of the serialized Flatbuffer message in bytes\n+   * @param messageBuffer contains the serialized Flatbuffer Message metadata\n+   * @param message the deserialized Flatbuffer Message metadata description\n+   */\n+  MessageMetadataResult(int messageLength, ByteBuffer messageBuffer, Message message) {\n+    this.messageLength = messageLength;\n+    this.messageBuffer = messageBuffer;\n+    this.message = message;\n+  }\n+\n+  /**\n+   * Returns status indicating if the MessageResult has a valid message.\n+   *\n+   * @return true if the result contains a valid message\n+   */\n+  public boolean hasMessage() {\n+    return message != null;\n+  }\n+\n+  /**\n+   * Get the length of the message in bytes.\n+   *\n+   * @return number of bytes in the message buffer.\n+   */\n+  public int getMessageLength() {\n+    return messageLength;\n+  }\n+\n+  /**\n+   * Get the buffer containing the raw message bytes.\n+   *\n+   * @return buffer containing the message\n+   */\n+  public ByteBuffer getMessageBuffer() {\n+    return messageBuffer;\n+  }\n+\n+  /**\n+   * Check if the message is valid and is followed by a body.\n+   *\n+   * @return true if message has a body\n+   */\n+  public boolean messageHasBody() {\n+    return message != null && message.bodyLength() > 0;\n+  }\n+\n+  /**\n+   * Get the length of the message body.\n+   *\n+   * @return number of bytes of the message body\n+   */\n+  public long getMessageBodyLength() {\n+    long bodyLength = 0;\n+    if (message != null) {\n+      bodyLength = message.bodyLength();\n+    }\n+    return bodyLength;\n+  }\n+\n+  /**\n+   * Get the realized flatbuf Message.\n+   *\n+   * @return Message\n+   */\n+  public Message getMessage() {\n+    return message;\n+  }\n+\n+  private int messageLength;\n \n Review comment:\n   add `final`?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-07-30T15:17:27.186+0000",
                    "updated": "2018-07-30T15:17:27.186+0000",
                    "started": "2018-07-30T15:17:27.185+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "128749",
                    "issueId": "13175579"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13175579/worklog/128750",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "icexelloss commented on a change in pull request #2340: ARROW-2937: [Java] Followup to ARROW-2704. Make MessageReader classes immutable and clarify docs \nURL: https://github.com/apache/arrow/pull/2340#discussion_r206192225\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/ipc/message/MessageResult.java\n ##########\n @@ -0,0 +1,62 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.vector.ipc.message;\n+\n+import io.netty.buffer.ArrowBuf;\n+import org.apache.arrow.flatbuf.Message;\n+\n+/**\n+ * Class to hold the Message metadata and body data when reading messages through a\n+ * MessageChannelReader.\n+ */\n+public class MessageResult {\n+\n+  /**\n+   * Construct with a valid Message metadata and optional ArrowBuf containing message body\n+   * data, if any.\n+   *\n+   * @param message Deserialized Flatbuffer Message metadata description\n+   * @param bodyBuffer Optional ArrowBuf containing message body data\n+   */\n+  public MessageResult(Message message, ArrowBuf bodyBuffer) {\n+    this.message = message;\n+    this.bodyBuffer = bodyBuffer;\n+  }\n+\n+  /**\n+   * Get the Message metadata.\n+   *\n+   * @return the Flatbuffer Message metadata\n+   */\n+  public Message getMessage() {\n+    return message;\n+  }\n+\n+  /**\n+   * Get the message body data.\n+   *\n+   * @return an ArrowBuf containing the message body data or null if the message has no body\n+   */\n+  public ArrowBuf getBodyBuffer() {\n+    return bodyBuffer;\n+  }\n+\n+  private Message message;\n \n Review comment:\n   add `final`?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-07-30T15:17:50.385+0000",
                    "updated": "2018-07-30T15:17:50.385+0000",
                    "started": "2018-07-30T15:17:50.384+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "128750",
                    "issueId": "13175579"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13175579/worklog/128752",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2340: ARROW-2937: [Java] Followup to ARROW-2704. Make MessageReader classes immutable and clarify docs \nURL: https://github.com/apache/arrow/pull/2340#discussion_r206193422\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/ipc/message/MessageMetadataResult.java\n ##########\n @@ -0,0 +1,107 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.vector.ipc.message;\n+\n+import java.nio.ByteBuffer;\n+\n+import org.apache.arrow.flatbuf.Message;\n+\n+/**\n+ * Class to hold resulting Message metadata and buffer containing the serialized Flatbuffer\n+ * message when reading messages from a ReadChannel. This handles Message metadata only and\n+ * does not include the message body data, which should be subsequently read into an ArrowBuf.\n+ */\n+public class MessageMetadataResult {\n+\n+  /**\n+   * Construct a container to hold a deserialized Message metadata, and buffer\n+   * with the serialized Message as read from a ReadChannel.\n+   *\n+   * @param messageLength the length of the serialized Flatbuffer message in bytes\n+   * @param messageBuffer contains the serialized Flatbuffer Message metadata\n+   * @param message the deserialized Flatbuffer Message metadata description\n+   */\n+  MessageMetadataResult(int messageLength, ByteBuffer messageBuffer, Message message) {\n+    this.messageLength = messageLength;\n+    this.messageBuffer = messageBuffer;\n+    this.message = message;\n+  }\n+\n+  /**\n+   * Returns status indicating if the MessageResult has a valid message.\n+   *\n+   * @return true if the result contains a valid message\n+   */\n+  public boolean hasMessage() {\n+    return message != null;\n+  }\n+\n+  /**\n+   * Get the length of the message in bytes.\n+   *\n+   * @return number of bytes in the message buffer.\n+   */\n+  public int getMessageLength() {\n+    return messageLength;\n+  }\n+\n+  /**\n+   * Get the buffer containing the raw message bytes.\n+   *\n+   * @return buffer containing the message\n+   */\n+  public ByteBuffer getMessageBuffer() {\n+    return messageBuffer;\n+  }\n+\n+  /**\n+   * Check if the message is valid and is followed by a body.\n+   *\n+   * @return true if message has a body\n+   */\n+  public boolean messageHasBody() {\n \n Review comment:\n   I think this goes with the idea that the body is separate from the message, rather than part of it. Either name seems fine to me \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-07-30T15:19:23.698+0000",
                    "updated": "2018-07-30T15:19:23.698+0000",
                    "started": "2018-07-30T15:19:23.698+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "128752",
                    "issueId": "13175579"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13175579/worklog/128753",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "icexelloss commented on a change in pull request #2340: ARROW-2937: [Java] Followup to ARROW-2704. Make MessageReader classes immutable and clarify docs \nURL: https://github.com/apache/arrow/pull/2340#discussion_r206193595\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/ipc/message/MessageMetadataResult.java\n ##########\n @@ -0,0 +1,107 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.vector.ipc.message;\n+\n+import java.nio.ByteBuffer;\n+\n+import org.apache.arrow.flatbuf.Message;\n+\n+/**\n+ * Class to hold resulting Message metadata and buffer containing the serialized Flatbuffer\n+ * message when reading messages from a ReadChannel. This handles Message metadata only and\n+ * does not include the message body data, which should be subsequently read into an ArrowBuf.\n+ */\n+public class MessageMetadataResult {\n+\n+  /**\n+   * Construct a container to hold a deserialized Message metadata, and buffer\n+   * with the serialized Message as read from a ReadChannel.\n+   *\n+   * @param messageLength the length of the serialized Flatbuffer message in bytes\n+   * @param messageBuffer contains the serialized Flatbuffer Message metadata\n+   * @param message the deserialized Flatbuffer Message metadata description\n+   */\n+  MessageMetadataResult(int messageLength, ByteBuffer messageBuffer, Message message) {\n+    this.messageLength = messageLength;\n+    this.messageBuffer = messageBuffer;\n+    this.message = message;\n+  }\n+\n+  /**\n+   * Returns status indicating if the MessageResult has a valid message.\n+   *\n+   * @return true if the result contains a valid message\n+   */\n+  public boolean hasMessage() {\n+    return message != null;\n+  }\n+\n+  /**\n+   * Get the length of the message in bytes.\n+   *\n+   * @return number of bytes in the message buffer.\n+   */\n+  public int getMessageLength() {\n+    return messageLength;\n+  }\n+\n+  /**\n+   * Get the buffer containing the raw message bytes.\n+   *\n+   * @return buffer containing the message\n+   */\n+  public ByteBuffer getMessageBuffer() {\n+    return messageBuffer;\n+  }\n+\n+  /**\n+   * Check if the message is valid and is followed by a body.\n+   *\n+   * @return true if message has a body\n+   */\n+  public boolean messageHasBody() {\n+    return message != null && message.bodyLength() > 0;\n+  }\n+\n+  /**\n+   * Get the length of the message body.\n+   *\n+   * @return number of bytes of the message body\n+   */\n+  public long getMessageBodyLength() {\n+    long bodyLength = 0;\n+    if (message != null) {\n \n Review comment:\n   is it better to throw exception here if message is null? Or at least document if message is null, this function will return 0.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-07-30T15:19:43.037+0000",
                    "updated": "2018-07-30T15:19:43.037+0000",
                    "started": "2018-07-30T15:19:43.036+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "128753",
                    "issueId": "13175579"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13175579/worklog/128761",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "icexelloss commented on issue #2340: ARROW-2937: [Java] Followup to ARROW-2704. Make MessageReader classes immutable and clarify docs \nURL: https://github.com/apache/arrow/pull/2340#issuecomment-408903456\n \n \n   LGTM besides the comments.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-07-30T15:25:31.125+0000",
                    "updated": "2018-07-30T15:25:31.125+0000",
                    "started": "2018-07-30T15:25:31.125+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "128761",
                    "issueId": "13175579"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13175579/worklog/128765",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "BryanCutler commented on a change in pull request #2340: ARROW-2937: [Java] Followup to ARROW-2704. Make MessageReader classes immutable and clarify docs \nURL: https://github.com/apache/arrow/pull/2340#discussion_r206221589\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/ipc/message/MessageMetadataResult.java\n ##########\n @@ -0,0 +1,107 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.vector.ipc.message;\n+\n+import java.nio.ByteBuffer;\n+\n+import org.apache.arrow.flatbuf.Message;\n+\n+/**\n+ * Class to hold resulting Message metadata and buffer containing the serialized Flatbuffer\n+ * message when reading messages from a ReadChannel. This handles Message metadata only and\n+ * does not include the message body data, which should be subsequently read into an ArrowBuf.\n+ */\n+public class MessageMetadataResult {\n+\n+  /**\n+   * Construct a container to hold a deserialized Message metadata, and buffer\n+   * with the serialized Message as read from a ReadChannel.\n+   *\n+   * @param messageLength the length of the serialized Flatbuffer message in bytes\n+   * @param messageBuffer contains the serialized Flatbuffer Message metadata\n+   * @param message the deserialized Flatbuffer Message metadata description\n+   */\n+  MessageMetadataResult(int messageLength, ByteBuffer messageBuffer, Message message) {\n+    this.messageLength = messageLength;\n+    this.messageBuffer = messageBuffer;\n+    this.message = message;\n+  }\n+\n+  /**\n+   * Returns status indicating if the MessageResult has a valid message.\n+   *\n+   * @return true if the result contains a valid message\n+   */\n+  public boolean hasMessage() {\n+    return message != null;\n+  }\n+\n+  /**\n+   * Get the length of the message in bytes.\n+   *\n+   * @return number of bytes in the message buffer.\n+   */\n+  public int getMessageLength() {\n+    return messageLength;\n+  }\n+\n+  /**\n+   * Get the buffer containing the raw message bytes.\n+   *\n+   * @return buffer containing the message\n+   */\n+  public ByteBuffer getMessageBuffer() {\n+    return messageBuffer;\n+  }\n+\n+  /**\n+   * Check if the message is valid and is followed by a body.\n+   *\n+   * @return true if message has a body\n+   */\n+  public boolean messageHasBody() {\n \n Review comment:\n   Yeah, I didn't want it to sound like this class also contained the body. I'll make the description a little better here.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-07-30T15:52:26.916+0000",
                    "updated": "2018-07-30T15:52:26.916+0000",
                    "started": "2018-07-30T15:52:26.915+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "128765",
                    "issueId": "13175579"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13175579/worklog/128766",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "icexelloss commented on a change in pull request #2340: ARROW-2937: [Java] Followup to ARROW-2704. Make MessageReader classes immutable and clarify docs \nURL: https://github.com/apache/arrow/pull/2340#discussion_r206225304\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/ipc/message/MessageMetadataResult.java\n ##########\n @@ -0,0 +1,107 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.vector.ipc.message;\n+\n+import java.nio.ByteBuffer;\n+\n+import org.apache.arrow.flatbuf.Message;\n+\n+/**\n+ * Class to hold resulting Message metadata and buffer containing the serialized Flatbuffer\n+ * message when reading messages from a ReadChannel. This handles Message metadata only and\n+ * does not include the message body data, which should be subsequently read into an ArrowBuf.\n+ */\n+public class MessageMetadataResult {\n+\n+  /**\n+   * Construct a container to hold a deserialized Message metadata, and buffer\n+   * with the serialized Message as read from a ReadChannel.\n+   *\n+   * @param messageLength the length of the serialized Flatbuffer message in bytes\n+   * @param messageBuffer contains the serialized Flatbuffer Message metadata\n+   * @param message the deserialized Flatbuffer Message metadata description\n+   */\n+  MessageMetadataResult(int messageLength, ByteBuffer messageBuffer, Message message) {\n+    this.messageLength = messageLength;\n+    this.messageBuffer = messageBuffer;\n+    this.message = message;\n+  }\n+\n+  /**\n+   * Returns status indicating if the MessageResult has a valid message.\n+   *\n+   * @return true if the result contains a valid message\n+   */\n+  public boolean hasMessage() {\n+    return message != null;\n+  }\n+\n+  /**\n+   * Get the length of the message in bytes.\n+   *\n+   * @return number of bytes in the message buffer.\n+   */\n+  public int getMessageLength() {\n+    return messageLength;\n+  }\n+\n+  /**\n+   * Get the buffer containing the raw message bytes.\n+   *\n+   * @return buffer containing the message\n+   */\n+  public ByteBuffer getMessageBuffer() {\n+    return messageBuffer;\n+  }\n+\n+  /**\n+   * Check if the message is valid and is followed by a body.\n+   *\n+   * @return true if message has a body\n+   */\n+  public boolean messageHasBody() {\n \n Review comment:\n   I see. There is another function `getMessageBodyLength`. By using looking at the function name `messageHasBody` and `getMessageBodyLength` the API naming feels not too consistent. Does it make sense to rename `getMessageBodyLength` to `messageGetBodyLength` then?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-07-30T15:57:00.957+0000",
                    "updated": "2018-07-30T15:57:00.957+0000",
                    "started": "2018-07-30T15:57:00.957+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "128766",
                    "issueId": "13175579"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13175579/worklog/128767",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "icexelloss commented on a change in pull request #2340: ARROW-2937: [Java] Followup to ARROW-2704. Make MessageReader classes immutable and clarify docs \nURL: https://github.com/apache/arrow/pull/2340#discussion_r206225304\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/ipc/message/MessageMetadataResult.java\n ##########\n @@ -0,0 +1,107 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.vector.ipc.message;\n+\n+import java.nio.ByteBuffer;\n+\n+import org.apache.arrow.flatbuf.Message;\n+\n+/**\n+ * Class to hold resulting Message metadata and buffer containing the serialized Flatbuffer\n+ * message when reading messages from a ReadChannel. This handles Message metadata only and\n+ * does not include the message body data, which should be subsequently read into an ArrowBuf.\n+ */\n+public class MessageMetadataResult {\n+\n+  /**\n+   * Construct a container to hold a deserialized Message metadata, and buffer\n+   * with the serialized Message as read from a ReadChannel.\n+   *\n+   * @param messageLength the length of the serialized Flatbuffer message in bytes\n+   * @param messageBuffer contains the serialized Flatbuffer Message metadata\n+   * @param message the deserialized Flatbuffer Message metadata description\n+   */\n+  MessageMetadataResult(int messageLength, ByteBuffer messageBuffer, Message message) {\n+    this.messageLength = messageLength;\n+    this.messageBuffer = messageBuffer;\n+    this.message = message;\n+  }\n+\n+  /**\n+   * Returns status indicating if the MessageResult has a valid message.\n+   *\n+   * @return true if the result contains a valid message\n+   */\n+  public boolean hasMessage() {\n+    return message != null;\n+  }\n+\n+  /**\n+   * Get the length of the message in bytes.\n+   *\n+   * @return number of bytes in the message buffer.\n+   */\n+  public int getMessageLength() {\n+    return messageLength;\n+  }\n+\n+  /**\n+   * Get the buffer containing the raw message bytes.\n+   *\n+   * @return buffer containing the message\n+   */\n+  public ByteBuffer getMessageBuffer() {\n+    return messageBuffer;\n+  }\n+\n+  /**\n+   * Check if the message is valid and is followed by a body.\n+   *\n+   * @return true if message has a body\n+   */\n+  public boolean messageHasBody() {\n \n Review comment:\n   I see. There is another function `getMessageBodyLength`. By just looking at the function name `messageHasBody` and `getMessageBodyLength` the API naming feels not too consistent. Does it make sense to rename `getMessageBodyLength` to `messageGetBodyLength` then?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-07-30T15:57:46.194+0000",
                    "updated": "2018-07-30T15:57:46.194+0000",
                    "started": "2018-07-30T15:57:46.193+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "128767",
                    "issueId": "13175579"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13175579/worklog/128769",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "BryanCutler commented on a change in pull request #2340: ARROW-2937: [Java] Followup to ARROW-2704. Make MessageReader classes immutable and clarify docs \nURL: https://github.com/apache/arrow/pull/2340#discussion_r206228526\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/ipc/message/MessageMetadataResult.java\n ##########\n @@ -0,0 +1,107 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.vector.ipc.message;\n+\n+import java.nio.ByteBuffer;\n+\n+import org.apache.arrow.flatbuf.Message;\n+\n+/**\n+ * Class to hold resulting Message metadata and buffer containing the serialized Flatbuffer\n+ * message when reading messages from a ReadChannel. This handles Message metadata only and\n+ * does not include the message body data, which should be subsequently read into an ArrowBuf.\n+ */\n+public class MessageMetadataResult {\n+\n+  /**\n+   * Construct a container to hold a deserialized Message metadata, and buffer\n+   * with the serialized Message as read from a ReadChannel.\n+   *\n+   * @param messageLength the length of the serialized Flatbuffer message in bytes\n+   * @param messageBuffer contains the serialized Flatbuffer Message metadata\n+   * @param message the deserialized Flatbuffer Message metadata description\n+   */\n+  MessageMetadataResult(int messageLength, ByteBuffer messageBuffer, Message message) {\n+    this.messageLength = messageLength;\n+    this.messageBuffer = messageBuffer;\n+    this.message = message;\n+  }\n+\n+  /**\n+   * Returns status indicating if the MessageResult has a valid message.\n+   *\n+   * @return true if the result contains a valid message\n+   */\n+  public boolean hasMessage() {\n+    return message != null;\n+  }\n+\n+  /**\n+   * Get the length of the message in bytes.\n+   *\n+   * @return number of bytes in the message buffer.\n+   */\n+  public int getMessageLength() {\n+    return messageLength;\n+  }\n+\n+  /**\n+   * Get the buffer containing the raw message bytes.\n+   *\n+   * @return buffer containing the message\n+   */\n+  public ByteBuffer getMessageBuffer() {\n+    return messageBuffer;\n+  }\n+\n+  /**\n+   * Check if the message is valid and is followed by a body.\n+   *\n+   * @return true if message has a body\n+   */\n+  public boolean messageHasBody() {\n+    return message != null && message.bodyLength() > 0;\n+  }\n+\n+  /**\n+   * Get the length of the message body.\n+   *\n+   * @return number of bytes of the message body\n+   */\n+  public long getMessageBodyLength() {\n+    long bodyLength = 0;\n+    if (message != null) {\n \n Review comment:\n   I'll update the docs a little here too\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-07-30T16:00:52.183+0000",
                    "updated": "2018-07-30T16:00:52.183+0000",
                    "started": "2018-07-30T16:00:52.182+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "128769",
                    "issueId": "13175579"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13175579/worklog/128774",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "BryanCutler commented on a change in pull request #2340: ARROW-2937: [Java] Followup to ARROW-2704. Make MessageReader classes immutable and clarify docs \nURL: https://github.com/apache/arrow/pull/2340#discussion_r206234986\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/ipc/message/MessageMetadataResult.java\n ##########\n @@ -0,0 +1,107 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.vector.ipc.message;\n+\n+import java.nio.ByteBuffer;\n+\n+import org.apache.arrow.flatbuf.Message;\n+\n+/**\n+ * Class to hold resulting Message metadata and buffer containing the serialized Flatbuffer\n+ * message when reading messages from a ReadChannel. This handles Message metadata only and\n+ * does not include the message body data, which should be subsequently read into an ArrowBuf.\n+ */\n+public class MessageMetadataResult {\n+\n+  /**\n+   * Construct a container to hold a deserialized Message metadata, and buffer\n+   * with the serialized Message as read from a ReadChannel.\n+   *\n+   * @param messageLength the length of the serialized Flatbuffer message in bytes\n+   * @param messageBuffer contains the serialized Flatbuffer Message metadata\n+   * @param message the deserialized Flatbuffer Message metadata description\n+   */\n+  MessageMetadataResult(int messageLength, ByteBuffer messageBuffer, Message message) {\n+    this.messageLength = messageLength;\n+    this.messageBuffer = messageBuffer;\n+    this.message = message;\n+  }\n+\n+  /**\n+   * Returns status indicating if the MessageResult has a valid message.\n+   *\n+   * @return true if the result contains a valid message\n+   */\n+  public boolean hasMessage() {\n+    return message != null;\n+  }\n+\n+  /**\n+   * Get the length of the message in bytes.\n+   *\n+   * @return number of bytes in the message buffer.\n+   */\n+  public int getMessageLength() {\n+    return messageLength;\n+  }\n+\n+  /**\n+   * Get the buffer containing the raw message bytes.\n+   *\n+   * @return buffer containing the message\n+   */\n+  public ByteBuffer getMessageBuffer() {\n+    return messageBuffer;\n+  }\n+\n+  /**\n+   * Check if the message is valid and is followed by a body.\n+   *\n+   * @return true if message has a body\n+   */\n+  public boolean messageHasBody() {\n \n Review comment:\n   Hmm, I don't know. `Message` has a field `bodyLength` so I think `getMessageBodyLength()` is appropriate. Maybe if it's too confusing we should just get rid of `messageHasBody`?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-07-30T16:20:09.198+0000",
                    "updated": "2018-07-30T16:20:09.198+0000",
                    "started": "2018-07-30T16:20:09.198+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "128774",
                    "issueId": "13175579"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13175579/worklog/128778",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "BryanCutler commented on a change in pull request #2340: ARROW-2937: [Java] Followup to ARROW-2704. Make MessageReader classes immutable and clarify docs \nURL: https://github.com/apache/arrow/pull/2340#discussion_r206238833\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/ipc/message/MessageMetadataResult.java\n ##########\n @@ -0,0 +1,107 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.vector.ipc.message;\n+\n+import java.nio.ByteBuffer;\n+\n+import org.apache.arrow.flatbuf.Message;\n+\n+/**\n+ * Class to hold resulting Message metadata and buffer containing the serialized Flatbuffer\n+ * message when reading messages from a ReadChannel. This handles Message metadata only and\n+ * does not include the message body data, which should be subsequently read into an ArrowBuf.\n+ */\n+public class MessageMetadataResult {\n+\n+  /**\n+   * Construct a container to hold a deserialized Message metadata, and buffer\n+   * with the serialized Message as read from a ReadChannel.\n+   *\n+   * @param messageLength the length of the serialized Flatbuffer message in bytes\n+   * @param messageBuffer contains the serialized Flatbuffer Message metadata\n+   * @param message the deserialized Flatbuffer Message metadata description\n+   */\n+  MessageMetadataResult(int messageLength, ByteBuffer messageBuffer, Message message) {\n+    this.messageLength = messageLength;\n+    this.messageBuffer = messageBuffer;\n+    this.message = message;\n+  }\n+\n+  /**\n+   * Returns status indicating if the MessageResult has a valid message.\n+   *\n+   * @return true if the result contains a valid message\n+   */\n+  public boolean hasMessage() {\n+    return message != null;\n+  }\n+\n+  /**\n+   * Get the length of the message in bytes.\n+   *\n+   * @return number of bytes in the message buffer.\n+   */\n+  public int getMessageLength() {\n+    return messageLength;\n+  }\n+\n+  /**\n+   * Get the buffer containing the raw message bytes.\n+   *\n+   * @return buffer containing the message\n+   */\n+  public ByteBuffer getMessageBuffer() {\n+    return messageBuffer;\n+  }\n+\n+  /**\n+   * Check if the message is valid and is followed by a body.\n+   *\n+   * @return true if message has a body\n+   */\n+  public boolean messageHasBody() {\n+    return message != null && message.bodyLength() > 0;\n+  }\n+\n+  /**\n+   * Get the length of the message body.\n+   *\n+   * @return number of bytes of the message body\n+   */\n+  public long getMessageBodyLength() {\n+    long bodyLength = 0;\n+    if (message != null) {\n \n Review comment:\n   @icexelloss how about `MessageSerializer.readMessage` returns NULL if there isn't a valid message? Then this object would only be created with an actual Message and we wouldn't need these `message != null` checks. It would be consistent with `MessageChannelReader.readNext` which can return NULL also.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-07-30T16:31:58.931+0000",
                    "updated": "2018-07-30T16:31:58.931+0000",
                    "started": "2018-07-30T16:31:58.930+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "128778",
                    "issueId": "13175579"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13175579/worklog/128803",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "BryanCutler commented on a change in pull request #2340: ARROW-2937: [Java] Followup to ARROW-2704. Make MessageReader classes immutable and clarify docs \nURL: https://github.com/apache/arrow/pull/2340#discussion_r206248115\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/ipc/message/MessageMetadataResult.java\n ##########\n @@ -0,0 +1,107 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.vector.ipc.message;\n+\n+import java.nio.ByteBuffer;\n+\n+import org.apache.arrow.flatbuf.Message;\n+\n+/**\n+ * Class to hold resulting Message metadata and buffer containing the serialized Flatbuffer\n+ * message when reading messages from a ReadChannel. This handles Message metadata only and\n+ * does not include the message body data, which should be subsequently read into an ArrowBuf.\n+ */\n+public class MessageMetadataResult {\n+\n+  /**\n+   * Construct a container to hold a deserialized Message metadata, and buffer\n+   * with the serialized Message as read from a ReadChannel.\n+   *\n+   * @param messageLength the length of the serialized Flatbuffer message in bytes\n+   * @param messageBuffer contains the serialized Flatbuffer Message metadata\n+   * @param message the deserialized Flatbuffer Message metadata description\n+   */\n+  MessageMetadataResult(int messageLength, ByteBuffer messageBuffer, Message message) {\n+    this.messageLength = messageLength;\n+    this.messageBuffer = messageBuffer;\n+    this.message = message;\n+  }\n+\n+  /**\n+   * Returns status indicating if the MessageResult has a valid message.\n+   *\n+   * @return true if the result contains a valid message\n+   */\n+  public boolean hasMessage() {\n+    return message != null;\n+  }\n+\n+  /**\n+   * Get the length of the message in bytes.\n+   *\n+   * @return number of bytes in the message buffer.\n+   */\n+  public int getMessageLength() {\n+    return messageLength;\n+  }\n+\n+  /**\n+   * Get the buffer containing the raw message bytes.\n+   *\n+   * @return buffer containing the message\n+   */\n+  public ByteBuffer getMessageBuffer() {\n+    return messageBuffer;\n+  }\n+\n+  /**\n+   * Check if the message is valid and is followed by a body.\n+   *\n+   * @return true if message has a body\n+   */\n+  public boolean messageHasBody() {\n+    return message != null && message.bodyLength() > 0;\n+  }\n+\n+  /**\n+   * Get the length of the message body.\n+   *\n+   * @return number of bytes of the message body\n+   */\n+  public long getMessageBodyLength() {\n+    long bodyLength = 0;\n+    if (message != null) {\n \n Review comment:\n   I made the above change so this class can only have a valid message and it seems cleaner to me, let me know if you prefer otherwise\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-07-30T17:01:13.504+0000",
                    "updated": "2018-07-30T17:01:13.504+0000",
                    "started": "2018-07-30T17:01:13.503+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "128803",
                    "issueId": "13175579"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13175579/worklog/128809",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "icexelloss commented on a change in pull request #2340: ARROW-2937: [Java] Followup to ARROW-2704. Make MessageReader classes immutable and clarify docs \nURL: https://github.com/apache/arrow/pull/2340#discussion_r206255562\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/ipc/message/MessageMetadataResult.java\n ##########\n @@ -0,0 +1,96 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.vector.ipc.message;\n+\n+import java.nio.ByteBuffer;\n+\n+import org.apache.arrow.flatbuf.Message;\n+\n+/**\n+ * Class to hold resulting Message metadata and buffer containing the serialized Flatbuffer\n+ * message when reading messages from a ReadChannel. This handles Message metadata only and\n+ * does not include the message body data, which should be subsequently read into an ArrowBuf.\n+ */\n+public class MessageMetadataResult {\n+\n+  /**\n+   * Construct a container to hold a deserialized Message metadata, and buffer\n+   * with the serialized Message as read from a ReadChannel.\n+   *\n+   * @param messageLength the length of the serialized Flatbuffer message in bytes\n+   * @param messageBuffer contains the serialized Flatbuffer Message metadata\n+   * @param message the deserialized Flatbuffer Message metadata description\n+   */\n+  MessageMetadataResult(int messageLength, ByteBuffer messageBuffer, Message message) {\n+    this.messageLength = messageLength;\n+    this.messageBuffer = messageBuffer;\n+    this.message = message;\n \n Review comment:\n   Should we check the args here? (`messageLength >= 0`, `messageBuffer` and `message` are not null and `messageLength` matches `messageBuffer` size?)\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-07-30T17:25:04.265+0000",
                    "updated": "2018-07-30T17:25:04.265+0000",
                    "started": "2018-07-30T17:25:04.265+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "128809",
                    "issueId": "13175579"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13175579/worklog/128812",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "icexelloss commented on a change in pull request #2340: ARROW-2937: [Java] Followup to ARROW-2704. Make MessageReader classes immutable and clarify docs \nURL: https://github.com/apache/arrow/pull/2340#discussion_r206256291\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/ipc/message/MessageResult.java\n ##########\n @@ -0,0 +1,62 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.vector.ipc.message;\n+\n+import io.netty.buffer.ArrowBuf;\n+import org.apache.arrow.flatbuf.Message;\n+\n+/**\n+ * Class to hold the Message metadata and body data when reading messages through a\n+ * MessageChannelReader.\n+ */\n+public class MessageResult {\n+\n+  /**\n+   * Construct with a valid Message metadata and optional ArrowBuf containing message body\n+   * data, if any.\n+   *\n+   * @param message Deserialized Flatbuffer Message metadata description\n+   * @param bodyBuffer Optional ArrowBuf containing message body data\n+   */\n+  public MessageResult(Message message, ArrowBuf bodyBuffer) {\n+    this.message = message;\n \n Review comment:\n   Can `message` and/or `bodyBuffer` be null here? Maybe check if the args are valid? \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-07-30T17:27:14.338+0000",
                    "updated": "2018-07-30T17:27:14.338+0000",
                    "started": "2018-07-30T17:27:14.338+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "128812",
                    "issueId": "13175579"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13175579/worklog/128813",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "icexelloss commented on a change in pull request #2340: ARROW-2937: [Java] Followup to ARROW-2704. Make MessageReader classes immutable and clarify docs \nURL: https://github.com/apache/arrow/pull/2340#discussion_r206256630\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/ipc/message/MessageMetadataResult.java\n ##########\n @@ -0,0 +1,107 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.vector.ipc.message;\n+\n+import java.nio.ByteBuffer;\n+\n+import org.apache.arrow.flatbuf.Message;\n+\n+/**\n+ * Class to hold resulting Message metadata and buffer containing the serialized Flatbuffer\n+ * message when reading messages from a ReadChannel. This handles Message metadata only and\n+ * does not include the message body data, which should be subsequently read into an ArrowBuf.\n+ */\n+public class MessageMetadataResult {\n+\n+  /**\n+   * Construct a container to hold a deserialized Message metadata, and buffer\n+   * with the serialized Message as read from a ReadChannel.\n+   *\n+   * @param messageLength the length of the serialized Flatbuffer message in bytes\n+   * @param messageBuffer contains the serialized Flatbuffer Message metadata\n+   * @param message the deserialized Flatbuffer Message metadata description\n+   */\n+  MessageMetadataResult(int messageLength, ByteBuffer messageBuffer, Message message) {\n+    this.messageLength = messageLength;\n+    this.messageBuffer = messageBuffer;\n+    this.message = message;\n+  }\n+\n+  /**\n+   * Returns status indicating if the MessageResult has a valid message.\n+   *\n+   * @return true if the result contains a valid message\n+   */\n+  public boolean hasMessage() {\n+    return message != null;\n+  }\n+\n+  /**\n+   * Get the length of the message in bytes.\n+   *\n+   * @return number of bytes in the message buffer.\n+   */\n+  public int getMessageLength() {\n+    return messageLength;\n+  }\n+\n+  /**\n+   * Get the buffer containing the raw message bytes.\n+   *\n+   * @return buffer containing the message\n+   */\n+  public ByteBuffer getMessageBuffer() {\n+    return messageBuffer;\n+  }\n+\n+  /**\n+   * Check if the message is valid and is followed by a body.\n+   *\n+   * @return true if message has a body\n+   */\n+  public boolean messageHasBody() {\n+    return message != null && message.bodyLength() > 0;\n+  }\n+\n+  /**\n+   * Get the length of the message body.\n+   *\n+   * @return number of bytes of the message body\n+   */\n+  public long getMessageBodyLength() {\n+    long bodyLength = 0;\n+    if (message != null) {\n \n Review comment:\n   Yeah I think it's cleaner now. Thanks!\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-07-30T17:28:17.602+0000",
                    "updated": "2018-07-30T17:28:17.602+0000",
                    "started": "2018-07-30T17:28:17.601+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "128813",
                    "issueId": "13175579"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13175579/worklog/128814",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "icexelloss commented on a change in pull request #2340: ARROW-2937: [Java] Followup to ARROW-2704. Make MessageReader classes immutable and clarify docs \nURL: https://github.com/apache/arrow/pull/2340#discussion_r206257581\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/ipc/message/MessageMetadataResult.java\n ##########\n @@ -0,0 +1,107 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.vector.ipc.message;\n+\n+import java.nio.ByteBuffer;\n+\n+import org.apache.arrow.flatbuf.Message;\n+\n+/**\n+ * Class to hold resulting Message metadata and buffer containing the serialized Flatbuffer\n+ * message when reading messages from a ReadChannel. This handles Message metadata only and\n+ * does not include the message body data, which should be subsequently read into an ArrowBuf.\n+ */\n+public class MessageMetadataResult {\n+\n+  /**\n+   * Construct a container to hold a deserialized Message metadata, and buffer\n+   * with the serialized Message as read from a ReadChannel.\n+   *\n+   * @param messageLength the length of the serialized Flatbuffer message in bytes\n+   * @param messageBuffer contains the serialized Flatbuffer Message metadata\n+   * @param message the deserialized Flatbuffer Message metadata description\n+   */\n+  MessageMetadataResult(int messageLength, ByteBuffer messageBuffer, Message message) {\n+    this.messageLength = messageLength;\n+    this.messageBuffer = messageBuffer;\n+    this.message = message;\n+  }\n+\n+  /**\n+   * Returns status indicating if the MessageResult has a valid message.\n+   *\n+   * @return true if the result contains a valid message\n+   */\n+  public boolean hasMessage() {\n+    return message != null;\n+  }\n+\n+  /**\n+   * Get the length of the message in bytes.\n+   *\n+   * @return number of bytes in the message buffer.\n+   */\n+  public int getMessageLength() {\n+    return messageLength;\n+  }\n+\n+  /**\n+   * Get the buffer containing the raw message bytes.\n+   *\n+   * @return buffer containing the message\n+   */\n+  public ByteBuffer getMessageBuffer() {\n+    return messageBuffer;\n+  }\n+\n+  /**\n+   * Check if the message is valid and is followed by a body.\n+   *\n+   * @return true if message has a body\n+   */\n+  public boolean messageHasBody() {\n \n Review comment:\n   Yeah I think if this class contains just the metadata, it is a bit confusing to have this class contains methods for the body. User can always get such information from the `Message` object. \r\n   \r\n   By \"When in doubt, leave it out\" principle, I would prefer to get rid of the method too.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-07-30T17:31:15.975+0000",
                    "updated": "2018-07-30T17:31:15.975+0000",
                    "started": "2018-07-30T17:31:15.974+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "128814",
                    "issueId": "13175579"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13175579/worklog/128882",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "BryanCutler commented on a change in pull request #2340: ARROW-2937: [Java] Followup to ARROW-2704. Make MessageReader classes immutable and clarify docs \nURL: https://github.com/apache/arrow/pull/2340#discussion_r206288990\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/ipc/message/MessageMetadataResult.java\n ##########\n @@ -0,0 +1,96 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.vector.ipc.message;\n+\n+import java.nio.ByteBuffer;\n+\n+import org.apache.arrow.flatbuf.Message;\n+\n+/**\n+ * Class to hold resulting Message metadata and buffer containing the serialized Flatbuffer\n+ * message when reading messages from a ReadChannel. This handles Message metadata only and\n+ * does not include the message body data, which should be subsequently read into an ArrowBuf.\n+ */\n+public class MessageMetadataResult {\n+\n+  /**\n+   * Construct a container to hold a deserialized Message metadata, and buffer\n+   * with the serialized Message as read from a ReadChannel.\n+   *\n+   * @param messageLength the length of the serialized Flatbuffer message in bytes\n+   * @param messageBuffer contains the serialized Flatbuffer Message metadata\n+   * @param message the deserialized Flatbuffer Message metadata description\n+   */\n+  MessageMetadataResult(int messageLength, ByteBuffer messageBuffer, Message message) {\n+    this.messageLength = messageLength;\n+    this.messageBuffer = messageBuffer;\n+    this.message = message;\n \n Review comment:\n   It's a package private constructor, I don't think it's really necessary to verify all these but I can add it if you think it better\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-07-30T19:13:26.107+0000",
                    "updated": "2018-07-30T19:13:26.107+0000",
                    "started": "2018-07-30T19:13:26.106+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "128882",
                    "issueId": "13175579"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13175579/worklog/128889",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "BryanCutler commented on a change in pull request #2340: ARROW-2937: [Java] Followup to ARROW-2704. Make MessageReader classes immutable and clarify docs \nURL: https://github.com/apache/arrow/pull/2340#discussion_r206290021\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/ipc/message/MessageResult.java\n ##########\n @@ -0,0 +1,62 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.vector.ipc.message;\n+\n+import io.netty.buffer.ArrowBuf;\n+import org.apache.arrow.flatbuf.Message;\n+\n+/**\n+ * Class to hold the Message metadata and body data when reading messages through a\n+ * MessageChannelReader.\n+ */\n+public class MessageResult {\n+\n+  /**\n+   * Construct with a valid Message metadata and optional ArrowBuf containing message body\n+   * data, if any.\n+   *\n+   * @param message Deserialized Flatbuffer Message metadata description\n+   * @param bodyBuffer Optional ArrowBuf containing message body data\n+   */\n+  public MessageResult(Message message, ArrowBuf bodyBuffer) {\n+    this.message = message;\n \n Review comment:\n   I could make this constructor package private too, but again I don't think we need to check if null messages are passed in when the doc doesn't say it's optional\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-07-30T19:17:19.651+0000",
                    "updated": "2018-07-30T19:17:19.651+0000",
                    "started": "2018-07-30T19:17:19.650+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "128889",
                    "issueId": "13175579"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 16200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@513f0ceb[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@75ae282b[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2fdf3550[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@2bb4aff0[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7f79d4d7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@86955eb[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5eca9403[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@500f6b05[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6161c2bf[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@23e50575[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2905e786[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@2f9e6e0[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 16200,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Jul 30 21:39:02 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-07-30T21:39:02.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2937/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2018-07-30T15:02:39.000+0000",
        "updated": "2018-07-30T21:41:47.000+0000",
        "timeoriginalestimate": null,
        "description": "Address further code review comments from ARROW-2704",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "4.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 16200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Java] Follow-up changes to ARROW-2704",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13175579/comment/16562550",
                    "id": "16562550",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=cpcloud",
                        "name": "cpcloud",
                        "key": "cpcloud",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=cpcloud&avatarId=31265",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=cpcloud&avatarId=31265",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=cpcloud&avatarId=31265",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=cpcloud&avatarId=31265"
                        },
                        "displayName": "Phillip Cloud",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 2340\n[https://github.com/apache/arrow/pull/2340]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=cpcloud",
                        "name": "cpcloud",
                        "key": "cpcloud",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=cpcloud&avatarId=31265",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=cpcloud&avatarId=31265",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=cpcloud&avatarId=31265",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=cpcloud&avatarId=31265"
                        },
                        "displayName": "Phillip Cloud",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-07-30T21:39:02.510+0000",
                    "updated": "2018-07-30T21:39:02.510+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|i3wh7r:",
        "customfield_12314139": null
    }
}