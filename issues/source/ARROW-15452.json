{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13424739",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13424739",
    "key": "ARROW-15452",
    "fields": {
        "fixVersions": [],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/3",
            "id": "3",
            "description": "The problem is a duplicate of an existing issue.",
            "name": "Duplicate"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "FlightSQL",
            "JDBC",
            "java",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12648503",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12648503",
                "type": {
                    "id": "12310051",
                    "name": "Supercedes",
                    "inward": "is superceded by",
                    "outward": "supercedes",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310051"
                },
                "inwardIssue": {
                    "id": "13282844",
                    "key": "ARROW-7744",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13282844",
                    "fields": {
                        "summary": "[FlightRPC][Java] Implement Flight SQL JDBC Driver",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=rafaeltelles",
            "name": "rafaeltelles",
            "key": "rafaeltelles",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Rafael Telles",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
            "name": "Closed",
            "id": "6",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12334621",
                "id": "12334621",
                "name": "FlightRPC"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328933",
                "id": "12328933",
                "name": "Java"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=rafaeltelles",
            "name": "rafaeltelles",
            "key": "rafaeltelles",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Rafael Telles",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=rafaeltelles",
            "name": "rafaeltelles",
            "key": "rafaeltelles",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Rafael Telles",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 33600,
            "total": 33600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 33600,
            "total": 33600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-15452/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 56,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13424739/worklog/715886",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #12254:\nURL: https://github.com/apache/arrow/pull/12254#discussion_r792699352\n\n\n\n##########\nFile path: java/flight/flight-jdbc-driver/src/main/java/org/apache/arrow/driver/jdbc/accessor/ArrowFlightJdbcAccessorFactory.java\n##########\n@@ -0,0 +1,215 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.driver.jdbc.accessor;\n+\n+import java.util.function.IntSupplier;\n+\n+import org.apache.arrow.driver.jdbc.accessor.impl.ArrowFlightJdbcNullVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.binary.ArrowFlightJdbcBinaryVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.calendar.ArrowFlightJdbcDateVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.calendar.ArrowFlightJdbcDurationVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.calendar.ArrowFlightJdbcIntervalVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.calendar.ArrowFlightJdbcTimeStampVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.calendar.ArrowFlightJdbcTimeVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.complex.ArrowFlightJdbcDenseUnionVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.complex.ArrowFlightJdbcFixedSizeListVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.complex.ArrowFlightJdbcLargeListVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.complex.ArrowFlightJdbcListVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.complex.ArrowFlightJdbcMapVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.complex.ArrowFlightJdbcStructVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.complex.ArrowFlightJdbcUnionVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.numeric.ArrowFlightJdbcBaseIntVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.numeric.ArrowFlightJdbcBitVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.numeric.ArrowFlightJdbcDecimalVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.numeric.ArrowFlightJdbcFloat4VectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.numeric.ArrowFlightJdbcFloat8VectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.text.ArrowFlightJdbcVarCharVectorAccessor;\n+import org.apache.arrow.vector.BigIntVector;\n+import org.apache.arrow.vector.BitVector;\n+import org.apache.arrow.vector.DateDayVector;\n+import org.apache.arrow.vector.DateMilliVector;\n+import org.apache.arrow.vector.Decimal256Vector;\n+import org.apache.arrow.vector.DecimalVector;\n+import org.apache.arrow.vector.DurationVector;\n+import org.apache.arrow.vector.FixedSizeBinaryVector;\n+import org.apache.arrow.vector.Float4Vector;\n+import org.apache.arrow.vector.Float8Vector;\n+import org.apache.arrow.vector.IntVector;\n+import org.apache.arrow.vector.IntervalDayVector;\n+import org.apache.arrow.vector.IntervalYearVector;\n+import org.apache.arrow.vector.LargeVarBinaryVector;\n+import org.apache.arrow.vector.LargeVarCharVector;\n+import org.apache.arrow.vector.NullVector;\n+import org.apache.arrow.vector.SmallIntVector;\n+import org.apache.arrow.vector.TimeMicroVector;\n+import org.apache.arrow.vector.TimeMilliVector;\n+import org.apache.arrow.vector.TimeNanoVector;\n+import org.apache.arrow.vector.TimeSecVector;\n+import org.apache.arrow.vector.TimeStampVector;\n+import org.apache.arrow.vector.TinyIntVector;\n+import org.apache.arrow.vector.UInt1Vector;\n+import org.apache.arrow.vector.UInt2Vector;\n+import org.apache.arrow.vector.UInt4Vector;\n+import org.apache.arrow.vector.UInt8Vector;\n+import org.apache.arrow.vector.ValueVector;\n+import org.apache.arrow.vector.VarBinaryVector;\n+import org.apache.arrow.vector.VarCharVector;\n+import org.apache.arrow.vector.complex.DenseUnionVector;\n+import org.apache.arrow.vector.complex.FixedSizeListVector;\n+import org.apache.arrow.vector.complex.LargeListVector;\n+import org.apache.arrow.vector.complex.ListVector;\n+import org.apache.arrow.vector.complex.MapVector;\n+import org.apache.arrow.vector.complex.StructVector;\n+import org.apache.arrow.vector.complex.UnionVector;\n+\n+/**\n+ * Factory to instantiate the accessors.\n+ */\n+public class ArrowFlightJdbcAccessorFactory {\n+\n+  /**\n+   * Create an accessor according to the its type.\n+   *\n+   * @param vector        an instance of an arrow vector.\n+   * @param getCurrentRow a supplier to check which row is being accessed.\n+   * @return an instance of one of the accessors.\n+   */\n+  public static ArrowFlightJdbcAccessor createAccessor(ValueVector vector,\n+                                                       IntSupplier getCurrentRow,\n+                                                       WasNullConsumer setCursorWasNull) {\n+    if (vector instanceof UInt1Vector) {\n+      return new ArrowFlightJdbcBaseIntVectorAccessor((UInt1Vector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof UInt2Vector) {\n+      return new ArrowFlightJdbcBaseIntVectorAccessor((UInt2Vector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof UInt4Vector) {\n+      return new ArrowFlightJdbcBaseIntVectorAccessor((UInt4Vector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof UInt8Vector) {\n+      return new ArrowFlightJdbcBaseIntVectorAccessor((UInt8Vector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof TinyIntVector) {\n+      return new ArrowFlightJdbcBaseIntVectorAccessor((TinyIntVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof SmallIntVector) {\n+      return new ArrowFlightJdbcBaseIntVectorAccessor((SmallIntVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof IntVector) {\n+      return new ArrowFlightJdbcBaseIntVectorAccessor((IntVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof BigIntVector) {\n+      return new ArrowFlightJdbcBaseIntVectorAccessor((BigIntVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof Float4Vector) {\n+      return new ArrowFlightJdbcFloat4VectorAccessor((Float4Vector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof Float8Vector) {\n+      return new ArrowFlightJdbcFloat8VectorAccessor((Float8Vector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof BitVector) {\n+      return new ArrowFlightJdbcBitVectorAccessor((BitVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof DecimalVector) {\n+      return new ArrowFlightJdbcDecimalVectorAccessor((DecimalVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof Decimal256Vector) {\n+      return new ArrowFlightJdbcDecimalVectorAccessor((Decimal256Vector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof VarBinaryVector) {\n+      return new ArrowFlightJdbcBinaryVectorAccessor((VarBinaryVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof LargeVarBinaryVector) {\n+      return new ArrowFlightJdbcBinaryVectorAccessor((LargeVarBinaryVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof FixedSizeBinaryVector) {\n+      return new ArrowFlightJdbcBinaryVectorAccessor((FixedSizeBinaryVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof TimeStampVector) {\n+      return new ArrowFlightJdbcTimeStampVectorAccessor((TimeStampVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof TimeNanoVector) {\n+      return new ArrowFlightJdbcTimeVectorAccessor((TimeNanoVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof TimeMicroVector) {\n+      return new ArrowFlightJdbcTimeVectorAccessor((TimeMicroVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof TimeMilliVector) {\n+      return new ArrowFlightJdbcTimeVectorAccessor((TimeMilliVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof TimeSecVector) {\n+      return new ArrowFlightJdbcTimeVectorAccessor((TimeSecVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof DateDayVector) {\n+      return new ArrowFlightJdbcDateVectorAccessor(((DateDayVector) vector), getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof DateMilliVector) {\n+      return new ArrowFlightJdbcDateVectorAccessor(((DateMilliVector) vector), getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof VarCharVector) {\n+      return new ArrowFlightJdbcVarCharVectorAccessor((VarCharVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof LargeVarCharVector) {\n+      return new ArrowFlightJdbcVarCharVectorAccessor((LargeVarCharVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof DurationVector) {\n+      return new ArrowFlightJdbcDurationVectorAccessor((DurationVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof IntervalDayVector) {\n+      return new ArrowFlightJdbcIntervalVectorAccessor(((IntervalDayVector) vector), getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof IntervalYearVector) {\n+      return new ArrowFlightJdbcIntervalVectorAccessor(((IntervalYearVector) vector), getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof StructVector) {\n+      return new ArrowFlightJdbcStructVectorAccessor((StructVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof MapVector) {\n+      return new ArrowFlightJdbcMapVectorAccessor((MapVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof ListVector) {\n+      return new ArrowFlightJdbcListVectorAccessor((ListVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof LargeListVector) {\n+      return new ArrowFlightJdbcLargeListVectorAccessor((LargeListVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof FixedSizeListVector) {\n+      return new ArrowFlightJdbcFixedSizeListVectorAccessor((FixedSizeListVector) vector,\n+          getCurrentRow, setCursorWasNull);\n+    } else if (vector instanceof UnionVector) {\n+      return new ArrowFlightJdbcUnionVectorAccessor((UnionVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof DenseUnionVector) {\n+      return new ArrowFlightJdbcDenseUnionVectorAccessor((DenseUnionVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof NullVector || vector == null) {\n+      return new ArrowFlightJdbcNullVectorAccessor(setCursorWasNull);\n+    }\n+\n+    throw new UnsupportedOperationException();\n\nReview comment:\n       Maybe include the type in the exception message?\n\n##########\nFile path: java/pom.xml\n##########\n@@ -506,12 +506,23 @@\n             </lifecycleMappingMetadata>\n           </configuration>\n         </plugin>\n+        <plugin>\n+          <groupId>com.github.spotbugs</groupId>\n+          <artifactId>spotbugs-maven-plugin</artifactId>\n+          <version>4.2.3</version>\n+        </plugin>\n+\n\nReview comment:\n       Is it possible to keep these plugins/dependencies in the driver's pom.xml? (Though it would be nice to enable static analyzers project-wide, that should be done separately.)\n\n##########\nFile path: java/flight/flight-jdbc-driver/src/main/java/org/apache/arrow/driver/jdbc/accessor/impl/calendar/ArrowFlightJdbcTimeStampVectorAccessor.java\n##########\n@@ -0,0 +1,185 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.driver.jdbc.accessor.impl.calendar;\n+\n+import static org.apache.arrow.driver.jdbc.accessor.impl.calendar.ArrowFlightJdbcTimeStampVectorGetter.Getter;\n+import static org.apache.arrow.driver.jdbc.accessor.impl.calendar.ArrowFlightJdbcTimeStampVectorGetter.Holder;\n+import static org.apache.arrow.driver.jdbc.accessor.impl.calendar.ArrowFlightJdbcTimeStampVectorGetter.createGetter;\n+\n+import java.sql.Date;\n+import java.sql.Time;\n+import java.sql.Timestamp;\n+import java.time.LocalDateTime;\n+import java.time.temporal.ChronoUnit;\n+import java.util.Calendar;\n+import java.util.TimeZone;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.IntSupplier;\n+\n+import org.apache.arrow.driver.jdbc.accessor.ArrowFlightJdbcAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.ArrowFlightJdbcAccessorFactory;\n+import org.apache.arrow.vector.TimeStampVector;\n+import org.apache.arrow.vector.types.pojo.ArrowType;\n+import org.apache.arrow.vector.util.DateUtility;\n+\n+/**\n+ * Accessor for the Arrow types extending from {@link TimeStampVector}.\n+ */\n+public class ArrowFlightJdbcTimeStampVectorAccessor extends ArrowFlightJdbcAccessor {\n+\n+  private final TimeZone timeZone;\n+  private final Getter getter;\n+  private final TimeUnit timeUnit;\n+  private final LongToLocalDateTime longToLocalDateTime;\n+  private final Holder holder;\n+\n+  /**\n+   * Functional interface used to convert a number (in any time resolution) to LocalDateTime.\n+   */\n+  interface LongToLocalDateTime {\n+    LocalDateTime fromLong(long value);\n+  }\n+\n+  /**\n+   * Instantiate a ArrowFlightJdbcTimeStampVectorAccessor for given vector.\n+   */\n+  public ArrowFlightJdbcTimeStampVectorAccessor(TimeStampVector vector,\n+                                                IntSupplier currentRowSupplier,\n+                                                ArrowFlightJdbcAccessorFactory.WasNullConsumer setCursorWasNull) {\n+    super(currentRowSupplier, setCursorWasNull);\n+    this.holder = new Holder();\n+    this.getter = createGetter(vector);\n+\n+    this.timeZone = getTimeZoneForVector(vector);\n+    this.timeUnit = getTimeUnitForVector(vector);\n+    this.longToLocalDateTime = getLongToLocalDateTimeForVector(vector, this.timeZone);\n+  }\n+\n+  @Override\n+  public Class<?> getObjectClass() {\n+    return Timestamp.class;\n+  }\n+\n+  @Override\n+  public Object getObject() {\n+    return this.getTimestamp(null);\n+  }\n+\n+  private LocalDateTime getLocalDateTime(Calendar calendar) {\n+    getter.get(getCurrentRow(), holder);\n+    this.wasNull = holder.isSet == 0;\n+    this.wasNullConsumer.setWasNull(this.wasNull);\n+    if (this.wasNull) {\n+      return null;\n+    }\n+\n+    long value = holder.value;\n+\n+    LocalDateTime localDateTime = this.longToLocalDateTime.fromLong(value);\n+\n+    if (calendar != null) {\n+      TimeZone timeZone = calendar.getTimeZone();\n+      long millis = this.timeUnit.toMillis(value);\n+      localDateTime = localDateTime\n+          .minus(timeZone.getOffset(millis) - this.timeZone.getOffset(millis), ChronoUnit.MILLIS);\n+    }\n+    return localDateTime;\n+  }\n+\n+  @Override\n+  public Date getDate(Calendar calendar) {\n+    LocalDateTime localDateTime = getLocalDateTime(calendar);\n+    if (localDateTime == null) {\n+      return null;\n+    }\n+\n+    return new Date(Timestamp.valueOf(localDateTime).getTime());\n+  }\n+\n+  @Override\n+  public Time getTime(Calendar calendar) {\n+    LocalDateTime localDateTime = getLocalDateTime(calendar);\n+    if (localDateTime == null) {\n+      return null;\n+    }\n+\n+    return new Time(Timestamp.valueOf(localDateTime).getTime());\n+  }\n+\n+  @Override\n+  public Timestamp getTimestamp(Calendar calendar) {\n+    LocalDateTime localDateTime = getLocalDateTime(calendar);\n+    if (localDateTime == null) {\n+      return null;\n+    }\n+\n+    return Timestamp.valueOf(localDateTime);\n+  }\n+\n+  protected static TimeUnit getTimeUnitForVector(TimeStampVector vector) {\n+    ArrowType.Timestamp arrowType =\n+        (ArrowType.Timestamp) vector.getField().getFieldType().getType();\n+\n+    switch (arrowType.getUnit()) {\n+      case NANOSECOND:\n+        return TimeUnit.NANOSECONDS;\n+      case MICROSECOND:\n+        return TimeUnit.MICROSECONDS;\n+      case MILLISECOND:\n+        return TimeUnit.MILLISECONDS;\n+      case SECOND:\n+        return TimeUnit.SECONDS;\n+      default:\n+        throw new UnsupportedOperationException(\"Invalid Arrow time unit\");\n+    }\n+  }\n+\n+  protected static LongToLocalDateTime getLongToLocalDateTimeForVector(TimeStampVector vector,\n+                                                                       TimeZone timeZone) {\n+    String timeZoneID = timeZone.getID();\n+\n+    ArrowType.Timestamp arrowType =\n+        (ArrowType.Timestamp) vector.getField().getFieldType().getType();\n+\n+    switch (arrowType.getUnit()) {\n+      case NANOSECOND:\n+        return nanoseconds -> DateUtility.getLocalDateTimeFromEpochNano(nanoseconds, timeZoneID);\n+      case MICROSECOND:\n+        return microseconds -> DateUtility.getLocalDateTimeFromEpochMicro(microseconds, timeZoneID);\n+      case MILLISECOND:\n+        return milliseconds -> DateUtility.getLocalDateTimeFromEpochMilli(milliseconds, timeZoneID);\n+      case SECOND:\n+        return seconds -> DateUtility.getLocalDateTimeFromEpochMilli(\n+            TimeUnit.SECONDS.toMillis(seconds), timeZoneID);\n+      default:\n+        throw new UnsupportedOperationException(\"Invalid Arrow time unit\");\n+    }\n+  }\n+\n+  protected static TimeZone getTimeZoneForVector(TimeStampVector vector) {\n+    ArrowType.Timestamp arrowType =\n+        (ArrowType.Timestamp) vector.getField().getFieldType().getType();\n+\n+    String timezoneName = arrowType.getTimezone();\n+    if (timezoneName == null) {\n+      return TimeZone.getDefault();\n\nReview comment:\n       Using the _default_ timezone seems wrong, doesn't it? It's machine-dependent. \n\n##########\nFile path: java/flight/flight-jdbc-driver/src/main/java/org/apache/arrow/driver/jdbc/accessor/impl/numeric/ArrowFlightJdbcFloat4VectorAccessor.java\n##########\n@@ -0,0 +1,139 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.driver.jdbc.accessor.impl.numeric;\n+\n+import java.math.BigDecimal;\n+import java.math.RoundingMode;\n+import java.nio.ByteBuffer;\n+import java.util.function.IntSupplier;\n+\n+import org.apache.arrow.driver.jdbc.accessor.ArrowFlightJdbcAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.ArrowFlightJdbcAccessorFactory;\n+import org.apache.arrow.vector.Float4Vector;\n+import org.apache.arrow.vector.holders.NullableFloat4Holder;\n+\n+/**\n+ * Accessor for the Float4Vector.\n+ */\n+public class ArrowFlightJdbcFloat4VectorAccessor extends ArrowFlightJdbcAccessor {\n+\n+  private final Float4Vector vector;\n+  private final NullableFloat4Holder holder;\n+\n+  /**\n+   * Instantiate a accessor for the {@link Float4Vector}.\n+   *\n+   * @param vector             an instance of a Float4Vector.\n+   * @param currentRowSupplier the supplier to track the lines.\n+   * @param setCursorWasNull   the consumer to set if value was null.\n+   */\n+  public ArrowFlightJdbcFloat4VectorAccessor(Float4Vector vector,\n+                                             IntSupplier currentRowSupplier,\n+                                             ArrowFlightJdbcAccessorFactory.WasNullConsumer setCursorWasNull) {\n+    super(currentRowSupplier, setCursorWasNull);\n+    this.holder = new NullableFloat4Holder();\n+    this.vector = vector;\n+  }\n+\n+  @Override\n+  public Class<?> getObjectClass() {\n+    return Float.class;\n+  }\n+\n+  @Override\n+  public String getString() {\n+    final float value = this.getFloat();\n+\n+    return this.wasNull ? null : Float.toString(value);\n+  }\n+\n+  @Override\n+  public boolean getBoolean() {\n+    return this.getFloat() != 0.0;\n+  }\n+\n+  @Override\n+  public byte getByte() {\n+    return (byte) this.getFloat();\n+  }\n+\n+  @Override\n+  public short getShort() {\n+    return (short) this.getFloat();\n+  }\n+\n+  @Override\n+  public int getInt() {\n+    return (int) this.getFloat();\n+  }\n+\n+  @Override\n+  public long getLong() {\n+    return (long) this.getFloat();\n+  }\n+\n+  @Override\n+  public float getFloat() {\n+    vector.get(getCurrentRow(), holder);\n+\n+    this.wasNull = holder.isSet == 0;\n+    this.wasNullConsumer.setWasNull(this.wasNull);\n+    if (this.wasNull) {\n+      return 0;\n+    }\n+\n+    return holder.value;\n+  }\n+\n+  @Override\n+  public double getDouble() {\n+    return this.getFloat();\n+  }\n+\n+  @Override\n+  public BigDecimal getBigDecimal() {\n+    final float value = this.getFloat();\n+\n+    final boolean infinite = Float.isInfinite(value);\n+    if (infinite) {\n+      throw new UnsupportedOperationException();\n\nReview comment:\n       Can we include a message?\n\n##########\nFile path: java/flight/flight-sql/src/main/java/org/apache/arrow/flight/sql/FlightSqlColumnMetadata.java\n##########\n@@ -0,0 +1,295 @@\n+/*\n\nReview comment:\n       I'm going to assume any changes under flight-sql are from the other PRs\u2026let me know if that's not the case.\n\n##########\nFile path: java/flight/flight-jdbc-driver/src/main/java/org/apache/arrow/driver/jdbc/accessor/impl/numeric/ArrowFlightJdbcFloat8VectorAccessor.java\n##########\n@@ -0,0 +1,133 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.driver.jdbc.accessor.impl.numeric;\n+\n+import java.math.BigDecimal;\n+import java.math.RoundingMode;\n+import java.nio.ByteBuffer;\n+import java.util.function.IntSupplier;\n+\n+import org.apache.arrow.driver.jdbc.accessor.ArrowFlightJdbcAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.ArrowFlightJdbcAccessorFactory;\n+import org.apache.arrow.vector.Float8Vector;\n+import org.apache.arrow.vector.holders.NullableFloat8Holder;\n+\n+/**\n+ * Accessor for the Float8Vector.\n+ */\n+public class ArrowFlightJdbcFloat8VectorAccessor extends ArrowFlightJdbcAccessor {\n+\n+  private final Float8Vector vector;\n+  private final NullableFloat8Holder holder;\n+\n+  /**\n+   * Instantiate a accessor for the {@link Float8Vector}.\n+   *\n+   * @param vector             an instance of a Float8Vector.\n+   * @param currentRowSupplier the supplier to track the lines.\n+   * @param setCursorWasNull   the consumer to set if value was null.\n+   */\n+  public ArrowFlightJdbcFloat8VectorAccessor(Float8Vector vector,\n+                                             IntSupplier currentRowSupplier,\n+                                             ArrowFlightJdbcAccessorFactory.WasNullConsumer setCursorWasNull) {\n+    super(currentRowSupplier, setCursorWasNull);\n+    this.holder = new NullableFloat8Holder();\n+    this.vector = vector;\n+  }\n+\n+  @Override\n+  public Class<?> getObjectClass() {\n+    return Double.class;\n+  }\n+\n+  @Override\n+  public double getDouble() {\n+    vector.get(getCurrentRow(), holder);\n+\n+    this.wasNull = holder.isSet == 0;\n+    this.wasNullConsumer.setWasNull(this.wasNull);\n+    if (this.wasNull) {\n+      return 0;\n\nReview comment:\n       Wouldn't (signaling) NaN be more appropriate? Or is this what is expected from JDBC\n\n##########\nFile path: java/flight/flight-jdbc-driver/src/test/java/org/apache/arrow/driver/jdbc/accessor/impl/calendar/ArrowFlightJdbcIntervalVectorAccessorTest.java\n##########\n@@ -0,0 +1,196 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.driver.jdbc.accessor.impl.calendar;\n+\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.is;\n+\n+import java.time.Duration;\n+import java.time.Period;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.function.Supplier;\n+\n+import org.apache.arrow.driver.jdbc.accessor.ArrowFlightJdbcAccessorFactory;\n+import org.apache.arrow.driver.jdbc.utils.AccessorTestUtils;\n+import org.apache.arrow.driver.jdbc.utils.RootAllocatorTestRule;\n+import org.apache.arrow.vector.IntervalDayVector;\n+import org.apache.arrow.vector.IntervalYearVector;\n+import org.apache.arrow.vector.ValueVector;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ErrorCollector;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+@RunWith(Parameterized.class)\n+public class ArrowFlightJdbcIntervalVectorAccessorTest {\n+\n+  @ClassRule\n+  public static RootAllocatorTestRule rootAllocatorTestRule = new RootAllocatorTestRule();\n+\n+  @Rule\n+  public final ErrorCollector collector = new ErrorCollector();\n+\n+  private final Supplier<ValueVector> vectorSupplier;\n+  private ValueVector vector;\n+\n+  private final AccessorTestUtils.AccessorSupplier<ArrowFlightJdbcIntervalVectorAccessor>\n+      accessorSupplier = (vector, getCurrentRow) -> {\n+        ArrowFlightJdbcAccessorFactory.WasNullConsumer noOpWasNullConsumer = (boolean wasNull) -> {\n+        };\n+        if (vector instanceof IntervalDayVector) {\n\nReview comment:\n       nit, but would it make sense to use the AccessorFactory here? ('here' being each of these test cases)\n\n##########\nFile path: java/flight/flight-jdbc-driver/src/main/java/org/apache/arrow/driver/jdbc/accessor/ArrowFlightJdbcAccessorFactory.java\n##########\n@@ -0,0 +1,215 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.driver.jdbc.accessor;\n+\n+import java.util.function.IntSupplier;\n+\n+import org.apache.arrow.driver.jdbc.accessor.impl.ArrowFlightJdbcNullVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.binary.ArrowFlightJdbcBinaryVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.calendar.ArrowFlightJdbcDateVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.calendar.ArrowFlightJdbcDurationVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.calendar.ArrowFlightJdbcIntervalVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.calendar.ArrowFlightJdbcTimeStampVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.calendar.ArrowFlightJdbcTimeVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.complex.ArrowFlightJdbcDenseUnionVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.complex.ArrowFlightJdbcFixedSizeListVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.complex.ArrowFlightJdbcLargeListVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.complex.ArrowFlightJdbcListVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.complex.ArrowFlightJdbcMapVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.complex.ArrowFlightJdbcStructVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.complex.ArrowFlightJdbcUnionVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.numeric.ArrowFlightJdbcBaseIntVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.numeric.ArrowFlightJdbcBitVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.numeric.ArrowFlightJdbcDecimalVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.numeric.ArrowFlightJdbcFloat4VectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.numeric.ArrowFlightJdbcFloat8VectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.text.ArrowFlightJdbcVarCharVectorAccessor;\n+import org.apache.arrow.vector.BigIntVector;\n+import org.apache.arrow.vector.BitVector;\n+import org.apache.arrow.vector.DateDayVector;\n+import org.apache.arrow.vector.DateMilliVector;\n+import org.apache.arrow.vector.Decimal256Vector;\n+import org.apache.arrow.vector.DecimalVector;\n+import org.apache.arrow.vector.DurationVector;\n+import org.apache.arrow.vector.FixedSizeBinaryVector;\n+import org.apache.arrow.vector.Float4Vector;\n+import org.apache.arrow.vector.Float8Vector;\n+import org.apache.arrow.vector.IntVector;\n+import org.apache.arrow.vector.IntervalDayVector;\n+import org.apache.arrow.vector.IntervalYearVector;\n+import org.apache.arrow.vector.LargeVarBinaryVector;\n+import org.apache.arrow.vector.LargeVarCharVector;\n+import org.apache.arrow.vector.NullVector;\n+import org.apache.arrow.vector.SmallIntVector;\n+import org.apache.arrow.vector.TimeMicroVector;\n+import org.apache.arrow.vector.TimeMilliVector;\n+import org.apache.arrow.vector.TimeNanoVector;\n+import org.apache.arrow.vector.TimeSecVector;\n+import org.apache.arrow.vector.TimeStampVector;\n+import org.apache.arrow.vector.TinyIntVector;\n+import org.apache.arrow.vector.UInt1Vector;\n+import org.apache.arrow.vector.UInt2Vector;\n+import org.apache.arrow.vector.UInt4Vector;\n+import org.apache.arrow.vector.UInt8Vector;\n+import org.apache.arrow.vector.ValueVector;\n+import org.apache.arrow.vector.VarBinaryVector;\n+import org.apache.arrow.vector.VarCharVector;\n+import org.apache.arrow.vector.complex.DenseUnionVector;\n+import org.apache.arrow.vector.complex.FixedSizeListVector;\n+import org.apache.arrow.vector.complex.LargeListVector;\n+import org.apache.arrow.vector.complex.ListVector;\n+import org.apache.arrow.vector.complex.MapVector;\n+import org.apache.arrow.vector.complex.StructVector;\n+import org.apache.arrow.vector.complex.UnionVector;\n+\n+/**\n+ * Factory to instantiate the accessors.\n+ */\n+public class ArrowFlightJdbcAccessorFactory {\n+\n+  /**\n+   * Create an accessor according to the its type.\n+   *\n+   * @param vector        an instance of an arrow vector.\n+   * @param getCurrentRow a supplier to check which row is being accessed.\n+   * @return an instance of one of the accessors.\n+   */\n+  public static ArrowFlightJdbcAccessor createAccessor(ValueVector vector,\n+                                                       IntSupplier getCurrentRow,\n+                                                       WasNullConsumer setCursorWasNull) {\n+    if (vector instanceof UInt1Vector) {\n+      return new ArrowFlightJdbcBaseIntVectorAccessor((UInt1Vector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof UInt2Vector) {\n+      return new ArrowFlightJdbcBaseIntVectorAccessor((UInt2Vector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof UInt4Vector) {\n+      return new ArrowFlightJdbcBaseIntVectorAccessor((UInt4Vector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof UInt8Vector) {\n+      return new ArrowFlightJdbcBaseIntVectorAccessor((UInt8Vector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof TinyIntVector) {\n+      return new ArrowFlightJdbcBaseIntVectorAccessor((TinyIntVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof SmallIntVector) {\n+      return new ArrowFlightJdbcBaseIntVectorAccessor((SmallIntVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof IntVector) {\n+      return new ArrowFlightJdbcBaseIntVectorAccessor((IntVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof BigIntVector) {\n+      return new ArrowFlightJdbcBaseIntVectorAccessor((BigIntVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof Float4Vector) {\n+      return new ArrowFlightJdbcFloat4VectorAccessor((Float4Vector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof Float8Vector) {\n+      return new ArrowFlightJdbcFloat8VectorAccessor((Float8Vector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof BitVector) {\n+      return new ArrowFlightJdbcBitVectorAccessor((BitVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof DecimalVector) {\n+      return new ArrowFlightJdbcDecimalVectorAccessor((DecimalVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof Decimal256Vector) {\n+      return new ArrowFlightJdbcDecimalVectorAccessor((Decimal256Vector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof VarBinaryVector) {\n+      return new ArrowFlightJdbcBinaryVectorAccessor((VarBinaryVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof LargeVarBinaryVector) {\n+      return new ArrowFlightJdbcBinaryVectorAccessor((LargeVarBinaryVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof FixedSizeBinaryVector) {\n+      return new ArrowFlightJdbcBinaryVectorAccessor((FixedSizeBinaryVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof TimeStampVector) {\n+      return new ArrowFlightJdbcTimeStampVectorAccessor((TimeStampVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof TimeNanoVector) {\n+      return new ArrowFlightJdbcTimeVectorAccessor((TimeNanoVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof TimeMicroVector) {\n+      return new ArrowFlightJdbcTimeVectorAccessor((TimeMicroVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof TimeMilliVector) {\n+      return new ArrowFlightJdbcTimeVectorAccessor((TimeMilliVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof TimeSecVector) {\n+      return new ArrowFlightJdbcTimeVectorAccessor((TimeSecVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof DateDayVector) {\n+      return new ArrowFlightJdbcDateVectorAccessor(((DateDayVector) vector), getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof DateMilliVector) {\n+      return new ArrowFlightJdbcDateVectorAccessor(((DateMilliVector) vector), getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof VarCharVector) {\n+      return new ArrowFlightJdbcVarCharVectorAccessor((VarCharVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof LargeVarCharVector) {\n+      return new ArrowFlightJdbcVarCharVectorAccessor((LargeVarCharVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof DurationVector) {\n+      return new ArrowFlightJdbcDurationVectorAccessor((DurationVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof IntervalDayVector) {\n+      return new ArrowFlightJdbcIntervalVectorAccessor(((IntervalDayVector) vector), getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof IntervalYearVector) {\n+      return new ArrowFlightJdbcIntervalVectorAccessor(((IntervalYearVector) vector), getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof StructVector) {\n+      return new ArrowFlightJdbcStructVectorAccessor((StructVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof MapVector) {\n+      return new ArrowFlightJdbcMapVectorAccessor((MapVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof ListVector) {\n+      return new ArrowFlightJdbcListVectorAccessor((ListVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof LargeListVector) {\n+      return new ArrowFlightJdbcLargeListVectorAccessor((LargeListVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof FixedSizeListVector) {\n+      return new ArrowFlightJdbcFixedSizeListVectorAccessor((FixedSizeListVector) vector,\n+          getCurrentRow, setCursorWasNull);\n+    } else if (vector instanceof UnionVector) {\n+      return new ArrowFlightJdbcUnionVectorAccessor((UnionVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof DenseUnionVector) {\n+      return new ArrowFlightJdbcDenseUnionVectorAccessor((DenseUnionVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof NullVector || vector == null) {\n\nReview comment:\n       Can a null vector ever occur?\n\n##########\nFile path: java/flight/flight-jdbc-driver/src/main/java/org/apache/arrow/driver/jdbc/ArrowFlightJdbcFactory.java\n##########\n@@ -0,0 +1,124 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.driver.jdbc;\n+\n+import java.sql.ResultSetMetaData;\n+import java.sql.SQLException;\n+import java.util.Properties;\n+import java.util.TimeZone;\n+\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.calcite.avatica.AvaticaConnection;\n+import org.apache.calcite.avatica.AvaticaFactory;\n+import org.apache.calcite.avatica.AvaticaResultSetMetaData;\n+import org.apache.calcite.avatica.AvaticaSpecificDatabaseMetaData;\n+import org.apache.calcite.avatica.AvaticaStatement;\n+import org.apache.calcite.avatica.Meta;\n+import org.apache.calcite.avatica.QueryState;\n+import org.apache.calcite.avatica.UnregisteredDriver;\n+\n+/**\n+ * Factory for the Arrow Flight JDBC Driver.\n+ */\n+public class ArrowFlightJdbcFactory implements AvaticaFactory {\n\nReview comment:\n       nit: sorry, but\u2026these are all \"Flight SQL\" drivers/factories/connections/etc. not just \"Flight\" right?\n\n##########\nFile path: java/flight/flight-jdbc-driver/src/main/java/org/apache/arrow/driver/jdbc/ArrowFlightJdbcDriver.java\n##########\n@@ -0,0 +1,253 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.driver.jdbc;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.Reader;\n+import java.net.URI;\n+import java.nio.charset.StandardCharsets;\n+import java.sql.SQLException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Properties;\n+\n+import org.apache.arrow.driver.jdbc.utils.ArrowFlightConnectionConfigImpl.ArrowFlightConnectionProperty;\n+import org.apache.arrow.flight.FlightRuntimeException;\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.arrow.util.Preconditions;\n+import org.apache.calcite.avatica.AvaticaConnection;\n+import org.apache.calcite.avatica.DriverVersion;\n+import org.apache.calcite.avatica.Meta;\n+import org.apache.calcite.avatica.UnregisteredDriver;\n+import org.apache.calcite.avatica.org.apache.http.NameValuePair;\n+import org.apache.calcite.avatica.org.apache.http.client.utils.URLEncodedUtils;\n+\n+/**\n+ * JDBC driver for querying data from an Apache Arrow Flight server.\n+ */\n+public class ArrowFlightJdbcDriver extends UnregisteredDriver {\n+\n+  private static final String CONNECT_STRING_PREFIX = \"jdbc:arrow-flight://\";\n+  private static DriverVersion version;\n+\n+  static {\n+    // Special code for supporting Java9 and higher.\n+    // Netty requires some extra properties to unlock some native memory management api\n+    // Setting this property if not already set externally\n+    // This has to be done before any netty class is being loaded\n+    final String key = \"cfjd.io.netty.tryReflectionSetAccessible\";\n+    final String tryReflectionSetAccessible = System.getProperty(key);\n+    if (tryReflectionSetAccessible == null) {\n+      System.setProperty(key, Boolean.TRUE.toString());\n+    }\n+\n+    new ArrowFlightJdbcDriver().register();\n+  }\n+\n+  @Override\n+  public ArrowFlightConnection connect(final String url, final Properties info)\n+      throws SQLException {\n+    final Properties properties = new Properties(info);\n+    properties.putAll(info);\n+\n+    if (url != null) {\n+      final Map<Object, Object> propertiesFromUrl = getUrlsArgs(url);\n+      properties.putAll(propertiesFromUrl);\n+    }\n+\n+    try {\n+      return ArrowFlightConnection.createNewConnection(\n+          this,\n+          factory,\n+          url,\n+          properties,\n+          new RootAllocator(Long.MAX_VALUE));\n+    } catch (AssertionError | FlightRuntimeException e) {\n+      throw new SQLException(\"Failed to connect.\", e);\n+    }\n+  }\n+\n+  @Override\n+  protected String getFactoryClassName(final JdbcVersion jdbcVersion) {\n+    return ArrowFlightJdbcFactory.class.getName();\n+  }\n+\n+  @Override\n+  protected DriverVersion createDriverVersion() {\n+\n+    CreateVersionIfNull:\n+    {\n+\n+      if (version != null) {\n+        break CreateVersionIfNull;\n+      }\n+\n+      try (Reader reader = new BufferedReader(new InputStreamReader(\n+          this.getClass().getResourceAsStream(\"/properties/flight.properties\"),\n+          StandardCharsets.UTF_8))) {\n+        final Properties properties = new Properties();\n+        properties.load(reader);\n+\n+        final String parentName = properties\n+            .getProperty(\"org.apache.arrow.flight.name\");\n+        final String parentVersion = properties\n+            .getProperty(\"org.apache.arrow.flight.version\");\n+        final String[] pVersion = parentVersion.split(\"\\\\.\");\n+\n+        final int parentMajorVersion = Integer.parseInt(pVersion[0]);\n+        final int parentMinorVersion = Integer.parseInt(pVersion[1]);\n+\n+        final String childName = properties\n+            .getProperty(\"org.apache.arrow.flight.jdbc-driver.name\");\n+        final String childVersion = properties\n+            .getProperty(\"org.apache.arrow.flight.jdbc-driver.version\");\n+        final String[] cVersion = childVersion.split(\"\\\\.\");\n+\n+        final int childMajorVersion = Integer.parseInt(cVersion[0]);\n+        final int childMinorVersion = Integer.parseInt(cVersion[1]);\n+\n+        version = new DriverVersion(childName, childVersion, parentName,\n+            parentVersion, true, childMajorVersion, childMinorVersion,\n+            parentMajorVersion, parentMinorVersion);\n+      } catch (final IOException e) {\n+        throw new RuntimeException(\"Failed to load driver version.\", e);\n+      }\n+    }\n+\n+    return version;\n+  }\n+\n+  @Override\n+  public Meta createMeta(final AvaticaConnection connection) {\n+    return new ArrowFlightMetaImpl((ArrowFlightConnection) connection);\n+  }\n+\n+  @Override\n+  protected String getConnectStringPrefix() {\n+    return CONNECT_STRING_PREFIX;\n+  }\n+\n+  @Override\n+  public boolean acceptsURL(final String url) throws SQLException {\n+    return Preconditions.checkNotNull(url).startsWith(CONNECT_STRING_PREFIX);\n+  }\n+\n+  /**\n+   * Parses the provided url based on the format this driver accepts, retrieving\n+   * arguments after the {@link #CONNECT_STRING_PREFIX}.\n+   * <p>\n+   * This method gets the args if the provided URL follows this pattern:\n+   * {@code jdbc:arrow-flight://<host>:<port>[/?key1=val1&key2=val2&(...)]}\n+   *\n+   * <table border=\"1\">\n+   *    <tr>\n+   *        <td>Group</td>\n+   *        <td>Definition</td>\n+   *        <td>Value</td>\n+   *    </tr>\n+   *    <tr>\n+   *        <td>? \u2014 inaccessible</td>\n+   *        <td>{@link #getConnectStringPrefix}</td>\n+   *        <td>\n+   *            the URL prefix accepted by this driver, i.e.,\n+   *            {@code \"jdbc:arrow-flight://\"}\n+   *        </td>\n+   *    </tr>\n+   *    <tr>\n+   *        <td>1</td>\n+   *        <td>IPv4 host name</td>\n+   *        <td>\n+   *            first word after previous group and before \"{@code :}\"\n+   *        </td>\n+   *    </tr>\n+   *    <tr>\n+   *        <td>2</td>\n+   *        <td>IPv4 port number</td>\n+   *        <td>\n+   *            first number after previous group and before \"{@code /?}\"\n+   *        </td>\n+   *    </tr>\n+   *    <tr>\n+   *        <td>3</td>\n+   *        <td>custom call parameters</td>\n+   *        <td>\n+   *            all parameters provided after \"{@code /?}\" \u2014 must follow the\n+   *            pattern: \"{@code key=value}\" with \"{@code &}\" separating a\n+   *            parameter from another\n+   *        </td>\n+   *    </tr>\n+   * </table>\n+   *\n+   * @param url The url to parse.\n+   * @return the parsed arguments.\n+   * @throws SQLException If an error occurs while trying to parse the URL.\n+   */\n+  private Map<Object, Object> getUrlsArgs(String url)\n+      throws SQLException {\n+\n+    /*\n+     *\n+     * Perhaps this logic should be inside a utility class, separated from this\n+     * one, so as to better delegate responsibilities and concerns throughout\n+     * the code and increase maintainability.\n+     *\n+     * =====\n+     *\n+     * Keep in mind that the URL must ALWAYS follow the pattern:\n+     * \"jdbc:arrow-flight://<host>:<port>[/?param1=value1&param2=value2&(...)].\"\n+     *\n+     */\n+\n+    if (!url.startsWith(\"jdbc:\")) {\n+      throw new SQLException(\"Malformed/invalid URL!\");\n+    }\n+\n+    // It's necessary to use a string without \"jdbc:\" at the beginning to be parsed as a valid URL.\n+    url = url.substring(5);\n+\n+    final URI uri;\n+\n+    try {\n+      uri = URI.create(url);\n+    } catch (final IllegalArgumentException e) {\n+      throw new SQLException(\"Malformed/invalid URL!\", e);\n+    }\n+\n+    if (!Objects.equals(uri.getScheme(), \"arrow-flight\")) {\n\nReview comment:\n       How do we distinguish between Flight schemes (e.g. 'grpc', 'grpc+tls', 'grpc+unix', eventually 'ucx', etc.)?\n\n##########\nFile path: java/flight/flight-jdbc-driver/src/main/java/org/apache/arrow/driver/jdbc/ArrowFlightJdbcDriver.java\n##########\n@@ -0,0 +1,253 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.driver.jdbc;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.Reader;\n+import java.net.URI;\n+import java.nio.charset.StandardCharsets;\n+import java.sql.SQLException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Properties;\n+\n+import org.apache.arrow.driver.jdbc.utils.ArrowFlightConnectionConfigImpl.ArrowFlightConnectionProperty;\n+import org.apache.arrow.flight.FlightRuntimeException;\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.arrow.util.Preconditions;\n+import org.apache.calcite.avatica.AvaticaConnection;\n+import org.apache.calcite.avatica.DriverVersion;\n+import org.apache.calcite.avatica.Meta;\n+import org.apache.calcite.avatica.UnregisteredDriver;\n+import org.apache.calcite.avatica.org.apache.http.NameValuePair;\n+import org.apache.calcite.avatica.org.apache.http.client.utils.URLEncodedUtils;\n+\n+/**\n+ * JDBC driver for querying data from an Apache Arrow Flight server.\n+ */\n+public class ArrowFlightJdbcDriver extends UnregisteredDriver {\n+\n+  private static final String CONNECT_STRING_PREFIX = \"jdbc:arrow-flight://\";\n+  private static DriverVersion version;\n+\n+  static {\n+    // Special code for supporting Java9 and higher.\n+    // Netty requires some extra properties to unlock some native memory management api\n+    // Setting this property if not already set externally\n+    // This has to be done before any netty class is being loaded\n+    final String key = \"cfjd.io.netty.tryReflectionSetAccessible\";\n+    final String tryReflectionSetAccessible = System.getProperty(key);\n+    if (tryReflectionSetAccessible == null) {\n+      System.setProperty(key, Boolean.TRUE.toString());\n+    }\n\nReview comment:\n       Do we want to force this here? It looks like we're shading netty\u2026is this all for distribution purposes then?\n\n##########\nFile path: java/flight/flight-jdbc-driver/src/main/java/org/apache/arrow/driver/jdbc/utils/ExceptionTemplateThrower.java\n##########\n@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.driver.jdbc.utils;\n+\n+import static java.lang.String.format;\n+\n+import org.apache.calcite.avatica.util.Cursor.Accessor;\n+\n+/**\n+ * Utility class for managing exceptions thrown by\n+ * {@link Accessor}s.\n+ */\n+public final class ExceptionTemplateThrower {\n+\n+  private ExceptionTemplateThrower() {\n+    // Prevent instantiation.\n+  }\n+\n+  /**\n+   * Gets a {@link Exception} for an attempt to perform a conversion\n+   * not yet supported by the {@link Accessor} in use.\n+   *\n+   * @return the exception.\n+   */\n+  public static UnsupportedOperationException getOperationNotSupported(final Class<?> type) {\n\nReview comment:\n       It seems this is used purely in the base Accessor class, maybe it could be a private static method of that class?\n\n##########\nFile path: java/flight/flight-jdbc-driver/src/main/java/org/apache/arrow/driver/jdbc/ArrowFlightJdbcDriver.java\n##########\n@@ -0,0 +1,253 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.driver.jdbc;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.Reader;\n+import java.net.URI;\n+import java.nio.charset.StandardCharsets;\n+import java.sql.SQLException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Properties;\n+\n+import org.apache.arrow.driver.jdbc.utils.ArrowFlightConnectionConfigImpl.ArrowFlightConnectionProperty;\n+import org.apache.arrow.flight.FlightRuntimeException;\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.arrow.util.Preconditions;\n+import org.apache.calcite.avatica.AvaticaConnection;\n+import org.apache.calcite.avatica.DriverVersion;\n+import org.apache.calcite.avatica.Meta;\n+import org.apache.calcite.avatica.UnregisteredDriver;\n+import org.apache.calcite.avatica.org.apache.http.NameValuePair;\n+import org.apache.calcite.avatica.org.apache.http.client.utils.URLEncodedUtils;\n+\n+/**\n+ * JDBC driver for querying data from an Apache Arrow Flight server.\n+ */\n+public class ArrowFlightJdbcDriver extends UnregisteredDriver {\n+\n+  private static final String CONNECT_STRING_PREFIX = \"jdbc:arrow-flight://\";\n+  private static DriverVersion version;\n+\n+  static {\n+    // Special code for supporting Java9 and higher.\n+    // Netty requires some extra properties to unlock some native memory management api\n+    // Setting this property if not already set externally\n+    // This has to be done before any netty class is being loaded\n+    final String key = \"cfjd.io.netty.tryReflectionSetAccessible\";\n+    final String tryReflectionSetAccessible = System.getProperty(key);\n+    if (tryReflectionSetAccessible == null) {\n+      System.setProperty(key, Boolean.TRUE.toString());\n+    }\n+\n+    new ArrowFlightJdbcDriver().register();\n+  }\n+\n+  @Override\n+  public ArrowFlightConnection connect(final String url, final Properties info)\n+      throws SQLException {\n+    final Properties properties = new Properties(info);\n+    properties.putAll(info);\n+\n+    if (url != null) {\n+      final Map<Object, Object> propertiesFromUrl = getUrlsArgs(url);\n+      properties.putAll(propertiesFromUrl);\n+    }\n+\n+    try {\n+      return ArrowFlightConnection.createNewConnection(\n+          this,\n+          factory,\n+          url,\n+          properties,\n+          new RootAllocator(Long.MAX_VALUE));\n+    } catch (AssertionError | FlightRuntimeException e) {\n\nReview comment:\n       Why are we catching AssertionError? It seems we should be catching SQLException instead?\n\n##########\nFile path: java/flight/flight-jdbc-driver/src/test/java/org/apache/arrow/driver/jdbc/utils/UrlSample.java\n##########\n@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.driver.jdbc.utils;\n+\n+import org.apache.arrow.util.Preconditions;\n+\n+/**\n+ * Class for storing sample JDBC URLs. Used for testing.\n+ *\n+ * @see org.apache.arrow.driver.jdbc.utils.BaseProperty\n+ * @deprecated not updatable to match dinamic server allocation.\n+ */\n+@Deprecated\n+public enum UrlSample {\n\nReview comment:\n       Why are we adding a new deprecated class?\n\n##########\nFile path: java/flight/flight-jdbc-driver/src/test/java/org/apache/arrow/driver/jdbc/utils/PropertiesSample.java\n##########\n@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.driver.jdbc.utils;\n+\n+import java.util.Arrays;\n+import java.util.Iterator;\n+import java.util.Properties;\n+\n+import javax.annotation.Nullable;\n+\n+import org.apache.arrow.driver.jdbc.FlightServerTestRule;\n+import org.apache.arrow.util.Preconditions;\n+\n+\n+/**\n+ * {@link Properties} wrapper used for testing. Uses sample values.\n+ *\n+ * @see FlightServerTestRule\n+ * @deprecated not updatable to match dinamic server allocation.\n+ */\n+@Deprecated\n\nReview comment:\n       Ditto here, why add a class only to immediately deprecate it? (I guess things are in the middle of a refactoring here?)\n\n##########\nFile path: java/flight/flight-jdbc-driver/src/main/java/org/apache/arrow/driver/jdbc/ArrowFlightConnection.java\n##########\n@@ -0,0 +1,178 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.driver.jdbc;\n+\n+import java.sql.SQLException;\n+import java.util.Properties;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+import org.apache.arrow.driver.jdbc.client.ArrowFlightSqlClientHandler;\n+import org.apache.arrow.driver.jdbc.utils.ArrowFlightConnectionConfigImpl;\n+import org.apache.arrow.flight.FlightClient;\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.util.AutoCloseables;\n+import org.apache.arrow.util.Preconditions;\n+import org.apache.calcite.avatica.AvaticaConnection;\n+import org.apache.calcite.avatica.AvaticaFactory;\n+\n+import io.netty.util.concurrent.DefaultThreadFactory;\n+\n+/**\n+ * Connection to the Arrow Flight server.\n+ */\n+public final class ArrowFlightConnection extends AvaticaConnection {\n+\n+  private final BufferAllocator allocator;\n+  private final ArrowFlightSqlClientHandler clientHandler;\n+  private final ArrowFlightConnectionConfigImpl config;\n+  private ExecutorService executorService;\n+\n+  /**\n+   * Creates a new {@link ArrowFlightConnection}.\n+   *\n+   * @param driver        the {@link ArrowFlightJdbcDriver} to use.\n+   * @param factory       the {@link AvaticaFactory} to use.\n+   * @param url           the URL to use.\n+   * @param properties    the {@link Properties} to use.\n+   * @param config        the {@link ArrowFlightConnectionConfigImpl} to use.\n+   * @param allocator     the {@link BufferAllocator} to use.\n+   * @param clientHandler the {@link ArrowFlightSqlClientHandler} to use.\n+   */\n+  private ArrowFlightConnection(final ArrowFlightJdbcDriver driver, final AvaticaFactory factory,\n+                                final String url, final Properties properties,\n+                                final ArrowFlightConnectionConfigImpl config,\n+                                final BufferAllocator allocator,\n+                                final ArrowFlightSqlClientHandler clientHandler) {\n+    super(driver, factory, url, properties);\n+    this.config = Preconditions.checkNotNull(config, \"Config cannot be null.\");\n+    this.allocator = Preconditions.checkNotNull(allocator, \"Allocator cannot be null.\");\n+    this.clientHandler = Preconditions.checkNotNull(clientHandler, \"Handler cannot be null.\");\n+  }\n+\n+  /**\n+   * Creates a new {@link ArrowFlightConnection} to a {@link FlightClient}.\n+   *\n+   * @param driver     the {@link ArrowFlightJdbcDriver} to use.\n+   * @param factory    the {@link AvaticaFactory} to use.\n+   * @param url        the URL to establish the connection to.\n+   * @param properties the {@link Properties} to use for this session.\n+   * @param allocator  the {@link BufferAllocator} to use.\n+   * @return a new {@link ArrowFlightConnection}.\n+   * @throws SQLException on error.\n+   */\n+  static ArrowFlightConnection createNewConnection(final ArrowFlightJdbcDriver driver,\n+                                                   final AvaticaFactory factory,\n+                                                   final String url, final Properties properties,\n+                                                   final BufferAllocator allocator)\n+      throws SQLException {\n+    final ArrowFlightConnectionConfigImpl config = new ArrowFlightConnectionConfigImpl(properties);\n+    final ArrowFlightSqlClientHandler clientHandler = createNewClientHandler(config, allocator);\n+    return new ArrowFlightConnection(driver, factory, url, properties, config, allocator,\n+        clientHandler);\n+  }\n+\n+  private static ArrowFlightSqlClientHandler createNewClientHandler(\n+      final ArrowFlightConnectionConfigImpl config,\n+      final BufferAllocator allocator) throws SQLException {\n+    try {\n+      return new ArrowFlightSqlClientHandler.Builder()\n+          .withHost(config.getHost())\n+          .withPort(config.getPort())\n+          .withUsername(config.getUser())\n+          .withPassword(config.getPassword())\n+          .withKeyStorePath(config.getKeyStorePath())\n+          .withKeyStorePassword(config.keystorePassword())\n+          .withBufferAllocator(allocator)\n+          .withTlsEncryption(config.useTls())\n+          .withCallOptions(config.toCallOption())\n+          .build();\n+    } catch (final SQLException e) {\n+      allocator.close();\n\nReview comment:\n       If `allocator.close` throws we might want to add `e` as a suppressed exception\n\n##########\nFile path: java/flight/flight-jdbc-driver/src/main/java/org/apache/arrow/driver/jdbc/ArrowFlightJdbcPooledConnection.java\n##########\n@@ -0,0 +1,112 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.driver.jdbc;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Properties;\n+import java.util.Set;\n+\n+import javax.sql.ConnectionEvent;\n+import javax.sql.ConnectionEventListener;\n+import javax.sql.PooledConnection;\n+import javax.sql.StatementEventListener;\n+\n+import org.apache.arrow.driver.jdbc.utils.ConnectionWrapper;\n+\n+/**\n+ * {@link PooledConnection} implementation for Arrow Flight JDBC Driver.\n+ */\n+public class ArrowFlightJdbcPooledConnection implements PooledConnection {\n+\n+  private final ArrowFlightConnection connection;\n+  private final Set<ConnectionEventListener> eventListeners;\n+  private final Set<StatementEventListener> statementEventListeners;\n+\n+  private final class ConnectionHandle extends ConnectionWrapper {\n\nReview comment:\n       The purpose of this class is to return the connection to the pool when closed?\n\n##########\nFile path: java/flight/flight-jdbc-driver/src/test/java/org/apache/arrow/driver/jdbc/utils/FlightStreamQueueTest.java\n##########\n@@ -0,0 +1,114 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.driver.jdbc.utils;\n+\n+import static java.lang.String.format;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.nullValue;\n+import static org.mockito.Mockito.mock;\n+\n+import java.util.Optional;\n+import java.util.concurrent.CompletionService;\n+\n+import org.apache.arrow.flight.FlightStream;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ErrorCollector;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+/**\n+ * Tests for {@link FlightStreamQueue}.\n+ */\n+@RunWith(MockitoJUnitRunner.class)\n+public class FlightStreamQueueTest {\n+\n+  @Rule\n+  public final ErrorCollector collector = new ErrorCollector();\n+  @Mock\n+  private CompletionService<FlightStream> mockedService;\n+  private FlightStreamQueue queue;\n+\n+  @Before\n+  public void setUp() {\n+    queue = new FlightStreamQueue(mockedService);\n+  }\n+\n+  @Test\n+  public void testNextShouldRetrieveNullIfEmpty() throws Exception {\n+    collector.checkThat(queue.next(), is(nullValue()));\n+  }\n+\n+  @Test\n+  public void testNextShouldThrowExceptionUponClose() throws Exception {\n+    queue.close();\n+    Optional<Exception> expectedExceptionOnNextIfClosed = Optional.empty();\n+    try {\n+      queue.next();\n+    } catch (final IllegalStateException e) {\n+      expectedExceptionOnNextIfClosed = Optional.of(e);\n\nReview comment:\n       It seems other parts of the codebase use assertThrows for this type of check\n\n##########\nFile path: java/flight/flight-jdbc-driver/src/main/java/org/apache/arrow/driver/jdbc/client/ArrowFlightSqlClientHandler.java\n##########\n@@ -0,0 +1,516 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.driver.jdbc.client;\n+\n+import java.io.IOException;\n+import java.security.GeneralSecurityException;\n+import java.sql.SQLException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.apache.arrow.driver.jdbc.client.utils.ClientAuthenticationUtils;\n+import org.apache.arrow.flight.CallOption;\n+import org.apache.arrow.flight.FlightClient;\n+import org.apache.arrow.flight.FlightClientMiddleware;\n+import org.apache.arrow.flight.FlightEndpoint;\n+import org.apache.arrow.flight.FlightInfo;\n+import org.apache.arrow.flight.FlightStream;\n+import org.apache.arrow.flight.Location;\n+import org.apache.arrow.flight.auth2.ClientBearerHeaderHandler;\n+import org.apache.arrow.flight.auth2.ClientIncomingAuthHeaderMiddleware;\n+import org.apache.arrow.flight.sql.FlightSqlClient;\n+import org.apache.arrow.flight.sql.impl.FlightSql.SqlInfo;\n+import org.apache.arrow.flight.sql.util.TableRef;\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.util.AutoCloseables;\n+import org.apache.arrow.util.Preconditions;\n+import org.apache.arrow.vector.types.pojo.Schema;\n+import org.apache.calcite.avatica.Meta.StatementType;\n+\n+/**\n+ * A {@link FlightSqlClient} handler.\n+ */\n+public final class ArrowFlightSqlClientHandler implements AutoCloseable {\n+\n+  private final FlightSqlClient sqlClient;\n+  private final Set<CallOption> options = new HashSet<>();\n+\n+  ArrowFlightSqlClientHandler(final FlightSqlClient sqlClient,\n+                              final Collection<CallOption> options) {\n+    this.options.addAll(options);\n+    this.sqlClient = Preconditions.checkNotNull(sqlClient);\n+  }\n+\n+  /**\n+   * Creates a new {@link ArrowFlightSqlClientHandler} from the provided {@code client} and {@code options}.\n+   *\n+   * @param client  the {@link FlightClient} to manage under a {@link FlightSqlClient} wrapper.\n+   * @param options the {@link CallOption}s to persist in between subsequent client calls.\n+   * @return a new {@link ArrowFlightSqlClientHandler}.\n+   */\n+  public static ArrowFlightSqlClientHandler createNewHandler(final FlightClient client,\n+                                                             final Collection<CallOption> options) {\n+    return new ArrowFlightSqlClientHandler(new FlightSqlClient(client), options);\n+  }\n+\n+  /**\n+   * Gets the {@link #options} for the subsequent calls from this handler.\n+   *\n+   * @return the {@link CallOption}s.\n+   */\n+  private CallOption[] getOptions() {\n+    return options.toArray(new CallOption[0]);\n+  }\n+\n+  /**\n+   * Makes an RPC \"getStream\" request based on the provided {@link FlightInfo}\n+   * object. Retrieves the result of the query previously prepared with \"getInfo.\"\n+   *\n+   * @param flightInfo The {@link FlightInfo} instance from which to fetch results.\n+   * @return a {@code FlightStream} of results.\n+   */\n+  public List<FlightStream> getStreams(final FlightInfo flightInfo) {\n+    return flightInfo.getEndpoints().stream()\n+        .map(FlightEndpoint::getTicket)\n+        .map(ticket -> sqlClient.getStream(ticket, getOptions()))\n+        .collect(Collectors.toList());\n+  }\n+\n+  /**\n+   * Makes an RPC \"getInfo\" request based on the provided {@code query}\n+   * object.\n+   *\n+   * @param query The query.\n+   * @return a {@code FlightStream} of results.\n+   */\n+  public FlightInfo getInfo(final String query) {\n+    return sqlClient.execute(query, getOptions());\n+  }\n+\n+  @Override\n+  public void close() throws SQLException {\n+    try {\n+      AutoCloseables.close(sqlClient);\n+    } catch (final Exception e) {\n+      throw new SQLException(\"Failed to clean up client resources.\", e);\n+    }\n+  }\n+\n+  /**\n+   * A prepared statement handler.\n+   */\n+  public interface PreparedStatement extends AutoCloseable {\n+    /**\n+     * Executes this {@link PreparedStatement}.\n+     *\n+     * @return the {@link FlightInfo} representing the outcome of this query execution.\n+     * @throws SQLException on error.\n+     */\n+    FlightInfo executeQuery() throws SQLException;\n+\n+    /**\n+     * Executes a {@link StatementType#UPDATE} query.\n+     *\n+     * @return the number of rows affected.\n+     */\n+    long executeUpdate();\n+\n+    /**\n+     * Gets the {@link StatementType} of this {@link PreparedStatement}.\n+     *\n+     * @return the Statement Type.\n+     */\n+    StatementType getType();\n+\n+    /**\n+     * Gets the {@link Schema} of this {@link PreparedStatement}.\n+     *\n+     * @return {@link Schema}.\n+     */\n+    Schema getDataSetSchema();\n+\n+    @Override\n+    void close();\n+  }\n+\n+  /**\n+   * Creates a new {@link PreparedStatement} for the given {@code query}.\n+   *\n+   * @param query the SQL query.\n+   * @return a new prepared statement.\n+   */\n+  public PreparedStatement prepare(final String query) {\n+    final FlightSqlClient.PreparedStatement preparedStatement =\n+        sqlClient.prepare(query, getOptions());\n+    return new PreparedStatement() {\n+      @Override\n+      public FlightInfo executeQuery() throws SQLException {\n+        return preparedStatement.execute(getOptions());\n\nReview comment:\n       And in general most of the calls to FlightSqlClient here should.\n\n##########\nFile path: java/flight/flight-jdbc-driver/src/main/java/org/apache/arrow/driver/jdbc/ArrowFlightJdbcDriver.java\n##########\n@@ -0,0 +1,253 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.driver.jdbc;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.Reader;\n+import java.net.URI;\n+import java.nio.charset.StandardCharsets;\n+import java.sql.SQLException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Properties;\n+\n+import org.apache.arrow.driver.jdbc.utils.ArrowFlightConnectionConfigImpl.ArrowFlightConnectionProperty;\n+import org.apache.arrow.flight.FlightRuntimeException;\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.arrow.util.Preconditions;\n+import org.apache.calcite.avatica.AvaticaConnection;\n+import org.apache.calcite.avatica.DriverVersion;\n+import org.apache.calcite.avatica.Meta;\n+import org.apache.calcite.avatica.UnregisteredDriver;\n+import org.apache.calcite.avatica.org.apache.http.NameValuePair;\n+import org.apache.calcite.avatica.org.apache.http.client.utils.URLEncodedUtils;\n+\n+/**\n+ * JDBC driver for querying data from an Apache Arrow Flight server.\n+ */\n+public class ArrowFlightJdbcDriver extends UnregisteredDriver {\n+\n+  private static final String CONNECT_STRING_PREFIX = \"jdbc:arrow-flight://\";\n+  private static DriverVersion version;\n+\n+  static {\n+    // Special code for supporting Java9 and higher.\n+    // Netty requires some extra properties to unlock some native memory management api\n+    // Setting this property if not already set externally\n+    // This has to be done before any netty class is being loaded\n+    final String key = \"cfjd.io.netty.tryReflectionSetAccessible\";\n+    final String tryReflectionSetAccessible = System.getProperty(key);\n+    if (tryReflectionSetAccessible == null) {\n+      System.setProperty(key, Boolean.TRUE.toString());\n+    }\n\nReview comment:\n       Also in that case, for Java 11+ there's more flags that need to be set, right? Are those documented?\n\n##########\nFile path: java/flight/flight-jdbc-driver/src/main/java/org/apache/arrow/driver/jdbc/accessor/impl/calendar/ArrowFlightJdbcDateVectorGetter.java\n##########\n@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.driver.jdbc.accessor.impl.calendar;\n+\n+import org.apache.arrow.vector.DateDayVector;\n+import org.apache.arrow.vector.DateMilliVector;\n+import org.apache.arrow.vector.holders.NullableDateDayHolder;\n+import org.apache.arrow.vector.holders.NullableDateMilliHolder;\n+\n+/**\n+ * Auxiliary class used to unify data access on TimeStampVectors.\n+ */\n+final class ArrowFlightJdbcDateVectorGetter {\n+\n+  private ArrowFlightJdbcDateVectorGetter() {\n+    // Prevent instantiation.\n+  }\n+\n+  /**\n+   * Auxiliary class meant to unify Date*Vector#get implementations with different classes of ValueHolders.\n+   */\n+  static class Holder {\n+    int isSet;\n+    long value;\n\nReview comment:\n       Can we document what `value` is (e.g. the unit - I suppose this is just \"whatever the vector's unit was\")?\n\n##########\nFile path: java/flight/flight-jdbc-driver/src/main/java/org/apache/arrow/driver/jdbc/ArrowFlightJdbcDriver.java\n##########\n@@ -0,0 +1,253 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.driver.jdbc;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.Reader;\n+import java.net.URI;\n+import java.nio.charset.StandardCharsets;\n+import java.sql.SQLException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Properties;\n+\n+import org.apache.arrow.driver.jdbc.utils.ArrowFlightConnectionConfigImpl.ArrowFlightConnectionProperty;\n+import org.apache.arrow.flight.FlightRuntimeException;\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.arrow.util.Preconditions;\n+import org.apache.calcite.avatica.AvaticaConnection;\n+import org.apache.calcite.avatica.DriverVersion;\n+import org.apache.calcite.avatica.Meta;\n+import org.apache.calcite.avatica.UnregisteredDriver;\n+import org.apache.calcite.avatica.org.apache.http.NameValuePair;\n+import org.apache.calcite.avatica.org.apache.http.client.utils.URLEncodedUtils;\n+\n+/**\n+ * JDBC driver for querying data from an Apache Arrow Flight server.\n+ */\n+public class ArrowFlightJdbcDriver extends UnregisteredDriver {\n+\n+  private static final String CONNECT_STRING_PREFIX = \"jdbc:arrow-flight://\";\n+  private static DriverVersion version;\n+\n+  static {\n+    // Special code for supporting Java9 and higher.\n+    // Netty requires some extra properties to unlock some native memory management api\n+    // Setting this property if not already set externally\n+    // This has to be done before any netty class is being loaded\n+    final String key = \"cfjd.io.netty.tryReflectionSetAccessible\";\n+    final String tryReflectionSetAccessible = System.getProperty(key);\n+    if (tryReflectionSetAccessible == null) {\n+      System.setProperty(key, Boolean.TRUE.toString());\n+    }\n+\n+    new ArrowFlightJdbcDriver().register();\n+  }\n+\n+  @Override\n+  public ArrowFlightConnection connect(final String url, final Properties info)\n+      throws SQLException {\n+    final Properties properties = new Properties(info);\n+    properties.putAll(info);\n+\n+    if (url != null) {\n+      final Map<Object, Object> propertiesFromUrl = getUrlsArgs(url);\n+      properties.putAll(propertiesFromUrl);\n+    }\n+\n+    try {\n+      return ArrowFlightConnection.createNewConnection(\n+          this,\n+          factory,\n+          url,\n+          properties,\n+          new RootAllocator(Long.MAX_VALUE));\n+    } catch (AssertionError | FlightRuntimeException e) {\n\nReview comment:\n       Also, I think it would be very surprising to users if we bubble a FlightRuntimeException up without wrapping it in a SQLException.\n\n##########\nFile path: java/flight/flight-jdbc-driver/src/test/resources/keys/cert0.pem\n##########\n@@ -0,0 +1,29 @@\n+-----BEGIN CERTIFICATE-----\n\nReview comment:\n       We have certificates in /testing/data/flight, could those be used? (I guess we need to make a keystore for them.)\n\n##########\nFile path: java/flight/flight-jdbc-driver/src/main/java/org/apache/arrow/driver/jdbc/ArrowFlightJdbcFactory.java\n##########\n@@ -0,0 +1,124 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.driver.jdbc;\n+\n+import java.sql.ResultSetMetaData;\n+import java.sql.SQLException;\n+import java.util.Properties;\n+import java.util.TimeZone;\n+\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.calcite.avatica.AvaticaConnection;\n+import org.apache.calcite.avatica.AvaticaFactory;\n+import org.apache.calcite.avatica.AvaticaResultSetMetaData;\n+import org.apache.calcite.avatica.AvaticaSpecificDatabaseMetaData;\n+import org.apache.calcite.avatica.AvaticaStatement;\n+import org.apache.calcite.avatica.Meta;\n+import org.apache.calcite.avatica.QueryState;\n+import org.apache.calcite.avatica.UnregisteredDriver;\n+\n+/**\n+ * Factory for the Arrow Flight JDBC Driver.\n+ */\n+public class ArrowFlightJdbcFactory implements AvaticaFactory {\n+  private final int major;\n+  private final int minor;\n+\n+  // This need to be public so Avatica can call this constructor\n+  public ArrowFlightJdbcFactory() {\n+    this(4, 1);\n+  }\n+\n+  private ArrowFlightJdbcFactory(final int major, final int minor) {\n+    this.major = major;\n+    this.minor = minor;\n+  }\n+\n+  @Override\n+  public AvaticaConnection newConnection(final UnregisteredDriver driver,\n+                                         final AvaticaFactory factory,\n+                                         final String url,\n+                                         final Properties info) throws SQLException {\n+    return ArrowFlightConnection.createNewConnection(\n+        (ArrowFlightJdbcDriver) driver,\n+        factory,\n+        url,\n+        info,\n+        new RootAllocator(Long.MAX_VALUE));\n\nReview comment:\n       This allocator is closed in ArrowFlightConnection::close it seems? Is it worth providing a way for the user to pass in an allocator? Also, we may want to name the allocator just to aid debugging.\n\n##########\nFile path: java/flight/flight-jdbc-driver/src/main/java/org/apache/arrow/driver/jdbc/accessor/impl/text/ArrowFlightJdbcVarCharVectorAccessor.java\n##########\n@@ -0,0 +1,193 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.driver.jdbc.accessor.impl.text;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.CharArrayReader;\n+import java.io.InputStream;\n+import java.io.Reader;\n+import java.math.BigDecimal;\n+import java.sql.Date;\n+import java.sql.Time;\n+import java.sql.Timestamp;\n+import java.util.Calendar;\n+import java.util.function.IntSupplier;\n+\n+import org.apache.arrow.driver.jdbc.accessor.ArrowFlightJdbcAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.ArrowFlightJdbcAccessorFactory;\n+import org.apache.arrow.driver.jdbc.utils.DateTimeUtils;\n+import org.apache.arrow.vector.LargeVarCharVector;\n+import org.apache.arrow.vector.VarCharVector;\n+import org.apache.arrow.vector.util.Text;\n+\n+/**\n+ * Accessor for the Arrow types: {@link VarCharVector} and {@link LargeVarCharVector}.\n+ */\n+public class ArrowFlightJdbcVarCharVectorAccessor extends ArrowFlightJdbcAccessor {\n+\n+  /**\n+   * Functional interface to help integrating VarCharVector and LargeVarCharVector.\n+   */\n+  @FunctionalInterface\n+  interface Getter {\n+    Text get(int index);\n+  }\n+\n+  private final Getter getter;\n+\n+  public ArrowFlightJdbcVarCharVectorAccessor(VarCharVector vector,\n+                                              IntSupplier currentRowSupplier,\n+                                              ArrowFlightJdbcAccessorFactory.WasNullConsumer setCursorWasNull) {\n+    this(vector::getObject, currentRowSupplier, setCursorWasNull);\n+  }\n+\n+  public ArrowFlightJdbcVarCharVectorAccessor(LargeVarCharVector vector,\n+                                              IntSupplier currentRowSupplier,\n+                                              ArrowFlightJdbcAccessorFactory.WasNullConsumer setCursorWasNull) {\n+    this(vector::getObject, currentRowSupplier, setCursorWasNull);\n+  }\n+\n+  ArrowFlightJdbcVarCharVectorAccessor(Getter getter,\n+                                       IntSupplier currentRowSupplier,\n+                                       ArrowFlightJdbcAccessorFactory.WasNullConsumer setCursorWasNull) {\n+    super(currentRowSupplier, setCursorWasNull);\n+    this.getter = getter;\n+  }\n+\n+  @Override\n+  public Class<?> getObjectClass() {\n+    return String.class;\n+  }\n+\n+  private Text getText() {\n+    final Text text = this.getter.get(getCurrentRow());\n+    this.wasNull = text == null;\n+    this.wasNullConsumer.setWasNull(this.wasNull);\n+    return text;\n+  }\n+\n+  @Override\n+  public String getObject() {\n+    final Text text = getText();\n+    return text == null ? null : text.toString();\n+  }\n+\n+  @Override\n+  public String getString() {\n+    return getObject();\n+  }\n+\n+  @Override\n+  public byte[] getBytes() {\n+    final Text value = this.getText();\n+    return value == null ? null : value.copyBytes();\n+  }\n+\n+  @Override\n+  public boolean getBoolean() {\n\nReview comment:\n       Is this actually expected to be implemented of a string column?\n\n##########\nFile path: java/flight/flight-jdbc-driver/src/test/java/org/apache/arrow/driver/jdbc/adhoc/MockFlightSqlProducer.java\n##########\n@@ -0,0 +1,525 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.driver.jdbc.adhoc;\n\nReview comment:\n       Why are some test utilities under 'adhoc' and others under 'utils'?\n\n##########\nFile path: java/flight/flight-jdbc-driver/src/main/java/org/apache/arrow/driver/jdbc/ArrowFlightJdbcDriver.java\n##########\n@@ -0,0 +1,253 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.driver.jdbc;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.Reader;\n+import java.net.URI;\n+import java.nio.charset.StandardCharsets;\n+import java.sql.SQLException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Properties;\n+\n+import org.apache.arrow.driver.jdbc.utils.ArrowFlightConnectionConfigImpl.ArrowFlightConnectionProperty;\n+import org.apache.arrow.flight.FlightRuntimeException;\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.arrow.util.Preconditions;\n+import org.apache.calcite.avatica.AvaticaConnection;\n+import org.apache.calcite.avatica.DriverVersion;\n+import org.apache.calcite.avatica.Meta;\n+import org.apache.calcite.avatica.UnregisteredDriver;\n+import org.apache.calcite.avatica.org.apache.http.NameValuePair;\n+import org.apache.calcite.avatica.org.apache.http.client.utils.URLEncodedUtils;\n+\n+/**\n+ * JDBC driver for querying data from an Apache Arrow Flight server.\n+ */\n+public class ArrowFlightJdbcDriver extends UnregisteredDriver {\n+\n+  private static final String CONNECT_STRING_PREFIX = \"jdbc:arrow-flight://\";\n+  private static DriverVersion version;\n+\n+  static {\n+    // Special code for supporting Java9 and higher.\n+    // Netty requires some extra properties to unlock some native memory management api\n+    // Setting this property if not already set externally\n+    // This has to be done before any netty class is being loaded\n+    final String key = \"cfjd.io.netty.tryReflectionSetAccessible\";\n+    final String tryReflectionSetAccessible = System.getProperty(key);\n+    if (tryReflectionSetAccessible == null) {\n+      System.setProperty(key, Boolean.TRUE.toString());\n+    }\n+\n+    new ArrowFlightJdbcDriver().register();\n+  }\n+\n+  @Override\n+  public ArrowFlightConnection connect(final String url, final Properties info)\n+      throws SQLException {\n+    final Properties properties = new Properties(info);\n+    properties.putAll(info);\n+\n+    if (url != null) {\n+      final Map<Object, Object> propertiesFromUrl = getUrlsArgs(url);\n+      properties.putAll(propertiesFromUrl);\n+    }\n+\n+    try {\n+      return ArrowFlightConnection.createNewConnection(\n+          this,\n+          factory,\n+          url,\n+          properties,\n+          new RootAllocator(Long.MAX_VALUE));\n+    } catch (AssertionError | FlightRuntimeException e) {\n+      throw new SQLException(\"Failed to connect.\", e);\n+    }\n+  }\n+\n+  @Override\n+  protected String getFactoryClassName(final JdbcVersion jdbcVersion) {\n+    return ArrowFlightJdbcFactory.class.getName();\n+  }\n+\n+  @Override\n+  protected DriverVersion createDriverVersion() {\n+\n+    CreateVersionIfNull:\n+    {\n+\n+      if (version != null) {\n+        break CreateVersionIfNull;\n+      }\n+\n+      try (Reader reader = new BufferedReader(new InputStreamReader(\n+          this.getClass().getResourceAsStream(\"/properties/flight.properties\"),\n\nReview comment:\n       This is generated by Maven then? (I couldn't find the file itself)\n\n##########\nFile path: java/flight/flight-jdbc-driver/src/main/java/org/apache/arrow/driver/jdbc/ArrowFlightJdbcDriver.java\n##########\n@@ -0,0 +1,253 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.driver.jdbc;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.Reader;\n+import java.net.URI;\n+import java.nio.charset.StandardCharsets;\n+import java.sql.SQLException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Properties;\n+\n+import org.apache.arrow.driver.jdbc.utils.ArrowFlightConnectionConfigImpl.ArrowFlightConnectionProperty;\n+import org.apache.arrow.flight.FlightRuntimeException;\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.arrow.util.Preconditions;\n+import org.apache.calcite.avatica.AvaticaConnection;\n+import org.apache.calcite.avatica.DriverVersion;\n+import org.apache.calcite.avatica.Meta;\n+import org.apache.calcite.avatica.UnregisteredDriver;\n+import org.apache.calcite.avatica.org.apache.http.NameValuePair;\n+import org.apache.calcite.avatica.org.apache.http.client.utils.URLEncodedUtils;\n+\n+/**\n+ * JDBC driver for querying data from an Apache Arrow Flight server.\n+ */\n+public class ArrowFlightJdbcDriver extends UnregisteredDriver {\n+\n+  private static final String CONNECT_STRING_PREFIX = \"jdbc:arrow-flight://\";\n+  private static DriverVersion version;\n+\n+  static {\n+    // Special code for supporting Java9 and higher.\n+    // Netty requires some extra properties to unlock some native memory management api\n+    // Setting this property if not already set externally\n+    // This has to be done before any netty class is being loaded\n+    final String key = \"cfjd.io.netty.tryReflectionSetAccessible\";\n+    final String tryReflectionSetAccessible = System.getProperty(key);\n+    if (tryReflectionSetAccessible == null) {\n+      System.setProperty(key, Boolean.TRUE.toString());\n+    }\n+\n+    new ArrowFlightJdbcDriver().register();\n+  }\n+\n+  @Override\n+  public ArrowFlightConnection connect(final String url, final Properties info)\n+      throws SQLException {\n+    final Properties properties = new Properties(info);\n+    properties.putAll(info);\n+\n+    if (url != null) {\n+      final Map<Object, Object> propertiesFromUrl = getUrlsArgs(url);\n+      properties.putAll(propertiesFromUrl);\n+    }\n+\n+    try {\n+      return ArrowFlightConnection.createNewConnection(\n+          this,\n+          factory,\n+          url,\n+          properties,\n+          new RootAllocator(Long.MAX_VALUE));\n+    } catch (AssertionError | FlightRuntimeException e) {\n+      throw new SQLException(\"Failed to connect.\", e);\n+    }\n+  }\n+\n+  @Override\n+  protected String getFactoryClassName(final JdbcVersion jdbcVersion) {\n+    return ArrowFlightJdbcFactory.class.getName();\n+  }\n+\n+  @Override\n+  protected DriverVersion createDriverVersion() {\n+\n+    CreateVersionIfNull:\n+    {\n+\n+      if (version != null) {\n+        break CreateVersionIfNull;\n+      }\n+\n+      try (Reader reader = new BufferedReader(new InputStreamReader(\n+          this.getClass().getResourceAsStream(\"/properties/flight.properties\"),\n+          StandardCharsets.UTF_8))) {\n+        final Properties properties = new Properties();\n+        properties.load(reader);\n+\n+        final String parentName = properties\n+            .getProperty(\"org.apache.arrow.flight.name\");\n+        final String parentVersion = properties\n+            .getProperty(\"org.apache.arrow.flight.version\");\n+        final String[] pVersion = parentVersion.split(\"\\\\.\");\n+\n+        final int parentMajorVersion = Integer.parseInt(pVersion[0]);\n+        final int parentMinorVersion = Integer.parseInt(pVersion[1]);\n+\n+        final String childName = properties\n+            .getProperty(\"org.apache.arrow.flight.jdbc-driver.name\");\n+        final String childVersion = properties\n+            .getProperty(\"org.apache.arrow.flight.jdbc-driver.version\");\n+        final String[] cVersion = childVersion.split(\"\\\\.\");\n+\n+        final int childMajorVersion = Integer.parseInt(cVersion[0]);\n+        final int childMinorVersion = Integer.parseInt(cVersion[1]);\n+\n+        version = new DriverVersion(childName, childVersion, parentName,\n+            parentVersion, true, childMajorVersion, childMinorVersion,\n+            parentMajorVersion, parentMinorVersion);\n+      } catch (final IOException e) {\n+        throw new RuntimeException(\"Failed to load driver version.\", e);\n+      }\n+    }\n+\n+    return version;\n+  }\n+\n+  @Override\n+  public Meta createMeta(final AvaticaConnection connection) {\n+    return new ArrowFlightMetaImpl((ArrowFlightConnection) connection);\n+  }\n+\n+  @Override\n+  protected String getConnectStringPrefix() {\n+    return CONNECT_STRING_PREFIX;\n+  }\n+\n+  @Override\n+  public boolean acceptsURL(final String url) throws SQLException {\n+    return Preconditions.checkNotNull(url).startsWith(CONNECT_STRING_PREFIX);\n+  }\n+\n+  /**\n+   * Parses the provided url based on the format this driver accepts, retrieving\n+   * arguments after the {@link #CONNECT_STRING_PREFIX}.\n+   * <p>\n+   * This method gets the args if the provided URL follows this pattern:\n+   * {@code jdbc:arrow-flight://<host>:<port>[/?key1=val1&key2=val2&(...)]}\n+   *\n+   * <table border=\"1\">\n+   *    <tr>\n+   *        <td>Group</td>\n+   *        <td>Definition</td>\n+   *        <td>Value</td>\n+   *    </tr>\n+   *    <tr>\n+   *        <td>? \u2014 inaccessible</td>\n+   *        <td>{@link #getConnectStringPrefix}</td>\n+   *        <td>\n+   *            the URL prefix accepted by this driver, i.e.,\n+   *            {@code \"jdbc:arrow-flight://\"}\n+   *        </td>\n+   *    </tr>\n+   *    <tr>\n+   *        <td>1</td>\n+   *        <td>IPv4 host name</td>\n+   *        <td>\n+   *            first word after previous group and before \"{@code :}\"\n+   *        </td>\n+   *    </tr>\n+   *    <tr>\n+   *        <td>2</td>\n+   *        <td>IPv4 port number</td>\n+   *        <td>\n+   *            first number after previous group and before \"{@code /?}\"\n+   *        </td>\n+   *    </tr>\n+   *    <tr>\n+   *        <td>3</td>\n+   *        <td>custom call parameters</td>\n+   *        <td>\n+   *            all parameters provided after \"{@code /?}\" \u2014 must follow the\n+   *            pattern: \"{@code key=value}\" with \"{@code &}\" separating a\n+   *            parameter from another\n+   *        </td>\n+   *    </tr>\n+   * </table>\n+   *\n+   * @param url The url to parse.\n+   * @return the parsed arguments.\n+   * @throws SQLException If an error occurs while trying to parse the URL.\n+   */\n+  private Map<Object, Object> getUrlsArgs(String url)\n+      throws SQLException {\n+\n+    /*\n+     *\n+     * Perhaps this logic should be inside a utility class, separated from this\n+     * one, so as to better delegate responsibilities and concerns throughout\n+     * the code and increase maintainability.\n+     *\n+     * =====\n+     *\n+     * Keep in mind that the URL must ALWAYS follow the pattern:\n+     * \"jdbc:arrow-flight://<host>:<port>[/?param1=value1&param2=value2&(...)].\"\n+     *\n+     */\n+\n+    if (!url.startsWith(\"jdbc:\")) {\n+      throw new SQLException(\"Malformed/invalid URL!\");\n\nReview comment:\n       Can we put the reason? (\"Must start with jdbc:\")\n\n##########\nFile path: java/flight/flight-jdbc-driver/src/main/java/org/apache/arrow/driver/jdbc/ArrowFlightJdbcDriver.java\n##########\n@@ -0,0 +1,253 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.driver.jdbc;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.Reader;\n+import java.net.URI;\n+import java.nio.charset.StandardCharsets;\n+import java.sql.SQLException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Properties;\n+\n+import org.apache.arrow.driver.jdbc.utils.ArrowFlightConnectionConfigImpl.ArrowFlightConnectionProperty;\n+import org.apache.arrow.flight.FlightRuntimeException;\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.arrow.util.Preconditions;\n+import org.apache.calcite.avatica.AvaticaConnection;\n+import org.apache.calcite.avatica.DriverVersion;\n+import org.apache.calcite.avatica.Meta;\n+import org.apache.calcite.avatica.UnregisteredDriver;\n+import org.apache.calcite.avatica.org.apache.http.NameValuePair;\n+import org.apache.calcite.avatica.org.apache.http.client.utils.URLEncodedUtils;\n+\n+/**\n+ * JDBC driver for querying data from an Apache Arrow Flight server.\n+ */\n+public class ArrowFlightJdbcDriver extends UnregisteredDriver {\n+\n+  private static final String CONNECT_STRING_PREFIX = \"jdbc:arrow-flight://\";\n+  private static DriverVersion version;\n+\n+  static {\n+    // Special code for supporting Java9 and higher.\n+    // Netty requires some extra properties to unlock some native memory management api\n+    // Setting this property if not already set externally\n+    // This has to be done before any netty class is being loaded\n+    final String key = \"cfjd.io.netty.tryReflectionSetAccessible\";\n+    final String tryReflectionSetAccessible = System.getProperty(key);\n+    if (tryReflectionSetAccessible == null) {\n+      System.setProperty(key, Boolean.TRUE.toString());\n+    }\n+\n+    new ArrowFlightJdbcDriver().register();\n+  }\n+\n+  @Override\n+  public ArrowFlightConnection connect(final String url, final Properties info)\n+      throws SQLException {\n+    final Properties properties = new Properties(info);\n+    properties.putAll(info);\n+\n+    if (url != null) {\n+      final Map<Object, Object> propertiesFromUrl = getUrlsArgs(url);\n+      properties.putAll(propertiesFromUrl);\n+    }\n+\n+    try {\n+      return ArrowFlightConnection.createNewConnection(\n+          this,\n+          factory,\n+          url,\n+          properties,\n+          new RootAllocator(Long.MAX_VALUE));\n+    } catch (AssertionError | FlightRuntimeException e) {\n+      throw new SQLException(\"Failed to connect.\", e);\n+    }\n+  }\n+\n+  @Override\n+  protected String getFactoryClassName(final JdbcVersion jdbcVersion) {\n+    return ArrowFlightJdbcFactory.class.getName();\n+  }\n+\n+  @Override\n+  protected DriverVersion createDriverVersion() {\n+\n+    CreateVersionIfNull:\n+    {\n+\n+      if (version != null) {\n+        break CreateVersionIfNull;\n\nReview comment:\n       Why the use of a break? (Is this even valid outside of a loop?)\n\n##########\nFile path: java/flight/flight-jdbc-driver/src/main/java/org/apache/arrow/driver/jdbc/ArrowFlightJdbcDriver.java\n##########\n@@ -0,0 +1,253 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.driver.jdbc;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.Reader;\n+import java.net.URI;\n+import java.nio.charset.StandardCharsets;\n+import java.sql.SQLException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Properties;\n+\n+import org.apache.arrow.driver.jdbc.utils.ArrowFlightConnectionConfigImpl.ArrowFlightConnectionProperty;\n+import org.apache.arrow.flight.FlightRuntimeException;\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.arrow.util.Preconditions;\n+import org.apache.calcite.avatica.AvaticaConnection;\n+import org.apache.calcite.avatica.DriverVersion;\n+import org.apache.calcite.avatica.Meta;\n+import org.apache.calcite.avatica.UnregisteredDriver;\n+import org.apache.calcite.avatica.org.apache.http.NameValuePair;\n+import org.apache.calcite.avatica.org.apache.http.client.utils.URLEncodedUtils;\n+\n+/**\n+ * JDBC driver for querying data from an Apache Arrow Flight server.\n+ */\n+public class ArrowFlightJdbcDriver extends UnregisteredDriver {\n+\n+  private static final String CONNECT_STRING_PREFIX = \"jdbc:arrow-flight://\";\n+  private static DriverVersion version;\n+\n+  static {\n+    // Special code for supporting Java9 and higher.\n+    // Netty requires some extra properties to unlock some native memory management api\n+    // Setting this property if not already set externally\n+    // This has to be done before any netty class is being loaded\n+    final String key = \"cfjd.io.netty.tryReflectionSetAccessible\";\n+    final String tryReflectionSetAccessible = System.getProperty(key);\n+    if (tryReflectionSetAccessible == null) {\n+      System.setProperty(key, Boolean.TRUE.toString());\n+    }\n+\n+    new ArrowFlightJdbcDriver().register();\n+  }\n+\n+  @Override\n+  public ArrowFlightConnection connect(final String url, final Properties info)\n+      throws SQLException {\n+    final Properties properties = new Properties(info);\n+    properties.putAll(info);\n+\n+    if (url != null) {\n+      final Map<Object, Object> propertiesFromUrl = getUrlsArgs(url);\n+      properties.putAll(propertiesFromUrl);\n+    }\n+\n+    try {\n+      return ArrowFlightConnection.createNewConnection(\n+          this,\n+          factory,\n+          url,\n+          properties,\n+          new RootAllocator(Long.MAX_VALUE));\n+    } catch (AssertionError | FlightRuntimeException e) {\n+      throw new SQLException(\"Failed to connect.\", e);\n+    }\n+  }\n+\n+  @Override\n+  protected String getFactoryClassName(final JdbcVersion jdbcVersion) {\n+    return ArrowFlightJdbcFactory.class.getName();\n+  }\n+\n+  @Override\n+  protected DriverVersion createDriverVersion() {\n+\n+    CreateVersionIfNull:\n+    {\n+\n+      if (version != null) {\n+        break CreateVersionIfNull;\n+      }\n+\n+      try (Reader reader = new BufferedReader(new InputStreamReader(\n+          this.getClass().getResourceAsStream(\"/properties/flight.properties\"),\n+          StandardCharsets.UTF_8))) {\n+        final Properties properties = new Properties();\n+        properties.load(reader);\n+\n+        final String parentName = properties\n+            .getProperty(\"org.apache.arrow.flight.name\");\n+        final String parentVersion = properties\n+            .getProperty(\"org.apache.arrow.flight.version\");\n+        final String[] pVersion = parentVersion.split(\"\\\\.\");\n+\n+        final int parentMajorVersion = Integer.parseInt(pVersion[0]);\n+        final int parentMinorVersion = Integer.parseInt(pVersion[1]);\n+\n+        final String childName = properties\n+            .getProperty(\"org.apache.arrow.flight.jdbc-driver.name\");\n+        final String childVersion = properties\n+            .getProperty(\"org.apache.arrow.flight.jdbc-driver.version\");\n+        final String[] cVersion = childVersion.split(\"\\\\.\");\n+\n+        final int childMajorVersion = Integer.parseInt(cVersion[0]);\n+        final int childMinorVersion = Integer.parseInt(cVersion[1]);\n+\n+        version = new DriverVersion(childName, childVersion, parentName,\n+            parentVersion, true, childMajorVersion, childMinorVersion,\n+            parentMajorVersion, parentMinorVersion);\n+      } catch (final IOException e) {\n+        throw new RuntimeException(\"Failed to load driver version.\", e);\n+      }\n+    }\n+\n+    return version;\n+  }\n+\n+  @Override\n+  public Meta createMeta(final AvaticaConnection connection) {\n+    return new ArrowFlightMetaImpl((ArrowFlightConnection) connection);\n+  }\n+\n+  @Override\n+  protected String getConnectStringPrefix() {\n+    return CONNECT_STRING_PREFIX;\n+  }\n+\n+  @Override\n+  public boolean acceptsURL(final String url) throws SQLException {\n+    return Preconditions.checkNotNull(url).startsWith(CONNECT_STRING_PREFIX);\n+  }\n+\n+  /**\n+   * Parses the provided url based on the format this driver accepts, retrieving\n+   * arguments after the {@link #CONNECT_STRING_PREFIX}.\n+   * <p>\n+   * This method gets the args if the provided URL follows this pattern:\n+   * {@code jdbc:arrow-flight://<host>:<port>[/?key1=val1&key2=val2&(...)]}\n+   *\n+   * <table border=\"1\">\n+   *    <tr>\n+   *        <td>Group</td>\n+   *        <td>Definition</td>\n+   *        <td>Value</td>\n+   *    </tr>\n+   *    <tr>\n+   *        <td>? \u2014 inaccessible</td>\n+   *        <td>{@link #getConnectStringPrefix}</td>\n+   *        <td>\n+   *            the URL prefix accepted by this driver, i.e.,\n+   *            {@code \"jdbc:arrow-flight://\"}\n+   *        </td>\n+   *    </tr>\n+   *    <tr>\n+   *        <td>1</td>\n+   *        <td>IPv4 host name</td>\n+   *        <td>\n+   *            first word after previous group and before \"{@code :}\"\n+   *        </td>\n+   *    </tr>\n+   *    <tr>\n+   *        <td>2</td>\n+   *        <td>IPv4 port number</td>\n+   *        <td>\n+   *            first number after previous group and before \"{@code /?}\"\n+   *        </td>\n+   *    </tr>\n+   *    <tr>\n+   *        <td>3</td>\n+   *        <td>custom call parameters</td>\n+   *        <td>\n+   *            all parameters provided after \"{@code /?}\" \u2014 must follow the\n+   *            pattern: \"{@code key=value}\" with \"{@code &}\" separating a\n+   *            parameter from another\n+   *        </td>\n+   *    </tr>\n+   * </table>\n+   *\n+   * @param url The url to parse.\n+   * @return the parsed arguments.\n+   * @throws SQLException If an error occurs while trying to parse the URL.\n+   */\n+  private Map<Object, Object> getUrlsArgs(String url)\n+      throws SQLException {\n+\n+    /*\n+     *\n+     * Perhaps this logic should be inside a utility class, separated from this\n+     * one, so as to better delegate responsibilities and concerns throughout\n+     * the code and increase maintainability.\n+     *\n+     * =====\n+     *\n+     * Keep in mind that the URL must ALWAYS follow the pattern:\n+     * \"jdbc:arrow-flight://<host>:<port>[/?param1=value1&param2=value2&(...)].\"\n+     *\n+     */\n+\n+    if (!url.startsWith(\"jdbc:\")) {\n+      throw new SQLException(\"Malformed/invalid URL!\");\n+    }\n+\n+    // It's necessary to use a string without \"jdbc:\" at the beginning to be parsed as a valid URL.\n+    url = url.substring(5);\n+\n+    final URI uri;\n+\n+    try {\n+      uri = URI.create(url);\n+    } catch (final IllegalArgumentException e) {\n+      throw new SQLException(\"Malformed/invalid URL!\", e);\n+    }\n+\n+    if (!Objects.equals(uri.getScheme(), \"arrow-flight\")) {\n+      throw new SQLException(\"Malformed/invalid URL!\");\n\nReview comment:\n       Can we put the reason? (\"URL scheme must be\u2026\")\n\n##########\nFile path: java/flight/flight-jdbc-driver/src/main/java/org/apache/arrow/driver/jdbc/client/ArrowFlightSqlClientHandler.java\n##########\n@@ -0,0 +1,516 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.driver.jdbc.client;\n+\n+import java.io.IOException;\n+import java.security.GeneralSecurityException;\n+import java.sql.SQLException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.apache.arrow.driver.jdbc.client.utils.ClientAuthenticationUtils;\n+import org.apache.arrow.flight.CallOption;\n+import org.apache.arrow.flight.FlightClient;\n+import org.apache.arrow.flight.FlightClientMiddleware;\n+import org.apache.arrow.flight.FlightEndpoint;\n+import org.apache.arrow.flight.FlightInfo;\n+import org.apache.arrow.flight.FlightStream;\n+import org.apache.arrow.flight.Location;\n+import org.apache.arrow.flight.auth2.ClientBearerHeaderHandler;\n+import org.apache.arrow.flight.auth2.ClientIncomingAuthHeaderMiddleware;\n+import org.apache.arrow.flight.sql.FlightSqlClient;\n+import org.apache.arrow.flight.sql.impl.FlightSql.SqlInfo;\n+import org.apache.arrow.flight.sql.util.TableRef;\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.util.AutoCloseables;\n+import org.apache.arrow.util.Preconditions;\n+import org.apache.arrow.vector.types.pojo.Schema;\n+import org.apache.calcite.avatica.Meta.StatementType;\n+\n+/**\n+ * A {@link FlightSqlClient} handler.\n+ */\n+public final class ArrowFlightSqlClientHandler implements AutoCloseable {\n+\n+  private final FlightSqlClient sqlClient;\n+  private final Set<CallOption> options = new HashSet<>();\n+\n+  ArrowFlightSqlClientHandler(final FlightSqlClient sqlClient,\n+                              final Collection<CallOption> options) {\n+    this.options.addAll(options);\n+    this.sqlClient = Preconditions.checkNotNull(sqlClient);\n+  }\n+\n+  /**\n+   * Creates a new {@link ArrowFlightSqlClientHandler} from the provided {@code client} and {@code options}.\n+   *\n+   * @param client  the {@link FlightClient} to manage under a {@link FlightSqlClient} wrapper.\n+   * @param options the {@link CallOption}s to persist in between subsequent client calls.\n+   * @return a new {@link ArrowFlightSqlClientHandler}.\n+   */\n+  public static ArrowFlightSqlClientHandler createNewHandler(final FlightClient client,\n+                                                             final Collection<CallOption> options) {\n+    return new ArrowFlightSqlClientHandler(new FlightSqlClient(client), options);\n+  }\n+\n+  /**\n+   * Gets the {@link #options} for the subsequent calls from this handler.\n+   *\n+   * @return the {@link CallOption}s.\n+   */\n+  private CallOption[] getOptions() {\n+    return options.toArray(new CallOption[0]);\n+  }\n+\n+  /**\n+   * Makes an RPC \"getStream\" request based on the provided {@link FlightInfo}\n+   * object. Retrieves the result of the query previously prepared with \"getInfo.\"\n+   *\n+   * @param flightInfo The {@link FlightInfo} instance from which to fetch results.\n+   * @return a {@code FlightStream} of results.\n+   */\n+  public List<FlightStream> getStreams(final FlightInfo flightInfo) {\n+    return flightInfo.getEndpoints().stream()\n+        .map(FlightEndpoint::getTicket)\n+        .map(ticket -> sqlClient.getStream(ticket, getOptions()))\n+        .collect(Collectors.toList());\n+  }\n+\n+  /**\n+   * Makes an RPC \"getInfo\" request based on the provided {@code query}\n+   * object.\n+   *\n+   * @param query The query.\n+   * @return a {@code FlightStream} of results.\n+   */\n+  public FlightInfo getInfo(final String query) {\n+    return sqlClient.execute(query, getOptions());\n+  }\n+\n+  @Override\n+  public void close() throws SQLException {\n+    try {\n+      AutoCloseables.close(sqlClient);\n+    } catch (final Exception e) {\n+      throw new SQLException(\"Failed to clean up client resources.\", e);\n+    }\n+  }\n+\n+  /**\n+   * A prepared statement handler.\n+   */\n+  public interface PreparedStatement extends AutoCloseable {\n+    /**\n+     * Executes this {@link PreparedStatement}.\n+     *\n+     * @return the {@link FlightInfo} representing the outcome of this query execution.\n+     * @throws SQLException on error.\n+     */\n+    FlightInfo executeQuery() throws SQLException;\n+\n+    /**\n+     * Executes a {@link StatementType#UPDATE} query.\n+     *\n+     * @return the number of rows affected.\n+     */\n+    long executeUpdate();\n+\n+    /**\n+     * Gets the {@link StatementType} of this {@link PreparedStatement}.\n+     *\n+     * @return the Statement Type.\n+     */\n+    StatementType getType();\n+\n+    /**\n+     * Gets the {@link Schema} of this {@link PreparedStatement}.\n+     *\n+     * @return {@link Schema}.\n+     */\n+    Schema getDataSetSchema();\n+\n+    @Override\n+    void close();\n+  }\n+\n+  /**\n+   * Creates a new {@link PreparedStatement} for the given {@code query}.\n+   *\n+   * @param query the SQL query.\n+   * @return a new prepared statement.\n+   */\n+  public PreparedStatement prepare(final String query) {\n+    final FlightSqlClient.PreparedStatement preparedStatement =\n+        sqlClient.prepare(query, getOptions());\n+    return new PreparedStatement() {\n+      @Override\n+      public FlightInfo executeQuery() throws SQLException {\n+        return preparedStatement.execute(getOptions());\n\nReview comment:\n       We should be catching and wrapping FlightRuntimeException here right?\n\n##########\nFile path: java/flight/flight-jdbc-driver/src/main/java/org/apache/arrow/driver/jdbc/accessor/impl/numeric/ArrowFlightJdbcBitVectorAccessor.java\n##########\n@@ -0,0 +1,124 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.driver.jdbc.accessor.impl.numeric;\n+\n+import java.math.BigDecimal;\n+import java.nio.ByteBuffer;\n+import java.util.function.IntSupplier;\n+\n+import org.apache.arrow.driver.jdbc.accessor.ArrowFlightJdbcAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.ArrowFlightJdbcAccessorFactory;\n+import org.apache.arrow.vector.BitVector;\n+import org.apache.arrow.vector.holders.NullableBitHolder;\n+\n+/**\n+ * Accessor for the arrow {@link BitVector}.\n+ */\n+public class ArrowFlightJdbcBitVectorAccessor extends ArrowFlightJdbcAccessor {\n+\n+  private final BitVector vector;\n+  private final NullableBitHolder holder;\n+  private static final int BYTES_T0_ALLOCATE = 1;\n+\n+  /**\n+   * Constructor for the BitVectorAccessor.\n+   *\n+   * @param vector             an instance of a {@link BitVector}.\n+   * @param currentRowSupplier a supplier to check which row is being accessed.\n+   * @param setCursorWasNull   the consumer to set if value was null.\n+   */\n+  public ArrowFlightJdbcBitVectorAccessor(BitVector vector, IntSupplier currentRowSupplier,\n+                                          ArrowFlightJdbcAccessorFactory.WasNullConsumer setCursorWasNull) {\n+    super(currentRowSupplier, setCursorWasNull);\n+    this.vector = vector;\n+    this.holder = new NullableBitHolder();\n+  }\n+\n+  @Override\n+  public Class<?> getObjectClass() {\n+    return Long.class;\n\nReview comment:\n       Not Boolean.class?\n\n##########\nFile path: java/flight/flight-jdbc-driver/src/main/java/org/apache/arrow/driver/jdbc/ArrowFlightJdbcPooledConnection.java\n##########\n@@ -0,0 +1,112 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.driver.jdbc;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Properties;\n+import java.util.Set;\n+\n+import javax.sql.ConnectionEvent;\n+import javax.sql.ConnectionEventListener;\n+import javax.sql.PooledConnection;\n+import javax.sql.StatementEventListener;\n+\n+import org.apache.arrow.driver.jdbc.utils.ConnectionWrapper;\n+\n+/**\n+ * {@link PooledConnection} implementation for Arrow Flight JDBC Driver.\n+ */\n+public class ArrowFlightJdbcPooledConnection implements PooledConnection {\n+\n+  private final ArrowFlightConnection connection;\n+  private final Set<ConnectionEventListener> eventListeners;\n+  private final Set<StatementEventListener> statementEventListeners;\n+\n+  private final class ConnectionHandle extends ConnectionWrapper {\n\nReview comment:\n       nit: it might be a little clearer to make this a static class and explicitly pass through the connection.\n\n##########\nFile path: java/flight/flight-jdbc-driver/src/main/java/org/apache/arrow/driver/jdbc/accessor/impl/calendar/ArrowFlightJdbcTimeVectorAccessor.java\n##########\n@@ -0,0 +1,154 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.driver.jdbc.accessor.impl.calendar;\n+\n+import static org.apache.arrow.driver.jdbc.accessor.impl.calendar.ArrowFlightJdbcTimeVectorGetter.Getter;\n+import static org.apache.arrow.driver.jdbc.accessor.impl.calendar.ArrowFlightJdbcTimeVectorGetter.Holder;\n+import static org.apache.arrow.driver.jdbc.accessor.impl.calendar.ArrowFlightJdbcTimeVectorGetter.createGetter;\n+\n+import java.sql.Time;\n+import java.sql.Timestamp;\n+import java.util.Calendar;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.IntSupplier;\n+\n+import org.apache.arrow.driver.jdbc.accessor.ArrowFlightJdbcAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.ArrowFlightJdbcAccessorFactory;\n+import org.apache.arrow.driver.jdbc.utils.DateTimeUtils;\n+import org.apache.arrow.vector.TimeMicroVector;\n+import org.apache.arrow.vector.TimeMilliVector;\n+import org.apache.arrow.vector.TimeNanoVector;\n+import org.apache.arrow.vector.TimeSecVector;\n+import org.apache.arrow.vector.ValueVector;\n+\n+/**\n+ * Accessor for the Arrow types: {@link TimeNanoVector}, {@link TimeMicroVector}, {@link TimeMilliVector}\n+ * and {@link TimeSecVector}.\n+ */\n+public class ArrowFlightJdbcTimeVectorAccessor extends ArrowFlightJdbcAccessor {\n+\n+  private final Getter getter;\n+  private final TimeUnit timeUnit;\n+  private final Holder holder;\n+\n+  /**\n+   * Instantiate an accessor for a {@link TimeNanoVector}.\n+   *\n+   * @param vector             an instance of a TimeNanoVector.\n+   * @param currentRowSupplier the supplier to track the lines.\n+   * @param setCursorWasNull   the consumer to set if value was null.\n+   */\n+  public ArrowFlightJdbcTimeVectorAccessor(TimeNanoVector vector, IntSupplier currentRowSupplier,\n+                                           ArrowFlightJdbcAccessorFactory.WasNullConsumer setCursorWasNull) {\n+    super(currentRowSupplier, setCursorWasNull);\n+    this.holder = new Holder();\n+    this.getter = createGetter(vector);\n+    this.timeUnit = getTimeUnitForVector(vector);\n+  }\n+\n+  /**\n+   * Instantiate an accessor for a {@link TimeMicroVector}.\n+   *\n+   * @param vector             an instance of a TimeMicroVector.\n+   * @param currentRowSupplier the supplier to track the lines.\n+   * @param setCursorWasNull   the consumer to set if value was null.\n+   */\n+  public ArrowFlightJdbcTimeVectorAccessor(TimeMicroVector vector, IntSupplier currentRowSupplier,\n+                                           ArrowFlightJdbcAccessorFactory.WasNullConsumer setCursorWasNull) {\n+    super(currentRowSupplier, setCursorWasNull);\n+    this.holder = new Holder();\n+    this.getter = createGetter(vector);\n+    this.timeUnit = getTimeUnitForVector(vector);\n+  }\n+\n+  /**\n+   * Instantiate an accessor for a {@link TimeMilliVector}.\n+   *\n+   * @param vector             an instance of a TimeMilliVector.\n+   * @param currentRowSupplier the supplier to track the lines.\n+   */\n+  public ArrowFlightJdbcTimeVectorAccessor(TimeMilliVector vector, IntSupplier currentRowSupplier,\n+                                           ArrowFlightJdbcAccessorFactory.WasNullConsumer setCursorWasNull) {\n+    super(currentRowSupplier, setCursorWasNull);\n+    this.holder = new Holder();\n+    this.getter = createGetter(vector);\n+    this.timeUnit = getTimeUnitForVector(vector);\n+  }\n+\n+  /**\n+   * Instantiate an accessor for a {@link TimeSecVector}.\n+   *\n+   * @param vector             an instance of a TimeSecVector.\n+   * @param currentRowSupplier the supplier to track the lines.\n+   */\n+  public ArrowFlightJdbcTimeVectorAccessor(TimeSecVector vector, IntSupplier currentRowSupplier,\n+                                           ArrowFlightJdbcAccessorFactory.WasNullConsumer setCursorWasNull) {\n+    super(currentRowSupplier, setCursorWasNull);\n+    this.holder = new Holder();\n+    this.getter = createGetter(vector);\n+    this.timeUnit = getTimeUnitForVector(vector);\n+  }\n+\n+  @Override\n+  public Class<?> getObjectClass() {\n+    return Time.class;\n+  }\n+\n+  @Override\n+  public Object getObject() {\n+    return this.getTime(null);\n+  }\n+\n+  @Override\n+  public Time getTime(Calendar calendar) {\n+    getter.get(getCurrentRow(), holder);\n+    this.wasNull = holder.isSet == 0;\n+    this.wasNullConsumer.setWasNull(this.wasNull);\n+    if (this.wasNull) {\n+      return null;\n+    }\n+\n+    long value = holder.value;\n+    long milliseconds = this.timeUnit.toMillis(value);\n+\n+    return new Time(DateTimeUtils.applyCalendarOffset(milliseconds, calendar));\n+  }\n+\n+  @Override\n+  public Timestamp getTimestamp(Calendar calendar) {\n+    Time time = getTime(calendar);\n+    if (time == null) {\n+      return null;\n+    }\n+    return new Timestamp(time.getTime());\n\nReview comment:\n       I don't think we can get from Time to Timestamp.\n\n##########\nFile path: java/flight/flight-jdbc-driver/src/main/java/org/apache/arrow/driver/jdbc/utils/ConnectionWrapper.java\n##########\n@@ -0,0 +1,344 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.driver.jdbc.utils;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import java.sql.Array;\n+import java.sql.Blob;\n+import java.sql.CallableStatement;\n+import java.sql.Clob;\n+import java.sql.Connection;\n+import java.sql.DatabaseMetaData;\n+import java.sql.NClob;\n+import java.sql.PreparedStatement;\n+import java.sql.SQLClientInfoException;\n+import java.sql.SQLException;\n+import java.sql.SQLWarning;\n+import java.sql.SQLXML;\n+import java.sql.Savepoint;\n+import java.sql.Statement;\n+import java.sql.Struct;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.concurrent.Executor;\n+\n+import org.apache.arrow.driver.jdbc.ArrowFlightJdbcPooledConnection;\n+\n+/**\n+ * Auxiliary wrapper class for {@link Connection}, used on {@link ArrowFlightJdbcPooledConnection}.\n+ */\n+public class ConnectionWrapper implements Connection {\n\nReview comment:\n       Since this appears to be a pure proxy, it might be worth noting that fact (aka this is purely to serve as a base class and factor out the boilerplate elsewhere)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-26T18:12:18.608+0000",
                    "updated": "2022-01-26T18:12:18.608+0000",
                    "started": "2022-01-26T18:12:18.608+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "715886",
                    "issueId": "13424739"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13424739/worklog/716069",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rafael-telles commented on pull request #12254:\nURL: https://github.com/apache/arrow/pull/12254#issuecomment-1022667198\n\n\n   Thank you so much @lidavidm ! We will be working on your feedback soon\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-26T22:37:11.436+0000",
                    "updated": "2022-01-26T22:37:11.436+0000",
                    "started": "2022-01-26T22:37:11.436+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "716069",
                    "issueId": "13424739"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13424739/worklog/716070",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rafael-telles commented on a change in pull request #12254:\nURL: https://github.com/apache/arrow/pull/12254#discussion_r793111644\n\n\n\n##########\nFile path: java/flight/flight-jdbc-driver/src/test/java/org/apache/arrow/driver/jdbc/utils/PropertiesSample.java\n##########\n@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.driver.jdbc.utils;\n+\n+import java.util.Arrays;\n+import java.util.Iterator;\n+import java.util.Properties;\n+\n+import javax.annotation.Nullable;\n+\n+import org.apache.arrow.driver.jdbc.FlightServerTestRule;\n+import org.apache.arrow.util.Preconditions;\n+\n+\n+/**\n+ * {@link Properties} wrapper used for testing. Uses sample values.\n+ *\n+ * @see FlightServerTestRule\n+ * @deprecated not updatable to match dinamic server allocation.\n+ */\n+@Deprecated\n\nReview comment:\n       Yes! This is still work in progress and we will have to clean up\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-26T22:41:49.790+0000",
                    "updated": "2022-01-26T22:41:49.790+0000",
                    "started": "2022-01-26T22:41:49.790+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "716070",
                    "issueId": "13424739"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13424739/worklog/721219",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #12254:\nURL: https://github.com/apache/arrow/pull/12254#issuecomment-1030421639\n\n\n   I just wanted to echo my comment from the mailing list that I think it would be best if we held a code donation vote and IP clearance for this piece of work since it is substantial and was developed outside of the Arrow community. I don't expect there will be any issues but it is good due diligence. As a reminder we welcome the development of large new projects in feature branches, where the development process otherwise is conducted according to the Apache Way (public discussions, issues, PRs, etc.) \r\n   \r\n   I believe this will involve a Software Grant from Dremio (correct me if I'm wrong) for the work and ICLAs for the individual contributors. \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-04T23:14:04.387+0000",
                    "updated": "2022-02-04T23:14:04.387+0000",
                    "started": "2022-02-04T23:14:04.386+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "721219",
                    "issueId": "13424739"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13424739/worklog/721221",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #12254:\nURL: https://github.com/apache/arrow/pull/12254#issuecomment-1030423406\n\n\n   Thanks for chiming in Wes - I'll look into the process and follow up on the mailing list @rafael-telles.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-04T23:18:20.165+0000",
                    "updated": "2022-02-04T23:18:20.165+0000",
                    "started": "2022-02-04T23:18:20.164+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "721221",
                    "issueId": "13424739"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13424739/worklog/731140",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "iurysalino commented on a change in pull request #12254:\nURL: https://github.com/apache/arrow/pull/12254#discussion_r812320324\n\n\n\n##########\nFile path: java/flight/flight-jdbc-driver/src/main/java/org/apache/arrow/driver/jdbc/accessor/ArrowFlightJdbcAccessorFactory.java\n##########\n@@ -0,0 +1,215 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.driver.jdbc.accessor;\n+\n+import java.util.function.IntSupplier;\n+\n+import org.apache.arrow.driver.jdbc.accessor.impl.ArrowFlightJdbcNullVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.binary.ArrowFlightJdbcBinaryVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.calendar.ArrowFlightJdbcDateVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.calendar.ArrowFlightJdbcDurationVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.calendar.ArrowFlightJdbcIntervalVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.calendar.ArrowFlightJdbcTimeStampVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.calendar.ArrowFlightJdbcTimeVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.complex.ArrowFlightJdbcDenseUnionVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.complex.ArrowFlightJdbcFixedSizeListVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.complex.ArrowFlightJdbcLargeListVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.complex.ArrowFlightJdbcListVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.complex.ArrowFlightJdbcMapVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.complex.ArrowFlightJdbcStructVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.complex.ArrowFlightJdbcUnionVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.numeric.ArrowFlightJdbcBaseIntVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.numeric.ArrowFlightJdbcBitVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.numeric.ArrowFlightJdbcDecimalVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.numeric.ArrowFlightJdbcFloat4VectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.numeric.ArrowFlightJdbcFloat8VectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.text.ArrowFlightJdbcVarCharVectorAccessor;\n+import org.apache.arrow.vector.BigIntVector;\n+import org.apache.arrow.vector.BitVector;\n+import org.apache.arrow.vector.DateDayVector;\n+import org.apache.arrow.vector.DateMilliVector;\n+import org.apache.arrow.vector.Decimal256Vector;\n+import org.apache.arrow.vector.DecimalVector;\n+import org.apache.arrow.vector.DurationVector;\n+import org.apache.arrow.vector.FixedSizeBinaryVector;\n+import org.apache.arrow.vector.Float4Vector;\n+import org.apache.arrow.vector.Float8Vector;\n+import org.apache.arrow.vector.IntVector;\n+import org.apache.arrow.vector.IntervalDayVector;\n+import org.apache.arrow.vector.IntervalYearVector;\n+import org.apache.arrow.vector.LargeVarBinaryVector;\n+import org.apache.arrow.vector.LargeVarCharVector;\n+import org.apache.arrow.vector.NullVector;\n+import org.apache.arrow.vector.SmallIntVector;\n+import org.apache.arrow.vector.TimeMicroVector;\n+import org.apache.arrow.vector.TimeMilliVector;\n+import org.apache.arrow.vector.TimeNanoVector;\n+import org.apache.arrow.vector.TimeSecVector;\n+import org.apache.arrow.vector.TimeStampVector;\n+import org.apache.arrow.vector.TinyIntVector;\n+import org.apache.arrow.vector.UInt1Vector;\n+import org.apache.arrow.vector.UInt2Vector;\n+import org.apache.arrow.vector.UInt4Vector;\n+import org.apache.arrow.vector.UInt8Vector;\n+import org.apache.arrow.vector.ValueVector;\n+import org.apache.arrow.vector.VarBinaryVector;\n+import org.apache.arrow.vector.VarCharVector;\n+import org.apache.arrow.vector.complex.DenseUnionVector;\n+import org.apache.arrow.vector.complex.FixedSizeListVector;\n+import org.apache.arrow.vector.complex.LargeListVector;\n+import org.apache.arrow.vector.complex.ListVector;\n+import org.apache.arrow.vector.complex.MapVector;\n+import org.apache.arrow.vector.complex.StructVector;\n+import org.apache.arrow.vector.complex.UnionVector;\n+\n+/**\n+ * Factory to instantiate the accessors.\n+ */\n+public class ArrowFlightJdbcAccessorFactory {\n+\n+  /**\n+   * Create an accessor according to the its type.\n+   *\n+   * @param vector        an instance of an arrow vector.\n+   * @param getCurrentRow a supplier to check which row is being accessed.\n+   * @return an instance of one of the accessors.\n+   */\n+  public static ArrowFlightJdbcAccessor createAccessor(ValueVector vector,\n+                                                       IntSupplier getCurrentRow,\n+                                                       WasNullConsumer setCursorWasNull) {\n+    if (vector instanceof UInt1Vector) {\n+      return new ArrowFlightJdbcBaseIntVectorAccessor((UInt1Vector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof UInt2Vector) {\n+      return new ArrowFlightJdbcBaseIntVectorAccessor((UInt2Vector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof UInt4Vector) {\n+      return new ArrowFlightJdbcBaseIntVectorAccessor((UInt4Vector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof UInt8Vector) {\n+      return new ArrowFlightJdbcBaseIntVectorAccessor((UInt8Vector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof TinyIntVector) {\n+      return new ArrowFlightJdbcBaseIntVectorAccessor((TinyIntVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof SmallIntVector) {\n+      return new ArrowFlightJdbcBaseIntVectorAccessor((SmallIntVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof IntVector) {\n+      return new ArrowFlightJdbcBaseIntVectorAccessor((IntVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof BigIntVector) {\n+      return new ArrowFlightJdbcBaseIntVectorAccessor((BigIntVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof Float4Vector) {\n+      return new ArrowFlightJdbcFloat4VectorAccessor((Float4Vector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof Float8Vector) {\n+      return new ArrowFlightJdbcFloat8VectorAccessor((Float8Vector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof BitVector) {\n+      return new ArrowFlightJdbcBitVectorAccessor((BitVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof DecimalVector) {\n+      return new ArrowFlightJdbcDecimalVectorAccessor((DecimalVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof Decimal256Vector) {\n+      return new ArrowFlightJdbcDecimalVectorAccessor((Decimal256Vector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof VarBinaryVector) {\n+      return new ArrowFlightJdbcBinaryVectorAccessor((VarBinaryVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof LargeVarBinaryVector) {\n+      return new ArrowFlightJdbcBinaryVectorAccessor((LargeVarBinaryVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof FixedSizeBinaryVector) {\n+      return new ArrowFlightJdbcBinaryVectorAccessor((FixedSizeBinaryVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof TimeStampVector) {\n+      return new ArrowFlightJdbcTimeStampVectorAccessor((TimeStampVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof TimeNanoVector) {\n+      return new ArrowFlightJdbcTimeVectorAccessor((TimeNanoVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof TimeMicroVector) {\n+      return new ArrowFlightJdbcTimeVectorAccessor((TimeMicroVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof TimeMilliVector) {\n+      return new ArrowFlightJdbcTimeVectorAccessor((TimeMilliVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof TimeSecVector) {\n+      return new ArrowFlightJdbcTimeVectorAccessor((TimeSecVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof DateDayVector) {\n+      return new ArrowFlightJdbcDateVectorAccessor(((DateDayVector) vector), getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof DateMilliVector) {\n+      return new ArrowFlightJdbcDateVectorAccessor(((DateMilliVector) vector), getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof VarCharVector) {\n+      return new ArrowFlightJdbcVarCharVectorAccessor((VarCharVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof LargeVarCharVector) {\n+      return new ArrowFlightJdbcVarCharVectorAccessor((LargeVarCharVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof DurationVector) {\n+      return new ArrowFlightJdbcDurationVectorAccessor((DurationVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof IntervalDayVector) {\n+      return new ArrowFlightJdbcIntervalVectorAccessor(((IntervalDayVector) vector), getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof IntervalYearVector) {\n+      return new ArrowFlightJdbcIntervalVectorAccessor(((IntervalYearVector) vector), getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof StructVector) {\n+      return new ArrowFlightJdbcStructVectorAccessor((StructVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof MapVector) {\n+      return new ArrowFlightJdbcMapVectorAccessor((MapVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof ListVector) {\n+      return new ArrowFlightJdbcListVectorAccessor((ListVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof LargeListVector) {\n+      return new ArrowFlightJdbcLargeListVectorAccessor((LargeListVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof FixedSizeListVector) {\n+      return new ArrowFlightJdbcFixedSizeListVectorAccessor((FixedSizeListVector) vector,\n+          getCurrentRow, setCursorWasNull);\n+    } else if (vector instanceof UnionVector) {\n+      return new ArrowFlightJdbcUnionVectorAccessor((UnionVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof DenseUnionVector) {\n+      return new ArrowFlightJdbcDenseUnionVectorAccessor((DenseUnionVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof NullVector || vector == null) {\n+      return new ArrowFlightJdbcNullVectorAccessor(setCursorWasNull);\n+    }\n+\n+    throw new UnsupportedOperationException();\n\nReview comment:\n       Done\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-22T20:14:28.565+0000",
                    "updated": "2022-02-22T20:14:28.565+0000",
                    "started": "2022-02-22T20:14:28.565+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "731140",
                    "issueId": "13424739"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13424739/worklog/739643",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vfraga commented on a change in pull request #12254:\nURL: https://github.com/apache/arrow/pull/12254#discussion_r823994218\n\n\n\n##########\nFile path: java/pom.xml\n##########\n@@ -506,12 +506,23 @@\n             </lifecycleMappingMetadata>\n           </configuration>\n         </plugin>\n+        <plugin>\n+          <groupId>com.github.spotbugs</groupId>\n+          <artifactId>spotbugs-maven-plugin</artifactId>\n+          <version>4.2.3</version>\n+        </plugin>\n+\n\nReview comment:\n       Sure.\n\n##########\nFile path: java/flight/flight-jdbc-driver/src/test/resources/keys/cert0.pem\n##########\n@@ -0,0 +1,29 @@\n+-----BEGIN CERTIFICATE-----\n\nReview comment:\n       We could use them, we just need to get it in flight-jdbc-driver, and see how we can make a keystore for them.\n\n##########\nFile path: java/flight/flight-jdbc-driver/src/main/java/org/apache/arrow/driver/jdbc/accessor/ArrowFlightJdbcAccessorFactory.java\n##########\n@@ -0,0 +1,215 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.driver.jdbc.accessor;\n+\n+import java.util.function.IntSupplier;\n+\n+import org.apache.arrow.driver.jdbc.accessor.impl.ArrowFlightJdbcNullVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.binary.ArrowFlightJdbcBinaryVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.calendar.ArrowFlightJdbcDateVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.calendar.ArrowFlightJdbcDurationVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.calendar.ArrowFlightJdbcIntervalVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.calendar.ArrowFlightJdbcTimeStampVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.calendar.ArrowFlightJdbcTimeVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.complex.ArrowFlightJdbcDenseUnionVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.complex.ArrowFlightJdbcFixedSizeListVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.complex.ArrowFlightJdbcLargeListVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.complex.ArrowFlightJdbcListVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.complex.ArrowFlightJdbcMapVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.complex.ArrowFlightJdbcStructVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.complex.ArrowFlightJdbcUnionVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.numeric.ArrowFlightJdbcBaseIntVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.numeric.ArrowFlightJdbcBitVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.numeric.ArrowFlightJdbcDecimalVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.numeric.ArrowFlightJdbcFloat4VectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.numeric.ArrowFlightJdbcFloat8VectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.text.ArrowFlightJdbcVarCharVectorAccessor;\n+import org.apache.arrow.vector.BigIntVector;\n+import org.apache.arrow.vector.BitVector;\n+import org.apache.arrow.vector.DateDayVector;\n+import org.apache.arrow.vector.DateMilliVector;\n+import org.apache.arrow.vector.Decimal256Vector;\n+import org.apache.arrow.vector.DecimalVector;\n+import org.apache.arrow.vector.DurationVector;\n+import org.apache.arrow.vector.FixedSizeBinaryVector;\n+import org.apache.arrow.vector.Float4Vector;\n+import org.apache.arrow.vector.Float8Vector;\n+import org.apache.arrow.vector.IntVector;\n+import org.apache.arrow.vector.IntervalDayVector;\n+import org.apache.arrow.vector.IntervalYearVector;\n+import org.apache.arrow.vector.LargeVarBinaryVector;\n+import org.apache.arrow.vector.LargeVarCharVector;\n+import org.apache.arrow.vector.NullVector;\n+import org.apache.arrow.vector.SmallIntVector;\n+import org.apache.arrow.vector.TimeMicroVector;\n+import org.apache.arrow.vector.TimeMilliVector;\n+import org.apache.arrow.vector.TimeNanoVector;\n+import org.apache.arrow.vector.TimeSecVector;\n+import org.apache.arrow.vector.TimeStampVector;\n+import org.apache.arrow.vector.TinyIntVector;\n+import org.apache.arrow.vector.UInt1Vector;\n+import org.apache.arrow.vector.UInt2Vector;\n+import org.apache.arrow.vector.UInt4Vector;\n+import org.apache.arrow.vector.UInt8Vector;\n+import org.apache.arrow.vector.ValueVector;\n+import org.apache.arrow.vector.VarBinaryVector;\n+import org.apache.arrow.vector.VarCharVector;\n+import org.apache.arrow.vector.complex.DenseUnionVector;\n+import org.apache.arrow.vector.complex.FixedSizeListVector;\n+import org.apache.arrow.vector.complex.LargeListVector;\n+import org.apache.arrow.vector.complex.ListVector;\n+import org.apache.arrow.vector.complex.MapVector;\n+import org.apache.arrow.vector.complex.StructVector;\n+import org.apache.arrow.vector.complex.UnionVector;\n+\n+/**\n+ * Factory to instantiate the accessors.\n+ */\n+public class ArrowFlightJdbcAccessorFactory {\n+\n+  /**\n+   * Create an accessor according to the its type.\n+   *\n+   * @param vector        an instance of an arrow vector.\n+   * @param getCurrentRow a supplier to check which row is being accessed.\n+   * @return an instance of one of the accessors.\n+   */\n+  public static ArrowFlightJdbcAccessor createAccessor(ValueVector vector,\n+                                                       IntSupplier getCurrentRow,\n+                                                       WasNullConsumer setCursorWasNull) {\n+    if (vector instanceof UInt1Vector) {\n+      return new ArrowFlightJdbcBaseIntVectorAccessor((UInt1Vector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof UInt2Vector) {\n+      return new ArrowFlightJdbcBaseIntVectorAccessor((UInt2Vector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof UInt4Vector) {\n+      return new ArrowFlightJdbcBaseIntVectorAccessor((UInt4Vector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof UInt8Vector) {\n+      return new ArrowFlightJdbcBaseIntVectorAccessor((UInt8Vector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof TinyIntVector) {\n+      return new ArrowFlightJdbcBaseIntVectorAccessor((TinyIntVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof SmallIntVector) {\n+      return new ArrowFlightJdbcBaseIntVectorAccessor((SmallIntVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof IntVector) {\n+      return new ArrowFlightJdbcBaseIntVectorAccessor((IntVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof BigIntVector) {\n+      return new ArrowFlightJdbcBaseIntVectorAccessor((BigIntVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof Float4Vector) {\n+      return new ArrowFlightJdbcFloat4VectorAccessor((Float4Vector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof Float8Vector) {\n+      return new ArrowFlightJdbcFloat8VectorAccessor((Float8Vector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof BitVector) {\n+      return new ArrowFlightJdbcBitVectorAccessor((BitVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof DecimalVector) {\n+      return new ArrowFlightJdbcDecimalVectorAccessor((DecimalVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof Decimal256Vector) {\n+      return new ArrowFlightJdbcDecimalVectorAccessor((Decimal256Vector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof VarBinaryVector) {\n+      return new ArrowFlightJdbcBinaryVectorAccessor((VarBinaryVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof LargeVarBinaryVector) {\n+      return new ArrowFlightJdbcBinaryVectorAccessor((LargeVarBinaryVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof FixedSizeBinaryVector) {\n+      return new ArrowFlightJdbcBinaryVectorAccessor((FixedSizeBinaryVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof TimeStampVector) {\n+      return new ArrowFlightJdbcTimeStampVectorAccessor((TimeStampVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof TimeNanoVector) {\n+      return new ArrowFlightJdbcTimeVectorAccessor((TimeNanoVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof TimeMicroVector) {\n+      return new ArrowFlightJdbcTimeVectorAccessor((TimeMicroVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof TimeMilliVector) {\n+      return new ArrowFlightJdbcTimeVectorAccessor((TimeMilliVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof TimeSecVector) {\n+      return new ArrowFlightJdbcTimeVectorAccessor((TimeSecVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof DateDayVector) {\n+      return new ArrowFlightJdbcDateVectorAccessor(((DateDayVector) vector), getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof DateMilliVector) {\n+      return new ArrowFlightJdbcDateVectorAccessor(((DateMilliVector) vector), getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof VarCharVector) {\n+      return new ArrowFlightJdbcVarCharVectorAccessor((VarCharVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof LargeVarCharVector) {\n+      return new ArrowFlightJdbcVarCharVectorAccessor((LargeVarCharVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof DurationVector) {\n+      return new ArrowFlightJdbcDurationVectorAccessor((DurationVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof IntervalDayVector) {\n+      return new ArrowFlightJdbcIntervalVectorAccessor(((IntervalDayVector) vector), getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof IntervalYearVector) {\n+      return new ArrowFlightJdbcIntervalVectorAccessor(((IntervalYearVector) vector), getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof StructVector) {\n+      return new ArrowFlightJdbcStructVectorAccessor((StructVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof MapVector) {\n+      return new ArrowFlightJdbcMapVectorAccessor((MapVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof ListVector) {\n+      return new ArrowFlightJdbcListVectorAccessor((ListVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof LargeListVector) {\n+      return new ArrowFlightJdbcLargeListVectorAccessor((LargeListVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof FixedSizeListVector) {\n+      return new ArrowFlightJdbcFixedSizeListVectorAccessor((FixedSizeListVector) vector,\n+          getCurrentRow, setCursorWasNull);\n+    } else if (vector instanceof UnionVector) {\n+      return new ArrowFlightJdbcUnionVectorAccessor((UnionVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof DenseUnionVector) {\n+      return new ArrowFlightJdbcDenseUnionVectorAccessor((DenseUnionVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof NullVector || vector == null) {\n\nReview comment:\n       It could occur if the Flight SQL Server Endpoint defines a column with it. It could represent java.sql.NULL.\n\n##########\nFile path: java/flight/flight-jdbc-driver/src/main/java/org/apache/arrow/driver/jdbc/accessor/impl/calendar/ArrowFlightJdbcDateVectorGetter.java\n##########\n@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.driver.jdbc.accessor.impl.calendar;\n+\n+import org.apache.arrow.vector.DateDayVector;\n+import org.apache.arrow.vector.DateMilliVector;\n+import org.apache.arrow.vector.holders.NullableDateDayHolder;\n+import org.apache.arrow.vector.holders.NullableDateMilliHolder;\n+\n+/**\n+ * Auxiliary class used to unify data access on TimeStampVectors.\n+ */\n+final class ArrowFlightJdbcDateVectorGetter {\n+\n+  private ArrowFlightJdbcDateVectorGetter() {\n+    // Prevent instantiation.\n+  }\n+\n+  /**\n+   * Auxiliary class meant to unify Date*Vector#get implementations with different classes of ValueHolders.\n+   */\n+  static class Holder {\n+    int isSet;\n+    long value;\n\nReview comment:\n       Sure.\n\n##########\nFile path: java/flight/flight-jdbc-driver/src/main/java/org/apache/arrow/driver/jdbc/accessor/impl/calendar/ArrowFlightJdbcTimeStampVectorAccessor.java\n##########\n@@ -0,0 +1,185 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.driver.jdbc.accessor.impl.calendar;\n+\n+import static org.apache.arrow.driver.jdbc.accessor.impl.calendar.ArrowFlightJdbcTimeStampVectorGetter.Getter;\n+import static org.apache.arrow.driver.jdbc.accessor.impl.calendar.ArrowFlightJdbcTimeStampVectorGetter.Holder;\n+import static org.apache.arrow.driver.jdbc.accessor.impl.calendar.ArrowFlightJdbcTimeStampVectorGetter.createGetter;\n+\n+import java.sql.Date;\n+import java.sql.Time;\n+import java.sql.Timestamp;\n+import java.time.LocalDateTime;\n+import java.time.temporal.ChronoUnit;\n+import java.util.Calendar;\n+import java.util.TimeZone;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.IntSupplier;\n+\n+import org.apache.arrow.driver.jdbc.accessor.ArrowFlightJdbcAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.ArrowFlightJdbcAccessorFactory;\n+import org.apache.arrow.vector.TimeStampVector;\n+import org.apache.arrow.vector.types.pojo.ArrowType;\n+import org.apache.arrow.vector.util.DateUtility;\n+\n+/**\n+ * Accessor for the Arrow types extending from {@link TimeStampVector}.\n+ */\n+public class ArrowFlightJdbcTimeStampVectorAccessor extends ArrowFlightJdbcAccessor {\n+\n+  private final TimeZone timeZone;\n+  private final Getter getter;\n+  private final TimeUnit timeUnit;\n+  private final LongToLocalDateTime longToLocalDateTime;\n+  private final Holder holder;\n+\n+  /**\n+   * Functional interface used to convert a number (in any time resolution) to LocalDateTime.\n+   */\n+  interface LongToLocalDateTime {\n+    LocalDateTime fromLong(long value);\n+  }\n+\n+  /**\n+   * Instantiate a ArrowFlightJdbcTimeStampVectorAccessor for given vector.\n+   */\n+  public ArrowFlightJdbcTimeStampVectorAccessor(TimeStampVector vector,\n+                                                IntSupplier currentRowSupplier,\n+                                                ArrowFlightJdbcAccessorFactory.WasNullConsumer setCursorWasNull) {\n+    super(currentRowSupplier, setCursorWasNull);\n+    this.holder = new Holder();\n+    this.getter = createGetter(vector);\n+\n+    this.timeZone = getTimeZoneForVector(vector);\n+    this.timeUnit = getTimeUnitForVector(vector);\n+    this.longToLocalDateTime = getLongToLocalDateTimeForVector(vector, this.timeZone);\n+  }\n+\n+  @Override\n+  public Class<?> getObjectClass() {\n+    return Timestamp.class;\n+  }\n+\n+  @Override\n+  public Object getObject() {\n+    return this.getTimestamp(null);\n+  }\n+\n+  private LocalDateTime getLocalDateTime(Calendar calendar) {\n+    getter.get(getCurrentRow(), holder);\n+    this.wasNull = holder.isSet == 0;\n+    this.wasNullConsumer.setWasNull(this.wasNull);\n+    if (this.wasNull) {\n+      return null;\n+    }\n+\n+    long value = holder.value;\n+\n+    LocalDateTime localDateTime = this.longToLocalDateTime.fromLong(value);\n+\n+    if (calendar != null) {\n+      TimeZone timeZone = calendar.getTimeZone();\n+      long millis = this.timeUnit.toMillis(value);\n+      localDateTime = localDateTime\n+          .minus(timeZone.getOffset(millis) - this.timeZone.getOffset(millis), ChronoUnit.MILLIS);\n+    }\n+    return localDateTime;\n+  }\n+\n+  @Override\n+  public Date getDate(Calendar calendar) {\n+    LocalDateTime localDateTime = getLocalDateTime(calendar);\n+    if (localDateTime == null) {\n+      return null;\n+    }\n+\n+    return new Date(Timestamp.valueOf(localDateTime).getTime());\n+  }\n+\n+  @Override\n+  public Time getTime(Calendar calendar) {\n+    LocalDateTime localDateTime = getLocalDateTime(calendar);\n+    if (localDateTime == null) {\n+      return null;\n+    }\n+\n+    return new Time(Timestamp.valueOf(localDateTime).getTime());\n+  }\n+\n+  @Override\n+  public Timestamp getTimestamp(Calendar calendar) {\n+    LocalDateTime localDateTime = getLocalDateTime(calendar);\n+    if (localDateTime == null) {\n+      return null;\n+    }\n+\n+    return Timestamp.valueOf(localDateTime);\n+  }\n+\n+  protected static TimeUnit getTimeUnitForVector(TimeStampVector vector) {\n+    ArrowType.Timestamp arrowType =\n+        (ArrowType.Timestamp) vector.getField().getFieldType().getType();\n+\n+    switch (arrowType.getUnit()) {\n+      case NANOSECOND:\n+        return TimeUnit.NANOSECONDS;\n+      case MICROSECOND:\n+        return TimeUnit.MICROSECONDS;\n+      case MILLISECOND:\n+        return TimeUnit.MILLISECONDS;\n+      case SECOND:\n+        return TimeUnit.SECONDS;\n+      default:\n+        throw new UnsupportedOperationException(\"Invalid Arrow time unit\");\n+    }\n+  }\n+\n+  protected static LongToLocalDateTime getLongToLocalDateTimeForVector(TimeStampVector vector,\n+                                                                       TimeZone timeZone) {\n+    String timeZoneID = timeZone.getID();\n+\n+    ArrowType.Timestamp arrowType =\n+        (ArrowType.Timestamp) vector.getField().getFieldType().getType();\n+\n+    switch (arrowType.getUnit()) {\n+      case NANOSECOND:\n+        return nanoseconds -> DateUtility.getLocalDateTimeFromEpochNano(nanoseconds, timeZoneID);\n+      case MICROSECOND:\n+        return microseconds -> DateUtility.getLocalDateTimeFromEpochMicro(microseconds, timeZoneID);\n+      case MILLISECOND:\n+        return milliseconds -> DateUtility.getLocalDateTimeFromEpochMilli(milliseconds, timeZoneID);\n+      case SECOND:\n+        return seconds -> DateUtility.getLocalDateTimeFromEpochMilli(\n+            TimeUnit.SECONDS.toMillis(seconds), timeZoneID);\n+      default:\n+        throw new UnsupportedOperationException(\"Invalid Arrow time unit\");\n+    }\n+  }\n+\n+  protected static TimeZone getTimeZoneForVector(TimeStampVector vector) {\n+    ArrowType.Timestamp arrowType =\n+        (ArrowType.Timestamp) vector.getField().getFieldType().getType();\n+\n+    String timezoneName = arrowType.getTimezone();\n+    if (timezoneName == null) {\n+      return TimeZone.getDefault();\n\nReview comment:\n       You're right. We'll change this to UTC.\n\n##########\nFile path: java/flight/flight-jdbc-driver/src/main/java/org/apache/arrow/driver/jdbc/accessor/impl/calendar/ArrowFlightJdbcTimeVectorAccessor.java\n##########\n@@ -0,0 +1,154 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.driver.jdbc.accessor.impl.calendar;\n+\n+import static org.apache.arrow.driver.jdbc.accessor.impl.calendar.ArrowFlightJdbcTimeVectorGetter.Getter;\n+import static org.apache.arrow.driver.jdbc.accessor.impl.calendar.ArrowFlightJdbcTimeVectorGetter.Holder;\n+import static org.apache.arrow.driver.jdbc.accessor.impl.calendar.ArrowFlightJdbcTimeVectorGetter.createGetter;\n+\n+import java.sql.Time;\n+import java.sql.Timestamp;\n+import java.util.Calendar;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.IntSupplier;\n+\n+import org.apache.arrow.driver.jdbc.accessor.ArrowFlightJdbcAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.ArrowFlightJdbcAccessorFactory;\n+import org.apache.arrow.driver.jdbc.utils.DateTimeUtils;\n+import org.apache.arrow.vector.TimeMicroVector;\n+import org.apache.arrow.vector.TimeMilliVector;\n+import org.apache.arrow.vector.TimeNanoVector;\n+import org.apache.arrow.vector.TimeSecVector;\n+import org.apache.arrow.vector.ValueVector;\n+\n+/**\n+ * Accessor for the Arrow types: {@link TimeNanoVector}, {@link TimeMicroVector}, {@link TimeMilliVector}\n+ * and {@link TimeSecVector}.\n+ */\n+public class ArrowFlightJdbcTimeVectorAccessor extends ArrowFlightJdbcAccessor {\n+\n+  private final Getter getter;\n+  private final TimeUnit timeUnit;\n+  private final Holder holder;\n+\n+  /**\n+   * Instantiate an accessor for a {@link TimeNanoVector}.\n+   *\n+   * @param vector             an instance of a TimeNanoVector.\n+   * @param currentRowSupplier the supplier to track the lines.\n+   * @param setCursorWasNull   the consumer to set if value was null.\n+   */\n+  public ArrowFlightJdbcTimeVectorAccessor(TimeNanoVector vector, IntSupplier currentRowSupplier,\n+                                           ArrowFlightJdbcAccessorFactory.WasNullConsumer setCursorWasNull) {\n+    super(currentRowSupplier, setCursorWasNull);\n+    this.holder = new Holder();\n+    this.getter = createGetter(vector);\n+    this.timeUnit = getTimeUnitForVector(vector);\n+  }\n+\n+  /**\n+   * Instantiate an accessor for a {@link TimeMicroVector}.\n+   *\n+   * @param vector             an instance of a TimeMicroVector.\n+   * @param currentRowSupplier the supplier to track the lines.\n+   * @param setCursorWasNull   the consumer to set if value was null.\n+   */\n+  public ArrowFlightJdbcTimeVectorAccessor(TimeMicroVector vector, IntSupplier currentRowSupplier,\n+                                           ArrowFlightJdbcAccessorFactory.WasNullConsumer setCursorWasNull) {\n+    super(currentRowSupplier, setCursorWasNull);\n+    this.holder = new Holder();\n+    this.getter = createGetter(vector);\n+    this.timeUnit = getTimeUnitForVector(vector);\n+  }\n+\n+  /**\n+   * Instantiate an accessor for a {@link TimeMilliVector}.\n+   *\n+   * @param vector             an instance of a TimeMilliVector.\n+   * @param currentRowSupplier the supplier to track the lines.\n+   */\n+  public ArrowFlightJdbcTimeVectorAccessor(TimeMilliVector vector, IntSupplier currentRowSupplier,\n+                                           ArrowFlightJdbcAccessorFactory.WasNullConsumer setCursorWasNull) {\n+    super(currentRowSupplier, setCursorWasNull);\n+    this.holder = new Holder();\n+    this.getter = createGetter(vector);\n+    this.timeUnit = getTimeUnitForVector(vector);\n+  }\n+\n+  /**\n+   * Instantiate an accessor for a {@link TimeSecVector}.\n+   *\n+   * @param vector             an instance of a TimeSecVector.\n+   * @param currentRowSupplier the supplier to track the lines.\n+   */\n+  public ArrowFlightJdbcTimeVectorAccessor(TimeSecVector vector, IntSupplier currentRowSupplier,\n+                                           ArrowFlightJdbcAccessorFactory.WasNullConsumer setCursorWasNull) {\n+    super(currentRowSupplier, setCursorWasNull);\n+    this.holder = new Holder();\n+    this.getter = createGetter(vector);\n+    this.timeUnit = getTimeUnitForVector(vector);\n+  }\n+\n+  @Override\n+  public Class<?> getObjectClass() {\n+    return Time.class;\n+  }\n+\n+  @Override\n+  public Object getObject() {\n+    return this.getTime(null);\n+  }\n+\n+  @Override\n+  public Time getTime(Calendar calendar) {\n+    getter.get(getCurrentRow(), holder);\n+    this.wasNull = holder.isSet == 0;\n+    this.wasNullConsumer.setWasNull(this.wasNull);\n+    if (this.wasNull) {\n+      return null;\n+    }\n+\n+    long value = holder.value;\n+    long milliseconds = this.timeUnit.toMillis(value);\n+\n+    return new Time(DateTimeUtils.applyCalendarOffset(milliseconds, calendar));\n+  }\n+\n+  @Override\n+  public Timestamp getTimestamp(Calendar calendar) {\n+    Time time = getTime(calendar);\n+    if (time == null) {\n+      return null;\n+    }\n+    return new Timestamp(time.getTime());\n\nReview comment:\n       It's possible, in page 211 of the [JDBC Docs](https://download.oracle.com/otn-pub/jcp/jdbc-4_1-mrel-spec/jdbc4.1-fr-spec.pdf).\n\n##########\nFile path: java/flight/flight-jdbc-driver/src/main/java/org/apache/arrow/driver/jdbc/accessor/impl/numeric/ArrowFlightJdbcBitVectorAccessor.java\n##########\n@@ -0,0 +1,124 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.driver.jdbc.accessor.impl.numeric;\n+\n+import java.math.BigDecimal;\n+import java.nio.ByteBuffer;\n+import java.util.function.IntSupplier;\n+\n+import org.apache.arrow.driver.jdbc.accessor.ArrowFlightJdbcAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.ArrowFlightJdbcAccessorFactory;\n+import org.apache.arrow.vector.BitVector;\n+import org.apache.arrow.vector.holders.NullableBitHolder;\n+\n+/**\n+ * Accessor for the arrow {@link BitVector}.\n+ */\n+public class ArrowFlightJdbcBitVectorAccessor extends ArrowFlightJdbcAccessor {\n+\n+  private final BitVector vector;\n+  private final NullableBitHolder holder;\n+  private static final int BYTES_T0_ALLOCATE = 1;\n+\n+  /**\n+   * Constructor for the BitVectorAccessor.\n+   *\n+   * @param vector             an instance of a {@link BitVector}.\n+   * @param currentRowSupplier a supplier to check which row is being accessed.\n+   * @param setCursorWasNull   the consumer to set if value was null.\n+   */\n+  public ArrowFlightJdbcBitVectorAccessor(BitVector vector, IntSupplier currentRowSupplier,\n+                                          ArrowFlightJdbcAccessorFactory.WasNullConsumer setCursorWasNull) {\n+    super(currentRowSupplier, setCursorWasNull);\n+    this.vector = vector;\n+    this.holder = new NullableBitHolder();\n+  }\n+\n+  @Override\n+  public Class<?> getObjectClass() {\n+    return Long.class;\n\nReview comment:\n       Changed.\n\n##########\nFile path: java/flight/flight-jdbc-driver/src/main/java/org/apache/arrow/driver/jdbc/accessor/impl/numeric/ArrowFlightJdbcFloat4VectorAccessor.java\n##########\n@@ -0,0 +1,139 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.driver.jdbc.accessor.impl.numeric;\n+\n+import java.math.BigDecimal;\n+import java.math.RoundingMode;\n+import java.nio.ByteBuffer;\n+import java.util.function.IntSupplier;\n+\n+import org.apache.arrow.driver.jdbc.accessor.ArrowFlightJdbcAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.ArrowFlightJdbcAccessorFactory;\n+import org.apache.arrow.vector.Float4Vector;\n+import org.apache.arrow.vector.holders.NullableFloat4Holder;\n+\n+/**\n+ * Accessor for the Float4Vector.\n+ */\n+public class ArrowFlightJdbcFloat4VectorAccessor extends ArrowFlightJdbcAccessor {\n+\n+  private final Float4Vector vector;\n+  private final NullableFloat4Holder holder;\n+\n+  /**\n+   * Instantiate a accessor for the {@link Float4Vector}.\n+   *\n+   * @param vector             an instance of a Float4Vector.\n+   * @param currentRowSupplier the supplier to track the lines.\n+   * @param setCursorWasNull   the consumer to set if value was null.\n+   */\n+  public ArrowFlightJdbcFloat4VectorAccessor(Float4Vector vector,\n+                                             IntSupplier currentRowSupplier,\n+                                             ArrowFlightJdbcAccessorFactory.WasNullConsumer setCursorWasNull) {\n+    super(currentRowSupplier, setCursorWasNull);\n+    this.holder = new NullableFloat4Holder();\n+    this.vector = vector;\n+  }\n+\n+  @Override\n+  public Class<?> getObjectClass() {\n+    return Float.class;\n+  }\n+\n+  @Override\n+  public String getString() {\n+    final float value = this.getFloat();\n+\n+    return this.wasNull ? null : Float.toString(value);\n+  }\n+\n+  @Override\n+  public boolean getBoolean() {\n+    return this.getFloat() != 0.0;\n+  }\n+\n+  @Override\n+  public byte getByte() {\n+    return (byte) this.getFloat();\n+  }\n+\n+  @Override\n+  public short getShort() {\n+    return (short) this.getFloat();\n+  }\n+\n+  @Override\n+  public int getInt() {\n+    return (int) this.getFloat();\n+  }\n+\n+  @Override\n+  public long getLong() {\n+    return (long) this.getFloat();\n+  }\n+\n+  @Override\n+  public float getFloat() {\n+    vector.get(getCurrentRow(), holder);\n+\n+    this.wasNull = holder.isSet == 0;\n+    this.wasNullConsumer.setWasNull(this.wasNull);\n+    if (this.wasNull) {\n+      return 0;\n+    }\n+\n+    return holder.value;\n+  }\n+\n+  @Override\n+  public double getDouble() {\n+    return this.getFloat();\n+  }\n+\n+  @Override\n+  public BigDecimal getBigDecimal() {\n+    final float value = this.getFloat();\n+\n+    final boolean infinite = Float.isInfinite(value);\n+    if (infinite) {\n+      throw new UnsupportedOperationException();\n\nReview comment:\n       Changed.\n\n##########\nFile path: java/flight/flight-jdbc-driver/src/main/java/org/apache/arrow/driver/jdbc/accessor/impl/numeric/ArrowFlightJdbcFloat8VectorAccessor.java\n##########\n@@ -0,0 +1,133 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.driver.jdbc.accessor.impl.numeric;\n+\n+import java.math.BigDecimal;\n+import java.math.RoundingMode;\n+import java.nio.ByteBuffer;\n+import java.util.function.IntSupplier;\n+\n+import org.apache.arrow.driver.jdbc.accessor.ArrowFlightJdbcAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.ArrowFlightJdbcAccessorFactory;\n+import org.apache.arrow.vector.Float8Vector;\n+import org.apache.arrow.vector.holders.NullableFloat8Holder;\n+\n+/**\n+ * Accessor for the Float8Vector.\n+ */\n+public class ArrowFlightJdbcFloat8VectorAccessor extends ArrowFlightJdbcAccessor {\n+\n+  private final Float8Vector vector;\n+  private final NullableFloat8Holder holder;\n+\n+  /**\n+   * Instantiate a accessor for the {@link Float8Vector}.\n+   *\n+   * @param vector             an instance of a Float8Vector.\n+   * @param currentRowSupplier the supplier to track the lines.\n+   * @param setCursorWasNull   the consumer to set if value was null.\n+   */\n+  public ArrowFlightJdbcFloat8VectorAccessor(Float8Vector vector,\n+                                             IntSupplier currentRowSupplier,\n+                                             ArrowFlightJdbcAccessorFactory.WasNullConsumer setCursorWasNull) {\n+    super(currentRowSupplier, setCursorWasNull);\n+    this.holder = new NullableFloat8Holder();\n+    this.vector = vector;\n+  }\n+\n+  @Override\n+  public Class<?> getObjectClass() {\n+    return Double.class;\n+  }\n+\n+  @Override\n+  public double getDouble() {\n+    vector.get(getCurrentRow(), holder);\n+\n+    this.wasNull = holder.isSet == 0;\n+    this.wasNullConsumer.setWasNull(this.wasNull);\n+    if (this.wasNull) {\n+      return 0;\n\nReview comment:\n       If wasNull, the value doesn't really matter.\n\n##########\nFile path: java/flight/flight-jdbc-driver/src/main/java/org/apache/arrow/driver/jdbc/accessor/impl/text/ArrowFlightJdbcVarCharVectorAccessor.java\n##########\n@@ -0,0 +1,193 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.driver.jdbc.accessor.impl.text;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.CharArrayReader;\n+import java.io.InputStream;\n+import java.io.Reader;\n+import java.math.BigDecimal;\n+import java.sql.Date;\n+import java.sql.Time;\n+import java.sql.Timestamp;\n+import java.util.Calendar;\n+import java.util.function.IntSupplier;\n+\n+import org.apache.arrow.driver.jdbc.accessor.ArrowFlightJdbcAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.ArrowFlightJdbcAccessorFactory;\n+import org.apache.arrow.driver.jdbc.utils.DateTimeUtils;\n+import org.apache.arrow.vector.LargeVarCharVector;\n+import org.apache.arrow.vector.VarCharVector;\n+import org.apache.arrow.vector.util.Text;\n+\n+/**\n+ * Accessor for the Arrow types: {@link VarCharVector} and {@link LargeVarCharVector}.\n+ */\n+public class ArrowFlightJdbcVarCharVectorAccessor extends ArrowFlightJdbcAccessor {\n+\n+  /**\n+   * Functional interface to help integrating VarCharVector and LargeVarCharVector.\n+   */\n+  @FunctionalInterface\n+  interface Getter {\n+    Text get(int index);\n+  }\n+\n+  private final Getter getter;\n+\n+  public ArrowFlightJdbcVarCharVectorAccessor(VarCharVector vector,\n+                                              IntSupplier currentRowSupplier,\n+                                              ArrowFlightJdbcAccessorFactory.WasNullConsumer setCursorWasNull) {\n+    this(vector::getObject, currentRowSupplier, setCursorWasNull);\n+  }\n+\n+  public ArrowFlightJdbcVarCharVectorAccessor(LargeVarCharVector vector,\n+                                              IntSupplier currentRowSupplier,\n+                                              ArrowFlightJdbcAccessorFactory.WasNullConsumer setCursorWasNull) {\n+    this(vector::getObject, currentRowSupplier, setCursorWasNull);\n+  }\n+\n+  ArrowFlightJdbcVarCharVectorAccessor(Getter getter,\n+                                       IntSupplier currentRowSupplier,\n+                                       ArrowFlightJdbcAccessorFactory.WasNullConsumer setCursorWasNull) {\n+    super(currentRowSupplier, setCursorWasNull);\n+    this.getter = getter;\n+  }\n+\n+  @Override\n+  public Class<?> getObjectClass() {\n+    return String.class;\n+  }\n+\n+  private Text getText() {\n+    final Text text = this.getter.get(getCurrentRow());\n+    this.wasNull = text == null;\n+    this.wasNullConsumer.setWasNull(this.wasNull);\n+    return text;\n+  }\n+\n+  @Override\n+  public String getObject() {\n+    final Text text = getText();\n+    return text == null ? null : text.toString();\n+  }\n+\n+  @Override\n+  public String getString() {\n+    return getObject();\n+  }\n+\n+  @Override\n+  public byte[] getBytes() {\n+    final Text value = this.getText();\n+    return value == null ? null : value.copyBytes();\n+  }\n+\n+  @Override\n+  public boolean getBoolean() {\n\nReview comment:\n       Yes, in page 211 of the [JDBC Docs](https://download.oracle.com/otn-pub/jcp/jdbc-4_1-mrel-spec/jdbc4.1-fr-spec.pdf).\n\n##########\nFile path: java/flight/flight-jdbc-driver/src/test/java/org/apache/arrow/driver/jdbc/adhoc/MockFlightSqlProducer.java\n##########\n@@ -0,0 +1,525 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.driver.jdbc.adhoc;\n\nReview comment:\n       We'll refactor this.\n\n##########\nFile path: java/flight/flight-jdbc-driver/src/test/java/org/apache/arrow/driver/jdbc/accessor/impl/calendar/ArrowFlightJdbcIntervalVectorAccessorTest.java\n##########\n@@ -0,0 +1,196 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.driver.jdbc.accessor.impl.calendar;\n+\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.is;\n+\n+import java.time.Duration;\n+import java.time.Period;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.function.Supplier;\n+\n+import org.apache.arrow.driver.jdbc.accessor.ArrowFlightJdbcAccessorFactory;\n+import org.apache.arrow.driver.jdbc.utils.AccessorTestUtils;\n+import org.apache.arrow.driver.jdbc.utils.RootAllocatorTestRule;\n+import org.apache.arrow.vector.IntervalDayVector;\n+import org.apache.arrow.vector.IntervalYearVector;\n+import org.apache.arrow.vector.ValueVector;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ErrorCollector;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+@RunWith(Parameterized.class)\n+public class ArrowFlightJdbcIntervalVectorAccessorTest {\n+\n+  @ClassRule\n+  public static RootAllocatorTestRule rootAllocatorTestRule = new RootAllocatorTestRule();\n+\n+  @Rule\n+  public final ErrorCollector collector = new ErrorCollector();\n+\n+  private final Supplier<ValueVector> vectorSupplier;\n+  private ValueVector vector;\n+\n+  private final AccessorTestUtils.AccessorSupplier<ArrowFlightJdbcIntervalVectorAccessor>\n+      accessorSupplier = (vector, getCurrentRow) -> {\n+        ArrowFlightJdbcAccessorFactory.WasNullConsumer noOpWasNullConsumer = (boolean wasNull) -> {\n+        };\n+        if (vector instanceof IntervalDayVector) {\n\nReview comment:\n       We don't think this is really necessary, if we get a problem with the AccessorFactory, it'd affect these tests as well.\n\n##########\nFile path: java/flight/flight-jdbc-driver/src/main/java/org/apache/arrow/driver/jdbc/ArrowFlightJdbcFactory.java\n##########\n@@ -0,0 +1,124 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.driver.jdbc;\n+\n+import java.sql.ResultSetMetaData;\n+import java.sql.SQLException;\n+import java.util.Properties;\n+import java.util.TimeZone;\n+\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.calcite.avatica.AvaticaConnection;\n+import org.apache.calcite.avatica.AvaticaFactory;\n+import org.apache.calcite.avatica.AvaticaResultSetMetaData;\n+import org.apache.calcite.avatica.AvaticaSpecificDatabaseMetaData;\n+import org.apache.calcite.avatica.AvaticaStatement;\n+import org.apache.calcite.avatica.Meta;\n+import org.apache.calcite.avatica.QueryState;\n+import org.apache.calcite.avatica.UnregisteredDriver;\n+\n+/**\n+ * Factory for the Arrow Flight JDBC Driver.\n+ */\n+public class ArrowFlightJdbcFactory implements AvaticaFactory {\n\nReview comment:\n       We'll refactor these.\n\n##########\nFile path: java/flight/flight-jdbc-driver/src/main/java/org/apache/arrow/driver/jdbc/ArrowFlightJdbcDriver.java\n##########\n@@ -0,0 +1,253 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.driver.jdbc;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.Reader;\n+import java.net.URI;\n+import java.nio.charset.StandardCharsets;\n+import java.sql.SQLException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Properties;\n+\n+import org.apache.arrow.driver.jdbc.utils.ArrowFlightConnectionConfigImpl.ArrowFlightConnectionProperty;\n+import org.apache.arrow.flight.FlightRuntimeException;\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.arrow.util.Preconditions;\n+import org.apache.calcite.avatica.AvaticaConnection;\n+import org.apache.calcite.avatica.DriverVersion;\n+import org.apache.calcite.avatica.Meta;\n+import org.apache.calcite.avatica.UnregisteredDriver;\n+import org.apache.calcite.avatica.org.apache.http.NameValuePair;\n+import org.apache.calcite.avatica.org.apache.http.client.utils.URLEncodedUtils;\n+\n+/**\n+ * JDBC driver for querying data from an Apache Arrow Flight server.\n+ */\n+public class ArrowFlightJdbcDriver extends UnregisteredDriver {\n+\n+  private static final String CONNECT_STRING_PREFIX = \"jdbc:arrow-flight://\";\n+  private static DriverVersion version;\n+\n+  static {\n+    // Special code for supporting Java9 and higher.\n+    // Netty requires some extra properties to unlock some native memory management api\n+    // Setting this property if not already set externally\n+    // This has to be done before any netty class is being loaded\n+    final String key = \"cfjd.io.netty.tryReflectionSetAccessible\";\n+    final String tryReflectionSetAccessible = System.getProperty(key);\n+    if (tryReflectionSetAccessible == null) {\n+      System.setProperty(key, Boolean.TRUE.toString());\n+    }\n\nReview comment:\n       Yes, they're for distribution purposes. We don't have any other flags that need to be set yet AFAIK. \n\n##########\nFile path: java/flight/flight-jdbc-driver/src/main/java/org/apache/arrow/driver/jdbc/ArrowFlightJdbcDriver.java\n##########\n@@ -0,0 +1,253 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.driver.jdbc;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.Reader;\n+import java.net.URI;\n+import java.nio.charset.StandardCharsets;\n+import java.sql.SQLException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Properties;\n+\n+import org.apache.arrow.driver.jdbc.utils.ArrowFlightConnectionConfigImpl.ArrowFlightConnectionProperty;\n+import org.apache.arrow.flight.FlightRuntimeException;\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.arrow.util.Preconditions;\n+import org.apache.calcite.avatica.AvaticaConnection;\n+import org.apache.calcite.avatica.DriverVersion;\n+import org.apache.calcite.avatica.Meta;\n+import org.apache.calcite.avatica.UnregisteredDriver;\n+import org.apache.calcite.avatica.org.apache.http.NameValuePair;\n+import org.apache.calcite.avatica.org.apache.http.client.utils.URLEncodedUtils;\n+\n+/**\n+ * JDBC driver for querying data from an Apache Arrow Flight server.\n+ */\n+public class ArrowFlightJdbcDriver extends UnregisteredDriver {\n+\n+  private static final String CONNECT_STRING_PREFIX = \"jdbc:arrow-flight://\";\n+  private static DriverVersion version;\n+\n+  static {\n+    // Special code for supporting Java9 and higher.\n+    // Netty requires some extra properties to unlock some native memory management api\n+    // Setting this property if not already set externally\n+    // This has to be done before any netty class is being loaded\n+    final String key = \"cfjd.io.netty.tryReflectionSetAccessible\";\n+    final String tryReflectionSetAccessible = System.getProperty(key);\n+    if (tryReflectionSetAccessible == null) {\n+      System.setProperty(key, Boolean.TRUE.toString());\n+    }\n+\n+    new ArrowFlightJdbcDriver().register();\n+  }\n+\n+  @Override\n+  public ArrowFlightConnection connect(final String url, final Properties info)\n+      throws SQLException {\n+    final Properties properties = new Properties(info);\n+    properties.putAll(info);\n+\n+    if (url != null) {\n+      final Map<Object, Object> propertiesFromUrl = getUrlsArgs(url);\n+      properties.putAll(propertiesFromUrl);\n+    }\n+\n+    try {\n+      return ArrowFlightConnection.createNewConnection(\n+          this,\n+          factory,\n+          url,\n+          properties,\n+          new RootAllocator(Long.MAX_VALUE));\n+    } catch (AssertionError | FlightRuntimeException e) {\n+      throw new SQLException(\"Failed to connect.\", e);\n+    }\n+  }\n+\n+  @Override\n+  protected String getFactoryClassName(final JdbcVersion jdbcVersion) {\n+    return ArrowFlightJdbcFactory.class.getName();\n+  }\n+\n+  @Override\n+  protected DriverVersion createDriverVersion() {\n+\n+    CreateVersionIfNull:\n+    {\n+\n+      if (version != null) {\n+        break CreateVersionIfNull;\n+      }\n+\n+      try (Reader reader = new BufferedReader(new InputStreamReader(\n+          this.getClass().getResourceAsStream(\"/properties/flight.properties\"),\n+          StandardCharsets.UTF_8))) {\n+        final Properties properties = new Properties();\n+        properties.load(reader);\n+\n+        final String parentName = properties\n+            .getProperty(\"org.apache.arrow.flight.name\");\n+        final String parentVersion = properties\n+            .getProperty(\"org.apache.arrow.flight.version\");\n+        final String[] pVersion = parentVersion.split(\"\\\\.\");\n+\n+        final int parentMajorVersion = Integer.parseInt(pVersion[0]);\n+        final int parentMinorVersion = Integer.parseInt(pVersion[1]);\n+\n+        final String childName = properties\n+            .getProperty(\"org.apache.arrow.flight.jdbc-driver.name\");\n+        final String childVersion = properties\n+            .getProperty(\"org.apache.arrow.flight.jdbc-driver.version\");\n+        final String[] cVersion = childVersion.split(\"\\\\.\");\n+\n+        final int childMajorVersion = Integer.parseInt(cVersion[0]);\n+        final int childMinorVersion = Integer.parseInt(cVersion[1]);\n+\n+        version = new DriverVersion(childName, childVersion, parentName,\n+            parentVersion, true, childMajorVersion, childMinorVersion,\n+            parentMajorVersion, parentMinorVersion);\n+      } catch (final IOException e) {\n+        throw new RuntimeException(\"Failed to load driver version.\", e);\n+      }\n+    }\n+\n+    return version;\n+  }\n+\n+  @Override\n+  public Meta createMeta(final AvaticaConnection connection) {\n+    return new ArrowFlightMetaImpl((ArrowFlightConnection) connection);\n+  }\n+\n+  @Override\n+  protected String getConnectStringPrefix() {\n+    return CONNECT_STRING_PREFIX;\n+  }\n+\n+  @Override\n+  public boolean acceptsURL(final String url) throws SQLException {\n+    return Preconditions.checkNotNull(url).startsWith(CONNECT_STRING_PREFIX);\n+  }\n+\n+  /**\n+   * Parses the provided url based on the format this driver accepts, retrieving\n+   * arguments after the {@link #CONNECT_STRING_PREFIX}.\n+   * <p>\n+   * This method gets the args if the provided URL follows this pattern:\n+   * {@code jdbc:arrow-flight://<host>:<port>[/?key1=val1&key2=val2&(...)]}\n+   *\n+   * <table border=\"1\">\n+   *    <tr>\n+   *        <td>Group</td>\n+   *        <td>Definition</td>\n+   *        <td>Value</td>\n+   *    </tr>\n+   *    <tr>\n+   *        <td>? \u2014 inaccessible</td>\n+   *        <td>{@link #getConnectStringPrefix}</td>\n+   *        <td>\n+   *            the URL prefix accepted by this driver, i.e.,\n+   *            {@code \"jdbc:arrow-flight://\"}\n+   *        </td>\n+   *    </tr>\n+   *    <tr>\n+   *        <td>1</td>\n+   *        <td>IPv4 host name</td>\n+   *        <td>\n+   *            first word after previous group and before \"{@code :}\"\n+   *        </td>\n+   *    </tr>\n+   *    <tr>\n+   *        <td>2</td>\n+   *        <td>IPv4 port number</td>\n+   *        <td>\n+   *            first number after previous group and before \"{@code /?}\"\n+   *        </td>\n+   *    </tr>\n+   *    <tr>\n+   *        <td>3</td>\n+   *        <td>custom call parameters</td>\n+   *        <td>\n+   *            all parameters provided after \"{@code /?}\" \u2014 must follow the\n+   *            pattern: \"{@code key=value}\" with \"{@code &}\" separating a\n+   *            parameter from another\n+   *        </td>\n+   *    </tr>\n+   * </table>\n+   *\n+   * @param url The url to parse.\n+   * @return the parsed arguments.\n+   * @throws SQLException If an error occurs while trying to parse the URL.\n+   */\n+  private Map<Object, Object> getUrlsArgs(String url)\n+      throws SQLException {\n+\n+    /*\n+     *\n+     * Perhaps this logic should be inside a utility class, separated from this\n+     * one, so as to better delegate responsibilities and concerns throughout\n+     * the code and increase maintainability.\n+     *\n+     * =====\n+     *\n+     * Keep in mind that the URL must ALWAYS follow the pattern:\n+     * \"jdbc:arrow-flight://<host>:<port>[/?param1=value1&param2=value2&(...)].\"\n+     *\n+     */\n+\n+    if (!url.startsWith(\"jdbc:\")) {\n+      throw new SQLException(\"Malformed/invalid URL!\");\n+    }\n+\n+    // It's necessary to use a string without \"jdbc:\" at the beginning to be parsed as a valid URL.\n+    url = url.substring(5);\n+\n+    final URI uri;\n+\n+    try {\n+      uri = URI.create(url);\n+    } catch (final IllegalArgumentException e) {\n+      throw new SQLException(\"Malformed/invalid URL!\", e);\n+    }\n+\n+    if (!Objects.equals(uri.getScheme(), \"arrow-flight\")) {\n\nReview comment:\n       We're currently not distinguishing between other schemes. We could discuss this a bit further.\n\n##########\nFile path: java/flight/flight-jdbc-driver/src/main/java/org/apache/arrow/driver/jdbc/ArrowFlightJdbcDriver.java\n##########\n@@ -0,0 +1,253 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.driver.jdbc;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.Reader;\n+import java.net.URI;\n+import java.nio.charset.StandardCharsets;\n+import java.sql.SQLException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Properties;\n+\n+import org.apache.arrow.driver.jdbc.utils.ArrowFlightConnectionConfigImpl.ArrowFlightConnectionProperty;\n+import org.apache.arrow.flight.FlightRuntimeException;\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.arrow.util.Preconditions;\n+import org.apache.calcite.avatica.AvaticaConnection;\n+import org.apache.calcite.avatica.DriverVersion;\n+import org.apache.calcite.avatica.Meta;\n+import org.apache.calcite.avatica.UnregisteredDriver;\n+import org.apache.calcite.avatica.org.apache.http.NameValuePair;\n+import org.apache.calcite.avatica.org.apache.http.client.utils.URLEncodedUtils;\n+\n+/**\n+ * JDBC driver for querying data from an Apache Arrow Flight server.\n+ */\n+public class ArrowFlightJdbcDriver extends UnregisteredDriver {\n+\n+  private static final String CONNECT_STRING_PREFIX = \"jdbc:arrow-flight://\";\n+  private static DriverVersion version;\n+\n+  static {\n+    // Special code for supporting Java9 and higher.\n+    // Netty requires some extra properties to unlock some native memory management api\n+    // Setting this property if not already set externally\n+    // This has to be done before any netty class is being loaded\n+    final String key = \"cfjd.io.netty.tryReflectionSetAccessible\";\n+    final String tryReflectionSetAccessible = System.getProperty(key);\n+    if (tryReflectionSetAccessible == null) {\n+      System.setProperty(key, Boolean.TRUE.toString());\n+    }\n+\n+    new ArrowFlightJdbcDriver().register();\n+  }\n+\n+  @Override\n+  public ArrowFlightConnection connect(final String url, final Properties info)\n+      throws SQLException {\n+    final Properties properties = new Properties(info);\n+    properties.putAll(info);\n+\n+    if (url != null) {\n+      final Map<Object, Object> propertiesFromUrl = getUrlsArgs(url);\n+      properties.putAll(propertiesFromUrl);\n+    }\n+\n+    try {\n+      return ArrowFlightConnection.createNewConnection(\n+          this,\n+          factory,\n+          url,\n+          properties,\n+          new RootAllocator(Long.MAX_VALUE));\n+    } catch (AssertionError | FlightRuntimeException e) {\n+      throw new SQLException(\"Failed to connect.\", e);\n+    }\n+  }\n+\n+  @Override\n+  protected String getFactoryClassName(final JdbcVersion jdbcVersion) {\n+    return ArrowFlightJdbcFactory.class.getName();\n+  }\n+\n+  @Override\n+  protected DriverVersion createDriverVersion() {\n+\n+    CreateVersionIfNull:\n+    {\n+\n+      if (version != null) {\n+        break CreateVersionIfNull;\n+      }\n+\n+      try (Reader reader = new BufferedReader(new InputStreamReader(\n+          this.getClass().getResourceAsStream(\"/properties/flight.properties\"),\n+          StandardCharsets.UTF_8))) {\n+        final Properties properties = new Properties();\n+        properties.load(reader);\n+\n+        final String parentName = properties\n+            .getProperty(\"org.apache.arrow.flight.name\");\n+        final String parentVersion = properties\n+            .getProperty(\"org.apache.arrow.flight.version\");\n+        final String[] pVersion = parentVersion.split(\"\\\\.\");\n+\n+        final int parentMajorVersion = Integer.parseInt(pVersion[0]);\n+        final int parentMinorVersion = Integer.parseInt(pVersion[1]);\n+\n+        final String childName = properties\n+            .getProperty(\"org.apache.arrow.flight.jdbc-driver.name\");\n+        final String childVersion = properties\n+            .getProperty(\"org.apache.arrow.flight.jdbc-driver.version\");\n+        final String[] cVersion = childVersion.split(\"\\\\.\");\n+\n+        final int childMajorVersion = Integer.parseInt(cVersion[0]);\n+        final int childMinorVersion = Integer.parseInt(cVersion[1]);\n+\n+        version = new DriverVersion(childName, childVersion, parentName,\n+            parentVersion, true, childMajorVersion, childMinorVersion,\n+            parentMajorVersion, parentMinorVersion);\n+      } catch (final IOException e) {\n+        throw new RuntimeException(\"Failed to load driver version.\", e);\n+      }\n+    }\n+\n+    return version;\n+  }\n+\n+  @Override\n+  public Meta createMeta(final AvaticaConnection connection) {\n+    return new ArrowFlightMetaImpl((ArrowFlightConnection) connection);\n+  }\n+\n+  @Override\n+  protected String getConnectStringPrefix() {\n+    return CONNECT_STRING_PREFIX;\n+  }\n+\n+  @Override\n+  public boolean acceptsURL(final String url) throws SQLException {\n+    return Preconditions.checkNotNull(url).startsWith(CONNECT_STRING_PREFIX);\n+  }\n+\n+  /**\n+   * Parses the provided url based on the format this driver accepts, retrieving\n+   * arguments after the {@link #CONNECT_STRING_PREFIX}.\n+   * <p>\n+   * This method gets the args if the provided URL follows this pattern:\n+   * {@code jdbc:arrow-flight://<host>:<port>[/?key1=val1&key2=val2&(...)]}\n+   *\n+   * <table border=\"1\">\n+   *    <tr>\n+   *        <td>Group</td>\n+   *        <td>Definition</td>\n+   *        <td>Value</td>\n+   *    </tr>\n+   *    <tr>\n+   *        <td>? \u2014 inaccessible</td>\n+   *        <td>{@link #getConnectStringPrefix}</td>\n+   *        <td>\n+   *            the URL prefix accepted by this driver, i.e.,\n+   *            {@code \"jdbc:arrow-flight://\"}\n+   *        </td>\n+   *    </tr>\n+   *    <tr>\n+   *        <td>1</td>\n+   *        <td>IPv4 host name</td>\n+   *        <td>\n+   *            first word after previous group and before \"{@code :}\"\n+   *        </td>\n+   *    </tr>\n+   *    <tr>\n+   *        <td>2</td>\n+   *        <td>IPv4 port number</td>\n+   *        <td>\n+   *            first number after previous group and before \"{@code /?}\"\n+   *        </td>\n+   *    </tr>\n+   *    <tr>\n+   *        <td>3</td>\n+   *        <td>custom call parameters</td>\n+   *        <td>\n+   *            all parameters provided after \"{@code /?}\" \u2014 must follow the\n+   *            pattern: \"{@code key=value}\" with \"{@code &}\" separating a\n+   *            parameter from another\n+   *        </td>\n+   *    </tr>\n+   * </table>\n+   *\n+   * @param url The url to parse.\n+   * @return the parsed arguments.\n+   * @throws SQLException If an error occurs while trying to parse the URL.\n+   */\n+  private Map<Object, Object> getUrlsArgs(String url)\n+      throws SQLException {\n+\n+    /*\n+     *\n+     * Perhaps this logic should be inside a utility class, separated from this\n+     * one, so as to better delegate responsibilities and concerns throughout\n+     * the code and increase maintainability.\n+     *\n+     * =====\n+     *\n+     * Keep in mind that the URL must ALWAYS follow the pattern:\n+     * \"jdbc:arrow-flight://<host>:<port>[/?param1=value1&param2=value2&(...)].\"\n+     *\n+     */\n+\n+    if (!url.startsWith(\"jdbc:\")) {\n+      throw new SQLException(\"Malformed/invalid URL!\");\n\nReview comment:\n       Sure.\n\n##########\nFile path: java/flight/flight-jdbc-driver/src/main/java/org/apache/arrow/driver/jdbc/ArrowFlightJdbcDriver.java\n##########\n@@ -0,0 +1,253 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.driver.jdbc;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.Reader;\n+import java.net.URI;\n+import java.nio.charset.StandardCharsets;\n+import java.sql.SQLException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Properties;\n+\n+import org.apache.arrow.driver.jdbc.utils.ArrowFlightConnectionConfigImpl.ArrowFlightConnectionProperty;\n+import org.apache.arrow.flight.FlightRuntimeException;\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.arrow.util.Preconditions;\n+import org.apache.calcite.avatica.AvaticaConnection;\n+import org.apache.calcite.avatica.DriverVersion;\n+import org.apache.calcite.avatica.Meta;\n+import org.apache.calcite.avatica.UnregisteredDriver;\n+import org.apache.calcite.avatica.org.apache.http.NameValuePair;\n+import org.apache.calcite.avatica.org.apache.http.client.utils.URLEncodedUtils;\n+\n+/**\n+ * JDBC driver for querying data from an Apache Arrow Flight server.\n+ */\n+public class ArrowFlightJdbcDriver extends UnregisteredDriver {\n+\n+  private static final String CONNECT_STRING_PREFIX = \"jdbc:arrow-flight://\";\n+  private static DriverVersion version;\n+\n+  static {\n+    // Special code for supporting Java9 and higher.\n+    // Netty requires some extra properties to unlock some native memory management api\n+    // Setting this property if not already set externally\n+    // This has to be done before any netty class is being loaded\n+    final String key = \"cfjd.io.netty.tryReflectionSetAccessible\";\n+    final String tryReflectionSetAccessible = System.getProperty(key);\n+    if (tryReflectionSetAccessible == null) {\n+      System.setProperty(key, Boolean.TRUE.toString());\n+    }\n+\n+    new ArrowFlightJdbcDriver().register();\n+  }\n+\n+  @Override\n+  public ArrowFlightConnection connect(final String url, final Properties info)\n+      throws SQLException {\n+    final Properties properties = new Properties(info);\n+    properties.putAll(info);\n+\n+    if (url != null) {\n+      final Map<Object, Object> propertiesFromUrl = getUrlsArgs(url);\n+      properties.putAll(propertiesFromUrl);\n+    }\n+\n+    try {\n+      return ArrowFlightConnection.createNewConnection(\n+          this,\n+          factory,\n+          url,\n+          properties,\n+          new RootAllocator(Long.MAX_VALUE));\n+    } catch (AssertionError | FlightRuntimeException e) {\n+      throw new SQLException(\"Failed to connect.\", e);\n+    }\n+  }\n+\n+  @Override\n+  protected String getFactoryClassName(final JdbcVersion jdbcVersion) {\n+    return ArrowFlightJdbcFactory.class.getName();\n+  }\n+\n+  @Override\n+  protected DriverVersion createDriverVersion() {\n+\n+    CreateVersionIfNull:\n+    {\n+\n+      if (version != null) {\n+        break CreateVersionIfNull;\n+      }\n+\n+      try (Reader reader = new BufferedReader(new InputStreamReader(\n+          this.getClass().getResourceAsStream(\"/properties/flight.properties\"),\n+          StandardCharsets.UTF_8))) {\n+        final Properties properties = new Properties();\n+        properties.load(reader);\n+\n+        final String parentName = properties\n+            .getProperty(\"org.apache.arrow.flight.name\");\n+        final String parentVersion = properties\n+            .getProperty(\"org.apache.arrow.flight.version\");\n+        final String[] pVersion = parentVersion.split(\"\\\\.\");\n+\n+        final int parentMajorVersion = Integer.parseInt(pVersion[0]);\n+        final int parentMinorVersion = Integer.parseInt(pVersion[1]);\n+\n+        final String childName = properties\n+            .getProperty(\"org.apache.arrow.flight.jdbc-driver.name\");\n+        final String childVersion = properties\n+            .getProperty(\"org.apache.arrow.flight.jdbc-driver.version\");\n+        final String[] cVersion = childVersion.split(\"\\\\.\");\n+\n+        final int childMajorVersion = Integer.parseInt(cVersion[0]);\n+        final int childMinorVersion = Integer.parseInt(cVersion[1]);\n+\n+        version = new DriverVersion(childName, childVersion, parentName,\n+            parentVersion, true, childMajorVersion, childMinorVersion,\n+            parentMajorVersion, parentMinorVersion);\n+      } catch (final IOException e) {\n+        throw new RuntimeException(\"Failed to load driver version.\", e);\n+      }\n+    }\n+\n+    return version;\n+  }\n+\n+  @Override\n+  public Meta createMeta(final AvaticaConnection connection) {\n+    return new ArrowFlightMetaImpl((ArrowFlightConnection) connection);\n+  }\n+\n+  @Override\n+  protected String getConnectStringPrefix() {\n+    return CONNECT_STRING_PREFIX;\n+  }\n+\n+  @Override\n+  public boolean acceptsURL(final String url) throws SQLException {\n+    return Preconditions.checkNotNull(url).startsWith(CONNECT_STRING_PREFIX);\n+  }\n+\n+  /**\n+   * Parses the provided url based on the format this driver accepts, retrieving\n+   * arguments after the {@link #CONNECT_STRING_PREFIX}.\n+   * <p>\n+   * This method gets the args if the provided URL follows this pattern:\n+   * {@code jdbc:arrow-flight://<host>:<port>[/?key1=val1&key2=val2&(...)]}\n+   *\n+   * <table border=\"1\">\n+   *    <tr>\n+   *        <td>Group</td>\n+   *        <td>Definition</td>\n+   *        <td>Value</td>\n+   *    </tr>\n+   *    <tr>\n+   *        <td>? \u2014 inaccessible</td>\n+   *        <td>{@link #getConnectStringPrefix}</td>\n+   *        <td>\n+   *            the URL prefix accepted by this driver, i.e.,\n+   *            {@code \"jdbc:arrow-flight://\"}\n+   *        </td>\n+   *    </tr>\n+   *    <tr>\n+   *        <td>1</td>\n+   *        <td>IPv4 host name</td>\n+   *        <td>\n+   *            first word after previous group and before \"{@code :}\"\n+   *        </td>\n+   *    </tr>\n+   *    <tr>\n+   *        <td>2</td>\n+   *        <td>IPv4 port number</td>\n+   *        <td>\n+   *            first number after previous group and before \"{@code /?}\"\n+   *        </td>\n+   *    </tr>\n+   *    <tr>\n+   *        <td>3</td>\n+   *        <td>custom call parameters</td>\n+   *        <td>\n+   *            all parameters provided after \"{@code /?}\" \u2014 must follow the\n+   *            pattern: \"{@code key=value}\" with \"{@code &}\" separating a\n+   *            parameter from another\n+   *        </td>\n+   *    </tr>\n+   * </table>\n+   *\n+   * @param url The url to parse.\n+   * @return the parsed arguments.\n+   * @throws SQLException If an error occurs while trying to parse the URL.\n+   */\n+  private Map<Object, Object> getUrlsArgs(String url)\n+      throws SQLException {\n+\n+    /*\n+     *\n+     * Perhaps this logic should be inside a utility class, separated from this\n+     * one, so as to better delegate responsibilities and concerns throughout\n+     * the code and increase maintainability.\n+     *\n+     * =====\n+     *\n+     * Keep in mind that the URL must ALWAYS follow the pattern:\n+     * \"jdbc:arrow-flight://<host>:<port>[/?param1=value1&param2=value2&(...)].\"\n+     *\n+     */\n+\n+    if (!url.startsWith(\"jdbc:\")) {\n+      throw new SQLException(\"Malformed/invalid URL!\");\n+    }\n+\n+    // It's necessary to use a string without \"jdbc:\" at the beginning to be parsed as a valid URL.\n+    url = url.substring(5);\n+\n+    final URI uri;\n+\n+    try {\n+      uri = URI.create(url);\n+    } catch (final IllegalArgumentException e) {\n+      throw new SQLException(\"Malformed/invalid URL!\", e);\n+    }\n+\n+    if (!Objects.equals(uri.getScheme(), \"arrow-flight\")) {\n+      throw new SQLException(\"Malformed/invalid URL!\");\n\nReview comment:\n       Sure.\n\n##########\nFile path: java/flight/flight-jdbc-driver/src/main/java/org/apache/arrow/driver/jdbc/ArrowFlightJdbcDriver.java\n##########\n@@ -0,0 +1,253 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.driver.jdbc;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.Reader;\n+import java.net.URI;\n+import java.nio.charset.StandardCharsets;\n+import java.sql.SQLException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Properties;\n+\n+import org.apache.arrow.driver.jdbc.utils.ArrowFlightConnectionConfigImpl.ArrowFlightConnectionProperty;\n+import org.apache.arrow.flight.FlightRuntimeException;\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.arrow.util.Preconditions;\n+import org.apache.calcite.avatica.AvaticaConnection;\n+import org.apache.calcite.avatica.DriverVersion;\n+import org.apache.calcite.avatica.Meta;\n+import org.apache.calcite.avatica.UnregisteredDriver;\n+import org.apache.calcite.avatica.org.apache.http.NameValuePair;\n+import org.apache.calcite.avatica.org.apache.http.client.utils.URLEncodedUtils;\n+\n+/**\n+ * JDBC driver for querying data from an Apache Arrow Flight server.\n+ */\n+public class ArrowFlightJdbcDriver extends UnregisteredDriver {\n+\n+  private static final String CONNECT_STRING_PREFIX = \"jdbc:arrow-flight://\";\n+  private static DriverVersion version;\n+\n+  static {\n+    // Special code for supporting Java9 and higher.\n+    // Netty requires some extra properties to unlock some native memory management api\n+    // Setting this property if not already set externally\n+    // This has to be done before any netty class is being loaded\n+    final String key = \"cfjd.io.netty.tryReflectionSetAccessible\";\n+    final String tryReflectionSetAccessible = System.getProperty(key);\n+    if (tryReflectionSetAccessible == null) {\n+      System.setProperty(key, Boolean.TRUE.toString());\n+    }\n+\n+    new ArrowFlightJdbcDriver().register();\n+  }\n+\n+  @Override\n+  public ArrowFlightConnection connect(final String url, final Properties info)\n+      throws SQLException {\n+    final Properties properties = new Properties(info);\n+    properties.putAll(info);\n+\n+    if (url != null) {\n+      final Map<Object, Object> propertiesFromUrl = getUrlsArgs(url);\n+      properties.putAll(propertiesFromUrl);\n+    }\n+\n+    try {\n+      return ArrowFlightConnection.createNewConnection(\n+          this,\n+          factory,\n+          url,\n+          properties,\n+          new RootAllocator(Long.MAX_VALUE));\n+    } catch (AssertionError | FlightRuntimeException e) {\n+      throw new SQLException(\"Failed to connect.\", e);\n+    }\n+  }\n+\n+  @Override\n+  protected String getFactoryClassName(final JdbcVersion jdbcVersion) {\n+    return ArrowFlightJdbcFactory.class.getName();\n+  }\n+\n+  @Override\n+  protected DriverVersion createDriverVersion() {\n+\n+    CreateVersionIfNull:\n+    {\n+\n+      if (version != null) {\n+        break CreateVersionIfNull;\n\nReview comment:\n       We'll refactor this.\n\n##########\nFile path: java/flight/flight-jdbc-driver/src/main/java/org/apache/arrow/driver/jdbc/ArrowFlightJdbcDriver.java\n##########\n@@ -0,0 +1,253 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.driver.jdbc;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.Reader;\n+import java.net.URI;\n+import java.nio.charset.StandardCharsets;\n+import java.sql.SQLException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Properties;\n+\n+import org.apache.arrow.driver.jdbc.utils.ArrowFlightConnectionConfigImpl.ArrowFlightConnectionProperty;\n+import org.apache.arrow.flight.FlightRuntimeException;\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.arrow.util.Preconditions;\n+import org.apache.calcite.avatica.AvaticaConnection;\n+import org.apache.calcite.avatica.DriverVersion;\n+import org.apache.calcite.avatica.Meta;\n+import org.apache.calcite.avatica.UnregisteredDriver;\n+import org.apache.calcite.avatica.org.apache.http.NameValuePair;\n+import org.apache.calcite.avatica.org.apache.http.client.utils.URLEncodedUtils;\n+\n+/**\n+ * JDBC driver for querying data from an Apache Arrow Flight server.\n+ */\n+public class ArrowFlightJdbcDriver extends UnregisteredDriver {\n+\n+  private static final String CONNECT_STRING_PREFIX = \"jdbc:arrow-flight://\";\n+  private static DriverVersion version;\n+\n+  static {\n+    // Special code for supporting Java9 and higher.\n+    // Netty requires some extra properties to unlock some native memory management api\n+    // Setting this property if not already set externally\n+    // This has to be done before any netty class is being loaded\n+    final String key = \"cfjd.io.netty.tryReflectionSetAccessible\";\n+    final String tryReflectionSetAccessible = System.getProperty(key);\n+    if (tryReflectionSetAccessible == null) {\n+      System.setProperty(key, Boolean.TRUE.toString());\n+    }\n+\n+    new ArrowFlightJdbcDriver().register();\n+  }\n+\n+  @Override\n+  public ArrowFlightConnection connect(final String url, final Properties info)\n+      throws SQLException {\n+    final Properties properties = new Properties(info);\n+    properties.putAll(info);\n+\n+    if (url != null) {\n+      final Map<Object, Object> propertiesFromUrl = getUrlsArgs(url);\n+      properties.putAll(propertiesFromUrl);\n+    }\n+\n+    try {\n+      return ArrowFlightConnection.createNewConnection(\n+          this,\n+          factory,\n+          url,\n+          properties,\n+          new RootAllocator(Long.MAX_VALUE));\n+    } catch (AssertionError | FlightRuntimeException e) {\n+      throw new SQLException(\"Failed to connect.\", e);\n+    }\n+  }\n+\n+  @Override\n+  protected String getFactoryClassName(final JdbcVersion jdbcVersion) {\n+    return ArrowFlightJdbcFactory.class.getName();\n+  }\n+\n+  @Override\n+  protected DriverVersion createDriverVersion() {\n+\n+    CreateVersionIfNull:\n+    {\n+\n+      if (version != null) {\n+        break CreateVersionIfNull;\n+      }\n+\n+      try (Reader reader = new BufferedReader(new InputStreamReader(\n+          this.getClass().getResourceAsStream(\"/properties/flight.properties\"),\n\nReview comment:\n       Yes.\n\n##########\nFile path: java/flight/flight-jdbc-driver/src/main/java/org/apache/arrow/driver/jdbc/ArrowFlightJdbcDriver.java\n##########\n@@ -0,0 +1,253 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.driver.jdbc;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.Reader;\n+import java.net.URI;\n+import java.nio.charset.StandardCharsets;\n+import java.sql.SQLException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Properties;\n+\n+import org.apache.arrow.driver.jdbc.utils.ArrowFlightConnectionConfigImpl.ArrowFlightConnectionProperty;\n+import org.apache.arrow.flight.FlightRuntimeException;\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.arrow.util.Preconditions;\n+import org.apache.calcite.avatica.AvaticaConnection;\n+import org.apache.calcite.avatica.DriverVersion;\n+import org.apache.calcite.avatica.Meta;\n+import org.apache.calcite.avatica.UnregisteredDriver;\n+import org.apache.calcite.avatica.org.apache.http.NameValuePair;\n+import org.apache.calcite.avatica.org.apache.http.client.utils.URLEncodedUtils;\n+\n+/**\n+ * JDBC driver for querying data from an Apache Arrow Flight server.\n+ */\n+public class ArrowFlightJdbcDriver extends UnregisteredDriver {\n+\n+  private static final String CONNECT_STRING_PREFIX = \"jdbc:arrow-flight://\";\n+  private static DriverVersion version;\n+\n+  static {\n+    // Special code for supporting Java9 and higher.\n+    // Netty requires some extra properties to unlock some native memory management api\n+    // Setting this property if not already set externally\n+    // This has to be done before any netty class is being loaded\n+    final String key = \"cfjd.io.netty.tryReflectionSetAccessible\";\n+    final String tryReflectionSetAccessible = System.getProperty(key);\n+    if (tryReflectionSetAccessible == null) {\n+      System.setProperty(key, Boolean.TRUE.toString());\n+    }\n+\n+    new ArrowFlightJdbcDriver().register();\n+  }\n+\n+  @Override\n+  public ArrowFlightConnection connect(final String url, final Properties info)\n+      throws SQLException {\n+    final Properties properties = new Properties(info);\n+    properties.putAll(info);\n+\n+    if (url != null) {\n+      final Map<Object, Object> propertiesFromUrl = getUrlsArgs(url);\n+      properties.putAll(propertiesFromUrl);\n+    }\n+\n+    try {\n+      return ArrowFlightConnection.createNewConnection(\n+          this,\n+          factory,\n+          url,\n+          properties,\n+          new RootAllocator(Long.MAX_VALUE));\n+    } catch (AssertionError | FlightRuntimeException e) {\n\nReview comment:\n       We currently have a ticket for making an exception mapper, it should solve those issues.\n\n##########\nFile path: java/flight/flight-jdbc-driver/src/main/java/org/apache/arrow/driver/jdbc/ArrowFlightJdbcFactory.java\n##########\n@@ -0,0 +1,124 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.driver.jdbc;\n+\n+import java.sql.ResultSetMetaData;\n+import java.sql.SQLException;\n+import java.util.Properties;\n+import java.util.TimeZone;\n+\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.calcite.avatica.AvaticaConnection;\n+import org.apache.calcite.avatica.AvaticaFactory;\n+import org.apache.calcite.avatica.AvaticaResultSetMetaData;\n+import org.apache.calcite.avatica.AvaticaSpecificDatabaseMetaData;\n+import org.apache.calcite.avatica.AvaticaStatement;\n+import org.apache.calcite.avatica.Meta;\n+import org.apache.calcite.avatica.QueryState;\n+import org.apache.calcite.avatica.UnregisteredDriver;\n+\n+/**\n+ * Factory for the Arrow Flight JDBC Driver.\n+ */\n+public class ArrowFlightJdbcFactory implements AvaticaFactory {\n+  private final int major;\n+  private final int minor;\n+\n+  // This need to be public so Avatica can call this constructor\n+  public ArrowFlightJdbcFactory() {\n+    this(4, 1);\n+  }\n+\n+  private ArrowFlightJdbcFactory(final int major, final int minor) {\n+    this.major = major;\n+    this.minor = minor;\n+  }\n+\n+  @Override\n+  public AvaticaConnection newConnection(final UnregisteredDriver driver,\n+                                         final AvaticaFactory factory,\n+                                         final String url,\n+                                         final Properties info) throws SQLException {\n+    return ArrowFlightConnection.createNewConnection(\n+        (ArrowFlightJdbcDriver) driver,\n+        factory,\n+        url,\n+        info,\n+        new RootAllocator(Long.MAX_VALUE));\n\nReview comment:\n       There's not much advantage to this other than for custom APIs, we want to keep it simple so far. Naming the allocator is a good idea though, we'll change the code.\n\n##########\nFile path: java/flight/flight-jdbc-driver/src/main/java/org/apache/arrow/driver/jdbc/client/ArrowFlightSqlClientHandler.java\n##########\n@@ -0,0 +1,516 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.driver.jdbc.client;\n+\n+import java.io.IOException;\n+import java.security.GeneralSecurityException;\n+import java.sql.SQLException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.apache.arrow.driver.jdbc.client.utils.ClientAuthenticationUtils;\n+import org.apache.arrow.flight.CallOption;\n+import org.apache.arrow.flight.FlightClient;\n+import org.apache.arrow.flight.FlightClientMiddleware;\n+import org.apache.arrow.flight.FlightEndpoint;\n+import org.apache.arrow.flight.FlightInfo;\n+import org.apache.arrow.flight.FlightStream;\n+import org.apache.arrow.flight.Location;\n+import org.apache.arrow.flight.auth2.ClientBearerHeaderHandler;\n+import org.apache.arrow.flight.auth2.ClientIncomingAuthHeaderMiddleware;\n+import org.apache.arrow.flight.sql.FlightSqlClient;\n+import org.apache.arrow.flight.sql.impl.FlightSql.SqlInfo;\n+import org.apache.arrow.flight.sql.util.TableRef;\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.util.AutoCloseables;\n+import org.apache.arrow.util.Preconditions;\n+import org.apache.arrow.vector.types.pojo.Schema;\n+import org.apache.calcite.avatica.Meta.StatementType;\n+\n+/**\n+ * A {@link FlightSqlClient} handler.\n+ */\n+public final class ArrowFlightSqlClientHandler implements AutoCloseable {\n+\n+  private final FlightSqlClient sqlClient;\n+  private final Set<CallOption> options = new HashSet<>();\n+\n+  ArrowFlightSqlClientHandler(final FlightSqlClient sqlClient,\n+                              final Collection<CallOption> options) {\n+    this.options.addAll(options);\n+    this.sqlClient = Preconditions.checkNotNull(sqlClient);\n+  }\n+\n+  /**\n+   * Creates a new {@link ArrowFlightSqlClientHandler} from the provided {@code client} and {@code options}.\n+   *\n+   * @param client  the {@link FlightClient} to manage under a {@link FlightSqlClient} wrapper.\n+   * @param options the {@link CallOption}s to persist in between subsequent client calls.\n+   * @return a new {@link ArrowFlightSqlClientHandler}.\n+   */\n+  public static ArrowFlightSqlClientHandler createNewHandler(final FlightClient client,\n+                                                             final Collection<CallOption> options) {\n+    return new ArrowFlightSqlClientHandler(new FlightSqlClient(client), options);\n+  }\n+\n+  /**\n+   * Gets the {@link #options} for the subsequent calls from this handler.\n+   *\n+   * @return the {@link CallOption}s.\n+   */\n+  private CallOption[] getOptions() {\n+    return options.toArray(new CallOption[0]);\n+  }\n+\n+  /**\n+   * Makes an RPC \"getStream\" request based on the provided {@link FlightInfo}\n+   * object. Retrieves the result of the query previously prepared with \"getInfo.\"\n+   *\n+   * @param flightInfo The {@link FlightInfo} instance from which to fetch results.\n+   * @return a {@code FlightStream} of results.\n+   */\n+  public List<FlightStream> getStreams(final FlightInfo flightInfo) {\n+    return flightInfo.getEndpoints().stream()\n+        .map(FlightEndpoint::getTicket)\n+        .map(ticket -> sqlClient.getStream(ticket, getOptions()))\n+        .collect(Collectors.toList());\n+  }\n+\n+  /**\n+   * Makes an RPC \"getInfo\" request based on the provided {@code query}\n+   * object.\n+   *\n+   * @param query The query.\n+   * @return a {@code FlightStream} of results.\n+   */\n+  public FlightInfo getInfo(final String query) {\n+    return sqlClient.execute(query, getOptions());\n+  }\n+\n+  @Override\n+  public void close() throws SQLException {\n+    try {\n+      AutoCloseables.close(sqlClient);\n+    } catch (final Exception e) {\n+      throw new SQLException(\"Failed to clean up client resources.\", e);\n+    }\n+  }\n+\n+  /**\n+   * A prepared statement handler.\n+   */\n+  public interface PreparedStatement extends AutoCloseable {\n+    /**\n+     * Executes this {@link PreparedStatement}.\n+     *\n+     * @return the {@link FlightInfo} representing the outcome of this query execution.\n+     * @throws SQLException on error.\n+     */\n+    FlightInfo executeQuery() throws SQLException;\n+\n+    /**\n+     * Executes a {@link StatementType#UPDATE} query.\n+     *\n+     * @return the number of rows affected.\n+     */\n+    long executeUpdate();\n+\n+    /**\n+     * Gets the {@link StatementType} of this {@link PreparedStatement}.\n+     *\n+     * @return the Statement Type.\n+     */\n+    StatementType getType();\n+\n+    /**\n+     * Gets the {@link Schema} of this {@link PreparedStatement}.\n+     *\n+     * @return {@link Schema}.\n+     */\n+    Schema getDataSetSchema();\n+\n+    @Override\n+    void close();\n+  }\n+\n+  /**\n+   * Creates a new {@link PreparedStatement} for the given {@code query}.\n+   *\n+   * @param query the SQL query.\n+   * @return a new prepared statement.\n+   */\n+  public PreparedStatement prepare(final String query) {\n+    final FlightSqlClient.PreparedStatement preparedStatement =\n+        sqlClient.prepare(query, getOptions());\n+    return new PreparedStatement() {\n+      @Override\n+      public FlightInfo executeQuery() throws SQLException {\n+        return preparedStatement.execute(getOptions());\n\nReview comment:\n       This should be fixed with our ticket for implementing an exception mapper.\n\n##########\nFile path: java/flight/flight-jdbc-driver/src/main/java/org/apache/arrow/driver/jdbc/ArrowFlightConnection.java\n##########\n@@ -0,0 +1,178 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.driver.jdbc;\n+\n+import java.sql.SQLException;\n+import java.util.Properties;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+import org.apache.arrow.driver.jdbc.client.ArrowFlightSqlClientHandler;\n+import org.apache.arrow.driver.jdbc.utils.ArrowFlightConnectionConfigImpl;\n+import org.apache.arrow.flight.FlightClient;\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.util.AutoCloseables;\n+import org.apache.arrow.util.Preconditions;\n+import org.apache.calcite.avatica.AvaticaConnection;\n+import org.apache.calcite.avatica.AvaticaFactory;\n+\n+import io.netty.util.concurrent.DefaultThreadFactory;\n+\n+/**\n+ * Connection to the Arrow Flight server.\n+ */\n+public final class ArrowFlightConnection extends AvaticaConnection {\n+\n+  private final BufferAllocator allocator;\n+  private final ArrowFlightSqlClientHandler clientHandler;\n+  private final ArrowFlightConnectionConfigImpl config;\n+  private ExecutorService executorService;\n+\n+  /**\n+   * Creates a new {@link ArrowFlightConnection}.\n+   *\n+   * @param driver        the {@link ArrowFlightJdbcDriver} to use.\n+   * @param factory       the {@link AvaticaFactory} to use.\n+   * @param url           the URL to use.\n+   * @param properties    the {@link Properties} to use.\n+   * @param config        the {@link ArrowFlightConnectionConfigImpl} to use.\n+   * @param allocator     the {@link BufferAllocator} to use.\n+   * @param clientHandler the {@link ArrowFlightSqlClientHandler} to use.\n+   */\n+  private ArrowFlightConnection(final ArrowFlightJdbcDriver driver, final AvaticaFactory factory,\n+                                final String url, final Properties properties,\n+                                final ArrowFlightConnectionConfigImpl config,\n+                                final BufferAllocator allocator,\n+                                final ArrowFlightSqlClientHandler clientHandler) {\n+    super(driver, factory, url, properties);\n+    this.config = Preconditions.checkNotNull(config, \"Config cannot be null.\");\n+    this.allocator = Preconditions.checkNotNull(allocator, \"Allocator cannot be null.\");\n+    this.clientHandler = Preconditions.checkNotNull(clientHandler, \"Handler cannot be null.\");\n+  }\n+\n+  /**\n+   * Creates a new {@link ArrowFlightConnection} to a {@link FlightClient}.\n+   *\n+   * @param driver     the {@link ArrowFlightJdbcDriver} to use.\n+   * @param factory    the {@link AvaticaFactory} to use.\n+   * @param url        the URL to establish the connection to.\n+   * @param properties the {@link Properties} to use for this session.\n+   * @param allocator  the {@link BufferAllocator} to use.\n+   * @return a new {@link ArrowFlightConnection}.\n+   * @throws SQLException on error.\n+   */\n+  static ArrowFlightConnection createNewConnection(final ArrowFlightJdbcDriver driver,\n+                                                   final AvaticaFactory factory,\n+                                                   final String url, final Properties properties,\n+                                                   final BufferAllocator allocator)\n+      throws SQLException {\n+    final ArrowFlightConnectionConfigImpl config = new ArrowFlightConnectionConfigImpl(properties);\n+    final ArrowFlightSqlClientHandler clientHandler = createNewClientHandler(config, allocator);\n+    return new ArrowFlightConnection(driver, factory, url, properties, config, allocator,\n+        clientHandler);\n+  }\n+\n+  private static ArrowFlightSqlClientHandler createNewClientHandler(\n+      final ArrowFlightConnectionConfigImpl config,\n+      final BufferAllocator allocator) throws SQLException {\n+    try {\n+      return new ArrowFlightSqlClientHandler.Builder()\n+          .withHost(config.getHost())\n+          .withPort(config.getPort())\n+          .withUsername(config.getUser())\n+          .withPassword(config.getPassword())\n+          .withKeyStorePath(config.getKeyStorePath())\n+          .withKeyStorePassword(config.keystorePassword())\n+          .withBufferAllocator(allocator)\n+          .withTlsEncryption(config.useTls())\n+          .withCallOptions(config.toCallOption())\n+          .build();\n+    } catch (final SQLException e) {\n+      allocator.close();\n\nReview comment:\n       Okay.\n\n##########\nFile path: java/flight/flight-jdbc-driver/src/main/java/org/apache/arrow/driver/jdbc/ArrowFlightJdbcPooledConnection.java\n##########\n@@ -0,0 +1,112 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.driver.jdbc;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Properties;\n+import java.util.Set;\n+\n+import javax.sql.ConnectionEvent;\n+import javax.sql.ConnectionEventListener;\n+import javax.sql.PooledConnection;\n+import javax.sql.StatementEventListener;\n+\n+import org.apache.arrow.driver.jdbc.utils.ConnectionWrapper;\n+\n+/**\n+ * {@link PooledConnection} implementation for Arrow Flight JDBC Driver.\n+ */\n+public class ArrowFlightJdbcPooledConnection implements PooledConnection {\n+\n+  private final ArrowFlightConnection connection;\n+  private final Set<ConnectionEventListener> eventListeners;\n+  private final Set<StatementEventListener> statementEventListeners;\n+\n+  private final class ConnectionHandle extends ConnectionWrapper {\n\nReview comment:\n       Could you clarify this a bit?\n\n##########\nFile path: java/flight/flight-jdbc-driver/src/main/java/org/apache/arrow/driver/jdbc/utils/ConnectionWrapper.java\n##########\n@@ -0,0 +1,344 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.driver.jdbc.utils;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import java.sql.Array;\n+import java.sql.Blob;\n+import java.sql.CallableStatement;\n+import java.sql.Clob;\n+import java.sql.Connection;\n+import java.sql.DatabaseMetaData;\n+import java.sql.NClob;\n+import java.sql.PreparedStatement;\n+import java.sql.SQLClientInfoException;\n+import java.sql.SQLException;\n+import java.sql.SQLWarning;\n+import java.sql.SQLXML;\n+import java.sql.Savepoint;\n+import java.sql.Statement;\n+import java.sql.Struct;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.concurrent.Executor;\n+\n+import org.apache.arrow.driver.jdbc.ArrowFlightJdbcPooledConnection;\n+\n+/**\n+ * Auxiliary wrapper class for {@link Connection}, used on {@link ArrowFlightJdbcPooledConnection}.\n+ */\n+public class ConnectionWrapper implements Connection {\n\nReview comment:\n       Do you want us to document that this is to remove boilerplate?\n\n##########\nFile path: java/flight/flight-jdbc-driver/src/main/java/org/apache/arrow/driver/jdbc/utils/ExceptionTemplateThrower.java\n##########\n@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.driver.jdbc.utils;\n+\n+import static java.lang.String.format;\n+\n+import org.apache.calcite.avatica.util.Cursor.Accessor;\n+\n+/**\n+ * Utility class for managing exceptions thrown by\n+ * {@link Accessor}s.\n+ */\n+public final class ExceptionTemplateThrower {\n+\n+  private ExceptionTemplateThrower() {\n+    // Prevent instantiation.\n+  }\n+\n+  /**\n+   * Gets a {@link Exception} for an attempt to perform a conversion\n+   * not yet supported by the {@link Accessor} in use.\n+   *\n+   * @return the exception.\n+   */\n+  public static UnsupportedOperationException getOperationNotSupported(final Class<?> type) {\n\nReview comment:\n       Sure.\n\n##########\nFile path: java/flight/flight-jdbc-driver/src/test/java/org/apache/arrow/driver/jdbc/utils/FlightStreamQueueTest.java\n##########\n@@ -0,0 +1,114 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.driver.jdbc.utils;\n+\n+import static java.lang.String.format;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.nullValue;\n+import static org.mockito.Mockito.mock;\n+\n+import java.util.Optional;\n+import java.util.concurrent.CompletionService;\n+\n+import org.apache.arrow.flight.FlightStream;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ErrorCollector;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+/**\n+ * Tests for {@link FlightStreamQueue}.\n+ */\n+@RunWith(MockitoJUnitRunner.class)\n+public class FlightStreamQueueTest {\n+\n+  @Rule\n+  public final ErrorCollector collector = new ErrorCollector();\n+  @Mock\n+  private CompletionService<FlightStream> mockedService;\n+  private FlightStreamQueue queue;\n+\n+  @Before\n+  public void setUp() {\n+    queue = new FlightStreamQueue(mockedService);\n+  }\n+\n+  @Test\n+  public void testNextShouldRetrieveNullIfEmpty() throws Exception {\n+    collector.checkThat(queue.next(), is(nullValue()));\n+  }\n+\n+  @Test\n+  public void testNextShouldThrowExceptionUponClose() throws Exception {\n+    queue.close();\n+    Optional<Exception> expectedExceptionOnNextIfClosed = Optional.empty();\n+    try {\n+      queue.next();\n+    } catch (final IllegalStateException e) {\n+      expectedExceptionOnNextIfClosed = Optional.of(e);\n\nReview comment:\n       Alright.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-10T17:52:21.950+0000",
                    "updated": "2022-03-10T17:52:21.950+0000",
                    "started": "2022-03-10T17:52:21.950+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "739643",
                    "issueId": "13424739"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13424739/worklog/739644",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vfraga commented on a change in pull request #12254:\nURL: https://github.com/apache/arrow/pull/12254#discussion_r823995939\n\n\n\n##########\nFile path: java/flight/flight-jdbc-driver/src/test/java/org/apache/arrow/driver/jdbc/utils/UrlSample.java\n##########\n@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.driver.jdbc.utils;\n+\n+import org.apache.arrow.util.Preconditions;\n+\n+/**\n+ * Class for storing sample JDBC URLs. Used for testing.\n+ *\n+ * @see org.apache.arrow.driver.jdbc.utils.BaseProperty\n+ * @deprecated not updatable to match dinamic server allocation.\n+ */\n+@Deprecated\n+public enum UrlSample {\n\nReview comment:\n       We're cleaning up deprecated classes/methods.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-10T17:52:45.586+0000",
                    "updated": "2022-03-10T17:52:45.586+0000",
                    "started": "2022-03-10T17:52:45.585+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "739644",
                    "issueId": "13424739"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13424739/worklog/739731",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #12254:\nURL: https://github.com/apache/arrow/pull/12254#issuecomment-1064527410\n\n\n   BTW, please let us know when you think this is ready for a full review\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-10T21:37:26.273+0000",
                    "updated": "2022-03-10T21:37:26.273+0000",
                    "started": "2022-03-10T21:37:26.273+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "739731",
                    "issueId": "13424739"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13424739/worklog/739785",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vfraga commented on a change in pull request #12254:\nURL: https://github.com/apache/arrow/pull/12254#discussion_r823994340\n\n\n\n##########\nFile path: java/flight/flight-jdbc-driver/src/main/java/org/apache/arrow/driver/jdbc/accessor/ArrowFlightJdbcAccessorFactory.java\n##########\n@@ -0,0 +1,215 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.driver.jdbc.accessor;\n+\n+import java.util.function.IntSupplier;\n+\n+import org.apache.arrow.driver.jdbc.accessor.impl.ArrowFlightJdbcNullVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.binary.ArrowFlightJdbcBinaryVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.calendar.ArrowFlightJdbcDateVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.calendar.ArrowFlightJdbcDurationVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.calendar.ArrowFlightJdbcIntervalVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.calendar.ArrowFlightJdbcTimeStampVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.calendar.ArrowFlightJdbcTimeVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.complex.ArrowFlightJdbcDenseUnionVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.complex.ArrowFlightJdbcFixedSizeListVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.complex.ArrowFlightJdbcLargeListVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.complex.ArrowFlightJdbcListVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.complex.ArrowFlightJdbcMapVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.complex.ArrowFlightJdbcStructVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.complex.ArrowFlightJdbcUnionVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.numeric.ArrowFlightJdbcBaseIntVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.numeric.ArrowFlightJdbcBitVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.numeric.ArrowFlightJdbcDecimalVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.numeric.ArrowFlightJdbcFloat4VectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.numeric.ArrowFlightJdbcFloat8VectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.text.ArrowFlightJdbcVarCharVectorAccessor;\n+import org.apache.arrow.vector.BigIntVector;\n+import org.apache.arrow.vector.BitVector;\n+import org.apache.arrow.vector.DateDayVector;\n+import org.apache.arrow.vector.DateMilliVector;\n+import org.apache.arrow.vector.Decimal256Vector;\n+import org.apache.arrow.vector.DecimalVector;\n+import org.apache.arrow.vector.DurationVector;\n+import org.apache.arrow.vector.FixedSizeBinaryVector;\n+import org.apache.arrow.vector.Float4Vector;\n+import org.apache.arrow.vector.Float8Vector;\n+import org.apache.arrow.vector.IntVector;\n+import org.apache.arrow.vector.IntervalDayVector;\n+import org.apache.arrow.vector.IntervalYearVector;\n+import org.apache.arrow.vector.LargeVarBinaryVector;\n+import org.apache.arrow.vector.LargeVarCharVector;\n+import org.apache.arrow.vector.NullVector;\n+import org.apache.arrow.vector.SmallIntVector;\n+import org.apache.arrow.vector.TimeMicroVector;\n+import org.apache.arrow.vector.TimeMilliVector;\n+import org.apache.arrow.vector.TimeNanoVector;\n+import org.apache.arrow.vector.TimeSecVector;\n+import org.apache.arrow.vector.TimeStampVector;\n+import org.apache.arrow.vector.TinyIntVector;\n+import org.apache.arrow.vector.UInt1Vector;\n+import org.apache.arrow.vector.UInt2Vector;\n+import org.apache.arrow.vector.UInt4Vector;\n+import org.apache.arrow.vector.UInt8Vector;\n+import org.apache.arrow.vector.ValueVector;\n+import org.apache.arrow.vector.VarBinaryVector;\n+import org.apache.arrow.vector.VarCharVector;\n+import org.apache.arrow.vector.complex.DenseUnionVector;\n+import org.apache.arrow.vector.complex.FixedSizeListVector;\n+import org.apache.arrow.vector.complex.LargeListVector;\n+import org.apache.arrow.vector.complex.ListVector;\n+import org.apache.arrow.vector.complex.MapVector;\n+import org.apache.arrow.vector.complex.StructVector;\n+import org.apache.arrow.vector.complex.UnionVector;\n+\n+/**\n+ * Factory to instantiate the accessors.\n+ */\n+public class ArrowFlightJdbcAccessorFactory {\n+\n+  /**\n+   * Create an accessor according to the its type.\n+   *\n+   * @param vector        an instance of an arrow vector.\n+   * @param getCurrentRow a supplier to check which row is being accessed.\n+   * @return an instance of one of the accessors.\n+   */\n+  public static ArrowFlightJdbcAccessor createAccessor(ValueVector vector,\n+                                                       IntSupplier getCurrentRow,\n+                                                       WasNullConsumer setCursorWasNull) {\n+    if (vector instanceof UInt1Vector) {\n+      return new ArrowFlightJdbcBaseIntVectorAccessor((UInt1Vector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof UInt2Vector) {\n+      return new ArrowFlightJdbcBaseIntVectorAccessor((UInt2Vector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof UInt4Vector) {\n+      return new ArrowFlightJdbcBaseIntVectorAccessor((UInt4Vector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof UInt8Vector) {\n+      return new ArrowFlightJdbcBaseIntVectorAccessor((UInt8Vector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof TinyIntVector) {\n+      return new ArrowFlightJdbcBaseIntVectorAccessor((TinyIntVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof SmallIntVector) {\n+      return new ArrowFlightJdbcBaseIntVectorAccessor((SmallIntVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof IntVector) {\n+      return new ArrowFlightJdbcBaseIntVectorAccessor((IntVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof BigIntVector) {\n+      return new ArrowFlightJdbcBaseIntVectorAccessor((BigIntVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof Float4Vector) {\n+      return new ArrowFlightJdbcFloat4VectorAccessor((Float4Vector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof Float8Vector) {\n+      return new ArrowFlightJdbcFloat8VectorAccessor((Float8Vector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof BitVector) {\n+      return new ArrowFlightJdbcBitVectorAccessor((BitVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof DecimalVector) {\n+      return new ArrowFlightJdbcDecimalVectorAccessor((DecimalVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof Decimal256Vector) {\n+      return new ArrowFlightJdbcDecimalVectorAccessor((Decimal256Vector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof VarBinaryVector) {\n+      return new ArrowFlightJdbcBinaryVectorAccessor((VarBinaryVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof LargeVarBinaryVector) {\n+      return new ArrowFlightJdbcBinaryVectorAccessor((LargeVarBinaryVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof FixedSizeBinaryVector) {\n+      return new ArrowFlightJdbcBinaryVectorAccessor((FixedSizeBinaryVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof TimeStampVector) {\n+      return new ArrowFlightJdbcTimeStampVectorAccessor((TimeStampVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof TimeNanoVector) {\n+      return new ArrowFlightJdbcTimeVectorAccessor((TimeNanoVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof TimeMicroVector) {\n+      return new ArrowFlightJdbcTimeVectorAccessor((TimeMicroVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof TimeMilliVector) {\n+      return new ArrowFlightJdbcTimeVectorAccessor((TimeMilliVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof TimeSecVector) {\n+      return new ArrowFlightJdbcTimeVectorAccessor((TimeSecVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof DateDayVector) {\n+      return new ArrowFlightJdbcDateVectorAccessor(((DateDayVector) vector), getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof DateMilliVector) {\n+      return new ArrowFlightJdbcDateVectorAccessor(((DateMilliVector) vector), getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof VarCharVector) {\n+      return new ArrowFlightJdbcVarCharVectorAccessor((VarCharVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof LargeVarCharVector) {\n+      return new ArrowFlightJdbcVarCharVectorAccessor((LargeVarCharVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof DurationVector) {\n+      return new ArrowFlightJdbcDurationVectorAccessor((DurationVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof IntervalDayVector) {\n+      return new ArrowFlightJdbcIntervalVectorAccessor(((IntervalDayVector) vector), getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof IntervalYearVector) {\n+      return new ArrowFlightJdbcIntervalVectorAccessor(((IntervalYearVector) vector), getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof StructVector) {\n+      return new ArrowFlightJdbcStructVectorAccessor((StructVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof MapVector) {\n+      return new ArrowFlightJdbcMapVectorAccessor((MapVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof ListVector) {\n+      return new ArrowFlightJdbcListVectorAccessor((ListVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof LargeListVector) {\n+      return new ArrowFlightJdbcLargeListVectorAccessor((LargeListVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof FixedSizeListVector) {\n+      return new ArrowFlightJdbcFixedSizeListVectorAccessor((FixedSizeListVector) vector,\n+          getCurrentRow, setCursorWasNull);\n+    } else if (vector instanceof UnionVector) {\n+      return new ArrowFlightJdbcUnionVectorAccessor((UnionVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof DenseUnionVector) {\n+      return new ArrowFlightJdbcDenseUnionVectorAccessor((DenseUnionVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof NullVector || vector == null) {\n\nReview comment:\n       It could occur if the Flight SQL Server Endpoint defines a column with it. It could represent java.sql.Types.NULL.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-11T00:42:10.511+0000",
                    "updated": "2022-03-11T00:42:10.511+0000",
                    "started": "2022-03-11T00:42:10.511+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "739785",
                    "issueId": "13424739"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13424739/worklog/739789",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vfraga commented on a change in pull request #12254:\nURL: https://github.com/apache/arrow/pull/12254#discussion_r824298599\n\n\n\n##########\nFile path: java/flight/flight-sql/src/main/java/org/apache/arrow/flight/sql/FlightSqlColumnMetadata.java\n##########\n@@ -0,0 +1,295 @@\n+/*\n\nReview comment:\n       It's from the [ColumnMetadata PR](https://github.com/apache/arrow/pull/11999), we needed it to continue implementing some missing stuff like proper [ResultSetMetaData](https://docs.oracle.com/javase/8/docs/api/java/sql/ResultSetMetaData.html) for [PreparedStatement metadata](https://docs.oracle.com/javase/8/docs/api/java/sql/PreparedStatement.html#getMetaData--), and other metadata for [ResultSet#getColumns](https://docs.oracle.com/javase/8/docs/api/java/sql/DatabaseMetaData.html#getColumns-java.lang.String-java.lang.String-java.lang.String-java.lang.String-).\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-11T00:49:14.841+0000",
                    "updated": "2022-03-11T00:49:14.841+0000",
                    "started": "2022-03-11T00:49:14.840+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "739789",
                    "issueId": "13424739"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13424739/worklog/740184",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vfraga commented on a change in pull request #12254:\nURL: https://github.com/apache/arrow/pull/12254#discussion_r824944854\n\n\n\n##########\nFile path: java/flight/flight-jdbc-driver/src/main/java/org/apache/arrow/driver/jdbc/ArrowFlightJdbcFactory.java\n##########\n@@ -0,0 +1,124 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.driver.jdbc;\n+\n+import java.sql.ResultSetMetaData;\n+import java.sql.SQLException;\n+import java.util.Properties;\n+import java.util.TimeZone;\n+\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.calcite.avatica.AvaticaConnection;\n+import org.apache.calcite.avatica.AvaticaFactory;\n+import org.apache.calcite.avatica.AvaticaResultSetMetaData;\n+import org.apache.calcite.avatica.AvaticaSpecificDatabaseMetaData;\n+import org.apache.calcite.avatica.AvaticaStatement;\n+import org.apache.calcite.avatica.Meta;\n+import org.apache.calcite.avatica.QueryState;\n+import org.apache.calcite.avatica.UnregisteredDriver;\n+\n+/**\n+ * Factory for the Arrow Flight JDBC Driver.\n+ */\n+public class ArrowFlightJdbcFactory implements AvaticaFactory {\n+  private final int major;\n+  private final int minor;\n+\n+  // This need to be public so Avatica can call this constructor\n+  public ArrowFlightJdbcFactory() {\n+    this(4, 1);\n+  }\n+\n+  private ArrowFlightJdbcFactory(final int major, final int minor) {\n+    this.major = major;\n+    this.minor = minor;\n+  }\n+\n+  @Override\n+  public AvaticaConnection newConnection(final UnregisteredDriver driver,\n+                                         final AvaticaFactory factory,\n+                                         final String url,\n+                                         final Properties info) throws SQLException {\n+    return ArrowFlightConnection.createNewConnection(\n+        (ArrowFlightJdbcDriver) driver,\n+        factory,\n+        url,\n+        info,\n+        new RootAllocator(Long.MAX_VALUE));\n\nReview comment:\n       Couldn't find a way to name the allocator. BaseAllocator's constructor is package-protected.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-11T17:54:08.430+0000",
                    "updated": "2022-03-11T17:54:08.430+0000",
                    "started": "2022-03-11T17:54:08.429+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "740184",
                    "issueId": "13424739"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13424739/worklog/740201",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jduo commented on a change in pull request #12254:\nURL: https://github.com/apache/arrow/pull/12254#discussion_r824962459\n\n\n\n##########\nFile path: java/flight/flight-jdbc-driver/src/main/java/org/apache/arrow/driver/jdbc/ArrowFlightJdbcDriver.java\n##########\n@@ -0,0 +1,253 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.driver.jdbc;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.Reader;\n+import java.net.URI;\n+import java.nio.charset.StandardCharsets;\n+import java.sql.SQLException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Properties;\n+\n+import org.apache.arrow.driver.jdbc.utils.ArrowFlightConnectionConfigImpl.ArrowFlightConnectionProperty;\n+import org.apache.arrow.flight.FlightRuntimeException;\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.arrow.util.Preconditions;\n+import org.apache.calcite.avatica.AvaticaConnection;\n+import org.apache.calcite.avatica.DriverVersion;\n+import org.apache.calcite.avatica.Meta;\n+import org.apache.calcite.avatica.UnregisteredDriver;\n+import org.apache.calcite.avatica.org.apache.http.NameValuePair;\n+import org.apache.calcite.avatica.org.apache.http.client.utils.URLEncodedUtils;\n+\n+/**\n+ * JDBC driver for querying data from an Apache Arrow Flight server.\n+ */\n+public class ArrowFlightJdbcDriver extends UnregisteredDriver {\n+\n+  private static final String CONNECT_STRING_PREFIX = \"jdbc:arrow-flight://\";\n+  private static DriverVersion version;\n+\n+  static {\n+    // Special code for supporting Java9 and higher.\n+    // Netty requires some extra properties to unlock some native memory management api\n+    // Setting this property if not already set externally\n+    // This has to be done before any netty class is being loaded\n+    final String key = \"cfjd.io.netty.tryReflectionSetAccessible\";\n+    final String tryReflectionSetAccessible = System.getProperty(key);\n+    if (tryReflectionSetAccessible == null) {\n+      System.setProperty(key, Boolean.TRUE.toString());\n+    }\n+\n+    new ArrowFlightJdbcDriver().register();\n+  }\n+\n+  @Override\n+  public ArrowFlightConnection connect(final String url, final Properties info)\n+      throws SQLException {\n+    final Properties properties = new Properties(info);\n+    properties.putAll(info);\n+\n+    if (url != null) {\n+      final Map<Object, Object> propertiesFromUrl = getUrlsArgs(url);\n+      properties.putAll(propertiesFromUrl);\n+    }\n+\n+    try {\n+      return ArrowFlightConnection.createNewConnection(\n+          this,\n+          factory,\n+          url,\n+          properties,\n+          new RootAllocator(Long.MAX_VALUE));\n+    } catch (AssertionError | FlightRuntimeException e) {\n+      throw new SQLException(\"Failed to connect.\", e);\n+    }\n+  }\n+\n+  @Override\n+  protected String getFactoryClassName(final JdbcVersion jdbcVersion) {\n+    return ArrowFlightJdbcFactory.class.getName();\n+  }\n+\n+  @Override\n+  protected DriverVersion createDriverVersion() {\n+\n+    CreateVersionIfNull:\n+    {\n+\n+      if (version != null) {\n+        break CreateVersionIfNull;\n+      }\n+\n+      try (Reader reader = new BufferedReader(new InputStreamReader(\n+          this.getClass().getResourceAsStream(\"/properties/flight.properties\"),\n+          StandardCharsets.UTF_8))) {\n+        final Properties properties = new Properties();\n+        properties.load(reader);\n+\n+        final String parentName = properties\n+            .getProperty(\"org.apache.arrow.flight.name\");\n+        final String parentVersion = properties\n+            .getProperty(\"org.apache.arrow.flight.version\");\n+        final String[] pVersion = parentVersion.split(\"\\\\.\");\n+\n+        final int parentMajorVersion = Integer.parseInt(pVersion[0]);\n+        final int parentMinorVersion = Integer.parseInt(pVersion[1]);\n+\n+        final String childName = properties\n+            .getProperty(\"org.apache.arrow.flight.jdbc-driver.name\");\n+        final String childVersion = properties\n+            .getProperty(\"org.apache.arrow.flight.jdbc-driver.version\");\n+        final String[] cVersion = childVersion.split(\"\\\\.\");\n+\n+        final int childMajorVersion = Integer.parseInt(cVersion[0]);\n+        final int childMinorVersion = Integer.parseInt(cVersion[1]);\n+\n+        version = new DriverVersion(childName, childVersion, parentName,\n+            parentVersion, true, childMajorVersion, childMinorVersion,\n+            parentMajorVersion, parentMinorVersion);\n+      } catch (final IOException e) {\n+        throw new RuntimeException(\"Failed to load driver version.\", e);\n+      }\n+    }\n+\n+    return version;\n+  }\n+\n+  @Override\n+  public Meta createMeta(final AvaticaConnection connection) {\n+    return new ArrowFlightMetaImpl((ArrowFlightConnection) connection);\n+  }\n+\n+  @Override\n+  protected String getConnectStringPrefix() {\n+    return CONNECT_STRING_PREFIX;\n+  }\n+\n+  @Override\n+  public boolean acceptsURL(final String url) throws SQLException {\n+    return Preconditions.checkNotNull(url).startsWith(CONNECT_STRING_PREFIX);\n+  }\n+\n+  /**\n+   * Parses the provided url based on the format this driver accepts, retrieving\n+   * arguments after the {@link #CONNECT_STRING_PREFIX}.\n+   * <p>\n+   * This method gets the args if the provided URL follows this pattern:\n+   * {@code jdbc:arrow-flight://<host>:<port>[/?key1=val1&key2=val2&(...)]}\n+   *\n+   * <table border=\"1\">\n+   *    <tr>\n+   *        <td>Group</td>\n+   *        <td>Definition</td>\n+   *        <td>Value</td>\n+   *    </tr>\n+   *    <tr>\n+   *        <td>? \u2014 inaccessible</td>\n+   *        <td>{@link #getConnectStringPrefix}</td>\n+   *        <td>\n+   *            the URL prefix accepted by this driver, i.e.,\n+   *            {@code \"jdbc:arrow-flight://\"}\n+   *        </td>\n+   *    </tr>\n+   *    <tr>\n+   *        <td>1</td>\n+   *        <td>IPv4 host name</td>\n+   *        <td>\n+   *            first word after previous group and before \"{@code :}\"\n+   *        </td>\n+   *    </tr>\n+   *    <tr>\n+   *        <td>2</td>\n+   *        <td>IPv4 port number</td>\n+   *        <td>\n+   *            first number after previous group and before \"{@code /?}\"\n+   *        </td>\n+   *    </tr>\n+   *    <tr>\n+   *        <td>3</td>\n+   *        <td>custom call parameters</td>\n+   *        <td>\n+   *            all parameters provided after \"{@code /?}\" \u2014 must follow the\n+   *            pattern: \"{@code key=value}\" with \"{@code &}\" separating a\n+   *            parameter from another\n+   *        </td>\n+   *    </tr>\n+   * </table>\n+   *\n+   * @param url The url to parse.\n+   * @return the parsed arguments.\n+   * @throws SQLException If an error occurs while trying to parse the URL.\n+   */\n+  private Map<Object, Object> getUrlsArgs(String url)\n+      throws SQLException {\n+\n+    /*\n+     *\n+     * Perhaps this logic should be inside a utility class, separated from this\n+     * one, so as to better delegate responsibilities and concerns throughout\n+     * the code and increase maintainability.\n+     *\n+     * =====\n+     *\n+     * Keep in mind that the URL must ALWAYS follow the pattern:\n+     * \"jdbc:arrow-flight://<host>:<port>[/?param1=value1&param2=value2&(...)].\"\n+     *\n+     */\n+\n+    if (!url.startsWith(\"jdbc:\")) {\n+      throw new SQLException(\"Malformed/invalid URL!\");\n+    }\n+\n+    // It's necessary to use a string without \"jdbc:\" at the beginning to be parsed as a valid URL.\n+    url = url.substring(5);\n+\n+    final URI uri;\n+\n+    try {\n+      uri = URI.create(url);\n+    } catch (final IllegalArgumentException e) {\n+      throw new SQLException(\"Malformed/invalid URL!\", e);\n+    }\n+\n+    if (!Objects.equals(uri.getScheme(), \"arrow-flight\")) {\n\nReview comment:\n       TLS is enabled using the useTls connection property (so we'd generate a grpc+tls scheme).\r\n   I propose that we treat the scheme as optional, with as grpc, but also allow explicit setting of known schemes (grpc+unix, ucx)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-11T18:18:42.965+0000",
                    "updated": "2022-03-11T18:18:42.965+0000",
                    "started": "2022-03-11T18:18:42.965+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "740201",
                    "issueId": "13424739"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13424739/worklog/740203",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jduo commented on a change in pull request #12254:\nURL: https://github.com/apache/arrow/pull/12254#discussion_r824963788\n\n\n\n##########\nFile path: java/flight/flight-jdbc-driver/src/main/java/org/apache/arrow/driver/jdbc/ArrowFlightJdbcFactory.java\n##########\n@@ -0,0 +1,124 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.driver.jdbc;\n+\n+import java.sql.ResultSetMetaData;\n+import java.sql.SQLException;\n+import java.util.Properties;\n+import java.util.TimeZone;\n+\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.calcite.avatica.AvaticaConnection;\n+import org.apache.calcite.avatica.AvaticaFactory;\n+import org.apache.calcite.avatica.AvaticaResultSetMetaData;\n+import org.apache.calcite.avatica.AvaticaSpecificDatabaseMetaData;\n+import org.apache.calcite.avatica.AvaticaStatement;\n+import org.apache.calcite.avatica.Meta;\n+import org.apache.calcite.avatica.QueryState;\n+import org.apache.calcite.avatica.UnregisteredDriver;\n+\n+/**\n+ * Factory for the Arrow Flight JDBC Driver.\n+ */\n+public class ArrowFlightJdbcFactory implements AvaticaFactory {\n+  private final int major;\n+  private final int minor;\n+\n+  // This need to be public so Avatica can call this constructor\n+  public ArrowFlightJdbcFactory() {\n+    this(4, 1);\n+  }\n+\n+  private ArrowFlightJdbcFactory(final int major, final int minor) {\n+    this.major = major;\n+    this.minor = minor;\n+  }\n+\n+  @Override\n+  public AvaticaConnection newConnection(final UnregisteredDriver driver,\n+                                         final AvaticaFactory factory,\n+                                         final String url,\n+                                         final Properties info) throws SQLException {\n+    return ArrowFlightConnection.createNewConnection(\n+        (ArrowFlightJdbcDriver) driver,\n+        factory,\n+        url,\n+        info,\n+        new RootAllocator(Long.MAX_VALUE));\n\nReview comment:\n       We could add another constructor to RootAllocator for setting the name.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-11T18:20:42.124+0000",
                    "updated": "2022-03-11T18:20:42.124+0000",
                    "started": "2022-03-11T18:20:42.124+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "740203",
                    "issueId": "13424739"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13424739/worklog/740208",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jduo commented on a change in pull request #12254:\nURL: https://github.com/apache/arrow/pull/12254#discussion_r824968996\n\n\n\n##########\nFile path: java/flight/flight-jdbc-driver/src/main/java/org/apache/arrow/driver/jdbc/client/ArrowFlightSqlClientHandler.java\n##########\n@@ -0,0 +1,535 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.driver.jdbc.client;\n+\n+import java.io.IOException;\n+import java.security.GeneralSecurityException;\n+import java.sql.SQLException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.apache.arrow.driver.jdbc.client.utils.ClientAuthenticationUtils;\n+import org.apache.arrow.flight.CallOption;\n+import org.apache.arrow.flight.FlightClient;\n+import org.apache.arrow.flight.FlightClientMiddleware;\n+import org.apache.arrow.flight.FlightEndpoint;\n+import org.apache.arrow.flight.FlightInfo;\n+import org.apache.arrow.flight.FlightStream;\n+import org.apache.arrow.flight.Location;\n+import org.apache.arrow.flight.auth2.BearerCredentialWriter;\n+import org.apache.arrow.flight.auth2.ClientBearerHeaderHandler;\n+import org.apache.arrow.flight.auth2.ClientIncomingAuthHeaderMiddleware;\n+import org.apache.arrow.flight.client.ClientCookieMiddleware;\n+import org.apache.arrow.flight.grpc.CredentialCallOption;\n+import org.apache.arrow.flight.sql.FlightSqlClient;\n+import org.apache.arrow.flight.sql.impl.FlightSql.SqlInfo;\n+import org.apache.arrow.flight.sql.util.TableRef;\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.util.AutoCloseables;\n+import org.apache.arrow.util.Preconditions;\n+import org.apache.arrow.vector.types.pojo.Schema;\n+import org.apache.calcite.avatica.Meta.StatementType;\n+\n+/**\n+ * A {@link FlightSqlClient} handler.\n+ */\n+public final class ArrowFlightSqlClientHandler implements AutoCloseable {\n+\n+  private final FlightSqlClient sqlClient;\n+  private final Set<CallOption> options = new HashSet<>();\n+\n+  ArrowFlightSqlClientHandler(final FlightSqlClient sqlClient,\n+                              final Collection<CallOption> options) {\n+    this.options.addAll(options);\n+    this.sqlClient = Preconditions.checkNotNull(sqlClient);\n+  }\n+\n+  /**\n+   * Creates a new {@link ArrowFlightSqlClientHandler} from the provided {@code client} and {@code options}.\n+   *\n+   * @param client  the {@link FlightClient} to manage under a {@link FlightSqlClient} wrapper.\n+   * @param options the {@link CallOption}s to persist in between subsequent client calls.\n+   * @return a new {@link ArrowFlightSqlClientHandler}.\n+   */\n+  public static ArrowFlightSqlClientHandler createNewHandler(final FlightClient client,\n+                                                             final Collection<CallOption> options) {\n+    return new ArrowFlightSqlClientHandler(new FlightSqlClient(client), options);\n+  }\n+\n+  /**\n+   * Gets the {@link #options} for the subsequent calls from this handler.\n+   *\n+   * @return the {@link CallOption}s.\n+   */\n+  private CallOption[] getOptions() {\n+    return options.toArray(new CallOption[0]);\n+  }\n+\n+  /**\n+   * Makes an RPC \"getStream\" request based on the provided {@link FlightInfo}\n+   * object. Retrieves the result of the query previously prepared with \"getInfo.\"\n+   *\n+   * @param flightInfo The {@link FlightInfo} instance from which to fetch results.\n+   * @return a {@code FlightStream} of results.\n+   */\n+  public List<FlightStream> getStreams(final FlightInfo flightInfo) {\n+    return flightInfo.getEndpoints().stream()\n\nReview comment:\n       This isn't correct. This will try to get every ticket using the current client. However each endpoint is a pair <Ticket, List<Location>>.\r\n   \r\n   What we actually need to do is for each endpoint, create a FlightClient at each location and call getStream() with the associated ticket. See:\r\n   \r\n   https://github.com/apache/arrow/blob/dc2e0b2e44fdaa3d5ad0bb358ff8ce9db3bc7416/java/flight/flight-integration-tests/src/main/java/org/apache/arrow/flight/integration/tests/IntegrationTestClient.java#L151\r\n   \r\n   Note that if the list of locations is empty, it means the data is only available at the current location:\r\n   \r\n   Can optimize this to some extent if the current location is used once, use the current client, though that limits the driver to only running one Statement at a time.\r\n   \r\n   We should consider pooling FlightClients. I think Apache Pools is a good choice here, and use KeyedObjectPool to model the problem: https://commons.apache.org/proper/commons-pool/apidocs/org/apache/commons/pool2/KeyedObjectPool.html\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-11T18:28:35.752+0000",
                    "updated": "2022-03-11T18:28:35.752+0000",
                    "started": "2022-03-11T18:28:35.752+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "740208",
                    "issueId": "13424739"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13424739/worklog/740303",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #12254:\nURL: https://github.com/apache/arrow/pull/12254#discussion_r825123124\n\n\n\n##########\nFile path: java/flight/flight-jdbc-driver/src/main/java/org/apache/arrow/driver/jdbc/ArrowFlightJdbcFactory.java\n##########\n@@ -0,0 +1,124 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.driver.jdbc;\n+\n+import java.sql.ResultSetMetaData;\n+import java.sql.SQLException;\n+import java.util.Properties;\n+import java.util.TimeZone;\n+\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.calcite.avatica.AvaticaConnection;\n+import org.apache.calcite.avatica.AvaticaFactory;\n+import org.apache.calcite.avatica.AvaticaResultSetMetaData;\n+import org.apache.calcite.avatica.AvaticaSpecificDatabaseMetaData;\n+import org.apache.calcite.avatica.AvaticaStatement;\n+import org.apache.calcite.avatica.Meta;\n+import org.apache.calcite.avatica.QueryState;\n+import org.apache.calcite.avatica.UnregisteredDriver;\n+\n+/**\n+ * Factory for the Arrow Flight JDBC Driver.\n+ */\n+public class ArrowFlightJdbcFactory implements AvaticaFactory {\n+  private final int major;\n+  private final int minor;\n+\n+  // This need to be public so Avatica can call this constructor\n+  public ArrowFlightJdbcFactory() {\n+    this(4, 1);\n+  }\n+\n+  private ArrowFlightJdbcFactory(final int major, final int minor) {\n+    this.major = major;\n+    this.minor = minor;\n+  }\n+\n+  @Override\n+  public AvaticaConnection newConnection(final UnregisteredDriver driver,\n+                                         final AvaticaFactory factory,\n+                                         final String url,\n+                                         final Properties info) throws SQLException {\n+    return ArrowFlightConnection.createNewConnection(\n+        (ArrowFlightJdbcDriver) driver,\n+        factory,\n+        url,\n+        info,\n+        new RootAllocator(Long.MAX_VALUE));\n\nReview comment:\n       Hmm, we could also just create a single RootAllocator in the factory, and give each connection a child allocator.\n\n##########\nFile path: java/flight/flight-jdbc-driver/src/main/java/org/apache/arrow/driver/jdbc/accessor/ArrowFlightJdbcAccessorFactory.java\n##########\n@@ -0,0 +1,215 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.driver.jdbc.accessor;\n+\n+import java.util.function.IntSupplier;\n+\n+import org.apache.arrow.driver.jdbc.accessor.impl.ArrowFlightJdbcNullVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.binary.ArrowFlightJdbcBinaryVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.calendar.ArrowFlightJdbcDateVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.calendar.ArrowFlightJdbcDurationVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.calendar.ArrowFlightJdbcIntervalVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.calendar.ArrowFlightJdbcTimeStampVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.calendar.ArrowFlightJdbcTimeVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.complex.ArrowFlightJdbcDenseUnionVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.complex.ArrowFlightJdbcFixedSizeListVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.complex.ArrowFlightJdbcLargeListVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.complex.ArrowFlightJdbcListVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.complex.ArrowFlightJdbcMapVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.complex.ArrowFlightJdbcStructVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.complex.ArrowFlightJdbcUnionVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.numeric.ArrowFlightJdbcBaseIntVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.numeric.ArrowFlightJdbcBitVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.numeric.ArrowFlightJdbcDecimalVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.numeric.ArrowFlightJdbcFloat4VectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.numeric.ArrowFlightJdbcFloat8VectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.text.ArrowFlightJdbcVarCharVectorAccessor;\n+import org.apache.arrow.vector.BigIntVector;\n+import org.apache.arrow.vector.BitVector;\n+import org.apache.arrow.vector.DateDayVector;\n+import org.apache.arrow.vector.DateMilliVector;\n+import org.apache.arrow.vector.Decimal256Vector;\n+import org.apache.arrow.vector.DecimalVector;\n+import org.apache.arrow.vector.DurationVector;\n+import org.apache.arrow.vector.FixedSizeBinaryVector;\n+import org.apache.arrow.vector.Float4Vector;\n+import org.apache.arrow.vector.Float8Vector;\n+import org.apache.arrow.vector.IntVector;\n+import org.apache.arrow.vector.IntervalDayVector;\n+import org.apache.arrow.vector.IntervalYearVector;\n+import org.apache.arrow.vector.LargeVarBinaryVector;\n+import org.apache.arrow.vector.LargeVarCharVector;\n+import org.apache.arrow.vector.NullVector;\n+import org.apache.arrow.vector.SmallIntVector;\n+import org.apache.arrow.vector.TimeMicroVector;\n+import org.apache.arrow.vector.TimeMilliVector;\n+import org.apache.arrow.vector.TimeNanoVector;\n+import org.apache.arrow.vector.TimeSecVector;\n+import org.apache.arrow.vector.TimeStampVector;\n+import org.apache.arrow.vector.TinyIntVector;\n+import org.apache.arrow.vector.UInt1Vector;\n+import org.apache.arrow.vector.UInt2Vector;\n+import org.apache.arrow.vector.UInt4Vector;\n+import org.apache.arrow.vector.UInt8Vector;\n+import org.apache.arrow.vector.ValueVector;\n+import org.apache.arrow.vector.VarBinaryVector;\n+import org.apache.arrow.vector.VarCharVector;\n+import org.apache.arrow.vector.complex.DenseUnionVector;\n+import org.apache.arrow.vector.complex.FixedSizeListVector;\n+import org.apache.arrow.vector.complex.LargeListVector;\n+import org.apache.arrow.vector.complex.ListVector;\n+import org.apache.arrow.vector.complex.MapVector;\n+import org.apache.arrow.vector.complex.StructVector;\n+import org.apache.arrow.vector.complex.UnionVector;\n+\n+/**\n+ * Factory to instantiate the accessors.\n+ */\n+public class ArrowFlightJdbcAccessorFactory {\n+\n+  /**\n+   * Create an accessor according to the its type.\n+   *\n+   * @param vector        an instance of an arrow vector.\n+   * @param getCurrentRow a supplier to check which row is being accessed.\n+   * @return an instance of one of the accessors.\n+   */\n+  public static ArrowFlightJdbcAccessor createAccessor(ValueVector vector,\n+                                                       IntSupplier getCurrentRow,\n+                                                       WasNullConsumer setCursorWasNull) {\n+    if (vector instanceof UInt1Vector) {\n+      return new ArrowFlightJdbcBaseIntVectorAccessor((UInt1Vector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof UInt2Vector) {\n+      return new ArrowFlightJdbcBaseIntVectorAccessor((UInt2Vector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof UInt4Vector) {\n+      return new ArrowFlightJdbcBaseIntVectorAccessor((UInt4Vector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof UInt8Vector) {\n+      return new ArrowFlightJdbcBaseIntVectorAccessor((UInt8Vector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof TinyIntVector) {\n+      return new ArrowFlightJdbcBaseIntVectorAccessor((TinyIntVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof SmallIntVector) {\n+      return new ArrowFlightJdbcBaseIntVectorAccessor((SmallIntVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof IntVector) {\n+      return new ArrowFlightJdbcBaseIntVectorAccessor((IntVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof BigIntVector) {\n+      return new ArrowFlightJdbcBaseIntVectorAccessor((BigIntVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof Float4Vector) {\n+      return new ArrowFlightJdbcFloat4VectorAccessor((Float4Vector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof Float8Vector) {\n+      return new ArrowFlightJdbcFloat8VectorAccessor((Float8Vector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof BitVector) {\n+      return new ArrowFlightJdbcBitVectorAccessor((BitVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof DecimalVector) {\n+      return new ArrowFlightJdbcDecimalVectorAccessor((DecimalVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof Decimal256Vector) {\n+      return new ArrowFlightJdbcDecimalVectorAccessor((Decimal256Vector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof VarBinaryVector) {\n+      return new ArrowFlightJdbcBinaryVectorAccessor((VarBinaryVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof LargeVarBinaryVector) {\n+      return new ArrowFlightJdbcBinaryVectorAccessor((LargeVarBinaryVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof FixedSizeBinaryVector) {\n+      return new ArrowFlightJdbcBinaryVectorAccessor((FixedSizeBinaryVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof TimeStampVector) {\n+      return new ArrowFlightJdbcTimeStampVectorAccessor((TimeStampVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof TimeNanoVector) {\n+      return new ArrowFlightJdbcTimeVectorAccessor((TimeNanoVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof TimeMicroVector) {\n+      return new ArrowFlightJdbcTimeVectorAccessor((TimeMicroVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof TimeMilliVector) {\n+      return new ArrowFlightJdbcTimeVectorAccessor((TimeMilliVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof TimeSecVector) {\n+      return new ArrowFlightJdbcTimeVectorAccessor((TimeSecVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof DateDayVector) {\n+      return new ArrowFlightJdbcDateVectorAccessor(((DateDayVector) vector), getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof DateMilliVector) {\n+      return new ArrowFlightJdbcDateVectorAccessor(((DateMilliVector) vector), getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof VarCharVector) {\n+      return new ArrowFlightJdbcVarCharVectorAccessor((VarCharVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof LargeVarCharVector) {\n+      return new ArrowFlightJdbcVarCharVectorAccessor((LargeVarCharVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof DurationVector) {\n+      return new ArrowFlightJdbcDurationVectorAccessor((DurationVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof IntervalDayVector) {\n+      return new ArrowFlightJdbcIntervalVectorAccessor(((IntervalDayVector) vector), getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof IntervalYearVector) {\n+      return new ArrowFlightJdbcIntervalVectorAccessor(((IntervalYearVector) vector), getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof StructVector) {\n+      return new ArrowFlightJdbcStructVectorAccessor((StructVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof MapVector) {\n+      return new ArrowFlightJdbcMapVectorAccessor((MapVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof ListVector) {\n+      return new ArrowFlightJdbcListVectorAccessor((ListVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof LargeListVector) {\n+      return new ArrowFlightJdbcLargeListVectorAccessor((LargeListVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof FixedSizeListVector) {\n+      return new ArrowFlightJdbcFixedSizeListVectorAccessor((FixedSizeListVector) vector,\n+          getCurrentRow, setCursorWasNull);\n+    } else if (vector instanceof UnionVector) {\n+      return new ArrowFlightJdbcUnionVectorAccessor((UnionVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof DenseUnionVector) {\n+      return new ArrowFlightJdbcDenseUnionVectorAccessor((DenseUnionVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof NullVector || vector == null) {\n\nReview comment:\n       I mean specifically `null`, not `NullVector`, sorry\n\n##########\nFile path: java/flight/flight-jdbc-driver/src/main/java/org/apache/arrow/driver/jdbc/accessor/ArrowFlightJdbcAccessorFactory.java\n##########\n@@ -0,0 +1,215 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.driver.jdbc.accessor;\n+\n+import java.util.function.IntSupplier;\n+\n+import org.apache.arrow.driver.jdbc.accessor.impl.ArrowFlightJdbcNullVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.binary.ArrowFlightJdbcBinaryVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.calendar.ArrowFlightJdbcDateVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.calendar.ArrowFlightJdbcDurationVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.calendar.ArrowFlightJdbcIntervalVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.calendar.ArrowFlightJdbcTimeStampVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.calendar.ArrowFlightJdbcTimeVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.complex.ArrowFlightJdbcDenseUnionVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.complex.ArrowFlightJdbcFixedSizeListVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.complex.ArrowFlightJdbcLargeListVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.complex.ArrowFlightJdbcListVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.complex.ArrowFlightJdbcMapVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.complex.ArrowFlightJdbcStructVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.complex.ArrowFlightJdbcUnionVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.numeric.ArrowFlightJdbcBaseIntVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.numeric.ArrowFlightJdbcBitVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.numeric.ArrowFlightJdbcDecimalVectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.numeric.ArrowFlightJdbcFloat4VectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.numeric.ArrowFlightJdbcFloat8VectorAccessor;\n+import org.apache.arrow.driver.jdbc.accessor.impl.text.ArrowFlightJdbcVarCharVectorAccessor;\n+import org.apache.arrow.vector.BigIntVector;\n+import org.apache.arrow.vector.BitVector;\n+import org.apache.arrow.vector.DateDayVector;\n+import org.apache.arrow.vector.DateMilliVector;\n+import org.apache.arrow.vector.Decimal256Vector;\n+import org.apache.arrow.vector.DecimalVector;\n+import org.apache.arrow.vector.DurationVector;\n+import org.apache.arrow.vector.FixedSizeBinaryVector;\n+import org.apache.arrow.vector.Float4Vector;\n+import org.apache.arrow.vector.Float8Vector;\n+import org.apache.arrow.vector.IntVector;\n+import org.apache.arrow.vector.IntervalDayVector;\n+import org.apache.arrow.vector.IntervalYearVector;\n+import org.apache.arrow.vector.LargeVarBinaryVector;\n+import org.apache.arrow.vector.LargeVarCharVector;\n+import org.apache.arrow.vector.NullVector;\n+import org.apache.arrow.vector.SmallIntVector;\n+import org.apache.arrow.vector.TimeMicroVector;\n+import org.apache.arrow.vector.TimeMilliVector;\n+import org.apache.arrow.vector.TimeNanoVector;\n+import org.apache.arrow.vector.TimeSecVector;\n+import org.apache.arrow.vector.TimeStampVector;\n+import org.apache.arrow.vector.TinyIntVector;\n+import org.apache.arrow.vector.UInt1Vector;\n+import org.apache.arrow.vector.UInt2Vector;\n+import org.apache.arrow.vector.UInt4Vector;\n+import org.apache.arrow.vector.UInt8Vector;\n+import org.apache.arrow.vector.ValueVector;\n+import org.apache.arrow.vector.VarBinaryVector;\n+import org.apache.arrow.vector.VarCharVector;\n+import org.apache.arrow.vector.complex.DenseUnionVector;\n+import org.apache.arrow.vector.complex.FixedSizeListVector;\n+import org.apache.arrow.vector.complex.LargeListVector;\n+import org.apache.arrow.vector.complex.ListVector;\n+import org.apache.arrow.vector.complex.MapVector;\n+import org.apache.arrow.vector.complex.StructVector;\n+import org.apache.arrow.vector.complex.UnionVector;\n+\n+/**\n+ * Factory to instantiate the accessors.\n+ */\n+public class ArrowFlightJdbcAccessorFactory {\n+\n+  /**\n+   * Create an accessor according to the its type.\n+   *\n+   * @param vector        an instance of an arrow vector.\n+   * @param getCurrentRow a supplier to check which row is being accessed.\n+   * @return an instance of one of the accessors.\n+   */\n+  public static ArrowFlightJdbcAccessor createAccessor(ValueVector vector,\n+                                                       IntSupplier getCurrentRow,\n+                                                       WasNullConsumer setCursorWasNull) {\n+    if (vector instanceof UInt1Vector) {\n+      return new ArrowFlightJdbcBaseIntVectorAccessor((UInt1Vector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof UInt2Vector) {\n+      return new ArrowFlightJdbcBaseIntVectorAccessor((UInt2Vector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof UInt4Vector) {\n+      return new ArrowFlightJdbcBaseIntVectorAccessor((UInt4Vector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof UInt8Vector) {\n+      return new ArrowFlightJdbcBaseIntVectorAccessor((UInt8Vector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof TinyIntVector) {\n+      return new ArrowFlightJdbcBaseIntVectorAccessor((TinyIntVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof SmallIntVector) {\n+      return new ArrowFlightJdbcBaseIntVectorAccessor((SmallIntVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof IntVector) {\n+      return new ArrowFlightJdbcBaseIntVectorAccessor((IntVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof BigIntVector) {\n+      return new ArrowFlightJdbcBaseIntVectorAccessor((BigIntVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof Float4Vector) {\n+      return new ArrowFlightJdbcFloat4VectorAccessor((Float4Vector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof Float8Vector) {\n+      return new ArrowFlightJdbcFloat8VectorAccessor((Float8Vector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof BitVector) {\n+      return new ArrowFlightJdbcBitVectorAccessor((BitVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof DecimalVector) {\n+      return new ArrowFlightJdbcDecimalVectorAccessor((DecimalVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof Decimal256Vector) {\n+      return new ArrowFlightJdbcDecimalVectorAccessor((Decimal256Vector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof VarBinaryVector) {\n+      return new ArrowFlightJdbcBinaryVectorAccessor((VarBinaryVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof LargeVarBinaryVector) {\n+      return new ArrowFlightJdbcBinaryVectorAccessor((LargeVarBinaryVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof FixedSizeBinaryVector) {\n+      return new ArrowFlightJdbcBinaryVectorAccessor((FixedSizeBinaryVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof TimeStampVector) {\n+      return new ArrowFlightJdbcTimeStampVectorAccessor((TimeStampVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof TimeNanoVector) {\n+      return new ArrowFlightJdbcTimeVectorAccessor((TimeNanoVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof TimeMicroVector) {\n+      return new ArrowFlightJdbcTimeVectorAccessor((TimeMicroVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof TimeMilliVector) {\n+      return new ArrowFlightJdbcTimeVectorAccessor((TimeMilliVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof TimeSecVector) {\n+      return new ArrowFlightJdbcTimeVectorAccessor((TimeSecVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof DateDayVector) {\n+      return new ArrowFlightJdbcDateVectorAccessor(((DateDayVector) vector), getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof DateMilliVector) {\n+      return new ArrowFlightJdbcDateVectorAccessor(((DateMilliVector) vector), getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof VarCharVector) {\n+      return new ArrowFlightJdbcVarCharVectorAccessor((VarCharVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof LargeVarCharVector) {\n+      return new ArrowFlightJdbcVarCharVectorAccessor((LargeVarCharVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof DurationVector) {\n+      return new ArrowFlightJdbcDurationVectorAccessor((DurationVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof IntervalDayVector) {\n+      return new ArrowFlightJdbcIntervalVectorAccessor(((IntervalDayVector) vector), getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof IntervalYearVector) {\n+      return new ArrowFlightJdbcIntervalVectorAccessor(((IntervalYearVector) vector), getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof StructVector) {\n+      return new ArrowFlightJdbcStructVectorAccessor((StructVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof MapVector) {\n+      return new ArrowFlightJdbcMapVectorAccessor((MapVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof ListVector) {\n+      return new ArrowFlightJdbcListVectorAccessor((ListVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof LargeListVector) {\n+      return new ArrowFlightJdbcLargeListVectorAccessor((LargeListVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof FixedSizeListVector) {\n+      return new ArrowFlightJdbcFixedSizeListVectorAccessor((FixedSizeListVector) vector,\n+          getCurrentRow, setCursorWasNull);\n+    } else if (vector instanceof UnionVector) {\n+      return new ArrowFlightJdbcUnionVectorAccessor((UnionVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof DenseUnionVector) {\n+      return new ArrowFlightJdbcDenseUnionVectorAccessor((DenseUnionVector) vector, getCurrentRow,\n+          setCursorWasNull);\n+    } else if (vector instanceof NullVector || vector == null) {\n+      return new ArrowFlightJdbcNullVectorAccessor(setCursorWasNull);\n+    }\n+\n+    throw new UnsupportedOperationException();\n\nReview comment:\n       This doesn't seem to have changed\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-11T21:34:18.918+0000",
                    "updated": "2022-03-11T21:34:18.918+0000",
                    "started": "2022-03-11T21:34:18.918+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "740303",
                    "issueId": "13424739"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13424739/worklog/743329",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vfraga commented on a change in pull request #12254:\nURL: https://github.com/apache/arrow/pull/12254#discussion_r829355871\n\n\n\n##########\nFile path: java/flight/flight-jdbc-driver/src/main/java/org/apache/arrow/driver/jdbc/ArrowFlightJdbcFactory.java\n##########\n@@ -0,0 +1,124 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.driver.jdbc;\n+\n+import java.sql.ResultSetMetaData;\n+import java.sql.SQLException;\n+import java.util.Properties;\n+import java.util.TimeZone;\n+\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.calcite.avatica.AvaticaConnection;\n+import org.apache.calcite.avatica.AvaticaFactory;\n+import org.apache.calcite.avatica.AvaticaResultSetMetaData;\n+import org.apache.calcite.avatica.AvaticaSpecificDatabaseMetaData;\n+import org.apache.calcite.avatica.AvaticaStatement;\n+import org.apache.calcite.avatica.Meta;\n+import org.apache.calcite.avatica.QueryState;\n+import org.apache.calcite.avatica.UnregisteredDriver;\n+\n+/**\n+ * Factory for the Arrow Flight JDBC Driver.\n+ */\n+public class ArrowFlightJdbcFactory implements AvaticaFactory {\n+  private final int major;\n+  private final int minor;\n+\n+  // This need to be public so Avatica can call this constructor\n+  public ArrowFlightJdbcFactory() {\n+    this(4, 1);\n+  }\n+\n+  private ArrowFlightJdbcFactory(final int major, final int minor) {\n+    this.major = major;\n+    this.minor = minor;\n+  }\n+\n+  @Override\n+  public AvaticaConnection newConnection(final UnregisteredDriver driver,\n+                                         final AvaticaFactory factory,\n+                                         final String url,\n+                                         final Properties info) throws SQLException {\n+    return ArrowFlightConnection.createNewConnection(\n+        (ArrowFlightJdbcDriver) driver,\n+        factory,\n+        url,\n+        info,\n+        new RootAllocator(Long.MAX_VALUE));\n\nReview comment:\n       There would be no wait to close the parent RootAllocator.\n\n##########\nFile path: java/flight/flight-jdbc-driver/src/main/java/org/apache/arrow/driver/jdbc/ArrowFlightJdbcFactory.java\n##########\n@@ -0,0 +1,124 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.driver.jdbc;\n+\n+import java.sql.ResultSetMetaData;\n+import java.sql.SQLException;\n+import java.util.Properties;\n+import java.util.TimeZone;\n+\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.calcite.avatica.AvaticaConnection;\n+import org.apache.calcite.avatica.AvaticaFactory;\n+import org.apache.calcite.avatica.AvaticaResultSetMetaData;\n+import org.apache.calcite.avatica.AvaticaSpecificDatabaseMetaData;\n+import org.apache.calcite.avatica.AvaticaStatement;\n+import org.apache.calcite.avatica.Meta;\n+import org.apache.calcite.avatica.QueryState;\n+import org.apache.calcite.avatica.UnregisteredDriver;\n+\n+/**\n+ * Factory for the Arrow Flight JDBC Driver.\n+ */\n+public class ArrowFlightJdbcFactory implements AvaticaFactory {\n+  private final int major;\n+  private final int minor;\n+\n+  // This need to be public so Avatica can call this constructor\n+  public ArrowFlightJdbcFactory() {\n+    this(4, 1);\n+  }\n+\n+  private ArrowFlightJdbcFactory(final int major, final int minor) {\n+    this.major = major;\n+    this.minor = minor;\n+  }\n+\n+  @Override\n+  public AvaticaConnection newConnection(final UnregisteredDriver driver,\n+                                         final AvaticaFactory factory,\n+                                         final String url,\n+                                         final Properties info) throws SQLException {\n+    return ArrowFlightConnection.createNewConnection(\n+        (ArrowFlightJdbcDriver) driver,\n+        factory,\n+        url,\n+        info,\n+        new RootAllocator(Long.MAX_VALUE));\n\nReview comment:\n       There would be no way of closing the parent RootAllocator, I think.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-17T18:12:01.707+0000",
                    "updated": "2022-03-17T18:12:01.707+0000",
                    "started": "2022-03-17T18:12:01.706+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "743329",
                    "issueId": "13424739"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13424739/worklog/743710",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #12254:\nURL: https://github.com/apache/arrow/pull/12254#discussion_r829963396\n\n\n\n##########\nFile path: java/flight/flight-jdbc-driver/src/main/java/org/apache/arrow/driver/jdbc/ArrowFlightJdbcFactory.java\n##########\n@@ -0,0 +1,124 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.driver.jdbc;\n+\n+import java.sql.ResultSetMetaData;\n+import java.sql.SQLException;\n+import java.util.Properties;\n+import java.util.TimeZone;\n+\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.calcite.avatica.AvaticaConnection;\n+import org.apache.calcite.avatica.AvaticaFactory;\n+import org.apache.calcite.avatica.AvaticaResultSetMetaData;\n+import org.apache.calcite.avatica.AvaticaSpecificDatabaseMetaData;\n+import org.apache.calcite.avatica.AvaticaStatement;\n+import org.apache.calcite.avatica.Meta;\n+import org.apache.calcite.avatica.QueryState;\n+import org.apache.calcite.avatica.UnregisteredDriver;\n+\n+/**\n+ * Factory for the Arrow Flight JDBC Driver.\n+ */\n+public class ArrowFlightJdbcFactory implements AvaticaFactory {\n+  private final int major;\n+  private final int minor;\n+\n+  // This need to be public so Avatica can call this constructor\n+  public ArrowFlightJdbcFactory() {\n+    this(4, 1);\n+  }\n+\n+  private ArrowFlightJdbcFactory(final int major, final int minor) {\n+    this.major = major;\n+    this.minor = minor;\n+  }\n+\n+  @Override\n+  public AvaticaConnection newConnection(final UnregisteredDriver driver,\n+                                         final AvaticaFactory factory,\n+                                         final String url,\n+                                         final Properties info) throws SQLException {\n+    return ArrowFlightConnection.createNewConnection(\n+        (ArrowFlightJdbcDriver) driver,\n+        factory,\n+        url,\n+        info,\n+        new RootAllocator(Long.MAX_VALUE));\n\nReview comment:\n       Can we make the factory itself AutoCloseable? And then we can allow the user to pass in the BufferAllocator to use. Or do the Avatica interfaces make that impossible?\r\n   \r\n   If so - then maybe we can have ArrowFlightConnection create a child allocator to use upon construction?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-18T12:42:11.935+0000",
                    "updated": "2022-03-18T12:42:11.935+0000",
                    "started": "2022-03-18T12:42:11.935+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "743710",
                    "issueId": "13424739"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13424739/worklog/743869",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vfraga commented on a change in pull request #12254:\nURL: https://github.com/apache/arrow/pull/12254#discussion_r829355871\n\n\n\n##########\nFile path: java/flight/flight-jdbc-driver/src/main/java/org/apache/arrow/driver/jdbc/ArrowFlightJdbcFactory.java\n##########\n@@ -0,0 +1,124 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.driver.jdbc;\n+\n+import java.sql.ResultSetMetaData;\n+import java.sql.SQLException;\n+import java.util.Properties;\n+import java.util.TimeZone;\n+\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.calcite.avatica.AvaticaConnection;\n+import org.apache.calcite.avatica.AvaticaFactory;\n+import org.apache.calcite.avatica.AvaticaResultSetMetaData;\n+import org.apache.calcite.avatica.AvaticaSpecificDatabaseMetaData;\n+import org.apache.calcite.avatica.AvaticaStatement;\n+import org.apache.calcite.avatica.Meta;\n+import org.apache.calcite.avatica.QueryState;\n+import org.apache.calcite.avatica.UnregisteredDriver;\n+\n+/**\n+ * Factory for the Arrow Flight JDBC Driver.\n+ */\n+public class ArrowFlightJdbcFactory implements AvaticaFactory {\n+  private final int major;\n+  private final int minor;\n+\n+  // This need to be public so Avatica can call this constructor\n+  public ArrowFlightJdbcFactory() {\n+    this(4, 1);\n+  }\n+\n+  private ArrowFlightJdbcFactory(final int major, final int minor) {\n+    this.major = major;\n+    this.minor = minor;\n+  }\n+\n+  @Override\n+  public AvaticaConnection newConnection(final UnregisteredDriver driver,\n+                                         final AvaticaFactory factory,\n+                                         final String url,\n+                                         final Properties info) throws SQLException {\n+    return ArrowFlightConnection.createNewConnection(\n+        (ArrowFlightJdbcDriver) driver,\n+        factory,\n+        url,\n+        info,\n+        new RootAllocator(Long.MAX_VALUE));\n\nReview comment:\n       There would be no wait to close the parent RootAllocator.\n\n##########\nFile path: java/flight/flight-jdbc-driver/src/main/java/org/apache/arrow/driver/jdbc/ArrowFlightJdbcFactory.java\n##########\n@@ -0,0 +1,124 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.driver.jdbc;\n+\n+import java.sql.ResultSetMetaData;\n+import java.sql.SQLException;\n+import java.util.Properties;\n+import java.util.TimeZone;\n+\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.calcite.avatica.AvaticaConnection;\n+import org.apache.calcite.avatica.AvaticaFactory;\n+import org.apache.calcite.avatica.AvaticaResultSetMetaData;\n+import org.apache.calcite.avatica.AvaticaSpecificDatabaseMetaData;\n+import org.apache.calcite.avatica.AvaticaStatement;\n+import org.apache.calcite.avatica.Meta;\n+import org.apache.calcite.avatica.QueryState;\n+import org.apache.calcite.avatica.UnregisteredDriver;\n+\n+/**\n+ * Factory for the Arrow Flight JDBC Driver.\n+ */\n+public class ArrowFlightJdbcFactory implements AvaticaFactory {\n+  private final int major;\n+  private final int minor;\n+\n+  // This need to be public so Avatica can call this constructor\n+  public ArrowFlightJdbcFactory() {\n+    this(4, 1);\n+  }\n+\n+  private ArrowFlightJdbcFactory(final int major, final int minor) {\n+    this.major = major;\n+    this.minor = minor;\n+  }\n+\n+  @Override\n+  public AvaticaConnection newConnection(final UnregisteredDriver driver,\n+                                         final AvaticaFactory factory,\n+                                         final String url,\n+                                         final Properties info) throws SQLException {\n+    return ArrowFlightConnection.createNewConnection(\n+        (ArrowFlightJdbcDriver) driver,\n+        factory,\n+        url,\n+        info,\n+        new RootAllocator(Long.MAX_VALUE));\n\nReview comment:\n       There would be no way of closing the parent RootAllocator, I think.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-18T14:43:37.131+0000",
                    "updated": "2022-03-18T14:43:37.131+0000",
                    "started": "2022-03-18T14:43:37.131+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "743869",
                    "issueId": "13424739"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13424739/worklog/743879",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #12254:\nURL: https://github.com/apache/arrow/pull/12254#discussion_r829963396\n\n\n\n##########\nFile path: java/flight/flight-jdbc-driver/src/main/java/org/apache/arrow/driver/jdbc/ArrowFlightJdbcFactory.java\n##########\n@@ -0,0 +1,124 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.driver.jdbc;\n+\n+import java.sql.ResultSetMetaData;\n+import java.sql.SQLException;\n+import java.util.Properties;\n+import java.util.TimeZone;\n+\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.calcite.avatica.AvaticaConnection;\n+import org.apache.calcite.avatica.AvaticaFactory;\n+import org.apache.calcite.avatica.AvaticaResultSetMetaData;\n+import org.apache.calcite.avatica.AvaticaSpecificDatabaseMetaData;\n+import org.apache.calcite.avatica.AvaticaStatement;\n+import org.apache.calcite.avatica.Meta;\n+import org.apache.calcite.avatica.QueryState;\n+import org.apache.calcite.avatica.UnregisteredDriver;\n+\n+/**\n+ * Factory for the Arrow Flight JDBC Driver.\n+ */\n+public class ArrowFlightJdbcFactory implements AvaticaFactory {\n+  private final int major;\n+  private final int minor;\n+\n+  // This need to be public so Avatica can call this constructor\n+  public ArrowFlightJdbcFactory() {\n+    this(4, 1);\n+  }\n+\n+  private ArrowFlightJdbcFactory(final int major, final int minor) {\n+    this.major = major;\n+    this.minor = minor;\n+  }\n+\n+  @Override\n+  public AvaticaConnection newConnection(final UnregisteredDriver driver,\n+                                         final AvaticaFactory factory,\n+                                         final String url,\n+                                         final Properties info) throws SQLException {\n+    return ArrowFlightConnection.createNewConnection(\n+        (ArrowFlightJdbcDriver) driver,\n+        factory,\n+        url,\n+        info,\n+        new RootAllocator(Long.MAX_VALUE));\n\nReview comment:\n       Can we make the factory itself AutoCloseable? And then we can allow the user to pass in the BufferAllocator to use. Or do the Avatica interfaces make that impossible?\r\n   \r\n   If so - then maybe we can have ArrowFlightConnection create a child allocator to use upon construction?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-18T14:44:27.663+0000",
                    "updated": "2022-03-18T14:44:27.663+0000",
                    "started": "2022-03-18T14:44:27.663+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "743879",
                    "issueId": "13424739"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 33600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@391f1ce6[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@26f0d787[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6525ccba[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@45497376[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@49bc0dfe[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@d03eb3e[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4688b638[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@48d4bf5c[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@61ae9845[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@73e6c555[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@705c9467[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@1d9feb6f[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 33600,
        "customfield_12312520": null,
        "customfield_12312521": "2022-01-25 16:48:09.0",
        "customfield_12314422": null,
        "customfield_12314421": [
            "java"
        ],
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-09-30T12:26:07.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-15452/watchers",
            "watchCount": 4,
            "isWatching": false
        },
        "created": "2022-01-25T16:48:09.000+0000",
        "updated": "2022-09-30T12:26:07.000+0000",
        "timeoriginalestimate": null,
        "description": "This implements a JDBC driver able to communicate to Flight SQL sources.\r\n\r\nSo far this covers:\r\n- Metadata retrieval by DatabaseMetadata, ResultSetMetadata, etc.\r\n- Query execution by statements and prepared statements\r\n\r\nYet to be done:\r\n- Parameter binding on prepared statements",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "9h 20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 33600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[FlightRPC][Java] JDBC driver for Flight SQL",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [],
            "maxResults": 0,
            "total": 0,
            "startAt": 0
        },
        "customfield_12311820": "0|z0yxuo:",
        "customfield_12314139": null
    }
}