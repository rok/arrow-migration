{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13368001",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368001",
    "key": "ARROW-12104",
    "fields": {
        "parent": {
            "id": "13286806",
            "key": "ARROW-7905",
            "self": "https://issues.apache.org/jira/rest/api/2/issue/13286806",
            "fields": {
                "summary": "[Go][Parquet] Port the C++ Parquet implementation to Go",
                "status": {
                    "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                    "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                    "name": "Resolved",
                    "id": "5",
                    "statusCategory": {
                        "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                        "id": 3,
                        "key": "done",
                        "colorName": "green",
                        "name": "Done"
                    }
                },
                "priority": {
                    "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
                    "name": "Minor",
                    "id": "4"
                },
                "issuetype": {
                    "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                    "id": "2",
                    "description": "A new feature of the product, which has yet to be developed.",
                    "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                    "name": "New Feature",
                    "subtask": false,
                    "avatarId": 21141
                }
            }
        },
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12349493",
                "id": "12349493",
                "description": "",
                "name": "4.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-04-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=zeroshade",
            "name": "zeroshade",
            "key": "zeroshade",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=zeroshade&avatarId=31230",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=zeroshade&avatarId=31230",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=zeroshade&avatarId=31230",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=zeroshade&avatarId=31230"
            },
            "displayName": "Matthew Topol",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333772",
                "id": "12333772",
                "name": "Go"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=zeroshade",
            "name": "zeroshade",
            "key": "zeroshade",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=zeroshade&avatarId=31230",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=zeroshade&avatarId=31230",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=zeroshade&avatarId=31230",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=zeroshade&avatarId=31230"
            },
            "displayName": "Matthew Topol",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=zeroshade",
            "name": "zeroshade",
            "key": "zeroshade",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=zeroshade&avatarId=31230",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=zeroshade&avatarId=31230",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=zeroshade&avatarId=31230",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=zeroshade&avatarId=31230"
            },
            "displayName": "Matthew Topol",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 24600,
            "total": 24600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 24600,
            "total": 24600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-12104/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 41,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368001/worklog/572875",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade opened a new pull request #9817:\nURL: https://github.com/apache/arrow/pull/9817\n\n\n   Following up from #9671 this is the next chunk of ported code consisting of the generated Thrift Code and the utilities for supporting Encryption, Compression and Reader/Writer Property handling.\r\n   \r\n   Thankfully this is much smaller than the previous chunk, and so should be much easier to review and read.\r\n   \r\n   Tagging @emkornfield @sbinet @nickpoorman @wesm for attention\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-26T20:58:20.505+0000",
                    "updated": "2021-03-26T20:58:20.505+0000",
                    "started": "2021-03-26T20:58:20.505+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "572875",
                    "issueId": "13368001"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368001/worklog/572876",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #9817:\nURL: https://github.com/apache/arrow/pull/9817#issuecomment-808504321\n\n\n   https://issues.apache.org/jira/browse/ARROW-12104\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-26T20:58:33.877+0000",
                    "updated": "2021-03-26T20:58:33.877+0000",
                    "started": "2021-03-26T20:58:33.877+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "572876",
                    "issueId": "13368001"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368001/worklog/574268",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "WilliamWhispell commented on a change in pull request #9817:\nURL: https://github.com/apache/arrow/pull/9817#discussion_r602609760\n\n\n\n##########\nFile path: go/parquet/compress/brotli.go\n##########\n@@ -0,0 +1,112 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package compress\n+\n+import (\n+\t\"bytes\"\n+\t\"io\"\n+\t\"io/ioutil\"\n+\n+\t\"github.com/andybalholm/brotli\"\n+)\n+\n+type brotliCodec struct{}\n+\n+func (brotliCodec) NewReader(r io.Reader) io.ReadCloser {\n+\treturn ioutil.NopCloser(brotli.NewReader(r))\n+}\n+\n+func (b brotliCodec) EncodeLevel(dst, src []byte, level int) []byte {\n+\tif level == DefaultCompressionLevel {\n+\t\tlevel = brotli.DefaultCompression\n+\t}\n+\n+\tmaxlen := int(b.CompressBound(int64(len(src))))\n+\tif dst == nil || cap(dst) < maxlen {\n+\t\tdst = make([]byte, 0, maxlen)\n+\t}\n+\tbuf := bytes.NewBuffer(dst[:0])\n+\tw := brotli.NewWriterLevel(buf, level)\n+\t_, err := w.Write(src)\n+\tif err != nil {\n+\t\tpanic(err)\n+\t}\n+\tif err := w.Close(); err != nil {\n+\t\tpanic(err)\n+\t}\n+\treturn buf.Bytes()\n+}\n+\n+func (b brotliCodec) Encode(dst, src []byte) []byte {\n+\treturn b.EncodeLevel(dst, src, brotli.DefaultCompression)\n+}\n+\n+func (brotliCodec) Decode(dst, src []byte) []byte {\n+\trdr := brotli.NewReader(bytes.NewReader(src))\n+\tif dst != nil {\n+\t\tvar (\n+\t\t\tsofar       = 0\n+\t\t\tn           = -1\n+\t\t\terr   error = nil\n+\t\t)\n+\t\tfor n != 0 && err == nil {\n+\t\t\tn, err = rdr.Read(dst[sofar:])\n+\t\t\tsofar += n\n+\t\t}\n+\t\tif err != nil && err != io.EOF {\n+\t\t\tpanic(err)\n\nReview comment:\n       Why panic and not return an error?\n\n##########\nFile path: go/parquet/compress/compress.go\n##########\n@@ -0,0 +1,150 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+// Package compress contains the interfaces and implementations for handling compression/decompression\n+// of parquet data at the column levels.\n+package compress\n+\n+import (\n+\t\"compress/flate\"\n+\t\"io\"\n+\t\"io/ioutil\"\n+\n+\t\"github.com/apache/arrow/go/parquet/internal/gen-go/parquet\"\n+)\n+\n+// Compression is an alias to the thrift compression codec enum type for easy use\n+type Compression parquet.CompressionCodec\n+\n+func (c Compression) String() string {\n+\treturn parquet.CompressionCodec(c).String()\n+}\n+\n+// DefaultCompressionLevel will use flate.DefaultCompression since many of the compression libraries\n+// use that to denote \"use the default\".\n+const DefaultCompressionLevel = flate.DefaultCompression\n+\n+// Codecs is a useful struct to provide namespaced enum values to use for specifying the compression type to use\n+// which make for easy internal swapping between them and the thrift enum since they are initialized to the same\n+// constant values.\n+var Codecs = struct {\n+\tUncompressed Compression\n+\tSnappy       Compression\n+\tGzip         Compression\n+\tLzo          Compression\n+\tBrotli       Compression\n+\tLz4          Compression\n+\tZstd         Compression\n+}{\n+\tUncompressed: Compression(parquet.CompressionCodec_UNCOMPRESSED),\n+\tSnappy:       Compression(parquet.CompressionCodec_SNAPPY),\n+\tGzip:         Compression(parquet.CompressionCodec_GZIP),\n+\tLzo:          Compression(parquet.CompressionCodec_LZO),\n+\tBrotli:       Compression(parquet.CompressionCodec_BROTLI),\n+\tLz4:          Compression(parquet.CompressionCodec_LZ4),\n+\tZstd:         Compression(parquet.CompressionCodec_ZSTD),\n+}\n+\n+// Codec is an interface which is implemented for each compression type in order to make the interactions easy to\n+// implement. Most consumers won't be calling GetCodec directly.\n+type Codec interface {\n+\t// NewReader provides a reader that wraps a stream with compressed data to stream the uncompressed data\n+\tNewReader(io.Reader) io.ReadCloser\n+\t// NewWriter provides a wrapper around a write stream to compress data before writing it.\n+\tNewWriter(io.Writer) io.WriteCloser\n+\t// NewWriterLevel is like NewWrapper but allows specifying the compression level\n+\tNewWriterLevel(io.Writer, int) (io.WriteCloser, error)\n+\t// Encode encodes a block of data given by src and returns the compressed block. dst needs to be either nil\n+\t// or sized large enough to fit the compressed block (use CompressBound to allocate). dst and src should not\n+\t// overlap since some of the compression types don't allow it.\n+\t//\n+\t// The returned slice *might* be a slice of dst if it was able to fit the whole compressed data in it.\n+\tEncode(dst, src []byte) []byte\n+\t// EncodeLevel is like Encode, but specifies a particular encoding level instead of the default.\n+\tEncodeLevel(dst, src []byte, level int) []byte\n+\t// CompressBound returns the boundary of maximum size of compressed data under the chosen codec.\n+\tCompressBound(int64) int64\n+\t// Decode is for decoding a single block rather than a stream, like with Encode, dst must be either nil or\n+\t// sized large enough to accommodate the uncompressed data and should not overlap with src.\n+\t//\n+\t// the returned slice *might* be a slice of dst.\n+\tDecode(dst, src []byte) []byte\n+}\n+\n+var codecs = map[Compression]Codec{}\n+\n+type nocodec struct{}\n+\n+func (nocodec) NewReader(r io.Reader) io.ReadCloser {\n+\tret, ok := r.(io.ReadCloser)\n+\tif !ok {\n+\t\treturn ioutil.NopCloser(r)\n+\t}\n+\treturn ret\n+}\n+\n+func (nocodec) Decode(dst, src []byte) []byte {\n+\tif dst != nil {\n+\t\tcopy(dst, src)\n+\t}\n+\treturn dst\n+}\n+\n+type writerNopCloser struct {\n+\tio.Writer\n+}\n+\n+func (writerNopCloser) Close() error {\n+\treturn nil\n+}\n+\n+func (nocodec) Encode(dst, src []byte) []byte {\n+\tcopy(dst, src)\n+\treturn dst\n+}\n+\n+func (nocodec) EncodeLevel(dst, src []byte, _ int) []byte {\n+\tcopy(dst, src)\n+\treturn dst\n+}\n+\n+func (nocodec) NewWriter(w io.Writer) io.WriteCloser {\n+\tret, ok := w.(io.WriteCloser)\n+\tif !ok {\n+\t\treturn writerNopCloser{w}\n+\t}\n+\treturn ret\n+}\n+\n+func (n nocodec) NewWriterLevel(w io.Writer, _ int) (io.WriteCloser, error) {\n+\treturn n.NewWriter(w), nil\n+}\n+\n+func (nocodec) CompressBound(len int64) int64 { return len }\n+\n+func init() {\n+\tcodecs[Codecs.Uncompressed] = nocodec{}\n+}\n+\n+// GetCodec returns a Codec interface for the requested Compression type\n+func GetCodec(typ Compression) Codec {\n+\tret, ok := codecs[typ]\n+\tif !ok {\n+\t\t// return codecs[Codecs.Uncompressed]\n\nReview comment:\n       does this require further thought on defaults? or should the comment go?\n\n##########\nFile path: go/parquet/compress/compress_test.go\n##########\n@@ -0,0 +1,128 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package compress_test\n+\n+import (\n+\t\"bytes\"\n+\t\"io/ioutil\"\n+\t\"math/rand\"\n+\t\"testing\"\n+\n+\t\"github.com/apache/arrow/go/parquet/compress\"\n+\t\"github.com/stretchr/testify/assert\"\n+)\n+\n+const (\n+\tRandomDataSize       = 3 * 1024 * 1024\n+\tCompressibleDataSize = 8 * 1024 * 1024\n+)\n+\n+func makeRandomData(size int) []byte {\n+\tret := make([]byte, size)\n+\tr := rand.New(rand.NewSource(1234))\n+\tr.Read(ret)\n+\treturn ret\n+}\n+\n+func makeCompressibleData(size int) []byte {\n+\tconst base = \"Apache Arrow is a cross-language development platform for in-memory data\"\n+\n+\tdata := make([]byte, size)\n+\tn := copy(data, base)\n+\tfor i := n; i < len(data); i *= 2 {\n+\t\tcopy(data[i:], data[:i])\n+\t}\n+\treturn data\n+}\n+\n+func TestCompressDataOneShot(t *testing.T) {\n+\ttests := []struct {\n+\t\tc compress.Compression\n+\t}{\n+\t\t{compress.Codecs.Uncompressed},\n+\t\t{compress.Codecs.Snappy},\n+\t\t{compress.Codecs.Gzip},\n+\t\t// {compress.Codecs.Lzo},\n\nReview comment:\n       is this for a later change?\n\n##########\nFile path: go/parquet/compress/compress_test.go\n##########\n@@ -0,0 +1,128 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package compress_test\n+\n+import (\n+\t\"bytes\"\n+\t\"io/ioutil\"\n+\t\"math/rand\"\n+\t\"testing\"\n+\n+\t\"github.com/apache/arrow/go/parquet/compress\"\n+\t\"github.com/stretchr/testify/assert\"\n+)\n+\n+const (\n+\tRandomDataSize       = 3 * 1024 * 1024\n+\tCompressibleDataSize = 8 * 1024 * 1024\n+)\n+\n+func makeRandomData(size int) []byte {\n+\tret := make([]byte, size)\n+\tr := rand.New(rand.NewSource(1234))\n+\tr.Read(ret)\n+\treturn ret\n+}\n+\n+func makeCompressibleData(size int) []byte {\n+\tconst base = \"Apache Arrow is a cross-language development platform for in-memory data\"\n+\n+\tdata := make([]byte, size)\n+\tn := copy(data, base)\n+\tfor i := n; i < len(data); i *= 2 {\n+\t\tcopy(data[i:], data[:i])\n+\t}\n+\treturn data\n+}\n+\n+func TestCompressDataOneShot(t *testing.T) {\n+\ttests := []struct {\n+\t\tc compress.Compression\n+\t}{\n+\t\t{compress.Codecs.Uncompressed},\n+\t\t{compress.Codecs.Snappy},\n+\t\t{compress.Codecs.Gzip},\n+\t\t// {compress.Codecs.Lzo},\n+\t\t{compress.Codecs.Brotli},\n+\t\t{compress.Codecs.Lz4},\n+\t\t{compress.Codecs.Zstd},\n+\t}\n+\n+\tfor _, tt := range tests {\n+\t\tt.Run(tt.c.String(), func(t *testing.T) {\n+\t\t\tcodec := compress.GetCodec(tt.c)\n+\t\t\tdata := makeCompressibleData(CompressibleDataSize)\n+\n+\t\t\tbuf := make([]byte, codec.CompressBound(int64(len(data))))\n+\t\t\tcompressed := codec.Encode(buf, data)\n+\t\t\tassert.Same(t, &buf[0], &compressed[0])\n+\n+\t\t\tout := make([]byte, len(data))\n+\t\t\tuncompressed := codec.Decode(out, compressed)\n+\t\t\tassert.Same(t, &out[0], &uncompressed[0])\n+\n+\t\t\tassert.Exactly(t, data, uncompressed)\n+\t\t})\n+\t}\n+}\n+\n+func TestCompressReaderWriter(t *testing.T) {\n+\ttests := []struct {\n+\t\tc compress.Compression\n+\t}{\n+\t\t{compress.Codecs.Uncompressed},\n+\t\t{compress.Codecs.Snappy},\n+\t\t{compress.Codecs.Gzip},\n+\t\t// {compress.Codecs.Lzo},\n+\t\t{compress.Codecs.Brotli},\n+\t\t{compress.Codecs.Lz4},\n+\t\t{compress.Codecs.Zstd},\n+\t}\n+\n+\tfor _, tt := range tests {\n+\t\tt.Run(tt.c.String(), func(t *testing.T) {\n+\t\t\tvar buf bytes.Buffer\n+\t\t\tcodec := compress.GetCodec(tt.c)\n+\t\t\tdata := makeRandomData(RandomDataSize)\n+\n+\t\t\twr := codec.NewWriter(&buf)\n+\n+\t\t\tconst chunkSize = 1111\n\nReview comment:\n       why 1111?\n\n##########\nFile path: go/parquet/compress/compress.go\n##########\n@@ -0,0 +1,150 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+// Package compress contains the interfaces and implementations for handling compression/decompression\n+// of parquet data at the column levels.\n+package compress\n+\n+import (\n+\t\"compress/flate\"\n+\t\"io\"\n+\t\"io/ioutil\"\n+\n+\t\"github.com/apache/arrow/go/parquet/internal/gen-go/parquet\"\n+)\n+\n+// Compression is an alias to the thrift compression codec enum type for easy use\n+type Compression parquet.CompressionCodec\n+\n+func (c Compression) String() string {\n+\treturn parquet.CompressionCodec(c).String()\n+}\n+\n+// DefaultCompressionLevel will use flate.DefaultCompression since many of the compression libraries\n+// use that to denote \"use the default\".\n+const DefaultCompressionLevel = flate.DefaultCompression\n+\n+// Codecs is a useful struct to provide namespaced enum values to use for specifying the compression type to use\n+// which make for easy internal swapping between them and the thrift enum since they are initialized to the same\n+// constant values.\n+var Codecs = struct {\n+\tUncompressed Compression\n+\tSnappy       Compression\n+\tGzip         Compression\n+\tLzo          Compression\n+\tBrotli       Compression\n+\tLz4          Compression\n+\tZstd         Compression\n+}{\n+\tUncompressed: Compression(parquet.CompressionCodec_UNCOMPRESSED),\n+\tSnappy:       Compression(parquet.CompressionCodec_SNAPPY),\n+\tGzip:         Compression(parquet.CompressionCodec_GZIP),\n+\tLzo:          Compression(parquet.CompressionCodec_LZO),\n+\tBrotli:       Compression(parquet.CompressionCodec_BROTLI),\n+\tLz4:          Compression(parquet.CompressionCodec_LZ4),\n+\tZstd:         Compression(parquet.CompressionCodec_ZSTD),\n+}\n+\n+// Codec is an interface which is implemented for each compression type in order to make the interactions easy to\n+// implement. Most consumers won't be calling GetCodec directly.\n+type Codec interface {\n+\t// NewReader provides a reader that wraps a stream with compressed data to stream the uncompressed data\n+\tNewReader(io.Reader) io.ReadCloser\n+\t// NewWriter provides a wrapper around a write stream to compress data before writing it.\n+\tNewWriter(io.Writer) io.WriteCloser\n+\t// NewWriterLevel is like NewWrapper but allows specifying the compression level\n+\tNewWriterLevel(io.Writer, int) (io.WriteCloser, error)\n+\t// Encode encodes a block of data given by src and returns the compressed block. dst needs to be either nil\n+\t// or sized large enough to fit the compressed block (use CompressBound to allocate). dst and src should not\n+\t// overlap since some of the compression types don't allow it.\n+\t//\n+\t// The returned slice *might* be a slice of dst if it was able to fit the whole compressed data in it.\n+\tEncode(dst, src []byte) []byte\n+\t// EncodeLevel is like Encode, but specifies a particular encoding level instead of the default.\n+\tEncodeLevel(dst, src []byte, level int) []byte\n+\t// CompressBound returns the boundary of maximum size of compressed data under the chosen codec.\n+\tCompressBound(int64) int64\n+\t// Decode is for decoding a single block rather than a stream, like with Encode, dst must be either nil or\n+\t// sized large enough to accommodate the uncompressed data and should not overlap with src.\n+\t//\n+\t// the returned slice *might* be a slice of dst.\n+\tDecode(dst, src []byte) []byte\n+}\n+\n+var codecs = map[Compression]Codec{}\n+\n+type nocodec struct{}\n+\n+func (nocodec) NewReader(r io.Reader) io.ReadCloser {\n+\tret, ok := r.(io.ReadCloser)\n+\tif !ok {\n+\t\treturn ioutil.NopCloser(r)\n+\t}\n+\treturn ret\n+}\n+\n+func (nocodec) Decode(dst, src []byte) []byte {\n+\tif dst != nil {\n+\t\tcopy(dst, src)\n+\t}\n+\treturn dst\n+}\n+\n+type writerNopCloser struct {\n+\tio.Writer\n+}\n+\n+func (writerNopCloser) Close() error {\n+\treturn nil\n+}\n+\n+func (nocodec) Encode(dst, src []byte) []byte {\n+\tcopy(dst, src)\n+\treturn dst\n+}\n+\n+func (nocodec) EncodeLevel(dst, src []byte, _ int) []byte {\n+\tcopy(dst, src)\n+\treturn dst\n+}\n+\n+func (nocodec) NewWriter(w io.Writer) io.WriteCloser {\n+\tret, ok := w.(io.WriteCloser)\n+\tif !ok {\n+\t\treturn writerNopCloser{w}\n+\t}\n+\treturn ret\n+}\n+\n+func (n nocodec) NewWriterLevel(w io.Writer, _ int) (io.WriteCloser, error) {\n+\treturn n.NewWriter(w), nil\n+}\n+\n+func (nocodec) CompressBound(len int64) int64 { return len }\n+\n+func init() {\n+\tcodecs[Codecs.Uncompressed] = nocodec{}\n\nReview comment:\n       I like the name, but any thoughts on Codecs.Identity - for example, https://grpc.github.io/grpc-java/javadoc/io/grpc/Codec.Identity.html\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-30T17:25:41.536+0000",
                    "updated": "2021-03-30T17:25:41.536+0000",
                    "started": "2021-03-30T17:25:41.536+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "574268",
                    "issueId": "13368001"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368001/worklog/574302",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on a change in pull request #9817:\nURL: https://github.com/apache/arrow/pull/9817#discussion_r604324653\n\n\n\n##########\nFile path: go/parquet/compress/brotli.go\n##########\n@@ -0,0 +1,112 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package compress\n+\n+import (\n+\t\"bytes\"\n+\t\"io\"\n+\t\"io/ioutil\"\n+\n+\t\"github.com/andybalholm/brotli\"\n+)\n+\n+type brotliCodec struct{}\n+\n+func (brotliCodec) NewReader(r io.Reader) io.ReadCloser {\n+\treturn ioutil.NopCloser(brotli.NewReader(r))\n+}\n+\n+func (b brotliCodec) EncodeLevel(dst, src []byte, level int) []byte {\n+\tif level == DefaultCompressionLevel {\n+\t\tlevel = brotli.DefaultCompression\n+\t}\n+\n+\tmaxlen := int(b.CompressBound(int64(len(src))))\n+\tif dst == nil || cap(dst) < maxlen {\n+\t\tdst = make([]byte, 0, maxlen)\n+\t}\n+\tbuf := bytes.NewBuffer(dst[:0])\n+\tw := brotli.NewWriterLevel(buf, level)\n+\t_, err := w.Write(src)\n+\tif err != nil {\n+\t\tpanic(err)\n+\t}\n+\tif err := w.Close(); err != nil {\n+\t\tpanic(err)\n+\t}\n+\treturn buf.Bytes()\n+}\n+\n+func (b brotliCodec) Encode(dst, src []byte) []byte {\n+\treturn b.EncodeLevel(dst, src, brotli.DefaultCompression)\n+}\n+\n+func (brotliCodec) Decode(dst, src []byte) []byte {\n+\trdr := brotli.NewReader(bytes.NewReader(src))\n+\tif dst != nil {\n+\t\tvar (\n+\t\t\tsofar       = 0\n+\t\t\tn           = -1\n+\t\t\terr   error = nil\n+\t\t)\n+\t\tfor n != 0 && err == nil {\n+\t\t\tn, err = rdr.Read(dst[sofar:])\n+\t\t\tsofar += n\n+\t\t}\n+\t\tif err != nil && err != io.EOF {\n+\t\t\tpanic(err)\n\nReview comment:\n       simplifies the Encode/Decode interface, and isn't recoverable from if it fails anyways.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-30T18:10:17.093+0000",
                    "updated": "2021-03-30T18:10:17.093+0000",
                    "started": "2021-03-30T18:10:17.092+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "574302",
                    "issueId": "13368001"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368001/worklog/574304",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on a change in pull request #9817:\nURL: https://github.com/apache/arrow/pull/9817#discussion_r604325152\n\n\n\n##########\nFile path: go/parquet/compress/compress.go\n##########\n@@ -0,0 +1,150 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+// Package compress contains the interfaces and implementations for handling compression/decompression\n+// of parquet data at the column levels.\n+package compress\n+\n+import (\n+\t\"compress/flate\"\n+\t\"io\"\n+\t\"io/ioutil\"\n+\n+\t\"github.com/apache/arrow/go/parquet/internal/gen-go/parquet\"\n+)\n+\n+// Compression is an alias to the thrift compression codec enum type for easy use\n+type Compression parquet.CompressionCodec\n+\n+func (c Compression) String() string {\n+\treturn parquet.CompressionCodec(c).String()\n+}\n+\n+// DefaultCompressionLevel will use flate.DefaultCompression since many of the compression libraries\n+// use that to denote \"use the default\".\n+const DefaultCompressionLevel = flate.DefaultCompression\n+\n+// Codecs is a useful struct to provide namespaced enum values to use for specifying the compression type to use\n+// which make for easy internal swapping between them and the thrift enum since they are initialized to the same\n+// constant values.\n+var Codecs = struct {\n+\tUncompressed Compression\n+\tSnappy       Compression\n+\tGzip         Compression\n+\tLzo          Compression\n+\tBrotli       Compression\n+\tLz4          Compression\n+\tZstd         Compression\n+}{\n+\tUncompressed: Compression(parquet.CompressionCodec_UNCOMPRESSED),\n+\tSnappy:       Compression(parquet.CompressionCodec_SNAPPY),\n+\tGzip:         Compression(parquet.CompressionCodec_GZIP),\n+\tLzo:          Compression(parquet.CompressionCodec_LZO),\n+\tBrotli:       Compression(parquet.CompressionCodec_BROTLI),\n+\tLz4:          Compression(parquet.CompressionCodec_LZ4),\n+\tZstd:         Compression(parquet.CompressionCodec_ZSTD),\n+}\n+\n+// Codec is an interface which is implemented for each compression type in order to make the interactions easy to\n+// implement. Most consumers won't be calling GetCodec directly.\n+type Codec interface {\n+\t// NewReader provides a reader that wraps a stream with compressed data to stream the uncompressed data\n+\tNewReader(io.Reader) io.ReadCloser\n+\t// NewWriter provides a wrapper around a write stream to compress data before writing it.\n+\tNewWriter(io.Writer) io.WriteCloser\n+\t// NewWriterLevel is like NewWrapper but allows specifying the compression level\n+\tNewWriterLevel(io.Writer, int) (io.WriteCloser, error)\n+\t// Encode encodes a block of data given by src and returns the compressed block. dst needs to be either nil\n+\t// or sized large enough to fit the compressed block (use CompressBound to allocate). dst and src should not\n+\t// overlap since some of the compression types don't allow it.\n+\t//\n+\t// The returned slice *might* be a slice of dst if it was able to fit the whole compressed data in it.\n+\tEncode(dst, src []byte) []byte\n+\t// EncodeLevel is like Encode, but specifies a particular encoding level instead of the default.\n+\tEncodeLevel(dst, src []byte, level int) []byte\n+\t// CompressBound returns the boundary of maximum size of compressed data under the chosen codec.\n+\tCompressBound(int64) int64\n+\t// Decode is for decoding a single block rather than a stream, like with Encode, dst must be either nil or\n+\t// sized large enough to accommodate the uncompressed data and should not overlap with src.\n+\t//\n+\t// the returned slice *might* be a slice of dst.\n+\tDecode(dst, src []byte) []byte\n+}\n+\n+var codecs = map[Compression]Codec{}\n+\n+type nocodec struct{}\n+\n+func (nocodec) NewReader(r io.Reader) io.ReadCloser {\n+\tret, ok := r.(io.ReadCloser)\n+\tif !ok {\n+\t\treturn ioutil.NopCloser(r)\n+\t}\n+\treturn ret\n+}\n+\n+func (nocodec) Decode(dst, src []byte) []byte {\n+\tif dst != nil {\n+\t\tcopy(dst, src)\n+\t}\n+\treturn dst\n+}\n+\n+type writerNopCloser struct {\n+\tio.Writer\n+}\n+\n+func (writerNopCloser) Close() error {\n+\treturn nil\n+}\n+\n+func (nocodec) Encode(dst, src []byte) []byte {\n+\tcopy(dst, src)\n+\treturn dst\n+}\n+\n+func (nocodec) EncodeLevel(dst, src []byte, _ int) []byte {\n+\tcopy(dst, src)\n+\treturn dst\n+}\n+\n+func (nocodec) NewWriter(w io.Writer) io.WriteCloser {\n+\tret, ok := w.(io.WriteCloser)\n+\tif !ok {\n+\t\treturn writerNopCloser{w}\n+\t}\n+\treturn ret\n+}\n+\n+func (n nocodec) NewWriterLevel(w io.Writer, _ int) (io.WriteCloser, error) {\n+\treturn n.NewWriter(w), nil\n+}\n+\n+func (nocodec) CompressBound(len int64) int64 { return len }\n+\n+func init() {\n+\tcodecs[Codecs.Uncompressed] = nocodec{}\n\nReview comment:\n       I think i prefer leaving it as Uncompressed for the name.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-30T18:11:02.275+0000",
                    "updated": "2021-03-30T18:11:02.275+0000",
                    "started": "2021-03-30T18:11:02.274+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "574304",
                    "issueId": "13368001"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368001/worklog/574311",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on a change in pull request #9817:\nURL: https://github.com/apache/arrow/pull/9817#discussion_r604336715\n\n\n\n##########\nFile path: go/parquet/compress/compress.go\n##########\n@@ -0,0 +1,150 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+// Package compress contains the interfaces and implementations for handling compression/decompression\n+// of parquet data at the column levels.\n+package compress\n+\n+import (\n+\t\"compress/flate\"\n+\t\"io\"\n+\t\"io/ioutil\"\n+\n+\t\"github.com/apache/arrow/go/parquet/internal/gen-go/parquet\"\n+)\n+\n+// Compression is an alias to the thrift compression codec enum type for easy use\n+type Compression parquet.CompressionCodec\n+\n+func (c Compression) String() string {\n+\treturn parquet.CompressionCodec(c).String()\n+}\n+\n+// DefaultCompressionLevel will use flate.DefaultCompression since many of the compression libraries\n+// use that to denote \"use the default\".\n+const DefaultCompressionLevel = flate.DefaultCompression\n+\n+// Codecs is a useful struct to provide namespaced enum values to use for specifying the compression type to use\n+// which make for easy internal swapping between them and the thrift enum since they are initialized to the same\n+// constant values.\n+var Codecs = struct {\n+\tUncompressed Compression\n+\tSnappy       Compression\n+\tGzip         Compression\n+\tLzo          Compression\n+\tBrotli       Compression\n+\tLz4          Compression\n+\tZstd         Compression\n+}{\n+\tUncompressed: Compression(parquet.CompressionCodec_UNCOMPRESSED),\n+\tSnappy:       Compression(parquet.CompressionCodec_SNAPPY),\n+\tGzip:         Compression(parquet.CompressionCodec_GZIP),\n+\tLzo:          Compression(parquet.CompressionCodec_LZO),\n+\tBrotli:       Compression(parquet.CompressionCodec_BROTLI),\n+\tLz4:          Compression(parquet.CompressionCodec_LZ4),\n+\tZstd:         Compression(parquet.CompressionCodec_ZSTD),\n+}\n+\n+// Codec is an interface which is implemented for each compression type in order to make the interactions easy to\n+// implement. Most consumers won't be calling GetCodec directly.\n+type Codec interface {\n+\t// NewReader provides a reader that wraps a stream with compressed data to stream the uncompressed data\n+\tNewReader(io.Reader) io.ReadCloser\n+\t// NewWriter provides a wrapper around a write stream to compress data before writing it.\n+\tNewWriter(io.Writer) io.WriteCloser\n+\t// NewWriterLevel is like NewWrapper but allows specifying the compression level\n+\tNewWriterLevel(io.Writer, int) (io.WriteCloser, error)\n+\t// Encode encodes a block of data given by src and returns the compressed block. dst needs to be either nil\n+\t// or sized large enough to fit the compressed block (use CompressBound to allocate). dst and src should not\n+\t// overlap since some of the compression types don't allow it.\n+\t//\n+\t// The returned slice *might* be a slice of dst if it was able to fit the whole compressed data in it.\n+\tEncode(dst, src []byte) []byte\n+\t// EncodeLevel is like Encode, but specifies a particular encoding level instead of the default.\n+\tEncodeLevel(dst, src []byte, level int) []byte\n+\t// CompressBound returns the boundary of maximum size of compressed data under the chosen codec.\n+\tCompressBound(int64) int64\n+\t// Decode is for decoding a single block rather than a stream, like with Encode, dst must be either nil or\n+\t// sized large enough to accommodate the uncompressed data and should not overlap with src.\n+\t//\n+\t// the returned slice *might* be a slice of dst.\n+\tDecode(dst, src []byte) []byte\n+}\n+\n+var codecs = map[Compression]Codec{}\n+\n+type nocodec struct{}\n+\n+func (nocodec) NewReader(r io.Reader) io.ReadCloser {\n+\tret, ok := r.(io.ReadCloser)\n+\tif !ok {\n+\t\treturn ioutil.NopCloser(r)\n+\t}\n+\treturn ret\n+}\n+\n+func (nocodec) Decode(dst, src []byte) []byte {\n+\tif dst != nil {\n+\t\tcopy(dst, src)\n+\t}\n+\treturn dst\n+}\n+\n+type writerNopCloser struct {\n+\tio.Writer\n+}\n+\n+func (writerNopCloser) Close() error {\n+\treturn nil\n+}\n+\n+func (nocodec) Encode(dst, src []byte) []byte {\n+\tcopy(dst, src)\n+\treturn dst\n+}\n+\n+func (nocodec) EncodeLevel(dst, src []byte, _ int) []byte {\n+\tcopy(dst, src)\n+\treturn dst\n+}\n+\n+func (nocodec) NewWriter(w io.Writer) io.WriteCloser {\n+\tret, ok := w.(io.WriteCloser)\n+\tif !ok {\n+\t\treturn writerNopCloser{w}\n+\t}\n+\treturn ret\n+}\n+\n+func (n nocodec) NewWriterLevel(w io.Writer, _ int) (io.WriteCloser, error) {\n+\treturn n.NewWriter(w), nil\n+}\n+\n+func (nocodec) CompressBound(len int64) int64 { return len }\n+\n+func init() {\n+\tcodecs[Codecs.Uncompressed] = nocodec{}\n+}\n+\n+// GetCodec returns a Codec interface for the requested Compression type\n+func GetCodec(typ Compression) Codec {\n+\tret, ok := codecs[typ]\n+\tif !ok {\n+\t\t// return codecs[Codecs.Uncompressed]\n\nReview comment:\n       For now i liked the idea of erroring when trying to retrieve a codec if we haven't implemented it rather than silently returning the uncompressed one. \r\n   \r\n   The alternative here to panicing would be to change this to return `(Codec, error)` and have it return nil and an unimplemented error if it can't find the desired codec.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-30T18:28:38.032+0000",
                    "updated": "2021-03-30T18:28:38.032+0000",
                    "started": "2021-03-30T18:28:38.031+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "574311",
                    "issueId": "13368001"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368001/worklog/574313",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on a change in pull request #9817:\nURL: https://github.com/apache/arrow/pull/9817#discussion_r604337163\n\n\n\n##########\nFile path: go/parquet/compress/compress_test.go\n##########\n@@ -0,0 +1,128 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package compress_test\n+\n+import (\n+\t\"bytes\"\n+\t\"io/ioutil\"\n+\t\"math/rand\"\n+\t\"testing\"\n+\n+\t\"github.com/apache/arrow/go/parquet/compress\"\n+\t\"github.com/stretchr/testify/assert\"\n+)\n+\n+const (\n+\tRandomDataSize       = 3 * 1024 * 1024\n+\tCompressibleDataSize = 8 * 1024 * 1024\n+)\n+\n+func makeRandomData(size int) []byte {\n+\tret := make([]byte, size)\n+\tr := rand.New(rand.NewSource(1234))\n+\tr.Read(ret)\n+\treturn ret\n+}\n+\n+func makeCompressibleData(size int) []byte {\n+\tconst base = \"Apache Arrow is a cross-language development platform for in-memory data\"\n+\n+\tdata := make([]byte, size)\n+\tn := copy(data, base)\n+\tfor i := n; i < len(data); i *= 2 {\n+\t\tcopy(data[i:], data[:i])\n+\t}\n+\treturn data\n+}\n+\n+func TestCompressDataOneShot(t *testing.T) {\n+\ttests := []struct {\n+\t\tc compress.Compression\n+\t}{\n+\t\t{compress.Codecs.Uncompressed},\n+\t\t{compress.Codecs.Snappy},\n+\t\t{compress.Codecs.Gzip},\n+\t\t// {compress.Codecs.Lzo},\n\nReview comment:\n       Yea, i wasn't able to find a good go library that implemented LZO when writing this, so in the future when we implement it we can just uncomment this to have the tests work.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-30T18:29:13.417+0000",
                    "updated": "2021-03-30T18:29:13.417+0000",
                    "started": "2021-03-30T18:29:13.417+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "574313",
                    "issueId": "13368001"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368001/worklog/574323",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on a change in pull request #9817:\nURL: https://github.com/apache/arrow/pull/9817#discussion_r604351891\n\n\n\n##########\nFile path: go/parquet/compress/compress_test.go\n##########\n@@ -0,0 +1,128 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package compress_test\n+\n+import (\n+\t\"bytes\"\n+\t\"io/ioutil\"\n+\t\"math/rand\"\n+\t\"testing\"\n+\n+\t\"github.com/apache/arrow/go/parquet/compress\"\n+\t\"github.com/stretchr/testify/assert\"\n+)\n+\n+const (\n+\tRandomDataSize       = 3 * 1024 * 1024\n+\tCompressibleDataSize = 8 * 1024 * 1024\n+)\n+\n+func makeRandomData(size int) []byte {\n+\tret := make([]byte, size)\n+\tr := rand.New(rand.NewSource(1234))\n+\tr.Read(ret)\n+\treturn ret\n+}\n+\n+func makeCompressibleData(size int) []byte {\n+\tconst base = \"Apache Arrow is a cross-language development platform for in-memory data\"\n+\n+\tdata := make([]byte, size)\n+\tn := copy(data, base)\n+\tfor i := n; i < len(data); i *= 2 {\n+\t\tcopy(data[i:], data[:i])\n+\t}\n+\treturn data\n+}\n+\n+func TestCompressDataOneShot(t *testing.T) {\n+\ttests := []struct {\n+\t\tc compress.Compression\n+\t}{\n+\t\t{compress.Codecs.Uncompressed},\n+\t\t{compress.Codecs.Snappy},\n+\t\t{compress.Codecs.Gzip},\n+\t\t// {compress.Codecs.Lzo},\n+\t\t{compress.Codecs.Brotli},\n+\t\t{compress.Codecs.Lz4},\n+\t\t{compress.Codecs.Zstd},\n+\t}\n+\n+\tfor _, tt := range tests {\n+\t\tt.Run(tt.c.String(), func(t *testing.T) {\n+\t\t\tcodec := compress.GetCodec(tt.c)\n+\t\t\tdata := makeCompressibleData(CompressibleDataSize)\n+\n+\t\t\tbuf := make([]byte, codec.CompressBound(int64(len(data))))\n+\t\t\tcompressed := codec.Encode(buf, data)\n+\t\t\tassert.Same(t, &buf[0], &compressed[0])\n+\n+\t\t\tout := make([]byte, len(data))\n+\t\t\tuncompressed := codec.Decode(out, compressed)\n+\t\t\tassert.Same(t, &out[0], &uncompressed[0])\n+\n+\t\t\tassert.Exactly(t, data, uncompressed)\n+\t\t})\n+\t}\n+}\n+\n+func TestCompressReaderWriter(t *testing.T) {\n+\ttests := []struct {\n+\t\tc compress.Compression\n+\t}{\n+\t\t{compress.Codecs.Uncompressed},\n+\t\t{compress.Codecs.Snappy},\n+\t\t{compress.Codecs.Gzip},\n+\t\t// {compress.Codecs.Lzo},\n+\t\t{compress.Codecs.Brotli},\n+\t\t{compress.Codecs.Lz4},\n+\t\t{compress.Codecs.Zstd},\n+\t}\n+\n+\tfor _, tt := range tests {\n+\t\tt.Run(tt.c.String(), func(t *testing.T) {\n+\t\t\tvar buf bytes.Buffer\n+\t\t\tcodec := compress.GetCodec(tt.c)\n+\t\t\tdata := makeRandomData(RandomDataSize)\n+\n+\t\t\twr := codec.NewWriter(&buf)\n+\n+\t\t\tconst chunkSize = 1111\n\nReview comment:\n       pulled this test from the C++ implementation tests. Ultimately it's because it's a number that is small enough to make sure we'll have multiple chunks but large enough that it'll have some compression it can do :)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-30T18:51:51.906+0000",
                    "updated": "2021-03-30T18:51:51.906+0000",
                    "started": "2021-03-30T18:51:51.906+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "574323",
                    "issueId": "13368001"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368001/worklog/574564",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #9817:\nURL: https://github.com/apache/arrow/pull/9817#issuecomment-810751389\n\n\n   sorry this week is particularly bad.  I will try to review on the weekend/next week.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-31T04:29:50.695+0000",
                    "updated": "2021-03-31T04:29:50.695+0000",
                    "started": "2021-03-31T04:29:50.695+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "574564",
                    "issueId": "13368001"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368001/worklog/574574",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #9817:\nURL: https://github.com/apache/arrow/pull/9817#discussion_r604589430\n\n\n\n##########\nFile path: go/parquet/compress/compress_test.go\n##########\n@@ -0,0 +1,128 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package compress_test\n+\n+import (\n+\t\"bytes\"\n+\t\"io/ioutil\"\n+\t\"math/rand\"\n+\t\"testing\"\n+\n+\t\"github.com/apache/arrow/go/parquet/compress\"\n+\t\"github.com/stretchr/testify/assert\"\n+)\n+\n+const (\n+\tRandomDataSize       = 3 * 1024 * 1024\n+\tCompressibleDataSize = 8 * 1024 * 1024\n+)\n+\n+func makeRandomData(size int) []byte {\n+\tret := make([]byte, size)\n+\tr := rand.New(rand.NewSource(1234))\n+\tr.Read(ret)\n+\treturn ret\n+}\n+\n+func makeCompressibleData(size int) []byte {\n+\tconst base = \"Apache Arrow is a cross-language development platform for in-memory data\"\n+\n+\tdata := make([]byte, size)\n+\tn := copy(data, base)\n+\tfor i := n; i < len(data); i *= 2 {\n+\t\tcopy(data[i:], data[:i])\n+\t}\n+\treturn data\n+}\n+\n+func TestCompressDataOneShot(t *testing.T) {\n+\ttests := []struct {\n+\t\tc compress.Compression\n+\t}{\n+\t\t{compress.Codecs.Uncompressed},\n+\t\t{compress.Codecs.Snappy},\n+\t\t{compress.Codecs.Gzip},\n+\t\t// {compress.Codecs.Lzo},\n\nReview comment:\n       LZO isn't implemented in C++ isn't implemented either.  From what I recall I think the existing LZO library has a license incompatible with Apache.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-31T04:43:12.387+0000",
                    "updated": "2021-03-31T04:43:12.387+0000",
                    "started": "2021-03-31T04:43:12.386+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "574574",
                    "issueId": "13368001"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368001/worklog/574576",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #9817:\nURL: https://github.com/apache/arrow/pull/9817#discussion_r604589584\n\n\n\n##########\nFile path: go/parquet/compress/compress_test.go\n##########\n@@ -0,0 +1,128 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package compress_test\n+\n+import (\n+\t\"bytes\"\n+\t\"io/ioutil\"\n+\t\"math/rand\"\n+\t\"testing\"\n+\n+\t\"github.com/apache/arrow/go/parquet/compress\"\n+\t\"github.com/stretchr/testify/assert\"\n+)\n+\n+const (\n+\tRandomDataSize       = 3 * 1024 * 1024\n+\tCompressibleDataSize = 8 * 1024 * 1024\n+)\n+\n+func makeRandomData(size int) []byte {\n+\tret := make([]byte, size)\n+\tr := rand.New(rand.NewSource(1234))\n+\tr.Read(ret)\n+\treturn ret\n+}\n+\n+func makeCompressibleData(size int) []byte {\n+\tconst base = \"Apache Arrow is a cross-language development platform for in-memory data\"\n+\n+\tdata := make([]byte, size)\n+\tn := copy(data, base)\n+\tfor i := n; i < len(data); i *= 2 {\n+\t\tcopy(data[i:], data[:i])\n+\t}\n+\treturn data\n+}\n+\n+func TestCompressDataOneShot(t *testing.T) {\n+\ttests := []struct {\n+\t\tc compress.Compression\n+\t}{\n+\t\t{compress.Codecs.Uncompressed},\n+\t\t{compress.Codecs.Snappy},\n+\t\t{compress.Codecs.Gzip},\n+\t\t// {compress.Codecs.Lzo},\n+\t\t{compress.Codecs.Brotli},\n+\t\t{compress.Codecs.Lz4},\n\nReview comment:\n       LZ4 is problematic: http://mail-archives.apache.org/mod_mbox/arrow-dev/202007.mbox/%3CCAAri41v24xuA8MGHLDvgSnE+7AAgOhiEukemW_oPNHMvfMmrWw@mail.gmail.com%3E\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-31T04:43:48.742+0000",
                    "updated": "2021-03-31T04:43:48.742+0000",
                    "started": "2021-03-31T04:43:48.742+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "574576",
                    "issueId": "13368001"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368001/worklog/574912",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on a change in pull request #9817:\nURL: https://github.com/apache/arrow/pull/9817#discussion_r604994611\n\n\n\n##########\nFile path: go/parquet/compress/compress_test.go\n##########\n@@ -0,0 +1,128 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package compress_test\n+\n+import (\n+\t\"bytes\"\n+\t\"io/ioutil\"\n+\t\"math/rand\"\n+\t\"testing\"\n+\n+\t\"github.com/apache/arrow/go/parquet/compress\"\n+\t\"github.com/stretchr/testify/assert\"\n+)\n+\n+const (\n+\tRandomDataSize       = 3 * 1024 * 1024\n+\tCompressibleDataSize = 8 * 1024 * 1024\n+)\n+\n+func makeRandomData(size int) []byte {\n+\tret := make([]byte, size)\n+\tr := rand.New(rand.NewSource(1234))\n+\tr.Read(ret)\n+\treturn ret\n+}\n+\n+func makeCompressibleData(size int) []byte {\n+\tconst base = \"Apache Arrow is a cross-language development platform for in-memory data\"\n+\n+\tdata := make([]byte, size)\n+\tn := copy(data, base)\n+\tfor i := n; i < len(data); i *= 2 {\n+\t\tcopy(data[i:], data[:i])\n+\t}\n+\treturn data\n+}\n+\n+func TestCompressDataOneShot(t *testing.T) {\n+\ttests := []struct {\n+\t\tc compress.Compression\n+\t}{\n+\t\t{compress.Codecs.Uncompressed},\n+\t\t{compress.Codecs.Snappy},\n+\t\t{compress.Codecs.Gzip},\n+\t\t// {compress.Codecs.Lzo},\n+\t\t{compress.Codecs.Brotli},\n+\t\t{compress.Codecs.Lz4},\n\nReview comment:\n       I saw the mentions between LZ4 and the Hadoop LZ4 in the codebase. What is actually the difference in the algorithm / should I remove/disable the LZ4 handling here until i can specifically get the \"Hadoop LZ4\" hooked up?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-31T15:35:35.315+0000",
                    "updated": "2021-03-31T15:35:35.315+0000",
                    "started": "2021-03-31T15:35:35.315+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "574912",
                    "issueId": "13368001"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368001/worklog/574916",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #9817:\nURL: https://github.com/apache/arrow/pull/9817#discussion_r605003598\n\n\n\n##########\nFile path: go/parquet/compress/compress_test.go\n##########\n@@ -0,0 +1,128 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package compress_test\n+\n+import (\n+\t\"bytes\"\n+\t\"io/ioutil\"\n+\t\"math/rand\"\n+\t\"testing\"\n+\n+\t\"github.com/apache/arrow/go/parquet/compress\"\n+\t\"github.com/stretchr/testify/assert\"\n+)\n+\n+const (\n+\tRandomDataSize       = 3 * 1024 * 1024\n+\tCompressibleDataSize = 8 * 1024 * 1024\n+)\n+\n+func makeRandomData(size int) []byte {\n+\tret := make([]byte, size)\n+\tr := rand.New(rand.NewSource(1234))\n+\tr.Read(ret)\n+\treturn ret\n+}\n+\n+func makeCompressibleData(size int) []byte {\n+\tconst base = \"Apache Arrow is a cross-language development platform for in-memory data\"\n+\n+\tdata := make([]byte, size)\n+\tn := copy(data, base)\n+\tfor i := n; i < len(data); i *= 2 {\n+\t\tcopy(data[i:], data[:i])\n+\t}\n+\treturn data\n+}\n+\n+func TestCompressDataOneShot(t *testing.T) {\n+\ttests := []struct {\n+\t\tc compress.Compression\n+\t}{\n+\t\t{compress.Codecs.Uncompressed},\n+\t\t{compress.Codecs.Snappy},\n+\t\t{compress.Codecs.Gzip},\n+\t\t// {compress.Codecs.Lzo},\n+\t\t{compress.Codecs.Brotli},\n+\t\t{compress.Codecs.Lz4},\n\nReview comment:\n       It is a little bit of a rabbit whole.  I would consider just saying this isn't supported.  \r\n   \r\n   LZ4 has two specified formats: \"raw\" (no additional metadata) and \"framed\" (provides metadata/checksums/etc).  For a while C++ made use of framed I think.  This was incompatible.  An effort was made to try to use \"raw\" in what we thought was the Hadoop LZ4 format (turns out it wasn't).  There is a new proposal to use \"raw\" which will subsume LZ4 Hadoop.\r\n   \r\n   I think hadoop is its own unspecified (except in code) framing on top of raw.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-31T15:37:58.658+0000",
                    "updated": "2021-03-31T15:37:58.658+0000",
                    "started": "2021-03-31T15:37:58.658+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "574916",
                    "issueId": "13368001"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368001/worklog/574923",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #9817:\nURL: https://github.com/apache/arrow/pull/9817#discussion_r605004149\n\n\n\n##########\nFile path: go/parquet/compress/compress_test.go\n##########\n@@ -0,0 +1,128 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package compress_test\n+\n+import (\n+\t\"bytes\"\n+\t\"io/ioutil\"\n+\t\"math/rand\"\n+\t\"testing\"\n+\n+\t\"github.com/apache/arrow/go/parquet/compress\"\n+\t\"github.com/stretchr/testify/assert\"\n+)\n+\n+const (\n+\tRandomDataSize       = 3 * 1024 * 1024\n+\tCompressibleDataSize = 8 * 1024 * 1024\n+)\n+\n+func makeRandomData(size int) []byte {\n+\tret := make([]byte, size)\n+\tr := rand.New(rand.NewSource(1234))\n+\tr.Read(ret)\n+\treturn ret\n+}\n+\n+func makeCompressibleData(size int) []byte {\n+\tconst base = \"Apache Arrow is a cross-language development platform for in-memory data\"\n+\n+\tdata := make([]byte, size)\n+\tn := copy(data, base)\n+\tfor i := n; i < len(data); i *= 2 {\n+\t\tcopy(data[i:], data[:i])\n+\t}\n+\treturn data\n+}\n+\n+func TestCompressDataOneShot(t *testing.T) {\n+\ttests := []struct {\n+\t\tc compress.Compression\n+\t}{\n+\t\t{compress.Codecs.Uncompressed},\n+\t\t{compress.Codecs.Snappy},\n+\t\t{compress.Codecs.Gzip},\n+\t\t// {compress.Codecs.Lzo},\n+\t\t{compress.Codecs.Brotli},\n+\t\t{compress.Codecs.Lz4},\n+\t\t{compress.Codecs.Zstd},\n+\t}\n+\n+\tfor _, tt := range tests {\n+\t\tt.Run(tt.c.String(), func(t *testing.T) {\n+\t\t\tcodec := compress.GetCodec(tt.c)\n+\t\t\tdata := makeCompressibleData(CompressibleDataSize)\n+\n+\t\t\tbuf := make([]byte, codec.CompressBound(int64(len(data))))\n+\t\t\tcompressed := codec.Encode(buf, data)\n+\t\t\tassert.Same(t, &buf[0], &compressed[0])\n+\n+\t\t\tout := make([]byte, len(data))\n+\t\t\tuncompressed := codec.Decode(out, compressed)\n+\t\t\tassert.Same(t, &out[0], &uncompressed[0])\n+\n+\t\t\tassert.Exactly(t, data, uncompressed)\n+\t\t})\n+\t}\n+}\n+\n+func TestCompressReaderWriter(t *testing.T) {\n+\ttests := []struct {\n+\t\tc compress.Compression\n+\t}{\n+\t\t{compress.Codecs.Uncompressed},\n+\t\t{compress.Codecs.Snappy},\n+\t\t{compress.Codecs.Gzip},\n+\t\t// {compress.Codecs.Lzo},\n+\t\t{compress.Codecs.Brotli},\n+\t\t{compress.Codecs.Lz4},\n+\t\t{compress.Codecs.Zstd},\n+\t}\n+\n+\tfor _, tt := range tests {\n+\t\tt.Run(tt.c.String(), func(t *testing.T) {\n+\t\t\tvar buf bytes.Buffer\n+\t\t\tcodec := compress.GetCodec(tt.c)\n+\t\t\tdata := makeRandomData(RandomDataSize)\n+\n+\t\t\twr := codec.NewWriter(&buf)\n+\n+\t\t\tconst chunkSize = 1111\n\nReview comment:\n       I'm surprised C++ doesn't use a power of 2 (1024?)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-31T15:47:41.553+0000",
                    "updated": "2021-03-31T15:47:41.553+0000",
                    "started": "2021-03-31T15:47:41.553+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "574923",
                    "issueId": "13368001"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368001/worklog/574926",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #9817:\nURL: https://github.com/apache/arrow/pull/9817#issuecomment-811163730\n\n\n   I removed the \"@\" mentions in the description.  It appears I get notified everytime someone clones the commit in master.    Please tag people as a first comment instead.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-31T15:50:52.328+0000",
                    "updated": "2021-03-31T15:50:52.328+0000",
                    "started": "2021-03-31T15:50:52.327+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "574926",
                    "issueId": "13368001"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368001/worklog/574934",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on pull request #9817:\nURL: https://github.com/apache/arrow/pull/9817#issuecomment-811180729\n\n\n   @emkornfield Did not realize that, will keep that in mind for future PRs. Sorry!\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-31T16:01:50.806+0000",
                    "updated": "2021-03-31T16:01:50.806+0000",
                    "started": "2021-03-31T16:01:50.806+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "574934",
                    "issueId": "13368001"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368001/worklog/574935",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on a change in pull request #9817:\nURL: https://github.com/apache/arrow/pull/9817#discussion_r605026154\n\n\n\n##########\nFile path: go/parquet/compress/compress_test.go\n##########\n@@ -0,0 +1,128 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package compress_test\n+\n+import (\n+\t\"bytes\"\n+\t\"io/ioutil\"\n+\t\"math/rand\"\n+\t\"testing\"\n+\n+\t\"github.com/apache/arrow/go/parquet/compress\"\n+\t\"github.com/stretchr/testify/assert\"\n+)\n+\n+const (\n+\tRandomDataSize       = 3 * 1024 * 1024\n+\tCompressibleDataSize = 8 * 1024 * 1024\n+)\n+\n+func makeRandomData(size int) []byte {\n+\tret := make([]byte, size)\n+\tr := rand.New(rand.NewSource(1234))\n+\tr.Read(ret)\n+\treturn ret\n+}\n+\n+func makeCompressibleData(size int) []byte {\n+\tconst base = \"Apache Arrow is a cross-language development platform for in-memory data\"\n+\n+\tdata := make([]byte, size)\n+\tn := copy(data, base)\n+\tfor i := n; i < len(data); i *= 2 {\n+\t\tcopy(data[i:], data[:i])\n+\t}\n+\treturn data\n+}\n+\n+func TestCompressDataOneShot(t *testing.T) {\n+\ttests := []struct {\n+\t\tc compress.Compression\n+\t}{\n+\t\t{compress.Codecs.Uncompressed},\n+\t\t{compress.Codecs.Snappy},\n+\t\t{compress.Codecs.Gzip},\n+\t\t// {compress.Codecs.Lzo},\n+\t\t{compress.Codecs.Brotli},\n+\t\t{compress.Codecs.Lz4},\n\nReview comment:\n       Ah interesting. Ok, I'll leave it as unsupported for now and if \"raw\" subsumes LZ4 Hadoop in the parquet spec I'll implement that at that time. I'll update the PR.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-31T16:03:04.113+0000",
                    "updated": "2021-03-31T16:03:04.113+0000",
                    "started": "2021-03-31T16:03:04.113+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "574935",
                    "issueId": "13368001"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368001/worklog/576637",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on pull request #9817:\nURL: https://github.com/apache/arrow/pull/9817#issuecomment-813077858\n\n\n   rebased from master\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-04T18:22:55.917+0000",
                    "updated": "2021-04-04T18:22:55.917+0000",
                    "started": "2021-04-04T18:22:55.917+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "576637",
                    "issueId": "13368001"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368001/worklog/576944",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on a change in pull request #9817:\nURL: https://github.com/apache/arrow/pull/9817#discussion_r607188919\n\n\n\n##########\nFile path: go/parquet/compress/compress_test.go\n##########\n@@ -0,0 +1,128 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package compress_test\n+\n+import (\n+\t\"bytes\"\n+\t\"io/ioutil\"\n+\t\"math/rand\"\n+\t\"testing\"\n+\n+\t\"github.com/apache/arrow/go/parquet/compress\"\n+\t\"github.com/stretchr/testify/assert\"\n+)\n+\n+const (\n+\tRandomDataSize       = 3 * 1024 * 1024\n+\tCompressibleDataSize = 8 * 1024 * 1024\n+)\n+\n+func makeRandomData(size int) []byte {\n+\tret := make([]byte, size)\n+\tr := rand.New(rand.NewSource(1234))\n+\tr.Read(ret)\n+\treturn ret\n+}\n+\n+func makeCompressibleData(size int) []byte {\n+\tconst base = \"Apache Arrow is a cross-language development platform for in-memory data\"\n+\n+\tdata := make([]byte, size)\n+\tn := copy(data, base)\n+\tfor i := n; i < len(data); i *= 2 {\n+\t\tcopy(data[i:], data[:i])\n+\t}\n+\treturn data\n+}\n+\n+func TestCompressDataOneShot(t *testing.T) {\n+\ttests := []struct {\n+\t\tc compress.Compression\n+\t}{\n+\t\t{compress.Codecs.Uncompressed},\n+\t\t{compress.Codecs.Snappy},\n+\t\t{compress.Codecs.Gzip},\n+\t\t// {compress.Codecs.Lzo},\n+\t\t{compress.Codecs.Brotli},\n+\t\t{compress.Codecs.Lz4},\n+\t\t{compress.Codecs.Zstd},\n+\t}\n+\n+\tfor _, tt := range tests {\n+\t\tt.Run(tt.c.String(), func(t *testing.T) {\n+\t\t\tcodec := compress.GetCodec(tt.c)\n+\t\t\tdata := makeCompressibleData(CompressibleDataSize)\n+\n+\t\t\tbuf := make([]byte, codec.CompressBound(int64(len(data))))\n+\t\t\tcompressed := codec.Encode(buf, data)\n+\t\t\tassert.Same(t, &buf[0], &compressed[0])\n+\n+\t\t\tout := make([]byte, len(data))\n+\t\t\tuncompressed := codec.Decode(out, compressed)\n+\t\t\tassert.Same(t, &out[0], &uncompressed[0])\n+\n+\t\t\tassert.Exactly(t, data, uncompressed)\n+\t\t})\n+\t}\n+}\n+\n+func TestCompressReaderWriter(t *testing.T) {\n+\ttests := []struct {\n+\t\tc compress.Compression\n+\t}{\n+\t\t{compress.Codecs.Uncompressed},\n+\t\t{compress.Codecs.Snappy},\n+\t\t{compress.Codecs.Gzip},\n+\t\t// {compress.Codecs.Lzo},\n+\t\t{compress.Codecs.Brotli},\n+\t\t{compress.Codecs.Lz4},\n+\t\t{compress.Codecs.Zstd},\n+\t}\n+\n+\tfor _, tt := range tests {\n+\t\tt.Run(tt.c.String(), func(t *testing.T) {\n+\t\t\tvar buf bytes.Buffer\n+\t\t\tcodec := compress.GetCodec(tt.c)\n+\t\t\tdata := makeRandomData(RandomDataSize)\n+\n+\t\t\twr := codec.NewWriter(&buf)\n+\n+\t\t\tconst chunkSize = 1111\n\nReview comment:\n       I think the intent was to ensure that there is a chunk at the end which is not a full chunk to make sure we test that handling properly.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-05T16:36:01.749+0000",
                    "updated": "2021-04-05T16:36:01.749+0000",
                    "started": "2021-04-05T16:36:01.749+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "576944",
                    "issueId": "13368001"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368001/worklog/578403",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on pull request #9817:\nURL: https://github.com/apache/arrow/pull/9817#issuecomment-814991554\n\n\n   @emkornfield @sbinet @nickpoorman Bump on getting reviews here! thanks!\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-07T15:06:59.373+0000",
                    "updated": "2021-04-07T15:06:59.373+0000",
                    "started": "2021-04-07T15:06:59.373+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "578403",
                    "issueId": "13368001"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
            "id": "7",
            "description": "The sub-task of the issue",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
            "name": "Sub-task",
            "subtask": true,
            "avatarId": 21146
        },
        "timespent": 24600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@6977e5ff[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3b11a74[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4938e05b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@425121b2[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4907d79a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@6329842b[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6d1d9a2d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@260a6a8d[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@51c6c2d1[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@7e610c1e[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7fac3d0d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@a076e77[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 24600,
        "customfield_12312520": null,
        "customfield_12312521": "Fri Apr 16 03:20:44 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-04-16T03:20:44.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-12104/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2021-03-26T20:53:25.000+0000",
        "updated": "2021-04-18T16:06:11.000+0000",
        "timeoriginalestimate": null,
        "description": "Second chunk of ported code contains the Thrift Generated code, and the frameworks for the Encryption, Compression and Properties.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "6h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 24600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "Next Chunk of ported Code",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368001/comment/17322587",
                    "id": "17322587",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield",
                        "name": "emkornfield",
                        "key": "emkornfield",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Micah Kornfield",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Issue resolved by pull request 9817\n[https://github.com/apache/arrow/pull/9817]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield",
                        "name": "emkornfield",
                        "key": "emkornfield",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Micah Kornfield",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2021-04-16T03:20:44.083+0000",
                    "updated": "2021-04-16T03:20:44.083+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0p9hc:",
        "customfield_12314139": null
    }
}