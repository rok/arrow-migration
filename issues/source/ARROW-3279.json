{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13186361",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186361",
    "key": "ARROW-3279",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343066",
                "id": "12343066",
                "description": "",
                "name": "0.11.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-10-08"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12342562",
                "id": "12342562",
                "description": "",
                "name": "0.10.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-08-06"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "aggregateprogress": {
            "progress": 13200,
            "total": 13200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 13200,
            "total": 13200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3279/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 22,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186361/worklog/146045",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou opened a new pull request #2592: ARROW-3279: [C++] Allow linking Arrow tests dynamically on Windows\nURL: https://github.com/apache/arrow/pull/2592\n \n \n   This helps reduce build times because we don't have to build both the static and shared library.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-20T15:42:21.027+0000",
                    "updated": "2018-09-20T15:42:21.027+0000",
                    "started": "2018-09-20T15:42:21.026+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "146045",
                    "issueId": "13186361"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186361/worklog/146048",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #2592: ARROW-3279: [C++] Allow linking Arrow tests dynamically on Windows\nURL: https://github.com/apache/arrow/pull/2592#discussion_r219217931\n \n \n\n ##########\n File path: cpp/src/arrow/type.h\n ##########\n @@ -403,19 +403,6 @@ class ARROW_EXPORT ListType : public NestedType {\n   std::string name() const override { return \"list\"; }\n };\n \n-namespace meta {\n-\n-/// Additional ListType class that can be instantiated with only compile-time arguments.\n-template <typename T>\n-class ARROW_EXPORT ListType : public ::arrow::ListType {\n \n Review comment:\n   @xhochy This class failed linking from `arrow.dll`. Not sure why...\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-20T15:47:14.848+0000",
                    "updated": "2018-09-20T15:47:14.848+0000",
                    "started": "2018-09-20T15:47:14.848+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "146048",
                    "issueId": "13186361"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186361/worklog/146100",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #2592: ARROW-3279: [C++] Allow linking Arrow tests dynamically on Windows\nURL: https://github.com/apache/arrow/pull/2592#issuecomment-423294943\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/2592?src=pr&el=h1) Report\n   > Merging [#2592](https://codecov.io/gh/apache/arrow/pull/2592?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/35b5bce2e8f8b8bbdc7c199d6761876af901c619?src=pr&el=desc) will **increase** coverage by `0.01%`.\n   > The diff coverage is `100%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/2592/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/2592?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #2592      +/-   ##\n   ==========================================\n   + Coverage   87.15%   87.17%   +0.01%     \n   ==========================================\n     Files         380      380              \n     Lines       58889    58901      +12     \n   ==========================================\n   + Hits        51322    51344      +22     \n   + Misses       7493     7487       -6     \n   + Partials       74       70       -4\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/2592?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [cpp/src/arrow/python/helpers.h](https://codecov.io/gh/apache/arrow/pull/2592/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9weXRob24vaGVscGVycy5o) | `90% <\u00f8> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/python/decimal.h](https://codecov.io/gh/apache/arrow/pull/2592/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9weXRob24vZGVjaW1hbC5o) | `100% <\u00f8> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/util/io-util.h](https://codecov.io/gh/apache/arrow/pull/2592/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL2lvLXV0aWwuaA==) | `100% <\u00f8> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/util/cpu-info.cc](https://codecov.io/gh/apache/arrow/pull/2592/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL2NwdS1pbmZvLmNj) | `77.92% <\u00f8> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/type.h](https://codecov.io/gh/apache/arrow/pull/2592/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy90eXBlLmg=) | `86.36% <\u00f8> (-0.18%)` | :arrow_down: |\n   | [cpp/src/parquet/schema-internal.h](https://codecov.io/gh/apache/arrow/pull/2592/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wYXJxdWV0L3NjaGVtYS1pbnRlcm5hbC5o) | `100% <\u00f8> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/compute/kernels/util-internal.h](https://codecov.io/gh/apache/arrow/pull/2592/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9jb21wdXRlL2tlcm5lbHMvdXRpbC1pbnRlcm5hbC5o) | `100% <\u00f8> (\u00f8)` | :arrow_up: |\n   | [cpp/src/parquet/murmur3.h](https://codecov.io/gh/apache/arrow/pull/2592/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wYXJxdWV0L211cm11cjMuaA==) | `100% <100%> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/table\\_builder.h](https://codecov.io/gh/apache/arrow/pull/2592/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy90YWJsZV9idWlsZGVyLmg=) | `100% <100%> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/util/logging.h](https://codecov.io/gh/apache/arrow/pull/2592/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL2xvZ2dpbmcuaA==) | `60% <100%> (\u00f8)` | :arrow_up: |\n   | ... and [16 more](https://codecov.io/gh/apache/arrow/pull/2592/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/2592?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/2592?src=pr&el=footer). Last update [35b5bce...dd8fe76](https://codecov.io/gh/apache/arrow/pull/2592?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-20T18:56:31.568+0000",
                    "updated": "2018-09-20T18:56:31.568+0000",
                    "started": "2018-09-20T18:56:31.567+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "146100",
                    "issueId": "13186361"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186361/worklog/146136",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2592: ARROW-3279: [C++] Allow linking Arrow tests dynamically on Windows\nURL: https://github.com/apache/arrow/pull/2592#discussion_r219324211\n \n \n\n ##########\n File path: cpp/src/arrow/type.h\n ##########\n @@ -403,19 +403,6 @@ class ARROW_EXPORT ListType : public NestedType {\n   std::string name() const override { return \"list\"; }\n };\n \n-namespace meta {\n-\n-/// Additional ListType class that can be instantiated with only compile-time arguments.\n-template <typename T>\n-class ARROW_EXPORT ListType : public ::arrow::ListType {\n \n Review comment:\n   Hm, should open a follow up issue to investigate\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-20T21:32:35.531+0000",
                    "updated": "2018-09-20T21:32:35.531+0000",
                    "started": "2018-09-20T21:32:35.530+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "146136",
                    "issueId": "13186361"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186361/worklog/146137",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2592: ARROW-3279: [C++] Allow linking Arrow tests dynamically on Windows\nURL: https://github.com/apache/arrow/pull/2592#issuecomment-423340752\n \n \n   Needs a rebase\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-20T21:32:43.724+0000",
                    "updated": "2018-09-20T21:32:43.724+0000",
                    "started": "2018-09-20T21:32:43.723+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "146137",
                    "issueId": "13186361"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186361/worklog/146138",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2592: ARROW-3279: [C++] Allow linking Arrow tests dynamically on Windows\nURL: https://github.com/apache/arrow/pull/2592#issuecomment-423341029\n \n \n   This seems to have had limited impact on CI runtimes\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-20T21:33:39.066+0000",
                    "updated": "2018-09-20T21:33:39.066+0000",
                    "started": "2018-09-20T21:33:39.065+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "146138",
                    "issueId": "13186361"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186361/worklog/146141",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #2592: ARROW-3279: [C++] Allow linking Arrow tests dynamically on Windows\nURL: https://github.com/apache/arrow/pull/2592#issuecomment-423343040\n \n \n   > This seems to have had limited impact on CI runtimes\r\n   \r\n   It's not easy to compare, as they vary quite a bit from run to run. In the logs, one can see that there are 50 to 100 less compilation steps in each cmake pass, which _should_ translate into faster builds on average.\r\n   \r\n   (ultimately, I think it would be nice for this to work on Unix too, as it would shrink the size of test executables, but there are probably major hurdles to overcome)\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-20T21:41:44.721+0000",
                    "updated": "2018-09-20T21:41:44.721+0000",
                    "started": "2018-09-20T21:41:44.721+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "146141",
                    "issueId": "13186361"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186361/worklog/146142",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #2592: ARROW-3279: [C++] Allow linking Arrow tests dynamically on Windows\nURL: https://github.com/apache/arrow/pull/2592#issuecomment-423343350\n \n \n   > +1. I won't merge until @xhochy weighs in on the `ListType<T>` issue\r\n   \r\n   Note `ListType<T>` was added specifically to implement `stl.h`.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-20T21:42:56.184+0000",
                    "updated": "2018-09-20T21:42:56.184+0000",
                    "started": "2018-09-20T21:42:56.184+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "146142",
                    "issueId": "13186361"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186361/worklog/146145",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #2592: ARROW-3279: [C++] Allow linking Arrow tests dynamically on Windows\nURL: https://github.com/apache/arrow/pull/2592#issuecomment-423348876\n \n \n   Rebased... let's hope CI still passes.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-20T22:03:37.787+0000",
                    "updated": "2018-09-20T22:03:37.787+0000",
                    "started": "2018-09-20T22:03:37.786+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "146145",
                    "issueId": "13186361"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186361/worklog/146772",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "xhochy commented on a change in pull request #2592: ARROW-3279: [C++] Allow linking Arrow tests dynamically on Windows\nURL: https://github.com/apache/arrow/pull/2592#discussion_r219673854\n \n \n\n ##########\n File path: cpp/src/arrow/type.h\n ##########\n @@ -403,19 +403,6 @@ class ARROW_EXPORT ListType : public NestedType {\n   std::string name() const override { return \"list\"; }\n };\n \n-namespace meta {\n-\n-/// Additional ListType class that can be instantiated with only compile-time arguments.\n-template <typename T>\n-class ARROW_EXPORT ListType : public ::arrow::ListType {\n \n Review comment:\n   I don't need the type for the current functionality but I'm working very slowly on adding some more interfaces that allow construction of Arrow classes using meta programming. There this type will be very helpful. It's ok for me to drop it temporarily but I may readd a similar functionality again some time.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-22T14:56:14.162+0000",
                    "updated": "2018-09-22T14:56:14.162+0000",
                    "started": "2018-09-22T14:56:14.161+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "146772",
                    "issueId": "13186361"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186361/worklog/146785",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2592: ARROW-3279: [C++] Allow linking Arrow tests dynamically on Windows\nURL: https://github.com/apache/arrow/pull/2592#discussion_r219674857\n \n \n\n ##########\n File path: cpp/src/arrow/type.h\n ##########\n @@ -403,19 +403,6 @@ class ARROW_EXPORT ListType : public NestedType {\n   std::string name() const override { return \"list\"; }\n };\n \n-namespace meta {\n-\n-/// Additional ListType class that can be instantiated with only compile-time arguments.\n-template <typename T>\n-class ARROW_EXPORT ListType : public ::arrow::ListType {\n \n Review comment:\n   I added recently a new macro `ARROW_TEMPLATE_EXPORT` that solves this, see https://github.com/apache/arrow/blob/master/cpp/src/arrow/util/visibility.h#L56. Let me see if I can add this type back in\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-22T15:41:42.196+0000",
                    "updated": "2018-09-22T15:41:42.196+0000",
                    "started": "2018-09-22T15:41:42.196+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "146785",
                    "issueId": "13186361"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186361/worklog/146786",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #2592: ARROW-3279: [C++] Allow linking Arrow tests dynamically on Windows\nURL: https://github.com/apache/arrow/pull/2592#discussion_r219674888\n \n \n\n ##########\n File path: cpp/src/arrow/type.h\n ##########\n @@ -403,19 +403,6 @@ class ARROW_EXPORT ListType : public NestedType {\n   std::string name() const override { return \"list\"; }\n };\n \n-namespace meta {\n-\n-/// Additional ListType class that can be instantiated with only compile-time arguments.\n-template <typename T>\n-class ARROW_EXPORT ListType : public ::arrow::ListType {\n \n Review comment:\n   I'm not sure how it would, but I'll let you give it a try ;-)\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-22T15:42:46.985+0000",
                    "updated": "2018-09-22T15:42:46.985+0000",
                    "started": "2018-09-22T15:42:46.985+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "146786",
                    "issueId": "13186361"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186361/worklog/146788",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2592: ARROW-3279: [C++] Allow linking Arrow tests dynamically on Windows\nURL: https://github.com/apache/arrow/pull/2592#discussion_r219674909\n \n \n\n ##########\n File path: cpp/src/arrow/type.h\n ##########\n @@ -403,19 +403,6 @@ class ARROW_EXPORT ListType : public NestedType {\n   std::string name() const override { return \"list\"; }\n };\n \n-namespace meta {\n-\n-/// Additional ListType class that can be instantiated with only compile-time arguments.\n-template <typename T>\n-class ARROW_EXPORT ListType : public ::arrow::ListType {\n \n Review comment:\n   Eh, I won't rock the boat. Let's look into it another time\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-22T15:43:40.470+0000",
                    "updated": "2018-09-22T15:43:40.470+0000",
                    "started": "2018-09-22T15:43:40.470+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "146788",
                    "issueId": "13186361"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186361/worklog/146789",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm closed pull request #2592: ARROW-3279: [C++] Allow linking Arrow tests dynamically on Windows\nURL: https://github.com/apache/arrow/pull/2592\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/ci/cpp-python-msvc-build.bat b/ci/cpp-python-msvc-build.bat\nindex 9ffb4f129d..3237e1880a 100644\n--- a/ci/cpp-python-msvc-build.bat\n+++ b/ci/cpp-python-msvc-build.bat\n@@ -18,12 +18,18 @@\n @echo on\n \n if \"%JOB%\" == \"Static_Crt_Build\" (\n+  @rem Since we link the CRT statically, we should also disable building\n+  @rem the Arrow shared library to link the tests statically, otherwise\n+  @rem the Arrow DLL and the tests end up using a different instance of\n+  @rem the CRT, which wreaks havoc.\n+\n   mkdir cpp\\build-debug\n   pushd cpp\\build-debug\n \n   cmake -G \"%GENERATOR%\" ^\n         -DARROW_USE_STATIC_CRT=ON ^\n         -DARROW_BOOST_USE_SHARED=OFF ^\n+        -DARROW_BUILD_SHARED=OFF ^\n         -DCMAKE_BUILD_TYPE=Debug ^\n         -DARROW_CXXFLAGS=\"/MP\" ^\n         ..  || exit /B\n@@ -38,6 +44,7 @@ if \"%JOB%\" == \"Static_Crt_Build\" (\n   cmake -G \"%GENERATOR%\" ^\n         -DARROW_USE_STATIC_CRT=ON ^\n         -DARROW_BOOST_USE_SHARED=OFF ^\n+        -DARROW_BUILD_SHARED=OFF ^\n         -DCMAKE_BUILD_TYPE=Release ^\n         -DARROW_CXXFLAGS=\"/WX /MP\" ^\n         ..  || exit /B\n@@ -50,6 +57,10 @@ if \"%JOB%\" == \"Static_Crt_Build\" (\n   exit /B 0\n )\n \n+@rem In the configurations below we disable building the Arrow static library\n+@rem to save some time.  Unfortunately this will still build the Parquet static\n+@rem library because of PARQUET-1420 (Thrift-generated symbols not exported in DLL).\n+\n if \"%JOB%\" == \"Build_Debug\" (\n   mkdir cpp\\build-debug\n   pushd cpp\\build-debug\n@@ -57,6 +68,7 @@ if \"%JOB%\" == \"Build_Debug\" (\n   cmake -G \"%GENERATOR%\" ^\n         -DARROW_BOOST_USE_SHARED=OFF ^\n         -DCMAKE_BUILD_TYPE=%CONFIGURATION% ^\n+        -DARROW_BUILD_STATIC=OFF ^\n         -DARROW_CXXFLAGS=\"/MP\" ^\n         ..  || exit /B\n \n@@ -111,6 +123,7 @@ cmake -G \"%GENERATOR%\" ^\n       -DCMAKE_INSTALL_PREFIX=%CONDA_PREFIX%\\Library ^\n       -DARROW_BOOST_USE_SHARED=OFF ^\n       -DCMAKE_BUILD_TYPE=%CONFIGURATION% ^\n+      -DARROW_BUILD_STATIC=OFF ^\n       -DARROW_CXXFLAGS=\"/WX /MP\" ^\n       -DARROW_PARQUET=ON ^\n       -DARROW_PYTHON=ON ^\ndiff --git a/cpp/CMakeLists.txt b/cpp/CMakeLists.txt\nindex 23ef7d0547..35114856f1 100644\n--- a/cpp/CMakeLists.txt\n+++ b/cpp/CMakeLists.txt\n@@ -295,7 +295,9 @@ Always OFF if building binaries\"\n endif()\n \n if(ARROW_BUILD_TESTS OR ARROW_BUILD_BENCHMARKS)\n-  set(ARROW_BUILD_STATIC ON)\n+  if (NOT MSVC AND NOT ARROW_BUILD_STATIC)\n+    message(FATAL_ERROR \"ARROW_BUILD_TESTS needs ARROW_BUILD_STATIC\")\n+  endif ()\n   set(ARROW_WITH_BROTLI ON)\n   set(ARROW_WITH_LZ4 ON)\n   set(ARROW_WITH_SNAPPY ON)\n@@ -674,11 +676,22 @@ if (NOT MSVC)\n     ${CMAKE_DL_LIBS})\n endif()\n \n-set(ARROW_MIN_TEST_LIBS\n-  arrow_static\n-  ${ARROW_STATIC_LINK_LIBS}\n-  gtest_main\n-  gtest)\n+if (ARROW_BUILD_STATIC)\n+  set(ARROW_MIN_TEST_LIBS\n+    arrow_static\n+    ${ARROW_STATIC_LINK_LIBS}\n+    gtest_main\n+    gtest)\n+else ()\n+  set(ARROW_MIN_TEST_LIBS\n+    arrow_shared\n+    ${ARROW_LINK_LIBS}\n+    ${BOOST_SYSTEM_LIBRARY}\n+    ${BOOST_FILESYSTEM_LIBRARY}\n+    ${BOOST_REGEX_LIBRARY}\n+    gtest_main\n+    gtest)\n+endif()\n \n if(NOT MSVC)\n   set(ARROW_MIN_TEST_LIBS\ndiff --git a/cpp/cmake_modules/BuildUtils.cmake b/cpp/cmake_modules/BuildUtils.cmake\nindex 3a77a46125..98c5d03196 100644\n--- a/cpp/cmake_modules/BuildUtils.cmake\n+++ b/cpp/cmake_modules/BuildUtils.cmake\n@@ -101,7 +101,7 @@ endfunction()\n \n # \\arg OUTPUTS list to append built targets to\n function(ADD_ARROW_LIB LIB_NAME)\n-  set(options)\n+  set(options BUILD_SHARED BUILD_STATIC)\n   set(one_value_args SHARED_LINK_FLAGS)\n   set(multi_value_args SOURCES OUTPUTS STATIC_LINK_LIBS STATIC_PRIVATE_LINK_LIBS SHARED_LINK_LIBS SHARED_PRIVATE_LINK_LIBS EXTRA_INCLUDES DEPENDENCIES)\n   cmake_parse_arguments(ARG \"${options}\" \"${one_value_args}\" \"${multi_value_args}\" ${ARGN})\n@@ -113,7 +113,21 @@ function(ADD_ARROW_LIB LIB_NAME)\n     set(${ARG_OUTPUTS})\n   endif()\n \n+  # Allow overriding ARROW_BUILD_SHARED and ARROW_BUILD_STATIC\n+  if (ARG_BUILD_SHARED)\n+    set(BUILD_SHARED ${ARG_BUILD_SHARED})\n+  else ()\n+    set(BUILD_SHARED ${ARROW_BUILD_SHARED})\n+  endif()\n+  if (ARG_BUILD_STATIC)\n+    set(BUILD_STATIC ${ARG_BUILD_STATIC})\n+  else ()\n+    set(BUILD_STATIC ${ARROW_BUILD_STATIC})\n+  endif()\n+\n   if(MSVC)\n+    # MSVC needs to compile C++ separately for each library kind (shared and static)\n+    # because of dllexport declarations\n     set(LIB_DEPS ${ARG_SOURCES})\n     set(EXTRA_DEPS ${ARG_DEPENDENCIES})\n \n@@ -121,6 +135,8 @@ function(ADD_ARROW_LIB LIB_NAME)\n       set(LIB_INCLUDES ${ARG_EXTRA_INCLUDES})\n     endif()\n   else()\n+    # Otherwise, generate a single \"objlib\" from all C++ modules and link\n+    # that \"objlib\" into each library kind, to avoid compiling twice\n     add_library(${LIB_NAME}_objlib OBJECT\n       ${ARG_SOURCES})\n     # Necessary to make static linking into other shared libraries work properly\n@@ -145,7 +161,7 @@ function(ADD_ARROW_LIB LIB_NAME)\n \n   set(RUNTIME_INSTALL_DIR bin)\n \n-  if (ARROW_BUILD_SHARED)\n+  if (BUILD_SHARED)\n     add_library(${LIB_NAME}_shared SHARED ${LIB_DEPS})\n     if (EXTRA_DEPS)\n       add_dependencies(${LIB_NAME}_shared ${EXTRA_DEPS})\n@@ -212,7 +228,7 @@ function(ADD_ARROW_LIB LIB_NAME)\n       ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR})\n   endif()\n \n-  if (ARROW_BUILD_STATIC)\n+  if (BUILD_STATIC)\n     add_library(${LIB_NAME}_static STATIC ${LIB_DEPS})\n     if(EXTRA_DEPS)\n       add_dependencies(${LIB_NAME}_static ${EXTRA_DEPS})\n@@ -366,7 +382,7 @@ function(ADD_ARROW_TEST REL_TEST_NAME)\n     endif()\n   endif()\n \n-  if(NO_TESTS OR NOT ARROW_BUILD_STATIC)\n+  if (NO_TESTS)\n     return()\n   endif()\n   get_filename_component(TEST_NAME ${REL_TEST_NAME} NAME_WE)\ndiff --git a/cpp/src/arrow/compute/kernels/util-internal.h b/cpp/src/arrow/compute/kernels/util-internal.h\nindex 8c4b86942b..78ef66266f 100644\n--- a/cpp/src/arrow/compute/kernels/util-internal.h\n+++ b/cpp/src/arrow/compute/kernels/util-internal.h\n@@ -23,6 +23,7 @@\n \n #include \"arrow/compute/kernel.h\"\n #include \"arrow/type_fwd.h\"\n+#include \"arrow/util/visibility.h\"\n \n namespace arrow {\n namespace compute {\n@@ -49,18 +50,23 @@ static inline void CopyData(const ArrayData& input, ArrayData* output) {\n \n namespace detail {\n \n+ARROW_EXPORT\n Status InvokeUnaryArrayKernel(FunctionContext* ctx, UnaryKernel* kernel,\n                               const Datum& value, std::vector<Datum>* outputs);\n \n+ARROW_EXPORT\n Status InvokeBinaryArrayKernel(FunctionContext* ctx, BinaryKernel* kernel,\n                                const Datum& left, const Datum& right,\n                                std::vector<Datum>* outputs);\n+ARROW_EXPORT\n Status InvokeBinaryArrayKernel(FunctionContext* ctx, BinaryKernel* kernel,\n                                const Datum& left, const Datum& right, Datum* output);\n \n+ARROW_EXPORT\n Datum WrapArraysLike(const Datum& value,\n                      const std::vector<std::shared_ptr<Array>>& arrays);\n \n+ARROW_EXPORT\n Datum WrapDatumsLike(const Datum& value, const std::vector<Datum>& datums);\n \n }  // namespace detail\ndiff --git a/cpp/src/arrow/io/mman.h b/cpp/src/arrow/io/mman.h\nindex e45c88efd5..76c441c9e2 100644\n--- a/cpp/src/arrow/io/mman.h\n+++ b/cpp/src/arrow/io/mman.h\n@@ -15,10 +15,11 @@\n \n #endif\n \n+#include \"arrow/util/windows_compatibility.h\"\n+\n #include <errno.h>\n #include <io.h>\n #include <sys/types.h>\n-#include <windows.h>\n \n #define PROT_NONE 0\n #define PROT_READ 1\ndiff --git a/cpp/src/arrow/ipc/json-internal.h b/cpp/src/arrow/ipc/json-internal.h\nindex 92afc14447..8becee6cd7 100644\n--- a/cpp/src/arrow/ipc/json-internal.h\n+++ b/cpp/src/arrow/ipc/json-internal.h\n@@ -95,21 +95,25 @@ namespace ipc {\n namespace internal {\n namespace json {\n \n-Status WriteSchema(const Schema& schema, RjWriter* writer);\n-Status WriteRecordBatch(const RecordBatch& batch, RjWriter* writer);\n-Status WriteArray(const std::string& name, const Array& array, RjWriter* writer);\n+ARROW_EXPORT Status WriteSchema(const Schema& schema, RjWriter* writer);\n+ARROW_EXPORT Status WriteRecordBatch(const RecordBatch& batch, RjWriter* writer);\n+ARROW_EXPORT Status WriteArray(const std::string& name, const Array& array,\n+                               RjWriter* writer);\n \n-Status ReadSchema(const rj::Value& json_obj, MemoryPool* pool,\n-                  std::shared_ptr<Schema>* schema);\n+ARROW_EXPORT Status ReadSchema(const rj::Value& json_obj, MemoryPool* pool,\n+                               std::shared_ptr<Schema>* schema);\n \n-Status ReadRecordBatch(const rj::Value& json_obj, const std::shared_ptr<Schema>& schema,\n-                       MemoryPool* pool, std::shared_ptr<RecordBatch>* batch);\n+ARROW_EXPORT Status ReadRecordBatch(const rj::Value& json_obj,\n+                                    const std::shared_ptr<Schema>& schema,\n+                                    MemoryPool* pool,\n+                                    std::shared_ptr<RecordBatch>* batch);\n \n-Status ReadArray(MemoryPool* pool, const rj::Value& json_obj,\n-                 const std::shared_ptr<DataType>& type, std::shared_ptr<Array>* array);\n+ARROW_EXPORT Status ReadArray(MemoryPool* pool, const rj::Value& json_obj,\n+                              const std::shared_ptr<DataType>& type,\n+                              std::shared_ptr<Array>* array);\n \n-Status ReadArray(MemoryPool* pool, const rj::Value& json_obj, const Schema& schema,\n-                 std::shared_ptr<Array>* array);\n+ARROW_EXPORT Status ReadArray(MemoryPool* pool, const rj::Value& json_obj,\n+                              const Schema& schema, std::shared_ptr<Array>* array);\n \n }  // namespace json\n }  // namespace internal\ndiff --git a/cpp/src/arrow/ipc/json.h b/cpp/src/arrow/ipc/json.h\nindex 674c3745ed..5c00555de8 100644\n--- a/cpp/src/arrow/ipc/json.h\n+++ b/cpp/src/arrow/ipc/json.h\n@@ -41,7 +41,7 @@ namespace json {\n /// \\brief Write the JSON representation of an Arrow record batch file or stream\n ///\n /// This is used for integration testing\n-class JsonWriter {\n+class ARROW_EXPORT JsonWriter {\n  public:\n   ~JsonWriter();\n \n@@ -74,7 +74,7 @@ class JsonWriter {\n /// \\brief Read the JSON representation of an Arrow record batch file or stream\n ///\n /// This is used for integration testing\n-class JsonReader {\n+class ARROW_EXPORT JsonReader {\n  public:\n   ~JsonReader();\n \ndiff --git a/cpp/src/arrow/python/CMakeLists.txt b/cpp/src/arrow/python/CMakeLists.txt\nindex 59c6a0b3ab..0e55ee498b 100644\n--- a/cpp/src/arrow/python/CMakeLists.txt\n+++ b/cpp/src/arrow/python/CMakeLists.txt\n@@ -146,7 +146,7 @@ if (ARROW_BUILD_TESTS)\n \n   set(ARROW_PYTHON_MIN_TEST_LIBS\n     arrow_python_test_main\n-    arrow_python_static\n+    arrow_python_shared\n     arrow_shared)\n \n   set(ARROW_PYTHON_TEST_LINK_LIBS ${ARROW_PYTHON_MIN_TEST_LIBS})\ndiff --git a/cpp/src/arrow/python/decimal.h b/cpp/src/arrow/python/decimal.h\nindex fada81daa9..dd382d14e0 100644\n--- a/cpp/src/arrow/python/decimal.h\n+++ b/cpp/src/arrow/python/decimal.h\n@@ -21,6 +21,7 @@\n #include <string>\n \n #include \"arrow/type.h\"\n+#include \"arrow/util/visibility.h\"\n \n namespace arrow {\n \n@@ -37,18 +38,21 @@ class OwnedRef;\n namespace internal {\n \n // \\brief Import the Python Decimal type\n+ARROW_EXPORT\n Status ImportDecimalType(OwnedRef* decimal_type);\n \n // \\brief Convert a Python Decimal object to a C++ string\n // \\param[in] python_decimal A Python decimal.Decimal instance\n // \\param[out] The string representation of the Python Decimal instance\n // \\return The status of the operation\n+ARROW_EXPORT\n Status PythonDecimalToString(PyObject* python_decimal, std::string* out);\n \n // \\brief Convert a C++ std::string to a Python Decimal instance\n // \\param[in] decimal_constructor The decimal type object\n // \\param[in] decimal_string A decimal string\n // \\return An instance of decimal.Decimal\n+ARROW_EXPORT\n PyObject* DecimalFromString(PyObject* decimal_constructor,\n                             const std::string& decimal_string);\n \n@@ -57,18 +61,21 @@ PyObject* DecimalFromString(PyObject* decimal_constructor,\n // \\param[in] arrow_type An instance of arrow::DecimalType\n // \\param[out] out A pointer to a Decimal128\n // \\return The status of the operation\n+ARROW_EXPORT\n Status DecimalFromPythonDecimal(PyObject* python_decimal, const DecimalType& arrow_type,\n                                 Decimal128* out);\n \n // \\brief Check whether obj is an instance of Decimal\n+ARROW_EXPORT\n bool PyDecimal_Check(PyObject* obj);\n \n // \\brief Check whether obj is nan. This function will abort the program if the argument\n // is not a Decimal instance\n+ARROW_EXPORT\n bool PyDecimal_ISNAN(PyObject* obj);\n \n // \\brief Helper class to track and update the precision and scale of a decimal\n-class DecimalMetadata {\n+class ARROW_EXPORT DecimalMetadata {\n  public:\n   DecimalMetadata();\n   DecimalMetadata(int32_t precision, int32_t scale);\ndiff --git a/cpp/src/arrow/python/helpers.h b/cpp/src/arrow/python/helpers.h\nindex 078f02d972..4a7c8f12c1 100644\n--- a/cpp/src/arrow/python/helpers.h\n+++ b/cpp/src/arrow/python/helpers.h\n@@ -53,6 +53,7 @@ namespace internal {\n // \\brief Import a Python module\n // \\param[in] module_name The name of the module\n // \\param[out] ref The OwnedRef containing the module PyObject*\n+ARROW_EXPORT\n Status ImportModule(const std::string& module_name, OwnedRef* ref);\n \n // \\brief Import an object from a Python module\n@@ -60,6 +61,7 @@ Status ImportModule(const std::string& module_name, OwnedRef* ref);\n // \\param[in] name The name of the object to import\n // \\param[out] ref The OwnedRef containing the \\c name attribute of the Python module \\c\n // module\n+ARROW_EXPORT\n Status ImportFromModule(const OwnedRef& module, const std::string& name, OwnedRef* ref);\n \n // \\brief Check whether obj is an integer, independent of Python versions.\n@@ -72,9 +74,11 @@ inline bool IsPyInteger(PyObject* obj) {\n }\n \n // \\brief Use pandas missing value semantics to check if a value is null\n+ARROW_EXPORT\n bool PandasObjectIsNull(PyObject* obj);\n \n // \\brief Check whether obj is a floating-point NaN\n+ARROW_EXPORT\n bool PyFloat_IsNaN(PyObject* obj);\n \n inline bool IsPyBinary(PyObject* obj) {\n@@ -89,15 +93,19 @@ template <typename Int>\n Status CIntFromPython(PyObject* obj, Int* out, const std::string& overflow_message = \"\");\n \n // \\brief Convert a Python unicode string to a std::string\n+ARROW_EXPORT\n Status PyUnicode_AsStdString(PyObject* obj, std::string* out);\n \n // \\brief Convert a Python bytes object to a std::string\n+ARROW_EXPORT\n std::string PyBytes_AsStdString(PyObject* obj);\n \n // \\brief Call str() on the given object and return the result as a std::string\n+ARROW_EXPORT\n Status PyObject_StdStringStr(PyObject* obj, std::string* out);\n \n // \\brief Return the repr() of the given object (always succeeds)\n+ARROW_EXPORT\n std::string PyObject_StdStringRepr(PyObject* obj);\n \n // \\brief Cast the given size to int32_t, with error checking\n@@ -113,9 +121,12 @@ inline Status CastSize(Py_ssize_t size, int32_t* out,\n \n // \\brief Print the Python object's __str__ form along with the passed error\n // message\n+ARROW_EXPORT\n Status InvalidValue(PyObject* obj, const std::string& why);\n \n+ARROW_EXPORT\n Status IntegerScalarToDoubleSafe(PyObject* obj, double* result);\n+ARROW_EXPORT\n Status IntegerScalarToFloat32Safe(PyObject* obj, float* result);\n \n }  // namespace internal\ndiff --git a/cpp/src/arrow/stl.h b/cpp/src/arrow/stl.h\nindex 1e31ca769a..5c632b3175 100644\n--- a/cpp/src/arrow/stl.h\n+++ b/cpp/src/arrow/stl.h\n@@ -35,11 +35,13 @@ namespace stl {\n template <typename T>\n struct ConversionTraits {};\n \n-#define ARROW_STL_CONVERSION(c_type, ArrowType_) \\\n-  template <>                                    \\\n-  struct ConversionTraits<c_type> {              \\\n-    using ArrowType = ArrowType_;                \\\n-    constexpr static bool nullable = false;      \\\n+#define ARROW_STL_CONVERSION(c_type, ArrowType_)    \\\n+  template <>                                       \\\n+  struct ConversionTraits<c_type> {                 \\\n+    static std::shared_ptr<DataType> arrow_type() { \\\n+      return std::make_shared<ArrowType_>();        \\\n+    }                                               \\\n+    constexpr static bool nullable = false;         \\\n   };\n \n ARROW_STL_CONVERSION(bool, BooleanType)\n@@ -57,7 +59,9 @@ ARROW_STL_CONVERSION(std::string, StringType)\n \n template <typename value_c_type>\n struct ConversionTraits<std::vector<value_c_type>> {\n-  using ArrowType = meta::ListType<typename ConversionTraits<value_c_type>::ArrowType>;\n+  static std::shared_ptr<DataType> arrow_type() {\n+    return list(ConversionTraits<value_c_type>::arrow_type());\n+  }\n   constexpr static bool nullable = false;\n };\n \n@@ -68,7 +72,6 @@ struct ConversionTraits<std::vector<value_c_type>> {\n template <typename Tuple, std::size_t N = std::tuple_size<Tuple>::value>\n struct SchemaFromTuple {\n   using Element = typename std::tuple_element<N - 1, Tuple>::type;\n-  using ArrowType = typename ConversionTraits<Element>::ArrowType;\n \n   // Implementations that take a vector-like object for the column names.\n \n@@ -79,8 +82,8 @@ struct SchemaFromTuple {\n       const std::vector<std::string>& names) {\n     std::vector<std::shared_ptr<Field>> ret =\n         SchemaFromTuple<Tuple, N - 1>::MakeSchemaRecursion(names);\n-    ret.push_back(field(names[N - 1], std::make_shared<ArrowType>(),\n-                        ConversionTraits<Element>::nullable));\n+    std::shared_ptr<DataType> type = ConversionTraits<Element>::arrow_type();\n+    ret.push_back(field(names[N - 1], type, ConversionTraits<Element>::nullable));\n     return ret;\n   }\n \n@@ -108,8 +111,9 @@ struct SchemaFromTuple {\n       const NamesTuple& names) {\n     std::vector<std::shared_ptr<Field>> ret =\n         SchemaFromTuple<Tuple, N - 1>::MakeSchemaRecursionT(names);\n-    ret.push_back(field(std::get<N - 1>(names), std::make_shared<ArrowType>(),\n-                        ConversionTraits<Element>::nullable));\n+    std::shared_ptr<DataType> type = ConversionTraits<Element>::arrow_type();\n+    ret.push_back(\n+        field(std::get<N - 1>(names), type, ConversionTraits<Element>::nullable));\n     return ret;\n   }\n \ndiff --git a/cpp/src/arrow/table_builder.h b/cpp/src/arrow/table_builder.h\nindex 8a13f4d1b8..33a0705243 100644\n--- a/cpp/src/arrow/table_builder.h\n+++ b/cpp/src/arrow/table_builder.h\n@@ -38,7 +38,7 @@ class Schema;\n /// \\class RecordBatchBuilder\n /// \\brief Helper class for creating record batches iteratively given a known\n /// schema\n-class RecordBatchBuilder {\n+class ARROW_EXPORT RecordBatchBuilder {\n  public:\n   /// \\brief Create an initialize a RecordBatchBuilder\n   /// \\param[in] schema The schema for the record batch\n@@ -93,6 +93,8 @@ class RecordBatchBuilder {\n   std::shared_ptr<Schema> schema() const { return schema_; }\n \n  private:\n+  ARROW_DISALLOW_COPY_AND_ASSIGN(RecordBatchBuilder);\n+\n   RecordBatchBuilder(const std::shared_ptr<Schema>& schema, MemoryPool* pool,\n                      int64_t initial_capacity);\n \ndiff --git a/cpp/src/arrow/type.h b/cpp/src/arrow/type.h\nindex 178df73ad5..f5d2e533e8 100644\n--- a/cpp/src/arrow/type.h\n+++ b/cpp/src/arrow/type.h\n@@ -403,19 +403,6 @@ class ARROW_EXPORT ListType : public NestedType {\n   std::string name() const override { return \"list\"; }\n };\n \n-namespace meta {\n-\n-/// Additional ListType class that can be instantiated with only compile-time arguments.\n-template <typename T>\n-class ARROW_EXPORT ListType : public ::arrow::ListType {\n- public:\n-  using ValueType = T;\n-\n-  ListType() : ::arrow::ListType(std::make_shared<T>()) {}\n-};\n-\n-}  // namespace meta\n-\n // BinaryType type is represents lists of 1-byte values.\n class ARROW_EXPORT BinaryType : public DataType, public NoExtraMeta {\n  public:\ndiff --git a/cpp/src/arrow/util/cpu-info.cc b/cpp/src/arrow/util/cpu-info.cc\nindex 9280ac84a7..5a29ef5fae 100644\n--- a/cpp/src/arrow/util/cpu-info.cc\n+++ b/cpp/src/arrow/util/cpu-info.cc\n@@ -32,9 +32,9 @@\n \n #ifdef _WIN32\n #include <intrin.h>\n-#include <windows.h>\n #include <array>\n #include <bitset>\n+#include \"arrow/util/windows_compatibility.h\"\n \n #endif\n \ndiff --git a/cpp/src/arrow/util/io-util.h b/cpp/src/arrow/util/io-util.h\nindex c85de856b6..7d1f40ecf3 100644\n--- a/cpp/src/arrow/util/io-util.h\n+++ b/cpp/src/arrow/util/io-util.h\n@@ -34,7 +34,7 @@ namespace arrow {\n namespace io {\n \n // Output stream that just writes to stdout.\n-class StdoutStream : public OutputStream {\n+class ARROW_EXPORT StdoutStream : public OutputStream {\n  public:\n   StdoutStream() : pos_(0) { set_mode(FileMode::WRITE); }\n   ~StdoutStream() override {}\n@@ -57,7 +57,7 @@ class StdoutStream : public OutputStream {\n };\n \n // Output stream that just writes to stderr.\n-class StderrStream : public OutputStream {\n+class ARROW_EXPORT StderrStream : public OutputStream {\n  public:\n   StderrStream() : pos_(0) { set_mode(FileMode::WRITE); }\n   ~StderrStream() override {}\n@@ -80,7 +80,7 @@ class StderrStream : public OutputStream {\n };\n \n // Input stream that just reads from stdin.\n-class StdinStream : public InputStream {\n+class ARROW_EXPORT StdinStream : public InputStream {\n  public:\n   StdinStream() : pos_(0) { set_mode(FileMode::READ); }\n   ~StdinStream() override {}\n@@ -143,35 +143,55 @@ struct PlatformFilename {\n };\n #endif\n \n+ARROW_EXPORT\n Status FileNameFromString(const std::string& file_name, PlatformFilename* out);\n \n+ARROW_EXPORT\n Status FileOpenReadable(const PlatformFilename& file_name, int* fd);\n+ARROW_EXPORT\n Status FileOpenWritable(const PlatformFilename& file_name, bool write_only, bool truncate,\n                         bool append, int* fd);\n \n+ARROW_EXPORT\n Status FileRead(int fd, uint8_t* buffer, const int64_t nbytes, int64_t* bytes_read);\n+ARROW_EXPORT\n Status FileReadAt(int fd, uint8_t* buffer, int64_t position, int64_t nbytes,\n                   int64_t* bytes_read);\n+ARROW_EXPORT\n Status FileWrite(int fd, const uint8_t* buffer, const int64_t nbytes);\n+ARROW_EXPORT\n Status FileTruncate(int fd, const int64_t size);\n \n+ARROW_EXPORT\n Status FileTell(int fd, int64_t* pos);\n+ARROW_EXPORT\n Status FileSeek(int fd, int64_t pos);\n+ARROW_EXPORT\n Status FileSeek(int fd, int64_t pos, int whence);\n+ARROW_EXPORT\n Status FileGetSize(int fd, int64_t* size);\n \n+ARROW_EXPORT\n Status FileClose(int fd);\n \n+ARROW_EXPORT\n Status CreatePipe(int fd[2]);\n \n+ARROW_EXPORT\n Status MemoryMapRemap(void* addr, size_t old_size, size_t new_size, int fildes,\n                       void** new_addr);\n \n+ARROW_EXPORT\n Status GetEnvVar(const char* name, std::string* out);\n+ARROW_EXPORT\n Status GetEnvVar(const std::string& name, std::string* out);\n+ARROW_EXPORT\n Status SetEnvVar(const char* name, const char* value);\n+ARROW_EXPORT\n Status SetEnvVar(const std::string& name, const std::string& value);\n+ARROW_EXPORT\n Status DelEnvVar(const char* name);\n+ARROW_EXPORT\n Status DelEnvVar(const std::string& name);\n \n }  // namespace internal\ndiff --git a/cpp/src/arrow/util/logging.h b/cpp/src/arrow/util/logging.h\nindex 49c679f9e1..b9266c3e49 100644\n--- a/cpp/src/arrow/util/logging.h\n+++ b/cpp/src/arrow/util/logging.h\n@@ -22,6 +22,8 @@\n #include <memory>\n #include <string>\n \n+#include \"arrow/util/visibility.h\"\n+\n namespace arrow {\n \n enum class ArrowLogLevel : int {\n@@ -106,7 +108,7 @@ enum class ArrowLogLevel : int {\n // In logging.cc, we can choose different log libs using different macros.\n \n // This is also a null log which does not output anything.\n-class ArrowLogBase {\n+class ARROW_EXPORT ArrowLogBase {\n  public:\n   virtual ~ArrowLogBase() {}\n \n@@ -124,7 +126,7 @@ class ArrowLogBase {\n   virtual std::ostream& Stream() { return std::cerr; }\n };\n \n-class ArrowLog : public ArrowLogBase {\n+class ARROW_EXPORT ArrowLog : public ArrowLogBase {\n  public:\n   ArrowLog(const char* file_name, int line_number, ArrowLogLevel severity);\n \n@@ -169,7 +171,7 @@ class ArrowLog : public ArrowLogBase {\n \n // This class make ARROW_CHECK compilation pass to change the << operator to void.\n // This class is copied from glog.\n-class Voidify {\n+class ARROW_EXPORT Voidify {\n  public:\n   Voidify() {}\n   // This has to be an operator with a precedence lower than << but\ndiff --git a/cpp/src/arrow/util/windows_compatibility.h b/cpp/src/arrow/util/windows_compatibility.h\nindex aeef810cf8..7b70e287c3 100644\n--- a/cpp/src/arrow/util/windows_compatibility.h\n+++ b/cpp/src/arrow/util/windows_compatibility.h\n@@ -24,6 +24,8 @@\n #define NOMINMAX\n #endif\n \n+#define WIN32_LEAN_AND_MEAN\n+\n #include <winsock2.h>\n #include <windows.h>\n \ndiff --git a/cpp/src/parquet/CMakeLists.txt b/cpp/src/parquet/CMakeLists.txt\nindex 8a37dc7522..3d46674aca 100644\n--- a/cpp/src/parquet/CMakeLists.txt\n+++ b/cpp/src/parquet/CMakeLists.txt\n@@ -91,23 +91,6 @@ set(PARQUET_TEST_LINK_LIBS\n   parquet_static\n   thriftstatic)\n \n-set(PARQUET_TEST_SHARED_LINK_LIBS\n-  ${PARQUET_MIN_TEST_LIBS}\n-  parquet_shared)\n-\n-#############################################################\n-# Benchmark linking\n-\n-if (PARQUET_BUILD_STATIC)\n-  set(PARQUET_BENCHMARK_LINK_LIBS\n-    parquet_benchmark_main\n-    parquet_static)\n-else()\n-  set(PARQUET_BENCHMARK_LINK_LIBS\n-    parquet_benchmark_main\n-    parquet_shared)\n-endif()\n-\n ############################################################\n # Generated Thrift sources\n \n@@ -161,8 +144,8 @@ set(PARQUET_SRCS\n   util/memory.cc\n )\n \n-# # Ensure that thrift compilation is done before using its generated headers\n-# # in parquet code.\n+# Ensure that thrift compilation is done before using its generated headers\n+# in parquet code.\n add_custom_target(parquet-thrift-deps ALL\n   DEPENDS ${THRIFT_OUTPUT_FILES})\n set(PARQUET_DEPENDENCIES ${PARQUET_DEPENDENCIES} parquet-thrift-deps)\n@@ -189,7 +172,16 @@ if(NOT APPLE AND NOT MSVC)\n   set(SHARED_LINK_FLAGS \"-Wl,--version-script=${CMAKE_CURRENT_SOURCE_DIR}/src/parquet/symbols.map\")\n endif()\n \n+# Because of PARQUET-1420 (Thrift-generated symbols not exported in DLL),\n+# parquet tests must be linked against the static parquet lib.\n+if (NO_TESTS)\n+  set(PARQUET_LIB_OPTIONS)\n+else ()\n+  set(PARQUET_LIB_OPTIONS \"BUILD_STATIC\")\n+endif()\n+\n ADD_ARROW_LIB(parquet\n+  ${PARQUET_LIB_OPTIONS}\n   SOURCES ${PARQUET_SRCS}\n   OUTPUTS PARQUET_LIBRARIES\n   DEPENDENCIES ${PARQUET_DEPENDENCIES}\n@@ -276,6 +268,9 @@ ADD_PARQUET_TEST(types-test)\n ADD_PARQUET_TEST(reader-test)\n ADD_PARQUET_TEST(schema-test)\n \n+#############################################################\n+# Benchmark linking\n+\n set(PARQUET_BENCHMARK_LINK_LIBRARIES\n   arrow_benchmark_main\n   parquet_static\ndiff --git a/cpp/src/parquet/bloom_filter.h b/cpp/src/parquet/bloom_filter.h\nindex 876f70382a..918780e049 100644\n--- a/cpp/src/parquet/bloom_filter.h\n+++ b/cpp/src/parquet/bloom_filter.h\n@@ -26,6 +26,7 @@\n #include \"parquet/hasher.h\"\n #include \"parquet/types.h\"\n #include \"parquet/util/memory.h\"\n+#include \"parquet/util/visibility.h\"\n \n namespace parquet {\n class OutputStream;\n@@ -33,7 +34,7 @@ class OutputStream;\n // A Bloom filter is a compact structure to indicate whether an item is not in a set or\n // probably in a set. The Bloom filter usually consists of a bit set that represents a\n // set of elements, a hash strategy and a Bloom filter algorithm.\n-class BloomFilter {\n+class PARQUET_EXPORT BloomFilter {\n  public:\n   // Maximum Bloom filter size, it sets to HDFS default block size 128MB\n   // This value will be reconsidered when implementing Bloom filter producer.\n@@ -117,7 +118,7 @@ class BloomFilter {\n //\n // This implementation sets 8 bits in each tiny Bloom filter. Each tiny Bloom\n // filter is 32 bytes to take advantage of 32-byte SIMD instructions.\n-class BlockSplitBloomFilter : public BloomFilter {\n+class PARQUET_EXPORT BlockSplitBloomFilter : public BloomFilter {\n  public:\n   /// The constructor of BlockSplitBloomFilter. It uses murmur3_x64_128 as hash function.\n   BlockSplitBloomFilter();\ndiff --git a/cpp/src/parquet/murmur3.h b/cpp/src/parquet/murmur3.h\nindex 84792f3605..527a8f3124 100644\n--- a/cpp/src/parquet/murmur3.h\n+++ b/cpp/src/parquet/murmur3.h\n@@ -26,13 +26,14 @@\n \n #include \"parquet/hasher.h\"\n #include \"parquet/types.h\"\n+#include \"parquet/util/visibility.h\"\n \n namespace parquet {\n \n /// Source:\n /// https://github.com/aappleby/smhasher/blob/master/src/MurmurHash3.cpp\n /// (Modified to adapt to coding conventions and to inherit the Hasher abstract class)\n-class MurmurHash3 : public Hasher {\n+class PARQUET_EXPORT MurmurHash3 : public Hasher {\n  public:\n   MurmurHash3() : seed_(DEFAULT_SEED) {}\n   uint64_t Hash(int32_t value) const override;\ndiff --git a/cpp/src/parquet/schema-internal.h b/cpp/src/parquet/schema-internal.h\nindex 0be5c2cf7f..66df6ce630 100644\n--- a/cpp/src/parquet/schema-internal.h\n+++ b/cpp/src/parquet/schema-internal.h\n@@ -26,11 +26,15 @@\n #include <vector>\n \n #include \"parquet/schema.h\"\n-#include \"parquet/thrift.h\"\n #include \"parquet/types.h\"\n #include \"parquet/util/macros.h\"\n \n namespace parquet {\n+\n+namespace format {\n+class SchemaElement;\n+}\n+\n namespace schema {\n \n // ----------------------------------------------------------------------\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-22T15:44:32.930+0000",
                    "updated": "2018-09-22T15:44:32.930+0000",
                    "started": "2018-09-22T15:44:32.930+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "146789",
                    "issueId": "13186361"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186361/worklog/185297",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ktf commented on pull request #2592: ARROW-3279: [C++] Allow linking Arrow tests dynamically on Windows\nURL: https://github.com/apache/arrow/pull/2592#discussion_r247937275\n \n \n\n ##########\n File path: cpp/src/arrow/stl.h\n ##########\n @@ -35,11 +35,13 @@ namespace stl {\n template <typename T>\n struct ConversionTraits {};\n \n-#define ARROW_STL_CONVERSION(c_type, ArrowType_) \\\n-  template <>                                    \\\n-  struct ConversionTraits<c_type> {              \\\n-    using ArrowType = ArrowType_;                \\\n \n Review comment:\n   This removes the ability to go from a c_type to an ArrowType, which I was using in some code. What was the issue which brought to it being removed? What is the alternative method to do the same? Do I need to implement it myself?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-15T15:27:26.723+0000",
                    "updated": "2019-01-15T15:27:26.723+0000",
                    "started": "2019-01-15T15:27:26.723+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "185297",
                    "issueId": "13186361"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186361/worklog/185300",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "xhochy commented on pull request #2592: ARROW-3279: [C++] Allow linking Arrow tests dynamically on Windows\nURL: https://github.com/apache/arrow/pull/2592#discussion_r247940065\n \n \n\n ##########\n File path: cpp/src/arrow/stl.h\n ##########\n @@ -35,11 +35,13 @@ namespace stl {\n template <typename T>\n struct ConversionTraits {};\n \n-#define ARROW_STL_CONVERSION(c_type, ArrowType_) \\\n-  template <>                                    \\\n-  struct ConversionTraits<c_type> {              \\\n-    using ArrowType = ArrowType_;                \\\n \n Review comment:\n   This does not remove it, see below. This is just a reindentation of the existing code.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-15T15:33:43.990+0000",
                    "updated": "2019-01-15T15:33:43.990+0000",
                    "started": "2019-01-15T15:33:43.989+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "185300",
                    "issueId": "13186361"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186361/worklog/185301",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #2592: ARROW-3279: [C++] Allow linking Arrow tests dynamically on Windows\nURL: https://github.com/apache/arrow/pull/2592#discussion_r247940280\n \n \n\n ##########\n File path: cpp/src/arrow/stl.h\n ##########\n @@ -35,11 +35,13 @@ namespace stl {\n template <typename T>\n struct ConversionTraits {};\n \n-#define ARROW_STL_CONVERSION(c_type, ArrowType_) \\\n-  template <>                                    \\\n-  struct ConversionTraits<c_type> {              \\\n-    using ArrowType = ArrowType_;                \\\n \n Review comment:\n   The `arrow_type()` method does the same, but at runtime.\r\n   The issue was the `ListType<>` template class which produced linker issues on Windows.\r\n   \r\n   What do you need to know at compile-time exactly? Just the type id (e.g. `Type::INT8`)?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-15T15:34:12.303+0000",
                    "updated": "2019-01-15T15:34:12.303+0000",
                    "started": "2019-01-15T15:34:12.301+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "185301",
                    "issueId": "13186361"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186361/worklog/185303",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #2592: ARROW-3279: [C++] Allow linking Arrow tests dynamically on Windows\nURL: https://github.com/apache/arrow/pull/2592#discussion_r247941730\n \n \n\n ##########\n File path: cpp/src/arrow/stl.h\n ##########\n @@ -35,11 +35,13 @@ namespace stl {\n template <typename T>\n struct ConversionTraits {};\n \n-#define ARROW_STL_CONVERSION(c_type, ArrowType_) \\\n-  template <>                                    \\\n-  struct ConversionTraits<c_type> {              \\\n-    using ArrowType = ArrowType_;                \\\n \n Review comment:\n   @pitrou  I would assume yes, compile time resolving of primitive type. Note that I implemented this in a local patch then threw it away because I got around it.\r\n   \r\n   I'd propose that we make this explicit in `type_traits.h` as this was the place I first looked for. Shall I open a jira ticket?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-15T15:36:54.582+0000",
                    "updated": "2019-01-15T15:36:54.582+0000",
                    "started": "2019-01-15T15:36:54.581+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "185303",
                    "issueId": "13186361"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186361/worklog/185304",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #2592: ARROW-3279: [C++] Allow linking Arrow tests dynamically on Windows\nURL: https://github.com/apache/arrow/pull/2592#discussion_r247942165\n \n \n\n ##########\n File path: cpp/src/arrow/stl.h\n ##########\n @@ -35,11 +35,13 @@ namespace stl {\n template <typename T>\n struct ConversionTraits {};\n \n-#define ARROW_STL_CONVERSION(c_type, ArrowType_) \\\n-  template <>                                    \\\n-  struct ConversionTraits<c_type> {              \\\n-    using ArrowType = ArrowType_;                \\\n \n Review comment:\n   Yes, a mapping from a C type to the corresponding arrow DataType class would be useful.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-15T15:37:45.418+0000",
                    "updated": "2019-01-15T15:37:45.418+0000",
                    "started": "2019-01-15T15:37:45.418+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "185304",
                    "issueId": "13186361"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186361/worklog/185306",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ktf commented on pull request #2592: ARROW-3279: [C++] Allow linking Arrow tests dynamically on Windows\nURL: https://github.com/apache/arrow/pull/2592#discussion_r247945266\n \n \n\n ##########\n File path: cpp/src/arrow/stl.h\n ##########\n @@ -35,11 +35,13 @@ namespace stl {\n template <typename T>\n struct ConversionTraits {};\n \n-#define ARROW_STL_CONVERSION(c_type, ArrowType_) \\\n-  template <>                                    \\\n-  struct ConversionTraits<c_type> {              \\\n-    using ArrowType = ArrowType_;                \\\n \n Review comment:\n   Yes, I need to do it at compile compile time, not runtime. Moving it to `type_traits.h` would be ok for me. Notice that I personally do not care about `ListType<>`, all I really need is the code starting from line 38.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-15T15:44:14.829+0000",
                    "updated": "2019-01-15T15:44:14.829+0000",
                    "started": "2019-01-15T15:44:14.829+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "185306",
                    "issueId": "13186361"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
            "id": "1",
            "description": "A problem which impairs or prevents the functions of the product.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
            "name": "Bug",
            "subtask": false,
            "avatarId": 21133
        },
        "timespent": 13200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@224b7304[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@49f4a303[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@76828fa7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@1a82d6cf[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@152621f2[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@5a31dde5[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@38ac9eb3[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@341403c7[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@10198d06[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@4413b415[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1816e322[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@c08d1dc[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 13200,
        "customfield_12312520": null,
        "customfield_12312521": "Sat Sep 22 15:44:30 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-09-22T15:44:30.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3279/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2018-09-20T14:06:54.000+0000",
        "updated": "2019-01-15T15:46:42.000+0000",
        "timeoriginalestimate": null,
        "description": "On Windows, C++ modules are compiled once for each library kind (static, shared). This means we do twice the work on e.g. AppVeyor. We should be able to link the Arrow tests with the Arrow DLL instead, at least on Windows.\r\n\r\nThings are a bit more complicated for Parquet because of PARQUET-1420.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "3h 40m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 13200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Allow linking Arrow tests dynamically on Windows",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186361/comment/16624720",
                    "id": "16624720",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 2592\n[https://github.com/apache/arrow/pull/2592]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-09-22T15:44:30.137+0000",
                    "updated": "2018-09-22T15:44:30.137+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|i3yb2n:",
        "customfield_12314139": null
    }
}