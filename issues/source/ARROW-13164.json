{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13385638",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13385638",
    "key": "ARROW-13164",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12350323",
                "id": "12350323",
                "description": "",
                "name": "6.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-10-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
            "name": "Minor",
            "id": "4"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=romainfrancois",
            "name": "romainfrancois",
            "key": "romainfrancois",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=romainfrancois&avatarId=35092",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=romainfrancois&avatarId=35092",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=romainfrancois&avatarId=35092",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=romainfrancois&avatarId=35092"
            },
            "displayName": "Romain Francois",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333008",
                "id": "12333008",
                "name": "R"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=romainfrancois",
            "name": "romainfrancois",
            "key": "romainfrancois",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=romainfrancois&avatarId=35092",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=romainfrancois&avatarId=35092",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=romainfrancois&avatarId=35092",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=romainfrancois&avatarId=35092"
            },
            "displayName": "Romain Francois",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=romainfrancois",
            "name": "romainfrancois",
            "key": "romainfrancois",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=romainfrancois&avatarId=35092",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=romainfrancois&avatarId=35092",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=romainfrancois&avatarId=35092",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=romainfrancois&avatarId=35092"
            },
            "displayName": "Romain Francois",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 34800,
            "total": 34800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 34800,
            "total": 34800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-13164/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 58,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13385638/worklog/623475",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois opened a new pull request #10730:\nURL: https://github.com/apache/arrow/pull/10730\n\n\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-16T08:52:12.887+0000",
                    "updated": "2021-07-16T08:52:12.887+0000",
                    "started": "2021-07-16T08:52:12.886+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "623475",
                    "issueId": "13385638"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13385638/worklog/623477",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #10730:\nURL: https://github.com/apache/arrow/pull/10730#issuecomment-881286794\n\n\n   https://issues.apache.org/jira/browse/ARROW-13164\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-16T08:52:29.192+0000",
                    "updated": "2021-07-16T08:52:29.192+0000",
                    "started": "2021-07-16T08:52:29.191+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "623477",
                    "issueId": "13385638"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13385638/worklog/623478",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois commented on pull request #10730:\nURL: https://github.com/apache/arrow/pull/10730#issuecomment-881286881\n\n\n   follow up after https://github.com/apache/arrow/pull/10593\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-16T08:52:42.337+0000",
                    "updated": "2021-07-16T08:52:42.337+0000",
                    "started": "2021-07-16T08:52:42.337+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "623478",
                    "issueId": "13385638"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13385638/worklog/623544",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #10730:\nURL: https://github.com/apache/arrow/pull/10730#discussion_r671149781\n\n\n\n##########\nFile path: r/src/altrep.cpp\n##########\n@@ -44,25 +44,68 @@ extern \"C\" {\n #endif\n \n #include <arrow/array.h>\n+#include <arrow/util/bitmap_reader.h>\n+\n+#include \"./r_task_group.h\"\n \n namespace arrow {\n namespace r {\n \n+template <typename T>\n+T na_sentinel();\n+\n+template <>\n+inline double na_sentinel<double>() {\n+  return NA_REAL;\n+}\n+\n+template <>\n+inline int na_sentinel<int>() {\n+  return NA_INTEGER;\n+}\n+\n+template <typename T>\n+void UseSentinel(const std::shared_ptr<Array>& array) {\n+  auto n = array->length();\n+  auto null_count = array->null_count();\n+  internal::BitmapReader bitmap_reader(array->null_bitmap()->data(), array->offset(), n);\n+\n+  auto* data = array->data()->GetMutableValues<T>(1);\n+\n+  for (R_xlen_t i = 0, k = 0; k < null_count; i++, bitmap_reader.Next()) {\n+    if (bitmap_reader.IsNotSet()) {\n+      k++;\n+      data[i] = na_sentinel<T>();\n+    }\n+  }\n+}\n+\n template <int sexp_type>\n-struct ArrayNoNull {\n+struct AltrepVector {\n   using data_type = typename std::conditional<sexp_type == INTSXP, int, double>::type;\n\nReview comment:\n       ```suggestion\r\n     using data_type = typename std::conditional<sexp_type == REALSXP, double, int>::type;\r\n   ```\r\n   (Speculative support for logical)\n\n##########\nFile path: r/src/array_to_vector.cpp\n##########\n@@ -69,13 +69,25 @@ class Converter {\n     // special case when there is only one array\n     if (chunked_array_->num_chunks() == 1) {\n       const auto& array = chunked_array_->chunk(0);\n-      if (arrow::r::GetBoolOption(\"arrow.use_altrep\", true) && array->length() > 0 &&\n-          array->null_count() == 0) {\n+      // using altrep if\n+      // - the arrow.use_altrep is set to TRUE or unset\n+      // - the array has at least one element\n+      // - either it has no nulls or the data is mutable\n+      if (arrow::r::GetBoolOption(\"arrow.use_altrep\", true) && array->length() > 0) {\n         switch (array->type()->id()) {\n           case arrow::Type::DOUBLE:\n-            return arrow::r::MakeDoubleArrayNoNull(array);\n+            if (array->null_count() == 0 || array->data()->buffers[1]->is_mutable()) {\n\nReview comment:\n       It's not safe to do this if anyone else might mutate this buffer. We don't have a completely safe way to check uniqueness, either. As a stop gap:\r\n   ```suggestion\r\n               if (array->null_count() == 0 || array->data().use_count() == 1 &&\r\n                   array->data()->buffers[1].use_count() == 1 && array->data()->buffers[1]->is_mutable()) {\r\n   ```\n\n##########\nFile path: r/src/altrep.cpp\n##########\n@@ -44,25 +44,68 @@ extern \"C\" {\n #endif\n \n #include <arrow/array.h>\n+#include <arrow/util/bitmap_reader.h>\n+\n+#include \"./r_task_group.h\"\n \n namespace arrow {\n namespace r {\n \n+template <typename T>\n+T na_sentinel();\n+\n+template <>\n+inline double na_sentinel<double>() {\n+  return NA_REAL;\n+}\n+\n+template <>\n+inline int na_sentinel<int>() {\n+  return NA_INTEGER;\n+}\n+\n+template <typename T>\n+void UseSentinel(const std::shared_ptr<Array>& array) {\n+  auto n = array->length();\n+  auto null_count = array->null_count();\n+  internal::BitmapReader bitmap_reader(array->null_bitmap()->data(), array->offset(), n);\n+\n+  auto* data = array->data()->GetMutableValues<T>(1);\n+\n+  for (R_xlen_t i = 0, k = 0; k < null_count; i++, bitmap_reader.Next()) {\n+    if (bitmap_reader.IsNotSet()) {\n+      k++;\n+      data[i] = na_sentinel<T>();\n+    }\n+  }\n+}\n+\n template <int sexp_type>\n-struct ArrayNoNull {\n+struct AltrepVector {\n   using data_type = typename std::conditional<sexp_type == INTSXP, int, double>::type;\n   static void DeleteArray(std::shared_ptr<Array>* ptr) { delete ptr; }\n   using Pointer = cpp11::external_pointer<std::shared_ptr<Array>, DeleteArray>;\n \n-  // altrep object around an Array with no nulls\n+  // altrep object around an Array\n   // data1: an external pointer to a shared pointer to the Array\n   // data2: not used\n \n-  static SEXP Make(R_altrep_class_t class_t, const std::shared_ptr<Array>& array) {\n+  static SEXP Make(R_altrep_class_t class_t, const std::shared_ptr<Array>& array,\n+                   RTasks& tasks) {\n     // we don't need the whole r6 object, just an external pointer\n-    // that retain the array\n+    // that retain the Array\n     Pointer xp(new std::shared_ptr<Array>(array));\n \n+    // we only get here if the Array data buffer is mutable\n+    // UseSentinel() puts the R sentinel where the data is null\n+    auto null_count = array->null_count();\n+    if (null_count > 0) {\n+      tasks.Append(true, [array]() {\n+        UseSentinel<data_type>(array);\n\nReview comment:\n       In the case of a few long arrays, it'd be more performant to divide this work into L2 sized chunks\n\n##########\nFile path: r/src/altrep.cpp\n##########\n@@ -44,25 +44,68 @@ extern \"C\" {\n #endif\n \n #include <arrow/array.h>\n+#include <arrow/util/bitmap_reader.h>\n+\n+#include \"./r_task_group.h\"\n \n namespace arrow {\n namespace r {\n \n+template <typename T>\n+T na_sentinel();\n+\n+template <>\n+inline double na_sentinel<double>() {\n+  return NA_REAL;\n+}\n+\n+template <>\n+inline int na_sentinel<int>() {\n+  return NA_INTEGER;\n+}\n+\n+template <typename T>\n+void UseSentinel(const std::shared_ptr<Array>& array) {\n+  auto n = array->length();\n+  auto null_count = array->null_count();\n+  internal::BitmapReader bitmap_reader(array->null_bitmap()->data(), array->offset(), n);\n+\n+  auto* data = array->data()->GetMutableValues<T>(1);\n+\n+  for (R_xlen_t i = 0, k = 0; k < null_count; i++, bitmap_reader.Next()) {\n+    if (bitmap_reader.IsNotSet()) {\n+      k++;\n+      data[i] = na_sentinel<T>();\n+    }\n+  }\n+}\n+\n template <int sexp_type>\n-struct ArrayNoNull {\n+struct AltrepVector {\n   using data_type = typename std::conditional<sexp_type == INTSXP, int, double>::type;\n   static void DeleteArray(std::shared_ptr<Array>* ptr) { delete ptr; }\n   using Pointer = cpp11::external_pointer<std::shared_ptr<Array>, DeleteArray>;\n \n-  // altrep object around an Array with no nulls\n+  // altrep object around an Array\n   // data1: an external pointer to a shared pointer to the Array\n   // data2: not used\n \n-  static SEXP Make(R_altrep_class_t class_t, const std::shared_ptr<Array>& array) {\n+  static SEXP Make(R_altrep_class_t class_t, const std::shared_ptr<Array>& array,\n+                   RTasks& tasks) {\n     // we don't need the whole r6 object, just an external pointer\n-    // that retain the array\n+    // that retain the Array\n     Pointer xp(new std::shared_ptr<Array>(array));\n \n+    // we only get here if the Array data buffer is mutable\n+    // UseSentinel() puts the R sentinel where the data is null\n+    auto null_count = array->null_count();\n+    if (null_count > 0) {\n\nReview comment:\n       Would it make sense to do this lazily in dataptr/getregion?\n\n##########\nFile path: r/src/altrep.cpp\n##########\n@@ -104,63 +148,144 @@ struct ArrayNoNull {\n     return const_cast<void*>(Dataptr_or_null(vec));\n   }\n \n-  // by definition, there are no NA\n-  static int No_NA(SEXP vec) { return 1; }\n+  static int No_NA(SEXP vec) { return Get(vec)->null_count() == 0; }\n \n   static void Init(R_altrep_class_t class_t, DllInfo* dll) {\n     // altrep\n-    R_set_altrep_Length_method(class_t, ArrayNoNull::Length);\n-    R_set_altrep_Inspect_method(class_t, ArrayNoNull::Inspect);\n-    R_set_altrep_Duplicate_method(class_t, ArrayNoNull::Duplicate);\n+    R_set_altrep_Length_method(class_t, AltrepVector::Length);\n+    R_set_altrep_Inspect_method(class_t, AltrepVector::Inspect);\n+    R_set_altrep_Duplicate_method(class_t, AltrepVector::Duplicate);\n \n     // altvec\n-    R_set_altvec_Dataptr_method(class_t, ArrayNoNull::Dataptr);\n-    R_set_altvec_Dataptr_or_null_method(class_t, ArrayNoNull::Dataptr_or_null);\n+    R_set_altvec_Dataptr_method(class_t, AltrepVector::Dataptr);\n+    R_set_altvec_Dataptr_or_null_method(class_t, AltrepVector::Dataptr_or_null);\n   }\n };\n \n-struct DoubleArrayNoNull {\n+struct AltrepVectorDouble {\n+  using Base = AltrepVector<REALSXP>;\n   static R_altrep_class_t class_t;\n \n+  static SEXP Sum(SEXP x, Rboolean narm) {\n+    const auto& array = Base::Get(x);\n+\n+    if (narm == FALSE && array->null_count()) {\n+      return Rf_ScalarReal(NA_REAL);\n+    }\n+\n+    // TODO: instead of returning NULL, use arrow::compute() something\n+    //      to calculate the sum of `array`\n+    return NULL;\n+  }\n+\n+  static SEXP Min(SEXP x, Rboolean narm) {\n+    const auto& array = Base::Get(x);\n+\n+    if (narm == FALSE && array->null_count()) {\n+      return Rf_ScalarReal(NA_REAL);\n+    }\n+\n+    // TODO: instead of returning NULL, use arrow::compute() something\n+    //      to calculate the min of `array`\n+    return NULL;\n+  }\n+\n+  static SEXP Max(SEXP x, Rboolean narm) {\n+    const auto& array = Base::Get(x);\n+\n+    if (narm == FALSE && array->null_count()) {\n+      return Rf_ScalarReal(NA_REAL);\n+    }\n+\n+    // TODO: instead of returning NULL, use arrow::compute() something\n+    //      to calculate the max of `array`\n+    return NULL;\n+  }\n+\n   static void Init(DllInfo* dll) {\n-    class_t = R_make_altreal_class(\"array_nonull_dbl_vector\", \"arrow\", dll);\n-    ArrayNoNull<REALSXP>::Init(class_t, dll);\n-    R_set_altreal_No_NA_method(class_t, ArrayNoNull<REALSXP>::No_NA);\n+    class_t = R_make_altreal_class(\"array_dbl_vector\", \"arrow\", dll);\n+    AltrepVector<REALSXP>::Init(class_t, dll);\n+\n+    R_set_altreal_No_NA_method(class_t, AltrepVector<REALSXP>::No_NA);\n+\n+    R_set_altreal_Sum_method(class_t, Sum);\n+    R_set_altreal_Min_method(class_t, Min);\n+    R_set_altreal_Max_method(class_t, Max);\n   }\n \n-  static SEXP Make(const std::shared_ptr<Array>& array) {\n-    return ArrayNoNull<REALSXP>::Make(class_t, array);\n+  static SEXP Make(const std::shared_ptr<Array>& array, RTasks& tasks) {\n+    return AltrepVector<REALSXP>::Make(class_t, array, tasks);\n   }\n };\n \n-struct Int32ArrayNoNull {\n+struct AltrepVectorInt32 {\n+  using Base = AltrepVector<INTSXP>;\n   static R_altrep_class_t class_t;\n \n+  static SEXP Sum(SEXP x, Rboolean narm) {\n+    const auto& array = Base::Get(x);\n+\n+    if (narm == FALSE && array->null_count()) {\n+      return Rf_ScalarInteger(NA_INTEGER);\n+    }\n+\n+    // TODO: instead of returning NULL, use arrow::compute() something\n+    //      to calculate the sum of `array`\n+    return NULL;\n+  }\n+\n+  static SEXP Min(SEXP x, Rboolean narm) {\n+    const auto& array = Base::Get(x);\n+\n+    if (narm == FALSE && array->null_count()) {\n+      return Rf_ScalarInteger(NA_INTEGER);\n+    }\n+\n+    // TODO: instead of returning NULL, use arrow::compute() something\n+    //      to calculate the min of `array`\n+    return NULL;\n+  }\n+\n+  static SEXP Max(SEXP x, Rboolean narm) {\n+    const auto& array = Base::Get(x);\n+\n+    if (narm == FALSE && array->null_count()) {\n+      return Rf_ScalarInteger(NA_INTEGER);\n+    }\n+\n+    // TODO: instead of returning NULL, use arrow::compute() something\n+    //      to calculate the max of `array`\n+    return NULL;\n+  }\n   static void Init(DllInfo* dll) {\n-    class_t = R_make_altinteger_class(\"array_nonull_int_vector\", \"arrow\", dll);\n-    ArrayNoNull<INTSXP>::Init(class_t, dll);\n-    R_set_altinteger_No_NA_method(class_t, ArrayNoNull<INTSXP>::No_NA);\n+    class_t = R_make_altinteger_class(\"array_int_vector\", \"arrow\", dll);\n+    AltrepVector<INTSXP>::Init(class_t, dll);\n\nReview comment:\n       Please remove Base or use it consistently\n\n##########\nFile path: r/src/altrep.cpp\n##########\n@@ -44,25 +44,68 @@ extern \"C\" {\n #endif\n \n #include <arrow/array.h>\n+#include <arrow/util/bitmap_reader.h>\n+\n+#include \"./r_task_group.h\"\n \n namespace arrow {\n namespace r {\n \n+template <typename T>\n+T na_sentinel();\n\nReview comment:\n       Why can't we use `cpp11::na`?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-16T11:23:22.455+0000",
                    "updated": "2021-07-16T11:23:22.455+0000",
                    "started": "2021-07-16T11:23:22.455+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "623544",
                    "issueId": "13385638"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13385638/worklog/623660",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois commented on a change in pull request #10730:\nURL: https://github.com/apache/arrow/pull/10730#discussion_r671325520\n\n\n\n##########\nFile path: r/src/altrep.cpp\n##########\n@@ -44,25 +44,68 @@ extern \"C\" {\n #endif\n \n #include <arrow/array.h>\n+#include <arrow/util/bitmap_reader.h>\n+\n+#include \"./r_task_group.h\"\n \n namespace arrow {\n namespace r {\n \n+template <typename T>\n+T na_sentinel();\n\nReview comment:\n       We can :-)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-16T15:02:58.103+0000",
                    "updated": "2021-07-16T15:02:58.103+0000",
                    "started": "2021-07-16T15:02:58.103+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "623660",
                    "issueId": "13385638"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13385638/worklog/623662",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois commented on a change in pull request #10730:\nURL: https://github.com/apache/arrow/pull/10730#discussion_r671330603\n\n\n\n##########\nFile path: r/src/altrep.cpp\n##########\n@@ -44,25 +44,68 @@ extern \"C\" {\n #endif\n \n #include <arrow/array.h>\n+#include <arrow/util/bitmap_reader.h>\n+\n+#include \"./r_task_group.h\"\n \n namespace arrow {\n namespace r {\n \n+template <typename T>\n+T na_sentinel();\n+\n+template <>\n+inline double na_sentinel<double>() {\n+  return NA_REAL;\n+}\n+\n+template <>\n+inline int na_sentinel<int>() {\n+  return NA_INTEGER;\n+}\n+\n+template <typename T>\n+void UseSentinel(const std::shared_ptr<Array>& array) {\n+  auto n = array->length();\n+  auto null_count = array->null_count();\n+  internal::BitmapReader bitmap_reader(array->null_bitmap()->data(), array->offset(), n);\n+\n+  auto* data = array->data()->GetMutableValues<T>(1);\n+\n+  for (R_xlen_t i = 0, k = 0; k < null_count; i++, bitmap_reader.Next()) {\n+    if (bitmap_reader.IsNotSet()) {\n+      k++;\n+      data[i] = na_sentinel<T>();\n+    }\n+  }\n+}\n+\n template <int sexp_type>\n-struct ArrayNoNull {\n+struct AltrepVector {\n   using data_type = typename std::conditional<sexp_type == INTSXP, int, double>::type;\n   static void DeleteArray(std::shared_ptr<Array>* ptr) { delete ptr; }\n   using Pointer = cpp11::external_pointer<std::shared_ptr<Array>, DeleteArray>;\n \n-  // altrep object around an Array with no nulls\n+  // altrep object around an Array\n   // data1: an external pointer to a shared pointer to the Array\n   // data2: not used\n \n-  static SEXP Make(R_altrep_class_t class_t, const std::shared_ptr<Array>& array) {\n+  static SEXP Make(R_altrep_class_t class_t, const std::shared_ptr<Array>& array,\n+                   RTasks& tasks) {\n     // we don't need the whole r6 object, just an external pointer\n-    // that retain the array\n+    // that retain the Array\n     Pointer xp(new std::shared_ptr<Array>(array));\n \n+    // we only get here if the Array data buffer is mutable\n+    // UseSentinel() puts the R sentinel where the data is null\n+    auto null_count = array->null_count();\n+    if (null_count > 0) {\n\nReview comment:\n       maybe, but once we're in Dataptr/Getregion we no longer have the possibility to do this in a task. \r\n   \r\n   Here, we always do it (although we might not need to), but in a task (so in parallel). \r\n   If we did it in Dataptr/Getregion we would have to bookkeep if it was done already and if not do it serially. \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-16T15:10:22.177+0000",
                    "updated": "2021-07-16T15:10:22.177+0000",
                    "started": "2021-07-16T15:10:22.176+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "623662",
                    "issueId": "13385638"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13385638/worklog/623665",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois commented on a change in pull request #10730:\nURL: https://github.com/apache/arrow/pull/10730#discussion_r671333104\n\n\n\n##########\nFile path: r/src/altrep.cpp\n##########\n@@ -44,25 +44,68 @@ extern \"C\" {\n #endif\n \n #include <arrow/array.h>\n+#include <arrow/util/bitmap_reader.h>\n+\n+#include \"./r_task_group.h\"\n \n namespace arrow {\n namespace r {\n \n+template <typename T>\n+T na_sentinel();\n+\n+template <>\n+inline double na_sentinel<double>() {\n+  return NA_REAL;\n+}\n+\n+template <>\n+inline int na_sentinel<int>() {\n+  return NA_INTEGER;\n+}\n+\n+template <typename T>\n+void UseSentinel(const std::shared_ptr<Array>& array) {\n+  auto n = array->length();\n+  auto null_count = array->null_count();\n+  internal::BitmapReader bitmap_reader(array->null_bitmap()->data(), array->offset(), n);\n+\n+  auto* data = array->data()->GetMutableValues<T>(1);\n+\n+  for (R_xlen_t i = 0, k = 0; k < null_count; i++, bitmap_reader.Next()) {\n+    if (bitmap_reader.IsNotSet()) {\n+      k++;\n+      data[i] = na_sentinel<T>();\n+    }\n+  }\n+}\n+\n template <int sexp_type>\n-struct ArrayNoNull {\n+struct AltrepVector {\n   using data_type = typename std::conditional<sexp_type == INTSXP, int, double>::type;\n   static void DeleteArray(std::shared_ptr<Array>* ptr) { delete ptr; }\n   using Pointer = cpp11::external_pointer<std::shared_ptr<Array>, DeleteArray>;\n \n-  // altrep object around an Array with no nulls\n+  // altrep object around an Array\n   // data1: an external pointer to a shared pointer to the Array\n   // data2: not used\n \n-  static SEXP Make(R_altrep_class_t class_t, const std::shared_ptr<Array>& array) {\n+  static SEXP Make(R_altrep_class_t class_t, const std::shared_ptr<Array>& array,\n+                   RTasks& tasks) {\n     // we don't need the whole r6 object, just an external pointer\n-    // that retain the array\n+    // that retain the Array\n     Pointer xp(new std::shared_ptr<Array>(array));\n \n+    // we only get here if the Array data buffer is mutable\n+    // UseSentinel() puts the R sentinel where the data is null\n+    auto null_count = array->null_count();\n+    if (null_count > 0) {\n+      tasks.Append(true, [array]() {\n+        UseSentinel<data_type>(array);\n\nReview comment:\n       Not sure how to do this. Maybe this can be a follow up issue. \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-16T15:13:51.823+0000",
                    "updated": "2021-07-16T15:13:51.823+0000",
                    "started": "2021-07-16T15:13:51.822+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "623665",
                    "issueId": "13385638"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13385638/worklog/623674",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois commented on pull request #10730:\nURL: https://github.com/apache/arrow/pull/10730#issuecomment-881533851\n\n\n   this needs tests about min/max/sum\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-16T15:30:18.250+0000",
                    "updated": "2021-07-16T15:30:18.250+0000",
                    "started": "2021-07-16T15:30:18.250+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "623674",
                    "issueId": "13385638"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13385638/worklog/623753",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #10730:\nURL: https://github.com/apache/arrow/pull/10730#discussion_r671401636\n\n\n\n##########\nFile path: r/src/array_to_vector.cpp\n##########\n@@ -69,13 +69,25 @@ class Converter {\n     // special case when there is only one array\n     if (chunked_array_->num_chunks() == 1) {\n       const auto& array = chunked_array_->chunk(0);\n-      if (arrow::r::GetBoolOption(\"arrow.use_altrep\", true) && array->length() > 0 &&\n-          array->null_count() == 0) {\n+      // using altrep if\n+      // - the arrow.use_altrep is set to TRUE or unset\n+      // - the array has at least one element\n+      // - either it has no nulls or the data is mutable\n+      if (arrow::r::GetBoolOption(\"arrow.use_altrep\", true) && array->length() > 0) {\n         switch (array->type()->id()) {\n           case arrow::Type::DOUBLE:\n-            return arrow::r::MakeDoubleArrayNoNull(array);\n+            if (array->null_count() == 0 || array->data()->buffers[1]->is_mutable()) {\n\nReview comment:\n       @pitrou \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-16T17:01:08.464+0000",
                    "updated": "2021-07-16T17:01:08.464+0000",
                    "started": "2021-07-16T17:01:08.464+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "623753",
                    "issueId": "13385638"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13385638/worklog/624259",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois commented on a change in pull request #10730:\nURL: https://github.com/apache/arrow/pull/10730#discussion_r672174111\n\n\n\n##########\nFile path: r/src/array_to_vector.cpp\n##########\n@@ -69,13 +69,25 @@ class Converter {\n     // special case when there is only one array\n     if (chunked_array_->num_chunks() == 1) {\n       const auto& array = chunked_array_->chunk(0);\n-      if (arrow::r::GetBoolOption(\"arrow.use_altrep\", true) && array->length() > 0 &&\n-          array->null_count() == 0) {\n+      // using altrep if\n+      // - the arrow.use_altrep is set to TRUE or unset\n+      // - the array has at least one element\n+      // - either it has no nulls or the data is mutable\n+      if (arrow::r::GetBoolOption(\"arrow.use_altrep\", true) && array->length() > 0) {\n         switch (array->type()->id()) {\n           case arrow::Type::DOUBLE:\n-            return arrow::r::MakeDoubleArrayNoNull(array);\n+            if (array->null_count() == 0 || array->data()->buffers[1]->is_mutable()) {\n\nReview comment:\n       One consequence is that we can't use altrep when taking slices of an Array as the buffer is at least held by two Arrays then. \r\n   \r\n   ``` r\r\n   library(arrow, warn.conflicts = FALSE)\r\n   #> See arrow_info() for available features\r\n   \r\n   is_altrep <- arrow:::is_altrep\r\n   \r\n   v_int <- Array$create(c(1L, NA, 3L))\r\n   \r\n   is_altrep(v_int$as_vector())\r\n   #> [1] TRUE\r\n   \r\n   is_altrep(as.vector(v_int$Slice(1)))\r\n   #> [1] FALSE\r\n   ```\r\n   \r\n   <sup>Created on 2021-07-19 by the [reprex package](https://reprex.tidyverse.org) (v2.0.0)</sup>\r\n   \r\n   I commented out the relevant tests in `test-altrep.R`. Does this matter given that the data there is irrelevant because it's identified as null ? \r\n   \r\n   \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-19T10:19:58.261+0000",
                    "updated": "2021-07-19T10:19:58.261+0000",
                    "started": "2021-07-19T10:19:58.260+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "624259",
                    "issueId": "13385638"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13385638/worklog/624310",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on a change in pull request #10730:\nURL: https://github.com/apache/arrow/pull/10730#discussion_r672252916\n\n\n\n##########\nFile path: r/src/array_to_vector.cpp\n##########\n@@ -133,6 +146,16 @@ class Converter {\n \n  protected:\n   std::shared_ptr<ChunkedArray> chunked_array_;\n+\n+ private:\n+  bool CanAltrep(const std::shared_ptr<Array>& array) {\n+    if (array->null_count() == 0) {\n+      return true;\n+    }\n+\n+    return array->data().use_count() == 1 && array->data()->buffers[1].use_count() == 1 &&\n+           array->data()->buffers[1]->is_mutable();\n\nReview comment:\n       I thought arrays were immutable? when/how likely is this to be true?\n\n##########\nFile path: r/tests/testthat/test-altrep.R\n##########\n@@ -59,52 +59,117 @@ test_that(\"altrep vectors from int32 and dbl arrays with nulls\", {\n   c_int <- ChunkedArray$create(c(1L, NA, 3L))\n   c_dbl <- ChunkedArray$create(c(1, NA, 3))\n \n-  # cannot be altrep because one NA\n-  expect_false(is_altrep_int_nonull(as.vector(v_int)))\n-  expect_false(is_altrep_int_nonull(as.vector(v_int$Slice(1))))\n-  expect_false(is_altrep_dbl_nonull(as.vector(v_dbl)))\n-  expect_false(is_altrep_dbl_nonull(as.vector(v_dbl$Slice(1))))\n-  expect_false(is_altrep_int_nonull(as.vector(c_int)))\n-  expect_false(is_altrep_int_nonull(as.vector(c_int$Slice(1))))\n-  expect_false(is_altrep_dbl_nonull(as.vector(c_dbl)))\n-  expect_false(is_altrep_dbl_nonull(as.vector(c_dbl$Slice(1))))\n-\n-  # but then, no NA beyond, so can be altrep again\n-  expect_true(is_altrep_int_nonull(as.vector(v_int$Slice(2))))\n-  expect_true(is_altrep_dbl_nonull(as.vector(v_dbl$Slice(2))))\n-  expect_true(is_altrep_int_nonull(as.vector(c_int$Slice(2))))\n-  expect_true(is_altrep_dbl_nonull(as.vector(c_dbl$Slice(2))))\n+  expect_true(is_altrep(as.vector(v_int)))\n+  # expect_true(is_altrep(as.vector(v_int$Slice(1))))\n+  expect_true(is_altrep(as.vector(v_dbl)))\n+  # expect_true(is_altrep(as.vector(v_dbl$Slice(1))))\n+  expect_true(is_altrep(as.vector(c_int)))\n+  # expect_true(is_altrep(as.vector(c_int$Slice(1))))\n+  expect_true(is_altrep(as.vector(c_dbl)))\n+  # expect_true(is_altrep(as.vector(c_dbl$Slice(1))))\n+\n+  # expect_true(is_altrep(as.vector(v_int$Slice(2))))\n+  # expect_true(is_altrep(as.vector(v_dbl$Slice(2))))\n+  # expect_true(is_altrep(as.vector(c_int$Slice(2))))\n+  # expect_true(is_altrep(as.vector(c_dbl$Slice(2))))\n \n   # chunked array with 2 chunks cannot be altrep\n   c_int <- ChunkedArray$create(0L, c(1L, NA, 3L))\n   c_dbl <- ChunkedArray$create(0, c(1, NA, 3))\n   expect_equal(c_int$num_chunks, 2L)\n   expect_equal(c_dbl$num_chunks, 2L)\n-  expect_false(is_altrep_int_nonull(as.vector(c_int)))\n-  expect_false(is_altrep_dbl_nonull(as.vector(c_dbl)))\n-  expect_true(is_altrep_int_nonull(as.vector(c_int$Slice(3))))\n-  expect_true(is_altrep_dbl_nonull(as.vector(c_dbl$Slice(3))))\n+\n+  expect_false(is_altrep(as.vector(c_int)))\n+  expect_false(is_altrep(as.vector(c_dbl)))\n+  # expect_true(is_altrep(as.vector(c_int$Slice(3))))\n+  # expect_true(is_altrep(as.vector(c_dbl$Slice(3))))\n })\n \n test_that(\"empty vectors are not altrep\", {\n   withr::local_options(list(arrow.use_altrep = TRUE))\n   v_int <- Array$create(integer())\n   v_dbl <- Array$create(numeric())\n \n-  expect_false(is_altrep_int_nonull(as.vector(v_int)))\n-  expect_false(is_altrep_dbl_nonull(as.vector(v_dbl)))\n+  expect_false(is_altrep(as.vector(v_int)))\n+  expect_false(is_altrep(as.vector(v_dbl)))\n })\n \n test_that(\"as.data.frame(<Table>, <RecordBatch>) can create altrep vectors\", {\n   withr::local_options(list(arrow.use_altrep = TRUE))\n \n   table <- Table$create(int = c(1L, 2L, 3L), dbl = c(1, 2, 3))\n   df_table <- as.data.frame(table)\n-  expect_true(is_altrep_int_nonull(df_table$int))\n-  expect_true(is_altrep_dbl_nonull(df_table$dbl))\n+  expect_true(is_altrep(df_table$int))\n+  expect_true(is_altrep(df_table$dbl))\n \n   batch <- RecordBatch$create(int = c(1L, 2L, 3L), dbl = c(1, 2, 3))\n   df_batch <- as.data.frame(batch)\n-  expect_true(is_altrep_int_nonull(df_batch$int))\n-  expect_true(is_altrep_dbl_nonull(df_batch$dbl))\n+  expect_true(is_altrep(df_batch$int))\n+  expect_true(is_altrep(df_batch$dbl))\n+})\n+\n+test_that(\"altrep min/max/sum identical to R versions for double\", {\n+  expect_altrep_rountrip <- function(x, fn, ...) {\n+    expect_identical(fn(x, ...), fn(Array$create(x)$as_vector(), ...))\n\nReview comment:\n       Should this also assert altrep-ness, maybe something like this?\r\n   \r\n   ```suggestion\r\n       alt <- Array$create(x)$as_vector()\r\n       expect_true(is_altrep(alt))\r\n       result <- fn(alt)\r\n       # Calling fn() didn't cause the vector to lose its altrep-ness\r\n       expect_true(is_altrep(alt))\r\n       expect_identical(result, fn(x, ...), ...))\r\n   ```\n\n##########\nFile path: r/src/altrep.cpp\n##########\n@@ -104,63 +143,138 @@ struct ArrayNoNull {\n     return const_cast<void*>(Dataptr_or_null(vec));\n   }\n \n-  // by definition, there are no NA\n-  static int No_NA(SEXP vec) { return 1; }\n+  static int No_NA(SEXP vec) { return Get(vec)->null_count() == 0; }\n+\n+  static SEXP Min(SEXP x, Rboolean narm) { return MinMax(x, narm, \"min\", R_PosInf); }\n+\n+  static SEXP Max(SEXP x, Rboolean narm) { return MinMax(x, narm, \"max\", R_NegInf); }\n+\n+  static SEXP MinMax(SEXP x, Rboolean narm, const std::string& field, double inf) {\n+    const auto& array = Get(x);\n+    bool na_rm = narm == TRUE;\n+    auto n = array->length();\n+    auto null_count = array->null_count();\n+    if ((na_rm || n == 0) && null_count == n) {\n+      return Rf_ScalarReal(inf);\n+    }\n+    if (!na_rm && null_count > 0) {\n+      return cpp11::as_sexp(cpp11::na<data_type>());\n+    }\n+\n+    auto options = Options(array, na_rm);\n+\n+    const auto& minmax =\n+        ValueOrStop(arrow::compute::CallFunction(\"min_max\", {array}, options.get()));\n+    const auto& minmax_scalar =\n+        internal::checked_cast<const StructScalar&>(*minmax.scalar());\n+\n+    const auto& result_scalar = internal::checked_cast<const scalar_type&>(\n+        *ValueOrStop(minmax_scalar.field(field)));\n+    return cpp11::as_sexp(result_scalar.value);\n+  }\n+\n+  static SEXP Sum(SEXP x, Rboolean narm) {\n+    const auto& array = Get(x);\n+    bool na_rm = narm == TRUE;\n+    auto null_count = array->null_count();\n+\n+    if (!na_rm && null_count > 0) {\n+      return cpp11::as_sexp(cpp11::na<data_type>());\n+    }\n+    auto options = Options(array, na_rm);\n+\n+    const auto& sum =\n+        ValueOrStop(arrow::compute::CallFunction(\"sum\", {array}, options.get()));\n+\n+    if (sexp_type == INTSXP) {\n+      // When calling the \"sum\" function on an int32 array, we get an Int64 scalar\n+      // in case of overflow, make it a double like R\n+      int64_t value = internal::checked_cast<const Int64Scalar&>(*sum.scalar()).value;\n+      if (value < INT32_MIN || value > INT32_MAX) {\n\nReview comment:\n       `INT32_MIN` is `NA_integer_` right? So it needs to be out of bounds too. Or does this constant come from R and already have that factored in?\r\n   \r\n   ```suggestion\r\n         if (value <= INT32_MIN || value > INT32_MAX) {\r\n   ```\n\n##########\nFile path: r/src/altrep.cpp\n##########\n@@ -44,25 +49,58 @@ extern \"C\" {\n #endif\n \n #include <arrow/array.h>\n+#include <arrow/util/bitmap_reader.h>\n+\n+#include \"./r_task_group.h\"\n \n namespace arrow {\n namespace r {\n \n+template <typename T>\n+void UseSentinel(const std::shared_ptr<Array>& array) {\n\nReview comment:\n       I would have expected that, instead of altering the Arrow data, we would have `_ELT` and `_GET_REGION` methods that would insert the sentinels in the R vector when the data is accessed. What are the tradeoffs of that way vs. this way?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-19T12:37:10.755+0000",
                    "updated": "2021-07-19T12:37:10.755+0000",
                    "started": "2021-07-19T12:37:10.755+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "624310",
                    "issueId": "13385638"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13385638/worklog/624343",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois commented on a change in pull request #10730:\nURL: https://github.com/apache/arrow/pull/10730#discussion_r672304332\n\n\n\n##########\nFile path: r/src/array_to_vector.cpp\n##########\n@@ -133,6 +146,16 @@ class Converter {\n \n  protected:\n   std::shared_ptr<ChunkedArray> chunked_array_;\n+\n+ private:\n+  bool CanAltrep(const std::shared_ptr<Array>& array) {\n+    if (array->null_count() == 0) {\n+      return true;\n+    }\n+\n+    return array->data().use_count() == 1 && array->data()->buffers[1].use_count() == 1 &&\n+           array->data()->buffers[1]->is_mutable();\n\nReview comment:\n       specifically here when mutating does not logically change anything. it's my understanding that what's there is undefined and that it is inconsequential to change it. \r\n   \r\n   it may be false however when the buffer comes from a source that prevents mutation, I don't have a specific example but I guess reading from disk or something. \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-19T13:37:14.514+0000",
                    "updated": "2021-07-19T13:37:14.514+0000",
                    "started": "2021-07-19T13:37:14.513+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "624343",
                    "issueId": "13385638"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13385638/worklog/624344",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois commented on a change in pull request #10730:\nURL: https://github.com/apache/arrow/pull/10730#discussion_r672305324\n\n\n\n##########\nFile path: r/tests/testthat/test-altrep.R\n##########\n@@ -59,52 +59,117 @@ test_that(\"altrep vectors from int32 and dbl arrays with nulls\", {\n   c_int <- ChunkedArray$create(c(1L, NA, 3L))\n   c_dbl <- ChunkedArray$create(c(1, NA, 3))\n \n-  # cannot be altrep because one NA\n-  expect_false(is_altrep_int_nonull(as.vector(v_int)))\n-  expect_false(is_altrep_int_nonull(as.vector(v_int$Slice(1))))\n-  expect_false(is_altrep_dbl_nonull(as.vector(v_dbl)))\n-  expect_false(is_altrep_dbl_nonull(as.vector(v_dbl$Slice(1))))\n-  expect_false(is_altrep_int_nonull(as.vector(c_int)))\n-  expect_false(is_altrep_int_nonull(as.vector(c_int$Slice(1))))\n-  expect_false(is_altrep_dbl_nonull(as.vector(c_dbl)))\n-  expect_false(is_altrep_dbl_nonull(as.vector(c_dbl$Slice(1))))\n-\n-  # but then, no NA beyond, so can be altrep again\n-  expect_true(is_altrep_int_nonull(as.vector(v_int$Slice(2))))\n-  expect_true(is_altrep_dbl_nonull(as.vector(v_dbl$Slice(2))))\n-  expect_true(is_altrep_int_nonull(as.vector(c_int$Slice(2))))\n-  expect_true(is_altrep_dbl_nonull(as.vector(c_dbl$Slice(2))))\n+  expect_true(is_altrep(as.vector(v_int)))\n+  # expect_true(is_altrep(as.vector(v_int$Slice(1))))\n+  expect_true(is_altrep(as.vector(v_dbl)))\n+  # expect_true(is_altrep(as.vector(v_dbl$Slice(1))))\n+  expect_true(is_altrep(as.vector(c_int)))\n+  # expect_true(is_altrep(as.vector(c_int$Slice(1))))\n+  expect_true(is_altrep(as.vector(c_dbl)))\n+  # expect_true(is_altrep(as.vector(c_dbl$Slice(1))))\n+\n+  # expect_true(is_altrep(as.vector(v_int$Slice(2))))\n+  # expect_true(is_altrep(as.vector(v_dbl$Slice(2))))\n+  # expect_true(is_altrep(as.vector(c_int$Slice(2))))\n+  # expect_true(is_altrep(as.vector(c_dbl$Slice(2))))\n \n   # chunked array with 2 chunks cannot be altrep\n   c_int <- ChunkedArray$create(0L, c(1L, NA, 3L))\n   c_dbl <- ChunkedArray$create(0, c(1, NA, 3))\n   expect_equal(c_int$num_chunks, 2L)\n   expect_equal(c_dbl$num_chunks, 2L)\n-  expect_false(is_altrep_int_nonull(as.vector(c_int)))\n-  expect_false(is_altrep_dbl_nonull(as.vector(c_dbl)))\n-  expect_true(is_altrep_int_nonull(as.vector(c_int$Slice(3))))\n-  expect_true(is_altrep_dbl_nonull(as.vector(c_dbl$Slice(3))))\n+\n+  expect_false(is_altrep(as.vector(c_int)))\n+  expect_false(is_altrep(as.vector(c_dbl)))\n+  # expect_true(is_altrep(as.vector(c_int$Slice(3))))\n+  # expect_true(is_altrep(as.vector(c_dbl$Slice(3))))\n })\n \n test_that(\"empty vectors are not altrep\", {\n   withr::local_options(list(arrow.use_altrep = TRUE))\n   v_int <- Array$create(integer())\n   v_dbl <- Array$create(numeric())\n \n-  expect_false(is_altrep_int_nonull(as.vector(v_int)))\n-  expect_false(is_altrep_dbl_nonull(as.vector(v_dbl)))\n+  expect_false(is_altrep(as.vector(v_int)))\n+  expect_false(is_altrep(as.vector(v_dbl)))\n })\n \n test_that(\"as.data.frame(<Table>, <RecordBatch>) can create altrep vectors\", {\n   withr::local_options(list(arrow.use_altrep = TRUE))\n \n   table <- Table$create(int = c(1L, 2L, 3L), dbl = c(1, 2, 3))\n   df_table <- as.data.frame(table)\n-  expect_true(is_altrep_int_nonull(df_table$int))\n-  expect_true(is_altrep_dbl_nonull(df_table$dbl))\n+  expect_true(is_altrep(df_table$int))\n+  expect_true(is_altrep(df_table$dbl))\n \n   batch <- RecordBatch$create(int = c(1L, 2L, 3L), dbl = c(1, 2, 3))\n   df_batch <- as.data.frame(batch)\n-  expect_true(is_altrep_int_nonull(df_batch$int))\n-  expect_true(is_altrep_dbl_nonull(df_batch$dbl))\n+  expect_true(is_altrep(df_batch$int))\n+  expect_true(is_altrep(df_batch$dbl))\n+})\n+\n+test_that(\"altrep min/max/sum identical to R versions for double\", {\n+  expect_altrep_rountrip <- function(x, fn, ...) {\n+    expect_identical(fn(x, ...), fn(Array$create(x)$as_vector(), ...))\n\nReview comment:\n       Thanks. I'll update to add more things to `expect_altrep_rountrip()`\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-19T13:38:31.873+0000",
                    "updated": "2021-07-19T13:38:31.873+0000",
                    "started": "2021-07-19T13:38:31.873+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "624344",
                    "issueId": "13385638"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13385638/worklog/624346",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois commented on a change in pull request #10730:\nURL: https://github.com/apache/arrow/pull/10730#discussion_r672308568\n\n\n\n##########\nFile path: r/src/altrep.cpp\n##########\n@@ -104,63 +143,138 @@ struct ArrayNoNull {\n     return const_cast<void*>(Dataptr_or_null(vec));\n   }\n \n-  // by definition, there are no NA\n-  static int No_NA(SEXP vec) { return 1; }\n+  static int No_NA(SEXP vec) { return Get(vec)->null_count() == 0; }\n+\n+  static SEXP Min(SEXP x, Rboolean narm) { return MinMax(x, narm, \"min\", R_PosInf); }\n+\n+  static SEXP Max(SEXP x, Rboolean narm) { return MinMax(x, narm, \"max\", R_NegInf); }\n+\n+  static SEXP MinMax(SEXP x, Rboolean narm, const std::string& field, double inf) {\n+    const auto& array = Get(x);\n+    bool na_rm = narm == TRUE;\n+    auto n = array->length();\n+    auto null_count = array->null_count();\n+    if ((na_rm || n == 0) && null_count == n) {\n+      return Rf_ScalarReal(inf);\n+    }\n+    if (!na_rm && null_count > 0) {\n+      return cpp11::as_sexp(cpp11::na<data_type>());\n+    }\n+\n+    auto options = Options(array, na_rm);\n+\n+    const auto& minmax =\n+        ValueOrStop(arrow::compute::CallFunction(\"min_max\", {array}, options.get()));\n+    const auto& minmax_scalar =\n+        internal::checked_cast<const StructScalar&>(*minmax.scalar());\n+\n+    const auto& result_scalar = internal::checked_cast<const scalar_type&>(\n+        *ValueOrStop(minmax_scalar.field(field)));\n+    return cpp11::as_sexp(result_scalar.value);\n+  }\n+\n+  static SEXP Sum(SEXP x, Rboolean narm) {\n+    const auto& array = Get(x);\n+    bool na_rm = narm == TRUE;\n+    auto null_count = array->null_count();\n+\n+    if (!na_rm && null_count > 0) {\n+      return cpp11::as_sexp(cpp11::na<data_type>());\n+    }\n+    auto options = Options(array, na_rm);\n+\n+    const auto& sum =\n+        ValueOrStop(arrow::compute::CallFunction(\"sum\", {array}, options.get()));\n+\n+    if (sexp_type == INTSXP) {\n+      // When calling the \"sum\" function on an int32 array, we get an Int64 scalar\n+      // in case of overflow, make it a double like R\n+      int64_t value = internal::checked_cast<const Int64Scalar&>(*sum.scalar()).value;\n+      if (value < INT32_MIN || value > INT32_MAX) {\n\nReview comment:\n       Thanks. R indeed converts to numeric in that case: \r\n   \r\n   ``` r\r\n   str(sum(as.integer(c(-2^31 + 1L))))\r\n   #>  int -2147483647\r\n   str(sum(as.integer(c(-2^31 + 1L, -1L))))\r\n   #>  num -2.15e+09\r\n   ```\r\n   \r\n   <sup>Created on 2021-07-19 by the [reprex package](https://reprex.tidyverse.org) (v2.0.0)</sup>\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-19T13:42:20.264+0000",
                    "updated": "2021-07-19T13:42:20.264+0000",
                    "started": "2021-07-19T13:42:20.264+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "624346",
                    "issueId": "13385638"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13385638/worklog/624351",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois commented on a change in pull request #10730:\nURL: https://github.com/apache/arrow/pull/10730#discussion_r672314835\n\n\n\n##########\nFile path: r/src/altrep.cpp\n##########\n@@ -44,25 +49,58 @@ extern \"C\" {\n #endif\n \n #include <arrow/array.h>\n+#include <arrow/util/bitmap_reader.h>\n+\n+#include \"./r_task_group.h\"\n \n namespace arrow {\n namespace r {\n \n+template <typename T>\n+void UseSentinel(const std::shared_ptr<Array>& array) {\n\nReview comment:\n       Oh interesting. I guess the advantage of this approach is that, for the price of this initial setting of the sentinels, we can then have a `DATAPTR()` so access all the data of the array randomly. \r\n   \r\n   OTOH, we could leave the data untouched and have an `_Elt` that would check the null bitmap, and an `GetRegion()` that would also locally use the null bitmap. This `GetRegion()` would indeed copy the region data though, so potentially be more expensive, even when the region has no nulls. \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-19T13:49:42.330+0000",
                    "updated": "2021-07-19T13:49:42.330+0000",
                    "started": "2021-07-19T13:49:42.329+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "624351",
                    "issueId": "13385638"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13385638/worklog/624361",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois commented on a change in pull request #10730:\nURL: https://github.com/apache/arrow/pull/10730#discussion_r672324588\n\n\n\n##########\nFile path: r/src/altrep.cpp\n##########\n@@ -44,25 +49,58 @@ extern \"C\" {\n #endif\n \n #include <arrow/array.h>\n+#include <arrow/util/bitmap_reader.h>\n+\n+#include \"./r_task_group.h\"\n \n namespace arrow {\n namespace r {\n \n+template <typename T>\n+void UseSentinel(const std::shared_ptr<Array>& array) {\n\nReview comment:\n       Chances are we might need to implement something like this for arrays that are backed by an immutable buffer, so maybe I can do that, and then we can compare/measure and evaluate how risky this is. \r\n   \r\n   Then we have 3 cases: \r\n    - Array with no nulls: best altrep with DATAPTR(), no need for setting sentinels (what we had prior to this pull request). \r\n    - Array with some nulls, immutable: using GetRegion, I guess with a materialized R vector in the data2 altrep slot, so that DATAPTR() materializes and returns this. \r\n    \r\n    - Array with some nulls, \"mutable\": hacky proposal of this pr. \r\n   \r\n   Perhaps we only need the first 2. \r\n   \r\n   \r\n   \r\n   \r\n   \r\n   \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-19T14:00:37.632+0000",
                    "updated": "2021-07-19T14:00:37.632+0000",
                    "started": "2021-07-19T14:00:37.631+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "624361",
                    "issueId": "13385638"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13385638/worklog/624364",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois commented on a change in pull request #10730:\nURL: https://github.com/apache/arrow/pull/10730#discussion_r672327530\n\n\n\n##########\nFile path: r/src/altrep.cpp\n##########\n@@ -44,25 +49,58 @@ extern \"C\" {\n #endif\n \n #include <arrow/array.h>\n+#include <arrow/util/bitmap_reader.h>\n+\n+#include \"./r_task_group.h\"\n \n namespace arrow {\n namespace r {\n \n+template <typename T>\n+void UseSentinel(const std::shared_ptr<Array>& array) {\n\nReview comment:\n       Also, I believe the second dot will have some code shared with altrep for ChunkedArray. \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-19T14:03:57.098+0000",
                    "updated": "2021-07-19T14:03:57.098+0000",
                    "started": "2021-07-19T14:03:57.097+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "624364",
                    "issueId": "13385638"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13385638/worklog/624977",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois commented on a change in pull request #10730:\nURL: https://github.com/apache/arrow/pull/10730#discussion_r672174111\n\n\n\n##########\nFile path: r/src/array_to_vector.cpp\n##########\n@@ -69,13 +69,25 @@ class Converter {\n     // special case when there is only one array\n     if (chunked_array_->num_chunks() == 1) {\n       const auto& array = chunked_array_->chunk(0);\n-      if (arrow::r::GetBoolOption(\"arrow.use_altrep\", true) && array->length() > 0 &&\n-          array->null_count() == 0) {\n+      // using altrep if\n+      // - the arrow.use_altrep is set to TRUE or unset\n+      // - the array has at least one element\n+      // - either it has no nulls or the data is mutable\n+      if (arrow::r::GetBoolOption(\"arrow.use_altrep\", true) && array->length() > 0) {\n         switch (array->type()->id()) {\n           case arrow::Type::DOUBLE:\n-            return arrow::r::MakeDoubleArrayNoNull(array);\n+            if (array->null_count() == 0 || array->data()->buffers[1]->is_mutable()) {\n\nReview comment:\n       One consequence is that we can't use altrep when taking slices of an Array as the buffer is at least held by two Arrays then. \r\n   \r\n   ``` r\r\n   library(arrow, warn.conflicts = FALSE)\r\n   #> See arrow_info() for available features\r\n   \r\n   is_altrep <- arrow:::is_altrep\r\n   \r\n   v_int <- Array$create(c(1L, NA, 3L))\r\n   \r\n   is_altrep(v_int$as_vector())\r\n   #> [1] TRUE\r\n   \r\n   is_altrep(as.vector(v_int$Slice(1)))\r\n   #> [1] FALSE\r\n   ```\r\n   \r\n   <sup>Created on 2021-07-19 by the [reprex package](https://reprex.tidyverse.org) (v2.0.0)</sup>\r\n   \r\n   I commented out the relevant tests in `test-altrep.R`. Does this matter given that the data there is irrelevant because it's identified as null ? \r\n   \r\n   \n\n##########\nFile path: r/src/array_to_vector.cpp\n##########\n@@ -133,6 +146,16 @@ class Converter {\n \n  protected:\n   std::shared_ptr<ChunkedArray> chunked_array_;\n+\n+ private:\n+  bool CanAltrep(const std::shared_ptr<Array>& array) {\n+    if (array->null_count() == 0) {\n+      return true;\n+    }\n+\n+    return array->data().use_count() == 1 && array->data()->buffers[1].use_count() == 1 &&\n+           array->data()->buffers[1]->is_mutable();\n\nReview comment:\n       specifically here when mutating does not logically change anything. it's my understanding that what's there is undefined and that it is inconsequential to change it. \r\n   \r\n   it may be false however when the buffer comes from a source that prevents mutation, I don't have a specific example but I guess reading from disk or something. \n\n##########\nFile path: r/tests/testthat/test-altrep.R\n##########\n@@ -59,52 +59,117 @@ test_that(\"altrep vectors from int32 and dbl arrays with nulls\", {\n   c_int <- ChunkedArray$create(c(1L, NA, 3L))\n   c_dbl <- ChunkedArray$create(c(1, NA, 3))\n \n-  # cannot be altrep because one NA\n-  expect_false(is_altrep_int_nonull(as.vector(v_int)))\n-  expect_false(is_altrep_int_nonull(as.vector(v_int$Slice(1))))\n-  expect_false(is_altrep_dbl_nonull(as.vector(v_dbl)))\n-  expect_false(is_altrep_dbl_nonull(as.vector(v_dbl$Slice(1))))\n-  expect_false(is_altrep_int_nonull(as.vector(c_int)))\n-  expect_false(is_altrep_int_nonull(as.vector(c_int$Slice(1))))\n-  expect_false(is_altrep_dbl_nonull(as.vector(c_dbl)))\n-  expect_false(is_altrep_dbl_nonull(as.vector(c_dbl$Slice(1))))\n-\n-  # but then, no NA beyond, so can be altrep again\n-  expect_true(is_altrep_int_nonull(as.vector(v_int$Slice(2))))\n-  expect_true(is_altrep_dbl_nonull(as.vector(v_dbl$Slice(2))))\n-  expect_true(is_altrep_int_nonull(as.vector(c_int$Slice(2))))\n-  expect_true(is_altrep_dbl_nonull(as.vector(c_dbl$Slice(2))))\n+  expect_true(is_altrep(as.vector(v_int)))\n+  # expect_true(is_altrep(as.vector(v_int$Slice(1))))\n+  expect_true(is_altrep(as.vector(v_dbl)))\n+  # expect_true(is_altrep(as.vector(v_dbl$Slice(1))))\n+  expect_true(is_altrep(as.vector(c_int)))\n+  # expect_true(is_altrep(as.vector(c_int$Slice(1))))\n+  expect_true(is_altrep(as.vector(c_dbl)))\n+  # expect_true(is_altrep(as.vector(c_dbl$Slice(1))))\n+\n+  # expect_true(is_altrep(as.vector(v_int$Slice(2))))\n+  # expect_true(is_altrep(as.vector(v_dbl$Slice(2))))\n+  # expect_true(is_altrep(as.vector(c_int$Slice(2))))\n+  # expect_true(is_altrep(as.vector(c_dbl$Slice(2))))\n \n   # chunked array with 2 chunks cannot be altrep\n   c_int <- ChunkedArray$create(0L, c(1L, NA, 3L))\n   c_dbl <- ChunkedArray$create(0, c(1, NA, 3))\n   expect_equal(c_int$num_chunks, 2L)\n   expect_equal(c_dbl$num_chunks, 2L)\n-  expect_false(is_altrep_int_nonull(as.vector(c_int)))\n-  expect_false(is_altrep_dbl_nonull(as.vector(c_dbl)))\n-  expect_true(is_altrep_int_nonull(as.vector(c_int$Slice(3))))\n-  expect_true(is_altrep_dbl_nonull(as.vector(c_dbl$Slice(3))))\n+\n+  expect_false(is_altrep(as.vector(c_int)))\n+  expect_false(is_altrep(as.vector(c_dbl)))\n+  # expect_true(is_altrep(as.vector(c_int$Slice(3))))\n+  # expect_true(is_altrep(as.vector(c_dbl$Slice(3))))\n })\n \n test_that(\"empty vectors are not altrep\", {\n   withr::local_options(list(arrow.use_altrep = TRUE))\n   v_int <- Array$create(integer())\n   v_dbl <- Array$create(numeric())\n \n-  expect_false(is_altrep_int_nonull(as.vector(v_int)))\n-  expect_false(is_altrep_dbl_nonull(as.vector(v_dbl)))\n+  expect_false(is_altrep(as.vector(v_int)))\n+  expect_false(is_altrep(as.vector(v_dbl)))\n })\n \n test_that(\"as.data.frame(<Table>, <RecordBatch>) can create altrep vectors\", {\n   withr::local_options(list(arrow.use_altrep = TRUE))\n \n   table <- Table$create(int = c(1L, 2L, 3L), dbl = c(1, 2, 3))\n   df_table <- as.data.frame(table)\n-  expect_true(is_altrep_int_nonull(df_table$int))\n-  expect_true(is_altrep_dbl_nonull(df_table$dbl))\n+  expect_true(is_altrep(df_table$int))\n+  expect_true(is_altrep(df_table$dbl))\n \n   batch <- RecordBatch$create(int = c(1L, 2L, 3L), dbl = c(1, 2, 3))\n   df_batch <- as.data.frame(batch)\n-  expect_true(is_altrep_int_nonull(df_batch$int))\n-  expect_true(is_altrep_dbl_nonull(df_batch$dbl))\n+  expect_true(is_altrep(df_batch$int))\n+  expect_true(is_altrep(df_batch$dbl))\n+})\n+\n+test_that(\"altrep min/max/sum identical to R versions for double\", {\n+  expect_altrep_rountrip <- function(x, fn, ...) {\n+    expect_identical(fn(x, ...), fn(Array$create(x)$as_vector(), ...))\n\nReview comment:\n       Thanks. I'll update to add more things to `expect_altrep_rountrip()`\n\n##########\nFile path: r/src/altrep.cpp\n##########\n@@ -104,63 +143,138 @@ struct ArrayNoNull {\n     return const_cast<void*>(Dataptr_or_null(vec));\n   }\n \n-  // by definition, there are no NA\n-  static int No_NA(SEXP vec) { return 1; }\n+  static int No_NA(SEXP vec) { return Get(vec)->null_count() == 0; }\n+\n+  static SEXP Min(SEXP x, Rboolean narm) { return MinMax(x, narm, \"min\", R_PosInf); }\n+\n+  static SEXP Max(SEXP x, Rboolean narm) { return MinMax(x, narm, \"max\", R_NegInf); }\n+\n+  static SEXP MinMax(SEXP x, Rboolean narm, const std::string& field, double inf) {\n+    const auto& array = Get(x);\n+    bool na_rm = narm == TRUE;\n+    auto n = array->length();\n+    auto null_count = array->null_count();\n+    if ((na_rm || n == 0) && null_count == n) {\n+      return Rf_ScalarReal(inf);\n+    }\n+    if (!na_rm && null_count > 0) {\n+      return cpp11::as_sexp(cpp11::na<data_type>());\n+    }\n+\n+    auto options = Options(array, na_rm);\n+\n+    const auto& minmax =\n+        ValueOrStop(arrow::compute::CallFunction(\"min_max\", {array}, options.get()));\n+    const auto& minmax_scalar =\n+        internal::checked_cast<const StructScalar&>(*minmax.scalar());\n+\n+    const auto& result_scalar = internal::checked_cast<const scalar_type&>(\n+        *ValueOrStop(minmax_scalar.field(field)));\n+    return cpp11::as_sexp(result_scalar.value);\n+  }\n+\n+  static SEXP Sum(SEXP x, Rboolean narm) {\n+    const auto& array = Get(x);\n+    bool na_rm = narm == TRUE;\n+    auto null_count = array->null_count();\n+\n+    if (!na_rm && null_count > 0) {\n+      return cpp11::as_sexp(cpp11::na<data_type>());\n+    }\n+    auto options = Options(array, na_rm);\n+\n+    const auto& sum =\n+        ValueOrStop(arrow::compute::CallFunction(\"sum\", {array}, options.get()));\n+\n+    if (sexp_type == INTSXP) {\n+      // When calling the \"sum\" function on an int32 array, we get an Int64 scalar\n+      // in case of overflow, make it a double like R\n+      int64_t value = internal::checked_cast<const Int64Scalar&>(*sum.scalar()).value;\n+      if (value < INT32_MIN || value > INT32_MAX) {\n\nReview comment:\n       Thanks. R indeed converts to numeric in that case: \r\n   \r\n   ``` r\r\n   str(sum(as.integer(c(-2^31 + 1L))))\r\n   #>  int -2147483647\r\n   str(sum(as.integer(c(-2^31 + 1L, -1L))))\r\n   #>  num -2.15e+09\r\n   ```\r\n   \r\n   <sup>Created on 2021-07-19 by the [reprex package](https://reprex.tidyverse.org) (v2.0.0)</sup>\n\n##########\nFile path: r/src/altrep.cpp\n##########\n@@ -44,25 +49,58 @@ extern \"C\" {\n #endif\n \n #include <arrow/array.h>\n+#include <arrow/util/bitmap_reader.h>\n+\n+#include \"./r_task_group.h\"\n \n namespace arrow {\n namespace r {\n \n+template <typename T>\n+void UseSentinel(const std::shared_ptr<Array>& array) {\n\nReview comment:\n       Oh interesting. I guess the advantage of this approach is that, for the price of this initial setting of the sentinels, we can then have a `DATAPTR()` so access all the data of the array randomly. \r\n   \r\n   OTOH, we could leave the data untouched and have an `_Elt` that would check the null bitmap, and an `GetRegion()` that would also locally use the null bitmap. This `GetRegion()` would indeed copy the region data though, so potentially be more expensive, even when the region has no nulls. \n\n##########\nFile path: r/src/altrep.cpp\n##########\n@@ -44,25 +49,58 @@ extern \"C\" {\n #endif\n \n #include <arrow/array.h>\n+#include <arrow/util/bitmap_reader.h>\n+\n+#include \"./r_task_group.h\"\n \n namespace arrow {\n namespace r {\n \n+template <typename T>\n+void UseSentinel(const std::shared_ptr<Array>& array) {\n\nReview comment:\n       Chances are we might need to implement something like this for arrays that are backed by an immutable buffer, so maybe I can do that, and then we can compare/measure and evaluate how risky this is. \r\n   \r\n   Then we have 3 cases: \r\n    - Array with no nulls: best altrep with DATAPTR(), no need for setting sentinels (what we had prior to this pull request). \r\n    - Array with some nulls, immutable: using GetRegion, I guess with a materialized R vector in the data2 altrep slot, so that DATAPTR() materializes and returns this. \r\n    \r\n    - Array with some nulls, \"mutable\": hacky proposal of this pr. \r\n   \r\n   Perhaps we only need the first 2. \r\n   \r\n   \r\n   \r\n   \r\n   \r\n   \n\n##########\nFile path: r/src/altrep.cpp\n##########\n@@ -44,25 +49,58 @@ extern \"C\" {\n #endif\n \n #include <arrow/array.h>\n+#include <arrow/util/bitmap_reader.h>\n+\n+#include \"./r_task_group.h\"\n \n namespace arrow {\n namespace r {\n \n+template <typename T>\n+void UseSentinel(const std::shared_ptr<Array>& array) {\n\nReview comment:\n       Also, I believe the second dot will have some code shared with altrep for ChunkedArray. \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-20T09:49:19.925+0000",
                    "updated": "2021-07-20T09:49:19.925+0000",
                    "started": "2021-07-20T09:49:19.924+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "624977",
                    "issueId": "13385638"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13385638/worklog/625028",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on a change in pull request #10730:\nURL: https://github.com/apache/arrow/pull/10730#discussion_r672252916\n\n\n\n##########\nFile path: r/src/array_to_vector.cpp\n##########\n@@ -133,6 +146,16 @@ class Converter {\n \n  protected:\n   std::shared_ptr<ChunkedArray> chunked_array_;\n+\n+ private:\n+  bool CanAltrep(const std::shared_ptr<Array>& array) {\n+    if (array->null_count() == 0) {\n+      return true;\n+    }\n+\n+    return array->data().use_count() == 1 && array->data()->buffers[1].use_count() == 1 &&\n+           array->data()->buffers[1]->is_mutable();\n\nReview comment:\n       I thought arrays were immutable? when/how likely is this to be true?\n\n##########\nFile path: r/tests/testthat/test-altrep.R\n##########\n@@ -59,52 +59,117 @@ test_that(\"altrep vectors from int32 and dbl arrays with nulls\", {\n   c_int <- ChunkedArray$create(c(1L, NA, 3L))\n   c_dbl <- ChunkedArray$create(c(1, NA, 3))\n \n-  # cannot be altrep because one NA\n-  expect_false(is_altrep_int_nonull(as.vector(v_int)))\n-  expect_false(is_altrep_int_nonull(as.vector(v_int$Slice(1))))\n-  expect_false(is_altrep_dbl_nonull(as.vector(v_dbl)))\n-  expect_false(is_altrep_dbl_nonull(as.vector(v_dbl$Slice(1))))\n-  expect_false(is_altrep_int_nonull(as.vector(c_int)))\n-  expect_false(is_altrep_int_nonull(as.vector(c_int$Slice(1))))\n-  expect_false(is_altrep_dbl_nonull(as.vector(c_dbl)))\n-  expect_false(is_altrep_dbl_nonull(as.vector(c_dbl$Slice(1))))\n-\n-  # but then, no NA beyond, so can be altrep again\n-  expect_true(is_altrep_int_nonull(as.vector(v_int$Slice(2))))\n-  expect_true(is_altrep_dbl_nonull(as.vector(v_dbl$Slice(2))))\n-  expect_true(is_altrep_int_nonull(as.vector(c_int$Slice(2))))\n-  expect_true(is_altrep_dbl_nonull(as.vector(c_dbl$Slice(2))))\n+  expect_true(is_altrep(as.vector(v_int)))\n+  # expect_true(is_altrep(as.vector(v_int$Slice(1))))\n+  expect_true(is_altrep(as.vector(v_dbl)))\n+  # expect_true(is_altrep(as.vector(v_dbl$Slice(1))))\n+  expect_true(is_altrep(as.vector(c_int)))\n+  # expect_true(is_altrep(as.vector(c_int$Slice(1))))\n+  expect_true(is_altrep(as.vector(c_dbl)))\n+  # expect_true(is_altrep(as.vector(c_dbl$Slice(1))))\n+\n+  # expect_true(is_altrep(as.vector(v_int$Slice(2))))\n+  # expect_true(is_altrep(as.vector(v_dbl$Slice(2))))\n+  # expect_true(is_altrep(as.vector(c_int$Slice(2))))\n+  # expect_true(is_altrep(as.vector(c_dbl$Slice(2))))\n \n   # chunked array with 2 chunks cannot be altrep\n   c_int <- ChunkedArray$create(0L, c(1L, NA, 3L))\n   c_dbl <- ChunkedArray$create(0, c(1, NA, 3))\n   expect_equal(c_int$num_chunks, 2L)\n   expect_equal(c_dbl$num_chunks, 2L)\n-  expect_false(is_altrep_int_nonull(as.vector(c_int)))\n-  expect_false(is_altrep_dbl_nonull(as.vector(c_dbl)))\n-  expect_true(is_altrep_int_nonull(as.vector(c_int$Slice(3))))\n-  expect_true(is_altrep_dbl_nonull(as.vector(c_dbl$Slice(3))))\n+\n+  expect_false(is_altrep(as.vector(c_int)))\n+  expect_false(is_altrep(as.vector(c_dbl)))\n+  # expect_true(is_altrep(as.vector(c_int$Slice(3))))\n+  # expect_true(is_altrep(as.vector(c_dbl$Slice(3))))\n })\n \n test_that(\"empty vectors are not altrep\", {\n   withr::local_options(list(arrow.use_altrep = TRUE))\n   v_int <- Array$create(integer())\n   v_dbl <- Array$create(numeric())\n \n-  expect_false(is_altrep_int_nonull(as.vector(v_int)))\n-  expect_false(is_altrep_dbl_nonull(as.vector(v_dbl)))\n+  expect_false(is_altrep(as.vector(v_int)))\n+  expect_false(is_altrep(as.vector(v_dbl)))\n })\n \n test_that(\"as.data.frame(<Table>, <RecordBatch>) can create altrep vectors\", {\n   withr::local_options(list(arrow.use_altrep = TRUE))\n \n   table <- Table$create(int = c(1L, 2L, 3L), dbl = c(1, 2, 3))\n   df_table <- as.data.frame(table)\n-  expect_true(is_altrep_int_nonull(df_table$int))\n-  expect_true(is_altrep_dbl_nonull(df_table$dbl))\n+  expect_true(is_altrep(df_table$int))\n+  expect_true(is_altrep(df_table$dbl))\n \n   batch <- RecordBatch$create(int = c(1L, 2L, 3L), dbl = c(1, 2, 3))\n   df_batch <- as.data.frame(batch)\n-  expect_true(is_altrep_int_nonull(df_batch$int))\n-  expect_true(is_altrep_dbl_nonull(df_batch$dbl))\n+  expect_true(is_altrep(df_batch$int))\n+  expect_true(is_altrep(df_batch$dbl))\n+})\n+\n+test_that(\"altrep min/max/sum identical to R versions for double\", {\n+  expect_altrep_rountrip <- function(x, fn, ...) {\n+    expect_identical(fn(x, ...), fn(Array$create(x)$as_vector(), ...))\n\nReview comment:\n       Should this also assert altrep-ness, maybe something like this?\r\n   \r\n   ```suggestion\r\n       alt <- Array$create(x)$as_vector()\r\n       expect_true(is_altrep(alt))\r\n       result <- fn(alt)\r\n       # Calling fn() didn't cause the vector to lose its altrep-ness\r\n       expect_true(is_altrep(alt))\r\n       expect_identical(result, fn(x, ...), ...))\r\n   ```\n\n##########\nFile path: r/src/altrep.cpp\n##########\n@@ -104,63 +143,138 @@ struct ArrayNoNull {\n     return const_cast<void*>(Dataptr_or_null(vec));\n   }\n \n-  // by definition, there are no NA\n-  static int No_NA(SEXP vec) { return 1; }\n+  static int No_NA(SEXP vec) { return Get(vec)->null_count() == 0; }\n+\n+  static SEXP Min(SEXP x, Rboolean narm) { return MinMax(x, narm, \"min\", R_PosInf); }\n+\n+  static SEXP Max(SEXP x, Rboolean narm) { return MinMax(x, narm, \"max\", R_NegInf); }\n+\n+  static SEXP MinMax(SEXP x, Rboolean narm, const std::string& field, double inf) {\n+    const auto& array = Get(x);\n+    bool na_rm = narm == TRUE;\n+    auto n = array->length();\n+    auto null_count = array->null_count();\n+    if ((na_rm || n == 0) && null_count == n) {\n+      return Rf_ScalarReal(inf);\n+    }\n+    if (!na_rm && null_count > 0) {\n+      return cpp11::as_sexp(cpp11::na<data_type>());\n+    }\n+\n+    auto options = Options(array, na_rm);\n+\n+    const auto& minmax =\n+        ValueOrStop(arrow::compute::CallFunction(\"min_max\", {array}, options.get()));\n+    const auto& minmax_scalar =\n+        internal::checked_cast<const StructScalar&>(*minmax.scalar());\n+\n+    const auto& result_scalar = internal::checked_cast<const scalar_type&>(\n+        *ValueOrStop(minmax_scalar.field(field)));\n+    return cpp11::as_sexp(result_scalar.value);\n+  }\n+\n+  static SEXP Sum(SEXP x, Rboolean narm) {\n+    const auto& array = Get(x);\n+    bool na_rm = narm == TRUE;\n+    auto null_count = array->null_count();\n+\n+    if (!na_rm && null_count > 0) {\n+      return cpp11::as_sexp(cpp11::na<data_type>());\n+    }\n+    auto options = Options(array, na_rm);\n+\n+    const auto& sum =\n+        ValueOrStop(arrow::compute::CallFunction(\"sum\", {array}, options.get()));\n+\n+    if (sexp_type == INTSXP) {\n+      // When calling the \"sum\" function on an int32 array, we get an Int64 scalar\n+      // in case of overflow, make it a double like R\n+      int64_t value = internal::checked_cast<const Int64Scalar&>(*sum.scalar()).value;\n+      if (value < INT32_MIN || value > INT32_MAX) {\n\nReview comment:\n       `INT32_MIN` is `NA_integer_` right? So it needs to be out of bounds too. Or does this constant come from R and already have that factored in?\r\n   \r\n   ```suggestion\r\n         if (value <= INT32_MIN || value > INT32_MAX) {\r\n   ```\n\n##########\nFile path: r/src/altrep.cpp\n##########\n@@ -44,25 +49,58 @@ extern \"C\" {\n #endif\n \n #include <arrow/array.h>\n+#include <arrow/util/bitmap_reader.h>\n+\n+#include \"./r_task_group.h\"\n \n namespace arrow {\n namespace r {\n \n+template <typename T>\n+void UseSentinel(const std::shared_ptr<Array>& array) {\n\nReview comment:\n       I would have expected that, instead of altering the Arrow data, we would have `_ELT` and `_GET_REGION` methods that would insert the sentinels in the R vector when the data is accessed. What are the tradeoffs of that way vs. this way?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-20T09:55:27.802+0000",
                    "updated": "2021-07-20T09:55:27.802+0000",
                    "started": "2021-07-20T09:55:27.801+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "625028",
                    "issueId": "13385638"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13385638/worklog/625363",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois commented on a change in pull request #10730:\nURL: https://github.com/apache/arrow/pull/10730#discussion_r672304332\n\n\n\n##########\nFile path: r/src/array_to_vector.cpp\n##########\n@@ -133,6 +146,16 @@ class Converter {\n \n  protected:\n   std::shared_ptr<ChunkedArray> chunked_array_;\n+\n+ private:\n+  bool CanAltrep(const std::shared_ptr<Array>& array) {\n+    if (array->null_count() == 0) {\n+      return true;\n+    }\n+\n+    return array->data().use_count() == 1 && array->data()->buffers[1].use_count() == 1 &&\n+           array->data()->buffers[1]->is_mutable();\n\nReview comment:\n       specifically here when mutating does not logically change anything. it's my understanding that what's there is undefined and that it is inconsequential to change it. \r\n   \r\n   it may be false however when the buffer comes from a source that prevents mutation, I don't have a specific example but I guess reading from disk or something. \n\n##########\nFile path: r/tests/testthat/test-altrep.R\n##########\n@@ -59,52 +59,117 @@ test_that(\"altrep vectors from int32 and dbl arrays with nulls\", {\n   c_int <- ChunkedArray$create(c(1L, NA, 3L))\n   c_dbl <- ChunkedArray$create(c(1, NA, 3))\n \n-  # cannot be altrep because one NA\n-  expect_false(is_altrep_int_nonull(as.vector(v_int)))\n-  expect_false(is_altrep_int_nonull(as.vector(v_int$Slice(1))))\n-  expect_false(is_altrep_dbl_nonull(as.vector(v_dbl)))\n-  expect_false(is_altrep_dbl_nonull(as.vector(v_dbl$Slice(1))))\n-  expect_false(is_altrep_int_nonull(as.vector(c_int)))\n-  expect_false(is_altrep_int_nonull(as.vector(c_int$Slice(1))))\n-  expect_false(is_altrep_dbl_nonull(as.vector(c_dbl)))\n-  expect_false(is_altrep_dbl_nonull(as.vector(c_dbl$Slice(1))))\n-\n-  # but then, no NA beyond, so can be altrep again\n-  expect_true(is_altrep_int_nonull(as.vector(v_int$Slice(2))))\n-  expect_true(is_altrep_dbl_nonull(as.vector(v_dbl$Slice(2))))\n-  expect_true(is_altrep_int_nonull(as.vector(c_int$Slice(2))))\n-  expect_true(is_altrep_dbl_nonull(as.vector(c_dbl$Slice(2))))\n+  expect_true(is_altrep(as.vector(v_int)))\n+  # expect_true(is_altrep(as.vector(v_int$Slice(1))))\n+  expect_true(is_altrep(as.vector(v_dbl)))\n+  # expect_true(is_altrep(as.vector(v_dbl$Slice(1))))\n+  expect_true(is_altrep(as.vector(c_int)))\n+  # expect_true(is_altrep(as.vector(c_int$Slice(1))))\n+  expect_true(is_altrep(as.vector(c_dbl)))\n+  # expect_true(is_altrep(as.vector(c_dbl$Slice(1))))\n+\n+  # expect_true(is_altrep(as.vector(v_int$Slice(2))))\n+  # expect_true(is_altrep(as.vector(v_dbl$Slice(2))))\n+  # expect_true(is_altrep(as.vector(c_int$Slice(2))))\n+  # expect_true(is_altrep(as.vector(c_dbl$Slice(2))))\n \n   # chunked array with 2 chunks cannot be altrep\n   c_int <- ChunkedArray$create(0L, c(1L, NA, 3L))\n   c_dbl <- ChunkedArray$create(0, c(1, NA, 3))\n   expect_equal(c_int$num_chunks, 2L)\n   expect_equal(c_dbl$num_chunks, 2L)\n-  expect_false(is_altrep_int_nonull(as.vector(c_int)))\n-  expect_false(is_altrep_dbl_nonull(as.vector(c_dbl)))\n-  expect_true(is_altrep_int_nonull(as.vector(c_int$Slice(3))))\n-  expect_true(is_altrep_dbl_nonull(as.vector(c_dbl$Slice(3))))\n+\n+  expect_false(is_altrep(as.vector(c_int)))\n+  expect_false(is_altrep(as.vector(c_dbl)))\n+  # expect_true(is_altrep(as.vector(c_int$Slice(3))))\n+  # expect_true(is_altrep(as.vector(c_dbl$Slice(3))))\n })\n \n test_that(\"empty vectors are not altrep\", {\n   withr::local_options(list(arrow.use_altrep = TRUE))\n   v_int <- Array$create(integer())\n   v_dbl <- Array$create(numeric())\n \n-  expect_false(is_altrep_int_nonull(as.vector(v_int)))\n-  expect_false(is_altrep_dbl_nonull(as.vector(v_dbl)))\n+  expect_false(is_altrep(as.vector(v_int)))\n+  expect_false(is_altrep(as.vector(v_dbl)))\n })\n \n test_that(\"as.data.frame(<Table>, <RecordBatch>) can create altrep vectors\", {\n   withr::local_options(list(arrow.use_altrep = TRUE))\n \n   table <- Table$create(int = c(1L, 2L, 3L), dbl = c(1, 2, 3))\n   df_table <- as.data.frame(table)\n-  expect_true(is_altrep_int_nonull(df_table$int))\n-  expect_true(is_altrep_dbl_nonull(df_table$dbl))\n+  expect_true(is_altrep(df_table$int))\n+  expect_true(is_altrep(df_table$dbl))\n \n   batch <- RecordBatch$create(int = c(1L, 2L, 3L), dbl = c(1, 2, 3))\n   df_batch <- as.data.frame(batch)\n-  expect_true(is_altrep_int_nonull(df_batch$int))\n-  expect_true(is_altrep_dbl_nonull(df_batch$dbl))\n+  expect_true(is_altrep(df_batch$int))\n+  expect_true(is_altrep(df_batch$dbl))\n+})\n+\n+test_that(\"altrep min/max/sum identical to R versions for double\", {\n+  expect_altrep_rountrip <- function(x, fn, ...) {\n+    expect_identical(fn(x, ...), fn(Array$create(x)$as_vector(), ...))\n\nReview comment:\n       Thanks. I'll update to add more things to `expect_altrep_rountrip()`\n\n##########\nFile path: r/src/altrep.cpp\n##########\n@@ -104,63 +143,138 @@ struct ArrayNoNull {\n     return const_cast<void*>(Dataptr_or_null(vec));\n   }\n \n-  // by definition, there are no NA\n-  static int No_NA(SEXP vec) { return 1; }\n+  static int No_NA(SEXP vec) { return Get(vec)->null_count() == 0; }\n+\n+  static SEXP Min(SEXP x, Rboolean narm) { return MinMax(x, narm, \"min\", R_PosInf); }\n+\n+  static SEXP Max(SEXP x, Rboolean narm) { return MinMax(x, narm, \"max\", R_NegInf); }\n+\n+  static SEXP MinMax(SEXP x, Rboolean narm, const std::string& field, double inf) {\n+    const auto& array = Get(x);\n+    bool na_rm = narm == TRUE;\n+    auto n = array->length();\n+    auto null_count = array->null_count();\n+    if ((na_rm || n == 0) && null_count == n) {\n+      return Rf_ScalarReal(inf);\n+    }\n+    if (!na_rm && null_count > 0) {\n+      return cpp11::as_sexp(cpp11::na<data_type>());\n+    }\n+\n+    auto options = Options(array, na_rm);\n+\n+    const auto& minmax =\n+        ValueOrStop(arrow::compute::CallFunction(\"min_max\", {array}, options.get()));\n+    const auto& minmax_scalar =\n+        internal::checked_cast<const StructScalar&>(*minmax.scalar());\n+\n+    const auto& result_scalar = internal::checked_cast<const scalar_type&>(\n+        *ValueOrStop(minmax_scalar.field(field)));\n+    return cpp11::as_sexp(result_scalar.value);\n+  }\n+\n+  static SEXP Sum(SEXP x, Rboolean narm) {\n+    const auto& array = Get(x);\n+    bool na_rm = narm == TRUE;\n+    auto null_count = array->null_count();\n+\n+    if (!na_rm && null_count > 0) {\n+      return cpp11::as_sexp(cpp11::na<data_type>());\n+    }\n+    auto options = Options(array, na_rm);\n+\n+    const auto& sum =\n+        ValueOrStop(arrow::compute::CallFunction(\"sum\", {array}, options.get()));\n+\n+    if (sexp_type == INTSXP) {\n+      // When calling the \"sum\" function on an int32 array, we get an Int64 scalar\n+      // in case of overflow, make it a double like R\n+      int64_t value = internal::checked_cast<const Int64Scalar&>(*sum.scalar()).value;\n+      if (value < INT32_MIN || value > INT32_MAX) {\n\nReview comment:\n       Thanks. R indeed converts to numeric in that case: \r\n   \r\n   ``` r\r\n   str(sum(as.integer(c(-2^31 + 1L))))\r\n   #>  int -2147483647\r\n   str(sum(as.integer(c(-2^31 + 1L, -1L))))\r\n   #>  num -2.15e+09\r\n   ```\r\n   \r\n   <sup>Created on 2021-07-19 by the [reprex package](https://reprex.tidyverse.org) (v2.0.0)</sup>\n\n##########\nFile path: r/src/altrep.cpp\n##########\n@@ -44,25 +49,58 @@ extern \"C\" {\n #endif\n \n #include <arrow/array.h>\n+#include <arrow/util/bitmap_reader.h>\n+\n+#include \"./r_task_group.h\"\n \n namespace arrow {\n namespace r {\n \n+template <typename T>\n+void UseSentinel(const std::shared_ptr<Array>& array) {\n\nReview comment:\n       Oh interesting. I guess the advantage of this approach is that, for the price of this initial setting of the sentinels, we can then have a `DATAPTR()` so access all the data of the array randomly. \r\n   \r\n   OTOH, we could leave the data untouched and have an `_Elt` that would check the null bitmap, and an `GetRegion()` that would also locally use the null bitmap. This `GetRegion()` would indeed copy the region data though, so potentially be more expensive, even when the region has no nulls. \n\n##########\nFile path: r/src/altrep.cpp\n##########\n@@ -44,25 +49,58 @@ extern \"C\" {\n #endif\n \n #include <arrow/array.h>\n+#include <arrow/util/bitmap_reader.h>\n+\n+#include \"./r_task_group.h\"\n \n namespace arrow {\n namespace r {\n \n+template <typename T>\n+void UseSentinel(const std::shared_ptr<Array>& array) {\n\nReview comment:\n       Chances are we might need to implement something like this for arrays that are backed by an immutable buffer, so maybe I can do that, and then we can compare/measure and evaluate how risky this is. \r\n   \r\n   Then we have 3 cases: \r\n    - Array with no nulls: best altrep with DATAPTR(), no need for setting sentinels (what we had prior to this pull request). \r\n    - Array with some nulls, immutable: using GetRegion, I guess with a materialized R vector in the data2 altrep slot, so that DATAPTR() materializes and returns this. \r\n    \r\n    - Array with some nulls, \"mutable\": hacky proposal of this pr. \r\n   \r\n   Perhaps we only need the first 2. \r\n   \r\n   \r\n   \r\n   \r\n   \r\n   \n\n##########\nFile path: r/src/altrep.cpp\n##########\n@@ -44,25 +49,58 @@ extern \"C\" {\n #endif\n \n #include <arrow/array.h>\n+#include <arrow/util/bitmap_reader.h>\n+\n+#include \"./r_task_group.h\"\n \n namespace arrow {\n namespace r {\n \n+template <typename T>\n+void UseSentinel(const std::shared_ptr<Array>& array) {\n\nReview comment:\n       Also, I believe the second dot will have some code shared with altrep for ChunkedArray. \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-20T12:00:43.805+0000",
                    "updated": "2021-07-20T12:00:43.805+0000",
                    "started": "2021-07-20T12:00:43.805+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "625363",
                    "issueId": "13385638"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 34800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@1a10c8f7[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3ac64840[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5b61b621[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@53ed7145[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@45199b1d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@56eaf27c[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6c963e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@3833a82f[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@317b1d47[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@30036006[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@54bacd5e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@716d7536[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 34800,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Sep 02 13:07:04 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-09-02T13:07:04.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-13164/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2021-06-24T13:20:04.000+0000",
        "updated": "2021-09-02T13:07:16.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "9h 40m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 34800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[R] altrep vectors from Array with nulls",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13385638/comment/17408809",
                    "id": "17408809",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "Issue resolved by pull request 10730\n[https://github.com/apache/arrow/pull/10730]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2021-09-02T13:07:04.485+0000",
                    "updated": "2021-09-02T13:07:04.485+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0s9gg:",
        "customfield_12314139": null
    }
}