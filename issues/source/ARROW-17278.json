{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13474582",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474582",
    "key": "ARROW-17278",
    "fields": {
        "fixVersions": [],
        "resolution": null,
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available",
            "query-engine"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=ichauster",
            "name": "ichauster",
            "key": "JIRAUSER290345",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34055",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34055",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34055",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34055"
            },
            "displayName": "Ivan Chau",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
            "description": "The issue is open and ready for the assignee to start work on it.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
            "name": "Open",
            "id": "1",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                "id": 2,
                "key": "new",
                "colorName": "blue-gray",
                "name": "To Do"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12334978",
                "id": "12334978",
                "name": "Benchmarking"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=ichauster",
            "name": "ichauster",
            "key": "JIRAUSER290345",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34055",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34055",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34055",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34055"
            },
            "displayName": "Ivan Chau",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=ichauster",
            "name": "ichauster",
            "key": "JIRAUSER290345",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34055",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34055",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34055",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34055"
            },
            "displayName": "Ivan Chau",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 10200,
            "total": 10200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 10200,
            "total": 10200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-17278/votes",
            "votes": 1,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 17,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474582/worklog/797041",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "iChauster opened a new pull request, #13771:\nURL: https://github.com/apache/arrow/pull/13771\n\n   - Add a invalid status if batches are ingested in an incorrect order for any source in AsOfJoin.\r\n   - Fix benchmarks to use isolated memory pools. \r\n   - Reuse created memory pools over different benchmark iterations (if possible) to prevent OOM from creating too many memory pools.\r\n   \r\n   \n\n\n",
                    "created": "2022-08-01T21:34:23.070+0000",
                    "updated": "2022-08-01T21:34:23.070+0000",
                    "started": "2022-08-01T21:34:23.070+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "797041",
                    "issueId": "13474582"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474582/worklog/797042",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #13771:\nURL: https://github.com/apache/arrow/pull/13771#issuecomment-1201746993\n\n   https://issues.apache.org/jira/browse/ARROW-17278\n\n\n",
                    "created": "2022-08-01T21:34:42.363+0000",
                    "updated": "2022-08-01T21:34:42.363+0000",
                    "started": "2022-08-01T21:34:42.363+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "797042",
                    "issueId": "13474582"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474582/worklog/797043",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #13771:\nURL: https://github.com/apache/arrow/pull/13771#issuecomment-1201747009\n\n   :warning: Ticket **has not been started in JIRA**, please click 'Start Progress'.\n\n\n",
                    "created": "2022-08-01T21:34:43.896+0000",
                    "updated": "2022-08-01T21:34:43.896+0000",
                    "started": "2022-08-01T21:34:43.896+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "797043",
                    "issueId": "13474582"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474582/worklog/797307",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "iChauster commented on PR #13771:\nURL: https://github.com/apache/arrow/pull/13771#issuecomment-1202983143\n\n   @westonpace Hi Weston, \r\n   \r\n   I wrote some new tests to validate that our in-order assertions are working (it returns an invalid status which is caught by ErrorIfNotOk) . They seem to detect the out-of-ordered test locally on my computer and it passes, but it seems to fail on the CI checks ",
                    "created": "2022-08-02T16:52:01.991+0000",
                    "updated": "2022-08-02T16:52:01.991+0000",
                    "started": "2022-08-02T16:52:01.990+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "797307",
                    "issueId": "13474582"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474582/worklog/797308",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "iChauster commented on code in PR #13771:\nURL: https://github.com/apache/arrow/pull/13771#discussion_r935822680\n\n\n##########\ncpp/src/arrow/compute/exec/asof_join_node.cc:\n##########\n@@ -249,12 +263,25 @@ class InputState {\n     return updated;\n   }\n \n-  void Push(const std::shared_ptr<arrow::RecordBatch>& rb) {\n+  Status Push(const std::shared_ptr<arrow::RecordBatch>& rb) {\n     if (rb->num_rows() > 0) {\n+      // Batches must be in order\n+      if (!Empty()) {\n+        std::shared_ptr<arrow::RecordBatch> latest_batch = GetLatestBatch();\n+        int64_t input_state_latest_time =\n+            latest_batch->column_data(time_col_index_)\n+                ->GetValues<int64_t>(1)[latest_batch->num_rows() - 1];\n+        int64_t batch_earliest_time =\n+            rb->column_data(time_col_index_)->GetValues<int64_t>(1)[0];\n+        if (batch_earliest_time < input_state_latest_time) {\n+          ARROW_RETURN_NOT_OK(Status::Invalid(\"Batches out of order.\"));\n\nReview Comment:\n   We raise the Invalid case here, and the status is processed by `ErrorIfNotOk` in `InputReceived`\n\n\n\n",
                    "created": "2022-08-02T16:55:13.904+0000",
                    "updated": "2022-08-02T16:55:13.904+0000",
                    "started": "2022-08-02T16:55:13.904+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "797308",
                    "issueId": "13474582"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474582/worklog/797393",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "iChauster commented on PR #13771:\nURL: https://github.com/apache/arrow/pull/13771#issuecomment-1203227263\n\n   I think I found the issue.\n\n\n",
                    "created": "2022-08-02T21:22:38.324+0000",
                    "updated": "2022-08-02T21:22:38.324+0000",
                    "started": "2022-08-02T21:22:38.324+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "797393",
                    "issueId": "13474582"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474582/worklog/797413",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "icexelloss commented on PR #13771:\nURL: https://github.com/apache/arrow/pull/13771#issuecomment-1203250184\n\n   Can you print thread id and see if input received is called by different\n   thread?( for the same input table). Also I think we can check when queue is\n   not empty too, we just need to remember the current timestamp in the input\n   state.\n   \n   On Tue, Aug 2, 2022 at 5:36 PM Ivan Chau ***@***.***> wrote:\n   \n   > I think I found the issue, doesn't seem like it passes always?\n   >\n   > EDIT: seems like some sort of race condition. We only run the check when\n   > are sure the queue has batches in it, however, it seems like in the cases\n   > in which the tests fails, it is always empty. The execution context is\n   > setup with nullptr as well. Any ideas here @icexelloss\n   > <https://github.com/icexelloss> ?\n   >\n   > \u2014\n   > Reply to this email directly, view it on GitHub\n   > <https://github.com/apache/arrow/pull/13771#issuecomment-1203227263>, or\n   > unsubscribe\n   > <https://github.com/notifications/unsubscribe-auth/AAGBXLDCYVT3PCXTQLUBSOLVXGIEZANCNFSM55I6LW6A>\n   > .\n   > You are receiving this because you were mentioned.Message ID:\n   > ***@***.***>\n   >\n   \n\n\n",
                    "created": "2022-08-02T21:53:01.207+0000",
                    "updated": "2022-08-02T21:53:01.207+0000",
                    "started": "2022-08-02T21:53:01.206+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "797413",
                    "issueId": "13474582"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474582/worklog/797629",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "iChauster commented on PR #13771:\nURL: https://github.com/apache/arrow/pull/13771#issuecomment-1203999709\n\n   Resolved, was checking the last batch in the queue to find latest time, however these batches get consumed and can be empty, instead introduce another instance variable to track latest time seen in the `InputState`.\n\n\n",
                    "created": "2022-08-03T14:07:31.548+0000",
                    "updated": "2022-08-03T14:07:31.548+0000",
                    "started": "2022-08-03T14:07:31.548+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "797629",
                    "issueId": "13474582"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474582/worklog/797815",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on code in PR #13771:\nURL: https://github.com/apache/arrow/pull/13771#discussion_r937244194\n\n\n##########\ncpp/src/arrow/compute/exec/asof_join_benchmark.cc:\n##########\n@@ -77,14 +88,18 @@ static void TableJoinOverhead(benchmark::State& state,\n     state.PauseTiming();\n     ASSERT_OK_AND_ASSIGN(std::shared_ptr<arrow::compute::ExecPlan> plan,\n                          ExecPlan::Make(&ctx));\n-    std::vector<ExecNode*> input_nodes = {*arrow::compute::MakeExecNode(\n-        \"table_source\", plan.get(), {},\n-        arrow::compute::TableSourceNodeOptions(left_table_stats.table, batch_size))};\n+    std::vector<std::shared_ptr<arrow::internal::ThreadPool>> right_thread_pools;\n+    std::shared_ptr<arrow::internal::ThreadPool> left_thread_pool =\n\nReview Comment:\n   Let's add a comment (can be the same as previous) explaining why this dedicated thread pool is needed.\n\n\n\n##########\ncpp/src/arrow/compute/exec/asof_join_benchmark.cc:\n##########\n@@ -49,6 +49,17 @@ static Result<TableStats> MakeTable(const TableGenerationProperties& properties)\n   return Result<TableStats>({table, rows, rows * row_size});\n }\n \n+static ExecNode* MakeTableSourceNode(std::shared_ptr<arrow::compute::ExecPlan> plan,\n\nReview Comment:\n   Can you add a comment of some kind explaining why you chose to use \"table\" directly instead of \"table_source\"?\n\n\n\n##########\ncpp/src/arrow/compute/exec/asof_join_node.cc:\n##########\n@@ -46,52 +46,66 @@ typedef uint64_t row_index_t;\n typedef int col_index_t;\n \n /**\n- * Simple implementation for an unbound concurrent queue\n+ * Simple implementation for an bounded concurrent queue\n  */\n template <class T>\n-class ConcurrentQueue {\n+class ConcurrentBoundedQueue {\n+  size_t _remaining;\n+  std::vector<T> _buffer;\n+  mutable std::mutex _gate;\n+  std::condition_variable _not_full;\n+  std::condition_variable _not_empty;\n+\n+  size_t _next_push = 0;\n+  size_t _next_pop = 0;\n+\n  public:\n+  explicit ConcurrentBoundedQueue(size_t capacity)\n+      : _remaining(capacity), _buffer(capacity) {}\n+\n+  // Push new value to queue, waiting for capacity indefinitely.\n+  void Push(const T& t) {\n+    std::unique_lock<std::mutex> lock(_gate);\n+    _not_full.wait(lock, [&] { return _remaining > 0; });\n+    _buffer[_next_push++] = t;\n+    _next_push %= _buffer.size();\n+    --_remaining;\n+    _not_empty.notify_one();\n+  }\n+  // Get oldest value from queue, or wait indefinitely for it.\n   T Pop() {\n-    std::unique_lock<std::mutex> lock(mutex_);\n-    cond_.wait(lock, [&] { return !queue_.empty(); });\n-    auto item = queue_.front();\n-    queue_.pop();\n-    return item;\n-  }\n-\n-  void Push(const T& item) {\n-    std::unique_lock<std::mutex> lock(mutex_);\n-    queue_.push(item);\n-    cond_.notify_one();\n+    std::unique_lock<std::mutex> lock(_gate);\n+    _not_empty.wait(lock, [&] { return _remaining < _buffer.size(); });\n+    T r = _buffer[_next_pop++];\n+    _next_pop %= _buffer.size();\n+    ++_remaining;\n+    _not_full.notify_one();\n+    return r;\n   }\n-\n+  // Try to pop the oldest value from the queue (or return nullopt if none)\n   util::optional<T> TryPop() {\n-    // Try to pop the oldest value from the queue (or return nullopt if none)\n-    std::unique_lock<std::mutex> lock(mutex_);\n-    if (queue_.empty()) {\n-      return util::nullopt;\n-    } else {\n-      auto item = queue_.front();\n-      queue_.pop();\n-      return item;\n-    }\n+    std::unique_lock<std::mutex> lock(_gate);\n+    if (_remaining == _buffer.size()) return util::nullopt;\n+    T r = _buffer[_next_pop++];\n+    _next_pop %= _buffer.size();\n+    ++_remaining;\n+    _not_full.notify_one();\n+    return r;\n   }\n \n+  // Test whether empty\n   bool Empty() const {\n-    std::unique_lock<std::mutex> lock(mutex_);\n-    return queue_.empty();\n+    std::unique_lock<std::mutex> lock(_gate);\n+    return _remaining == _buffer.size();\n   }\n \n+  int Size() const { return _buffer.size(); }\n\nReview Comment:\n   I don't remember if this kind of access outside the mutex causes TSAN errors or not.  Have you run TSAN locally?\n\n\n\n##########\ncpp/src/arrow/compute/exec/asof_join_node.cc:\n##########\n@@ -46,52 +46,66 @@ typedef uint64_t row_index_t;\n typedef int col_index_t;\n \n /**\n- * Simple implementation for an unbound concurrent queue\n+ * Simple implementation for an bounded concurrent queue\n  */\n template <class T>\n-class ConcurrentQueue {\n+class ConcurrentBoundedQueue {\n+  size_t _remaining;\n+  std::vector<T> _buffer;\n+  mutable std::mutex _gate;\n+  std::condition_variable _not_full;\n+  std::condition_variable _not_empty;\n+\n+  size_t _next_push = 0;\n+  size_t _next_pop = 0;\n+\n  public:\n+  explicit ConcurrentBoundedQueue(size_t capacity)\n+      : _remaining(capacity), _buffer(capacity) {}\n+\n+  // Push new value to queue, waiting for capacity indefinitely.\n+  void Push(const T& t) {\n+    std::unique_lock<std::mutex> lock(_gate);\n+    _not_full.wait(lock, [&] { return _remaining > 0; });\n+    _buffer[_next_push++] = t;\n+    _next_push %= _buffer.size();\n+    --_remaining;\n+    _not_empty.notify_one();\n+  }\n+  // Get oldest value from queue, or wait indefinitely for it.\n   T Pop() {\n-    std::unique_lock<std::mutex> lock(mutex_);\n-    cond_.wait(lock, [&] { return !queue_.empty(); });\n-    auto item = queue_.front();\n-    queue_.pop();\n-    return item;\n-  }\n-\n-  void Push(const T& item) {\n-    std::unique_lock<std::mutex> lock(mutex_);\n-    queue_.push(item);\n-    cond_.notify_one();\n+    std::unique_lock<std::mutex> lock(_gate);\n+    _not_empty.wait(lock, [&] { return _remaining < _buffer.size(); });\n+    T r = _buffer[_next_pop++];\n+    _next_pop %= _buffer.size();\n+    ++_remaining;\n+    _not_full.notify_one();\n+    return r;\n   }\n-\n+  // Try to pop the oldest value from the queue (or return nullopt if none)\n   util::optional<T> TryPop() {\n-    // Try to pop the oldest value from the queue (or return nullopt if none)\n-    std::unique_lock<std::mutex> lock(mutex_);\n-    if (queue_.empty()) {\n-      return util::nullopt;\n-    } else {\n-      auto item = queue_.front();\n-      queue_.pop();\n-      return item;\n-    }\n+    std::unique_lock<std::mutex> lock(_gate);\n+    if (_remaining == _buffer.size()) return util::nullopt;\n+    T r = _buffer[_next_pop++];\n+    _next_pop %= _buffer.size();\n+    ++_remaining;\n+    _not_full.notify_one();\n+    return r;\n   }\n \n+  // Test whether empty\n   bool Empty() const {\n-    std::unique_lock<std::mutex> lock(mutex_);\n-    return queue_.empty();\n+    std::unique_lock<std::mutex> lock(_gate);\n+    return _remaining == _buffer.size();\n   }\n \n+  int Size() const { return _buffer.size(); }\n+\n   // Un-synchronized access to front\n   // For this to be \"safe\":\n   // 1) the caller logically guarantees that queue is not empty\n   // 2) pop/try_pop cannot be called concurrently with this\n\nReview Comment:\n   Just `pop/try_pop`?  Or also `push`?\n\n\n\n",
                    "created": "2022-08-04T00:23:07.396+0000",
                    "updated": "2022-08-04T00:23:07.396+0000",
                    "started": "2022-08-04T00:23:07.396+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "797815",
                    "issueId": "13474582"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474582/worklog/798024",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "iChauster commented on code in PR #13771:\nURL: https://github.com/apache/arrow/pull/13771#discussion_r937799114\n\n\n##########\ncpp/src/arrow/compute/exec/asof_join_node.cc:\n##########\n@@ -46,52 +46,66 @@ typedef uint64_t row_index_t;\n typedef int col_index_t;\n \n /**\n- * Simple implementation for an unbound concurrent queue\n+ * Simple implementation for an bounded concurrent queue\n  */\n template <class T>\n-class ConcurrentQueue {\n+class ConcurrentBoundedQueue {\n+  size_t _remaining;\n+  std::vector<T> _buffer;\n+  mutable std::mutex _gate;\n+  std::condition_variable _not_full;\n+  std::condition_variable _not_empty;\n+\n+  size_t _next_push = 0;\n+  size_t _next_pop = 0;\n+\n  public:\n+  explicit ConcurrentBoundedQueue(size_t capacity)\n+      : _remaining(capacity), _buffer(capacity) {}\n+\n+  // Push new value to queue, waiting for capacity indefinitely.\n+  void Push(const T& t) {\n+    std::unique_lock<std::mutex> lock(_gate);\n+    _not_full.wait(lock, [&] { return _remaining > 0; });\n+    _buffer[_next_push++] = t;\n+    _next_push %= _buffer.size();\n+    --_remaining;\n+    _not_empty.notify_one();\n+  }\n+  // Get oldest value from queue, or wait indefinitely for it.\n   T Pop() {\n-    std::unique_lock<std::mutex> lock(mutex_);\n-    cond_.wait(lock, [&] { return !queue_.empty(); });\n-    auto item = queue_.front();\n-    queue_.pop();\n-    return item;\n-  }\n-\n-  void Push(const T& item) {\n-    std::unique_lock<std::mutex> lock(mutex_);\n-    queue_.push(item);\n-    cond_.notify_one();\n+    std::unique_lock<std::mutex> lock(_gate);\n+    _not_empty.wait(lock, [&] { return _remaining < _buffer.size(); });\n+    T r = _buffer[_next_pop++];\n+    _next_pop %= _buffer.size();\n+    ++_remaining;\n+    _not_full.notify_one();\n+    return r;\n   }\n-\n+  // Try to pop the oldest value from the queue (or return nullopt if none)\n   util::optional<T> TryPop() {\n-    // Try to pop the oldest value from the queue (or return nullopt if none)\n-    std::unique_lock<std::mutex> lock(mutex_);\n-    if (queue_.empty()) {\n-      return util::nullopt;\n-    } else {\n-      auto item = queue_.front();\n-      queue_.pop();\n-      return item;\n-    }\n+    std::unique_lock<std::mutex> lock(_gate);\n+    if (_remaining == _buffer.size()) return util::nullopt;\n+    T r = _buffer[_next_pop++];\n+    _next_pop %= _buffer.size();\n+    ++_remaining;\n+    _not_full.notify_one();\n+    return r;\n   }\n \n+  // Test whether empty\n   bool Empty() const {\n-    std::unique_lock<std::mutex> lock(mutex_);\n-    return queue_.empty();\n+    std::unique_lock<std::mutex> lock(_gate);\n+    return _remaining == _buffer.size();\n   }\n \n+  int Size() const { return _buffer.size(); }\n\nReview Comment:\n   Hey Weston, I'm not sure how to run TSAN locally with `ninja`, is there some documentation on how to do this?\r\n   \r\n   In any case, I don't actually think we use this method anywhere ",
                    "created": "2022-08-04T13:43:20.229+0000",
                    "updated": "2022-08-04T13:43:20.229+0000",
                    "started": "2022-08-04T13:43:20.229+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "798024",
                    "issueId": "13474582"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474582/worklog/798167",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on code in PR #13771:\nURL: https://github.com/apache/arrow/pull/13771#discussion_r938201199\n\n\n##########\ncpp/src/arrow/compute/exec/asof_join_benchmark.cc:\n##########\n@@ -49,6 +49,20 @@ static Result<TableStats> MakeTable(const TableGenerationProperties& properties)\n   return Result<TableStats>({table, rows, rows * row_size});\n }\n \n+// As opposed to using table_source, we create a make a ReaderGenerator for the specified\n+// table. This allows us to specify a thread pool to isolate the threads used for each\n+// source as an anti-deadlocking mechanism.\n+static ExecNode* MakeTableSourceNode(std::shared_ptr<arrow::compute::ExecPlan> plan,\n\nReview Comment:\n   This is a minor nitpick but you can probably just pass `ExecPlan*` here since that is all `MakeExecNode` requires.  When you pass `std::shared_ptr` you are either forcing a copy of the `shared_ptr` (unless the caller can `std::move` which I don't think is the case here).  In general that isn't a big deal (one atomic increment) but it's good to get in the practice of only using what you need.\n\n\n\n##########\ncpp/src/arrow/compute/exec/asof_join_benchmark.cc:\n##########\n@@ -77,14 +91,20 @@ static void TableJoinOverhead(benchmark::State& state,\n     state.PauseTiming();\n     ASSERT_OK_AND_ASSIGN(std::shared_ptr<arrow::compute::ExecPlan> plan,\n                          ExecPlan::Make(&ctx));\n-    std::vector<ExecNode*> input_nodes = {*arrow::compute::MakeExecNode(\n-        \"table_source\", plan.get(), {},\n-        arrow::compute::TableSourceNodeOptions(left_table_stats.table, batch_size))};\n+    // Each source (for each table) is dedicated its own thread pool to prevent\n+    // deadlocking.\n+    std::vector<std::shared_ptr<arrow::internal::ThreadPool>> right_thread_pools;\n+    std::shared_ptr<arrow::internal::ThreadPool> left_thread_pool =\n+        *arrow::internal::ThreadPool::MakeEternal(1);\n+    std::vector<ExecNode*> input_nodes = {MakeTableSourceNode(\n+        plan, left_table_stats.table, batch_size, left_thread_pool.get())};\n     input_nodes.reserve(right_input_tables.size() + 1);\n     for (TableStats table_stats : right_input_tables) {\n-      input_nodes.push_back(*arrow::compute::MakeExecNode(\n-          \"table_source\", plan.get(), {},\n-          arrow::compute::TableSourceNodeOptions(table_stats.table, batch_size)));\n+      std::shared_ptr<arrow::internal::ThreadPool> right_thread_pool =\n+          *arrow::internal::ThreadPool::MakeEternal(1);\n+      right_thread_pools.push_back(right_thread_pool);\n+      input_nodes.push_back(MakeTableSourceNode(plan, table_stats.table, batch_size,\n+                                                right_thread_pool.get()));\n\nReview Comment:\n   ```suggestion\r\n         input_nodes.push_back(MakeTableSourceNode(plan, table_stats.table, batch_size,\r\n                                                   right_thread_pool.get()));\r\n         right_thread_pools.push_back(std::move(right_thread_pool));\r\n   ```\n\n\n\n##########\ncpp/src/arrow/compute/exec/asof_join_node.cc:\n##########\n@@ -249,12 +263,23 @@ class InputState {\n     return updated;\n   }\n \n-  void Push(const std::shared_ptr<arrow::RecordBatch>& rb) {\n+  Status Push(const std::shared_ptr<arrow::RecordBatch>& rb) {\n     if (rb->num_rows() > 0) {\n+      int64_t batch_earliest_time =\n+          rb->column_data(time_col_index_)->GetValues<int64_t>(1)[0];\n+      int64_t batch_latest_time =\n+          rb->column_data(time_col_index_)->GetValues<int64_t>(1)[rb->num_rows() - 1];\n+      // Batches must be in order\n+      if (batch_earliest_time < latest_time_) {\n+        ARROW_RETURN_NOT_OK(Status::Invalid(\"Batches out of order.\"));\n\nReview Comment:\n   ```suggestion\r\n           return Status::Invalid(\"Batches out of order.\");\r\n   ```\n\n\n\n##########\ncpp/src/arrow/compute/exec/asof_join_benchmark.cc:\n##########\n@@ -49,6 +49,20 @@ static Result<TableStats> MakeTable(const TableGenerationProperties& properties)\n   return Result<TableStats>({table, rows, rows * row_size});\n }\n \n+// As opposed to using table_source, we create a make a ReaderGenerator for the specified\n+// table. This allows us to specify a thread pool to isolate the threads used for each\n+// source as an anti-deadlocking mechanism.\n\nReview Comment:\n   ```suggestion\r\n   // As opposed to using table_source, we create a ReaderGenerator for the specified\r\n   // table. This allows us to specify a thread pool to isolate the threads used for each\r\n   // source as an anti-deadlocking mechanism.\r\n   ```\n\n\n\n##########\ncpp/src/arrow/compute/exec/asof_join_benchmark.cc:\n##########\n@@ -49,6 +49,20 @@ static Result<TableStats> MakeTable(const TableGenerationProperties& properties)\n   return Result<TableStats>({table, rows, rows * row_size});\n }\n \n+// As opposed to using table_source, we create a make a ReaderGenerator for the specified\n+// table. This allows us to specify a thread pool to isolate the threads used for each\n+// source as an anti-deadlocking mechanism.\n+static ExecNode* MakeTableSourceNode(std::shared_ptr<arrow::compute::ExecPlan> plan,\n+                                     std::shared_ptr<Table> table, int batch_size,\n+                                     arrow::internal::ThreadPool* thread_pool) {\n+  std::shared_ptr<TableBatchReader> reader = std::make_shared<TableBatchReader>(table);\n\nReview Comment:\n   ```suggestion\r\n     std::shared_ptr<TableBatchReader> reader = std::make_shared<TableBatchReader>(std::move(table));\r\n   ```\r\n   Another nitpick to avoid a shared_ptr copy.\n\n\n\n##########\ncpp/src/arrow/compute/exec/asof_join_node.cc:\n##########\n@@ -46,52 +46,66 @@ typedef uint64_t row_index_t;\n typedef int col_index_t;\n \n /**\n- * Simple implementation for an unbound concurrent queue\n+ * Simple implementation for an bounded concurrent queue\n  */\n template <class T>\n-class ConcurrentQueue {\n+class ConcurrentBoundedQueue {\n+  size_t _remaining;\n+  std::vector<T> _buffer;\n+  mutable std::mutex _gate;\n+  std::condition_variable _not_full;\n+  std::condition_variable _not_empty;\n+\n+  size_t _next_push = 0;\n+  size_t _next_pop = 0;\n\nReview Comment:\n   ```suggestion\r\n     size_t remaining_;\r\n     std::vector<T> buffer_;\r\n     mutable std::mutex gate_;\r\n     std::condition_variable not_full_;\r\n     std::condition_variable not_empty_;\r\n   \r\n     size_t next_push_ = 0;\r\n     size_t next_pop_ = 0;\r\n   ```\n\n\n\n##########\ncpp/src/arrow/compute/exec/asof_join_node.cc:\n##########\n@@ -46,52 +46,66 @@ typedef uint64_t row_index_t;\n typedef int col_index_t;\n \n /**\n- * Simple implementation for an unbound concurrent queue\n+ * Simple implementation for an bounded concurrent queue\n\nReview Comment:\n   ```suggestion\r\n    * Simple implementation for a bounded concurrent queue\r\n   ```\n\n\n\n##########\ncpp/src/arrow/compute/exec/asof_join_benchmark.cc:\n##########\n@@ -49,6 +49,20 @@ static Result<TableStats> MakeTable(const TableGenerationProperties& properties)\n   return Result<TableStats>({table, rows, rows * row_size});\n }\n \n+// As opposed to using table_source, we create a make a ReaderGenerator for the specified\n+// table. This allows us to specify a thread pool to isolate the threads used for each\n+// source as an anti-deadlocking mechanism.\n+static ExecNode* MakeTableSourceNode(std::shared_ptr<arrow::compute::ExecPlan> plan,\n+                                     std::shared_ptr<Table> table, int batch_size,\n+                                     arrow::internal::ThreadPool* thread_pool) {\n+  std::shared_ptr<TableBatchReader> reader = std::make_shared<TableBatchReader>(table);\n+  reader->set_chunksize(batch_size);\n+  auto batch_gen = *arrow::compute::MakeReaderGenerator(std::move(reader), thread_pool);\n+  return *arrow::compute::MakeExecNode(\n+      \"source\", plan.get(), {},\n+      arrow::compute::SourceNodeOptions(table->schema(), batch_gen));\n\nReview Comment:\n   ```suggestion\r\n         arrow::compute::SourceNodeOptions(table->schema(), std::move(batch_gen)));\r\n   ```\n\n\n\n",
                    "created": "2022-08-04T20:14:24.352+0000",
                    "updated": "2022-08-04T20:14:24.352+0000",
                    "started": "2022-08-04T20:14:24.351+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "798167",
                    "issueId": "13474582"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474582/worklog/798443",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "icexelloss commented on code in PR #13771:\nURL: https://github.com/apache/arrow/pull/13771#discussion_r938903559\n\n\n##########\ncpp/src/arrow/compute/exec/asof_join_node.cc:\n##########\n@@ -249,12 +263,23 @@ class InputState {\n     return updated;\n   }\n \n-  void Push(const std::shared_ptr<arrow::RecordBatch>& rb) {\n+  Status Push(const std::shared_ptr<arrow::RecordBatch>& rb) {\n     if (rb->num_rows() > 0) {\n+      int64_t batch_earliest_time =\n+          rb->column_data(time_col_index_)->GetValues<int64_t>(1)[0];\n+      int64_t batch_latest_time =\n+          rb->column_data(time_col_index_)->GetValues<int64_t>(1)[rb->num_rows() - 1];\n+      // Batches must be in order\n+      if (batch_earliest_time < latest_time_) {\n+        return Status::Invalid(\"Batches out of order.\");\n\nReview Comment:\n   Can you include `batch_earliest_time` and `latest_time_` in the error meesage\n\n\n\n##########\ncpp/src/arrow/compute/exec/asof_join_node_test.cc:\n##########\n@@ -306,5 +332,10 @@ TEST(AsofJoinTest, TestMissingKeys) {\n           {field(\"time\", int64()), field(\"key1\", int32()), field(\"r0_v0\", float64())}));\n }\n \n+TEST(AsofJoinTest, SourceInOrderAssertion) {\n\nReview Comment:\n   Can you change `SourceInOrderAssertion` to `TestSourceOutOfOrder` \n\n\n\n##########\ncpp/src/arrow/compute/exec/asof_join_node.cc:\n##########\n@@ -46,52 +46,66 @@ typedef uint64_t row_index_t;\n typedef int col_index_t;\n \n /**\n- * Simple implementation for an unbound concurrent queue\n+ * Simple implementation for a bounded concurrent queue\n  */\n template <class T>\n-class ConcurrentQueue {\n+class ConcurrentBoundedQueue {\n+  size_t remaining_;\n+  std::vector<T> buffer_;\n\nReview Comment:\n   Can you move these variable to the `private` member section at the bottom\n\n\n\n",
                    "created": "2022-08-05T15:02:51.635+0000",
                    "updated": "2022-08-05T15:02:51.635+0000",
                    "started": "2022-08-05T15:02:51.635+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "798443",
                    "issueId": "13474582"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474582/worklog/798446",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "icexelloss commented on code in PR #13771:\nURL: https://github.com/apache/arrow/pull/13771#discussion_r938909809\n\n\n##########\ncpp/src/arrow/compute/exec/asof_join_node_test.cc:\n##########\n@@ -121,6 +121,32 @@ void DoRunInvalidTypeTest(const std::shared_ptr<Schema>& l_schema,\n   ASSERT_RAISES(Invalid, join.AddToPlan(plan.get()));\n }\n \n+void DoRunInvalidAtRuntimeTest(const std::vector<util::string_view>& l_data,\n+                               const std::vector<util::string_view>& r0_data) {\n+  auto l_schema =\n+      schema({field(\"time\", int64()), field(\"key\", int32()), field(\"l_v0\", float64())});\n+  auto r_schema =\n+      schema({field(\"time\", int64()), field(\"key\", int32()), field(\"r0_v0\", float64())});\n+  BatchesWithSchema l_batches = MakeBatchesFromString(l_schema, l_data);\n+  BatchesWithSchema r_batches = MakeBatchesFromString(r_schema, r0_data);\n+\n+  auto exec_ctx =\n+      arrow::internal::make_unique<ExecContext>(default_memory_pool(), nullptr);\n+  ASSERT_OK_AND_ASSIGN(auto plan, ExecPlan::Make(exec_ctx.get()));\n+\n+  AsofJoinNodeOptions join_options(\"time\", \"key\", 0);\n+  Declaration join{\"asofjoin\", join_options};\n+  join.inputs.emplace_back(Declaration{\n+      \"source\", SourceNodeOptions{l_batches.schema, l_batches.gen(false, false)}});\n+  join.inputs.emplace_back(Declaration{\n+      \"source\", SourceNodeOptions{r_batches.schema, r_batches.gen(false, false)}});\n+\n+  AsyncGenerator<util::optional<ExecBatch>> sink_gen;\n+  ASSERT_OK(Declaration::Sequence({join, {\"sink\", SinkNodeOptions{&sink_gen}}})\n+                .AddToPlan(plan.get()));\n+  ASSERT_FINISHES_AND_RAISES(Invalid, StartAndCollect(plan.get(), sink_gen));\n\nReview Comment:\n   Can you use `EXPECT_FINISHES_AND_RAISES_WITH_MESSAGE_THAT` and assert error message\n\n\n\n",
                    "created": "2022-08-05T15:04:36.461+0000",
                    "updated": "2022-08-05T15:04:36.461+0000",
                    "started": "2022-08-05T15:04:36.460+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "798446",
                    "issueId": "13474582"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474582/worklog/798451",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "iChauster commented on code in PR #13771:\nURL: https://github.com/apache/arrow/pull/13771#discussion_r938924554\n\n\n##########\ncpp/src/arrow/compute/exec/asof_join_benchmark.cc:\n##########\n@@ -49,6 +49,20 @@ static Result<TableStats> MakeTable(const TableGenerationProperties& properties)\n   return Result<TableStats>({table, rows, rows * row_size});\n }\n \n+// As opposed to using table_source, we create a make a ReaderGenerator for the specified\n+// table. This allows us to specify a thread pool to isolate the threads used for each\n+// source as an anti-deadlocking mechanism.\n+static ExecNode* MakeTableSourceNode(std::shared_ptr<arrow::compute::ExecPlan> plan,\n\nReview Comment:\n   Change to `ExecPlan*`!\n\n\n\n##########\ncpp/src/arrow/compute/exec/asof_join_benchmark.cc:\n##########\n@@ -49,6 +49,20 @@ static Result<TableStats> MakeTable(const TableGenerationProperties& properties)\n   return Result<TableStats>({table, rows, rows * row_size});\n }\n \n+// As opposed to using table_source, we create a make a ReaderGenerator for the specified\n+// table. This allows us to specify a thread pool to isolate the threads used for each\n+// source as an anti-deadlocking mechanism.\n+static ExecNode* MakeTableSourceNode(std::shared_ptr<arrow::compute::ExecPlan> plan,\n\nReview Comment:\n   Changed to `ExecPlan*`!\n\n\n\n",
                    "created": "2022-08-05T15:21:52.395+0000",
                    "updated": "2022-08-05T15:21:52.395+0000",
                    "started": "2022-08-05T15:21:52.394+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "798451",
                    "issueId": "13474582"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474582/worklog/798955",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "icexelloss commented on PR #13771:\nURL: https://github.com/apache/arrow/pull/13771#issuecomment-1208162383\n\n   @westonpace - @iChauster has finished his internship last week so I will take this PR over. Let me know if you have more comments.\n\n\n",
                    "created": "2022-08-08T13:54:25.284+0000",
                    "updated": "2022-08-08T13:54:25.284+0000",
                    "started": "2022-08-08T13:54:25.284+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "798955",
                    "issueId": "13474582"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474582/worklog/801716",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "icexelloss commented on PR #13771:\nURL: https://github.com/apache/arrow/pull/13771#issuecomment-1219539098\n\n   @westonpace Are there more changes needed for this PR?\n\n\n",
                    "created": "2022-08-18T14:07:27.698+0000",
                    "updated": "2022-08-18T14:07:27.698+0000",
                    "started": "2022-08-18T14:07:27.698+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "801716",
                    "issueId": "13474582"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474582/worklog/806388",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "icexelloss commented on PR #13771:\nURL: https://github.com/apache/arrow/pull/13771#issuecomment-1238177184\n\n   @westonpace Anything else we need to do here for merging?\n\n\n",
                    "created": "2022-09-06T13:47:49.905+0000",
                    "updated": "2022-09-06T13:47:49.905+0000",
                    "started": "2022-09-06T13:47:49.904+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "806388",
                    "issueId": "13474582"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 10200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@644d5f2a[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3444d75[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@39cb9b1c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@18c556b5[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4b907577[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@75e925cc[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@109f5316[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@22ddcf4e[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6aae2daf[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@56d5b273[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3cb85c5c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@7053433a[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 10200,
        "customfield_12312520": null,
        "customfield_12312521": "2022-08-01 21:31:17.0",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": null,
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-17278/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2022-08-01T21:31:17.000+0000",
        "updated": "2022-09-06T13:47:50.000+0000",
        "timeoriginalestimate": null,
        "description": "* Add a invalid status if batches are ingested in an incorrect order for any source\r\n * Fix benchmarks to force using isolated memory pools and reusing to prevent OOM.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 10200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++][Benchmarking] Add AsofJoin Ordering Assertion and Benchmark Fixes",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [],
            "maxResults": 0,
            "total": 0,
            "startAt": 0
        },
        "customfield_12311820": "0|z17dk8:",
        "customfield_12314139": null
    }
}