{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13493846",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13493846",
    "key": "ARROW-18208",
    "fields": {
        "fixVersions": [],
        "resolution": null,
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=mansoonism",
            "name": "mansoonism",
            "key": "JIRAUSER297746",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Samuel Schneck",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
            "description": "The issue is open and ready for the assignee to start work on it.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
            "name": "Open",
            "id": "1",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                "id": 2,
                "key": "new",
                "colorName": "blue-gray",
                "name": "To Do"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12332552",
                "id": "12332552",
                "name": "JavaScript"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=mansoonism",
            "name": "mansoonism",
            "key": "JIRAUSER297746",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Samuel Schneck",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=mansoonism",
            "name": "mansoonism",
            "key": "JIRAUSER297746",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Samuel Schneck",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 3000,
            "total": 3000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 3000,
            "total": 3000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-18208/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 5,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13493846/worklog/822159",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #14554:\nURL: https://github.com/apache/arrow/pull/14554#issuecomment-1297909535\n\n   https://issues.apache.org/jira/browse/ARROW-18208\n\n\n",
                    "created": "2022-11-01T01:51:17.235+0000",
                    "updated": "2022-11-01T01:51:17.235+0000",
                    "started": "2022-11-01T01:51:17.235+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "822159",
                    "issueId": "13493846"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13493846/worklog/822160",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #14554:\nURL: https://github.com/apache/arrow/pull/14554#issuecomment-1297909575\n\n   :warning: Ticket **has no components in JIRA**, make sure you assign one.\n\n\n",
                    "created": "2022-11-01T01:51:19.211+0000",
                    "updated": "2022-11-01T01:51:19.211+0000",
                    "started": "2022-11-01T01:51:19.211+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "822160",
                    "issueId": "13493846"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13493846/worklog/822161",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #14554:\nURL: https://github.com/apache/arrow/pull/14554#issuecomment-1297909589\n\n   :warning: Ticket **has not been started in JIRA**, please click 'Start Progress'.\n\n\n",
                    "created": "2022-11-01T01:51:20.894+0000",
                    "updated": "2022-11-01T01:51:20.894+0000",
                    "started": "2022-11-01T01:51:20.893+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "822161",
                    "issueId": "13493846"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13493846/worklog/822162",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "MannySchneck commented on PR #14554:\nURL: https://github.com/apache/arrow/pull/14554#issuecomment-1297910163\n\n   Reverted the code change and re-ran the test I wrote:\r\n   \r\n   ```\r\n   manny|arrow/js> yarn test\r\n   yarn run v1.22.19\r\n   $ cross-env NODE_NO_WARNINGS=1 gulp test\r\n   [20:50:59] Using gulpfile ~/code/arrow/js/gulpfile.js\r\n   [20:50:59] Starting 'test'...\r\n   [20:50:59] Starting 'test:ts'...\r\n   [20:50:59] Starting 'test:src'...\r\n   [20:50:59] Starting 'test:apache-arrow'...\r\n   [20:50:59] Starting 'test:es5:cjs'...\r\n   Determining test suites to run...Determining test suites to run...Determining test suites to run...Determini\r\n   ts-jest[ts-jest-transformer] (WARN) Define `ts-jest` config under `globals` is deprecated. Please do\r\n   transform: {\r\n       <transform_regex>: ['ts-jest', { /* ts-jest config goes here in Jest */ }],\r\n   },\r\n   ts-jest[ts-jest-transformer] (WARN) Define `ts-jest` config under `globals` is deprecated. Please do\r\n   transform: {\r\n       <transform_regex>: ['ts-jest', { /* ts-jest config goes here in Jest */ }],\r\n   },\r\n   ts-jest[ts-jest-transformer] (WARN) Define `ts-jest` config under `globals` is deprecated. Please do\r\n   transform: {\r\n       <transform_regex>: ['ts-jest', { /* ts-jest config goes here in Jest */ }],\r\n   },\r\n   ts-jest[ts-jest-transformer] (WARN) Define `ts-jest` config under `globals` is deprecated. Please do\r\n   transform: {\r\n       <transform_regex>: ['ts-jest', { /* ts-jest config goes here in Jest */ }],\r\n   },\r\n   \r\n     \u25cf tableFromJSON() \u203a creates table from objects with string values nested in an array\r\n   \r\n       TypeError: Unable to infer Vector type from input values, explicit type declaration expected\r\n   \r\n         166 |     }\r\n         167 |\r\n       > 168 |     throw new TypeError('Unable to infer Vector type from input values, explicit type declaration expected');\r\n             |           ^\r\n         169 | }\r\n         170 |\r\n         171 | /**\r\n   \r\n         at inferType (targets/ts/factories.ts:168:11)\r\n         at inferType (targets/ts/factories.ts:161:52)\r\n         at vectorFromArray (targets/ts/factories.ts:86:61)\r\n         at tableFromJSON (targets/ts/factories.ts:101:20)\r\n         at Object.<anonymous> (test/unit/table/table-test.ts:83:16)\r\n   \r\n   \r\n     \u25cf tableFromJSON() \u203a creates table from objects with string values nested in an array\r\n   \r\n       TypeError: Unable to infer Vector type from input values, explicit type declaration expected\r\n   \r\n         166 |     }\r\n         167 |\r\n       > 168 |     throw new TypeError('Unable to infer Vector type from input values, explicit type declaration expected');\r\n             |           ^\r\n         169 | }\r\n         170 |\r\n         171 | /**\r\n   \r\n         at inferType (targets/apache-arrow/src/factories.ts:168:11)\r\n         at inferType (targets/apache-arrow/src/factories.ts:161:52)\r\n         at vectorFromArray (targets/apache-arrow/src/factories.ts:86:61)\r\n         at tableFromJSON (targets/apache-arrow/src/factories.ts:101:20)\r\n         at Object.<anonymous> (test/unit/table/table-test.ts:83:29)\r\n   \r\n   \r\n   ```\n\n\n",
                    "created": "2022-11-01T01:52:04.860+0000",
                    "updated": "2022-11-01T01:52:04.860+0000",
                    "started": "2022-11-01T01:52:04.860+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "822162",
                    "issueId": "13493846"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13493846/worklog/822435",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "MannySchneck commented on PR #14554:\nURL: https://github.com/apache/arrow/pull/14554#issuecomment-1298946553\n\n   This \"fix\" breaks duckdb, which is my use case, and as such is not really a \"fix\". \r\n   ```\r\n   Uncaught (in promise) Error: Cannot create Schema containing two different dictionaries with the same Id\r\n       at collectDictionaries (recordbatch.ts:329:23)\r\n       at get dictionaries [as dictionaries] (recordbatch.ts:99:60)\r\n       at RecordBatchStreamWriter._writeDictionaries (writer.ts:285:44)\r\n       at RecordBatchStreamWriter._writeRecordBatch (writer.ts:254:14)\r\n       at RecordBatchStreamWriter.write (writer.ts:183:22)\r\n       at writeAll (writer.ts:441:16)\r\n       at RecordBatchStreamWriter.writeAll (writer.ts:312:16)\r\n       at Module.tableToIPC (serialization.ts:63:10)\r\n   ```\n\n\n",
                    "created": "2022-11-01T18:35:01.327+0000",
                    "updated": "2022-11-01T18:35:01.327+0000",
                    "started": "2022-11-01T18:35:01.326+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "822435",
                    "issueId": "13493846"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
            "id": "1",
            "description": "A problem which impairs or prevents the functions of the product.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
            "name": "Bug",
            "subtask": false,
            "avatarId": 21133
        },
        "timespent": 3000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@4645a832[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6fff4ccf[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@48dc7ff8[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@5d50db18[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6f63f0bf[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@56d59530[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7d5d13ad[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@260e8f05[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@56187573[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@2c1e1695[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@394ba8c0[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@6bef6e4b[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 3000,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Nov 01 00:38:06 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": null,
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-18208/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2022-10-31T23:42:13.000+0000",
        "updated": "2022-11-01T18:35:01.000+0000",
        "timeoriginalestimate": null,
        "description": "```\r\n\r\n$ node\r\n\r\nconst g = require('apache-arrow')\r\n\r\ng.tableFromJSON([\\{a: [ { b: \"hi\" } ]}])\r\n\r\n```\r\n\r\n\u00a0\r\n\r\nThe dictionary types:\r\n\r\n\u00a0\r\n\r\nTYPE Dictionary \\{indices: Int32, dictionary: Utf8, isOrdered: false, id: 12}dictionary: Utf8 {}id: 12indices: Int32 \\{isSigned: true, bitWidth: 32}isOrdered: falseArrayType: (...)children: (...)typeId: (...)valueType: (...)[[Prototype]]: Dictionary\r\ntypecomparator.ts:191 OTHER\u00a0\r\n\r\n\u00a0\r\n\r\nOTHER Dictionary \\{indices: Int32, dictionary: Utf8, isOrdered: false, id: 14}dictionary: Utf8typeId: (...)[[Prototype]]: Utf8id: 14indices: Int32 \\{isSigned: true, bitWidth: 32}isOrdered: falseArrayType: (...)children: (...)typeId: (...)valueType: (...)[[Prototype]]: Dictionary\r\n\r\n\u00a0\r\n\r\nThis happens here:\r\n\r\n\u00a0 \u00a0 else if (arraysCount + nullsCount === value.length) {\r\n\u00a0 \u00a0 \u00a0 \u00a0 const array = value;\r\n\u00a0 \u00a0 \u00a0 \u00a0 const childType = inferType(array[array.findIndex((ary) => ary != null)]);\r\n\u00a0 \u00a0 \u00a0 \u00a0 if (array.every((ary) => ary == null || (0, typecomparator_js_1.compareTypes)(childType, inferType(ary)))) {\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return new dtypes.List(new schema_js_1.Field('', childType, true));\r\n\u00a0 \u00a0 \u00a0 \u00a0 }\r\n\u00a0 \u00a0 }\r\n\r\n\u00a0\r\n\r\nSo we're always instantiating a new dictionary type, with a new id, when we do inferType(ary), so this is never going to succeed.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 3000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "JS: tableFromJSON cannot handle nested objects containing strings",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13493846/comment/17626887",
                    "id": "17626887",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=mansoonism",
                        "name": "mansoonism",
                        "key": "JIRAUSER297746",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Samuel Schneck",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Just to document my insanity here....\r\n{code:java}\r\n\"use strict\";\r\n// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements. \u00a0See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership. \u00a0The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License. \u00a0You may obtain a copy of the License at\r\n//\r\n// \u00a0 http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied. \u00a0See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.builderThroughAsyncIterable = exports.builderThroughIterable = exports.tableFromJSON = exports.vectorFromArray = exports.makeBuilder = void 0;\r\nconst util = require(\"util\")\r\nconst tslib_1 = require(\"tslib\");\r\nconst schema_js_1 = require(\"./schema.js\");\r\nconst dtypes = tslib_1.__importStar(require(\"./type.js\"));\r\nconst data_js_1 = require(\"./data.js\");\r\nconst vector_js_1 = require(\"./vector.js\");\r\nconst builderctor_js_1 = require(\"./visitor/builderctor.js\");\r\nconst table_js_1 = require(\"./table.js\");\r\nconst recordbatch_js_1 = require(\"./recordbatch.js\");\r\nconst typecomparator_js_1 = require(\"./visitor/typecomparator.js\");\r\nfunction makeBuilder(options) {\r\n\u00a0 \u00a0 const type = options.type;\r\n\u00a0 \u00a0 const builder = new (builderctor_js_1.instance.getVisitFn(type)())(options);\r\n\u00a0 \u00a0 if (type.children && type.children.length > 0) {\r\n\u00a0 \u00a0 \u00a0 \u00a0 const children = options['children'] || [];\r\n\u00a0 \u00a0 \u00a0 \u00a0 const defaultOptions = { 'nullValues': options['nullValues'] };\r\n\u00a0 \u00a0 \u00a0 \u00a0 const getChildOptions = Array.isArray(children)\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ? ((_, i) => children[i] || defaultOptions)\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 : (({ name }) => children[name] || defaultOptions);\r\n\u00a0 \u00a0 \u00a0 \u00a0 for (const [index, field] of type.children.entries()) {\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 const { type } = field;\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 const opts = getChildOptions(field, index);\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 builder.children.push(makeBuilder(Object.assign(Object.assign({}, opts), { type })));\r\n\u00a0 \u00a0 \u00a0 \u00a0 }\r\n\u00a0 \u00a0 }\r\n\u00a0 \u00a0 return builder;\r\n}\r\nexports.makeBuilder = makeBuilder;\r\nfunction vectorFromArray(init, type) {\r\n\u00a0 \u00a0 if (init instanceof data_js_1.Data || init instanceof vector_js_1.Vector || init.type instanceof dtypes.DataType || ArrayBuffer.isView(init)) {\r\n\u00a0 \u00a0 \u00a0 \u00a0 return (0, vector_js_1.makeVector)(init);\r\n\u00a0 \u00a0 }\r\n\u00a0 \u00a0 const options = { type: type !== null && type !== void 0 ? type : inferType(init), nullValues: [null] };\r\n\u00a0 \u00a0 const chunks = [...builderThroughIterable(options)(init)];\r\n\u00a0 \u00a0 const vector = chunks.length === 1 ? chunks[0] : chunks.reduce((a, b) => a.concat(b));\r\n\u00a0 \u00a0 if (dtypes.DataType.isDictionary(vector.type)) {\r\n\u00a0 \u00a0 \u00a0 \u00a0 return vector.memoize();\r\n\u00a0 \u00a0 }\r\n\u00a0 \u00a0 return vector;\r\n}\r\nexports.vectorFromArray = vectorFromArray;\r\n/**\r\n\u00a0* Creates a {@link Table} from an array of objects.\r\n\u00a0*\r\n\u00a0* @param array A table of objects.\r\n\u00a0*/\r\nfunction tableFromJSON(array) {\r\n\u00a0 \u00a0 console.log(\"HONK\", JSON.stringify(array.slice(0, 1)))\r\n\u00a0 \u00a0 const vector = vectorFromArray(array);\r\n\u00a0 \u00a0 const batch = new recordbatch_js_1.RecordBatch(new schema_js_1.Schema(vector.type.children), vector.data[0]);\r\n\u00a0 \u00a0 return new table_js_1.Table(batch);\r\n}\r\nexports.tableFromJSON = tableFromJSON;function inferType(value, path, cache) {\r\n\u00a0 \u00a0 if (!path) {\r\n\u00a0 \u00a0 \u00a0 path = []\r\n\u00a0 \u00a0 }\r\n\u00a0 if (!cache) {\r\n\u00a0 \u00a0 cache = new Map()\r\n\u00a0 }\r\n\u00a0 \u00a0 console.log(\"INFERTRACE\", value)\r\n\u00a0 \u00a0 if (value.length === 0) {\r\n\u00a0 \u00a0 \u00a0 \u00a0 return new dtypes.Null;\r\n\u00a0 \u00a0 }\r\n\u00a0 \u00a0 let nullsCount = 0;\r\n\u00a0 \u00a0 let arraysCount = 0;\r\n\u00a0 \u00a0 let objectsCount = 0;\r\n\u00a0 \u00a0 let numbersCount = 0;\r\n\u00a0 \u00a0 let stringsCount = 0;\r\n\u00a0 \u00a0 let bigintsCount = 0;\r\n\u00a0 \u00a0 let booleansCount = 0;\r\n\u00a0 \u00a0 let datesCount = 0;\r\n\u00a0 \u00a0 for (const val of value) {\r\n\u00a0 \u00a0 \u00a0 \u00a0 if (val == null) {\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ++nullsCount;\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 continue;\r\n\u00a0 \u00a0 \u00a0 \u00a0 }\r\n\u00a0 \u00a0 \u00a0 \u00a0 switch (typeof val) {\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 case 'bigint':\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ++bigintsCount;\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 continue;\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 case 'boolean':\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ++booleansCount;\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 continue;\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 case 'number':\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ++numbersCount;\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 continue;\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 case 'string':\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ++stringsCount;\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 continue;\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 case 'object':\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (Array.isArray(val)) {\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ++arraysCount;\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 else if (Object.prototype.toString.call(val) === '[object Date]') {\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ++datesCount;\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 else {\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ++objectsCount;\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 continue;\r\n\u00a0 \u00a0 \u00a0 \u00a0 }\r\n\u00a0 \u00a0 \u00a0 \u00a0 console.log(val)\r\n\u00a0 \u00a0 \u00a0 \u00a0 console.log(\"OH FUCK\", typeof val)\r\n\u00a0 \u00a0 \u00a0 \u00a0 throw new TypeError('Unable to infer Vector type from input values, explicit type declaration expected');\r\n\u00a0 \u00a0 }\u00a0 \u00a0 console.log(\"WE COUNTED\")\r\n\u00a0 \u00a0 console.log(\"gonna hit the array case\", arraysCount + nullsCount === value.length)\r\n\u00a0 \u00a0 console.log(value.length)\r\n\u00a0 \u00a0 console.log(\"nullsCount\", nullsCount)\r\n\u00a0 \u00a0 console.log(\"arraysCount\", arraysCount)\r\n\u00a0 \u00a0 console.log(\"objectsCount\", objectsCount)\r\n\u00a0 \u00a0 console.log(\"numbersCount\", numbersCount)\r\n\u00a0 \u00a0 console.log(\"stringsCount\", stringsCount)\r\n\u00a0 \u00a0 console.log(\"bigintsCount\", bigintsCount)\r\n\u00a0 \u00a0 console.log(\"booleansCount\", booleansCount)\r\n\u00a0 \u00a0 console.log(\"datesCount\", datesCount)\r\n\u00a0 \u00a0 if (numbersCount + nullsCount === value.length) {\r\n\u00a0 \u00a0 \u00a0 \u00a0 return new dtypes.Float64;\r\n\u00a0 \u00a0 }\r\n\u00a0 \u00a0 else if (stringsCount + nullsCount === value.length) {\r\n\u00a0 \u00a0 \u00a0 \u00a0 console.log('STRINGS CASE', value)\r\n\u00a0 \u00a0 \u00a0 \u00a0 if (cache.has(path)) {\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 console.log(\"CACHED at path\", path)\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return cache.get(path)\r\n\u00a0 \u00a0 \u00a0 \u00a0 }\r\n\u00a0 \u00a0 \u00a0 \u00a0 const d = \u00a0new dtypes.Dictionary(new dtypes.Utf8, new dtypes.Int32);\r\n\u00a0 \u00a0 \u00a0 \u00a0 cache.set(path, d)\r\n\u00a0 \u00a0 \u00a0 \u00a0 return d\r\n\u00a0 \u00a0 }\r\n\u00a0 \u00a0 else if (bigintsCount + nullsCount === value.length) {\r\n\u00a0 \u00a0 \u00a0 \u00a0 return new dtypes.Int64;\r\n\u00a0 \u00a0 }\r\n\u00a0 \u00a0 else if (booleansCount + nullsCount === value.length) {\r\n\u00a0 \u00a0 \u00a0 \u00a0 return new dtypes.Bool;\r\n\u00a0 \u00a0 }\r\n\u00a0 \u00a0 else if (datesCount + nullsCount === value.length) {\r\n\u00a0 \u00a0 \u00a0 \u00a0 return new dtypes.DateMillisecond;\r\n\u00a0 \u00a0 }\r\n\u00a0 \u00a0 else if ((() => {const res = arraysCount + nullsCount === value.length; console.log(\"EVALUATING ARRAY\", res, value); return res})()) {\r\n\u00a0 \u00a0 \u00a0 \u00a0 console.log(\"arrayVal\", value)\r\n\u00a0 \u00a0 \u00a0 \u00a0 const array = value;\r\n\u00a0 \u00a0 \u00a0 \u00a0 const childType = inferType(array[array.findIndex((ary) => ary != null)], path, cache);\r\n\u00a0 \u00a0 \u00a0 \u00a0 if (array.every((\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ary\r\n\u00a0 \u00a0 \u00a0 \u00a0 ) => ary == null || (() => {\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 const c = typecomparator_js_1.compareTypes(childType, (\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 () => {\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 const res = (inferType(ary, path, cache)); console.log(\"COMPARING ARRAY TYPE\",util.inspect(res));return res\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 })())\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 console.log(\"THE RESULT OF THE COMPARISON\", c)\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return c\r\n\u00a0 \u00a0 \u00a0 \u00a0 })())) {\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 console.log(\"THE TYPE WE COMPARE:\",util.inspect( childType))\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return new dtypes.List(new schema_js_1.Field('', childType, true));\r\n\u00a0 \u00a0 \u00a0 \u00a0 }\r\n\u00a0 \u00a0 \u00a0 \u00a0 console.log(\"THE TYPE WE COMPARE WHEN IT ALL GOES WRONG:\",util.inspect( childType))\r\n\u00a0 \u00a0 \u00a0 console.log(\"bailing out on\", value)\r\n\u00a0 \u00a0 }\r\n\u00a0 \u00a0 else if (objectsCount + nullsCount === value.length) {\r\n\u00a0 \u00a0 \u00a0 \u00a0 const fields = new Map();\r\n\u00a0 \u00a0 \u00a0 \u00a0 for (const row of value) {\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 for (const key of Object.keys(row)) {\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (!fields.has(key) && row[key] != null) {\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // use the type inferred for the first instance of a found key\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 console.log(path)\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 path.push(key)\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 fields.set(key, new schema_js_1.Field(key, inferType([row[key]], path, cache), true));\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 path.pop(key)\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\r\n\u00a0 \u00a0 \u00a0 \u00a0 }\r\n\u00a0 \u00a0 \u00a0 \u00a0 return new dtypes.Struct([...fields.values()]);\r\n\u00a0 \u00a0 }\u00a0 \u00a0 console.log(\"WE CRASHED on value\", value)\r\n\u00a0 \u00a0 console.log(\"gonna hit the array case\", arraysCount + nullsCount === value.length)\r\n\u00a0 \u00a0 console.log(value.length)\r\n\u00a0 \u00a0 console.log(\"nullsCount\", nullsCount)\r\n\u00a0 \u00a0 console.log(\"arraysCount\", arraysCount)\r\n\u00a0 \u00a0 console.log(\"objectsCount\", objectsCount)\r\n\u00a0 \u00a0 console.log(\"numbersCount\", numbersCount)\r\n\u00a0 \u00a0 console.log(\"stringsCount\", stringsCount)\r\n\u00a0 \u00a0 console.log(\"bigintsCount\", bigintsCount)\r\n\u00a0 \u00a0 console.log(\"booleansCount\", booleansCount)\r\n\u00a0 \u00a0 console.log(\"datesCount\", datesCount)\u00a0 \u00a0 throw new TypeError('Unable to infer Vector type from input values, explicit type declaration expected');}\r\n/**\r\n\u00a0* Transform a synchronous `Iterable` of arbitrary JavaScript values into a\r\n\u00a0* sequence of Arrow Vector<T> following the chunking semantics defined in\r\n\u00a0* the supplied `options` argument.\r\n\u00a0*\r\n\u00a0* This function returns a function that accepts an `Iterable` of values to\r\n\u00a0* transform. When called, this function returns an Iterator of `Vector<T>`.\r\n\u00a0*\r\n\u00a0* The resulting `Iterator<Vector<T>>` yields Vectors based on the\r\n\u00a0* `queueingStrategy` and `highWaterMark` specified in the `options` argument.\r\n\u00a0*\r\n\u00a0* * If `queueingStrategy` is `\"count\"` (or omitted), The `Iterator<Vector<T>>`\r\n\u00a0* \u00a0 will flush the underlying `Builder` (and yield a new `Vector<T>`) once the\r\n\u00a0* \u00a0 Builder's `length` reaches or exceeds the supplied `highWaterMark`.\r\n\u00a0* * If `queueingStrategy` is `\"bytes\"`, the `Iterator<Vector<T>>` will flush\r\n\u00a0* \u00a0 the underlying `Builder` (and yield a new `Vector<T>`) once its `byteLength`\r\n\u00a0* \u00a0 reaches or exceeds the supplied `highWaterMark`.\r\n\u00a0*\r\n\u00a0* @param {IterableBuilderOptions<T, TNull>} options An object of properties which determine the `Builder` to create and the chunking semantics to use.\r\n\u00a0* @returns A function which accepts a JavaScript `Iterable` of values to\r\n\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0write, and returns an `Iterator` that yields Vectors according\r\n\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0to the chunking semantics defined in the `options` argument.\r\n\u00a0* @nocollapse\r\n\u00a0*/\r\nfunction builderThroughIterable(options) {\r\n\u00a0 \u00a0 const { ['queueingStrategy']: queueingStrategy = 'count' } = options;\r\n\u00a0 \u00a0 const { ['highWaterMark']: highWaterMark = queueingStrategy !== 'bytes' ? Number.POSITIVE_INFINITY : Math.pow(2, 14) } = options;\r\n\u00a0 \u00a0 const sizeProperty = queueingStrategy !== 'bytes' ? 'length' : 'byteLength';\r\n\u00a0 \u00a0 return function* (source) {\r\n\u00a0 \u00a0 \u00a0 \u00a0 let numChunks = 0;\r\n\u00a0 \u00a0 \u00a0 \u00a0 const builder = makeBuilder(options);\r\n\u00a0 \u00a0 \u00a0 \u00a0 for (const value of source) {\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (builder.append(value)[sizeProperty] >= highWaterMark) {\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ++numChunks && (yield builder.toVector());\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\r\n\u00a0 \u00a0 \u00a0 \u00a0 }\r\n\u00a0 \u00a0 \u00a0 \u00a0 if (builder.finish().length > 0 || numChunks === 0) {\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 yield builder.toVector();\r\n\u00a0 \u00a0 \u00a0 \u00a0 }\r\n\u00a0 \u00a0 };\r\n}\r\nexports.builderThroughIterable = builderThroughIterable;\r\n/**\r\n\u00a0* Transform an `AsyncIterable` of arbitrary JavaScript values into a\r\n\u00a0* sequence of Arrow Vector<T> following the chunking semantics defined in\r\n\u00a0* the supplied `options` argument.\r\n\u00a0*\r\n\u00a0* This function returns a function that accepts an `AsyncIterable` of values to\r\n\u00a0* transform. When called, this function returns an AsyncIterator of `Vector<T>`.\r\n\u00a0*\r\n\u00a0* The resulting `AsyncIterator<Vector<T>>` yields Vectors based on the\r\n\u00a0* `queueingStrategy` and `highWaterMark` specified in the `options` argument.\r\n\u00a0*\r\n\u00a0* * If `queueingStrategy` is `\"count\"` (or omitted), The `AsyncIterator<Vector<T>>`\r\n\u00a0* \u00a0 will flush the underlying `Builder` (and yield a new `Vector<T>`) once the\r\n\u00a0* \u00a0 Builder's `length` reaches or exceeds the supplied `highWaterMark`.\r\n\u00a0* * If `queueingStrategy` is `\"bytes\"`, the `AsyncIterator<Vector<T>>` will flush\r\n\u00a0* \u00a0 the underlying `Builder` (and yield a new `Vector<T>`) once its `byteLength`\r\n\u00a0* \u00a0 reaches or exceeds the supplied `highWaterMark`.\r\n\u00a0*\r\n\u00a0* @param {IterableBuilderOptions<T, TNull>} options An object of properties which determine the `Builder` to create and the chunking semantics to use.\r\n\u00a0* @returns A function which accepts a JavaScript `AsyncIterable` of values\r\n\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0to write, and returns an `AsyncIterator` that yields Vectors\r\n\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0according to the chunking semantics defined in the `options`\r\n\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0argument.\r\n\u00a0* @nocollapse\r\n\u00a0*/\r\nfunction builderThroughAsyncIterable(options) {\r\n\u00a0 \u00a0 const { ['queueingStrategy']: queueingStrategy = 'count' } = options;\r\n\u00a0 \u00a0 const { ['highWaterMark']: highWaterMark = queueingStrategy !== 'bytes' ? Number.POSITIVE_INFINITY : Math.pow(2, 14) } = options;\r\n\u00a0 \u00a0 const sizeProperty = queueingStrategy !== 'bytes' ? 'length' : 'byteLength';\r\n\u00a0 \u00a0 return function (source) {\r\n\u00a0 \u00a0 \u00a0 \u00a0 return tslib_1.__asyncGenerator(this, arguments, function* () {\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 var e_1, _a;\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 let numChunks = 0;\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 const builder = makeBuilder(options);\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 try {\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 for (var source_1 = tslib_1.__asyncValues(source), source_1_1; source_1_1 = yield tslib_1.__await(source_1.next()), !source_1_1.done;) {\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 const value = source_1_1.value;\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (builder.append(value)[sizeProperty] >= highWaterMark) {\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ++numChunks && (yield yield tslib_1.__await(builder.toVector()));\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 catch (e_1_1) { e_1 = { error: e_1_1 }; }\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 finally {\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 try {\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (source_1_1 && !source_1_1.done && (_a = source_1.return)) yield tslib_1.__await(_a.call(source_1));\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 finally { if (e_1) throw e_1.error; }\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (builder.finish().length > 0 || numChunks === 0) {\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 yield yield tslib_1.__await(builder.toVector());\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\r\n\u00a0 \u00a0 \u00a0 \u00a0 });\r\n\u00a0 \u00a0 };\r\n}\r\nexports.builderThroughAsyncIterable = builderThroughAsyncIterable;//# sourceMappingURL=factories.js.map{code}\r\nfix is in factories.js",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=mansoonism",
                        "name": "mansoonism",
                        "key": "JIRAUSER297746",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Samuel Schneck",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2022-11-01T00:38:06.478+0000",
                    "updated": "2022-11-01T00:38:06.478+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z1anpk:",
        "customfield_12314139": null
    }
}