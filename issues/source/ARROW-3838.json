{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13199378",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13199378",
    "key": "ARROW-3838",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343937",
                "id": "12343937",
                "description": "",
                "name": "0.13.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-04-01"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
            "name": "Minor",
            "id": "4"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12344316",
                "id": "12344316",
                "name": "0.11.1",
                "archived": false,
                "released": true,
                "releaseDate": "2018-10-23"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12554679",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12554679",
                "type": {
                    "id": "12310000",
                    "name": "Duplicate",
                    "inward": "is duplicated by",
                    "outward": "duplicates",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310000"
                },
                "inwardIssue": {
                    "id": "13217349",
                    "key": "ARROW-4656",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13217349",
                    "fields": {
                        "summary": "[Rust] Implement CSV Writer",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                            "name": "Closed",
                            "id": "6",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
            "name": "andygrove",
            "key": "andygrove",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
            },
            "displayName": "Andy Grove",
            "active": true,
            "timeZone": "America/Denver"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333773",
                "id": "12333773",
                "name": "Rust"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
            "name": "andygrove",
            "key": "andygrove",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
            },
            "displayName": "Andy Grove",
            "active": true,
            "timeZone": "America/Denver"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
            "name": "andygrove",
            "key": "andygrove",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
            },
            "displayName": "Andy Grove",
            "active": true,
            "timeZone": "America/Denver"
        },
        "aggregateprogress": {
            "progress": 13800,
            "total": 13800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 13800,
            "total": 13800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3838/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 27,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13199378/worklog/172536",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove opened a new pull request #3111: ARROW-3838: [Rust] Implement CSV Writer\nURL: https://github.com/apache/arrow/pull/3111\n \n \n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-06T00:09:57.404+0000",
                    "updated": "2018-12-06T00:09:57.404+0000",
                    "started": "2018-12-06T00:09:57.403+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "172536",
                    "issueId": "13199378"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13199378/worklog/172864",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sunchao commented on a change in pull request #3111: ARROW-3838: [Rust] Implement CSV Writer\nURL: https://github.com/apache/arrow/pull/3111#discussion_r239628926\n \n \n\n ##########\n File path: rust/src/csv/writer.rs\n ##########\n @@ -0,0 +1,139 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+use std::fs::File;\n+use std::io::{BufWriter, Write};\n+\n+use array::*;\n+use datatypes::DataType;\n+use record_batch::RecordBatch;\n+\n+pub struct Writer {\n+    w: BufWriter<File>,\n+}\n+\n+macro_rules! write_primitive_array {\n \n Review comment:\n   Can we avoid this macro definition? maybe we can just make it generic over element type?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-06T21:55:28.485+0000",
                    "updated": "2018-12-06T21:55:28.485+0000",
                    "started": "2018-12-06T21:55:28.484+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "172864",
                    "issueId": "13199378"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13199378/worklog/172865",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sunchao commented on a change in pull request #3111: ARROW-3838: [Rust] Implement CSV Writer\nURL: https://github.com/apache/arrow/pull/3111#discussion_r239629146\n \n \n\n ##########\n File path: rust/src/csv/writer.rs\n ##########\n @@ -0,0 +1,139 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+use std::fs::File;\n+use std::io::{BufWriter, Write};\n+\n+use array::*;\n+use datatypes::DataType;\n+use record_batch::RecordBatch;\n+\n+pub struct Writer {\n+    w: BufWriter<File>,\n+}\n+\n+macro_rules! write_primitive_array {\n+    ($WRITER:expr, $BATCH:expr, $ROW_INDEX:expr, $COL_INDEX:expr, $TY:ty) => {{\n+        let array = $BATCH\n+            .column($COL_INDEX)\n+            .as_any()\n+            .downcast_ref::<$TY>()\n+            .unwrap();\n+        $WRITER\n+            .write(format!(\"{}\", array.value($ROW_INDEX)).as_bytes())\n+            .unwrap();\n+    }};\n+}\n+\n+impl Writer {\n+    pub fn new(file: File) -> Self {\n+        Writer {\n+            w: BufWriter::new(file),\n+        }\n+    }\n+\n+    pub fn write(&mut self, batch: &RecordBatch) {\n+        for row_index in 0..batch.num_rows() {\n+            for col_index in 0..batch.num_columns() {\n+                if col_index > 0 {\n+                    self.w.write(\",\".as_bytes()).unwrap();\n \n Review comment:\n   seems we are ignoring possible errors in many places. Should we surface these errors instead of `unwrap`?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-06T21:55:28.492+0000",
                    "updated": "2018-12-06T21:55:28.492+0000",
                    "started": "2018-12-06T21:55:28.491+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "172865",
                    "issueId": "13199378"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13199378/worklog/172866",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sunchao commented on a change in pull request #3111: ARROW-3838: [Rust] Implement CSV Writer\nURL: https://github.com/apache/arrow/pull/3111#discussion_r239629343\n \n \n\n ##########\n File path: rust/src/csv/writer.rs\n ##########\n @@ -0,0 +1,139 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+use std::fs::File;\n+use std::io::{BufWriter, Write};\n+\n+use array::*;\n+use datatypes::DataType;\n+use record_batch::RecordBatch;\n+\n+pub struct Writer {\n+    w: BufWriter<File>,\n+}\n+\n+macro_rules! write_primitive_array {\n+    ($WRITER:expr, $BATCH:expr, $ROW_INDEX:expr, $COL_INDEX:expr, $TY:ty) => {{\n+        let array = $BATCH\n+            .column($COL_INDEX)\n+            .as_any()\n+            .downcast_ref::<$TY>()\n+            .unwrap();\n+        $WRITER\n+            .write(format!(\"{}\", array.value($ROW_INDEX)).as_bytes())\n+            .unwrap();\n+    }};\n+}\n+\n+impl Writer {\n+    pub fn new(file: File) -> Self {\n+        Writer {\n+            w: BufWriter::new(file),\n+        }\n+    }\n+\n+    pub fn write(&mut self, batch: &RecordBatch) {\n+        for row_index in 0..batch.num_rows() {\n+            for col_index in 0..batch.num_columns() {\n+                if col_index > 0 {\n+                    self.w.write(\",\".as_bytes()).unwrap();\n+                }\n+                match batch.schema().field(col_index).data_type() {\n+                    &DataType::Boolean => {\n+                        write_primitive_array!(self.w, batch, row_index, col_index, BooleanArray)\n+                    }\n+                    &DataType::Int8 => {\n+                        write_primitive_array!(self.w, batch, row_index, col_index, Int8Array)\n+                    }\n+                    &DataType::Int16 => {\n+                        write_primitive_array!(self.w, batch, row_index, col_index, Int16Array)\n+                    }\n+                    &DataType::Int32 => {\n+                        write_primitive_array!(self.w, batch, row_index, col_index, Int32Array)\n+                    }\n+                    &DataType::Int64 => {\n+                        write_primitive_array!(self.w, batch, row_index, col_index, Int64Array)\n+                    }\n+                    &DataType::UInt8 => {\n+                        write_primitive_array!(self.w, batch, row_index, col_index, UInt8Array)\n+                    }\n+                    &DataType::UInt16 => {\n+                        write_primitive_array!(self.w, batch, row_index, col_index, UInt16Array)\n+                    }\n+                    &DataType::UInt32 => {\n+                        write_primitive_array!(self.w, batch, row_index, col_index, UInt32Array)\n+                    }\n+                    &DataType::UInt64 => {\n+                        write_primitive_array!(self.w, batch, row_index, col_index, UInt64Array)\n+                    }\n+                    &DataType::Float32 => {\n+                        write_primitive_array!(self.w, batch, row_index, col_index, Float32Array)\n+                    }\n+                    &DataType::Float64 => {\n+                        write_primitive_array!(self.w, batch, row_index, col_index, Float64Array)\n+                    }\n+                    &DataType::Utf8 => {\n+                        let array = batch\n+                            .column(col_index)\n+                            .as_any()\n+                            .downcast_ref::<BinaryArray>()\n+                            .unwrap();\n+                        self.w.write(\"\\\"\".as_bytes()).unwrap();\n+                        self.w.write(array.get_value(row_index)).unwrap();\n+                        self.w.write(\"\\\"\".as_bytes()).unwrap();\n+                    }\n+                    other => panic!(\"unsupported type {:?}\", other),\n+                }\n+            }\n+            self.w.write(\"\\n\".as_bytes()).unwrap();\n+        }\n+    }\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+    use datatypes::{Field, Schema};\n+    use std::sync::Arc;\n+\n+    #[test]\n+    fn test_write_csv() {\n+        let schema = Schema::new(vec![\n+            Field::new(\"city\", DataType::Utf8, false),\n+            Field::new(\"lat\", DataType::Float64, false),\n+            Field::new(\"lng\", DataType::Float64, false),\n+        ]);\n+\n+        let cities = BinaryArray::from(vec![\n+            \"Elgin, Scotland, the UK\",\n+            \"Stoke-on-Trent, Staffordshire, the UK\",\n+            \"Solihull, Birmingham, UK\",\n+        ]);\n+        let lat = PrimitiveArray::from(vec![57.653484, 53.002666, 52.412811]);\n+        let lng = PrimitiveArray::from(vec![-3.335724, -2.179404, -1.778197]);\n+\n+        let batch = RecordBatch::new(\n+            Arc::new(schema),\n+            vec![Arc::new(cities), Arc::new(lat), Arc::new(lng)],\n+        );\n+\n+        let file = File::create(\"/tmp/uk_cities.csv\").unwrap();\n+\n+        let mut writer = Writer::new(file);\n+        writer.write(&batch);\n \n Review comment:\n   Should we check whether result is what we expected and is in the correct format?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-06T21:55:28.498+0000",
                    "updated": "2018-12-06T21:55:28.498+0000",
                    "started": "2018-12-06T21:55:28.497+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "172866",
                    "issueId": "13199378"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13199378/worklog/172964",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on a change in pull request #3111: ARROW-3838: [Rust] Implement CSV Writer\nURL: https://github.com/apache/arrow/pull/3111#discussion_r239782989\n \n \n\n ##########\n File path: rust/src/csv/writer.rs\n ##########\n @@ -0,0 +1,139 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+use std::fs::File;\n+use std::io::{BufWriter, Write};\n+\n+use array::*;\n+use datatypes::DataType;\n+use record_batch::RecordBatch;\n+\n+pub struct Writer {\n+    w: BufWriter<File>,\n+}\n+\n+macro_rules! write_primitive_array {\n \n Review comment:\n   Sure. I wrote this before the recent changes to generics ... will refactor this over the weekend.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-07T11:53:24.304+0000",
                    "updated": "2018-12-07T11:53:24.304+0000",
                    "started": "2018-12-07T11:53:24.303+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "172964",
                    "issueId": "13199378"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13199378/worklog/173217",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on issue #3111: ARROW-3838: [Rust] Implement CSV Writer\nURL: https://github.com/apache/arrow/pull/3111#issuecomment-445478502\n \n \n   Should we support passing options to the writer, such as:\r\n   \r\n   * a custom delimiter\r\n   * whether to write headers or not\r\n   * (future) how to serialise datetime\r\n   \r\n   Also, what happens if one tries to write a struct type?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-08T18:10:57.197+0000",
                    "updated": "2018-12-08T18:10:57.197+0000",
                    "started": "2018-12-08T18:10:57.196+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "173217",
                    "issueId": "13199378"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13199378/worklog/206704",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on pull request #3790: ARROW-3838: [Rust] CSV Writer\nURL: https://github.com/apache/arrow/pull/3790\n \n \n   This supersedes #3111.\r\n   \r\n   Supports:\r\n   * writing using the `csv` crate\r\n   * customising delimiter, and whether or not to write headers\r\n   \r\n   Limitations:\r\n   * writes to `std::fs::File`, I struggled to make it write to any `std::io::Write` interface. @paddyhoran any ideas as you did it for `Reader`?\r\n   * values are converted first to `String` before being written. It could be more performant if we could convert directly to byte slice as `csv` crate supports that. I also struggled with this\r\n   \r\n   Potential Further Work:\r\n   * writing temporal arrays (after #3726 [ARROW-4386])\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-02T08:48:07.497+0000",
                    "updated": "2019-03-02T08:48:07.497+0000",
                    "started": "2019-03-02T08:48:07.496+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "206704",
                    "issueId": "13199378"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13199378/worklog/206705",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on issue #3790: ARROW-3838: [Rust] CSV Writer\nURL: https://github.com/apache/arrow/pull/3790#issuecomment-468901436\n \n \n   @andygrove @sunchao @paddyhoran @ntrinquier @liurenjie1024 please review when you get some time.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-02T08:49:53.469+0000",
                    "updated": "2019-03-02T08:49:53.469+0000",
                    "started": "2019-03-02T08:49:53.468+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "206705",
                    "issueId": "13199378"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13199378/worklog/206708",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on issue #3790: ARROW-3838: [Rust] CSV Writer\nURL: https://github.com/apache/arrow/pull/3790#issuecomment-468902870\n \n \n   AppVeyor failure's because I'm writing to `/tmp/`, which doesn't exist. I'll address that later today\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-02T09:12:36.105+0000",
                    "updated": "2019-03-02T09:12:36.105+0000",
                    "started": "2019-03-02T09:12:36.104+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "206708",
                    "issueId": "13199378"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13199378/worklog/206736",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #3111: ARROW-3838: [Rust] Implement CSV Writer\nURL: https://github.com/apache/arrow/pull/3111\n \n \n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-02T14:40:15.669+0000",
                    "updated": "2019-03-02T14:40:15.669+0000",
                    "started": "2019-03-02T14:40:15.668+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "206736",
                    "issueId": "13199378"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13199378/worklog/206737",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #3790: ARROW-3838: [Rust] CSV Writer\nURL: https://github.com/apache/arrow/pull/3790#discussion_r261829241\n \n \n\n ##########\n File path: rust/arrow/src/csv/writer.rs\n ##########\n @@ -0,0 +1,363 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! CSV Writer\n+//!\n+//! This CSV writer allows Arrow data (in record batches) to be written as CSV files.\n+//! The writer does not support writing `ListArray` and `StructArray`.\n+//!\n+//! Example:\n+//!\n+//! ```\n+//! use arrow::array::*;\n+//! use arrow::csv;\n+//! use arrow::datatypes::*;\n+//! use arrow::record_batch::RecordBatch;\n+//! use std::fs::File;\n+//! use std::sync::Arc;\n+//!\n+//! let schema = Schema::new(vec![\n+//!     Field::new(\"c1\", DataType::Utf8, false),\n+//!     Field::new(\"c2\", DataType::Float64, true),\n+//!     Field::new(\"c3\", DataType::UInt32, false),\n+//!     Field::new(\"c3\", DataType::Boolean, true),\n+//! ]);\n+//!\n+//! let c1 = BinaryArray::from(vec![\n+//!     \"Lorem ipsum dolor sit amet\",\n+//!     \"consectetur adipiscing elit\",\n+//!     \"sed do eiusmod tempor\",\n+//! ]);\n+//! let c2 = PrimitiveArray::<Float64Type>::from(vec![\n+//!     Some(123.564532),\n+//!     None,\n+//!     Some(-556132.25),\n+//! ]);\n+//! let c3 = PrimitiveArray::<UInt32Type>::from(vec![3, 2, 1]);\n+//! let c4 = PrimitiveArray::<BooleanType>::from(vec![Some(true), Some(false), None]);\n+//!\n+//! let batch = RecordBatch::new(\n+//!     Arc::new(schema),\n+//!     vec![Arc::new(c1), Arc::new(c2), Arc::new(c3), Arc::new(c4)],\n+//! );\n+//!\n+//! let file = File::create(\"/tmp/out.csv\").unwrap();\n+//!\n+//! let writer = csv::Writer::new(file);\n+//! writer.write(vec![&batch, &batch]).unwrap();\n+//! ```\n+\n+use csv as csv_crate;\n+\n+use std::fs::File;\n+\n+use crate::array::*;\n+use crate::datatypes::*;\n+use crate::error::{ArrowError, Result};\n+use crate::record_batch::RecordBatch;\n+\n+fn write_primitive_value<T>(array: &ArrayRef, i: usize) -> String\n+where\n+    T: ArrowNumericType,\n+    T::Native: ::std::string::ToString,\n+{\n+    let c = array.as_any().downcast_ref::<PrimitiveArray<T>>().unwrap();\n+    c.value(i).to_string()\n+}\n+\n+/// A CSV writer\n+pub struct Writer {\n+    /// The file to write to\n+    file: File,\n+    /// Column delimiter. Defauits to `b','`\n+    delimiter: u8,\n+    /// Whether file should be written with headers. Defaults to `true`\n+    has_headers: bool,\n+}\n+\n+impl Writer {\n+    /// Create a new CsvWriter from a file, with default options\n+    pub fn new(file: File) -> Self {\n+        Writer {\n+            file,\n+            delimiter: b',',\n+            has_headers: true,\n+        }\n+    }\n+\n+    /// Write a vector of record batches to a file\n+    pub fn write(&self, batches: Vec<&RecordBatch>) -> Result<()> {\n+        let mut builder = csv_crate::WriterBuilder::new();\n+\n+        let mut wtr = builder.delimiter(self.delimiter).from_writer(&self.file);\n+\n+        if batches.is_empty() {\n+            return Err(ArrowError::CsvError(\n+                \"No record batches supplied to the CSV writer\".to_string(),\n+            ));\n+        }\n+\n+        let num_columns = batches[0].num_columns();\n+\n+        if self.has_headers {\n+            let mut headers: Vec<String> = Vec::with_capacity(num_columns);\n+\n+            &batches[0]\n+                .schema()\n+                .fields()\n+                .iter()\n+                .for_each(|field| headers.push(field.name().to_string()));\n+\n+            wtr.write_record(&headers[..])?;\n+        }\n+\n+        for batch in batches {\n+            for row_index in 0..batch.num_rows() {\n+                // TODO: it'd be more efficient if we could create `record: Vec<&[u8]>\n+                let mut record: Vec<String> = Vec::with_capacity(batch.num_columns());\n+                for col_index in 0..batch.num_columns() {\n+                    let col = batch.column(col_index);\n+                    if col.is_null(row_index) {\n+                        // write an empty value\n+                        record.push(String::from(\"\"));\n+                        continue;\n+                    }\n+                    let string = match col.data_type() {\n+                        DataType::Float64 => {\n+                            write_primitive_value::<Float64Type>(col, row_index)\n+                        }\n+                        DataType::Float32 => {\n+                            write_primitive_value::<Float32Type>(col, row_index)\n+                        }\n+                        DataType::Int8 => {\n+                            write_primitive_value::<Int8Type>(col, row_index)\n+                        }\n+                        DataType::Int16 => {\n+                            write_primitive_value::<Int16Type>(col, row_index)\n+                        }\n+                        DataType::Int32 => {\n+                            write_primitive_value::<Int32Type>(col, row_index)\n+                        }\n+                        DataType::Int64 => {\n+                            write_primitive_value::<Int64Type>(col, row_index)\n+                        }\n+                        DataType::UInt8 => {\n+                            write_primitive_value::<UInt8Type>(col, row_index)\n+                        }\n+                        DataType::UInt16 => {\n+                            write_primitive_value::<UInt16Type>(col, row_index)\n+                        }\n+                        DataType::UInt32 => {\n+                            write_primitive_value::<UInt32Type>(col, row_index)\n+                        }\n+                        DataType::UInt64 => {\n+                            write_primitive_value::<UInt64Type>(col, row_index)\n+                        }\n+                        DataType::Boolean => {\n+                            let c = col.as_any().downcast_ref::<BooleanArray>().unwrap();\n+                            c.value(row_index).to_string()\n+                        }\n+                        DataType::Utf8 => {\n+                            let c = col.as_any().downcast_ref::<BinaryArray>().unwrap();\n+                            String::from_utf8(c.value(row_index).to_vec())?\n+                        }\n+                        t => {\n+                            // List and Struct arrays not supported by the writer, any\n+                            // other type needs to be implemented\n+                            return Err(ArrowError::CsvError(format!(\n+                                \"CSV Writer does not support {:?} data type\",\n+                                t\n+                            )));\n+                        }\n+                    };\n+\n+                    record.push(string);\n+                }\n+                wtr.write_record(&record[..])?;\n+            }\n+            wtr.flush()?;\n+        }\n+\n+        Ok(())\n+    }\n+}\n+\n+/// A CSV writer builder\n+pub struct WriterBuilder {\n+    /// Optional column delimiter. Defaults to `b','`\n+    delimiter: Option<u8>,\n+    /// Whether to write column names as file headers. Defaults to `true`\n+    has_headers: bool,\n+}\n+\n+impl Default for WriterBuilder {\n+    fn default() -> Self {\n+        Self {\n+            has_headers: true,\n+            delimiter: None,\n+        }\n+    }\n+}\n+\n+impl WriterBuilder {\n+    /// Create a new builder for configuring CSV writing options.\n+    ///\n+    /// To convert a builder into a writer, call `WriterBuilder::build`\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// extern crate arrow;\n+    ///\n+    /// use arrow::csv;\n+    /// use std::fs::File;\n+    ///\n+    /// fn example() -> csv::Writer {\n+    ///     let file = File::create(\"/tmp/out.csv\").unwrap();\n+    ///\n+    ///     // create a builder that doesn't write headers\n+    ///     let builder = csv::WriterBuilder::new().has_headers(false);\n+    ///\n+    ///     let writer = builder.build(file);\n+    ///\n+    ///     writer\n+    /// }\n+    /// ```\n+    pub fn new() -> Self {\n+        Self::default()\n+    }\n+\n+    /// Set whether to write headers\n+    pub fn has_headers(mut self, has_headers: bool) -> Self {\n+        self.has_headers = has_headers;\n+        self\n+    }\n+\n+    /// Set the CSV file's column delimiter as a byte character\n+    pub fn with_delimiter(mut self, delimiter: u8) -> Self {\n+        self.delimiter = Some(delimiter);\n+        self\n+    }\n+\n+    /// Create a new `Writer`\n+    pub fn build(self, file: File) -> Writer {\n+        Writer {\n+            file,\n+            delimiter: self.delimiter.unwrap_or(b','),\n+            has_headers: self.has_headers,\n+        }\n+    }\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+\n+    use crate::datatypes::{Field, Schema};\n+    use std::io::Read;\n+    use std::sync::Arc;\n+\n+    #[test]\n+    fn test_write_csv() {\n+        let schema = Schema::new(vec![\n+            Field::new(\"c1\", DataType::Utf8, false),\n+            Field::new(\"c2\", DataType::Float64, true),\n+            Field::new(\"c3\", DataType::UInt32, false),\n+            Field::new(\"c3\", DataType::Boolean, true),\n+        ]);\n+\n+        let c1 = BinaryArray::from(vec![\n+            \"Lorem ipsum dolor sit amet\",\n+            \"consectetur adipiscing elit\",\n+            \"sed do eiusmod tempor\",\n+        ]);\n+        let c2 = PrimitiveArray::<Float64Type>::from(vec![\n+            Some(123.564532),\n+            None,\n+            Some(-556132.25),\n+        ]);\n+        let c3 = PrimitiveArray::<UInt32Type>::from(vec![3, 2, 1]);\n+        let c4 = PrimitiveArray::<BooleanType>::from(vec![Some(true), Some(false), None]);\n+\n+        let batch = RecordBatch::new(\n+            Arc::new(schema),\n+            vec![Arc::new(c1), Arc::new(c2), Arc::new(c3), Arc::new(c4)],\n+        );\n+\n+        let file = File::create(\"/tmp/columns.csv\").unwrap();\n+\n+        let writer = Writer::new(file);\n+        writer.write(vec![&batch, &batch]).unwrap();\n+\n+        // check that file was written successfully\n+        let mut file = File::open(\"/tmp/columns.csv\").unwrap();\n+        let mut buffer: Vec<u8> = vec![];\n+        file.read_to_end(&mut buffer).unwrap();\n+\n+        assert_eq!(\n+            \"c1,c2,c3,c3\\nLorem ipsum dolor sit amet,123.564532,3,true\\nconsectetur adipiscing elit,,2,false\\nsed do eiusmod tempor,-556132.25,1,\\nLorem ipsum dolor sit amet,123.564532,3,true\\nconsectetur adipiscing elit,,2,false\\nsed do eiusmod tempor,-556132.25,1,\\n\"\n+            .to_string(),\n+            String::from_utf8(buffer).unwrap()\n+        );\n+    }\n+\n+    #[test]\n+    fn test_write_csv_custom_options() {\n+        let schema = Schema::new(vec![\n+            Field::new(\"c1\", DataType::Utf8, false),\n+            Field::new(\"c2\", DataType::Float64, true),\n+            Field::new(\"c3\", DataType::UInt32, false),\n+            Field::new(\"c3\", DataType::Boolean, true),\n+        ]);\n+\n+        let c1 = BinaryArray::from(vec![\n+            \"Lorem ipsum dolor sit amet\",\n+            \"consectetur adipiscing elit\",\n+            \"sed do eiusmod tempor\",\n+        ]);\n+        let c2 = PrimitiveArray::<Float64Type>::from(vec![\n+            Some(123.564532),\n+            None,\n+            Some(-556132.25),\n+        ]);\n+        let c3 = PrimitiveArray::<UInt32Type>::from(vec![3, 2, 1]);\n+        let c4 = PrimitiveArray::<BooleanType>::from(vec![Some(true), Some(false), None]);\n+\n+        let batch = RecordBatch::new(\n+            Arc::new(schema),\n+            vec![Arc::new(c1), Arc::new(c2), Arc::new(c3), Arc::new(c4)],\n+        );\n+\n+        let file = File::create(\"/tmp/custom_options.csv\").unwrap();\n \n Review comment:\n   It might be better to write to a relative path within the project ... Windows might not like `/tmp`\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-02T15:14:18.092+0000",
                    "updated": "2019-03-02T15:14:18.092+0000",
                    "started": "2019-03-02T15:14:18.092+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "206737",
                    "issueId": "13199378"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13199378/worklog/206742",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #3790: ARROW-3838: [Rust] CSV Writer\nURL: https://github.com/apache/arrow/pull/3790#discussion_r261831139\n \n \n\n ##########\n File path: rust/arrow/src/csv/writer.rs\n ##########\n @@ -0,0 +1,363 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! CSV Writer\n+//!\n+//! This CSV writer allows Arrow data (in record batches) to be written as CSV files.\n+//! The writer does not support writing `ListArray` and `StructArray`.\n+//!\n+//! Example:\n+//!\n+//! ```\n+//! use arrow::array::*;\n+//! use arrow::csv;\n+//! use arrow::datatypes::*;\n+//! use arrow::record_batch::RecordBatch;\n+//! use std::fs::File;\n+//! use std::sync::Arc;\n+//!\n+//! let schema = Schema::new(vec![\n+//!     Field::new(\"c1\", DataType::Utf8, false),\n+//!     Field::new(\"c2\", DataType::Float64, true),\n+//!     Field::new(\"c3\", DataType::UInt32, false),\n+//!     Field::new(\"c3\", DataType::Boolean, true),\n+//! ]);\n+//!\n+//! let c1 = BinaryArray::from(vec![\n+//!     \"Lorem ipsum dolor sit amet\",\n+//!     \"consectetur adipiscing elit\",\n+//!     \"sed do eiusmod tempor\",\n+//! ]);\n+//! let c2 = PrimitiveArray::<Float64Type>::from(vec![\n+//!     Some(123.564532),\n+//!     None,\n+//!     Some(-556132.25),\n+//! ]);\n+//! let c3 = PrimitiveArray::<UInt32Type>::from(vec![3, 2, 1]);\n+//! let c4 = PrimitiveArray::<BooleanType>::from(vec![Some(true), Some(false), None]);\n+//!\n+//! let batch = RecordBatch::new(\n+//!     Arc::new(schema),\n+//!     vec![Arc::new(c1), Arc::new(c2), Arc::new(c3), Arc::new(c4)],\n+//! );\n+//!\n+//! let file = File::create(\"/tmp/out.csv\").unwrap();\n+//!\n+//! let writer = csv::Writer::new(file);\n+//! writer.write(vec![&batch, &batch]).unwrap();\n+//! ```\n+\n+use csv as csv_crate;\n+\n+use std::fs::File;\n+\n+use crate::array::*;\n+use crate::datatypes::*;\n+use crate::error::{ArrowError, Result};\n+use crate::record_batch::RecordBatch;\n+\n+fn write_primitive_value<T>(array: &ArrayRef, i: usize) -> String\n+where\n+    T: ArrowNumericType,\n+    T::Native: ::std::string::ToString,\n+{\n+    let c = array.as_any().downcast_ref::<PrimitiveArray<T>>().unwrap();\n+    c.value(i).to_string()\n+}\n+\n+/// A CSV writer\n+pub struct Writer {\n+    /// The file to write to\n+    file: File,\n+    /// Column delimiter. Defauits to `b','`\n+    delimiter: u8,\n+    /// Whether file should be written with headers. Defaults to `true`\n+    has_headers: bool,\n+}\n+\n+impl Writer {\n+    /// Create a new CsvWriter from a file, with default options\n+    pub fn new(file: File) -> Self {\n+        Writer {\n+            file,\n+            delimiter: b',',\n+            has_headers: true,\n+        }\n+    }\n+\n+    /// Write a vector of record batches to a file\n+    pub fn write(&self, batches: Vec<&RecordBatch>) -> Result<()> {\n+        let mut builder = csv_crate::WriterBuilder::new();\n+\n+        let mut wtr = builder.delimiter(self.delimiter).from_writer(&self.file);\n+\n+        if batches.is_empty() {\n+            return Err(ArrowError::CsvError(\n+                \"No record batches supplied to the CSV writer\".to_string(),\n+            ));\n+        }\n+\n+        let num_columns = batches[0].num_columns();\n+\n+        if self.has_headers {\n+            let mut headers: Vec<String> = Vec::with_capacity(num_columns);\n+\n+            &batches[0]\n+                .schema()\n+                .fields()\n+                .iter()\n+                .for_each(|field| headers.push(field.name().to_string()));\n+\n+            wtr.write_record(&headers[..])?;\n+        }\n+\n+        for batch in batches {\n+            for row_index in 0..batch.num_rows() {\n+                // TODO: it'd be more efficient if we could create `record: Vec<&[u8]>\n+                let mut record: Vec<String> = Vec::with_capacity(batch.num_columns());\n+                for col_index in 0..batch.num_columns() {\n+                    let col = batch.column(col_index);\n+                    if col.is_null(row_index) {\n+                        // write an empty value\n+                        record.push(String::from(\"\"));\n+                        continue;\n+                    }\n+                    let string = match col.data_type() {\n+                        DataType::Float64 => {\n+                            write_primitive_value::<Float64Type>(col, row_index)\n+                        }\n+                        DataType::Float32 => {\n+                            write_primitive_value::<Float32Type>(col, row_index)\n+                        }\n+                        DataType::Int8 => {\n+                            write_primitive_value::<Int8Type>(col, row_index)\n+                        }\n+                        DataType::Int16 => {\n+                            write_primitive_value::<Int16Type>(col, row_index)\n+                        }\n+                        DataType::Int32 => {\n+                            write_primitive_value::<Int32Type>(col, row_index)\n+                        }\n+                        DataType::Int64 => {\n+                            write_primitive_value::<Int64Type>(col, row_index)\n+                        }\n+                        DataType::UInt8 => {\n+                            write_primitive_value::<UInt8Type>(col, row_index)\n+                        }\n+                        DataType::UInt16 => {\n+                            write_primitive_value::<UInt16Type>(col, row_index)\n+                        }\n+                        DataType::UInt32 => {\n+                            write_primitive_value::<UInt32Type>(col, row_index)\n+                        }\n+                        DataType::UInt64 => {\n+                            write_primitive_value::<UInt64Type>(col, row_index)\n+                        }\n+                        DataType::Boolean => {\n+                            let c = col.as_any().downcast_ref::<BooleanArray>().unwrap();\n+                            c.value(row_index).to_string()\n+                        }\n+                        DataType::Utf8 => {\n+                            let c = col.as_any().downcast_ref::<BinaryArray>().unwrap();\n+                            String::from_utf8(c.value(row_index).to_vec())?\n+                        }\n+                        t => {\n+                            // List and Struct arrays not supported by the writer, any\n+                            // other type needs to be implemented\n+                            return Err(ArrowError::CsvError(format!(\n+                                \"CSV Writer does not support {:?} data type\",\n+                                t\n+                            )));\n+                        }\n+                    };\n+\n+                    record.push(string);\n+                }\n+                wtr.write_record(&record[..])?;\n+            }\n+            wtr.flush()?;\n+        }\n+\n+        Ok(())\n+    }\n+}\n+\n+/// A CSV writer builder\n+pub struct WriterBuilder {\n+    /// Optional column delimiter. Defaults to `b','`\n+    delimiter: Option<u8>,\n+    /// Whether to write column names as file headers. Defaults to `true`\n+    has_headers: bool,\n+}\n+\n+impl Default for WriterBuilder {\n+    fn default() -> Self {\n+        Self {\n+            has_headers: true,\n+            delimiter: None,\n+        }\n+    }\n+}\n+\n+impl WriterBuilder {\n+    /// Create a new builder for configuring CSV writing options.\n+    ///\n+    /// To convert a builder into a writer, call `WriterBuilder::build`\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// extern crate arrow;\n+    ///\n+    /// use arrow::csv;\n+    /// use std::fs::File;\n+    ///\n+    /// fn example() -> csv::Writer {\n+    ///     let file = File::create(\"/tmp/out.csv\").unwrap();\n+    ///\n+    ///     // create a builder that doesn't write headers\n+    ///     let builder = csv::WriterBuilder::new().has_headers(false);\n+    ///\n+    ///     let writer = builder.build(file);\n+    ///\n+    ///     writer\n+    /// }\n+    /// ```\n+    pub fn new() -> Self {\n+        Self::default()\n+    }\n+\n+    /// Set whether to write headers\n+    pub fn has_headers(mut self, has_headers: bool) -> Self {\n+        self.has_headers = has_headers;\n+        self\n+    }\n+\n+    /// Set the CSV file's column delimiter as a byte character\n+    pub fn with_delimiter(mut self, delimiter: u8) -> Self {\n+        self.delimiter = Some(delimiter);\n+        self\n+    }\n+\n+    /// Create a new `Writer`\n+    pub fn build(self, file: File) -> Writer {\n+        Writer {\n+            file,\n+            delimiter: self.delimiter.unwrap_or(b','),\n+            has_headers: self.has_headers,\n+        }\n+    }\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+\n+    use crate::datatypes::{Field, Schema};\n+    use std::io::Read;\n+    use std::sync::Arc;\n+\n+    #[test]\n+    fn test_write_csv() {\n+        let schema = Schema::new(vec![\n+            Field::new(\"c1\", DataType::Utf8, false),\n+            Field::new(\"c2\", DataType::Float64, true),\n+            Field::new(\"c3\", DataType::UInt32, false),\n+            Field::new(\"c3\", DataType::Boolean, true),\n+        ]);\n+\n+        let c1 = BinaryArray::from(vec![\n+            \"Lorem ipsum dolor sit amet\",\n+            \"consectetur adipiscing elit\",\n+            \"sed do eiusmod tempor\",\n+        ]);\n+        let c2 = PrimitiveArray::<Float64Type>::from(vec![\n+            Some(123.564532),\n+            None,\n+            Some(-556132.25),\n+        ]);\n+        let c3 = PrimitiveArray::<UInt32Type>::from(vec![3, 2, 1]);\n+        let c4 = PrimitiveArray::<BooleanType>::from(vec![Some(true), Some(false), None]);\n+\n+        let batch = RecordBatch::new(\n+            Arc::new(schema),\n+            vec![Arc::new(c1), Arc::new(c2), Arc::new(c3), Arc::new(c4)],\n+        );\n+\n+        let file = File::create(\"/tmp/columns.csv\").unwrap();\n+\n+        let writer = Writer::new(file);\n+        writer.write(vec![&batch, &batch]).unwrap();\n+\n+        // check that file was written successfully\n+        let mut file = File::open(\"/tmp/columns.csv\").unwrap();\n+        let mut buffer: Vec<u8> = vec![];\n+        file.read_to_end(&mut buffer).unwrap();\n+\n+        assert_eq!(\n+            \"c1,c2,c3,c3\\nLorem ipsum dolor sit amet,123.564532,3,true\\nconsectetur adipiscing elit,,2,false\\nsed do eiusmod tempor,-556132.25,1,\\nLorem ipsum dolor sit amet,123.564532,3,true\\nconsectetur adipiscing elit,,2,false\\nsed do eiusmod tempor,-556132.25,1,\\n\"\n+            .to_string(),\n+            String::from_utf8(buffer).unwrap()\n+        );\n+    }\n+\n+    #[test]\n+    fn test_write_csv_custom_options() {\n+        let schema = Schema::new(vec![\n+            Field::new(\"c1\", DataType::Utf8, false),\n+            Field::new(\"c2\", DataType::Float64, true),\n+            Field::new(\"c3\", DataType::UInt32, false),\n+            Field::new(\"c3\", DataType::Boolean, true),\n+        ]);\n+\n+        let c1 = BinaryArray::from(vec![\n+            \"Lorem ipsum dolor sit amet\",\n+            \"consectetur adipiscing elit\",\n+            \"sed do eiusmod tempor\",\n+        ]);\n+        let c2 = PrimitiveArray::<Float64Type>::from(vec![\n+            Some(123.564532),\n+            None,\n+            Some(-556132.25),\n+        ]);\n+        let c3 = PrimitiveArray::<UInt32Type>::from(vec![3, 2, 1]);\n+        let c4 = PrimitiveArray::<BooleanType>::from(vec![Some(true), Some(false), None]);\n+\n+        let batch = RecordBatch::new(\n+            Arc::new(schema),\n+            vec![Arc::new(c1), Arc::new(c2), Arc::new(c3), Arc::new(c4)],\n+        );\n+\n+        let file = File::create(\"/tmp/custom_options.csv\").unwrap();\n \n Review comment:\n   Yeah .. Appveyor windows build is failing because of this. \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-02T15:42:04.516+0000",
                    "updated": "2019-03-02T15:42:04.516+0000",
                    "started": "2019-03-02T15:42:04.516+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "206742",
                    "issueId": "13199378"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13199378/worklog/206754",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ntrinquier commented on pull request #3790: ARROW-3838: [Rust] CSV Writer\nURL: https://github.com/apache/arrow/pull/3790#discussion_r261833799\n \n \n\n ##########\n File path: rust/arrow/src/csv/writer.rs\n ##########\n @@ -0,0 +1,363 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! CSV Writer\n+//!\n+//! This CSV writer allows Arrow data (in record batches) to be written as CSV files.\n+//! The writer does not support writing `ListArray` and `StructArray`.\n+//!\n+//! Example:\n+//!\n+//! ```\n+//! use arrow::array::*;\n+//! use arrow::csv;\n+//! use arrow::datatypes::*;\n+//! use arrow::record_batch::RecordBatch;\n+//! use std::fs::File;\n+//! use std::sync::Arc;\n+//!\n+//! let schema = Schema::new(vec![\n+//!     Field::new(\"c1\", DataType::Utf8, false),\n+//!     Field::new(\"c2\", DataType::Float64, true),\n+//!     Field::new(\"c3\", DataType::UInt32, false),\n+//!     Field::new(\"c3\", DataType::Boolean, true),\n+//! ]);\n+//!\n+//! let c1 = BinaryArray::from(vec![\n+//!     \"Lorem ipsum dolor sit amet\",\n+//!     \"consectetur adipiscing elit\",\n+//!     \"sed do eiusmod tempor\",\n+//! ]);\n+//! let c2 = PrimitiveArray::<Float64Type>::from(vec![\n+//!     Some(123.564532),\n+//!     None,\n+//!     Some(-556132.25),\n+//! ]);\n+//! let c3 = PrimitiveArray::<UInt32Type>::from(vec![3, 2, 1]);\n+//! let c4 = PrimitiveArray::<BooleanType>::from(vec![Some(true), Some(false), None]);\n+//!\n+//! let batch = RecordBatch::new(\n+//!     Arc::new(schema),\n+//!     vec![Arc::new(c1), Arc::new(c2), Arc::new(c3), Arc::new(c4)],\n+//! );\n+//!\n+//! let file = File::create(\"/tmp/out.csv\").unwrap();\n+//!\n+//! let writer = csv::Writer::new(file);\n+//! writer.write(vec![&batch, &batch]).unwrap();\n+//! ```\n+\n+use csv as csv_crate;\n+\n+use std::fs::File;\n+\n+use crate::array::*;\n+use crate::datatypes::*;\n+use crate::error::{ArrowError, Result};\n+use crate::record_batch::RecordBatch;\n+\n+fn write_primitive_value<T>(array: &ArrayRef, i: usize) -> String\n+where\n+    T: ArrowNumericType,\n+    T::Native: ::std::string::ToString,\n+{\n+    let c = array.as_any().downcast_ref::<PrimitiveArray<T>>().unwrap();\n+    c.value(i).to_string()\n+}\n+\n+/// A CSV writer\n+pub struct Writer {\n+    /// The file to write to\n+    file: File,\n+    /// Column delimiter. Defauits to `b','`\n \n Review comment:\n   Small typo here `Defauits` -> `Defaults`\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-02T17:17:24.650+0000",
                    "updated": "2019-03-02T17:17:24.650+0000",
                    "started": "2019-03-02T17:17:24.650+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "206754",
                    "issueId": "13199378"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13199378/worklog/206828",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liurenjie1024 commented on pull request #3790: ARROW-3838: [Rust] CSV Writer\nURL: https://github.com/apache/arrow/pull/3790#discussion_r261850327\n \n \n\n ##########\n File path: rust/arrow/src/csv/writer.rs\n ##########\n @@ -0,0 +1,363 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! CSV Writer\n+//!\n+//! This CSV writer allows Arrow data (in record batches) to be written as CSV files.\n+//! The writer does not support writing `ListArray` and `StructArray`.\n+//!\n+//! Example:\n+//!\n+//! ```\n+//! use arrow::array::*;\n+//! use arrow::csv;\n+//! use arrow::datatypes::*;\n+//! use arrow::record_batch::RecordBatch;\n+//! use std::fs::File;\n+//! use std::sync::Arc;\n+//!\n+//! let schema = Schema::new(vec![\n+//!     Field::new(\"c1\", DataType::Utf8, false),\n+//!     Field::new(\"c2\", DataType::Float64, true),\n+//!     Field::new(\"c3\", DataType::UInt32, false),\n+//!     Field::new(\"c3\", DataType::Boolean, true),\n+//! ]);\n+//!\n+//! let c1 = BinaryArray::from(vec![\n+//!     \"Lorem ipsum dolor sit amet\",\n+//!     \"consectetur adipiscing elit\",\n+//!     \"sed do eiusmod tempor\",\n+//! ]);\n+//! let c2 = PrimitiveArray::<Float64Type>::from(vec![\n+//!     Some(123.564532),\n+//!     None,\n+//!     Some(-556132.25),\n+//! ]);\n+//! let c3 = PrimitiveArray::<UInt32Type>::from(vec![3, 2, 1]);\n+//! let c4 = PrimitiveArray::<BooleanType>::from(vec![Some(true), Some(false), None]);\n+//!\n+//! let batch = RecordBatch::new(\n+//!     Arc::new(schema),\n+//!     vec![Arc::new(c1), Arc::new(c2), Arc::new(c3), Arc::new(c4)],\n+//! );\n+//!\n+//! let file = File::create(\"/tmp/out.csv\").unwrap();\n+//!\n+//! let writer = csv::Writer::new(file);\n+//! writer.write(vec![&batch, &batch]).unwrap();\n+//! ```\n+\n+use csv as csv_crate;\n+\n+use std::fs::File;\n+\n+use crate::array::*;\n+use crate::datatypes::*;\n+use crate::error::{ArrowError, Result};\n+use crate::record_batch::RecordBatch;\n+\n+fn write_primitive_value<T>(array: &ArrayRef, i: usize) -> String\n+where\n+    T: ArrowNumericType,\n+    T::Native: ::std::string::ToString,\n+{\n+    let c = array.as_any().downcast_ref::<PrimitiveArray<T>>().unwrap();\n+    c.value(i).to_string()\n+}\n+\n+/// A CSV writer\n+pub struct Writer {\n+    /// The file to write to\n+    file: File,\n \n Review comment:\n   It may be a better idea to accept a Box<Write> as target. This can make your implementation more flexible.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-03T03:44:42.653+0000",
                    "updated": "2019-03-03T03:44:42.653+0000",
                    "started": "2019-03-03T03:44:42.652+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "206828",
                    "issueId": "13199378"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13199378/worklog/206829",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liurenjie1024 commented on pull request #3790: ARROW-3838: [Rust] CSV Writer\nURL: https://github.com/apache/arrow/pull/3790#discussion_r261850373\n \n \n\n ##########\n File path: rust/arrow/src/csv/writer.rs\n ##########\n @@ -0,0 +1,363 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! CSV Writer\n+//!\n+//! This CSV writer allows Arrow data (in record batches) to be written as CSV files.\n+//! The writer does not support writing `ListArray` and `StructArray`.\n+//!\n+//! Example:\n+//!\n+//! ```\n+//! use arrow::array::*;\n+//! use arrow::csv;\n+//! use arrow::datatypes::*;\n+//! use arrow::record_batch::RecordBatch;\n+//! use std::fs::File;\n+//! use std::sync::Arc;\n+//!\n+//! let schema = Schema::new(vec![\n+//!     Field::new(\"c1\", DataType::Utf8, false),\n+//!     Field::new(\"c2\", DataType::Float64, true),\n+//!     Field::new(\"c3\", DataType::UInt32, false),\n+//!     Field::new(\"c3\", DataType::Boolean, true),\n+//! ]);\n+//!\n+//! let c1 = BinaryArray::from(vec![\n+//!     \"Lorem ipsum dolor sit amet\",\n+//!     \"consectetur adipiscing elit\",\n+//!     \"sed do eiusmod tempor\",\n+//! ]);\n+//! let c2 = PrimitiveArray::<Float64Type>::from(vec![\n+//!     Some(123.564532),\n+//!     None,\n+//!     Some(-556132.25),\n+//! ]);\n+//! let c3 = PrimitiveArray::<UInt32Type>::from(vec![3, 2, 1]);\n+//! let c4 = PrimitiveArray::<BooleanType>::from(vec![Some(true), Some(false), None]);\n+//!\n+//! let batch = RecordBatch::new(\n+//!     Arc::new(schema),\n+//!     vec![Arc::new(c1), Arc::new(c2), Arc::new(c3), Arc::new(c4)],\n+//! );\n+//!\n+//! let file = File::create(\"/tmp/out.csv\").unwrap();\n+//!\n+//! let writer = csv::Writer::new(file);\n+//! writer.write(vec![&batch, &batch]).unwrap();\n+//! ```\n+\n+use csv as csv_crate;\n+\n+use std::fs::File;\n+\n+use crate::array::*;\n+use crate::datatypes::*;\n+use crate::error::{ArrowError, Result};\n+use crate::record_batch::RecordBatch;\n+\n+fn write_primitive_value<T>(array: &ArrayRef, i: usize) -> String\n+where\n+    T: ArrowNumericType,\n+    T::Native: ::std::string::ToString,\n+{\n+    let c = array.as_any().downcast_ref::<PrimitiveArray<T>>().unwrap();\n+    c.value(i).to_string()\n+}\n+\n+/// A CSV writer\n+pub struct Writer {\n+    /// The file to write to\n+    file: File,\n+    /// Column delimiter. Defauits to `b','`\n+    delimiter: u8,\n+    /// Whether file should be written with headers. Defaults to `true`\n+    has_headers: bool,\n+}\n+\n+impl Writer {\n+    /// Create a new CsvWriter from a file, with default options\n+    pub fn new(file: File) -> Self {\n+        Writer {\n+            file,\n+            delimiter: b',',\n+            has_headers: true,\n+        }\n+    }\n+\n+    /// Write a vector of record batches to a file\n+    pub fn write(&self, batches: Vec<&RecordBatch>) -> Result<()> {\n+        let mut builder = csv_crate::WriterBuilder::new();\n+\n+        let mut wtr = builder.delimiter(self.delimiter).from_writer(&self.file);\n+\n+        if batches.is_empty() {\n \n Review comment:\n   Check this at beginning of method?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-03T03:44:42.654+0000",
                    "updated": "2019-03-03T03:44:42.654+0000",
                    "started": "2019-03-03T03:44:42.653+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "206829",
                    "issueId": "13199378"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13199378/worklog/206830",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liurenjie1024 commented on pull request #3790: ARROW-3838: [Rust] CSV Writer\nURL: https://github.com/apache/arrow/pull/3790#discussion_r261850205\n \n \n\n ##########\n File path: rust/arrow/src/csv/reader.rs\n ##########\n @@ -395,8 +395,8 @@ pub struct ReaderBuilder {\n }\n \n impl Default for ReaderBuilder {\n-    fn default() -> ReaderBuilder {\n-        ReaderBuilder {\n+    fn default() -> Self {\n \n Review comment:\n   Maybe it's a better idea to put this refactoring into another PR? It doesn't seem related with csv writer\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-03T03:44:42.655+0000",
                    "updated": "2019-03-03T03:44:42.655+0000",
                    "started": "2019-03-03T03:44:42.655+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "206830",
                    "issueId": "13199378"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13199378/worklog/206831",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liurenjie1024 commented on pull request #3790: ARROW-3838: [Rust] CSV Writer\nURL: https://github.com/apache/arrow/pull/3790#discussion_r261850339\n \n \n\n ##########\n File path: rust/arrow/src/csv/writer.rs\n ##########\n @@ -0,0 +1,363 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! CSV Writer\n+//!\n+//! This CSV writer allows Arrow data (in record batches) to be written as CSV files.\n+//! The writer does not support writing `ListArray` and `StructArray`.\n+//!\n+//! Example:\n+//!\n+//! ```\n+//! use arrow::array::*;\n+//! use arrow::csv;\n+//! use arrow::datatypes::*;\n+//! use arrow::record_batch::RecordBatch;\n+//! use std::fs::File;\n+//! use std::sync::Arc;\n+//!\n+//! let schema = Schema::new(vec![\n+//!     Field::new(\"c1\", DataType::Utf8, false),\n+//!     Field::new(\"c2\", DataType::Float64, true),\n+//!     Field::new(\"c3\", DataType::UInt32, false),\n+//!     Field::new(\"c3\", DataType::Boolean, true),\n+//! ]);\n+//!\n+//! let c1 = BinaryArray::from(vec![\n+//!     \"Lorem ipsum dolor sit amet\",\n+//!     \"consectetur adipiscing elit\",\n+//!     \"sed do eiusmod tempor\",\n+//! ]);\n+//! let c2 = PrimitiveArray::<Float64Type>::from(vec![\n+//!     Some(123.564532),\n+//!     None,\n+//!     Some(-556132.25),\n+//! ]);\n+//! let c3 = PrimitiveArray::<UInt32Type>::from(vec![3, 2, 1]);\n+//! let c4 = PrimitiveArray::<BooleanType>::from(vec![Some(true), Some(false), None]);\n+//!\n+//! let batch = RecordBatch::new(\n+//!     Arc::new(schema),\n+//!     vec![Arc::new(c1), Arc::new(c2), Arc::new(c3), Arc::new(c4)],\n+//! );\n+//!\n+//! let file = File::create(\"/tmp/out.csv\").unwrap();\n+//!\n+//! let writer = csv::Writer::new(file);\n+//! writer.write(vec![&batch, &batch]).unwrap();\n+//! ```\n+\n+use csv as csv_crate;\n+\n+use std::fs::File;\n+\n+use crate::array::*;\n+use crate::datatypes::*;\n+use crate::error::{ArrowError, Result};\n+use crate::record_batch::RecordBatch;\n+\n+fn write_primitive_value<T>(array: &ArrayRef, i: usize) -> String\n+where\n+    T: ArrowNumericType,\n+    T::Native: ::std::string::ToString,\n+{\n+    let c = array.as_any().downcast_ref::<PrimitiveArray<T>>().unwrap();\n+    c.value(i).to_string()\n+}\n+\n+/// A CSV writer\n+pub struct Writer {\n+    /// The file to write to\n+    file: File,\n+    /// Column delimiter. Defauits to `b','`\n+    delimiter: u8,\n+    /// Whether file should be written with headers. Defaults to `true`\n+    has_headers: bool,\n \n Review comment:\n   Since csv is a text based format, should we also consider encoding?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-03T03:44:42.687+0000",
                    "updated": "2019-03-03T03:44:42.687+0000",
                    "started": "2019-03-03T03:44:42.687+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "206831",
                    "issueId": "13199378"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13199378/worklog/206869",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on pull request #3790: ARROW-3838: [Rust] CSV Writer\nURL: https://github.com/apache/arrow/pull/3790#discussion_r261857784\n \n \n\n ##########\n File path: rust/arrow/src/csv/writer.rs\n ##########\n @@ -0,0 +1,363 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! CSV Writer\n+//!\n+//! This CSV writer allows Arrow data (in record batches) to be written as CSV files.\n+//! The writer does not support writing `ListArray` and `StructArray`.\n+//!\n+//! Example:\n+//!\n+//! ```\n+//! use arrow::array::*;\n+//! use arrow::csv;\n+//! use arrow::datatypes::*;\n+//! use arrow::record_batch::RecordBatch;\n+//! use std::fs::File;\n+//! use std::sync::Arc;\n+//!\n+//! let schema = Schema::new(vec![\n+//!     Field::new(\"c1\", DataType::Utf8, false),\n+//!     Field::new(\"c2\", DataType::Float64, true),\n+//!     Field::new(\"c3\", DataType::UInt32, false),\n+//!     Field::new(\"c3\", DataType::Boolean, true),\n+//! ]);\n+//!\n+//! let c1 = BinaryArray::from(vec![\n+//!     \"Lorem ipsum dolor sit amet\",\n+//!     \"consectetur adipiscing elit\",\n+//!     \"sed do eiusmod tempor\",\n+//! ]);\n+//! let c2 = PrimitiveArray::<Float64Type>::from(vec![\n+//!     Some(123.564532),\n+//!     None,\n+//!     Some(-556132.25),\n+//! ]);\n+//! let c3 = PrimitiveArray::<UInt32Type>::from(vec![3, 2, 1]);\n+//! let c4 = PrimitiveArray::<BooleanType>::from(vec![Some(true), Some(false), None]);\n+//!\n+//! let batch = RecordBatch::new(\n+//!     Arc::new(schema),\n+//!     vec![Arc::new(c1), Arc::new(c2), Arc::new(c3), Arc::new(c4)],\n+//! );\n+//!\n+//! let file = File::create(\"/tmp/out.csv\").unwrap();\n+//!\n+//! let writer = csv::Writer::new(file);\n+//! writer.write(vec![&batch, &batch]).unwrap();\n+//! ```\n+\n+use csv as csv_crate;\n+\n+use std::fs::File;\n+\n+use crate::array::*;\n+use crate::datatypes::*;\n+use crate::error::{ArrowError, Result};\n+use crate::record_batch::RecordBatch;\n+\n+fn write_primitive_value<T>(array: &ArrayRef, i: usize) -> String\n+where\n+    T: ArrowNumericType,\n+    T::Native: ::std::string::ToString,\n+{\n+    let c = array.as_any().downcast_ref::<PrimitiveArray<T>>().unwrap();\n+    c.value(i).to_string()\n+}\n+\n+/// A CSV writer\n+pub struct Writer {\n+    /// The file to write to\n+    file: File,\n+    /// Column delimiter. Defauits to `b','`\n+    delimiter: u8,\n+    /// Whether file should be written with headers. Defaults to `true`\n+    has_headers: bool,\n \n Review comment:\n   I don't think that the `csv` crate supports different encodings. Only UTF-8 is supported.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-03T09:06:58.554+0000",
                    "updated": "2019-03-03T09:06:58.554+0000",
                    "started": "2019-03-03T09:06:58.553+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "206869",
                    "issueId": "13199378"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13199378/worklog/206870",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on pull request #3790: ARROW-3838: [Rust] CSV Writer\nURL: https://github.com/apache/arrow/pull/3790#discussion_r261857792\n \n \n\n ##########\n File path: rust/arrow/src/csv/writer.rs\n ##########\n @@ -0,0 +1,363 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! CSV Writer\n+//!\n+//! This CSV writer allows Arrow data (in record batches) to be written as CSV files.\n+//! The writer does not support writing `ListArray` and `StructArray`.\n+//!\n+//! Example:\n+//!\n+//! ```\n+//! use arrow::array::*;\n+//! use arrow::csv;\n+//! use arrow::datatypes::*;\n+//! use arrow::record_batch::RecordBatch;\n+//! use std::fs::File;\n+//! use std::sync::Arc;\n+//!\n+//! let schema = Schema::new(vec![\n+//!     Field::new(\"c1\", DataType::Utf8, false),\n+//!     Field::new(\"c2\", DataType::Float64, true),\n+//!     Field::new(\"c3\", DataType::UInt32, false),\n+//!     Field::new(\"c3\", DataType::Boolean, true),\n+//! ]);\n+//!\n+//! let c1 = BinaryArray::from(vec![\n+//!     \"Lorem ipsum dolor sit amet\",\n+//!     \"consectetur adipiscing elit\",\n+//!     \"sed do eiusmod tempor\",\n+//! ]);\n+//! let c2 = PrimitiveArray::<Float64Type>::from(vec![\n+//!     Some(123.564532),\n+//!     None,\n+//!     Some(-556132.25),\n+//! ]);\n+//! let c3 = PrimitiveArray::<UInt32Type>::from(vec![3, 2, 1]);\n+//! let c4 = PrimitiveArray::<BooleanType>::from(vec![Some(true), Some(false), None]);\n+//!\n+//! let batch = RecordBatch::new(\n+//!     Arc::new(schema),\n+//!     vec![Arc::new(c1), Arc::new(c2), Arc::new(c3), Arc::new(c4)],\n+//! );\n+//!\n+//! let file = File::create(\"/tmp/out.csv\").unwrap();\n+//!\n+//! let writer = csv::Writer::new(file);\n+//! writer.write(vec![&batch, &batch]).unwrap();\n+//! ```\n+\n+use csv as csv_crate;\n+\n+use std::fs::File;\n+\n+use crate::array::*;\n+use crate::datatypes::*;\n+use crate::error::{ArrowError, Result};\n+use crate::record_batch::RecordBatch;\n+\n+fn write_primitive_value<T>(array: &ArrayRef, i: usize) -> String\n+where\n+    T: ArrowNumericType,\n+    T::Native: ::std::string::ToString,\n+{\n+    let c = array.as_any().downcast_ref::<PrimitiveArray<T>>().unwrap();\n+    c.value(i).to_string()\n+}\n+\n+/// A CSV writer\n+pub struct Writer {\n+    /// The file to write to\n+    file: File,\n+    /// Column delimiter. Defauits to `b','`\n+    delimiter: u8,\n+    /// Whether file should be written with headers. Defaults to `true`\n+    has_headers: bool,\n+}\n+\n+impl Writer {\n+    /// Create a new CsvWriter from a file, with default options\n+    pub fn new(file: File) -> Self {\n+        Writer {\n+            file,\n+            delimiter: b',',\n+            has_headers: true,\n+        }\n+    }\n+\n+    /// Write a vector of record batches to a file\n+    pub fn write(&self, batches: Vec<&RecordBatch>) -> Result<()> {\n+        let mut builder = csv_crate::WriterBuilder::new();\n+\n+        let mut wtr = builder.delimiter(self.delimiter).from_writer(&self.file);\n+\n+        if batches.is_empty() {\n \n Review comment:\n   Done, thanks\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-03T09:07:08.506+0000",
                    "updated": "2019-03-03T09:07:08.506+0000",
                    "started": "2019-03-03T09:07:08.506+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "206870",
                    "issueId": "13199378"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13199378/worklog/206871",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on pull request #3790: ARROW-3838: [Rust] CSV Writer\nURL: https://github.com/apache/arrow/pull/3790#discussion_r261858125\n \n \n\n ##########\n File path: rust/arrow/src/csv/reader.rs\n ##########\n @@ -395,8 +395,8 @@ pub struct ReaderBuilder {\n }\n \n impl Default for ReaderBuilder {\n-    fn default() -> ReaderBuilder {\n-        ReaderBuilder {\n+    fn default() -> Self {\n \n Review comment:\n   The changes are too small, but I can revert them. I wanted to make the reader consistent with the writer\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-03T09:16:08.425+0000",
                    "updated": "2019-03-03T09:16:08.425+0000",
                    "started": "2019-03-03T09:16:08.424+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "206871",
                    "issueId": "13199378"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 13800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@617ea918[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2617f490[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@464a55b2[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@5f609a9f[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@104fa4a7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@231ba50[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@16c29861[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@4dad4c44[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@20aaa3ca[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@2fc66eb5[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2dc5fabc[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@aad5c2c[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 13800,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Mar 04 14:03:54 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-03-04T14:03:54.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3838/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2018-11-19T16:36:55.000+0000",
        "updated": "2019-03-04T14:04:08.000+0000",
        "timeoriginalestimate": null,
        "description": "A CSV reader is being implemented in ARROW-3726 and this ticket is to add the corresponding writer.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "3h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 13800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Rust] Implement CSV Writer",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13199378/comment/16783396",
                    "id": "16783396",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "body": "Issue resolved by pull request 3790\n[https://github.com/apache/arrow/pull/3790]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "created": "2019-03-04T14:03:54.400+0000",
                    "updated": "2019-03-04T14:03:54.400+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|s00ntk:",
        "customfield_12314139": null
    }
}