{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13393504",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13393504",
    "key": "ARROW-13553",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12350591",
                "id": "12350591",
                "description": "",
                "name": "7.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-02-03"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12620607",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12620607",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "outwardIssue": {
                    "id": "13238663",
                    "key": "ARROW-5549",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13238663",
                    "fields": {
                        "summary": "[C++][Docs] Summarize function argument type guidelines in developers/cpp.rst",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            },
            {
                "id": "12624445",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12624445",
                "type": {
                    "id": "12310051",
                    "name": "Supercedes",
                    "inward": "is superceded by",
                    "outward": "supercedes",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310051"
                },
                "outwardIssue": {
                    "id": "13405947",
                    "key": "ARROW-14281",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13405947",
                    "fields": {
                        "summary": "How to Review PRs Guidelines",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                            "name": "Closed",
                            "id": "6",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12332532",
                "id": "12332532",
                "name": "Documentation"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "aggregateprogress": {
            "progress": 31800,
            "total": 31800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 31800,
            "total": 31800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-13553/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 53,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13393504/worklog/684866",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #11757:\nURL: https://github.com/apache/arrow/pull/11757#issuecomment-975773160\n\n\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-22T17:49:53.427+0000",
                    "updated": "2021-11-22T17:49:53.427+0000",
                    "started": "2021-11-22T17:49:53.426+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "684866",
                    "issueId": "13393504"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13393504/worklog/684867",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #11757:\nURL: https://github.com/apache/arrow/pull/11757#issuecomment-975774711\n\n\n   @jorisvandenbossche @lidavidm @bkietz @jonkeane Feedback welcome on this.\r\n   \r\n   Also spotting clumsy or incorrect wording would be very useful @thisisnic .\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-22T17:51:46.441+0000",
                    "updated": "2021-11-22T17:51:46.441+0000",
                    "started": "2021-11-22T17:51:46.440+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "684867",
                    "issueId": "13393504"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13393504/worklog/684879",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkmgit commented on pull request #11757:\nURL: https://github.com/apache/arrow/pull/11757#issuecomment-975784458\n\n\n   Would suggest to use precise descriptions but keep English language requirements as simple as possible.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-22T18:04:12.408+0000",
                    "updated": "2021-11-22T18:04:12.408+0000",
                    "started": "2021-11-22T18:04:12.407+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "684879",
                    "issueId": "13393504"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13393504/worklog/684890",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "thisisnic commented on a change in pull request #11757:\nURL: https://github.com/apache/arrow/pull/11757#discussion_r754512706\n\n\n\n##########\nFile path: docs/source/developers/reviewing.rst\n##########\n@@ -0,0 +1,226 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=======================\n+Reviewing contributions\n+=======================\n+\n+Principles\n+==========\n+\n+Arrow is a foundational project that will need to evolve over many years\n+or even decades, while serving potentially millions of users.  We believe\n+being meticulous when reviewing brings greater rewards to the project than\n+being lenient and aiming for quick merges.\n+\n+Fixing potential issues after a Pull Request (PR) merge is more costly since\n+it forces the developer to context-switch back to work that was thought\n+to be finished.  Moreover, an late-minute API change may propagate to\n\nReview comment:\n       ```suggestion\r\n   to be finished.  Moreover, a late-minute API change may propagate to\r\n   ```\r\n   Also, I think \"late-minute\" could be rephrased - not sure if \"last minute\" would best fit here or that isn't quite what was intended.\n\n##########\nFile path: docs/source/developers/reviewing.rst\n##########\n@@ -0,0 +1,226 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=======================\n+Reviewing contributions\n+=======================\n+\n+Principles\n+==========\n+\n+Arrow is a foundational project that will need to evolve over many years\n+or even decades, while serving potentially millions of users.  We believe\n+being meticulous when reviewing brings greater rewards to the project than\n+being lenient and aiming for quick merges.\n+\n+Fixing potential issues after a Pull Request (PR) merge is more costly since\n+it forces the developer to context-switch back to work that was thought\n+to be finished.  Moreover, an late-minute API change may propagate to\n+other parts of the project and require more attention than if done up front.\n\nReview comment:\n       ```suggestion\r\n   other parts of the project and require more attention than if done up-front.\r\n   ```\n\n##########\nFile path: docs/source/developers/reviewing.rst\n##########\n@@ -0,0 +1,226 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=======================\n+Reviewing contributions\n+=======================\n+\n+Principles\n+==========\n+\n+Arrow is a foundational project that will need to evolve over many years\n+or even decades, while serving potentially millions of users.  We believe\n+being meticulous when reviewing brings greater rewards to the project than\n+being lenient and aiming for quick merges.\n+\n+Fixing potential issues after a Pull Request (PR) merge is more costly since\n+it forces the developer to context-switch back to work that was thought\n+to be finished.  Moreover, an late-minute API change may propagate to\n+other parts of the project and require more attention than if done up front.\n+And there are social issues with asking a volunteer to go back to work\n+on something that was accepted as finished.\n+\n+Guidelines\n+==========\n+\n+Meta\n+----\n+\n+**Use your common sense**.  These guidelines are not hard rules.\n+Committers are expected to have sufficient expertise on their work\n+areas to be able to modulate concerns if necessary.\n+\n+These guidelines are not listed in a particular order.  They are\n+not intended to be used as a checklist.\n+\n+Finally, **these guidelines are not currently exhaustive**.\n+\n+Public API design\n+-----------------\n+\n+- Public APIs should nudge users towards the most desirable constructs.\n+  In other words, if there is a \"best\" way to do something, it should\n+  ideally also be the most easily discoverable and the most concise to type.\n+  For example, safe APIs should ideally be featured more prominently than\n+  unsafe APIs that may crash or silently produce erronenous results on\n+  invalid input.\n+\n+- Public APIs should ideally tend to produce readable code.  One example\n+  is when multiple options are expected to be added over time: it is better\n+  to try to organize options logically rather than juxtapose them all in\n+  a function's signature (see for example the CSV reading APIs in C++ and Python).\n+\n+- Naming is important.  Try to ask yourself if code calling the new API\n+  would be understandable without having to read the API docs.\n+  Vague naming should be avoided; inaccurate naming is even worse as it\n+  can mislead the reader and lead to buggy user code.\n+\n+- Be mindful of terminology.  Every project has (explicitly or tacitly) set\n+  conventions about how to name important concepts; steering away from those\n+  conventions increases the cognitive workload both for contributors and\n+  users of the project.  Conversely, reusing a well-known term for a different\n+  purpose than usual can also increase the cognitive workload and make\n+  developers' life generally more difficult.\n+\n+- If it is unsure whether an API is the right one for the task at hand,\n\nReview comment:\n       ```suggestion\r\n   - If you are unsure whether an API is the right one for the task at hand,\r\n   ```\n\n##########\nFile path: docs/source/developers/reviewing.rst\n##########\n@@ -0,0 +1,226 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=======================\n+Reviewing contributions\n+=======================\n+\n+Principles\n+==========\n+\n+Arrow is a foundational project that will need to evolve over many years\n+or even decades, while serving potentially millions of users.  We believe\n\nReview comment:\n       ```suggestion\r\n   or even decades, while serving potentially millions of users.  We believe that\r\n   ```\n\n##########\nFile path: docs/source/developers/reviewing.rst\n##########\n@@ -0,0 +1,226 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=======================\n+Reviewing contributions\n+=======================\n+\n+Principles\n+==========\n+\n+Arrow is a foundational project that will need to evolve over many years\n+or even decades, while serving potentially millions of users.  We believe\n+being meticulous when reviewing brings greater rewards to the project than\n+being lenient and aiming for quick merges.\n+\n+Fixing potential issues after a Pull Request (PR) merge is more costly since\n+it forces the developer to context-switch back to work that was thought\n+to be finished.  Moreover, an late-minute API change may propagate to\n+other parts of the project and require more attention than if done up front.\n+And there are social issues with asking a volunteer to go back to work\n\nReview comment:\n       ```suggestion\r\n   In addition, there are social issues with asking a volunteer to go back to work\r\n   ```\n\n##########\nFile path: docs/source/developers/reviewing.rst\n##########\n@@ -0,0 +1,226 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=======================\n+Reviewing contributions\n+=======================\n+\n+Principles\n+==========\n+\n+Arrow is a foundational project that will need to evolve over many years\n+or even decades, while serving potentially millions of users.  We believe\n+being meticulous when reviewing brings greater rewards to the project than\n+being lenient and aiming for quick merges.\n+\n+Fixing potential issues after a Pull Request (PR) merge is more costly since\n+it forces the developer to context-switch back to work that was thought\n+to be finished.  Moreover, an late-minute API change may propagate to\n+other parts of the project and require more attention than if done up front.\n+And there are social issues with asking a volunteer to go back to work\n+on something that was accepted as finished.\n+\n+Guidelines\n+==========\n+\n+Meta\n+----\n+\n+**Use your common sense**.  These guidelines are not hard rules.\n+Committers are expected to have sufficient expertise on their work\n+areas to be able to modulate concerns if necessary.\n+\n+These guidelines are not listed in a particular order.  They are\n+not intended to be used as a checklist.\n+\n+Finally, **these guidelines are not currently exhaustive**.\n+\n+Public API design\n+-----------------\n+\n+- Public APIs should nudge users towards the most desirable constructs.\n+  In other words, if there is a \"best\" way to do something, it should\n+  ideally also be the most easily discoverable and the most concise to type.\n+  For example, safe APIs should ideally be featured more prominently than\n+  unsafe APIs that may crash or silently produce erronenous results on\n+  invalid input.\n+\n+- Public APIs should ideally tend to produce readable code.  One example\n+  is when multiple options are expected to be added over time: it is better\n+  to try to organize options logically rather than juxtapose them all in\n+  a function's signature (see for example the CSV reading APIs in C++ and Python).\n+\n+- Naming is important.  Try to ask yourself if code calling the new API\n+  would be understandable without having to read the API docs.\n+  Vague naming should be avoided; inaccurate naming is even worse as it\n+  can mislead the reader and lead to buggy user code.\n+\n+- Be mindful of terminology.  Every project has (explicitly or tacitly) set\n+  conventions about how to name important concepts; steering away from those\n+  conventions increases the cognitive workload both for contributors and\n+  users of the project.  Conversely, reusing a well-known term for a different\n+  purpose than usual can also increase the cognitive workload and make\n+  developers' life generally more difficult.\n+\n+- If it is unsure whether an API is the right one for the task at hand,\n+  it is advisable to mark it experimental, such that users know that it\n+  may be changed over time, while contributors are less wary of bringing\n+  code-breaking improvements.  However, experimental APIs should not be\n+  used as an excuse for eschewing basic API design principles.\n+\n+Robustness\n+----------\n+\n+- Arrow is a set of open source libraries and will be used in a very wide\n+  array of contexts (including fiddling with deliberately artificial data\n+  at a Jupyter interpreter prompt).  If you are writing a public API, make\n+  sure that it won't crash or produce undefined behaviour on unusual (but\n+  valid) inputs.\n+\n+- When a non-trivial algorithm is implemented, defense-in-depth checks can\n+  be useful to catch potential problems (such as debug-only assertions, if\n+  the language allows them).\n+\n+- APIs ingesting potentially untrusted data, such as on-disk file formats,\n+  should try to avoid crashing or produce silent bugs when invalid or\n+  corrupt data is fed to them.  This can require a lot of care that is\n+  out of the scope of regular code reviews (such as setting up fuzz testing\n+  - XXX link to current fuzz setup), but basic checks can still be suggested\n+  at the code review stage.\n+\n+- When calling foreign APIs, especially system functions or APIs dealing with\n+  input / output, do check for errors and propagate them (if the language\n+  does not propagate errors automatically, such as C++).\n+\n+Performance\n+-----------\n+\n+- Think about performance, but do not obsess over it.  Algorithmic complexity\n+  is important if input size may be \"large\" (the meaning of large depends\n+  on the context: use your own expertise to decide!).  Micro-optimizations\n+  improving performance by 20% or more on performance-sensitive functionality\n+  may be useful as well; lesser micro-optimizations may not be worth the\n+  time spent on them, especially if they lead to more complicated code.\n+\n+- If performance is important, measure it.  Do not satisfy yourself with\n+  guesses and intuitions (which may be founded on incorrect assumptions\n+  about the compiler or the hardware).\n+\n+- Try to avoid trying to trick the compiler/interpreter/runtime by writing\n+  the code in a certain way, unless it's really important.  These tricks\n+  are generally dependent on platform details that may become obsolete,\n+  they are often brittle, and they can make code harder to maintain\n+  (a common question that can block contributors is \"what should I do\n+  about this weird hack that my changes need to remove\"?).\n+\n+- Avoiding worst-case degenerescence (such as memory blowups when a size\n+  estimate is too imprecise) may be more critical than trying to improve\n+  the common case by a small amount.\n+\n+Documentation\n+-------------\n+\n+These guidelines should ideally apply to both prose documentation and\n+in-code docstrings.\n+\n+- Look for ambiguous / sub-informative wording.  For example, \"it is an error\n+  if ...\" is less informative than either \"An error is raised if ... \" or\n+  \"Behaviour is undefined if ...\" (the first phrasing doesn't tell the\n+  reader what actually *happens* on such an error).\n+\n+- Be mindful about spelling, grammar, expression, concision.  This may seem\n+  like an obvious concern, but not all people are not accustomed to care about\n+  this.\n\nReview comment:\n       Perhaps, instead of saying it's obvious but that not all people care about it, we could phrase it more positively, for example, saying that these things help smooth communication, or something like that?\n\n##########\nFile path: docs/source/developers/reviewing.rst\n##########\n@@ -0,0 +1,226 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=======================\n+Reviewing contributions\n+=======================\n+\n+Principles\n+==========\n+\n+Arrow is a foundational project that will need to evolve over many years\n+or even decades, while serving potentially millions of users.  We believe\n+being meticulous when reviewing brings greater rewards to the project than\n+being lenient and aiming for quick merges.\n+\n+Fixing potential issues after a Pull Request (PR) merge is more costly since\n+it forces the developer to context-switch back to work that was thought\n+to be finished.  Moreover, an late-minute API change may propagate to\n+other parts of the project and require more attention than if done up front.\n+And there are social issues with asking a volunteer to go back to work\n+on something that was accepted as finished.\n+\n+Guidelines\n+==========\n+\n+Meta\n+----\n+\n+**Use your common sense**.  These guidelines are not hard rules.\n+Committers are expected to have sufficient expertise on their work\n+areas to be able to modulate concerns if necessary.\n+\n+These guidelines are not listed in a particular order.  They are\n+not intended to be used as a checklist.\n\nReview comment:\n       ```suggestion\r\n   These guidelines are not listed in a particular order or not intended to be used as a checklist.\r\n   ```\n\n##########\nFile path: docs/source/developers/reviewing.rst\n##########\n@@ -0,0 +1,226 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=======================\n+Reviewing contributions\n+=======================\n+\n+Principles\n+==========\n+\n+Arrow is a foundational project that will need to evolve over many years\n+or even decades, while serving potentially millions of users.  We believe\n+being meticulous when reviewing brings greater rewards to the project than\n+being lenient and aiming for quick merges.\n+\n+Fixing potential issues after a Pull Request (PR) merge is more costly since\n+it forces the developer to context-switch back to work that was thought\n+to be finished.  Moreover, an late-minute API change may propagate to\n+other parts of the project and require more attention than if done up front.\n+And there are social issues with asking a volunteer to go back to work\n+on something that was accepted as finished.\n+\n+Guidelines\n+==========\n+\n+Meta\n+----\n+\n+**Use your common sense**.  These guidelines are not hard rules.\n\nReview comment:\n       ```suggestion\r\n   **Use discretion**.  These guidelines are not hard rules.\r\n   ```\r\n   It might just be me, but \"use your common sense\" sounds a little, almost harsh, and \"common sense\" is extremely subjective.  I'm not sure my suggestion there is the right one though.\n\n##########\nFile path: docs/source/developers/reviewing.rst\n##########\n@@ -0,0 +1,226 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=======================\n+Reviewing contributions\n+=======================\n+\n+Principles\n+==========\n+\n+Arrow is a foundational project that will need to evolve over many years\n+or even decades, while serving potentially millions of users.  We believe\n+being meticulous when reviewing brings greater rewards to the project than\n+being lenient and aiming for quick merges.\n+\n+Fixing potential issues after a Pull Request (PR) merge is more costly since\n+it forces the developer to context-switch back to work that was thought\n+to be finished.  Moreover, an late-minute API change may propagate to\n+other parts of the project and require more attention than if done up front.\n+And there are social issues with asking a volunteer to go back to work\n+on something that was accepted as finished.\n+\n+Guidelines\n+==========\n+\n+Meta\n+----\n+\n+**Use your common sense**.  These guidelines are not hard rules.\n+Committers are expected to have sufficient expertise on their work\n+areas to be able to modulate concerns if necessary.\n+\n+These guidelines are not listed in a particular order.  They are\n+not intended to be used as a checklist.\n+\n+Finally, **these guidelines are not currently exhaustive**.\n+\n+Public API design\n+-----------------\n+\n+- Public APIs should nudge users towards the most desirable constructs.\n+  In other words, if there is a \"best\" way to do something, it should\n+  ideally also be the most easily discoverable and the most concise to type.\n+  For example, safe APIs should ideally be featured more prominently than\n+  unsafe APIs that may crash or silently produce erronenous results on\n+  invalid input.\n+\n+- Public APIs should ideally tend to produce readable code.  One example\n+  is when multiple options are expected to be added over time: it is better\n+  to try to organize options logically rather than juxtapose them all in\n+  a function's signature (see for example the CSV reading APIs in C++ and Python).\n+\n+- Naming is important.  Try to ask yourself if code calling the new API\n+  would be understandable without having to read the API docs.\n+  Vague naming should be avoided; inaccurate naming is even worse as it\n+  can mislead the reader and lead to buggy user code.\n+\n+- Be mindful of terminology.  Every project has (explicitly or tacitly) set\n+  conventions about how to name important concepts; steering away from those\n+  conventions increases the cognitive workload both for contributors and\n+  users of the project.  Conversely, reusing a well-known term for a different\n+  purpose than usual can also increase the cognitive workload and make\n+  developers' life generally more difficult.\n\nReview comment:\n       ```suggestion\r\n     developers' lives generally more difficult.\r\n   ```\n\n##########\nFile path: docs/source/developers/reviewing.rst\n##########\n@@ -0,0 +1,226 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=======================\n+Reviewing contributions\n+=======================\n+\n+Principles\n+==========\n+\n+Arrow is a foundational project that will need to evolve over many years\n+or even decades, while serving potentially millions of users.  We believe\n+being meticulous when reviewing brings greater rewards to the project than\n+being lenient and aiming for quick merges.\n+\n+Fixing potential issues after a Pull Request (PR) merge is more costly since\n+it forces the developer to context-switch back to work that was thought\n+to be finished.  Moreover, an late-minute API change may propagate to\n+other parts of the project and require more attention than if done up front.\n+And there are social issues with asking a volunteer to go back to work\n+on something that was accepted as finished.\n+\n+Guidelines\n+==========\n+\n+Meta\n+----\n+\n+**Use your common sense**.  These guidelines are not hard rules.\n+Committers are expected to have sufficient expertise on their work\n+areas to be able to modulate concerns if necessary.\n+\n+These guidelines are not listed in a particular order.  They are\n+not intended to be used as a checklist.\n+\n+Finally, **these guidelines are not currently exhaustive**.\n+\n+Public API design\n+-----------------\n+\n+- Public APIs should nudge users towards the most desirable constructs.\n+  In other words, if there is a \"best\" way to do something, it should\n+  ideally also be the most easily discoverable and the most concise to type.\n+  For example, safe APIs should ideally be featured more prominently than\n+  unsafe APIs that may crash or silently produce erronenous results on\n+  invalid input.\n+\n+- Public APIs should ideally tend to produce readable code.  One example\n+  is when multiple options are expected to be added over time: it is better\n+  to try to organize options logically rather than juxtapose them all in\n+  a function's signature (see for example the CSV reading APIs in C++ and Python).\n+\n+- Naming is important.  Try to ask yourself if code calling the new API\n+  would be understandable without having to read the API docs.\n+  Vague naming should be avoided; inaccurate naming is even worse as it\n+  can mislead the reader and lead to buggy user code.\n+\n+- Be mindful of terminology.  Every project has (explicitly or tacitly) set\n+  conventions about how to name important concepts; steering away from those\n+  conventions increases the cognitive workload both for contributors and\n+  users of the project.  Conversely, reusing a well-known term for a different\n+  purpose than usual can also increase the cognitive workload and make\n+  developers' life generally more difficult.\n+\n+- If it is unsure whether an API is the right one for the task at hand,\n+  it is advisable to mark it experimental, such that users know that it\n+  may be changed over time, while contributors are less wary of bringing\n+  code-breaking improvements.  However, experimental APIs should not be\n+  used as an excuse for eschewing basic API design principles.\n+\n+Robustness\n+----------\n+\n+- Arrow is a set of open source libraries and will be used in a very wide\n+  array of contexts (including fiddling with deliberately artificial data\n+  at a Jupyter interpreter prompt).  If you are writing a public API, make\n+  sure that it won't crash or produce undefined behaviour on unusual (but\n+  valid) inputs.\n+\n+- When a non-trivial algorithm is implemented, defense-in-depth checks can\n+  be useful to catch potential problems (such as debug-only assertions, if\n+  the language allows them).\n+\n+- APIs ingesting potentially untrusted data, such as on-disk file formats,\n+  should try to avoid crashing or produce silent bugs when invalid or\n+  corrupt data is fed to them.  This can require a lot of care that is\n+  out of the scope of regular code reviews (such as setting up fuzz testing\n+  - XXX link to current fuzz setup), but basic checks can still be suggested\n+  at the code review stage.\n+\n+- When calling foreign APIs, especially system functions or APIs dealing with\n+  input / output, do check for errors and propagate them (if the language\n+  does not propagate errors automatically, such as C++).\n+\n+Performance\n+-----------\n+\n+- Think about performance, but do not obsess over it.  Algorithmic complexity\n+  is important if input size may be \"large\" (the meaning of large depends\n+  on the context: use your own expertise to decide!).  Micro-optimizations\n+  improving performance by 20% or more on performance-sensitive functionality\n+  may be useful as well; lesser micro-optimizations may not be worth the\n+  time spent on them, especially if they lead to more complicated code.\n+\n+- If performance is important, measure it.  Do not satisfy yourself with\n+  guesses and intuitions (which may be founded on incorrect assumptions\n+  about the compiler or the hardware).\n+\n+- Try to avoid trying to trick the compiler/interpreter/runtime by writing\n+  the code in a certain way, unless it's really important.  These tricks\n+  are generally dependent on platform details that may become obsolete,\n+  they are often brittle, and they can make code harder to maintain\n+  (a common question that can block contributors is \"what should I do\n+  about this weird hack that my changes need to remove\"?).\n+\n+- Avoiding worst-case degenerescence (such as memory blowups when a size\n+  estimate is too imprecise) may be more critical than trying to improve\n+  the common case by a small amount.\n+\n+Documentation\n+-------------\n+\n+These guidelines should ideally apply to both prose documentation and\n+in-code docstrings.\n+\n+- Look for ambiguous / sub-informative wording.  For example, \"it is an error\n+  if ...\" is less informative than either \"An error is raised if ... \" or\n+  \"Behaviour is undefined if ...\" (the first phrasing doesn't tell the\n+  reader what actually *happens* on such an error).\n+\n+- Be mindful about spelling, grammar, expression, concision.  This may seem\n+  like an obvious concern, but not all people are not accustomed to care about\n+  this.\n+\n+- Cross-linking increases the global value of documentation.  Sphinx especially\n+  has great cross-linking capabilities (including topic references, glossary\n+  terms, API references), be sure to make use of them!\n+\n+Testing\n+-------\n+\n+- When adding an API, all nominal cases should have test cases.  Does a function\n+  allow null values? Then null values should be tested (alongside non-null\n+  values, of course). Does a function allow different input types? etc.\n+\n+- If some aspect of a functionality is delicate (either by definition or\n+  as an implementation detail), it should be tested.\n+\n+- Corner cases should be exercised, especially in low-level implementation\n+  languages such as C++.  Examples: empty arrays, zero-chunk arrays, arrays\n+  with only nulls, etc.\n+\n+- Stress tests can be useful, for example to uncover synchronizations bugs\n+  if non-trivial parallelization is being added, or to validate a computational\n+  argument against a slow and straightforward reference implementation.\n+\n+- A mitigating concern, however, is the overall cost of running the test\n+  suite.  Continuous Integration (CI) runtimes can be painfully long and\n+  we should be wary of increasing them too much.  Sometimes it is\n+  worthwhile to fine-tune testing parameters to balance the usefulness\n+  of tests against the cost of running them (especially where stress tests\n+  are involved, since they tend to imply execution over large datasets).\n+\n+\n+Social aspects\n+==============\n+\n+* Reviewing is a communication between the contributor and the reviewer.\n+  Avoid letting questions or comments unanswered for too long (\"too long\"\n+  is of course very subjective, but two weeks can be a reasonable\n+  heuristic).  If you cannot allocate time soon, do say it explicitly.\n+  If you don't have the answer to a question, do say it explicitly.\n+  Saying \"I don't have time immediately but I will come back later,\n+  feel free to ping if I seem to have forgotten\" or \"Sorry, I am out of depth\n+  here\" is always better than saying nothing and letting the interlocutor\n+  wondering.\n+\n+* If you know someone who may help on a blocking issue and past experience\n+  suggests they can be available for that, feel free to add them to the\n+  discussion (for example by cc'ing their Github handle).\n+\n+* If the contributor has stopped giving feedback or updating their PR,\n+  perhaps they're not interested anymore, but perhaps also they're stuck\n+  on some issue and feel unable to push their contribution any further.\n+  Don't hesitate to ask (\"I see this PR hasn't seen any updates recently,\n+  are you stuck on something? Do you need any help?\").\n+\n+* If the contribution is genuinely desirable and the contributor is not making\n+  any progress, it is also possible to take it up.  Out of politeness,\n+  it is however better to ask the contributor first.\n+\n+* Some contributors are looking for a quick fix to a specific problem and\n+  don't want to spend too much time on it.  Others on the contrary are eager\n+  to learn and improve their contribution to make it conform to the\n+  project's standards.  The latter kind of contributors are especially\n+  valuable as they may become long-term contributors or even committers\n+  to the project; it can therefore be a good strategy to prioritize\n+  interactions with such contributors.\n+\n+* Some contributors may respond \"I will fix it later, can we merge anyway?\"\n+  when a problem is pointed.  Unfortunately, whether the fix is really\n\nReview comment:\n       ```suggestion\r\n     when a problem is pointed out to them.  Unfortunately, whether the fix will really be\r\n   ```\n\n##########\nFile path: docs/source/developers/reviewing.rst\n##########\n@@ -0,0 +1,226 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=======================\n+Reviewing contributions\n+=======================\n+\n+Principles\n+==========\n+\n+Arrow is a foundational project that will need to evolve over many years\n+or even decades, while serving potentially millions of users.  We believe\n+being meticulous when reviewing brings greater rewards to the project than\n+being lenient and aiming for quick merges.\n+\n+Fixing potential issues after a Pull Request (PR) merge is more costly since\n+it forces the developer to context-switch back to work that was thought\n+to be finished.  Moreover, an late-minute API change may propagate to\n+other parts of the project and require more attention than if done up front.\n+And there are social issues with asking a volunteer to go back to work\n+on something that was accepted as finished.\n+\n+Guidelines\n+==========\n+\n+Meta\n+----\n+\n+**Use your common sense**.  These guidelines are not hard rules.\n+Committers are expected to have sufficient expertise on their work\n+areas to be able to modulate concerns if necessary.\n+\n+These guidelines are not listed in a particular order.  They are\n+not intended to be used as a checklist.\n+\n+Finally, **these guidelines are not currently exhaustive**.\n+\n+Public API design\n+-----------------\n+\n+- Public APIs should nudge users towards the most desirable constructs.\n+  In other words, if there is a \"best\" way to do something, it should\n+  ideally also be the most easily discoverable and the most concise to type.\n+  For example, safe APIs should ideally be featured more prominently than\n+  unsafe APIs that may crash or silently produce erronenous results on\n+  invalid input.\n+\n+- Public APIs should ideally tend to produce readable code.  One example\n+  is when multiple options are expected to be added over time: it is better\n+  to try to organize options logically rather than juxtapose them all in\n+  a function's signature (see for example the CSV reading APIs in C++ and Python).\n+\n+- Naming is important.  Try to ask yourself if code calling the new API\n+  would be understandable without having to read the API docs.\n+  Vague naming should be avoided; inaccurate naming is even worse as it\n+  can mislead the reader and lead to buggy user code.\n+\n+- Be mindful of terminology.  Every project has (explicitly or tacitly) set\n+  conventions about how to name important concepts; steering away from those\n+  conventions increases the cognitive workload both for contributors and\n+  users of the project.  Conversely, reusing a well-known term for a different\n+  purpose than usual can also increase the cognitive workload and make\n+  developers' life generally more difficult.\n+\n+- If it is unsure whether an API is the right one for the task at hand,\n+  it is advisable to mark it experimental, such that users know that it\n+  may be changed over time, while contributors are less wary of bringing\n+  code-breaking improvements.  However, experimental APIs should not be\n+  used as an excuse for eschewing basic API design principles.\n+\n+Robustness\n+----------\n+\n+- Arrow is a set of open source libraries and will be used in a very wide\n+  array of contexts (including fiddling with deliberately artificial data\n+  at a Jupyter interpreter prompt).  If you are writing a public API, make\n+  sure that it won't crash or produce undefined behaviour on unusual (but\n+  valid) inputs.\n+\n+- When a non-trivial algorithm is implemented, defense-in-depth checks can\n+  be useful to catch potential problems (such as debug-only assertions, if\n+  the language allows them).\n+\n+- APIs ingesting potentially untrusted data, such as on-disk file formats,\n+  should try to avoid crashing or produce silent bugs when invalid or\n+  corrupt data is fed to them.  This can require a lot of care that is\n+  out of the scope of regular code reviews (such as setting up fuzz testing\n+  - XXX link to current fuzz setup), but basic checks can still be suggested\n+  at the code review stage.\n+\n+- When calling foreign APIs, especially system functions or APIs dealing with\n+  input / output, do check for errors and propagate them (if the language\n+  does not propagate errors automatically, such as C++).\n+\n+Performance\n+-----------\n+\n+- Think about performance, but do not obsess over it.  Algorithmic complexity\n+  is important if input size may be \"large\" (the meaning of large depends\n+  on the context: use your own expertise to decide!).  Micro-optimizations\n+  improving performance by 20% or more on performance-sensitive functionality\n+  may be useful as well; lesser micro-optimizations may not be worth the\n+  time spent on them, especially if they lead to more complicated code.\n+\n+- If performance is important, measure it.  Do not satisfy yourself with\n+  guesses and intuitions (which may be founded on incorrect assumptions\n+  about the compiler or the hardware).\n+\n+- Try to avoid trying to trick the compiler/interpreter/runtime by writing\n+  the code in a certain way, unless it's really important.  These tricks\n+  are generally dependent on platform details that may become obsolete,\n+  they are often brittle, and they can make code harder to maintain\n+  (a common question that can block contributors is \"what should I do\n+  about this weird hack that my changes need to remove\"?).\n+\n+- Avoiding worst-case degenerescence (such as memory blowups when a size\n+  estimate is too imprecise) may be more critical than trying to improve\n+  the common case by a small amount.\n+\n+Documentation\n+-------------\n+\n+These guidelines should ideally apply to both prose documentation and\n+in-code docstrings.\n+\n+- Look for ambiguous / sub-informative wording.  For example, \"it is an error\n+  if ...\" is less informative than either \"An error is raised if ... \" or\n+  \"Behaviour is undefined if ...\" (the first phrasing doesn't tell the\n+  reader what actually *happens* on such an error).\n+\n+- Be mindful about spelling, grammar, expression, concision.  This may seem\n+  like an obvious concern, but not all people are not accustomed to care about\n+  this.\n+\n+- Cross-linking increases the global value of documentation.  Sphinx especially\n+  has great cross-linking capabilities (including topic references, glossary\n+  terms, API references), be sure to make use of them!\n+\n+Testing\n+-------\n+\n+- When adding an API, all nominal cases should have test cases.  Does a function\n+  allow null values? Then null values should be tested (alongside non-null\n+  values, of course). Does a function allow different input types? etc.\n+\n+- If some aspect of a functionality is delicate (either by definition or\n+  as an implementation detail), it should be tested.\n+\n+- Corner cases should be exercised, especially in low-level implementation\n+  languages such as C++.  Examples: empty arrays, zero-chunk arrays, arrays\n+  with only nulls, etc.\n+\n+- Stress tests can be useful, for example to uncover synchronizations bugs\n+  if non-trivial parallelization is being added, or to validate a computational\n+  argument against a slow and straightforward reference implementation.\n+\n+- A mitigating concern, however, is the overall cost of running the test\n+  suite.  Continuous Integration (CI) runtimes can be painfully long and\n+  we should be wary of increasing them too much.  Sometimes it is\n+  worthwhile to fine-tune testing parameters to balance the usefulness\n+  of tests against the cost of running them (especially where stress tests\n+  are involved, since they tend to imply execution over large datasets).\n+\n+\n+Social aspects\n+==============\n+\n+* Reviewing is a communication between the contributor and the reviewer.\n+  Avoid letting questions or comments unanswered for too long (\"too long\"\n+  is of course very subjective, but two weeks can be a reasonable\n+  heuristic).  If you cannot allocate time soon, do say it explicitly.\n+  If you don't have the answer to a question, do say it explicitly.\n+  Saying \"I don't have time immediately but I will come back later,\n+  feel free to ping if I seem to have forgotten\" or \"Sorry, I am out of depth\n+  here\" is always better than saying nothing and letting the interlocutor\n+  wondering.\n+\n+* If you know someone who may help on a blocking issue and past experience\n+  suggests they can be available for that, feel free to add them to the\n+  discussion (for example by cc'ing their Github handle).\n+\n+* If the contributor has stopped giving feedback or updating their PR,\n+  perhaps they're not interested anymore, but perhaps also they're stuck\n+  on some issue and feel unable to push their contribution any further.\n+  Don't hesitate to ask (\"I see this PR hasn't seen any updates recently,\n+  are you stuck on something? Do you need any help?\").\n+\n+* If the contribution is genuinely desirable and the contributor is not making\n+  any progress, it is also possible to take it up.  Out of politeness,\n+  it is however better to ask the contributor first.\n+\n+* Some contributors are looking for a quick fix to a specific problem and\n+  don't want to spend too much time on it.  Others on the contrary are eager\n+  to learn and improve their contribution to make it conform to the\n+  project's standards.  The latter kind of contributors are especially\n+  valuable as they may become long-term contributors or even committers\n+  to the project; it can therefore be a good strategy to prioritize\n+  interactions with such contributors.\n+\n+* Some contributors may respond \"I will fix it later, can we merge anyway?\"\n+  when a problem is pointed.  Unfortunately, whether the fix is really\n+  contributed soon in later PR is difficult to predict or enforce.  If\n+  the contributor has shown to be trustable, it may be acceptable to do\n\nReview comment:\n       ```suggestion\r\n     the contributor has previously demonstrated that they are reliable, it may be acceptable to do\r\n   ```\n\n##########\nFile path: docs/source/developers/reviewing.rst\n##########\n@@ -0,0 +1,226 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=======================\n+Reviewing contributions\n+=======================\n+\n+Principles\n+==========\n+\n+Arrow is a foundational project that will need to evolve over many years\n+or even decades, while serving potentially millions of users.  We believe\n+being meticulous when reviewing brings greater rewards to the project than\n+being lenient and aiming for quick merges.\n+\n+Fixing potential issues after a Pull Request (PR) merge is more costly since\n+it forces the developer to context-switch back to work that was thought\n+to be finished.  Moreover, an late-minute API change may propagate to\n+other parts of the project and require more attention than if done up front.\n+And there are social issues with asking a volunteer to go back to work\n+on something that was accepted as finished.\n+\n+Guidelines\n+==========\n+\n+Meta\n+----\n+\n+**Use your common sense**.  These guidelines are not hard rules.\n+Committers are expected to have sufficient expertise on their work\n+areas to be able to modulate concerns if necessary.\n\nReview comment:\n       \"modulate\" isn't quite right here, but I'm not sure on the precise point intended so not sure what to suggest in its place, sorry\n\n##########\nFile path: docs/source/developers/reviewing.rst\n##########\n@@ -0,0 +1,226 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=======================\n+Reviewing contributions\n+=======================\n+\n+Principles\n+==========\n+\n+Arrow is a foundational project that will need to evolve over many years\n+or even decades, while serving potentially millions of users.  We believe\n+being meticulous when reviewing brings greater rewards to the project than\n+being lenient and aiming for quick merges.\n+\n+Fixing potential issues after a Pull Request (PR) merge is more costly since\n+it forces the developer to context-switch back to work that was thought\n+to be finished.  Moreover, an late-minute API change may propagate to\n+other parts of the project and require more attention than if done up front.\n+And there are social issues with asking a volunteer to go back to work\n+on something that was accepted as finished.\n+\n+Guidelines\n+==========\n+\n+Meta\n+----\n+\n+**Use your common sense**.  These guidelines are not hard rules.\n+Committers are expected to have sufficient expertise on their work\n+areas to be able to modulate concerns if necessary.\n+\n+These guidelines are not listed in a particular order.  They are\n+not intended to be used as a checklist.\n+\n+Finally, **these guidelines are not currently exhaustive**.\n+\n+Public API design\n+-----------------\n+\n+- Public APIs should nudge users towards the most desirable constructs.\n+  In other words, if there is a \"best\" way to do something, it should\n+  ideally also be the most easily discoverable and the most concise to type.\n+  For example, safe APIs should ideally be featured more prominently than\n+  unsafe APIs that may crash or silently produce erronenous results on\n\nReview comment:\n       ```suggestion\r\n     unsafe APIs that may crash or silently produce erroneous results on\r\n   ```\n\n##########\nFile path: docs/source/developers/reviewing.rst\n##########\n@@ -0,0 +1,226 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=======================\n+Reviewing contributions\n+=======================\n+\n+Principles\n+==========\n+\n+Arrow is a foundational project that will need to evolve over many years\n+or even decades, while serving potentially millions of users.  We believe\n+being meticulous when reviewing brings greater rewards to the project than\n+being lenient and aiming for quick merges.\n+\n+Fixing potential issues after a Pull Request (PR) merge is more costly since\n+it forces the developer to context-switch back to work that was thought\n+to be finished.  Moreover, an late-minute API change may propagate to\n+other parts of the project and require more attention than if done up front.\n+And there are social issues with asking a volunteer to go back to work\n+on something that was accepted as finished.\n+\n+Guidelines\n+==========\n+\n+Meta\n+----\n+\n+**Use your common sense**.  These guidelines are not hard rules.\n+Committers are expected to have sufficient expertise on their work\n+areas to be able to modulate concerns if necessary.\n+\n+These guidelines are not listed in a particular order.  They are\n+not intended to be used as a checklist.\n+\n+Finally, **these guidelines are not currently exhaustive**.\n+\n+Public API design\n+-----------------\n+\n+- Public APIs should nudge users towards the most desirable constructs.\n+  In other words, if there is a \"best\" way to do something, it should\n+  ideally also be the most easily discoverable and the most concise to type.\n+  For example, safe APIs should ideally be featured more prominently than\n+  unsafe APIs that may crash or silently produce erronenous results on\n+  invalid input.\n+\n+- Public APIs should ideally tend to produce readable code.  One example\n+  is when multiple options are expected to be added over time: it is better\n+  to try to organize options logically rather than juxtapose them all in\n+  a function's signature (see for example the CSV reading APIs in C++ and Python).\n+\n+- Naming is important.  Try to ask yourself if code calling the new API\n+  would be understandable without having to read the API docs.\n+  Vague naming should be avoided; inaccurate naming is even worse as it\n+  can mislead the reader and lead to buggy user code.\n+\n+- Be mindful of terminology.  Every project has (explicitly or tacitly) set\n+  conventions about how to name important concepts; steering away from those\n+  conventions increases the cognitive workload both for contributors and\n+  users of the project.  Conversely, reusing a well-known term for a different\n+  purpose than usual can also increase the cognitive workload and make\n+  developers' life generally more difficult.\n+\n+- If it is unsure whether an API is the right one for the task at hand,\n+  it is advisable to mark it experimental, such that users know that it\n+  may be changed over time, while contributors are less wary of bringing\n+  code-breaking improvements.  However, experimental APIs should not be\n+  used as an excuse for eschewing basic API design principles.\n+\n+Robustness\n+----------\n+\n+- Arrow is a set of open source libraries and will be used in a very wide\n+  array of contexts (including fiddling with deliberately artificial data\n+  at a Jupyter interpreter prompt).  If you are writing a public API, make\n+  sure that it won't crash or produce undefined behaviour on unusual (but\n+  valid) inputs.\n+\n+- When a non-trivial algorithm is implemented, defense-in-depth checks can\n+  be useful to catch potential problems (such as debug-only assertions, if\n+  the language allows them).\n+\n+- APIs ingesting potentially untrusted data, such as on-disk file formats,\n+  should try to avoid crashing or produce silent bugs when invalid or\n+  corrupt data is fed to them.  This can require a lot of care that is\n+  out of the scope of regular code reviews (such as setting up fuzz testing\n+  - XXX link to current fuzz setup), but basic checks can still be suggested\n+  at the code review stage.\n+\n+- When calling foreign APIs, especially system functions or APIs dealing with\n+  input / output, do check for errors and propagate them (if the language\n+  does not propagate errors automatically, such as C++).\n+\n+Performance\n+-----------\n+\n+- Think about performance, but do not obsess over it.  Algorithmic complexity\n+  is important if input size may be \"large\" (the meaning of large depends\n+  on the context: use your own expertise to decide!).  Micro-optimizations\n+  improving performance by 20% or more on performance-sensitive functionality\n+  may be useful as well; lesser micro-optimizations may not be worth the\n+  time spent on them, especially if they lead to more complicated code.\n+\n+- If performance is important, measure it.  Do not satisfy yourself with\n+  guesses and intuitions (which may be founded on incorrect assumptions\n+  about the compiler or the hardware).\n+\n+- Try to avoid trying to trick the compiler/interpreter/runtime by writing\n+  the code in a certain way, unless it's really important.  These tricks\n+  are generally dependent on platform details that may become obsolete,\n+  they are often brittle, and they can make code harder to maintain\n+  (a common question that can block contributors is \"what should I do\n+  about this weird hack that my changes need to remove\"?).\n+\n+- Avoiding worst-case degenerescence (such as memory blowups when a size\n+  estimate is too imprecise) may be more critical than trying to improve\n+  the common case by a small amount.\n+\n+Documentation\n+-------------\n+\n+These guidelines should ideally apply to both prose documentation and\n+in-code docstrings.\n+\n+- Look for ambiguous / sub-informative wording.  For example, \"it is an error\n\nReview comment:\n       ```suggestion\r\n   - Look for ambiguous / uninformative wording.  For example, \"it is an error\r\n   ```\n\n##########\nFile path: docs/source/developers/reviewing.rst\n##########\n@@ -0,0 +1,226 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=======================\n+Reviewing contributions\n+=======================\n+\n+Principles\n+==========\n+\n+Arrow is a foundational project that will need to evolve over many years\n+or even decades, while serving potentially millions of users.  We believe\n+being meticulous when reviewing brings greater rewards to the project than\n+being lenient and aiming for quick merges.\n+\n+Fixing potential issues after a Pull Request (PR) merge is more costly since\n+it forces the developer to context-switch back to work that was thought\n+to be finished.  Moreover, an late-minute API change may propagate to\n+other parts of the project and require more attention than if done up front.\n+And there are social issues with asking a volunteer to go back to work\n\nReview comment:\n       I might rephrase this a bit from \"social issues\" - perhaps something like \"it can be demotivating\" or some other slightly more specific description of why it's not great\n\n##########\nFile path: docs/source/developers/reviewing.rst\n##########\n@@ -0,0 +1,226 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=======================\n+Reviewing contributions\n+=======================\n+\n+Principles\n+==========\n+\n+Arrow is a foundational project that will need to evolve over many years\n+or even decades, while serving potentially millions of users.  We believe\n+being meticulous when reviewing brings greater rewards to the project than\n+being lenient and aiming for quick merges.\n+\n+Fixing potential issues after a Pull Request (PR) merge is more costly since\n+it forces the developer to context-switch back to work that was thought\n+to be finished.  Moreover, an late-minute API change may propagate to\n+other parts of the project and require more attention than if done up front.\n+And there are social issues with asking a volunteer to go back to work\n+on something that was accepted as finished.\n+\n+Guidelines\n+==========\n+\n+Meta\n+----\n+\n+**Use your common sense**.  These guidelines are not hard rules.\n+Committers are expected to have sufficient expertise on their work\n+areas to be able to modulate concerns if necessary.\n+\n+These guidelines are not listed in a particular order.  They are\n+not intended to be used as a checklist.\n+\n+Finally, **these guidelines are not currently exhaustive**.\n+\n+Public API design\n+-----------------\n+\n+- Public APIs should nudge users towards the most desirable constructs.\n+  In other words, if there is a \"best\" way to do something, it should\n+  ideally also be the most easily discoverable and the most concise to type.\n+  For example, safe APIs should ideally be featured more prominently than\n+  unsafe APIs that may crash or silently produce erronenous results on\n+  invalid input.\n+\n+- Public APIs should ideally tend to produce readable code.  One example\n+  is when multiple options are expected to be added over time: it is better\n+  to try to organize options logically rather than juxtapose them all in\n+  a function's signature (see for example the CSV reading APIs in C++ and Python).\n+\n+- Naming is important.  Try to ask yourself if code calling the new API\n+  would be understandable without having to read the API docs.\n+  Vague naming should be avoided; inaccurate naming is even worse as it\n+  can mislead the reader and lead to buggy user code.\n+\n+- Be mindful of terminology.  Every project has (explicitly or tacitly) set\n+  conventions about how to name important concepts; steering away from those\n+  conventions increases the cognitive workload both for contributors and\n+  users of the project.  Conversely, reusing a well-known term for a different\n+  purpose than usual can also increase the cognitive workload and make\n+  developers' life generally more difficult.\n+\n+- If it is unsure whether an API is the right one for the task at hand,\n+  it is advisable to mark it experimental, such that users know that it\n+  may be changed over time, while contributors are less wary of bringing\n+  code-breaking improvements.  However, experimental APIs should not be\n+  used as an excuse for eschewing basic API design principles.\n+\n+Robustness\n+----------\n+\n+- Arrow is a set of open source libraries and will be used in a very wide\n+  array of contexts (including fiddling with deliberately artificial data\n+  at a Jupyter interpreter prompt).  If you are writing a public API, make\n+  sure that it won't crash or produce undefined behaviour on unusual (but\n+  valid) inputs.\n+\n+- When a non-trivial algorithm is implemented, defense-in-depth checks can\n+  be useful to catch potential problems (such as debug-only assertions, if\n+  the language allows them).\n+\n+- APIs ingesting potentially untrusted data, such as on-disk file formats,\n+  should try to avoid crashing or produce silent bugs when invalid or\n+  corrupt data is fed to them.  This can require a lot of care that is\n+  out of the scope of regular code reviews (such as setting up fuzz testing\n+  - XXX link to current fuzz setup), but basic checks can still be suggested\n+  at the code review stage.\n+\n+- When calling foreign APIs, especially system functions or APIs dealing with\n+  input / output, do check for errors and propagate them (if the language\n+  does not propagate errors automatically, such as C++).\n+\n+Performance\n+-----------\n+\n+- Think about performance, but do not obsess over it.  Algorithmic complexity\n+  is important if input size may be \"large\" (the meaning of large depends\n+  on the context: use your own expertise to decide!).  Micro-optimizations\n+  improving performance by 20% or more on performance-sensitive functionality\n+  may be useful as well; lesser micro-optimizations may not be worth the\n+  time spent on them, especially if they lead to more complicated code.\n+\n+- If performance is important, measure it.  Do not satisfy yourself with\n+  guesses and intuitions (which may be founded on incorrect assumptions\n+  about the compiler or the hardware).\n+\n+- Try to avoid trying to trick the compiler/interpreter/runtime by writing\n+  the code in a certain way, unless it's really important.  These tricks\n+  are generally dependent on platform details that may become obsolete,\n+  they are often brittle, and they can make code harder to maintain\n+  (a common question that can block contributors is \"what should I do\n+  about this weird hack that my changes need to remove\"?).\n+\n+- Avoiding worst-case degenerescence (such as memory blowups when a size\n+  estimate is too imprecise) may be more critical than trying to improve\n+  the common case by a small amount.\n+\n+Documentation\n+-------------\n+\n+These guidelines should ideally apply to both prose documentation and\n+in-code docstrings.\n+\n+- Look for ambiguous / sub-informative wording.  For example, \"it is an error\n+  if ...\" is less informative than either \"An error is raised if ... \" or\n+  \"Behaviour is undefined if ...\" (the first phrasing doesn't tell the\n+  reader what actually *happens* on such an error).\n+\n+- Be mindful about spelling, grammar, expression, concision.  This may seem\n+  like an obvious concern, but not all people are not accustomed to care about\n+  this.\n+\n+- Cross-linking increases the global value of documentation.  Sphinx especially\n+  has great cross-linking capabilities (including topic references, glossary\n+  terms, API references), be sure to make use of them!\n+\n+Testing\n+-------\n+\n+- When adding an API, all nominal cases should have test cases.  Does a function\n+  allow null values? Then null values should be tested (alongside non-null\n+  values, of course). Does a function allow different input types? etc.\n+\n+- If some aspect of a functionality is delicate (either by definition or\n+  as an implementation detail), it should be tested.\n+\n+- Corner cases should be exercised, especially in low-level implementation\n+  languages such as C++.  Examples: empty arrays, zero-chunk arrays, arrays\n+  with only nulls, etc.\n+\n+- Stress tests can be useful, for example to uncover synchronizations bugs\n+  if non-trivial parallelization is being added, or to validate a computational\n+  argument against a slow and straightforward reference implementation.\n+\n+- A mitigating concern, however, is the overall cost of running the test\n+  suite.  Continuous Integration (CI) runtimes can be painfully long and\n+  we should be wary of increasing them too much.  Sometimes it is\n+  worthwhile to fine-tune testing parameters to balance the usefulness\n+  of tests against the cost of running them (especially where stress tests\n+  are involved, since they tend to imply execution over large datasets).\n+\n+\n+Social aspects\n+==============\n+\n+* Reviewing is a communication between the contributor and the reviewer.\n+  Avoid letting questions or comments unanswered for too long (\"too long\"\n+  is of course very subjective, but two weeks can be a reasonable\n+  heuristic).  If you cannot allocate time soon, do say it explicitly.\n+  If you don't have the answer to a question, do say it explicitly.\n+  Saying \"I don't have time immediately but I will come back later,\n+  feel free to ping if I seem to have forgotten\" or \"Sorry, I am out of depth\n+  here\" is always better than saying nothing and letting the interlocutor\n+  wondering.\n+\n+* If you know someone who may help on a blocking issue and past experience\n+  suggests they can be available for that, feel free to add them to the\n+  discussion (for example by cc'ing their Github handle).\n+\n+* If the contributor has stopped giving feedback or updating their PR,\n+  perhaps they're not interested anymore, but perhaps also they're stuck\n+  on some issue and feel unable to push their contribution any further.\n+  Don't hesitate to ask (\"I see this PR hasn't seen any updates recently,\n+  are you stuck on something? Do you need any help?\").\n+\n+* If the contribution is genuinely desirable and the contributor is not making\n+  any progress, it is also possible to take it up.  Out of politeness,\n+  it is however better to ask the contributor first.\n+\n+* Some contributors are looking for a quick fix to a specific problem and\n+  don't want to spend too much time on it.  Others on the contrary are eager\n+  to learn and improve their contribution to make it conform to the\n+  project's standards.  The latter kind of contributors are especially\n+  valuable as they may become long-term contributors or even committers\n+  to the project; it can therefore be a good strategy to prioritize\n+  interactions with such contributors.\n+\n+* Some contributors may respond \"I will fix it later, can we merge anyway?\"\n+  when a problem is pointed.  Unfortunately, whether the fix is really\n+  contributed soon in later PR is difficult to predict or enforce.  If\n\nReview comment:\n       ```suggestion\r\n     contributed soon in a later PR, is difficult to predict or enforce.  If\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-22T18:18:46.637+0000",
                    "updated": "2021-11-22T18:18:46.637+0000",
                    "started": "2021-11-22T18:18:46.636+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "684890",
                    "issueId": "13393504"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13393504/worklog/684909",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #11757:\nURL: https://github.com/apache/arrow/pull/11757#issuecomment-975805761\n\n\n   > Would suggest to use precise descriptions but keep English language requirements as simple as possible.\r\n   \r\n   What do you mean by that? Is the proposed document too difficult to read?\r\n   (FTR, English is not my native language)\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-22T18:30:27.931+0000",
                    "updated": "2021-11-22T18:30:27.931+0000",
                    "started": "2021-11-22T18:30:27.931+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "684909",
                    "issueId": "13393504"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13393504/worklog/684940",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #11757:\nURL: https://github.com/apache/arrow/pull/11757#discussion_r754590303\n\n\n\n##########\nFile path: docs/source/developers/reviewing.rst\n##########\n@@ -0,0 +1,226 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=======================\n+Reviewing contributions\n+=======================\n+\n+Principles\n+==========\n+\n+Arrow is a foundational project that will need to evolve over many years\n+or even decades, while serving potentially millions of users.  We believe\n+being meticulous when reviewing brings greater rewards to the project than\n+being lenient and aiming for quick merges.\n+\n+Fixing potential issues after a Pull Request (PR) merge is more costly since\n+it forces the developer to context-switch back to work that was thought\n+to be finished.  Moreover, an late-minute API change may propagate to\n+other parts of the project and require more attention than if done up front.\n+And there are social issues with asking a volunteer to go back to work\n+on something that was accepted as finished.\n+\n+Guidelines\n+==========\n+\n+Meta\n+----\n+\n+**Use your common sense**.  These guidelines are not hard rules.\n+Committers are expected to have sufficient expertise on their work\n+areas to be able to modulate concerns if necessary.\n+\n+These guidelines are not listed in a particular order.  They are\n+not intended to be used as a checklist.\n+\n+Finally, **these guidelines are not currently exhaustive**.\n+\n+Public API design\n+-----------------\n+\n+- Public APIs should nudge users towards the most desirable constructs.\n+  In other words, if there is a \"best\" way to do something, it should\n+  ideally also be the most easily discoverable and the most concise to type.\n+  For example, safe APIs should ideally be featured more prominently than\n+  unsafe APIs that may crash or silently produce erronenous results on\n+  invalid input.\n+\n+- Public APIs should ideally tend to produce readable code.  One example\n+  is when multiple options are expected to be added over time: it is better\n+  to try to organize options logically rather than juxtapose them all in\n+  a function's signature (see for example the CSV reading APIs in C++ and Python).\n+\n+- Naming is important.  Try to ask yourself if code calling the new API\n+  would be understandable without having to read the API docs.\n+  Vague naming should be avoided; inaccurate naming is even worse as it\n+  can mislead the reader and lead to buggy user code.\n+\n+- Be mindful of terminology.  Every project has (explicitly or tacitly) set\n+  conventions about how to name important concepts; steering away from those\n+  conventions increases the cognitive workload both for contributors and\n+  users of the project.  Conversely, reusing a well-known term for a different\n+  purpose than usual can also increase the cognitive workload and make\n+  developers' life generally more difficult.\n+\n+- If it is unsure whether an API is the right one for the task at hand,\n+  it is advisable to mark it experimental, such that users know that it\n+  may be changed over time, while contributors are less wary of bringing\n+  code-breaking improvements.  However, experimental APIs should not be\n+  used as an excuse for eschewing basic API design principles.\n+\n+Robustness\n+----------\n+\n+- Arrow is a set of open source libraries and will be used in a very wide\n+  array of contexts (including fiddling with deliberately artificial data\n+  at a Jupyter interpreter prompt).  If you are writing a public API, make\n+  sure that it won't crash or produce undefined behaviour on unusual (but\n+  valid) inputs.\n+\n+- When a non-trivial algorithm is implemented, defense-in-depth checks can\n+  be useful to catch potential problems (such as debug-only assertions, if\n+  the language allows them).\n+\n+- APIs ingesting potentially untrusted data, such as on-disk file formats,\n+  should try to avoid crashing or produce silent bugs when invalid or\n+  corrupt data is fed to them.  This can require a lot of care that is\n+  out of the scope of regular code reviews (such as setting up fuzz testing\n+  - XXX link to current fuzz setup), but basic checks can still be suggested\n+  at the code review stage.\n+\n+- When calling foreign APIs, especially system functions or APIs dealing with\n+  input / output, do check for errors and propagate them (if the language\n+  does not propagate errors automatically, such as C++).\n+\n+Performance\n+-----------\n+\n+- Think about performance, but do not obsess over it.  Algorithmic complexity\n+  is important if input size may be \"large\" (the meaning of large depends\n+  on the context: use your own expertise to decide!).  Micro-optimizations\n+  improving performance by 20% or more on performance-sensitive functionality\n+  may be useful as well; lesser micro-optimizations may not be worth the\n+  time spent on them, especially if they lead to more complicated code.\n+\n+- If performance is important, measure it.  Do not satisfy yourself with\n+  guesses and intuitions (which may be founded on incorrect assumptions\n+  about the compiler or the hardware).\n+\n+- Try to avoid trying to trick the compiler/interpreter/runtime by writing\n+  the code in a certain way, unless it's really important.  These tricks\n+  are generally dependent on platform details that may become obsolete,\n+  they are often brittle, and they can make code harder to maintain\n+  (a common question that can block contributors is \"what should I do\n+  about this weird hack that my changes need to remove\"?).\n+\n+- Avoiding worst-case degenerescence (such as memory blowups when a size\n+  estimate is too imprecise) may be more critical than trying to improve\n+  the common case by a small amount.\n+\n+Documentation\n+-------------\n+\n+These guidelines should ideally apply to both prose documentation and\n+in-code docstrings.\n+\n+- Look for ambiguous / sub-informative wording.  For example, \"it is an error\n+  if ...\" is less informative than either \"An error is raised if ... \" or\n+  \"Behaviour is undefined if ...\" (the first phrasing doesn't tell the\n+  reader what actually *happens* on such an error).\n+\n+- Be mindful about spelling, grammar, expression, concision.  This may seem\n+  like an obvious concern, but not all people are not accustomed to care about\n+  this.\n+\n+- Cross-linking increases the global value of documentation.  Sphinx especially\n+  has great cross-linking capabilities (including topic references, glossary\n+  terms, API references), be sure to make use of them!\n+\n+Testing\n+-------\n+\n+- When adding an API, all nominal cases should have test cases.  Does a function\n+  allow null values? Then null values should be tested (alongside non-null\n+  values, of course). Does a function allow different input types? etc.\n+\n+- If some aspect of a functionality is delicate (either by definition or\n+  as an implementation detail), it should be tested.\n+\n+- Corner cases should be exercised, especially in low-level implementation\n+  languages such as C++.  Examples: empty arrays, zero-chunk arrays, arrays\n+  with only nulls, etc.\n+\n+- Stress tests can be useful, for example to uncover synchronizations bugs\n+  if non-trivial parallelization is being added, or to validate a computational\n+  argument against a slow and straightforward reference implementation.\n+\n+- A mitigating concern, however, is the overall cost of running the test\n+  suite.  Continuous Integration (CI) runtimes can be painfully long and\n+  we should be wary of increasing them too much.  Sometimes it is\n+  worthwhile to fine-tune testing parameters to balance the usefulness\n+  of tests against the cost of running them (especially where stress tests\n+  are involved, since they tend to imply execution over large datasets).\n+\n+\n+Social aspects\n+==============\n+\n+* Reviewing is a communication between the contributor and the reviewer.\n+  Avoid letting questions or comments unanswered for too long (\"too long\"\n+  is of course very subjective, but two weeks can be a reasonable\n+  heuristic).  If you cannot allocate time soon, do say it explicitly.\n+  If you don't have the answer to a question, do say it explicitly.\n+  Saying \"I don't have time immediately but I will come back later,\n+  feel free to ping if I seem to have forgotten\" or \"Sorry, I am out of depth\n+  here\" is always better than saying nothing and letting the interlocutor\n+  wondering.\n+\n+* If you know someone who may help on a blocking issue and past experience\n+  suggests they can be available for that, feel free to add them to the\n+  discussion (for example by cc'ing their Github handle).\n+\n+* If the contributor has stopped giving feedback or updating their PR,\n+  perhaps they're not interested anymore, but perhaps also they're stuck\n+  on some issue and feel unable to push their contribution any further.\n+  Don't hesitate to ask (\"I see this PR hasn't seen any updates recently,\n+  are you stuck on something? Do you need any help?\").\n+\n+* If the contribution is genuinely desirable and the contributor is not making\n+  any progress, it is also possible to take it up.  Out of politeness,\n+  it is however better to ask the contributor first.\n+\n+* Some contributors are looking for a quick fix to a specific problem and\n+  don't want to spend too much time on it.  Others on the contrary are eager\n+  to learn and improve their contribution to make it conform to the\n+  project's standards.  The latter kind of contributors are especially\n+  valuable as they may become long-term contributors or even committers\n+  to the project; it can therefore be a good strategy to prioritize\n+  interactions with such contributors.\n\nReview comment:\n       I get the point here, but I worry this sounds a little exclusive; perhaps we can say instead that we should help people who are interested in getting further involved with the community to do so?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-22T19:54:19.272+0000",
                    "updated": "2021-11-22T19:54:19.272+0000",
                    "started": "2021-11-22T19:54:19.272+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "684940",
                    "issueId": "13393504"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13393504/worklog/684989",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jonkeane commented on a change in pull request #11757:\nURL: https://github.com/apache/arrow/pull/11757#discussion_r754688847\n\n\n\n##########\nFile path: docs/source/developers/reviewing.rst\n##########\n@@ -0,0 +1,226 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=======================\n+Reviewing contributions\n+=======================\n+\n+Principles\n+==========\n+\n+Arrow is a foundational project that will need to evolve over many years\n+or even decades, while serving potentially millions of users.  We believe\n+being meticulous when reviewing brings greater rewards to the project than\n+being lenient and aiming for quick merges.\n+\n+Fixing potential issues after a Pull Request (PR) merge is more costly since\n+it forces the developer to context-switch back to work that was thought\n+to be finished.  Moreover, an late-minute API change may propagate to\n\nReview comment:\n       \"last minute\" is more idiomatic for me too\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-22T22:42:08.158+0000",
                    "updated": "2021-11-22T22:42:08.158+0000",
                    "started": "2021-11-22T22:42:08.158+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "684989",
                    "issueId": "13393504"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13393504/worklog/684994",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jonkeane commented on a change in pull request #11757:\nURL: https://github.com/apache/arrow/pull/11757#discussion_r754692063\n\n\n\n##########\nFile path: docs/source/developers/reviewing.rst\n##########\n@@ -0,0 +1,226 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=======================\n+Reviewing contributions\n+=======================\n+\n+Principles\n+==========\n+\n+Arrow is a foundational project that will need to evolve over many years\n+or even decades, while serving potentially millions of users.  We believe\n+being meticulous when reviewing brings greater rewards to the project than\n+being lenient and aiming for quick merges.\n\nReview comment:\n       I really like this opening \u2014 are there other positive benefits we could list here? Something like \"Code review like this leads to better quality code, more people who are engaged with and understand the code being changed, and is an opportunity to learn and grow as engineers\" A lot of these are implicit here, but it would be good to be explicit too.\n\n##########\nFile path: docs/source/developers/reviewing.rst\n##########\n@@ -0,0 +1,226 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=======================\n+Reviewing contributions\n+=======================\n+\n+Principles\n+==========\n+\n+Arrow is a foundational project that will need to evolve over many years\n+or even decades, while serving potentially millions of users.  We believe\n+being meticulous when reviewing brings greater rewards to the project than\n+being lenient and aiming for quick merges.\n+\n+Fixing potential issues after a Pull Request (PR) merge is more costly since\n+it forces the developer to context-switch back to work that was thought\n+to be finished.  Moreover, an late-minute API change may propagate to\n+other parts of the project and require more attention than if done up front.\n+And there are social issues with asking a volunteer to go back to work\n+on something that was accepted as finished.\n+\n+Guidelines\n+==========\n+\n+Meta\n+----\n+\n+**Use your common sense**.  These guidelines are not hard rules.\n+Committers are expected to have sufficient expertise on their work\n+areas to be able to modulate concerns if necessary.\n+\n+These guidelines are not listed in a particular order.  They are\n+not intended to be used as a checklist.\n+\n+Finally, **these guidelines are not currently exhaustive**.\n+\n+Public API design\n+-----------------\n+\n+- Public APIs should nudge users towards the most desirable constructs.\n+  In other words, if there is a \"best\" way to do something, it should\n+  ideally also be the most easily discoverable and the most concise to type.\n+  For example, safe APIs should ideally be featured more prominently than\n+  unsafe APIs that may crash or silently produce erronenous results on\n+  invalid input.\n+\n+- Public APIs should ideally tend to produce readable code.  One example\n+  is when multiple options are expected to be added over time: it is better\n+  to try to organize options logically rather than juxtapose them all in\n+  a function's signature (see for example the CSV reading APIs in C++ and Python).\n+\n+- Naming is important.  Try to ask yourself if code calling the new API\n+  would be understandable without having to read the API docs.\n+  Vague naming should be avoided; inaccurate naming is even worse as it\n+  can mislead the reader and lead to buggy user code.\n+\n+- Be mindful of terminology.  Every project has (explicitly or tacitly) set\n+  conventions about how to name important concepts; steering away from those\n+  conventions increases the cognitive workload both for contributors and\n+  users of the project.  Conversely, reusing a well-known term for a different\n+  purpose than usual can also increase the cognitive workload and make\n+  developers' life generally more difficult.\n+\n+- If it is unsure whether an API is the right one for the task at hand,\n+  it is advisable to mark it experimental, such that users know that it\n+  may be changed over time, while contributors are less wary of bringing\n+  code-breaking improvements.  However, experimental APIs should not be\n+  used as an excuse for eschewing basic API design principles.\n+\n+Robustness\n+----------\n+\n+- Arrow is a set of open source libraries and will be used in a very wide\n+  array of contexts (including fiddling with deliberately artificial data\n+  at a Jupyter interpreter prompt).  If you are writing a public API, make\n+  sure that it won't crash or produce undefined behaviour on unusual (but\n+  valid) inputs.\n+\n+- When a non-trivial algorithm is implemented, defense-in-depth checks can\n+  be useful to catch potential problems (such as debug-only assertions, if\n+  the language allows them).\n+\n+- APIs ingesting potentially untrusted data, such as on-disk file formats,\n+  should try to avoid crashing or produce silent bugs when invalid or\n+  corrupt data is fed to them.  This can require a lot of care that is\n+  out of the scope of regular code reviews (such as setting up fuzz testing\n+  - XXX link to current fuzz setup), but basic checks can still be suggested\n+  at the code review stage.\n+\n+- When calling foreign APIs, especially system functions or APIs dealing with\n+  input / output, do check for errors and propagate them (if the language\n+  does not propagate errors automatically, such as C++).\n+\n+Performance\n+-----------\n+\n+- Think about performance, but do not obsess over it.  Algorithmic complexity\n+  is important if input size may be \"large\" (the meaning of large depends\n+  on the context: use your own expertise to decide!).  Micro-optimizations\n+  improving performance by 20% or more on performance-sensitive functionality\n+  may be useful as well; lesser micro-optimizations may not be worth the\n+  time spent on them, especially if they lead to more complicated code.\n+\n+- If performance is important, measure it.  Do not satisfy yourself with\n+  guesses and intuitions (which may be founded on incorrect assumptions\n+  about the compiler or the hardware).\n+\n+- Try to avoid trying to trick the compiler/interpreter/runtime by writing\n+  the code in a certain way, unless it's really important.  These tricks\n+  are generally dependent on platform details that may become obsolete,\n+  they are often brittle, and they can make code harder to maintain\n+  (a common question that can block contributors is \"what should I do\n+  about this weird hack that my changes need to remove\"?).\n+\n+- Avoiding worst-case degenerescence (such as memory blowups when a size\n+  estimate is too imprecise) may be more critical than trying to improve\n+  the common case by a small amount.\n+\n+Documentation\n+-------------\n+\n+These guidelines should ideally apply to both prose documentation and\n+in-code docstrings.\n+\n+- Look for ambiguous / sub-informative wording.  For example, \"it is an error\n+  if ...\" is less informative than either \"An error is raised if ... \" or\n+  \"Behaviour is undefined if ...\" (the first phrasing doesn't tell the\n+  reader what actually *happens* on such an error).\n+\n+- Be mindful about spelling, grammar, expression, concision.  This may seem\n+  like an obvious concern, but not all people are not accustomed to care about\n+  this.\n+\n+- Cross-linking increases the global value of documentation.  Sphinx especially\n+  has great cross-linking capabilities (including topic references, glossary\n+  terms, API references), be sure to make use of them!\n+\n+Testing\n+-------\n+\n+- When adding an API, all nominal cases should have test cases.  Does a function\n+  allow null values? Then null values should be tested (alongside non-null\n+  values, of course). Does a function allow different input types? etc.\n+\n+- If some aspect of a functionality is delicate (either by definition or\n+  as an implementation detail), it should be tested.\n+\n+- Corner cases should be exercised, especially in low-level implementation\n+  languages such as C++.  Examples: empty arrays, zero-chunk arrays, arrays\n+  with only nulls, etc.\n+\n+- Stress tests can be useful, for example to uncover synchronizations bugs\n+  if non-trivial parallelization is being added, or to validate a computational\n+  argument against a slow and straightforward reference implementation.\n+\n+- A mitigating concern, however, is the overall cost of running the test\n+  suite.  Continuous Integration (CI) runtimes can be painfully long and\n+  we should be wary of increasing them too much.  Sometimes it is\n+  worthwhile to fine-tune testing parameters to balance the usefulness\n+  of tests against the cost of running them (especially where stress tests\n+  are involved, since they tend to imply execution over large datasets).\n+\n+\n+Social aspects\n+==============\n+\n+* Reviewing is a communication between the contributor and the reviewer.\n+  Avoid letting questions or comments unanswered for too long (\"too long\"\n+  is of course very subjective, but two weeks can be a reasonable\n+  heuristic).  If you cannot allocate time soon, do say it explicitly.\n+  If you don't have the answer to a question, do say it explicitly.\n+  Saying \"I don't have time immediately but I will come back later,\n+  feel free to ping if I seem to have forgotten\" or \"Sorry, I am out of depth\n+  here\" is always better than saying nothing and letting the interlocutor\n+  wondering.\n+\n+* If you know someone who may help on a blocking issue and past experience\n+  suggests they can be available for that, feel free to add them to the\n\nReview comment:\n       \"available\" here seems orthogonal to expertise shown through past experience. Should we phrase this about both expertise and that the ping is a way to assess availability? \n\n##########\nFile path: docs/source/developers/reviewing.rst\n##########\n@@ -0,0 +1,226 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=======================\n+Reviewing contributions\n+=======================\n+\n+Principles\n+==========\n+\n+Arrow is a foundational project that will need to evolve over many years\n+or even decades, while serving potentially millions of users.  We believe\n+being meticulous when reviewing brings greater rewards to the project than\n+being lenient and aiming for quick merges.\n+\n+Fixing potential issues after a Pull Request (PR) merge is more costly since\n+it forces the developer to context-switch back to work that was thought\n+to be finished.  Moreover, an late-minute API change may propagate to\n+other parts of the project and require more attention than if done up front.\n+And there are social issues with asking a volunteer to go back to work\n+on something that was accepted as finished.\n+\n+Guidelines\n+==========\n+\n+Meta\n+----\n+\n+**Use your common sense**.  These guidelines are not hard rules.\n+Committers are expected to have sufficient expertise on their work\n+areas to be able to modulate concerns if necessary.\n+\n+These guidelines are not listed in a particular order.  They are\n+not intended to be used as a checklist.\n+\n+Finally, **these guidelines are not currently exhaustive**.\n+\n+Public API design\n+-----------------\n+\n+- Public APIs should nudge users towards the most desirable constructs.\n+  In other words, if there is a \"best\" way to do something, it should\n+  ideally also be the most easily discoverable and the most concise to type.\n+  For example, safe APIs should ideally be featured more prominently than\n+  unsafe APIs that may crash or silently produce erronenous results on\n+  invalid input.\n+\n+- Public APIs should ideally tend to produce readable code.  One example\n+  is when multiple options are expected to be added over time: it is better\n+  to try to organize options logically rather than juxtapose them all in\n+  a function's signature (see for example the CSV reading APIs in C++ and Python).\n+\n+- Naming is important.  Try to ask yourself if code calling the new API\n+  would be understandable without having to read the API docs.\n+  Vague naming should be avoided; inaccurate naming is even worse as it\n+  can mislead the reader and lead to buggy user code.\n+\n+- Be mindful of terminology.  Every project has (explicitly or tacitly) set\n+  conventions about how to name important concepts; steering away from those\n+  conventions increases the cognitive workload both for contributors and\n+  users of the project.  Conversely, reusing a well-known term for a different\n+  purpose than usual can also increase the cognitive workload and make\n+  developers' life generally more difficult.\n+\n+- If it is unsure whether an API is the right one for the task at hand,\n+  it is advisable to mark it experimental, such that users know that it\n+  may be changed over time, while contributors are less wary of bringing\n+  code-breaking improvements.  However, experimental APIs should not be\n+  used as an excuse for eschewing basic API design principles.\n+\n+Robustness\n+----------\n+\n+- Arrow is a set of open source libraries and will be used in a very wide\n+  array of contexts (including fiddling with deliberately artificial data\n+  at a Jupyter interpreter prompt).  If you are writing a public API, make\n+  sure that it won't crash or produce undefined behaviour on unusual (but\n+  valid) inputs.\n+\n+- When a non-trivial algorithm is implemented, defense-in-depth checks can\n+  be useful to catch potential problems (such as debug-only assertions, if\n+  the language allows them).\n+\n+- APIs ingesting potentially untrusted data, such as on-disk file formats,\n+  should try to avoid crashing or produce silent bugs when invalid or\n+  corrupt data is fed to them.  This can require a lot of care that is\n+  out of the scope of regular code reviews (such as setting up fuzz testing\n+  - XXX link to current fuzz setup), but basic checks can still be suggested\n+  at the code review stage.\n+\n+- When calling foreign APIs, especially system functions or APIs dealing with\n+  input / output, do check for errors and propagate them (if the language\n+  does not propagate errors automatically, such as C++).\n+\n+Performance\n+-----------\n+\n+- Think about performance, but do not obsess over it.  Algorithmic complexity\n+  is important if input size may be \"large\" (the meaning of large depends\n+  on the context: use your own expertise to decide!).  Micro-optimizations\n+  improving performance by 20% or more on performance-sensitive functionality\n+  may be useful as well; lesser micro-optimizations may not be worth the\n+  time spent on them, especially if they lead to more complicated code.\n+\n+- If performance is important, measure it.  Do not satisfy yourself with\n+  guesses and intuitions (which may be founded on incorrect assumptions\n+  about the compiler or the hardware).\n+\n+- Try to avoid trying to trick the compiler/interpreter/runtime by writing\n+  the code in a certain way, unless it's really important.  These tricks\n+  are generally dependent on platform details that may become obsolete,\n+  they are often brittle, and they can make code harder to maintain\n+  (a common question that can block contributors is \"what should I do\n+  about this weird hack that my changes need to remove\"?).\n+\n+- Avoiding worst-case degenerescence (such as memory blowups when a size\n+  estimate is too imprecise) may be more critical than trying to improve\n+  the common case by a small amount.\n+\n+Documentation\n+-------------\n+\n+These guidelines should ideally apply to both prose documentation and\n+in-code docstrings.\n+\n+- Look for ambiguous / sub-informative wording.  For example, \"it is an error\n+  if ...\" is less informative than either \"An error is raised if ... \" or\n+  \"Behaviour is undefined if ...\" (the first phrasing doesn't tell the\n+  reader what actually *happens* on such an error).\n+\n+- Be mindful about spelling, grammar, expression, concision.  This may seem\n+  like an obvious concern, but not all people are not accustomed to care about\n+  this.\n+\n+- Cross-linking increases the global value of documentation.  Sphinx especially\n+  has great cross-linking capabilities (including topic references, glossary\n+  terms, API references), be sure to make use of them!\n+\n+Testing\n+-------\n+\n+- When adding an API, all nominal cases should have test cases.  Does a function\n+  allow null values? Then null values should be tested (alongside non-null\n+  values, of course). Does a function allow different input types? etc.\n+\n+- If some aspect of a functionality is delicate (either by definition or\n+  as an implementation detail), it should be tested.\n+\n+- Corner cases should be exercised, especially in low-level implementation\n+  languages such as C++.  Examples: empty arrays, zero-chunk arrays, arrays\n+  with only nulls, etc.\n+\n+- Stress tests can be useful, for example to uncover synchronizations bugs\n+  if non-trivial parallelization is being added, or to validate a computational\n+  argument against a slow and straightforward reference implementation.\n+\n+- A mitigating concern, however, is the overall cost of running the test\n+  suite.  Continuous Integration (CI) runtimes can be painfully long and\n+  we should be wary of increasing them too much.  Sometimes it is\n+  worthwhile to fine-tune testing parameters to balance the usefulness\n+  of tests against the cost of running them (especially where stress tests\n+  are involved, since they tend to imply execution over large datasets).\n+\n+\n+Social aspects\n+==============\n+\n+* Reviewing is a communication between the contributor and the reviewer.\n+  Avoid letting questions or comments unanswered for too long (\"too long\"\n+  is of course very subjective, but two weeks can be a reasonable\n+  heuristic).  If you cannot allocate time soon, do say it explicitly.\n+  If you don't have the answer to a question, do say it explicitly.\n+  Saying \"I don't have time immediately but I will come back later,\n+  feel free to ping if I seem to have forgotten\" or \"Sorry, I am out of depth\n\nReview comment:\n       ```suggestion\r\n     feel free to ping if I seem to have forgotten\" or \"Sorry, I am out of my depth\r\n   ```\n\n##########\nFile path: docs/source/developers/reviewing.rst\n##########\n@@ -0,0 +1,226 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=======================\n+Reviewing contributions\n+=======================\n+\n+Principles\n+==========\n+\n+Arrow is a foundational project that will need to evolve over many years\n+or even decades, while serving potentially millions of users.  We believe\n+being meticulous when reviewing brings greater rewards to the project than\n+being lenient and aiming for quick merges.\n+\n+Fixing potential issues after a Pull Request (PR) merge is more costly since\n+it forces the developer to context-switch back to work that was thought\n+to be finished.  Moreover, an late-minute API change may propagate to\n+other parts of the project and require more attention than if done up front.\n+And there are social issues with asking a volunteer to go back to work\n+on something that was accepted as finished.\n+\n+Guidelines\n+==========\n+\n+Meta\n+----\n+\n+**Use your common sense**.  These guidelines are not hard rules.\n+Committers are expected to have sufficient expertise on their work\n+areas to be able to modulate concerns if necessary.\n+\n+These guidelines are not listed in a particular order.  They are\n+not intended to be used as a checklist.\n+\n+Finally, **these guidelines are not currently exhaustive**.\n+\n+Public API design\n+-----------------\n+\n+- Public APIs should nudge users towards the most desirable constructs.\n+  In other words, if there is a \"best\" way to do something, it should\n+  ideally also be the most easily discoverable and the most concise to type.\n+  For example, safe APIs should ideally be featured more prominently than\n+  unsafe APIs that may crash or silently produce erronenous results on\n+  invalid input.\n+\n+- Public APIs should ideally tend to produce readable code.  One example\n+  is when multiple options are expected to be added over time: it is better\n+  to try to organize options logically rather than juxtapose them all in\n+  a function's signature (see for example the CSV reading APIs in C++ and Python).\n+\n+- Naming is important.  Try to ask yourself if code calling the new API\n+  would be understandable without having to read the API docs.\n+  Vague naming should be avoided; inaccurate naming is even worse as it\n+  can mislead the reader and lead to buggy user code.\n+\n+- Be mindful of terminology.  Every project has (explicitly or tacitly) set\n+  conventions about how to name important concepts; steering away from those\n+  conventions increases the cognitive workload both for contributors and\n+  users of the project.  Conversely, reusing a well-known term for a different\n+  purpose than usual can also increase the cognitive workload and make\n+  developers' life generally more difficult.\n+\n+- If it is unsure whether an API is the right one for the task at hand,\n+  it is advisable to mark it experimental, such that users know that it\n+  may be changed over time, while contributors are less wary of bringing\n+  code-breaking improvements.  However, experimental APIs should not be\n+  used as an excuse for eschewing basic API design principles.\n+\n+Robustness\n+----------\n+\n+- Arrow is a set of open source libraries and will be used in a very wide\n+  array of contexts (including fiddling with deliberately artificial data\n+  at a Jupyter interpreter prompt).  If you are writing a public API, make\n+  sure that it won't crash or produce undefined behaviour on unusual (but\n+  valid) inputs.\n+\n+- When a non-trivial algorithm is implemented, defense-in-depth checks can\n+  be useful to catch potential problems (such as debug-only assertions, if\n+  the language allows them).\n+\n+- APIs ingesting potentially untrusted data, such as on-disk file formats,\n+  should try to avoid crashing or produce silent bugs when invalid or\n+  corrupt data is fed to them.  This can require a lot of care that is\n+  out of the scope of regular code reviews (such as setting up fuzz testing\n+  - XXX link to current fuzz setup), but basic checks can still be suggested\n+  at the code review stage.\n+\n+- When calling foreign APIs, especially system functions or APIs dealing with\n+  input / output, do check for errors and propagate them (if the language\n+  does not propagate errors automatically, such as C++).\n+\n+Performance\n+-----------\n+\n+- Think about performance, but do not obsess over it.  Algorithmic complexity\n+  is important if input size may be \"large\" (the meaning of large depends\n+  on the context: use your own expertise to decide!).  Micro-optimizations\n+  improving performance by 20% or more on performance-sensitive functionality\n+  may be useful as well; lesser micro-optimizations may not be worth the\n+  time spent on them, especially if they lead to more complicated code.\n+\n+- If performance is important, measure it.  Do not satisfy yourself with\n+  guesses and intuitions (which may be founded on incorrect assumptions\n+  about the compiler or the hardware).\n+\n+- Try to avoid trying to trick the compiler/interpreter/runtime by writing\n+  the code in a certain way, unless it's really important.  These tricks\n+  are generally dependent on platform details that may become obsolete,\n+  they are often brittle, and they can make code harder to maintain\n+  (a common question that can block contributors is \"what should I do\n+  about this weird hack that my changes need to remove\"?).\n+\n+- Avoiding worst-case degenerescence (such as memory blowups when a size\n+  estimate is too imprecise) may be more critical than trying to improve\n+  the common case by a small amount.\n+\n+Documentation\n+-------------\n+\n+These guidelines should ideally apply to both prose documentation and\n+in-code docstrings.\n+\n+- Look for ambiguous / sub-informative wording.  For example, \"it is an error\n+  if ...\" is less informative than either \"An error is raised if ... \" or\n+  \"Behaviour is undefined if ...\" (the first phrasing doesn't tell the\n+  reader what actually *happens* on such an error).\n+\n+- Be mindful about spelling, grammar, expression, concision.  This may seem\n+  like an obvious concern, but not all people are not accustomed to care about\n+  this.\n+\n+- Cross-linking increases the global value of documentation.  Sphinx especially\n+  has great cross-linking capabilities (including topic references, glossary\n+  terms, API references), be sure to make use of them!\n+\n+Testing\n+-------\n+\n+- When adding an API, all nominal cases should have test cases.  Does a function\n+  allow null values? Then null values should be tested (alongside non-null\n+  values, of course). Does a function allow different input types? etc.\n+\n+- If some aspect of a functionality is delicate (either by definition or\n+  as an implementation detail), it should be tested.\n+\n+- Corner cases should be exercised, especially in low-level implementation\n+  languages such as C++.  Examples: empty arrays, zero-chunk arrays, arrays\n+  with only nulls, etc.\n+\n+- Stress tests can be useful, for example to uncover synchronizations bugs\n+  if non-trivial parallelization is being added, or to validate a computational\n+  argument against a slow and straightforward reference implementation.\n+\n+- A mitigating concern, however, is the overall cost of running the test\n+  suite.  Continuous Integration (CI) runtimes can be painfully long and\n+  we should be wary of increasing them too much.  Sometimes it is\n+  worthwhile to fine-tune testing parameters to balance the usefulness\n+  of tests against the cost of running them (especially where stress tests\n+  are involved, since they tend to imply execution over large datasets).\n+\n+\n+Social aspects\n+==============\n+\n+* Reviewing is a communication between the contributor and the reviewer.\n+  Avoid letting questions or comments unanswered for too long (\"too long\"\n+  is of course very subjective, but two weeks can be a reasonable\n+  heuristic).  If you cannot allocate time soon, do say it explicitly.\n+  If you don't have the answer to a question, do say it explicitly.\n+  Saying \"I don't have time immediately but I will come back later,\n+  feel free to ping if I seem to have forgotten\" or \"Sorry, I am out of depth\n+  here\" is always better than saying nothing and letting the interlocutor\n+  wondering.\n+\n+* If you know someone who may help on a blocking issue and past experience\n+  suggests they can be available for that, feel free to add them to the\n+  discussion (for example by cc'ing their Github handle).\n+\n+* If the contributor has stopped giving feedback or updating their PR,\n+  perhaps they're not interested anymore, but perhaps also they're stuck\n+  on some issue and feel unable to push their contribution any further.\n+  Don't hesitate to ask (\"I see this PR hasn't seen any updates recently,\n+  are you stuck on something? Do you need any help?\").\n+\n+* If the contribution is genuinely desirable and the contributor is not making\n+  any progress, it is also possible to take it up.  Out of politeness,\n+  it is however better to ask the contributor first.\n+\n+* Some contributors are looking for a quick fix to a specific problem and\n+  don't want to spend too much time on it.  Others on the contrary are eager\n+  to learn and improve their contribution to make it conform to the\n+  project's standards.  The latter kind of contributors are especially\n+  valuable as they may become long-term contributors or even committers\n+  to the project; it can therefore be a good strategy to prioritize\n+  interactions with such contributors.\n+\n+* Some contributors may respond \"I will fix it later, can we merge anyway?\"\n+  when a problem is pointed.  Unfortunately, whether the fix is really\n+  contributed soon in later PR is difficult to predict or enforce.  If\n+  the contributor has shown to be trustable, it may be acceptable to do\n+  as suggested.  Otherwise, it is better to decline the suggestion.\n\nReview comment:\n       I wonder if framing this in terms of in-scope/out-of-scope decisions and follow-on Jiras. Something along the lines of: \r\n   \r\n   Our general policy is to not introduce regressions or merge PRs that require follow ons to function correctly (though exceptions to this can be made). What changes are in-scope for a PR and what changes might/could/should be pushed out of scope and have a Jira created should be determined in collaboration between the authors and the reviewers\n\n##########\nFile path: docs/source/developers/reviewing.rst\n##########\n@@ -0,0 +1,226 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=======================\n+Reviewing contributions\n+=======================\n+\n+Principles\n+==========\n+\n+Arrow is a foundational project that will need to evolve over many years\n+or even decades, while serving potentially millions of users.  We believe\n+being meticulous when reviewing brings greater rewards to the project than\n+being lenient and aiming for quick merges.\n+\n+Fixing potential issues after a Pull Request (PR) merge is more costly since\n+it forces the developer to context-switch back to work that was thought\n+to be finished.  Moreover, an late-minute API change may propagate to\n+other parts of the project and require more attention than if done up front.\n+And there are social issues with asking a volunteer to go back to work\n+on something that was accepted as finished.\n+\n+Guidelines\n+==========\n+\n+Meta\n+----\n+\n+**Use your common sense**.  These guidelines are not hard rules.\n+Committers are expected to have sufficient expertise on their work\n+areas to be able to modulate concerns if necessary.\n+\n+These guidelines are not listed in a particular order.  They are\n+not intended to be used as a checklist.\n+\n+Finally, **these guidelines are not currently exhaustive**.\n+\n+Public API design\n+-----------------\n+\n+- Public APIs should nudge users towards the most desirable constructs.\n+  In other words, if there is a \"best\" way to do something, it should\n+  ideally also be the most easily discoverable and the most concise to type.\n+  For example, safe APIs should ideally be featured more prominently than\n+  unsafe APIs that may crash or silently produce erronenous results on\n+  invalid input.\n+\n+- Public APIs should ideally tend to produce readable code.  One example\n+  is when multiple options are expected to be added over time: it is better\n+  to try to organize options logically rather than juxtapose them all in\n+  a function's signature (see for example the CSV reading APIs in C++ and Python).\n+\n+- Naming is important.  Try to ask yourself if code calling the new API\n+  would be understandable without having to read the API docs.\n+  Vague naming should be avoided; inaccurate naming is even worse as it\n+  can mislead the reader and lead to buggy user code.\n+\n+- Be mindful of terminology.  Every project has (explicitly or tacitly) set\n+  conventions about how to name important concepts; steering away from those\n+  conventions increases the cognitive workload both for contributors and\n+  users of the project.  Conversely, reusing a well-known term for a different\n+  purpose than usual can also increase the cognitive workload and make\n+  developers' life generally more difficult.\n+\n+- If it is unsure whether an API is the right one for the task at hand,\n+  it is advisable to mark it experimental, such that users know that it\n+  may be changed over time, while contributors are less wary of bringing\n+  code-breaking improvements.  However, experimental APIs should not be\n+  used as an excuse for eschewing basic API design principles.\n+\n+Robustness\n+----------\n+\n+- Arrow is a set of open source libraries and will be used in a very wide\n+  array of contexts (including fiddling with deliberately artificial data\n+  at a Jupyter interpreter prompt).  If you are writing a public API, make\n+  sure that it won't crash or produce undefined behaviour on unusual (but\n+  valid) inputs.\n+\n+- When a non-trivial algorithm is implemented, defense-in-depth checks can\n+  be useful to catch potential problems (such as debug-only assertions, if\n+  the language allows them).\n+\n+- APIs ingesting potentially untrusted data, such as on-disk file formats,\n+  should try to avoid crashing or produce silent bugs when invalid or\n+  corrupt data is fed to them.  This can require a lot of care that is\n+  out of the scope of regular code reviews (such as setting up fuzz testing\n+  - XXX link to current fuzz setup), but basic checks can still be suggested\n+  at the code review stage.\n+\n+- When calling foreign APIs, especially system functions or APIs dealing with\n+  input / output, do check for errors and propagate them (if the language\n+  does not propagate errors automatically, such as C++).\n+\n+Performance\n+-----------\n+\n+- Think about performance, but do not obsess over it.  Algorithmic complexity\n+  is important if input size may be \"large\" (the meaning of large depends\n+  on the context: use your own expertise to decide!).  Micro-optimizations\n+  improving performance by 20% or more on performance-sensitive functionality\n+  may be useful as well; lesser micro-optimizations may not be worth the\n+  time spent on them, especially if they lead to more complicated code.\n+\n+- If performance is important, measure it.  Do not satisfy yourself with\n+  guesses and intuitions (which may be founded on incorrect assumptions\n+  about the compiler or the hardware).\n+\n+- Try to avoid trying to trick the compiler/interpreter/runtime by writing\n+  the code in a certain way, unless it's really important.  These tricks\n+  are generally dependent on platform details that may become obsolete,\n+  they are often brittle, and they can make code harder to maintain\n+  (a common question that can block contributors is \"what should I do\n+  about this weird hack that my changes need to remove\"?).\n+\n+- Avoiding worst-case degenerescence (such as memory blowups when a size\n+  estimate is too imprecise) may be more critical than trying to improve\n+  the common case by a small amount.\n+\n+Documentation\n+-------------\n+\n+These guidelines should ideally apply to both prose documentation and\n+in-code docstrings.\n+\n+- Look for ambiguous / sub-informative wording.  For example, \"it is an error\n+  if ...\" is less informative than either \"An error is raised if ... \" or\n+  \"Behaviour is undefined if ...\" (the first phrasing doesn't tell the\n+  reader what actually *happens* on such an error).\n+\n+- Be mindful about spelling, grammar, expression, concision.  This may seem\n+  like an obvious concern, but not all people are not accustomed to care about\n+  this.\n+\n+- Cross-linking increases the global value of documentation.  Sphinx especially\n+  has great cross-linking capabilities (including topic references, glossary\n+  terms, API references), be sure to make use of them!\n+\n+Testing\n+-------\n+\n+- When adding an API, all nominal cases should have test cases.  Does a function\n+  allow null values? Then null values should be tested (alongside non-null\n+  values, of course). Does a function allow different input types? etc.\n+\n+- If some aspect of a functionality is delicate (either by definition or\n+  as an implementation detail), it should be tested.\n+\n+- Corner cases should be exercised, especially in low-level implementation\n+  languages such as C++.  Examples: empty arrays, zero-chunk arrays, arrays\n+  with only nulls, etc.\n+\n+- Stress tests can be useful, for example to uncover synchronizations bugs\n+  if non-trivial parallelization is being added, or to validate a computational\n+  argument against a slow and straightforward reference implementation.\n+\n+- A mitigating concern, however, is the overall cost of running the test\n+  suite.  Continuous Integration (CI) runtimes can be painfully long and\n+  we should be wary of increasing them too much.  Sometimes it is\n+  worthwhile to fine-tune testing parameters to balance the usefulness\n+  of tests against the cost of running them (especially where stress tests\n+  are involved, since they tend to imply execution over large datasets).\n+\n+\n+Social aspects\n+==============\n+\n+* Reviewing is a communication between the contributor and the reviewer.\n+  Avoid letting questions or comments unanswered for too long (\"too long\"\n+  is of course very subjective, but two weeks can be a reasonable\n+  heuristic).  If you cannot allocate time soon, do say it explicitly.\n+  If you don't have the answer to a question, do say it explicitly.\n+  Saying \"I don't have time immediately but I will come back later,\n+  feel free to ping if I seem to have forgotten\" or \"Sorry, I am out of depth\n+  here\" is always better than saying nothing and letting the interlocutor\n+  wondering.\n+\n+* If you know someone who may help on a blocking issue and past experience\n+  suggests they can be available for that, feel free to add them to the\n\nReview comment:\n       I know I am frequently hesitant to `@` someone, but I should more frequently and they can say either \"sorry I don't have time\" or \"oh this is the answer...\"\n\n##########\nFile path: docs/source/developers/reviewing.rst\n##########\n@@ -0,0 +1,226 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=======================\n+Reviewing contributions\n+=======================\n+\n+Principles\n+==========\n+\n+Arrow is a foundational project that will need to evolve over many years\n+or even decades, while serving potentially millions of users.  We believe\n+being meticulous when reviewing brings greater rewards to the project than\n+being lenient and aiming for quick merges.\n+\n+Fixing potential issues after a Pull Request (PR) merge is more costly since\n+it forces the developer to context-switch back to work that was thought\n+to be finished.  Moreover, an late-minute API change may propagate to\n+other parts of the project and require more attention than if done up front.\n+And there are social issues with asking a volunteer to go back to work\n+on something that was accepted as finished.\n+\n+Guidelines\n+==========\n+\n+Meta\n+----\n+\n+**Use your common sense**.  These guidelines are not hard rules.\n+Committers are expected to have sufficient expertise on their work\n+areas to be able to modulate concerns if necessary.\n+\n+These guidelines are not listed in a particular order.  They are\n+not intended to be used as a checklist.\n+\n+Finally, **these guidelines are not currently exhaustive**.\n+\n+Public API design\n+-----------------\n+\n+- Public APIs should nudge users towards the most desirable constructs.\n+  In other words, if there is a \"best\" way to do something, it should\n+  ideally also be the most easily discoverable and the most concise to type.\n+  For example, safe APIs should ideally be featured more prominently than\n+  unsafe APIs that may crash or silently produce erronenous results on\n+  invalid input.\n+\n+- Public APIs should ideally tend to produce readable code.  One example\n+  is when multiple options are expected to be added over time: it is better\n+  to try to organize options logically rather than juxtapose them all in\n+  a function's signature (see for example the CSV reading APIs in C++ and Python).\n+\n+- Naming is important.  Try to ask yourself if code calling the new API\n+  would be understandable without having to read the API docs.\n+  Vague naming should be avoided; inaccurate naming is even worse as it\n+  can mislead the reader and lead to buggy user code.\n+\n+- Be mindful of terminology.  Every project has (explicitly or tacitly) set\n+  conventions about how to name important concepts; steering away from those\n+  conventions increases the cognitive workload both for contributors and\n+  users of the project.  Conversely, reusing a well-known term for a different\n+  purpose than usual can also increase the cognitive workload and make\n+  developers' life generally more difficult.\n+\n+- If it is unsure whether an API is the right one for the task at hand,\n+  it is advisable to mark it experimental, such that users know that it\n+  may be changed over time, while contributors are less wary of bringing\n+  code-breaking improvements.  However, experimental APIs should not be\n+  used as an excuse for eschewing basic API design principles.\n+\n+Robustness\n+----------\n+\n+- Arrow is a set of open source libraries and will be used in a very wide\n+  array of contexts (including fiddling with deliberately artificial data\n+  at a Jupyter interpreter prompt).  If you are writing a public API, make\n+  sure that it won't crash or produce undefined behaviour on unusual (but\n+  valid) inputs.\n+\n+- When a non-trivial algorithm is implemented, defense-in-depth checks can\n+  be useful to catch potential problems (such as debug-only assertions, if\n+  the language allows them).\n+\n+- APIs ingesting potentially untrusted data, such as on-disk file formats,\n+  should try to avoid crashing or produce silent bugs when invalid or\n+  corrupt data is fed to them.  This can require a lot of care that is\n+  out of the scope of regular code reviews (such as setting up fuzz testing\n+  - XXX link to current fuzz setup), but basic checks can still be suggested\n+  at the code review stage.\n+\n+- When calling foreign APIs, especially system functions or APIs dealing with\n+  input / output, do check for errors and propagate them (if the language\n+  does not propagate errors automatically, such as C++).\n+\n+Performance\n+-----------\n+\n+- Think about performance, but do not obsess over it.  Algorithmic complexity\n+  is important if input size may be \"large\" (the meaning of large depends\n+  on the context: use your own expertise to decide!).  Micro-optimizations\n+  improving performance by 20% or more on performance-sensitive functionality\n+  may be useful as well; lesser micro-optimizations may not be worth the\n+  time spent on them, especially if they lead to more complicated code.\n+\n+- If performance is important, measure it.  Do not satisfy yourself with\n+  guesses and intuitions (which may be founded on incorrect assumptions\n+  about the compiler or the hardware).\n\nReview comment:\n       Might we include a link to conbench here?\n\n##########\nFile path: docs/source/developers/reviewing.rst\n##########\n@@ -0,0 +1,226 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=======================\n+Reviewing contributions\n+=======================\n+\n+Principles\n+==========\n+\n+Arrow is a foundational project that will need to evolve over many years\n+or even decades, while serving potentially millions of users.  We believe\n+being meticulous when reviewing brings greater rewards to the project than\n+being lenient and aiming for quick merges.\n+\n+Fixing potential issues after a Pull Request (PR) merge is more costly since\n+it forces the developer to context-switch back to work that was thought\n+to be finished.  Moreover, an late-minute API change may propagate to\n+other parts of the project and require more attention than if done up front.\n+And there are social issues with asking a volunteer to go back to work\n+on something that was accepted as finished.\n+\n+Guidelines\n+==========\n+\n+Meta\n+----\n+\n+**Use your common sense**.  These guidelines are not hard rules.\n+Committers are expected to have sufficient expertise on their work\n+areas to be able to modulate concerns if necessary.\n+\n+These guidelines are not listed in a particular order.  They are\n+not intended to be used as a checklist.\n+\n+Finally, **these guidelines are not currently exhaustive**.\n+\n+Public API design\n+-----------------\n+\n+- Public APIs should nudge users towards the most desirable constructs.\n+  In other words, if there is a \"best\" way to do something, it should\n+  ideally also be the most easily discoverable and the most concise to type.\n+  For example, safe APIs should ideally be featured more prominently than\n+  unsafe APIs that may crash or silently produce erronenous results on\n+  invalid input.\n+\n+- Public APIs should ideally tend to produce readable code.  One example\n+  is when multiple options are expected to be added over time: it is better\n+  to try to organize options logically rather than juxtapose them all in\n+  a function's signature (see for example the CSV reading APIs in C++ and Python).\n+\n+- Naming is important.  Try to ask yourself if code calling the new API\n+  would be understandable without having to read the API docs.\n+  Vague naming should be avoided; inaccurate naming is even worse as it\n+  can mislead the reader and lead to buggy user code.\n+\n+- Be mindful of terminology.  Every project has (explicitly or tacitly) set\n+  conventions about how to name important concepts; steering away from those\n+  conventions increases the cognitive workload both for contributors and\n+  users of the project.  Conversely, reusing a well-known term for a different\n+  purpose than usual can also increase the cognitive workload and make\n+  developers' life generally more difficult.\n+\n+- If it is unsure whether an API is the right one for the task at hand,\n+  it is advisable to mark it experimental, such that users know that it\n+  may be changed over time, while contributors are less wary of bringing\n+  code-breaking improvements.  However, experimental APIs should not be\n+  used as an excuse for eschewing basic API design principles.\n+\n+Robustness\n+----------\n+\n+- Arrow is a set of open source libraries and will be used in a very wide\n+  array of contexts (including fiddling with deliberately artificial data\n+  at a Jupyter interpreter prompt).  If you are writing a public API, make\n+  sure that it won't crash or produce undefined behaviour on unusual (but\n+  valid) inputs.\n+\n+- When a non-trivial algorithm is implemented, defense-in-depth checks can\n+  be useful to catch potential problems (such as debug-only assertions, if\n+  the language allows them).\n+\n+- APIs ingesting potentially untrusted data, such as on-disk file formats,\n+  should try to avoid crashing or produce silent bugs when invalid or\n+  corrupt data is fed to them.  This can require a lot of care that is\n+  out of the scope of regular code reviews (such as setting up fuzz testing\n+  - XXX link to current fuzz setup), but basic checks can still be suggested\n+  at the code review stage.\n+\n+- When calling foreign APIs, especially system functions or APIs dealing with\n+  input / output, do check for errors and propagate them (if the language\n+  does not propagate errors automatically, such as C++).\n+\n+Performance\n+-----------\n+\n+- Think about performance, but do not obsess over it.  Algorithmic complexity\n+  is important if input size may be \"large\" (the meaning of large depends\n+  on the context: use your own expertise to decide!).  Micro-optimizations\n+  improving performance by 20% or more on performance-sensitive functionality\n+  may be useful as well; lesser micro-optimizations may not be worth the\n+  time spent on them, especially if they lead to more complicated code.\n+\n+- If performance is important, measure it.  Do not satisfy yourself with\n+  guesses and intuitions (which may be founded on incorrect assumptions\n+  about the compiler or the hardware).\n+\n+- Try to avoid trying to trick the compiler/interpreter/runtime by writing\n+  the code in a certain way, unless it's really important.  These tricks\n+  are generally dependent on platform details that may become obsolete,\n+  they are often brittle, and they can make code harder to maintain\n+  (a common question that can block contributors is \"what should I do\n+  about this weird hack that my changes need to remove\"?).\n+\n+- Avoiding worst-case degenerescence (such as memory blowups when a size\n\nReview comment:\n       ```suggestion\r\n   - Avoiding worst-case degeneration (such as memory blowups when a size\r\n   ```\r\n   \r\n   Is degenerescence a term of art here? My understanding of it is ~= degeneration, but I might be missing something \n\n##########\nFile path: docs/source/developers/reviewing.rst\n##########\n@@ -0,0 +1,226 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=======================\n+Reviewing contributions\n+=======================\n+\n+Principles\n+==========\n+\n+Arrow is a foundational project that will need to evolve over many years\n+or even decades, while serving potentially millions of users.  We believe\n+being meticulous when reviewing brings greater rewards to the project than\n+being lenient and aiming for quick merges.\n+\n+Fixing potential issues after a Pull Request (PR) merge is more costly since\n+it forces the developer to context-switch back to work that was thought\n+to be finished.  Moreover, an late-minute API change may propagate to\n+other parts of the project and require more attention than if done up front.\n+And there are social issues with asking a volunteer to go back to work\n+on something that was accepted as finished.\n+\n+Guidelines\n+==========\n+\n+Meta\n+----\n+\n+**Use your common sense**.  These guidelines are not hard rules.\n+Committers are expected to have sufficient expertise on their work\n+areas to be able to modulate concerns if necessary.\n+\n+These guidelines are not listed in a particular order.  They are\n+not intended to be used as a checklist.\n+\n+Finally, **these guidelines are not currently exhaustive**.\n+\n+Public API design\n+-----------------\n+\n+- Public APIs should nudge users towards the most desirable constructs.\n+  In other words, if there is a \"best\" way to do something, it should\n+  ideally also be the most easily discoverable and the most concise to type.\n+  For example, safe APIs should ideally be featured more prominently than\n+  unsafe APIs that may crash or silently produce erronenous results on\n+  invalid input.\n+\n+- Public APIs should ideally tend to produce readable code.  One example\n+  is when multiple options are expected to be added over time: it is better\n+  to try to organize options logically rather than juxtapose them all in\n+  a function's signature (see for example the CSV reading APIs in C++ and Python).\n+\n+- Naming is important.  Try to ask yourself if code calling the new API\n+  would be understandable without having to read the API docs.\n+  Vague naming should be avoided; inaccurate naming is even worse as it\n+  can mislead the reader and lead to buggy user code.\n+\n+- Be mindful of terminology.  Every project has (explicitly or tacitly) set\n+  conventions about how to name important concepts; steering away from those\n+  conventions increases the cognitive workload both for contributors and\n+  users of the project.  Conversely, reusing a well-known term for a different\n+  purpose than usual can also increase the cognitive workload and make\n+  developers' life generally more difficult.\n+\n+- If it is unsure whether an API is the right one for the task at hand,\n+  it is advisable to mark it experimental, such that users know that it\n+  may be changed over time, while contributors are less wary of bringing\n+  code-breaking improvements.  However, experimental APIs should not be\n+  used as an excuse for eschewing basic API design principles.\n+\n+Robustness\n+----------\n+\n+- Arrow is a set of open source libraries and will be used in a very wide\n+  array of contexts (including fiddling with deliberately artificial data\n+  at a Jupyter interpreter prompt).  If you are writing a public API, make\n+  sure that it won't crash or produce undefined behaviour on unusual (but\n+  valid) inputs.\n+\n+- When a non-trivial algorithm is implemented, defense-in-depth checks can\n+  be useful to catch potential problems (such as debug-only assertions, if\n+  the language allows them).\n+\n+- APIs ingesting potentially untrusted data, such as on-disk file formats,\n+  should try to avoid crashing or produce silent bugs when invalid or\n+  corrupt data is fed to them.  This can require a lot of care that is\n+  out of the scope of regular code reviews (such as setting up fuzz testing\n+  - XXX link to current fuzz setup), but basic checks can still be suggested\n+  at the code review stage.\n+\n+- When calling foreign APIs, especially system functions or APIs dealing with\n+  input / output, do check for errors and propagate them (if the language\n+  does not propagate errors automatically, such as C++).\n+\n+Performance\n+-----------\n+\n+- Think about performance, but do not obsess over it.  Algorithmic complexity\n+  is important if input size may be \"large\" (the meaning of large depends\n+  on the context: use your own expertise to decide!).  Micro-optimizations\n+  improving performance by 20% or more on performance-sensitive functionality\n+  may be useful as well; lesser micro-optimizations may not be worth the\n+  time spent on them, especially if they lead to more complicated code.\n+\n+- If performance is important, measure it.  Do not satisfy yourself with\n+  guesses and intuitions (which may be founded on incorrect assumptions\n+  about the compiler or the hardware).\n+\n+- Try to avoid trying to trick the compiler/interpreter/runtime by writing\n+  the code in a certain way, unless it's really important.  These tricks\n+  are generally dependent on platform details that may become obsolete,\n+  they are often brittle, and they can make code harder to maintain\n+  (a common question that can block contributors is \"what should I do\n+  about this weird hack that my changes need to remove\"?).\n+\n+- Avoiding worst-case degenerescence (such as memory blowups when a size\n+  estimate is too imprecise) may be more critical than trying to improve\n+  the common case by a small amount.\n+\n+Documentation\n+-------------\n+\n+These guidelines should ideally apply to both prose documentation and\n+in-code docstrings.\n+\n+- Look for ambiguous / sub-informative wording.  For example, \"it is an error\n+  if ...\" is less informative than either \"An error is raised if ... \" or\n+  \"Behaviour is undefined if ...\" (the first phrasing doesn't tell the\n+  reader what actually *happens* on such an error).\n+\n+- Be mindful about spelling, grammar, expression, concision.  This may seem\n+  like an obvious concern, but not all people are not accustomed to care about\n+  this.\n+\n+- Cross-linking increases the global value of documentation.  Sphinx especially\n+  has great cross-linking capabilities (including topic references, glossary\n+  terms, API references), be sure to make use of them!\n+\n+Testing\n+-------\n+\n+- When adding an API, all nominal cases should have test cases.  Does a function\n+  allow null values? Then null values should be tested (alongside non-null\n+  values, of course). Does a function allow different input types? etc.\n+\n+- If some aspect of a functionality is delicate (either by definition or\n+  as an implementation detail), it should be tested.\n+\n+- Corner cases should be exercised, especially in low-level implementation\n+  languages such as C++.  Examples: empty arrays, zero-chunk arrays, arrays\n+  with only nulls, etc.\n+\n+- Stress tests can be useful, for example to uncover synchronizations bugs\n+  if non-trivial parallelization is being added, or to validate a computational\n+  argument against a slow and straightforward reference implementation.\n+\n+- A mitigating concern, however, is the overall cost of running the test\n+  suite.  Continuous Integration (CI) runtimes can be painfully long and\n+  we should be wary of increasing them too much.  Sometimes it is\n+  worthwhile to fine-tune testing parameters to balance the usefulness\n+  of tests against the cost of running them (especially where stress tests\n+  are involved, since they tend to imply execution over large datasets).\n+\n+\n+Social aspects\n+==============\n+\n+* Reviewing is a communication between the contributor and the reviewer.\n+  Avoid letting questions or comments unanswered for too long (\"too long\"\n+  is of course very subjective, but two weeks can be a reasonable\n+  heuristic).  If you cannot allocate time soon, do say it explicitly.\n+  If you don't have the answer to a question, do say it explicitly.\n+  Saying \"I don't have time immediately but I will come back later,\n+  feel free to ping if I seem to have forgotten\" or \"Sorry, I am out of depth\n+  here\" is always better than saying nothing and letting the interlocutor\n+  wondering.\n+\n+* If you know someone who may help on a blocking issue and past experience\n+  suggests they can be available for that, feel free to add them to the\n+  discussion (for example by cc'ing their Github handle).\n+\n+* If the contributor has stopped giving feedback or updating their PR,\n+  perhaps they're not interested anymore, but perhaps also they're stuck\n+  on some issue and feel unable to push their contribution any further.\n+  Don't hesitate to ask (\"I see this PR hasn't seen any updates recently,\n+  are you stuck on something? Do you need any help?\").\n+\n+* If the contribution is genuinely desirable and the contributor is not making\n+  any progress, it is also possible to take it up.  Out of politeness,\n+  it is however better to ask the contributor first.\n+\n+* Some contributors are looking for a quick fix to a specific problem and\n+  don't want to spend too much time on it.  Others on the contrary are eager\n+  to learn and improve their contribution to make it conform to the\n+  project's standards.  The latter kind of contributors are especially\n+  valuable as they may become long-term contributors or even committers\n+  to the project; it can therefore be a good strategy to prioritize\n+  interactions with such contributors.\n+\n+* Some contributors may respond \"I will fix it later, can we merge anyway?\"\n+  when a problem is pointed.  Unfortunately, whether the fix is really\n+  contributed soon in later PR is difficult to predict or enforce.  If\n+  the contributor has shown to be trustable, it may be acceptable to do\n+  as suggested.  Otherwise, it is better to decline the suggestion.\n+\n+* If a PR is generally ready for merge apart from trivial or uncontroversial\n+  concerns, the reviewer may decide to push changes themselves to the\n+  PR instead of asking the contributor to make the changes.\n\nReview comment:\n       Do we want a note about that same \"it's best to ask for permission\" or possibly we could frame this as \"please don't take offense if this happens, it's common and is not intended to be a slight\"\n\n##########\nFile path: docs/source/developers/reviewing.rst\n##########\n@@ -0,0 +1,226 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=======================\n+Reviewing contributions\n+=======================\n+\n+Principles\n+==========\n+\n+Arrow is a foundational project that will need to evolve over many years\n+or even decades, while serving potentially millions of users.  We believe\n+being meticulous when reviewing brings greater rewards to the project than\n+being lenient and aiming for quick merges.\n+\n+Fixing potential issues after a Pull Request (PR) merge is more costly since\n+it forces the developer to context-switch back to work that was thought\n+to be finished.  Moreover, an late-minute API change may propagate to\n+other parts of the project and require more attention than if done up front.\n+And there are social issues with asking a volunteer to go back to work\n+on something that was accepted as finished.\n+\n+Guidelines\n+==========\n+\n+Meta\n+----\n+\n+**Use your common sense**.  These guidelines are not hard rules.\n+Committers are expected to have sufficient expertise on their work\n+areas to be able to modulate concerns if necessary.\n+\n+These guidelines are not listed in a particular order.  They are\n+not intended to be used as a checklist.\n+\n+Finally, **these guidelines are not currently exhaustive**.\n+\n+Public API design\n+-----------------\n+\n+- Public APIs should nudge users towards the most desirable constructs.\n+  In other words, if there is a \"best\" way to do something, it should\n+  ideally also be the most easily discoverable and the most concise to type.\n+  For example, safe APIs should ideally be featured more prominently than\n+  unsafe APIs that may crash or silently produce erronenous results on\n+  invalid input.\n+\n+- Public APIs should ideally tend to produce readable code.  One example\n+  is when multiple options are expected to be added over time: it is better\n+  to try to organize options logically rather than juxtapose them all in\n+  a function's signature (see for example the CSV reading APIs in C++ and Python).\n+\n+- Naming is important.  Try to ask yourself if code calling the new API\n+  would be understandable without having to read the API docs.\n+  Vague naming should be avoided; inaccurate naming is even worse as it\n+  can mislead the reader and lead to buggy user code.\n+\n+- Be mindful of terminology.  Every project has (explicitly or tacitly) set\n+  conventions about how to name important concepts; steering away from those\n+  conventions increases the cognitive workload both for contributors and\n+  users of the project.  Conversely, reusing a well-known term for a different\n+  purpose than usual can also increase the cognitive workload and make\n+  developers' life generally more difficult.\n+\n+- If it is unsure whether an API is the right one for the task at hand,\n+  it is advisable to mark it experimental, such that users know that it\n+  may be changed over time, while contributors are less wary of bringing\n+  code-breaking improvements.  However, experimental APIs should not be\n+  used as an excuse for eschewing basic API design principles.\n+\n+Robustness\n+----------\n+\n+- Arrow is a set of open source libraries and will be used in a very wide\n+  array of contexts (including fiddling with deliberately artificial data\n+  at a Jupyter interpreter prompt).  If you are writing a public API, make\n+  sure that it won't crash or produce undefined behaviour on unusual (but\n+  valid) inputs.\n+\n+- When a non-trivial algorithm is implemented, defense-in-depth checks can\n+  be useful to catch potential problems (such as debug-only assertions, if\n+  the language allows them).\n+\n+- APIs ingesting potentially untrusted data, such as on-disk file formats,\n+  should try to avoid crashing or produce silent bugs when invalid or\n+  corrupt data is fed to them.  This can require a lot of care that is\n+  out of the scope of regular code reviews (such as setting up fuzz testing\n+  - XXX link to current fuzz setup), but basic checks can still be suggested\n+  at the code review stage.\n+\n+- When calling foreign APIs, especially system functions or APIs dealing with\n+  input / output, do check for errors and propagate them (if the language\n+  does not propagate errors automatically, such as C++).\n+\n+Performance\n+-----------\n+\n+- Think about performance, but do not obsess over it.  Algorithmic complexity\n+  is important if input size may be \"large\" (the meaning of large depends\n+  on the context: use your own expertise to decide!).  Micro-optimizations\n+  improving performance by 20% or more on performance-sensitive functionality\n+  may be useful as well; lesser micro-optimizations may not be worth the\n+  time spent on them, especially if they lead to more complicated code.\n+\n+- If performance is important, measure it.  Do not satisfy yourself with\n+  guesses and intuitions (which may be founded on incorrect assumptions\n+  about the compiler or the hardware).\n+\n+- Try to avoid trying to trick the compiler/interpreter/runtime by writing\n+  the code in a certain way, unless it's really important.  These tricks\n+  are generally dependent on platform details that may become obsolete,\n+  they are often brittle, and they can make code harder to maintain\n+  (a common question that can block contributors is \"what should I do\n+  about this weird hack that my changes need to remove\"?).\n+\n+- Avoiding worst-case degenerescence (such as memory blowups when a size\n+  estimate is too imprecise) may be more critical than trying to improve\n+  the common case by a small amount.\n+\n+Documentation\n+-------------\n+\n+These guidelines should ideally apply to both prose documentation and\n+in-code docstrings.\n+\n+- Look for ambiguous / sub-informative wording.  For example, \"it is an error\n+  if ...\" is less informative than either \"An error is raised if ... \" or\n+  \"Behaviour is undefined if ...\" (the first phrasing doesn't tell the\n+  reader what actually *happens* on such an error).\n+\n+- Be mindful about spelling, grammar, expression, concision.  This may seem\n+  like an obvious concern, but not all people are not accustomed to care about\n+  this.\n+\n+- Cross-linking increases the global value of documentation.  Sphinx especially\n+  has great cross-linking capabilities (including topic references, glossary\n+  terms, API references), be sure to make use of them!\n+\n+Testing\n+-------\n+\n+- When adding an API, all nominal cases should have test cases.  Does a function\n+  allow null values? Then null values should be tested (alongside non-null\n+  values, of course). Does a function allow different input types? etc.\n+\n+- If some aspect of a functionality is delicate (either by definition or\n+  as an implementation detail), it should be tested.\n+\n+- Corner cases should be exercised, especially in low-level implementation\n+  languages such as C++.  Examples: empty arrays, zero-chunk arrays, arrays\n+  with only nulls, etc.\n+\n+- Stress tests can be useful, for example to uncover synchronizations bugs\n+  if non-trivial parallelization is being added, or to validate a computational\n+  argument against a slow and straightforward reference implementation.\n+\n+- A mitigating concern, however, is the overall cost of running the test\n+  suite.  Continuous Integration (CI) runtimes can be painfully long and\n+  we should be wary of increasing them too much.  Sometimes it is\n+  worthwhile to fine-tune testing parameters to balance the usefulness\n+  of tests against the cost of running them (especially where stress tests\n+  are involved, since they tend to imply execution over large datasets).\n+\n+\n+Social aspects\n+==============\n+\n+* Reviewing is a communication between the contributor and the reviewer.\n+  Avoid letting questions or comments unanswered for too long (\"too long\"\n+  is of course very subjective, but two weeks can be a reasonable\n+  heuristic).  If you cannot allocate time soon, do say it explicitly.\n+  If you don't have the answer to a question, do say it explicitly.\n+  Saying \"I don't have time immediately but I will come back later,\n+  feel free to ping if I seem to have forgotten\" or \"Sorry, I am out of depth\n+  here\" is always better than saying nothing and letting the interlocutor\n+  wondering.\n\nReview comment:\n       ```suggestion\r\n     here\" is always better than saying nothing and leaving the other person wondering.\r\n   ```\r\n   \r\n   I \u2764\ufe0f the word interlocutor, but I suspect others might find it confounding \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-22T23:12:25.591+0000",
                    "updated": "2021-11-22T23:12:25.591+0000",
                    "started": "2021-11-22T23:12:25.590+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "684994",
                    "issueId": "13393504"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13393504/worklog/685063",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkmgit commented on pull request #11757:\nURL: https://github.com/apache/arrow/pull/11757#issuecomment-976168717\n\n\n   > > Would suggest to use precise descriptions but keep English language requirements as simple as possible.\r\n   > \r\n   > What do you mean by that? Is the proposed document too difficult to read? (FTR, English is not my native language)\r\n   \r\n   Expect many contributors use languages other than English.  Making reviews easy to read would likely be helpful.  Perhaps this could be added in the social aspects section?\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-23T04:56:03.370+0000",
                    "updated": "2021-11-23T04:56:03.370+0000",
                    "started": "2021-11-23T04:56:03.370+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "685063",
                    "issueId": "13393504"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13393504/worklog/685067",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkmgit commented on a change in pull request #11757:\nURL: https://github.com/apache/arrow/pull/11757#discussion_r754817856\n\n\n\n##########\nFile path: docs/source/developers/reviewing.rst\n##########\n@@ -0,0 +1,226 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=======================\n+Reviewing contributions\n+=======================\n+\n+Principles\n+==========\n+\n+Arrow is a foundational project that will need to evolve over many years\n+or even decades, while serving potentially millions of users.  We believe\n+being meticulous when reviewing brings greater rewards to the project than\n+being lenient and aiming for quick merges.\n+\n+Fixing potential issues after a Pull Request (PR) merge is more costly since\n+it forces the developer to context-switch back to work that was thought\n+to be finished.  Moreover, an late-minute API change may propagate to\n+other parts of the project and require more attention than if done up front.\n+And there are social issues with asking a volunteer to go back to work\n+on something that was accepted as finished.\n+\n+Guidelines\n+==========\n+\n+Meta\n+----\n+\n+**Use your common sense**.  These guidelines are not hard rules.\n+Committers are expected to have sufficient expertise on their work\n+areas to be able to modulate concerns if necessary.\n+\n+These guidelines are not listed in a particular order.  They are\n+not intended to be used as a checklist.\n+\n+Finally, **these guidelines are not currently exhaustive**.\n+\n+Public API design\n+-----------------\n+\n+- Public APIs should nudge users towards the most desirable constructs.\n+  In other words, if there is a \"best\" way to do something, it should\n+  ideally also be the most easily discoverable and the most concise to type.\n+  For example, safe APIs should ideally be featured more prominently than\n+  unsafe APIs that may crash or silently produce erronenous results on\n+  invalid input.\n+\n+- Public APIs should ideally tend to produce readable code.  One example\n+  is when multiple options are expected to be added over time: it is better\n+  to try to organize options logically rather than juxtapose them all in\n+  a function's signature (see for example the CSV reading APIs in C++ and Python).\n+\n+- Naming is important.  Try to ask yourself if code calling the new API\n+  would be understandable without having to read the API docs.\n+  Vague naming should be avoided; inaccurate naming is even worse as it\n+  can mislead the reader and lead to buggy user code.\n+\n+- Be mindful of terminology.  Every project has (explicitly or tacitly) set\n+  conventions about how to name important concepts; steering away from those\n+  conventions increases the cognitive workload both for contributors and\n+  users of the project.  Conversely, reusing a well-known term for a different\n+  purpose than usual can also increase the cognitive workload and make\n+  developers' life generally more difficult.\n+\n+- If it is unsure whether an API is the right one for the task at hand,\n+  it is advisable to mark it experimental, such that users know that it\n+  may be changed over time, while contributors are less wary of bringing\n+  code-breaking improvements.  However, experimental APIs should not be\n+  used as an excuse for eschewing basic API design principles.\n+\n+Robustness\n+----------\n+\n+- Arrow is a set of open source libraries and will be used in a very wide\n+  array of contexts (including fiddling with deliberately artificial data\n+  at a Jupyter interpreter prompt).  If you are writing a public API, make\n+  sure that it won't crash or produce undefined behaviour on unusual (but\n+  valid) inputs.\n+\n+- When a non-trivial algorithm is implemented, defense-in-depth checks can\n+  be useful to catch potential problems (such as debug-only assertions, if\n+  the language allows them).\n+\n+- APIs ingesting potentially untrusted data, such as on-disk file formats,\n+  should try to avoid crashing or produce silent bugs when invalid or\n+  corrupt data is fed to them.  This can require a lot of care that is\n+  out of the scope of regular code reviews (such as setting up fuzz testing\n+  - XXX link to current fuzz setup), but basic checks can still be suggested\n+  at the code review stage.\n+\n+- When calling foreign APIs, especially system functions or APIs dealing with\n+  input / output, do check for errors and propagate them (if the language\n+  does not propagate errors automatically, such as C++).\n+\n+Performance\n+-----------\n+\n+- Think about performance, but do not obsess over it.  Algorithmic complexity\n+  is important if input size may be \"large\" (the meaning of large depends\n+  on the context: use your own expertise to decide!).  Micro-optimizations\n+  improving performance by 20% or more on performance-sensitive functionality\n+  may be useful as well; lesser micro-optimizations may not be worth the\n+  time spent on them, especially if they lead to more complicated code.\n+\n+- If performance is important, measure it.  Do not satisfy yourself with\n+  guesses and intuitions (which may be founded on incorrect assumptions\n+  about the compiler or the hardware).\n+\n+- Try to avoid trying to trick the compiler/interpreter/runtime by writing\n+  the code in a certain way, unless it's really important.  These tricks\n+  are generally dependent on platform details that may become obsolete,\n+  they are often brittle, and they can make code harder to maintain\n+  (a common question that can block contributors is \"what should I do\n+  about this weird hack that my changes need to remove\"?).\n+\n+- Avoiding worst-case degenerescence (such as memory blowups when a size\n+  estimate is too imprecise) may be more critical than trying to improve\n+  the common case by a small amount.\n+\n+Documentation\n+-------------\n+\n+These guidelines should ideally apply to both prose documentation and\n+in-code docstrings.\n+\n+- Look for ambiguous / sub-informative wording.  For example, \"it is an error\n+  if ...\" is less informative than either \"An error is raised if ... \" or\n+  \"Behaviour is undefined if ...\" (the first phrasing doesn't tell the\n+  reader what actually *happens* on such an error).\n+\n+- Be mindful about spelling, grammar, expression, concision.  This may seem\n\nReview comment:\n       Maybe \r\n   ```suggestion\r\n   - Be concise. Use correct spelling and grammar. \r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-23T05:48:51.320+0000",
                    "updated": "2021-11-23T05:48:51.320+0000",
                    "started": "2021-11-23T05:48:51.319+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "685067",
                    "issueId": "13393504"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13393504/worklog/685068",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkmgit commented on a change in pull request #11757:\nURL: https://github.com/apache/arrow/pull/11757#discussion_r754819334\n\n\n\n##########\nFile path: docs/source/developers/reviewing.rst\n##########\n@@ -0,0 +1,226 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=======================\n+Reviewing contributions\n+=======================\n+\n+Principles\n+==========\n+\n+Arrow is a foundational project that will need to evolve over many years\n+or even decades, while serving potentially millions of users.  We believe\n+being meticulous when reviewing brings greater rewards to the project than\n+being lenient and aiming for quick merges.\n+\n+Fixing potential issues after a Pull Request (PR) merge is more costly since\n+it forces the developer to context-switch back to work that was thought\n+to be finished.  Moreover, an late-minute API change may propagate to\n+other parts of the project and require more attention than if done up front.\n+And there are social issues with asking a volunteer to go back to work\n+on something that was accepted as finished.\n+\n+Guidelines\n+==========\n+\n+Meta\n+----\n+\n+**Use your common sense**.  These guidelines are not hard rules.\n+Committers are expected to have sufficient expertise on their work\n+areas to be able to modulate concerns if necessary.\n+\n+These guidelines are not listed in a particular order.  They are\n+not intended to be used as a checklist.\n+\n+Finally, **these guidelines are not currently exhaustive**.\n+\n+Public API design\n+-----------------\n+\n+- Public APIs should nudge users towards the most desirable constructs.\n+  In other words, if there is a \"best\" way to do something, it should\n+  ideally also be the most easily discoverable and the most concise to type.\n+  For example, safe APIs should ideally be featured more prominently than\n+  unsafe APIs that may crash or silently produce erronenous results on\n+  invalid input.\n+\n+- Public APIs should ideally tend to produce readable code.  One example\n+  is when multiple options are expected to be added over time: it is better\n+  to try to organize options logically rather than juxtapose them all in\n+  a function's signature (see for example the CSV reading APIs in C++ and Python).\n+\n+- Naming is important.  Try to ask yourself if code calling the new API\n+  would be understandable without having to read the API docs.\n+  Vague naming should be avoided; inaccurate naming is even worse as it\n+  can mislead the reader and lead to buggy user code.\n+\n+- Be mindful of terminology.  Every project has (explicitly or tacitly) set\n+  conventions about how to name important concepts; steering away from those\n+  conventions increases the cognitive workload both for contributors and\n+  users of the project.  Conversely, reusing a well-known term for a different\n+  purpose than usual can also increase the cognitive workload and make\n+  developers' life generally more difficult.\n+\n+- If it is unsure whether an API is the right one for the task at hand,\n+  it is advisable to mark it experimental, such that users know that it\n+  may be changed over time, while contributors are less wary of bringing\n+  code-breaking improvements.  However, experimental APIs should not be\n+  used as an excuse for eschewing basic API design principles.\n+\n+Robustness\n+----------\n+\n+- Arrow is a set of open source libraries and will be used in a very wide\n+  array of contexts (including fiddling with deliberately artificial data\n+  at a Jupyter interpreter prompt).  If you are writing a public API, make\n+  sure that it won't crash or produce undefined behaviour on unusual (but\n+  valid) inputs.\n+\n+- When a non-trivial algorithm is implemented, defense-in-depth checks can\n+  be useful to catch potential problems (such as debug-only assertions, if\n+  the language allows them).\n+\n+- APIs ingesting potentially untrusted data, such as on-disk file formats,\n+  should try to avoid crashing or produce silent bugs when invalid or\n+  corrupt data is fed to them.  This can require a lot of care that is\n+  out of the scope of regular code reviews (such as setting up fuzz testing\n+  - XXX link to current fuzz setup), but basic checks can still be suggested\n+  at the code review stage.\n+\n+- When calling foreign APIs, especially system functions or APIs dealing with\n+  input / output, do check for errors and propagate them (if the language\n+  does not propagate errors automatically, such as C++).\n+\n+Performance\n+-----------\n+\n+- Think about performance, but do not obsess over it.  Algorithmic complexity\n+  is important if input size may be \"large\" (the meaning of large depends\n+  on the context: use your own expertise to decide!).  Micro-optimizations\n+  improving performance by 20% or more on performance-sensitive functionality\n+  may be useful as well; lesser micro-optimizations may not be worth the\n+  time spent on them, especially if they lead to more complicated code.\n+\n+- If performance is important, measure it.  Do not satisfy yourself with\n+  guesses and intuitions (which may be founded on incorrect assumptions\n+  about the compiler or the hardware).\n+\n+- Try to avoid trying to trick the compiler/interpreter/runtime by writing\n+  the code in a certain way, unless it's really important.  These tricks\n+  are generally dependent on platform details that may become obsolete,\n+  they are often brittle, and they can make code harder to maintain\n+  (a common question that can block contributors is \"what should I do\n+  about this weird hack that my changes need to remove\"?).\n+\n+- Avoiding worst-case degenerescence (such as memory blowups when a size\n+  estimate is too imprecise) may be more critical than trying to improve\n+  the common case by a small amount.\n+\n+Documentation\n+-------------\n+\n+These guidelines should ideally apply to both prose documentation and\n+in-code docstrings.\n+\n+- Look for ambiguous / sub-informative wording.  For example, \"it is an error\n+  if ...\" is less informative than either \"An error is raised if ... \" or\n+  \"Behaviour is undefined if ...\" (the first phrasing doesn't tell the\n+  reader what actually *happens* on such an error).\n+\n+- Be mindful about spelling, grammar, expression, concision.  This may seem\n+  like an obvious concern, but not all people are not accustomed to care about\n+  this.\n\nReview comment:\n       Yes, possibly something like \"Clear communication in a group with a range of linguistic and programming backgrounds enables more efficient collaborative development and maintenance.\" \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-23T05:54:00.480+0000",
                    "updated": "2021-11-23T05:54:00.480+0000",
                    "started": "2021-11-23T05:54:00.479+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "685068",
                    "issueId": "13393504"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13393504/worklog/685069",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkmgit commented on a change in pull request #11757:\nURL: https://github.com/apache/arrow/pull/11757#discussion_r754819334\n\n\n\n##########\nFile path: docs/source/developers/reviewing.rst\n##########\n@@ -0,0 +1,226 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=======================\n+Reviewing contributions\n+=======================\n+\n+Principles\n+==========\n+\n+Arrow is a foundational project that will need to evolve over many years\n+or even decades, while serving potentially millions of users.  We believe\n+being meticulous when reviewing brings greater rewards to the project than\n+being lenient and aiming for quick merges.\n+\n+Fixing potential issues after a Pull Request (PR) merge is more costly since\n+it forces the developer to context-switch back to work that was thought\n+to be finished.  Moreover, an late-minute API change may propagate to\n+other parts of the project and require more attention than if done up front.\n+And there are social issues with asking a volunteer to go back to work\n+on something that was accepted as finished.\n+\n+Guidelines\n+==========\n+\n+Meta\n+----\n+\n+**Use your common sense**.  These guidelines are not hard rules.\n+Committers are expected to have sufficient expertise on their work\n+areas to be able to modulate concerns if necessary.\n+\n+These guidelines are not listed in a particular order.  They are\n+not intended to be used as a checklist.\n+\n+Finally, **these guidelines are not currently exhaustive**.\n+\n+Public API design\n+-----------------\n+\n+- Public APIs should nudge users towards the most desirable constructs.\n+  In other words, if there is a \"best\" way to do something, it should\n+  ideally also be the most easily discoverable and the most concise to type.\n+  For example, safe APIs should ideally be featured more prominently than\n+  unsafe APIs that may crash or silently produce erronenous results on\n+  invalid input.\n+\n+- Public APIs should ideally tend to produce readable code.  One example\n+  is when multiple options are expected to be added over time: it is better\n+  to try to organize options logically rather than juxtapose them all in\n+  a function's signature (see for example the CSV reading APIs in C++ and Python).\n+\n+- Naming is important.  Try to ask yourself if code calling the new API\n+  would be understandable without having to read the API docs.\n+  Vague naming should be avoided; inaccurate naming is even worse as it\n+  can mislead the reader and lead to buggy user code.\n+\n+- Be mindful of terminology.  Every project has (explicitly or tacitly) set\n+  conventions about how to name important concepts; steering away from those\n+  conventions increases the cognitive workload both for contributors and\n+  users of the project.  Conversely, reusing a well-known term for a different\n+  purpose than usual can also increase the cognitive workload and make\n+  developers' life generally more difficult.\n+\n+- If it is unsure whether an API is the right one for the task at hand,\n+  it is advisable to mark it experimental, such that users know that it\n+  may be changed over time, while contributors are less wary of bringing\n+  code-breaking improvements.  However, experimental APIs should not be\n+  used as an excuse for eschewing basic API design principles.\n+\n+Robustness\n+----------\n+\n+- Arrow is a set of open source libraries and will be used in a very wide\n+  array of contexts (including fiddling with deliberately artificial data\n+  at a Jupyter interpreter prompt).  If you are writing a public API, make\n+  sure that it won't crash or produce undefined behaviour on unusual (but\n+  valid) inputs.\n+\n+- When a non-trivial algorithm is implemented, defense-in-depth checks can\n+  be useful to catch potential problems (such as debug-only assertions, if\n+  the language allows them).\n+\n+- APIs ingesting potentially untrusted data, such as on-disk file formats,\n+  should try to avoid crashing or produce silent bugs when invalid or\n+  corrupt data is fed to them.  This can require a lot of care that is\n+  out of the scope of regular code reviews (such as setting up fuzz testing\n+  - XXX link to current fuzz setup), but basic checks can still be suggested\n+  at the code review stage.\n+\n+- When calling foreign APIs, especially system functions or APIs dealing with\n+  input / output, do check for errors and propagate them (if the language\n+  does not propagate errors automatically, such as C++).\n+\n+Performance\n+-----------\n+\n+- Think about performance, but do not obsess over it.  Algorithmic complexity\n+  is important if input size may be \"large\" (the meaning of large depends\n+  on the context: use your own expertise to decide!).  Micro-optimizations\n+  improving performance by 20% or more on performance-sensitive functionality\n+  may be useful as well; lesser micro-optimizations may not be worth the\n+  time spent on them, especially if they lead to more complicated code.\n+\n+- If performance is important, measure it.  Do not satisfy yourself with\n+  guesses and intuitions (which may be founded on incorrect assumptions\n+  about the compiler or the hardware).\n+\n+- Try to avoid trying to trick the compiler/interpreter/runtime by writing\n+  the code in a certain way, unless it's really important.  These tricks\n+  are generally dependent on platform details that may become obsolete,\n+  they are often brittle, and they can make code harder to maintain\n+  (a common question that can block contributors is \"what should I do\n+  about this weird hack that my changes need to remove\"?).\n+\n+- Avoiding worst-case degenerescence (such as memory blowups when a size\n+  estimate is too imprecise) may be more critical than trying to improve\n+  the common case by a small amount.\n+\n+Documentation\n+-------------\n+\n+These guidelines should ideally apply to both prose documentation and\n+in-code docstrings.\n+\n+- Look for ambiguous / sub-informative wording.  For example, \"it is an error\n+  if ...\" is less informative than either \"An error is raised if ... \" or\n+  \"Behaviour is undefined if ...\" (the first phrasing doesn't tell the\n+  reader what actually *happens* on such an error).\n+\n+- Be mindful about spelling, grammar, expression, concision.  This may seem\n+  like an obvious concern, but not all people are not accustomed to care about\n+  this.\n\nReview comment:\n       Yes, possibly something like \r\n   ```\r\n   Clear communication in a group with a range of linguistic and programming backgrounds enables more efficient collaborative development and maintenance.\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-23T05:54:33.339+0000",
                    "updated": "2021-11-23T05:54:33.339+0000",
                    "started": "2021-11-23T05:54:33.339+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "685069",
                    "issueId": "13393504"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13393504/worklog/685268",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on a change in pull request #11757:\nURL: https://github.com/apache/arrow/pull/11757#discussion_r755129929\n\n\n\n##########\nFile path: docs/source/developers/reviewing.rst\n##########\n@@ -0,0 +1,226 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=======================\n+Reviewing contributions\n+=======================\n+\n+Principles\n+==========\n+\n+Arrow is a foundational project that will need to evolve over many years\n+or even decades, while serving potentially millions of users.  We believe\n+being meticulous when reviewing brings greater rewards to the project than\n+being lenient and aiming for quick merges.\n+\n+Fixing potential issues after a Pull Request (PR) merge is more costly since\n+it forces the developer to context-switch back to work that was thought\n+to be finished.  Moreover, an late-minute API change may propagate to\n+other parts of the project and require more attention than if done up front.\n+And there are social issues with asking a volunteer to go back to work\n\nReview comment:\n       I fully agree with this paragraph, but at the same time it can also be \"demotivating\" if a PR drags on for a very long time (although that can have many reasons of course, not necessarily due to the review). So maybe we could just says _something_ about that we still try to make contributing a rewarding process or something like that.  \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-23T13:38:06.479+0000",
                    "updated": "2021-11-23T13:38:06.479+0000",
                    "started": "2021-11-23T13:38:06.479+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "685268",
                    "issueId": "13393504"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13393504/worklog/685288",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on a change in pull request #11757:\nURL: https://github.com/apache/arrow/pull/11757#discussion_r755137479\n\n\n\n##########\nFile path: docs/source/developers/reviewing.rst\n##########\n@@ -0,0 +1,226 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=======================\n+Reviewing contributions\n+=======================\n+\n+Principles\n+==========\n+\n+Arrow is a foundational project that will need to evolve over many years\n+or even decades, while serving potentially millions of users.  We believe\n+being meticulous when reviewing brings greater rewards to the project than\n+being lenient and aiming for quick merges.\n+\n+Fixing potential issues after a Pull Request (PR) merge is more costly since\n+it forces the developer to context-switch back to work that was thought\n+to be finished.  Moreover, an late-minute API change may propagate to\n+other parts of the project and require more attention than if done up front.\n+And there are social issues with asking a volunteer to go back to work\n+on something that was accepted as finished.\n+\n+Guidelines\n+==========\n+\n+Meta\n+----\n+\n+**Use your common sense**.  These guidelines are not hard rules.\n+Committers are expected to have sufficient expertise on their work\n+areas to be able to modulate concerns if necessary.\n+\n+These guidelines are not listed in a particular order.  They are\n+not intended to be used as a checklist.\n+\n+Finally, **these guidelines are not currently exhaustive**.\n+\n+Public API design\n+-----------------\n+\n+- Public APIs should nudge users towards the most desirable constructs.\n+  In other words, if there is a \"best\" way to do something, it should\n+  ideally also be the most easily discoverable and the most concise to type.\n+  For example, safe APIs should ideally be featured more prominently than\n+  unsafe APIs that may crash or silently produce erronenous results on\n+  invalid input.\n+\n+- Public APIs should ideally tend to produce readable code.  One example\n+  is when multiple options are expected to be added over time: it is better\n+  to try to organize options logically rather than juxtapose them all in\n+  a function's signature (see for example the CSV reading APIs in C++ and Python).\n+\n+- Naming is important.  Try to ask yourself if code calling the new API\n+  would be understandable without having to read the API docs.\n+  Vague naming should be avoided; inaccurate naming is even worse as it\n+  can mislead the reader and lead to buggy user code.\n+\n+- Be mindful of terminology.  Every project has (explicitly or tacitly) set\n+  conventions about how to name important concepts; steering away from those\n+  conventions increases the cognitive workload both for contributors and\n+  users of the project.  Conversely, reusing a well-known term for a different\n+  purpose than usual can also increase the cognitive workload and make\n+  developers' life generally more difficult.\n+\n+- If it is unsure whether an API is the right one for the task at hand,\n+  it is advisable to mark it experimental, such that users know that it\n+  may be changed over time, while contributors are less wary of bringing\n+  code-breaking improvements.  However, experimental APIs should not be\n+  used as an excuse for eschewing basic API design principles.\n+\n+Robustness\n+----------\n+\n+- Arrow is a set of open source libraries and will be used in a very wide\n+  array of contexts (including fiddling with deliberately artificial data\n+  at a Jupyter interpreter prompt).  If you are writing a public API, make\n+  sure that it won't crash or produce undefined behaviour on unusual (but\n+  valid) inputs.\n+\n+- When a non-trivial algorithm is implemented, defense-in-depth checks can\n+  be useful to catch potential problems (such as debug-only assertions, if\n+  the language allows them).\n+\n+- APIs ingesting potentially untrusted data, such as on-disk file formats,\n+  should try to avoid crashing or produce silent bugs when invalid or\n+  corrupt data is fed to them.  This can require a lot of care that is\n+  out of the scope of regular code reviews (such as setting up fuzz testing\n+  - XXX link to current fuzz setup), but basic checks can still be suggested\n+  at the code review stage.\n+\n+- When calling foreign APIs, especially system functions or APIs dealing with\n+  input / output, do check for errors and propagate them (if the language\n+  does not propagate errors automatically, such as C++).\n+\n+Performance\n+-----------\n+\n+- Think about performance, but do not obsess over it.  Algorithmic complexity\n+  is important if input size may be \"large\" (the meaning of large depends\n+  on the context: use your own expertise to decide!).  Micro-optimizations\n+  improving performance by 20% or more on performance-sensitive functionality\n+  may be useful as well; lesser micro-optimizations may not be worth the\n+  time spent on them, especially if they lead to more complicated code.\n+\n+- If performance is important, measure it.  Do not satisfy yourself with\n+  guesses and intuitions (which may be founded on incorrect assumptions\n+  about the compiler or the hardware).\n\nReview comment:\n       Or generally link to the documentation section about running/writing benchmarks?\n\n##########\nFile path: docs/source/developers/reviewing.rst\n##########\n@@ -0,0 +1,226 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=======================\n+Reviewing contributions\n+=======================\n+\n+Principles\n+==========\n+\n+Arrow is a foundational project that will need to evolve over many years\n+or even decades, while serving potentially millions of users.  We believe\n+being meticulous when reviewing brings greater rewards to the project than\n+being lenient and aiming for quick merges.\n+\n+Fixing potential issues after a Pull Request (PR) merge is more costly since\n+it forces the developer to context-switch back to work that was thought\n+to be finished.  Moreover, an late-minute API change may propagate to\n+other parts of the project and require more attention than if done up front.\n+And there are social issues with asking a volunteer to go back to work\n+on something that was accepted as finished.\n+\n+Guidelines\n+==========\n+\n+Meta\n+----\n+\n+**Use your common sense**.  These guidelines are not hard rules.\n+Committers are expected to have sufficient expertise on their work\n+areas to be able to modulate concerns if necessary.\n+\n+These guidelines are not listed in a particular order.  They are\n+not intended to be used as a checklist.\n+\n+Finally, **these guidelines are not currently exhaustive**.\n+\n+Public API design\n+-----------------\n+\n+- Public APIs should nudge users towards the most desirable constructs.\n+  In other words, if there is a \"best\" way to do something, it should\n+  ideally also be the most easily discoverable and the most concise to type.\n+  For example, safe APIs should ideally be featured more prominently than\n+  unsafe APIs that may crash or silently produce erronenous results on\n+  invalid input.\n+\n+- Public APIs should ideally tend to produce readable code.  One example\n+  is when multiple options are expected to be added over time: it is better\n+  to try to organize options logically rather than juxtapose them all in\n+  a function's signature (see for example the CSV reading APIs in C++ and Python).\n+\n+- Naming is important.  Try to ask yourself if code calling the new API\n+  would be understandable without having to read the API docs.\n+  Vague naming should be avoided; inaccurate naming is even worse as it\n+  can mislead the reader and lead to buggy user code.\n+\n+- Be mindful of terminology.  Every project has (explicitly or tacitly) set\n+  conventions about how to name important concepts; steering away from those\n+  conventions increases the cognitive workload both for contributors and\n+  users of the project.  Conversely, reusing a well-known term for a different\n+  purpose than usual can also increase the cognitive workload and make\n+  developers' life generally more difficult.\n+\n+- If it is unsure whether an API is the right one for the task at hand,\n+  it is advisable to mark it experimental, such that users know that it\n+  may be changed over time, while contributors are less wary of bringing\n+  code-breaking improvements.  However, experimental APIs should not be\n+  used as an excuse for eschewing basic API design principles.\n+\n+Robustness\n+----------\n+\n+- Arrow is a set of open source libraries and will be used in a very wide\n+  array of contexts (including fiddling with deliberately artificial data\n+  at a Jupyter interpreter prompt).  If you are writing a public API, make\n+  sure that it won't crash or produce undefined behaviour on unusual (but\n+  valid) inputs.\n+\n+- When a non-trivial algorithm is implemented, defense-in-depth checks can\n\nReview comment:\n       I was not familiar with the \"defense-in-depth\" term, so looked it up and according to wiki it's used in cybersecurity context. Is it also used in context of \"defensive coding\"?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-23T14:05:57.662+0000",
                    "updated": "2021-11-23T14:05:57.662+0000",
                    "started": "2021-11-23T14:05:57.662+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "685288",
                    "issueId": "13393504"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13393504/worklog/685294",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on pull request #11757:\nURL: https://github.com/apache/arrow/pull/11757#issuecomment-976596291\n\n\n   > Would it be a good idea to also mention + link to our code of conduct and call out (or reiterate) that reviews (both from the reviewer and the author) must respect the code of conduct (\r\n   \r\n   +1\r\n   \r\n   > I also wonder if it would be good to have a section about reviews being collaborative and everyone should try their best to keep them professional and solutions oriented? This cuts in both ways: it can be easy for a PR author to feel a bit down/attacked if there are lots of changes requested (and mentioning this + framing the review process as a collaborative one might help resolve some of that) and it also reminds reviewers to some empathy in their reviewing.\r\n   \r\n   Yes, I agree it would be nice to have a section on this, explicitly calling this out. \r\n   Maybe we could also mention a general guideline along the lines of \"assume good intentions\" (eg if you might feel attacked by the review), as well as avoiding \"strong\" wording on the reviewers side (like \"this is wrong\" can also be phrased as \"I think we should do it this way instead\"). This blogpost of Gael Varoqaux is a nice reference about this IMO: http://gael-varoquaux.info/programming/technical-discussions-are-hard-a-few-tips.html \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-23T14:14:58.027+0000",
                    "updated": "2021-11-23T14:14:58.027+0000",
                    "started": "2021-11-23T14:14:58.027+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "685294",
                    "issueId": "13393504"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13393504/worklog/685324",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #11757:\nURL: https://github.com/apache/arrow/pull/11757#discussion_r755214996\n\n\n\n##########\nFile path: docs/source/developers/reviewing.rst\n##########\n@@ -0,0 +1,226 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=======================\n+Reviewing contributions\n+=======================\n+\n+Principles\n+==========\n+\n+Arrow is a foundational project that will need to evolve over many years\n+or even decades, while serving potentially millions of users.  We believe\n+being meticulous when reviewing brings greater rewards to the project than\n+being lenient and aiming for quick merges.\n+\n+Fixing potential issues after a Pull Request (PR) merge is more costly since\n+it forces the developer to context-switch back to work that was thought\n+to be finished.  Moreover, an late-minute API change may propagate to\n+other parts of the project and require more attention than if done up front.\n+And there are social issues with asking a volunteer to go back to work\n+on something that was accepted as finished.\n+\n+Guidelines\n+==========\n+\n+Meta\n+----\n+\n+**Use your common sense**.  These guidelines are not hard rules.\n\nReview comment:\n       Would \"use your own judgement\" be better?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-23T15:03:10.738+0000",
                    "updated": "2021-11-23T15:03:10.738+0000",
                    "started": "2021-11-23T15:03:10.738+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "685324",
                    "issueId": "13393504"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13393504/worklog/685328",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #11757:\nURL: https://github.com/apache/arrow/pull/11757#discussion_r755215751\n\n\n\n##########\nFile path: docs/source/developers/reviewing.rst\n##########\n@@ -0,0 +1,226 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=======================\n+Reviewing contributions\n+=======================\n+\n+Principles\n+==========\n+\n+Arrow is a foundational project that will need to evolve over many years\n+or even decades, while serving potentially millions of users.  We believe\n+being meticulous when reviewing brings greater rewards to the project than\n+being lenient and aiming for quick merges.\n+\n+Fixing potential issues after a Pull Request (PR) merge is more costly since\n+it forces the developer to context-switch back to work that was thought\n+to be finished.  Moreover, an late-minute API change may propagate to\n+other parts of the project and require more attention than if done up front.\n+And there are social issues with asking a volunteer to go back to work\n+on something that was accepted as finished.\n+\n+Guidelines\n+==========\n+\n+Meta\n+----\n+\n+**Use your common sense**.  These guidelines are not hard rules.\n+Committers are expected to have sufficient expertise on their work\n+areas to be able to modulate concerns if necessary.\n\nReview comment:\n       Hmm... \"calibrate\" perhaps? \"adjust\"?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-23T15:03:51.967+0000",
                    "updated": "2021-11-23T15:03:51.967+0000",
                    "started": "2021-11-23T15:03:51.966+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "685328",
                    "issueId": "13393504"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13393504/worklog/685332",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #11757:\nURL: https://github.com/apache/arrow/pull/11757#discussion_r755216978\n\n\n\n##########\nFile path: docs/source/developers/reviewing.rst\n##########\n@@ -0,0 +1,226 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=======================\n+Reviewing contributions\n+=======================\n+\n+Principles\n+==========\n+\n+Arrow is a foundational project that will need to evolve over many years\n+or even decades, while serving potentially millions of users.  We believe\n+being meticulous when reviewing brings greater rewards to the project than\n+being lenient and aiming for quick merges.\n+\n+Fixing potential issues after a Pull Request (PR) merge is more costly since\n+it forces the developer to context-switch back to work that was thought\n+to be finished.  Moreover, an late-minute API change may propagate to\n+other parts of the project and require more attention than if done up front.\n+And there are social issues with asking a volunteer to go back to work\n+on something that was accepted as finished.\n+\n+Guidelines\n+==========\n+\n+Meta\n+----\n+\n+**Use your common sense**.  These guidelines are not hard rules.\n+Committers are expected to have sufficient expertise on their work\n+areas to be able to modulate concerns if necessary.\n+\n+These guidelines are not listed in a particular order.  They are\n+not intended to be used as a checklist.\n+\n+Finally, **these guidelines are not currently exhaustive**.\n+\n+Public API design\n+-----------------\n+\n+- Public APIs should nudge users towards the most desirable constructs.\n+  In other words, if there is a \"best\" way to do something, it should\n+  ideally also be the most easily discoverable and the most concise to type.\n+  For example, safe APIs should ideally be featured more prominently than\n+  unsafe APIs that may crash or silently produce erronenous results on\n+  invalid input.\n+\n+- Public APIs should ideally tend to produce readable code.  One example\n+  is when multiple options are expected to be added over time: it is better\n+  to try to organize options logically rather than juxtapose them all in\n+  a function's signature (see for example the CSV reading APIs in C++ and Python).\n+\n+- Naming is important.  Try to ask yourself if code calling the new API\n+  would be understandable without having to read the API docs.\n+  Vague naming should be avoided; inaccurate naming is even worse as it\n+  can mislead the reader and lead to buggy user code.\n+\n+- Be mindful of terminology.  Every project has (explicitly or tacitly) set\n+  conventions about how to name important concepts; steering away from those\n+  conventions increases the cognitive workload both for contributors and\n+  users of the project.  Conversely, reusing a well-known term for a different\n+  purpose than usual can also increase the cognitive workload and make\n+  developers' life generally more difficult.\n+\n+- If it is unsure whether an API is the right one for the task at hand,\n+  it is advisable to mark it experimental, such that users know that it\n+  may be changed over time, while contributors are less wary of bringing\n+  code-breaking improvements.  However, experimental APIs should not be\n+  used as an excuse for eschewing basic API design principles.\n+\n+Robustness\n+----------\n+\n+- Arrow is a set of open source libraries and will be used in a very wide\n+  array of contexts (including fiddling with deliberately artificial data\n+  at a Jupyter interpreter prompt).  If you are writing a public API, make\n+  sure that it won't crash or produce undefined behaviour on unusual (but\n+  valid) inputs.\n+\n+- When a non-trivial algorithm is implemented, defense-in-depth checks can\n+  be useful to catch potential problems (such as debug-only assertions, if\n+  the language allows them).\n+\n+- APIs ingesting potentially untrusted data, such as on-disk file formats,\n+  should try to avoid crashing or produce silent bugs when invalid or\n+  corrupt data is fed to them.  This can require a lot of care that is\n+  out of the scope of regular code reviews (such as setting up fuzz testing\n+  - XXX link to current fuzz setup), but basic checks can still be suggested\n+  at the code review stage.\n+\n+- When calling foreign APIs, especially system functions or APIs dealing with\n+  input / output, do check for errors and propagate them (if the language\n+  does not propagate errors automatically, such as C++).\n+\n+Performance\n+-----------\n+\n+- Think about performance, but do not obsess over it.  Algorithmic complexity\n+  is important if input size may be \"large\" (the meaning of large depends\n+  on the context: use your own expertise to decide!).  Micro-optimizations\n+  improving performance by 20% or more on performance-sensitive functionality\n+  may be useful as well; lesser micro-optimizations may not be worth the\n+  time spent on them, especially if they lead to more complicated code.\n+\n+- If performance is important, measure it.  Do not satisfy yourself with\n+  guesses and intuitions (which may be founded on incorrect assumptions\n+  about the compiler or the hardware).\n+\n+- Try to avoid trying to trick the compiler/interpreter/runtime by writing\n+  the code in a certain way, unless it's really important.  These tricks\n+  are generally dependent on platform details that may become obsolete,\n+  they are often brittle, and they can make code harder to maintain\n+  (a common question that can block contributors is \"what should I do\n+  about this weird hack that my changes need to remove\"?).\n+\n+- Avoiding worst-case degenerescence (such as memory blowups when a size\n+  estimate is too imprecise) may be more critical than trying to improve\n+  the common case by a small amount.\n+\n+Documentation\n+-------------\n+\n+These guidelines should ideally apply to both prose documentation and\n+in-code docstrings.\n+\n+- Look for ambiguous / sub-informative wording.  For example, \"it is an error\n\nReview comment:\n       I'll use \"poorly informative\".\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-23T15:05:01.465+0000",
                    "updated": "2021-11-23T15:05:01.465+0000",
                    "started": "2021-11-23T15:05:01.464+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "685332",
                    "issueId": "13393504"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13393504/worklog/685337",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #11757:\nURL: https://github.com/apache/arrow/pull/11757#discussion_r755228507\n\n\n\n##########\nFile path: docs/source/developers/reviewing.rst\n##########\n@@ -0,0 +1,226 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=======================\n+Reviewing contributions\n+=======================\n+\n+Principles\n+==========\n+\n+Arrow is a foundational project that will need to evolve over many years\n+or even decades, while serving potentially millions of users.  We believe\n+being meticulous when reviewing brings greater rewards to the project than\n+being lenient and aiming for quick merges.\n+\n+Fixing potential issues after a Pull Request (PR) merge is more costly since\n+it forces the developer to context-switch back to work that was thought\n+to be finished.  Moreover, an late-minute API change may propagate to\n+other parts of the project and require more attention than if done up front.\n+And there are social issues with asking a volunteer to go back to work\n+on something that was accepted as finished.\n+\n+Guidelines\n+==========\n+\n+Meta\n+----\n+\n+**Use your common sense**.  These guidelines are not hard rules.\n+Committers are expected to have sufficient expertise on their work\n+areas to be able to modulate concerns if necessary.\n+\n+These guidelines are not listed in a particular order.  They are\n+not intended to be used as a checklist.\n+\n+Finally, **these guidelines are not currently exhaustive**.\n+\n+Public API design\n+-----------------\n+\n+- Public APIs should nudge users towards the most desirable constructs.\n+  In other words, if there is a \"best\" way to do something, it should\n+  ideally also be the most easily discoverable and the most concise to type.\n+  For example, safe APIs should ideally be featured more prominently than\n+  unsafe APIs that may crash or silently produce erronenous results on\n+  invalid input.\n+\n+- Public APIs should ideally tend to produce readable code.  One example\n+  is when multiple options are expected to be added over time: it is better\n+  to try to organize options logically rather than juxtapose them all in\n+  a function's signature (see for example the CSV reading APIs in C++ and Python).\n+\n+- Naming is important.  Try to ask yourself if code calling the new API\n+  would be understandable without having to read the API docs.\n+  Vague naming should be avoided; inaccurate naming is even worse as it\n+  can mislead the reader and lead to buggy user code.\n+\n+- Be mindful of terminology.  Every project has (explicitly or tacitly) set\n+  conventions about how to name important concepts; steering away from those\n+  conventions increases the cognitive workload both for contributors and\n+  users of the project.  Conversely, reusing a well-known term for a different\n+  purpose than usual can also increase the cognitive workload and make\n+  developers' life generally more difficult.\n+\n+- If it is unsure whether an API is the right one for the task at hand,\n+  it is advisable to mark it experimental, such that users know that it\n+  may be changed over time, while contributors are less wary of bringing\n+  code-breaking improvements.  However, experimental APIs should not be\n+  used as an excuse for eschewing basic API design principles.\n+\n+Robustness\n+----------\n+\n+- Arrow is a set of open source libraries and will be used in a very wide\n+  array of contexts (including fiddling with deliberately artificial data\n+  at a Jupyter interpreter prompt).  If you are writing a public API, make\n+  sure that it won't crash or produce undefined behaviour on unusual (but\n+  valid) inputs.\n+\n+- When a non-trivial algorithm is implemented, defense-in-depth checks can\n+  be useful to catch potential problems (such as debug-only assertions, if\n+  the language allows them).\n+\n+- APIs ingesting potentially untrusted data, such as on-disk file formats,\n+  should try to avoid crashing or produce silent bugs when invalid or\n+  corrupt data is fed to them.  This can require a lot of care that is\n+  out of the scope of regular code reviews (such as setting up fuzz testing\n+  - XXX link to current fuzz setup), but basic checks can still be suggested\n+  at the code review stage.\n+\n+- When calling foreign APIs, especially system functions or APIs dealing with\n+  input / output, do check for errors and propagate them (if the language\n+  does not propagate errors automatically, such as C++).\n+\n+Performance\n+-----------\n+\n+- Think about performance, but do not obsess over it.  Algorithmic complexity\n+  is important if input size may be \"large\" (the meaning of large depends\n+  on the context: use your own expertise to decide!).  Micro-optimizations\n+  improving performance by 20% or more on performance-sensitive functionality\n+  may be useful as well; lesser micro-optimizations may not be worth the\n+  time spent on them, especially if they lead to more complicated code.\n+\n+- If performance is important, measure it.  Do not satisfy yourself with\n+  guesses and intuitions (which may be founded on incorrect assumptions\n+  about the compiler or the hardware).\n+\n+- Try to avoid trying to trick the compiler/interpreter/runtime by writing\n+  the code in a certain way, unless it's really important.  These tricks\n+  are generally dependent on platform details that may become obsolete,\n+  they are often brittle, and they can make code harder to maintain\n+  (a common question that can block contributors is \"what should I do\n+  about this weird hack that my changes need to remove\"?).\n+\n+- Avoiding worst-case degenerescence (such as memory blowups when a size\n+  estimate is too imprecise) may be more critical than trying to improve\n+  the common case by a small amount.\n+\n+Documentation\n+-------------\n+\n+These guidelines should ideally apply to both prose documentation and\n+in-code docstrings.\n+\n+- Look for ambiguous / sub-informative wording.  For example, \"it is an error\n+  if ...\" is less informative than either \"An error is raised if ... \" or\n+  \"Behaviour is undefined if ...\" (the first phrasing doesn't tell the\n+  reader what actually *happens* on such an error).\n+\n+- Be mindful about spelling, grammar, expression, concision.  This may seem\n+  like an obvious concern, but not all people are not accustomed to care about\n+  this.\n\nReview comment:\n       Hmm, how something like:\r\n   > People have varying degrees of adherence to these concerns, but they contribute to a better documentation.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-23T15:14:11.061+0000",
                    "updated": "2021-11-23T15:14:11.061+0000",
                    "started": "2021-11-23T15:14:11.061+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "685337",
                    "issueId": "13393504"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13393504/worklog/685338",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #11757:\nURL: https://github.com/apache/arrow/pull/11757#discussion_r755228507\n\n\n\n##########\nFile path: docs/source/developers/reviewing.rst\n##########\n@@ -0,0 +1,226 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=======================\n+Reviewing contributions\n+=======================\n+\n+Principles\n+==========\n+\n+Arrow is a foundational project that will need to evolve over many years\n+or even decades, while serving potentially millions of users.  We believe\n+being meticulous when reviewing brings greater rewards to the project than\n+being lenient and aiming for quick merges.\n+\n+Fixing potential issues after a Pull Request (PR) merge is more costly since\n+it forces the developer to context-switch back to work that was thought\n+to be finished.  Moreover, an late-minute API change may propagate to\n+other parts of the project and require more attention than if done up front.\n+And there are social issues with asking a volunteer to go back to work\n+on something that was accepted as finished.\n+\n+Guidelines\n+==========\n+\n+Meta\n+----\n+\n+**Use your common sense**.  These guidelines are not hard rules.\n+Committers are expected to have sufficient expertise on their work\n+areas to be able to modulate concerns if necessary.\n+\n+These guidelines are not listed in a particular order.  They are\n+not intended to be used as a checklist.\n+\n+Finally, **these guidelines are not currently exhaustive**.\n+\n+Public API design\n+-----------------\n+\n+- Public APIs should nudge users towards the most desirable constructs.\n+  In other words, if there is a \"best\" way to do something, it should\n+  ideally also be the most easily discoverable and the most concise to type.\n+  For example, safe APIs should ideally be featured more prominently than\n+  unsafe APIs that may crash or silently produce erronenous results on\n+  invalid input.\n+\n+- Public APIs should ideally tend to produce readable code.  One example\n+  is when multiple options are expected to be added over time: it is better\n+  to try to organize options logically rather than juxtapose them all in\n+  a function's signature (see for example the CSV reading APIs in C++ and Python).\n+\n+- Naming is important.  Try to ask yourself if code calling the new API\n+  would be understandable without having to read the API docs.\n+  Vague naming should be avoided; inaccurate naming is even worse as it\n+  can mislead the reader and lead to buggy user code.\n+\n+- Be mindful of terminology.  Every project has (explicitly or tacitly) set\n+  conventions about how to name important concepts; steering away from those\n+  conventions increases the cognitive workload both for contributors and\n+  users of the project.  Conversely, reusing a well-known term for a different\n+  purpose than usual can also increase the cognitive workload and make\n+  developers' life generally more difficult.\n+\n+- If it is unsure whether an API is the right one for the task at hand,\n+  it is advisable to mark it experimental, such that users know that it\n+  may be changed over time, while contributors are less wary of bringing\n+  code-breaking improvements.  However, experimental APIs should not be\n+  used as an excuse for eschewing basic API design principles.\n+\n+Robustness\n+----------\n+\n+- Arrow is a set of open source libraries and will be used in a very wide\n+  array of contexts (including fiddling with deliberately artificial data\n+  at a Jupyter interpreter prompt).  If you are writing a public API, make\n+  sure that it won't crash or produce undefined behaviour on unusual (but\n+  valid) inputs.\n+\n+- When a non-trivial algorithm is implemented, defense-in-depth checks can\n+  be useful to catch potential problems (such as debug-only assertions, if\n+  the language allows them).\n+\n+- APIs ingesting potentially untrusted data, such as on-disk file formats,\n+  should try to avoid crashing or produce silent bugs when invalid or\n+  corrupt data is fed to them.  This can require a lot of care that is\n+  out of the scope of regular code reviews (such as setting up fuzz testing\n+  - XXX link to current fuzz setup), but basic checks can still be suggested\n+  at the code review stage.\n+\n+- When calling foreign APIs, especially system functions or APIs dealing with\n+  input / output, do check for errors and propagate them (if the language\n+  does not propagate errors automatically, such as C++).\n+\n+Performance\n+-----------\n+\n+- Think about performance, but do not obsess over it.  Algorithmic complexity\n+  is important if input size may be \"large\" (the meaning of large depends\n+  on the context: use your own expertise to decide!).  Micro-optimizations\n+  improving performance by 20% or more on performance-sensitive functionality\n+  may be useful as well; lesser micro-optimizations may not be worth the\n+  time spent on them, especially if they lead to more complicated code.\n+\n+- If performance is important, measure it.  Do not satisfy yourself with\n+  guesses and intuitions (which may be founded on incorrect assumptions\n+  about the compiler or the hardware).\n+\n+- Try to avoid trying to trick the compiler/interpreter/runtime by writing\n+  the code in a certain way, unless it's really important.  These tricks\n+  are generally dependent on platform details that may become obsolete,\n+  they are often brittle, and they can make code harder to maintain\n+  (a common question that can block contributors is \"what should I do\n+  about this weird hack that my changes need to remove\"?).\n+\n+- Avoiding worst-case degenerescence (such as memory blowups when a size\n+  estimate is too imprecise) may be more critical than trying to improve\n+  the common case by a small amount.\n+\n+Documentation\n+-------------\n+\n+These guidelines should ideally apply to both prose documentation and\n+in-code docstrings.\n+\n+- Look for ambiguous / sub-informative wording.  For example, \"it is an error\n+  if ...\" is less informative than either \"An error is raised if ... \" or\n+  \"Behaviour is undefined if ...\" (the first phrasing doesn't tell the\n+  reader what actually *happens* on such an error).\n+\n+- Be mindful about spelling, grammar, expression, concision.  This may seem\n+  like an obvious concern, but not all people are not accustomed to care about\n+  this.\n\nReview comment:\n       Hmm, how about something like:\r\n   > People have varying degrees of adherence to these concerns, but they contribute to a better documentation.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-23T15:14:23.807+0000",
                    "updated": "2021-11-23T15:14:23.807+0000",
                    "started": "2021-11-23T15:14:23.807+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "685338",
                    "issueId": "13393504"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 31800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@4b3f2ca4[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@21ed7862[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7ddfb622[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@37bbef93[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2f631e18[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@5f6f7e91[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5f01bdf8[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@37ae06fc[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@a4dcf[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@24b520a9[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7609b7ba[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@31d7c661[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 31800,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Dec 02 17:27:54 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-12-02T17:27:54.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-13553/watchers",
            "watchCount": 3,
            "isWatching": false
        },
        "created": "2021-08-04T14:15:44.000+0000",
        "updated": "2021-12-03T12:45:32.000+0000",
        "timeoriginalestimate": null,
        "description": "This would help people who start reviewing other people's PRs without knowing precisely which kind of standards the project wants to be uphold.\r\n\r\ncc [~wesm]",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "8h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 31800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Doc] Add guidelines for code reviews",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13393504/comment/17393220",
                    "id": "17393220",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Also cc [~amol-]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2021-08-04T14:28:08.468+0000",
                    "updated": "2021-08-04T14:28:08.468+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13393504/comment/17452523",
                    "id": "17452523",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 11757\n[https://github.com/apache/arrow/pull/11757]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2021-12-02T17:27:54.364+0000",
                    "updated": "2021-12-02T17:27:54.364+0000"
                }
            ],
            "maxResults": 2,
            "total": 2,
            "startAt": 0
        },
        "customfield_12311820": "0|z0tlww:",
        "customfield_12314139": null
    }
}