{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13145231",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13145231",
    "key": "ARROW-2311",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12341707",
                "id": "12341707",
                "description": "",
                "name": "0.9.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-03-19"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": null,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12341352",
                "id": "12341352",
                "name": "0.8.0",
                "archived": false,
                "released": true,
                "releaseDate": "2017-12-18"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328936",
                "id": "12328936",
                "name": "Python"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": null,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "aggregateprogress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2311/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 0,
            "worklogs": []
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
            "id": "1",
            "description": "A problem which impairs or prevents the functions of the product.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
            "name": "Bug",
            "subtask": false,
            "avatarId": 21133
        },
        "timespent": null,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@67649537[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6983d8b8[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2fc825d6[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@58797e8f[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1931f89c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@43ef9796[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2d67eca8[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@3ef9628d[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@281a88d6[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@1776f964[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@566558e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@707eb2a5[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": null,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Mar 15 15:49:51 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-03-15T15:49:49.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2311/watchers",
            "watchCount": 3,
            "isWatching": false
        },
        "created": "2018-03-15T01:18:32.000+0000",
        "updated": "2018-03-15T15:49:51.000+0000",
        "timeoriginalestimate": null,
        "description": "{code:python}\r\n>>> arr = pa.array([(1, 2.0), (3, 4.0), (5, 6.0)], type=pa.struct([pa.field('x', pa.int16()), pa.field('y', pa.float32())]))\r\n>>> arr\r\n<pyarrow.lib.StructArray object at 0x7fdfbe7916d8>\r\n[\r\n  {'x': 1, 'y': 2.0},\r\n  {'x': 3, 'y': 4.0},\r\n  {'x': 5, 'y': 6.0}\r\n]\r\n>>> arr[1:]\r\n<pyarrow.lib.StructArray object at 0x7fdfbe791f48>\r\n[\r\n  {'x': 1, 'y': 2.0},\r\n  {'x': 3, 'y': 4.0}\r\n]\r\n{code}",
        "customfield_10010": null,
        "timetracking": {},
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Python] Struct array slicing defective",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13145231/comment/16400277",
                    "id": "16400277",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou opened a new pull request #1754: ARROW-2311: [Python/C++] Fix struct array slicing\nURL: https://github.com/apache/arrow/pull/1754\n \n \n   `StructArray::field()` would not adjust the offset if the struct array was sliced, requiring error-prone fixup code in the caller.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-03-15T11:44:01.132+0000",
                    "updated": "2018-03-15T11:44:01.132+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13145231/comment/16400590",
                    "id": "16400590",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 1754\n[https://github.com/apache/arrow/pull/1754]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-03-15T15:49:49.718+0000",
                    "updated": "2018-03-15T15:49:49.718+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13145231/comment/16400591",
                    "id": "16400591",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm closed pull request #1754: ARROW-2311: [Python/C++] Fix struct array slicing\nURL: https://github.com/apache/arrow/pull/1754\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/cpp/src/arrow/array-test.cc b/cpp/src/arrow/array-test.cc\nindex ad2335fa1..2aa73a09a 100644\n--- a/cpp/src/arrow/array-test.cc\n+++ b/cpp/src/arrow/array-test.cc\n@@ -2983,14 +2983,14 @@ TEST_F(TestStructBuilder, TestEquality) {\n   std::shared_ptr<Array> unequal_bitmap_array, unequal_offsets_array,\n       unequal_values_array;\n \n-  vector<int32_t> int_values = {1, 2, 3, 4};\n+  vector<int32_t> int_values = {101, 102, 103, 104};\n   vector<char> list_values = {'j', 'o', 'e', 'b', 'o', 'b', 'm', 'a', 'r', 'k'};\n   vector<int> list_lengths = {3, 0, 3, 4};\n   vector<int> list_offsets = {0, 3, 3, 6};\n   vector<uint8_t> list_is_valid = {1, 0, 1, 1};\n   vector<uint8_t> struct_is_valid = {1, 1, 1, 1};\n \n-  vector<int32_t> unequal_int_values = {4, 2, 3, 1};\n+  vector<int32_t> unequal_int_values = {104, 102, 103, 101};\n   vector<char> unequal_list_values = {'j', 'o', 'e', 'b', 'o', 'b', 'l', 'u', 'c', 'y'};\n   vector<int> unequal_list_offsets = {0, 3, 4, 6};\n   vector<uint8_t> unequal_list_is_valid = {1, 1, 1, 1};\n@@ -3104,29 +3104,85 @@ TEST_F(TestStructBuilder, TestEquality) {\n   EXPECT_FALSE(array->RangeEquals(0, 1, 0, unequal_values_array));\n   EXPECT_TRUE(array->RangeEquals(1, 3, 1, unequal_values_array));\n   EXPECT_FALSE(array->RangeEquals(3, 4, 3, unequal_values_array));\n+}\n \n-  // ARROW-33 Slice / equality\n-  std::shared_ptr<Array> slice, slice2;\n+TEST_F(TestStructBuilder, TestZeroLength) {\n+  // All buffers are null\n+  Done();\n+  ASSERT_OK(ValidateArray(*result_));\n+}\n \n-  slice = array->Slice(2);\n-  slice2 = array->Slice(2);\n+TEST_F(TestStructBuilder, TestSlice) {\n+  std::shared_ptr<Array> array, equal_array;\n+  std::shared_ptr<Array> unequal_bitmap_array, unequal_offsets_array,\n+      unequal_values_array;\n+\n+  vector<int32_t> int_values = {101, 102, 103, 104};\n+  vector<char> list_values = {'j', 'o', 'e', 'b', 'o', 'b', 'm', 'a', 'r', 'k'};\n+  vector<int> list_lengths = {3, 0, 3, 4};\n+  vector<int> list_offsets = {0, 3, 3, 6};\n+  vector<uint8_t> list_is_valid = {1, 0, 1, 1};\n+  vector<uint8_t> struct_is_valid = {1, 1, 1, 1};\n+\n+  ListBuilder* list_vb = static_cast<ListBuilder*>(builder_->field_builder(0));\n+  Int8Builder* char_vb = static_cast<Int8Builder*>(list_vb->value_builder());\n+  Int32Builder* int_vb = static_cast<Int32Builder*>(builder_->field_builder(1));\n+  ASSERT_OK(builder_->Reserve(list_lengths.size()));\n+  ASSERT_OK(char_vb->Reserve(list_values.size()));\n+  ASSERT_OK(int_vb->Reserve(int_values.size()));\n+\n+  ASSERT_OK(builder_->Append(struct_is_valid.size(), struct_is_valid.data()));\n+  ASSERT_OK(\n+      list_vb->Append(list_offsets.data(), list_offsets.size(), list_is_valid.data()));\n+  for (int8_t value : list_values) {\n+    char_vb->UnsafeAppend(value);\n+  }\n+  for (int32_t value : int_values) {\n+    int_vb->UnsafeAppend(value);\n+  }\n+  ASSERT_OK(builder_->Finish(&array));\n+\n+  std::shared_ptr<StructArray> slice, slice2;\n+  std::shared_ptr<Int32Array> int_field;\n+  std::shared_ptr<ListArray> list_field;\n+\n+  slice = std::dynamic_pointer_cast<StructArray>(array->Slice(2));\n+  slice2 = std::dynamic_pointer_cast<StructArray>(array->Slice(2));\n   ASSERT_EQ(array->length() - 2, slice->length());\n \n   ASSERT_TRUE(slice->Equals(slice2));\n   ASSERT_TRUE(array->RangeEquals(2, slice->length(), 0, slice));\n \n-  slice = array->Slice(1, 2);\n-  slice2 = array->Slice(1, 2);\n+  int_field = std::dynamic_pointer_cast<Int32Array>(slice->field(1));\n+  ASSERT_EQ(int_field->length(), slice->length());\n+  ASSERT_EQ(int_field->Value(0), 103);\n+  ASSERT_EQ(int_field->Value(1), 104);\n+  ASSERT_EQ(int_field->null_count(), 0);\n+  list_field = std::dynamic_pointer_cast<ListArray>(slice->field(0));\n+  ASSERT_FALSE(list_field->IsNull(0));\n+  ASSERT_FALSE(list_field->IsNull(1));\n+  ASSERT_EQ(list_field->value_length(0), 3);\n+  ASSERT_EQ(list_field->value_length(1), 4);\n+  ASSERT_EQ(list_field->null_count(), 0);\n+\n+  slice = std::dynamic_pointer_cast<StructArray>(array->Slice(1, 2));\n+  slice2 = std::dynamic_pointer_cast<StructArray>(array->Slice(1, 2));\n   ASSERT_EQ(2, slice->length());\n \n   ASSERT_TRUE(slice->Equals(slice2));\n   ASSERT_TRUE(array->RangeEquals(1, 3, 0, slice));\n-}\n \n-TEST_F(TestStructBuilder, TestZeroLength) {\n-  // All buffers are null\n-  Done();\n-  ASSERT_OK(ValidateArray(*result_));\n+  int_field = std::dynamic_pointer_cast<Int32Array>(slice->field(1));\n+  ASSERT_EQ(int_field->length(), slice->length());\n+  ASSERT_EQ(int_field->Value(0), 102);\n+  ASSERT_EQ(int_field->Value(1), 103);\n+  ASSERT_EQ(int_field->null_count(), 0);\n+  list_field = std::dynamic_pointer_cast<ListArray>(slice->field(0));\n+  ASSERT_TRUE(list_field->IsNull(0));\n+  ASSERT_FALSE(list_field->IsNull(1));\n+  ASSERT_EQ(list_field->value_length(0), 0);\n+  ASSERT_EQ(list_field->value_length(1), 3);\n+  ASSERT_EQ(list_field->null_count(), 1);\n }\n \n // ----------------------------------------------------------------------\ndiff --git a/cpp/src/arrow/array.cc b/cpp/src/arrow/array.cc\nindex bd2b40c1a..7e66999a3 100644\n--- a/cpp/src/arrow/array.cc\n+++ b/cpp/src/arrow/array.cc\n@@ -353,7 +353,13 @@ StructArray::StructArray(const std::shared_ptr<DataType>& type, int64_t length,\n \n std::shared_ptr<Array> StructArray::field(int i) const {\n   if (!boxed_fields_[i]) {\n-    boxed_fields_[i] = MakeArray(data_->child_data[i]);\n+    std::shared_ptr<ArrayData> field_data;\n+    if (data_->offset != 0 || data_->child_data[i]->length != data_->length) {\n+      field_data = SliceData(*data_->child_data[i].get(), data_->offset, data_->length);\n+    } else {\n+      field_data = data_->child_data[i];\n+    }\n+    boxed_fields_[i] = MakeArray(field_data);\n   }\n   DCHECK(boxed_fields_[i]);\n   return boxed_fields_[i];\ndiff --git a/cpp/src/arrow/array.h b/cpp/src/arrow/array.h\nindex 04bd01261..0a155af7e 100644\n--- a/cpp/src/arrow/array.h\n+++ b/cpp/src/arrow/array.h\n@@ -149,6 +149,8 @@ struct ARROW_EXPORT ArrayData {\n   std::shared_ptr<DataType> type;\n   int64_t length;\n   int64_t null_count;\n+  // The logical start point into the physical buffers (in values, not bytes).\n+  // Note that, for child data, this must be *added* to the child data's own offset.\n   int64_t offset;\n   std::vector<std::shared_ptr<Buffer>> buffers;\n   std::vector<std::shared_ptr<ArrayData>> child_data;\n@@ -599,7 +601,8 @@ class ARROW_EXPORT StructArray : public Array {\n               int64_t offset = 0);\n \n   // Return a shared pointer in case the requestor desires to share ownership\n-  // with this array.\n+  // with this array.  The returned array has its offset, length and null\n+  // count adjusted.\n   std::shared_ptr<Array> field(int pos) const;\n \n  private:\ndiff --git a/cpp/src/arrow/compare.cc b/cpp/src/arrow/compare.cc\nindex 69cacbfac..002d4b852 100644\n--- a/cpp/src/arrow/compare.cc\n+++ b/cpp/src/arrow/compare.cc\n@@ -136,11 +136,7 @@ class RangeEqualsVisitor {\n       for (int j = 0; j < left.num_fields(); ++j) {\n         // TODO: really we should be comparing stretches of non-null data rather\n         // than looking at one value at a time.\n-        const int64_t left_abs_index = i + left.offset();\n-        const int64_t right_abs_index = o_i + right.offset();\n-\n-        equal_fields = left.field(j)->RangeEquals(left_abs_index, left_abs_index + 1,\n-                                                  right_abs_index, right.field(j));\n+        equal_fields = left.field(j)->RangeEquals(i, i + 1, o_i, right.field(j));\n         if (!equal_fields) {\n           return false;\n         }\n@@ -467,9 +463,9 @@ class ArrayEqualsVisitor : public RangeEqualsVisitor {\n       return Status::OK();\n     }\n \n-    result_ =\n-        left.values()->RangeEquals(left.value_offset(0), left.value_offset(left.length()),\n-                                   right.value_offset(0), right.values());\n+    result_ = left.values()->RangeEquals(\n+        left.value_offset(0), left.value_offset(left.length()) - left.value_offset(0),\n+        right.value_offset(0), right.values());\n     return Status::OK();\n   }\n \ndiff --git a/cpp/src/arrow/ipc/writer.cc b/cpp/src/arrow/ipc/writer.cc\nindex 3debd767e..078efe1b0 100644\n--- a/cpp/src/arrow/ipc/writer.cc\n+++ b/cpp/src/arrow/ipc/writer.cc\n@@ -376,10 +376,6 @@ class RecordBatchSerializer : public ArrayVisitor {\n     --max_recursion_depth_;\n     for (int i = 0; i < array.num_fields(); ++i) {\n       std::shared_ptr<Array> field = array.field(i);\n-      if (array.offset() != 0 || array.length() < field->length()) {\n-        // If offset is non-zero, slice the child array\n-        field = field->Slice(array.offset(), array.length());\n-      }\n       RETURN_NOT_OK(VisitArray(*field));\n     }\n     ++max_recursion_depth_;\ndiff --git a/cpp/src/arrow/pretty_print.cc b/cpp/src/arrow/pretty_print.cc\nindex 994f528ea..38ccb7b50 100644\n--- a/cpp/src/arrow/pretty_print.cc\n+++ b/cpp/src/arrow/pretty_print.cc\n@@ -233,7 +233,8 @@ class ArrayPrinter : public PrettyPrinter {\n     Newline();\n     Write(\"-- values: \");\n     auto values =\n-        array.values()->Slice(array.value_offset(0), array.value_offset(array.length()));\n+        array.values()->Slice(array.value_offset(0),\n+                              array.value_offset(array.length()) - array.value_offset(0));\n     RETURN_NOT_OK(PrettyPrint(*values, indent_ + 2, sink_));\n \n     return Status::OK();\n@@ -264,7 +265,7 @@ class ArrayPrinter : public PrettyPrinter {\n     for (int i = 0; i < array.num_fields(); ++i) {\n       children.emplace_back(array.field(i));\n     }\n-    return PrintChildren(children, array.offset(), array.length());\n+    return PrintChildren(children, 0, array.length());\n   }\n \n   Status Visit(const UnionArray& array) {\ndiff --git a/python/pyarrow/includes/libarrow.pxd b/python/pyarrow/includes/libarrow.pxd\nindex 01a641896..589103635 100644\n--- a/python/pyarrow/includes/libarrow.pxd\n+++ b/python/pyarrow/includes/libarrow.pxd\n@@ -388,7 +388,6 @@ cdef extern from \"arrow/api.h\" namespace \"arrow\" nogil:\n                      int64_t offset=0)\n \n         shared_ptr[CArray] field(int pos)\n-        const vector[shared_ptr[CArray]] fields()\n \n     CStatus ValidateArray(const CArray& array)\n \ndiff --git a/python/pyarrow/scalar.pxi b/python/pyarrow/scalar.pxi\nindex a801acd69..2692ace40 100644\n--- a/python/pyarrow/scalar.pxi\n+++ b/python/pyarrow/scalar.pxi\n@@ -342,6 +342,7 @@ cdef class UnionValue(ArrayValue):\n     def as_py(self):\n         return self.getitem(self.index).as_py()\n \n+\n cdef class FixedSizeBinaryValue(ArrayValue):\n \n     def as_py(self):\n@@ -358,14 +359,16 @@ cdef class FixedSizeBinaryValue(ArrayValue):\n \n \n cdef class StructValue(ArrayValue):\n+\n     def as_py(self):\n         cdef:\n             CStructArray* ap\n             vector[shared_ptr[CField]] child_fields = self.type.type.children()\n+\n         ap = <CStructArray*> self.sp_array.get()\n-        wrapped_arrays = (pyarrow_wrap_array(ap.field(i))\n-                          for i in range(ap.num_fields()))\n-        child_names = (child.get().name() for child in child_fields)\n+        wrapped_arrays = [pyarrow_wrap_array(ap.field(i))\n+                          for i in range(ap.num_fields())]\n+        child_names = [child.get().name() for child in child_fields]\n         # Return the struct as a dict\n         return {\n             frombytes(name): child_array[self.index].as_py()\n@@ -373,6 +376,7 @@ cdef class StructValue(ArrayValue):\n             zip(child_names, wrapped_arrays)\n         }\n \n+\n cdef dict _scalar_classes = {\n     _Type_BOOL: BooleanValue,\n     _Type_UINT8: UInt8Value,\ndiff --git a/python/pyarrow/tests/test_array.py b/python/pyarrow/tests/test_array.py\nindex fea56862c..6faf4566b 100644\n--- a/python/pyarrow/tests/test_array.py\n+++ b/python/pyarrow/tests/test_array.py\n@@ -145,6 +145,15 @@ def test_array_slice():\n             assert arr[start:stop].to_pylist() == arr.to_pylist()[start:stop]\n \n \n+def test_struct_array_slice():\n+    # ARROW-2311: slicing nested arrays needs special care\n+    ty = pa.struct([pa.field('a', pa.int8()),\n+                    pa.field('b', pa.float32())])\n+    arr = pa.array([(1, 2.5), (3, 4.5), (5, 6.5)], type=ty)\n+    assert arr[1:].to_pylist() == [{'a': 3, 'b': 4.5},\n+                                   {'a': 5, 'b': 6.5}]\n+\n+\n def test_array_factory_invalid_type():\n     arr = np.array([datetime.timedelta(1), datetime.timedelta(2)])\n     with pytest.raises(ValueError):\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-03-15T15:49:51.145+0000",
                    "updated": "2018-03-15T15:49:51.145+0000"
                }
            ],
            "maxResults": 3,
            "total": 3,
            "startAt": 0
        },
        "customfield_12311820": "0|i3rbjj:",
        "customfield_12314139": null
    }
}