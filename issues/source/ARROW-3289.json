{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13186686",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186686",
    "key": "ARROW-3289",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343937",
                "id": "12343937",
                "description": "",
                "name": "0.13.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-04-01"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "flight",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
            "name": "lidavidm",
            "key": "lidavidm",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "David Li",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 40200,
            "total": 40200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 40200,
            "total": 40200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3289/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 72,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186686/worklog/191882",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lihalite commented on pull request #3524: ARROW-3289: [C++] Implement Flight DoPut\nURL: https://github.com/apache/arrow/pull/3524\n \n \n   Implements server/client side DoPut in C++ and extends the integration tests to exercise this.\r\n   \r\n   We may want a different API for client-side DoPut that exposes any potential server response; I made it give the client a RecordBatchWriter to be symmetric with DoGet for now though.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-29T20:20:53.642+0000",
                    "updated": "2019-01-29T20:20:53.642+0000",
                    "started": "2019-01-29T20:20:53.641+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "191882",
                    "issueId": "13186686"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186686/worklog/193220",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #3524: ARROW-3289: [C++] Implement Flight DoPut\nURL: https://github.com/apache/arrow/pull/3524#issuecomment-459608444\n \n \n   I am headed out of town tomorrow so I may not be able to get to this until Monday. \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-01T05:13:08.246+0000",
                    "updated": "2019-02-01T05:13:08.246+0000",
                    "started": "2019-02-01T05:13:08.246+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "193220",
                    "issueId": "13186686"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186686/worklog/193363",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lihalite commented on issue #3524: ARROW-3289: [C++] Implement Flight DoPut\nURL: https://github.com/apache/arrow/pull/3524#issuecomment-459726085\n \n \n   No worries! I have Python client bindings in the pipeline, might take a look at server as well in the meantime.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-01T13:42:13.490+0000",
                    "updated": "2019-02-01T13:42:13.490+0000",
                    "started": "2019-02-01T13:42:13.478+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "193363",
                    "issueId": "13186686"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186686/worklog/193395",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #3524: ARROW-3289: [C++] Implement Flight DoPut\nURL: https://github.com/apache/arrow/pull/3524#discussion_r253071365\n \n \n\n ##########\n File path: cpp/src/arrow/flight/server.cc\n ##########\n @@ -47,145 +45,63 @@ using ServerWriter = grpc::ServerWriter<T>;\n \n namespace pb = arrow::flight::protocol;\n \n-constexpr int64_t kInt32Max = std::numeric_limits<int32_t>::max();\n-\n-namespace grpc {\n-\n-using google::protobuf::internal::WireFormatLite;\n-using google::protobuf::io::CodedOutputStream;\n+namespace arrow {\n+namespace flight {\n \n-// More efficient writing of FlightData to gRPC output buffer\n-// Implementation of ZeroCopyOutputStream that writes to a fixed-size buffer\n-class FixedSizeProtoWriter : public ::google::protobuf::io::ZeroCopyOutputStream {\n- public:\n-  explicit FixedSizeProtoWriter(grpc_slice slice)\n-      : slice_(slice),\n-        bytes_written_(0),\n-        total_size_(static_cast<int>(GRPC_SLICE_LENGTH(slice))) {}\n-\n-  bool Next(void** data, int* size) override {\n-    // Consume the whole slice\n-    *data = GRPC_SLICE_START_PTR(slice_) + bytes_written_;\n-    *size = total_size_ - bytes_written_;\n-    bytes_written_ = total_size_;\n-    return true;\n+#define CHECK_ARG_NOT_NULL(VAL, MESSAGE)                              \\\n+  if (VAL == nullptr) {                                               \\\n+    return grpc::Status(grpc::StatusCode::INVALID_ARGUMENT, MESSAGE); \\\n   }\n \n-  void BackUp(int count) override { bytes_written_ -= count; }\n-\n-  int64_t ByteCount() const override { return bytes_written_; }\n-\n- private:\n-  grpc_slice slice_;\n-  int bytes_written_;\n-  int total_size_;\n-};\n-\n-// Write FlightData to a grpc::ByteBuffer without extra copying\n-template <>\n-class SerializationTraits<IpcPayload> {\n+class ARROW_EXPORT FlightMessageReaderImpl : public FlightMessageReader {\n \n Review comment:\n   `ARROW_EXPORT` not needed here\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-01T14:57:40.058+0000",
                    "updated": "2019-02-01T14:57:40.058+0000",
                    "started": "2019-02-01T14:57:40.057+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "193395",
                    "issueId": "13186686"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186686/worklog/193396",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #3524: ARROW-3289: [C++] Implement Flight DoPut\nURL: https://github.com/apache/arrow/pull/3524#discussion_r253069276\n \n \n\n ##########\n File path: cpp/src/arrow/flight/client.cc\n ##########\n @@ -259,6 +111,65 @@ class FlightStreamReader : public RecordBatchReader {\n   std::unique_ptr<grpc::ClientReader<pb::FlightData>> stream_;\n };\n \n+class FlightClient;\n+\n+/// \\brief A RecordBatchWriter implementation that writes to a Flight\n+/// DoPut stream.\n+class FlightStreamWriter : public ipc::RecordBatchWriter {\n+ public:\n+  explicit FlightStreamWriter(std::unique_ptr<ClientRpc>&& rpc,\n+                              const FlightDescriptor& descriptor,\n+                              const std::shared_ptr<Schema>& schema)\n+      : rpc_{std::move(rpc)},\n+        descriptor_{descriptor},\n+        schema_{schema},\n+        pool_{default_memory_pool()} {}\n+\n+  Status WriteRecordBatch(const RecordBatch& batch, bool allow_64bit = false) override {\n+    IpcPayload payload;\n+    RETURN_NOT_OK(ipc::internal::GetRecordBatchPayload(batch, pool_, &payload));\n+    auto custom_writer = reinterpret_cast<grpc::ClientWriter<IpcPayload>*>(writer_.get());\n+    // Explicitly specify the override to invoke - otherwise compiler\n+    // may invoke through vtable (not updated by reinterpret_cast)\n+    if (!custom_writer->grpc::ClientWriter<IpcPayload>::Write(payload,\n+                                                              grpc::WriteOptions())) {\n+      // Stream ended?\n+      return Status::UnknownError(\"Could not write record batch to stream\");\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status Close() override {\n+    bool finished_writes = writer_->WritesDone();\n+    RETURN_NOT_OK(internal::FromGrpcStatus(writer_->Finish()));\n+    if (!finished_writes) {\n+      return Status::UnknownError(\n+          \"Could not finish writing record batches before closing\");\n+    }\n+    return Status::OK();\n+  }\n+\n+  void set_memory_pool(MemoryPool* pool) override { pool_ = pool; }\n+\n+ private:\n+  /// \\brief Set the gRPC writer backing this Flight stream.\n+  /// \\param [in] writer the gRPC writer\n+  void set_stream(std::unique_ptr<grpc::ClientWriter<pb::FlightData>>&& writer) {\n \n Review comment:\n   pass by value\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-01T14:57:40.063+0000",
                    "updated": "2019-02-01T14:57:40.063+0000",
                    "started": "2019-02-01T14:57:40.062+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "193396",
                    "issueId": "13186686"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186686/worklog/193397",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #3524: ARROW-3289: [C++] Implement Flight DoPut\nURL: https://github.com/apache/arrow/pull/3524#discussion_r253068688\n \n \n\n ##########\n File path: cpp/src/arrow/flight/client.cc\n ##########\n @@ -259,6 +111,65 @@ class FlightStreamReader : public RecordBatchReader {\n   std::unique_ptr<grpc::ClientReader<pb::FlightData>> stream_;\n };\n \n+class FlightClient;\n+\n+/// \\brief A RecordBatchWriter implementation that writes to a Flight\n+/// DoPut stream.\n+class FlightStreamWriter : public ipc::RecordBatchWriter {\n+ public:\n+  explicit FlightStreamWriter(std::unique_ptr<ClientRpc>&& rpc,\n \n Review comment:\n   It's more flexible to pass `std::unique_ptr` by value\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-01T14:57:40.066+0000",
                    "updated": "2019-02-01T14:57:40.066+0000",
                    "started": "2019-02-01T14:57:40.065+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "193397",
                    "issueId": "13186686"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186686/worklog/193398",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #3524: ARROW-3289: [C++] Implement Flight DoPut\nURL: https://github.com/apache/arrow/pull/3524#discussion_r253070469\n \n \n\n ##########\n File path: cpp/src/arrow/flight/client.cc\n ##########\n @@ -259,6 +111,65 @@ class FlightStreamReader : public RecordBatchReader {\n   std::unique_ptr<grpc::ClientReader<pb::FlightData>> stream_;\n };\n \n+class FlightClient;\n+\n+/// \\brief A RecordBatchWriter implementation that writes to a Flight\n+/// DoPut stream.\n+class FlightStreamWriter : public ipc::RecordBatchWriter {\n+ public:\n+  explicit FlightStreamWriter(std::unique_ptr<ClientRpc>&& rpc,\n+                              const FlightDescriptor& descriptor,\n+                              const std::shared_ptr<Schema>& schema)\n+      : rpc_{std::move(rpc)},\n+        descriptor_{descriptor},\n+        schema_{schema},\n+        pool_{default_memory_pool()} {}\n+\n+  Status WriteRecordBatch(const RecordBatch& batch, bool allow_64bit = false) override {\n+    IpcPayload payload;\n+    RETURN_NOT_OK(ipc::internal::GetRecordBatchPayload(batch, pool_, &payload));\n+    auto custom_writer = reinterpret_cast<grpc::ClientWriter<IpcPayload>*>(writer_.get());\n+    // Explicitly specify the override to invoke - otherwise compiler\n+    // may invoke through vtable (not updated by reinterpret_cast)\n+    if (!custom_writer->grpc::ClientWriter<IpcPayload>::Write(payload,\n+                                                              grpc::WriteOptions())) {\n+      // Stream ended?\n+      return Status::UnknownError(\"Could not write record batch to stream\");\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status Close() override {\n+    bool finished_writes = writer_->WritesDone();\n+    RETURN_NOT_OK(internal::FromGrpcStatus(writer_->Finish()));\n+    if (!finished_writes) {\n+      return Status::UnknownError(\n+          \"Could not finish writing record batches before closing\");\n+    }\n+    return Status::OK();\n+  }\n+\n+  void set_memory_pool(MemoryPool* pool) override { pool_ = pool; }\n+\n+ private:\n+  /// \\brief Set the gRPC writer backing this Flight stream.\n+  /// \\param [in] writer the gRPC writer\n+  void set_stream(std::unique_ptr<grpc::ClientWriter<pb::FlightData>>&& writer) {\n+    writer_ = std::move(writer);\n+  }\n+\n+  // TODO: there isn't a way to access this as a user.\n \n Review comment:\n   As I was reading this I was thinking about whether returning `arrow::ipc::RecordBatchWriter` is the best thing. If we need other kinds of methods related to acks or RPC-specific details, it might be worth defining an Flight-specific class that is returned from these methods\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-01T14:57:40.077+0000",
                    "updated": "2019-02-01T14:57:40.077+0000",
                    "started": "2019-02-01T14:57:40.077+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "193398",
                    "issueId": "13186686"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186686/worklog/193399",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #3524: ARROW-3289: [C++] Implement Flight DoPut\nURL: https://github.com/apache/arrow/pull/3524#discussion_r253068542\n \n \n\n ##########\n File path: cpp/src/arrow/flight/client.cc\n ##########\n @@ -227,7 +77,9 @@ class FlightStreamReader : public RecordBatchReader {\n     // For customizing read path for better memory/serialization efficiency\n     auto custom_reader = reinterpret_cast<grpc::ClientReader<FlightData>*>(stream_.get());\n \n-    if (custom_reader->Read(&data)) {\n+    // Explicitly specify the override to invoke - otherwise compiler\n+    // may invoke through vtable (not updated by reinterpret_cast)\n \n Review comment:\n   That's interesting. Which compiler did you observe this on? I didn't think this was a virtual method\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-01T14:57:40.091+0000",
                    "updated": "2019-02-01T14:57:40.091+0000",
                    "started": "2019-02-01T14:57:40.091+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "193399",
                    "issueId": "13186686"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186686/worklog/193400",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #3524: ARROW-3289: [C++] Implement Flight DoPut\nURL: https://github.com/apache/arrow/pull/3524#discussion_r253068822\n \n \n\n ##########\n File path: cpp/src/arrow/flight/client.cc\n ##########\n @@ -259,6 +111,65 @@ class FlightStreamReader : public RecordBatchReader {\n   std::unique_ptr<grpc::ClientReader<pb::FlightData>> stream_;\n };\n \n+class FlightClient;\n+\n+/// \\brief A RecordBatchWriter implementation that writes to a Flight\n+/// DoPut stream.\n+class FlightStreamWriter : public ipc::RecordBatchWriter {\n+ public:\n+  explicit FlightStreamWriter(std::unique_ptr<ClientRpc>&& rpc,\n+                              const FlightDescriptor& descriptor,\n+                              const std::shared_ptr<Schema>& schema)\n \n Review comment:\n   Pass in `MemoryPool* pool = default_memory_pool()` maybe (though you can use `set_memory_pool`)?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-01T14:57:40.167+0000",
                    "updated": "2019-02-01T14:57:40.167+0000",
                    "started": "2019-02-01T14:57:40.166+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "193400",
                    "issueId": "13186686"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186686/worklog/193401",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #3524: ARROW-3289: [C++] Implement Flight DoPut\nURL: https://github.com/apache/arrow/pull/3524#discussion_r253072901\n \n \n\n ##########\n File path: cpp/src/arrow/flight/server.cc\n ##########\n @@ -293,7 +209,36 @@ class FlightServiceImpl : public FlightService::Service {\n \n   grpc::Status DoPut(ServerContext* context, grpc::ServerReader<pb::FlightData>* reader,\n                      pb::PutResult* response) {\n-    return grpc::Status(grpc::StatusCode::UNIMPLEMENTED, \"\");\n+    // Get metadata\n+    pb::FlightData data;\n+    if (reader->Read(&data)) {\n+      FlightDescriptor descriptor;\n+      std::unique_ptr<ipc::Message> message;\n+      std::shared_ptr<Schema> schema;\n+      GRPC_RETURN_NOT_OK(internal::FromProto(data.flight_descriptor(), &descriptor));\n+      std::shared_ptr<Buffer> header_buf;\n+      std::shared_ptr<Buffer> body_buf;\n+      GRPC_RETURN_NOT_OK(Buffer::FromString(data.data_header(), &header_buf));\n+      GRPC_RETURN_NOT_OK(Buffer::FromString(data.data_body(), &body_buf));\n+      GRPC_RETURN_NOT_OK(ipc::Message::Open(header_buf, body_buf, &message));\n \n Review comment:\n   Nit: this is enough boilerplate to perhaps be factored out. This might also help comparing proto-deserialization speed vs.  the zero copy optimization. A thought for a follow up JIRA perhaps\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-01T14:57:40.187+0000",
                    "updated": "2019-02-01T14:57:40.187+0000",
                    "started": "2019-02-01T14:57:40.186+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "193401",
                    "issueId": "13186686"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186686/worklog/193402",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #3524: ARROW-3289: [C++] Implement Flight DoPut\nURL: https://github.com/apache/arrow/pull/3524#discussion_r253075493\n \n \n\n ##########\n File path: cpp/src/arrow/flight/test-integration-server.cc\n ##########\n @@ -36,74 +37,27 @@ DEFINE_int32(port, 31337, \"Server port to listen on\");\n namespace arrow {\n namespace flight {\n \n-class JsonReaderRecordBatchStream : public FlightDataStream {\n- public:\n-  explicit JsonReaderRecordBatchStream(\n-      std::unique_ptr<ipc::internal::json::JsonReader>&& reader)\n-      : index_(0), pool_(default_memory_pool()), reader_(std::move(reader)) {}\n-\n-  std::shared_ptr<Schema> schema() override { return reader_->schema(); }\n-\n-  Status Next(ipc::internal::IpcPayload* payload) override {\n-    if (index_ >= reader_->num_record_batches()) {\n-      // Signal that iteration is over\n-      payload->metadata = nullptr;\n-      return Status::OK();\n-    }\n-\n-    std::shared_ptr<RecordBatch> batch;\n-    RETURN_NOT_OK(reader_->ReadRecordBatch(index_, &batch));\n-    index_++;\n-\n-    if (!batch) {\n-      // Signal that iteration is over\n-      payload->metadata = nullptr;\n-      return Status::OK();\n-    } else {\n-      return ipc::internal::GetRecordBatchPayload(*batch, pool_, payload);\n-    }\n-  }\n-\n- private:\n-  int index_;\n-  MemoryPool* pool_;\n-  std::unique_ptr<ipc::internal::json::JsonReader> reader_;\n-};\n-\n class FlightIntegrationTestServer : public FlightServerBase {\n-  Status ReadJson(const std::string& json_path,\n-                  std::unique_ptr<ipc::internal::json::JsonReader>* out) {\n-    std::shared_ptr<io::ReadableFile> in_file;\n-    std::cout << \"Opening JSON file '\" << json_path << \"'\" << std::endl;\n-    RETURN_NOT_OK(io::ReadableFile::Open(json_path, &in_file));\n-\n-    int64_t file_size = 0;\n-    RETURN_NOT_OK(in_file->GetSize(&file_size));\n-\n-    std::shared_ptr<Buffer> json_buffer;\n-    RETURN_NOT_OK(in_file->Read(file_size, &json_buffer));\n-\n-    RETURN_NOT_OK(arrow::ipc::internal::json::JsonReader::Open(json_buffer, out));\n-    return Status::OK();\n-  }\n-\n   Status GetFlightInfo(const FlightDescriptor& request,\n                        std::unique_ptr<FlightInfo>* info) override {\n     if (request.type == FlightDescriptor::PATH) {\n       if (request.path.size() == 0) {\n         return Status::Invalid(\"Invalid path\");\n       }\n \n-      std::unique_ptr<arrow::ipc::internal::json::JsonReader> reader;\n-      RETURN_NOT_OK(ReadJson(request.path.back(), &reader));\n+      auto data = uploaded_chunks.find(request.path[0]);\n+      if (data == uploaded_chunks.end()) {\n+        return Status::KeyError(\"Could not find flight.\");\n \n Review comment:\n   `return Status::KeyError(\"Could not find flight \", request.path[0]);` would be a helpful output\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-01T14:57:40.197+0000",
                    "updated": "2019-02-01T14:57:40.197+0000",
                    "started": "2019-02-01T14:57:40.196+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "193402",
                    "issueId": "13186686"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186686/worklog/193403",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #3524: ARROW-3289: [C++] Implement Flight DoPut\nURL: https://github.com/apache/arrow/pull/3524#discussion_r253070857\n \n \n\n ##########\n File path: cpp/src/arrow/flight/client.h\n ##########\n @@ -86,20 +92,21 @@ class ARROW_EXPORT FlightClient {\n \n   /// \\brief Given a flight ticket and schema, request to be sent the\n   /// stream. Returns record batch stream reader\n-  /// \\param[in] ticket\n+  /// \\param[in] ticket The flight ticket to use\n   /// \\param[in] schema the schema of the stream data as computed by\n   /// GetFlightInfo\n   /// \\param[out] stream the returned RecordBatchReader\n   /// \\return Status\n   Status DoGet(const Ticket& ticket, const std::shared_ptr<Schema>& schema,\n                std::unique_ptr<RecordBatchReader>* stream);\n \n-  /// \\brief Initiate DoPut RPC, returns FlightPutWriter interface to\n-  /// write. Not yet implemented\n-  /// \\param[in] schema the schema of the stream data\n-  /// \\param[out] stream the created stream to write record batches to\n+  /// \\brief Upload data to a Flight described by the given descriptor.\n+  /// \\param[in] descriptor the descriptor of the stream\n+  /// \\param[in] schema the schema for the data to upload\n+  /// \\param[out] stream a writer to write record batches to\n \n Review comment:\n   Comment that the caller is responsible for calling `Close` on the returned object to end the Put stream\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-01T14:57:40.204+0000",
                    "updated": "2019-02-01T14:57:40.204+0000",
                    "started": "2019-02-01T14:57:40.203+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "193403",
                    "issueId": "13186686"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186686/worklog/193404",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #3524: ARROW-3289: [C++] Implement Flight DoPut\nURL: https://github.com/apache/arrow/pull/3524#discussion_r253071483\n \n \n\n ##########\n File path: cpp/src/arrow/flight/server.cc\n ##########\n @@ -47,145 +45,63 @@ using ServerWriter = grpc::ServerWriter<T>;\n \n namespace pb = arrow::flight::protocol;\n \n-constexpr int64_t kInt32Max = std::numeric_limits<int32_t>::max();\n-\n-namespace grpc {\n-\n-using google::protobuf::internal::WireFormatLite;\n-using google::protobuf::io::CodedOutputStream;\n+namespace arrow {\n+namespace flight {\n \n-// More efficient writing of FlightData to gRPC output buffer\n-// Implementation of ZeroCopyOutputStream that writes to a fixed-size buffer\n-class FixedSizeProtoWriter : public ::google::protobuf::io::ZeroCopyOutputStream {\n- public:\n-  explicit FixedSizeProtoWriter(grpc_slice slice)\n-      : slice_(slice),\n-        bytes_written_(0),\n-        total_size_(static_cast<int>(GRPC_SLICE_LENGTH(slice))) {}\n-\n-  bool Next(void** data, int* size) override {\n-    // Consume the whole slice\n-    *data = GRPC_SLICE_START_PTR(slice_) + bytes_written_;\n-    *size = total_size_ - bytes_written_;\n-    bytes_written_ = total_size_;\n-    return true;\n+#define CHECK_ARG_NOT_NULL(VAL, MESSAGE)                              \\\n+  if (VAL == nullptr) {                                               \\\n+    return grpc::Status(grpc::StatusCode::INVALID_ARGUMENT, MESSAGE); \\\n   }\n \n-  void BackUp(int count) override { bytes_written_ -= count; }\n-\n-  int64_t ByteCount() const override { return bytes_written_; }\n-\n- private:\n-  grpc_slice slice_;\n-  int bytes_written_;\n-  int total_size_;\n-};\n-\n-// Write FlightData to a grpc::ByteBuffer without extra copying\n-template <>\n-class SerializationTraits<IpcPayload> {\n+class ARROW_EXPORT FlightMessageReaderImpl : public FlightMessageReader {\n  public:\n-  static grpc::Status Deserialize(ByteBuffer* buffer, IpcPayload* out) {\n-    return grpc::Status(grpc::StatusCode::UNIMPLEMENTED,\n-                        \"IpcPayload deserialization not implemented\");\n-  }\n-\n-  static grpc::Status Serialize(const IpcPayload& msg, ByteBuffer* out,\n-                                bool* own_buffer) {\n-    size_t total_size = 0;\n-\n-    DCHECK_LT(msg.metadata->size(), kInt32Max);\n-    const int32_t metadata_size = static_cast<int32_t>(msg.metadata->size());\n-\n-    // 1 byte for metadata tag\n-    total_size += 1 + WireFormatLite::LengthDelimitedSize(metadata_size);\n-\n-    int64_t body_size = 0;\n-    for (const auto& buffer : msg.body_buffers) {\n-      // Buffer may be null when the row length is zero, or when all\n-      // entries are invalid.\n-      if (!buffer) continue;\n-\n-      body_size += buffer->size();\n-\n-      const int64_t remainder = buffer->size() % 8;\n-      if (remainder) {\n-        body_size += 8 - remainder;\n-      }\n-    }\n-\n-    // 2 bytes for body tag\n-    // Only written when there are body buffers\n-    if (msg.body_length > 0) {\n-      total_size +=\n-          2 + WireFormatLite::LengthDelimitedSize(static_cast<size_t>(body_size));\n-    }\n-\n-    // TODO(wesm): messages over 2GB unlikely to be yet supported\n-    if (total_size > kInt32Max) {\n-      return grpc::Status(grpc::StatusCode::INVALID_ARGUMENT,\n-                          \"Cannot send record batches exceeding 2GB yet\");\n+  FlightMessageReaderImpl(const FlightDescriptor& descriptor,\n+                          std::shared_ptr<Schema> schema,\n+                          grpc::ServerReader<pb::FlightData>* reader)\n+      : descriptor_{descriptor},\n+        schema_{schema},\n+        reader_{reader},\n+        stream_finished_{false} {}\n \n Review comment:\n   Use parens in each of these initializations instead of braces to be more style-conforming\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-01T14:57:40.226+0000",
                    "updated": "2019-02-01T14:57:40.226+0000",
                    "started": "2019-02-01T14:57:40.225+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "193404",
                    "issueId": "13186686"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186686/worklog/193405",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #3524: ARROW-3289: [C++] Implement Flight DoPut\nURL: https://github.com/apache/arrow/pull/3524#discussion_r253075118\n \n \n\n ##########\n File path: cpp/src/arrow/flight/test-integration-client.cc\n ##########\n @@ -60,23 +91,43 @@ int main(int argc, char** argv) {\n     return -1;\n   }\n \n-  arrow::flight::Ticket ticket = info->endpoints()[0].ticket;\n-  std::unique_ptr<arrow::RecordBatchReader> stream;\n-  ABORT_NOT_OK(client->DoGet(ticket, schema, &stream));\n-\n-  std::shared_ptr<arrow::io::FileOutputStream> out_file;\n-  ABORT_NOT_OK(arrow::io::FileOutputStream::Open(FLAGS_output, &out_file));\n-  std::shared_ptr<arrow::ipc::RecordBatchWriter> writer;\n-  ABORT_NOT_OK(arrow::ipc::RecordBatchFileWriter::Open(out_file.get(), schema, &writer));\n-\n-  std::shared_ptr<arrow::RecordBatch> chunk;\n-  while (true) {\n-    ABORT_NOT_OK(stream->ReadNext(&chunk));\n-    if (chunk == nullptr) break;\n-    ABORT_NOT_OK(writer->WriteRecordBatch(*chunk));\n+  for (const arrow::flight::FlightEndpoint& endpoint : info->endpoints()) {\n+    const auto& ticket = endpoint.ticket;\n+\n+    auto locations = endpoint.locations;\n+    if (locations.size() == 0) {\n+      locations = {arrow::flight::Location{FLAGS_host, FLAGS_port}};\n+    }\n+\n+    for (const auto location : locations) {\n+      std::cout << \"Verifying location \" << location.host << ':' << location.port\n+                << std::endl;\n+      // 3. Download the data from the server.\n \n Review comment:\n   You could factor out some of these canonical workflows into functions. e.g.\r\n   \r\n   `ABORT_NOT_OK(ConsumeEndpoint(location, &retrieved_chunks))`\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-01T14:57:40.253+0000",
                    "updated": "2019-02-01T14:57:40.253+0000",
                    "started": "2019-02-01T14:57:40.252+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "193405",
                    "issueId": "13186686"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186686/worklog/193406",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #3524: ARROW-3289: [C++] Implement Flight DoPut\nURL: https://github.com/apache/arrow/pull/3524#discussion_r253074167\n \n \n\n ##########\n File path: cpp/src/arrow/flight/test-integration-client.cc\n ##########\n @@ -49,6 +48,38 @@ int main(int argc, char** argv) {\n \n   arrow::flight::FlightDescriptor descr{\n       arrow::flight::FlightDescriptor::PATH, \"\", {FLAGS_path}};\n+\n+  // 1. Put the data to the server.\n+  std::unique_ptr<arrow::ipc::internal::json::JsonReader> reader;\n+  std::shared_ptr<arrow::io::ReadableFile> in_file;\n+  std::cout << \"Opening JSON file '\" << FLAGS_path << \"'\" << std::endl;\n+  ABORT_NOT_OK(arrow::io::ReadableFile::Open(FLAGS_path, &in_file));\n+\n+  int64_t file_size = 0;\n+  ABORT_NOT_OK(in_file->GetSize(&file_size));\n+\n+  std::shared_ptr<arrow::Buffer> json_buffer;\n+  ABORT_NOT_OK(in_file->Read(file_size, &json_buffer));\n+\n+  ABORT_NOT_OK(arrow::ipc::internal::json::JsonReader::Open(json_buffer, &reader));\n \n Review comment:\n   Factor lines 54 through 64 into a method, then maybe we can add it to arrow/ipc/json.h? see https://issues.apache.org/jira/browse/ARROW-4409\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-01T14:57:40.281+0000",
                    "updated": "2019-02-01T14:57:40.281+0000",
                    "started": "2019-02-01T14:57:40.280+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "193406",
                    "issueId": "13186686"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186686/worklog/193407",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #3524: ARROW-3289: [C++] Implement Flight DoPut\nURL: https://github.com/apache/arrow/pull/3524#discussion_r253073615\n \n \n\n ##########\n File path: cpp/src/arrow/flight/server.cc\n ##########\n @@ -293,7 +209,36 @@ class FlightServiceImpl : public FlightService::Service {\n \n   grpc::Status DoPut(ServerContext* context, grpc::ServerReader<pb::FlightData>* reader,\n                      pb::PutResult* response) {\n-    return grpc::Status(grpc::StatusCode::UNIMPLEMENTED, \"\");\n+    // Get metadata\n+    pb::FlightData data;\n+    if (reader->Read(&data)) {\n+      FlightDescriptor descriptor;\n+      std::unique_ptr<ipc::Message> message;\n+      std::shared_ptr<Schema> schema;\n+      GRPC_RETURN_NOT_OK(internal::FromProto(data.flight_descriptor(), &descriptor));\n+      std::shared_ptr<Buffer> header_buf;\n+      std::shared_ptr<Buffer> body_buf;\n+      GRPC_RETURN_NOT_OK(Buffer::FromString(data.data_header(), &header_buf));\n+      GRPC_RETURN_NOT_OK(Buffer::FromString(data.data_body(), &body_buf));\n+      GRPC_RETURN_NOT_OK(ipc::Message::Open(header_buf, body_buf, &message));\n+\n+      if (!message || message->type() != ipc::Message::Type::SCHEMA) {\n+        return internal::ToGrpcStatus(\n+            Status(StatusCode::Invalid, \"DoPut must start with schema/descriptor\"));\n+      } else {\n+        GRPC_RETURN_NOT_OK(ipc::ReadSchema(*message, &schema));\n+\n+        auto message_reader = std::unique_ptr<FlightMessageReader>(\n+            new FlightMessageReaderImpl(descriptor, schema, reader));\n+        return internal::ToGrpcStatus(server_->DoPut(std::move(message_reader)));\n+      }\n+    } else {\n+      // TODO(lihalite): gRPC doesn't let us distinguish between no\n+      // message sent, and message failed to deserialize. IMO, we\n+      // should add logging around the Status returns in\n+      // serialization-internal.h to make debugging such cases easier.\n+      return grpc::Status::OK;\n \n Review comment:\n   Yes, though in this particular case the `SerializationTraits` customization isn't being invoked unless I misread. Does gRPC provide any way to distinguish deserialization failures in its out-of-the-box protobuf API?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-01T14:57:40.284+0000",
                    "updated": "2019-02-01T14:57:40.284+0000",
                    "started": "2019-02-01T14:57:40.284+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "193407",
                    "issueId": "13186686"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186686/worklog/193408",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #3524: ARROW-3289: [C++] Implement Flight DoPut\nURL: https://github.com/apache/arrow/pull/3524#discussion_r253075594\n \n \n\n ##########\n File path: cpp/src/arrow/flight/test-integration-server.cc\n ##########\n @@ -116,14 +70,44 @@ class FlightIntegrationTestServer : public FlightServerBase {\n \n   Status DoGet(const Ticket& request,\n                std::unique_ptr<FlightDataStream>* data_stream) override {\n-    std::unique_ptr<arrow::ipc::internal::json::JsonReader> reader;\n-    RETURN_NOT_OK(ReadJson(request.ticket, &reader));\n+    auto data = uploaded_chunks.find(request.ticket);\n+    if (data == uploaded_chunks.end()) {\n+      return Status::KeyError(\"Could not find flight.\");\n \n Review comment:\n   see above\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-01T14:57:40.332+0000",
                    "updated": "2019-02-01T14:57:40.332+0000",
                    "started": "2019-02-01T14:57:40.331+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "193408",
                    "issueId": "13186686"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186686/worklog/193409",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lihalite commented on pull request #3524: ARROW-3289: [C++] Implement Flight DoPut\nURL: https://github.com/apache/arrow/pull/3524#discussion_r253080623\n \n \n\n ##########\n File path: cpp/src/arrow/flight/client.cc\n ##########\n @@ -227,7 +77,9 @@ class FlightStreamReader : public RecordBatchReader {\n     // For customizing read path for better memory/serialization efficiency\n     auto custom_reader = reinterpret_cast<grpc::ClientReader<FlightData>*>(stream_.get());\n \n-    if (custom_reader->Read(&data)) {\n+    // Explicitly specify the override to invoke - otherwise compiler\n+    // may invoke through vtable (not updated by reinterpret_cast)\n \n Review comment:\n   ```\r\n   $ clang++ --version\r\n   Apple LLVM version 9.0.0 (clang-900.0.39.2)\r\n   Target: x86_64-apple-darwin16.7.0\r\n   Thread model: posix\r\n   InstalledDir: /Library/Developer/CommandLineTools/usr/bin\r\n   ```\r\n   \r\n   It's inconsistent - the calls you originally had were done statically, but when I added another instance for DoPut, Clang opted for a virtual call, judging from the disassembly.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-01T15:04:50.086+0000",
                    "updated": "2019-02-01T15:04:50.086+0000",
                    "started": "2019-02-01T15:04:50.086+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "193409",
                    "issueId": "13186686"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186686/worklog/193410",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lihalite commented on pull request #3524: ARROW-3289: [C++] Implement Flight DoPut\nURL: https://github.com/apache/arrow/pull/3524#discussion_r253080950\n \n \n\n ##########\n File path: cpp/src/arrow/flight/client.cc\n ##########\n @@ -259,6 +111,65 @@ class FlightStreamReader : public RecordBatchReader {\n   std::unique_ptr<grpc::ClientReader<pb::FlightData>> stream_;\n };\n \n+class FlightClient;\n+\n+/// \\brief A RecordBatchWriter implementation that writes to a Flight\n+/// DoPut stream.\n+class FlightStreamWriter : public ipc::RecordBatchWriter {\n+ public:\n+  explicit FlightStreamWriter(std::unique_ptr<ClientRpc>&& rpc,\n+                              const FlightDescriptor& descriptor,\n+                              const std::shared_ptr<Schema>& schema)\n+      : rpc_{std::move(rpc)},\n+        descriptor_{descriptor},\n+        schema_{schema},\n+        pool_{default_memory_pool()} {}\n+\n+  Status WriteRecordBatch(const RecordBatch& batch, bool allow_64bit = false) override {\n+    IpcPayload payload;\n+    RETURN_NOT_OK(ipc::internal::GetRecordBatchPayload(batch, pool_, &payload));\n+    auto custom_writer = reinterpret_cast<grpc::ClientWriter<IpcPayload>*>(writer_.get());\n+    // Explicitly specify the override to invoke - otherwise compiler\n+    // may invoke through vtable (not updated by reinterpret_cast)\n+    if (!custom_writer->grpc::ClientWriter<IpcPayload>::Write(payload,\n+                                                              grpc::WriteOptions())) {\n+      // Stream ended?\n+      return Status::UnknownError(\"Could not write record batch to stream\");\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status Close() override {\n+    bool finished_writes = writer_->WritesDone();\n+    RETURN_NOT_OK(internal::FromGrpcStatus(writer_->Finish()));\n+    if (!finished_writes) {\n+      return Status::UnknownError(\n+          \"Could not finish writing record batches before closing\");\n+    }\n+    return Status::OK();\n+  }\n+\n+  void set_memory_pool(MemoryPool* pool) override { pool_ = pool; }\n+\n+ private:\n+  /// \\brief Set the gRPC writer backing this Flight stream.\n+  /// \\param [in] writer the gRPC writer\n+  void set_stream(std::unique_ptr<grpc::ClientWriter<pb::FlightData>>&& writer) {\n+    writer_ = std::move(writer);\n+  }\n+\n+  // TODO: there isn't a way to access this as a user.\n \n Review comment:\n   I was debating this as well. It should at least be easy to wrap a custom interface in `RecordBatchWriter`, so I guess it's better to leave this open for future extensions.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-01T15:05:48.437+0000",
                    "updated": "2019-02-01T15:05:48.437+0000",
                    "started": "2019-02-01T15:05:48.436+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "193410",
                    "issueId": "13186686"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186686/worklog/193411",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lihalite commented on pull request #3524: ARROW-3289: [C++] Implement Flight DoPut\nURL: https://github.com/apache/arrow/pull/3524#discussion_r253081221\n \n \n\n ##########\n File path: cpp/src/arrow/flight/server.cc\n ##########\n @@ -293,7 +209,36 @@ class FlightServiceImpl : public FlightService::Service {\n \n   grpc::Status DoPut(ServerContext* context, grpc::ServerReader<pb::FlightData>* reader,\n                      pb::PutResult* response) {\n-    return grpc::Status(grpc::StatusCode::UNIMPLEMENTED, \"\");\n+    // Get metadata\n+    pb::FlightData data;\n+    if (reader->Read(&data)) {\n+      FlightDescriptor descriptor;\n+      std::unique_ptr<ipc::Message> message;\n+      std::shared_ptr<Schema> schema;\n+      GRPC_RETURN_NOT_OK(internal::FromProto(data.flight_descriptor(), &descriptor));\n+      std::shared_ptr<Buffer> header_buf;\n+      std::shared_ptr<Buffer> body_buf;\n+      GRPC_RETURN_NOT_OK(Buffer::FromString(data.data_header(), &header_buf));\n+      GRPC_RETURN_NOT_OK(Buffer::FromString(data.data_body(), &body_buf));\n+      GRPC_RETURN_NOT_OK(ipc::Message::Open(header_buf, body_buf, &message));\n \n Review comment:\n   In general, I'm a little worried by the proliferation of slightly different (de)serialization methods across Java and C++...\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-01T15:06:30.192+0000",
                    "updated": "2019-02-01T15:06:30.192+0000",
                    "started": "2019-02-01T15:06:30.191+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "193411",
                    "issueId": "13186686"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 40200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@6e61916e[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@8d4e87c[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@60e00c23[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@4f588f4b[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2d60e169[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@6f752c3b[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@f14a4e2[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@43d509c[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2e7c92db[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@682e77db[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@42b7fd88[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@2ce0ecf2[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 40200,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Feb 05 17:49:27 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-02-05T17:49:27.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3289/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2018-09-21T18:24:02.000+0000",
        "updated": "2019-02-06T15:49:59.000+0000",
        "timeoriginalestimate": null,
        "description": "This was omitted from ARROW-3146",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "11h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 40200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Implement DoPut command for Flight on client and server side  ",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186686/comment/16752296",
                    "id": "16752296",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "I can take on this next, seeing as I've been digging around the relevant parts anyways, and then update the integration tests to cover uploads.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-01-25T14:16:39.445+0000",
                    "updated": "2019-01-25T14:16:39.445+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186686/comment/16752355",
                    "id": "16752355",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "That sounds great -- the Java test server supports storing a dataset, then retrieving it. I figure you would implement similar functionality in order to test this",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-01-25T15:32:32.269+0000",
                    "updated": "2019-01-25T15:32:32.269+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186686/comment/16752509",
                    "id": "16752509",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Yup - the current integration tests I have written write the data back out to a file, but with the put side implemented, it can/should just stay in memory.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-01-25T17:49:25.960+0000",
                    "updated": "2019-01-25T17:49:25.960+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186686/comment/16754158",
                    "id": "16754158",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "I have an initial implementation ready now; waiting on ARROW-4213 to be reviewed first though.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-01-28T17:15:35.808+0000",
                    "updated": "2019-01-28T17:15:35.808+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186686/comment/16754196",
                    "id": "16754196",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "I'll review ARROW-4213 today so we can get that merged soon, thank you for your patience",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-01-28T18:01:34.705+0000",
                    "updated": "2019-01-28T18:01:34.705+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186686/comment/16754198",
                    "id": "16754198",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "No rush, thank you for your time!",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-01-28T18:04:02.811+0000",
                    "updated": "2019-01-28T18:04:02.811+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186686/comment/16761054",
                    "id": "16761054",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 3524\n[https://github.com/apache/arrow/pull/3524]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2019-02-05T17:49:27.055+0000",
                    "updated": "2019-02-05T17:49:27.055+0000"
                }
            ],
            "maxResults": 7,
            "total": 7,
            "startAt": 0
        },
        "customfield_12311820": "0|i3yd2n:",
        "customfield_12314139": null
    }
}