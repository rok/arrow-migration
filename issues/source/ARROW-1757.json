{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13113142",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13113142",
    "key": "ARROW-1757",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12341707",
                "id": "12341707",
                "description": "",
                "name": "0.9.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-03-19"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": null,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=1xuepanchen1",
            "name": "1xuepanchen1",
            "key": "1xuepanchen1",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10445",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10445",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10445",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10445"
            },
            "displayName": "Panchen Xue",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": null,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1757/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 0,
            "worklogs": []
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": null,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@5c9baae0[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1bced659[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@699d1611[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@40c7965[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@54fa37f4[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@3fab72cf[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3e07d6b5[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@59274741[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5ce78e06[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@383eb25f[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@388c6993[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@5b722c8c[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": null,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Feb 06 16:17:57 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-02-06T16:17:53.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1757/watchers",
            "watchCount": 3,
            "isWatching": false
        },
        "created": "2017-10-30T20:37:30.000+0000",
        "updated": "2018-02-06T16:17:57.000+0000",
        "timeoriginalestimate": null,
        "description": "Related to ARROW-1658. This is related to the offset sanitization in {{ListArray::FromArrays}}",
        "customfield_10010": null,
        "timetracking": {},
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Add DictionaryArray::FromArrays alternate ctor that can check or sanitized \"untrusted\" indices",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13113142/comment/16341465",
                    "id": "16341465",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=1xuepanchen1",
                        "name": "1xuepanchen1",
                        "key": "1xuepanchen1",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10445",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10445",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10445",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10445"
                        },
                        "displayName": "Panchen Xue",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "API looks like this?\r\n{code}\r\nStatus DictionaryArray::FromArrays(const std::shared_ptr<Array>& dictionary,\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0const std::shared_ptr<Array>& indices);\r\n{code}",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=1xuepanchen1",
                        "name": "1xuepanchen1",
                        "key": "1xuepanchen1",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10445",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10445",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10445",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10445"
                        },
                        "displayName": "Panchen Xue",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-01-26T19:21:44.745+0000",
                    "updated": "2018-01-26T19:21:44.745+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13113142/comment/16341602",
                    "id": "16341602",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Yes, that will do \u2013 we also need a boolean argument\u00a0{{ordered}}. In the Python bindings the order of the arguments is flipped (http://arrow.apache.org/docs/python/generated/pyarrow.lib.DictionaryArray.html#pyarrow.lib.DictionaryArray.from_arrays).\u00a0\r\n\r\nAnother option is to make this {{FromArray(indices, type)}} and instead pass a dictionary type instance as {{std::shared_ptr<DataType>}} (such as produced by {{arrow::dictionary}})",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-01-26T21:08:57.502+0000",
                    "updated": "2018-01-26T21:09:21.243+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13113142/comment/16341798",
                    "id": "16341798",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=1xuepanchen1",
                        "name": "1xuepanchen1",
                        "key": "1xuepanchen1",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10445",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10445",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10445",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10445"
                        },
                        "displayName": "Panchen Xue",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "A question. Suppose we have the API\r\n{code:java}\r\nStatus DictionaryArray::FromArrays(const std::shared_ptr<Array>& indices,\r\n                                   const std::shared_ptr<DataType>& type);\r\n{code}\r\nWe need to check every element of *indices* to see if each one is valid. In order to do this we need to cast the *indices* to its actual type to access its data\r\n{code:java}\r\nstd::shared_ptr<SOME_TYPE> raw_array = std::static_pointer_cast<SOME_TYPE>(indices);\r\n{code}\r\nThe *indices* in principle may have any integer type (signed or unsigned) and we can get type info from *indices->data()->type* but how can I convert to\u00a0*SOME_TYPE*\u00a0(like Int32Array) to create the correct raw array?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=1xuepanchen1",
                        "name": "1xuepanchen1",
                        "key": "1xuepanchen1",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10445",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10445",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10445",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10445"
                        },
                        "displayName": "Panchen Xue",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-01-26T23:41:32.536+0000",
                    "updated": "2018-01-26T23:42:28.374+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13113142/comment/16341814",
                    "id": "16341814",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "I believe that dictionary indices are currently constrained to be signed integers. So you can switch on {{indices->type_id()}} and return error in the {{default:}} branch. See an example of this here https://github.com/apache/arrow/blob/master/cpp/src/arrow/python/arrow_to_pandas.cc#L1057. See also https://github.com/apache/arrow/blob/master/cpp/src/arrow/type_traits.h to be able to resolve other classes given a particular value type class (like {{Int16Type}}).",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-01-26T23:57:36.623+0000",
                    "updated": "2018-01-26T23:57:36.623+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13113142/comment/16344026",
                    "id": "16344026",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=1xuepanchen1",
                        "name": "1xuepanchen1",
                        "key": "1xuepanchen1",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10445",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10445",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10445",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10445"
                        },
                        "displayName": "Panchen Xue",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Does this code look ok?\u00a0\r\n{code:java}\r\nStatus DictionaryArray::FromArrays(const std::shared_ptr<DataType>& type,\r\n                                   const std::shared_ptr<Array>& indices) {\r\n  dict_type_ = static_cast<const DictionaryType*>(type.get());\r\n  DCHECK_EQ(type->id(), Type::DICTIONARY);\r\n  DCHECK_EQ(indices->type_id(), dict_type_->index_type()->id());\r\n  int64_t range = dict_type_->dictionary()->length();\r\n\r\n  switch (indices->type_id()) {\r\n  case Type::INT8:\r\n    DCHECK_EQ(SanityCheck<Int8Type>(indices, range), true);\r\n    break;\r\n  case Type::INT16:\r\n    DCHECK_EQ(SanityCheck<Int16Type>(indices, range), true);\r\n    break;\r\n  case Type::INT32:\r\n    DCHECK_EQ(SanityCheck<Int32Type>(indices, range), true);\r\n    break;\r\n  case Type::INT64:\r\n    DCHECK_EQ(SanityCheck<Int64Type>(indices, range), true);\r\n    break;\r\n  default:\r\n    std::stringstream ss;\r\n    ss << \"Categorical index type not supported: \"\r\n       << indices->type()->ToString();\r\n    return Status::NotImplemented(ss.str());\r\n  }\r\n\r\n  auto data = indices->data()->Copy();\r\n  data->type = type;\r\n  SetData(data);\r\n  return Status::OK();\r\n}\r\n\r\n  template <typename ArrowType>\r\n  bool SanityCheck(const std::shared_ptr<Array>& indices,\r\n                   const int64_t range) {\r\n    using ArrayType = typename TypeTraits<ArrowType>::ArrayType;\r\n    std::shared_ptr<ArrayType> array = std::static_pointer_cast<ArrayType>(indices);\r\n\r\n    const auto data = array->raw_values();\r\n    const auto size = sizeof(data) / sizeof(data[0]);\r\n    \r\n    // using decltype because C++11 doesn't allow auto in lambda\r\n    return std::all_of(data, data + size,\r\n      [&range](decltype(data[0]) value){return value >= 0 && value < range;});\r\n  }\r\n{code}",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=1xuepanchen1",
                        "name": "1xuepanchen1",
                        "key": "1xuepanchen1",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10445",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10445",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10445",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10445"
                        },
                        "displayName": "Panchen Xue",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-01-29T21:06:20.944+0000",
                    "updated": "2018-01-29T21:07:23.755+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13113142/comment/16344108",
                    "id": "16344108",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Can you open a PR and add some unit tests and we can discuss there? ",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-01-29T22:14:46.391+0000",
                    "updated": "2018-01-29T22:14:46.391+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13113142/comment/16344111",
                    "id": "16344111",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Note that this should be a static ctor that returns a new array as an out argument, like {{ListArray::FromArrays}}",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-01-29T22:15:51.147+0000",
                    "updated": "2018-01-29T22:15:51.147+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13113142/comment/16345881",
                    "id": "16345881",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "xuepanchen opened a new pull request #1535: ARROW-1757: [C++] Add DictionaryArray::FromArrays alternate ctor that can check or sanitized \"untrusted\" indices\nURL: https://github.com/apache/arrow/pull/1535\n \n \n   Add static member function DictionaryArray::FromArrays to create DictionaryArray from a given type and an indices array. This method calls DictionaryArray::SanityCheck to check if all indices are within valid range.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-01-30T21:58:35.637+0000",
                    "updated": "2018-01-30T21:58:35.637+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13113142/comment/16345886",
                    "id": "16345886",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on issue #1535: ARROW-1757: [C++] Add DictionaryArray::FromArrays alternate ctor that can check or sanitized \"untrusted\" indices\nURL: https://github.com/apache/arrow/pull/1535#issuecomment-361750222\n \n \n   In case it helps, there's no need to put the \"ARROW-1757: [C++]\" in your commit messages -- that only needs to go in the PR title\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-01-30T22:05:09.481+0000",
                    "updated": "2018-01-30T22:05:09.481+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13113142/comment/16348877",
                    "id": "16348877",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1535: ARROW-1757: [C++] Add DictionaryArray::FromArrays alternate ctor that can check or sanitized \"untrusted\" indices\nURL: https://github.com/apache/arrow/pull/1535#discussion_r165413807\n \n \n\n ##########\n File path: cpp/src/arrow/array.h\n ##########\n @@ -734,6 +745,27 @@ class ARROW_EXPORT DictionaryArray : public Array {\n  private:\n   void SetData(const std::shared_ptr<ArrayData>& data);\n \n+  /// \\brief Check if all indices are within valid range\n+  ///\n+  /// \\param[in] indices dictionary indices\n+  /// \\param[in] range valid range of indices (0 <= index < range)\n+  template <typename ArrowType>\n+    static bool SanityCheck(const std::shared_ptr<Array>& indices, const int64_t range) {\n+    using ArrayType = typename TypeTraits<ArrowType>::ArrayType;\n+    std::shared_ptr<ArrayType> array = std::static_pointer_cast<ArrayType>(indices);\n \n Review comment:\n   Might as well `static_cast` to `const ArrayType&` here. No need to incur the overhead of `std::shared_ptr` if not necessary.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-01T16:43:36.016+0000",
                    "updated": "2018-02-01T16:43:36.016+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13113142/comment/16348878",
                    "id": "16348878",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1535: ARROW-1757: [C++] Add DictionaryArray::FromArrays alternate ctor that can check or sanitized \"untrusted\" indices\nURL: https://github.com/apache/arrow/pull/1535#discussion_r165414720\n \n \n\n ##########\n File path: cpp/src/arrow/array.cc\n ##########\n @@ -492,11 +492,52 @@ DictionaryArray::DictionaryArray(const std::shared_ptr<DataType>& type,\n   SetData(data);\n }\n \n+Status DictionaryArray::FromArrays(const std::shared_ptr<DataType>& type,\n+                                   const std::shared_ptr<Array>& indices,\n+                                   std::shared_ptr<Array>* out) {\n+  if (indices->length() == 0) {\n+    return Status::Invalid(\"Dictionary indices must have non-zero length\");\n+  }\n+\n+  DCHECK_EQ(type->id(), Type::DICTIONARY);\n+  std::shared_ptr<DictionaryType> dict = std::static_pointer_cast<DictionaryType>(type);\n \n Review comment:\n   Also a bit more concise IMO\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-01T16:43:36.017+0000",
                    "updated": "2018-02-01T16:43:36.017+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13113142/comment/16348879",
                    "id": "16348879",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1535: ARROW-1757: [C++] Add DictionaryArray::FromArrays alternate ctor that can check or sanitized \"untrusted\" indices\nURL: https://github.com/apache/arrow/pull/1535#discussion_r165413365\n \n \n\n ##########\n File path: cpp/src/arrow/array.h\n ##########\n @@ -734,6 +745,27 @@ class ARROW_EXPORT DictionaryArray : public Array {\n  private:\n   void SetData(const std::shared_ptr<ArrayData>& data);\n \n+  /// \\brief Check if all indices are within valid range\n+  ///\n+  /// \\param[in] indices dictionary indices\n+  /// \\param[in] range valid range of indices (0 <= index < range)\n+  template <typename ArrowType>\n+    static bool SanityCheck(const std::shared_ptr<Array>& indices, const int64_t range) {\n \n Review comment:\n   Formatting looks off by 2 spaces here.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-01T16:43:36.048+0000",
                    "updated": "2018-02-01T16:43:36.048+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13113142/comment/16348880",
                    "id": "16348880",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1535: ARROW-1757: [C++] Add DictionaryArray::FromArrays alternate ctor that can check or sanitized \"untrusted\" indices\nURL: https://github.com/apache/arrow/pull/1535#discussion_r165414598\n \n \n\n ##########\n File path: cpp/src/arrow/array.cc\n ##########\n @@ -492,11 +492,52 @@ DictionaryArray::DictionaryArray(const std::shared_ptr<DataType>& type,\n   SetData(data);\n }\n \n+Status DictionaryArray::FromArrays(const std::shared_ptr<DataType>& type,\n+                                   const std::shared_ptr<Array>& indices,\n+                                   std::shared_ptr<Array>* out) {\n+  if (indices->length() == 0) {\n+    return Status::Invalid(\"Dictionary indices must have non-zero length\");\n+  }\n+\n+  DCHECK_EQ(type->id(), Type::DICTIONARY);\n+  std::shared_ptr<DictionaryType> dict = std::static_pointer_cast<DictionaryType>(type);\n \n Review comment:\n   We usually do this as ` auto dict = static_cast<const DictionaryType&>(*type)`. That way you can avoid any additional overhead from constructing `std::shared_ptr`s.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-01T16:43:36.075+0000",
                    "updated": "2018-02-01T16:43:36.075+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13113142/comment/16349241",
                    "id": "16349241",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on a change in pull request #1535: ARROW-1757: [C++] Add DictionaryArray::FromArrays alternate ctor that can check or sanitized \"untrusted\" indices\nURL: https://github.com/apache/arrow/pull/1535#discussion_r165482885\n \n \n\n ##########\n File path: cpp/src/arrow/array.cc\n ##########\n @@ -492,11 +492,52 @@ DictionaryArray::DictionaryArray(const std::shared_ptr<DataType>& type,\n   SetData(data);\n }\n \n+Status DictionaryArray::FromArrays(const std::shared_ptr<DataType>& type,\n+                                   const std::shared_ptr<Array>& indices,\n+                                   std::shared_ptr<Array>* out) {\n+  if (indices->length() == 0) {\n+    return Status::Invalid(\"Dictionary indices must have non-zero length\");\n+  }\n+\n+  DCHECK_EQ(type->id(), Type::DICTIONARY);\n+  std::shared_ptr<DictionaryType> dict = std::static_pointer_cast<DictionaryType>(type);\n \n Review comment:\n   Need `const auto&` otherwise the copy ctor will be invoked. I opened https://issues.apache.org/jira/browse/ARROW-2078 just now because I'm not sure we want types to be copyable\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-01T20:48:06.606+0000",
                    "updated": "2018-02-01T20:48:06.606+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13113142/comment/16349251",
                    "id": "16349251",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on a change in pull request #1535: ARROW-1757: [C++] Add DictionaryArray::FromArrays alternate ctor that can check or sanitized \"untrusted\" indices\nURL: https://github.com/apache/arrow/pull/1535#discussion_r165483187\n \n \n\n ##########\n File path: cpp/src/arrow/array.h\n ##########\n @@ -726,6 +726,17 @@ class ARROW_EXPORT DictionaryArray : public Array {\n   DictionaryArray(const std::shared_ptr<DataType>& type,\n                   const std::shared_ptr<Array>& indices);\n \n+  /// \\brief Construct DictionaryArray from dictonary data type and indices array\n+  ///\n+  /// This function does the validation of the indices and input type\n \n Review comment:\n   Can you be more specific about the validation checks (boundschecking)? \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-01T20:53:05.402+0000",
                    "updated": "2018-02-01T20:53:05.402+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13113142/comment/16349252",
                    "id": "16349252",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on a change in pull request #1535: ARROW-1757: [C++] Add DictionaryArray::FromArrays alternate ctor that can check or sanitized \"untrusted\" indices\nURL: https://github.com/apache/arrow/pull/1535#discussion_r165483851\n \n \n\n ##########\n File path: cpp/src/arrow/array.h\n ##########\n @@ -734,6 +745,27 @@ class ARROW_EXPORT DictionaryArray : public Array {\n  private:\n   void SetData(const std::shared_ptr<ArrayData>& data);\n \n+  /// \\brief Check if all indices are within valid range\n+  ///\n+  /// \\param[in] indices dictionary indices\n+  /// \\param[in] range valid range of indices (0 <= index < range)\n+  template <typename ArrowType>\n+    static bool SanityCheck(const std::shared_ptr<Array>& indices, const int64_t range) {\n+    using ArrayType = typename TypeTraits<ArrowType>::ArrayType;\n+    std::shared_ptr<ArrayType> array = std::static_pointer_cast<ArrayType>(indices);\n+    const typename ArrowType::c_type* data = array->raw_values();\n+    const int64_t size = sizeof(data) / sizeof(data[0]);\n \n Review comment:\n   Use `array->length()` instead of this\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-01T20:53:05.404+0000",
                    "updated": "2018-02-01T20:53:05.404+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13113142/comment/16349253",
                    "id": "16349253",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on a change in pull request #1535: ARROW-1757: [C++] Add DictionaryArray::FromArrays alternate ctor that can check or sanitized \"untrusted\" indices\nURL: https://github.com/apache/arrow/pull/1535#discussion_r165484090\n \n \n\n ##########\n File path: cpp/src/arrow/array.h\n ##########\n @@ -734,6 +745,27 @@ class ARROW_EXPORT DictionaryArray : public Array {\n  private:\n   void SetData(const std::shared_ptr<ArrayData>& data);\n \n+  /// \\brief Check if all indices are within valid range\n+  ///\n+  /// \\param[in] indices dictionary indices\n+  /// \\param[in] range valid range of indices (0 <= index < range)\n+  template <typename ArrowType>\n+    static bool SanityCheck(const std::shared_ptr<Array>& indices, const int64_t range) {\n \n Review comment:\n   The variable name `range` is a bit imprecise. Perhaps `upper_bound`? \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-01T20:53:05.436+0000",
                    "updated": "2018-02-01T20:53:05.436+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13113142/comment/16349254",
                    "id": "16349254",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on a change in pull request #1535: ARROW-1757: [C++] Add DictionaryArray::FromArrays alternate ctor that can check or sanitized \"untrusted\" indices\nURL: https://github.com/apache/arrow/pull/1535#discussion_r165483345\n \n \n\n ##########\n File path: cpp/src/arrow/array.h\n ##########\n @@ -726,6 +726,17 @@ class ARROW_EXPORT DictionaryArray : public Array {\n   DictionaryArray(const std::shared_ptr<DataType>& type,\n                   const std::shared_ptr<Array>& indices);\n \n+  /// \\brief Construct DictionaryArray from dictonary data type and indices array\n+  ///\n+  /// This function does the validation of the indices and input type\n+  ///\n+  /// \\param[in] type a data type containing a dictionary\n+  /// \\param[in] indices an array of non-negative integers as dictionary indices\n \n Review comment:\n   add \"signed\" here, and perhaps say \"not exceeding the size of the dictionary\"\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-01T20:53:05.467+0000",
                    "updated": "2018-02-01T20:53:05.467+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13113142/comment/16349255",
                    "id": "16349255",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on a change in pull request #1535: ARROW-1757: [C++] Add DictionaryArray::FromArrays alternate ctor that can check or sanitized \"untrusted\" indices\nURL: https://github.com/apache/arrow/pull/1535#discussion_r165483534\n \n \n\n ##########\n File path: cpp/src/arrow/array.h\n ##########\n @@ -734,6 +745,27 @@ class ARROW_EXPORT DictionaryArray : public Array {\n  private:\n   void SetData(const std::shared_ptr<ArrayData>& data);\n \n+  /// \\brief Check if all indices are within valid range\n+  ///\n+  /// \\param[in] indices dictionary indices\n+  /// \\param[in] range valid range of indices (0 <= index < range)\n+  template <typename ArrowType>\n+    static bool SanityCheck(const std::shared_ptr<Array>& indices, const int64_t range) {\n+    using ArrayType = typename TypeTraits<ArrowType>::ArrayType;\n+    std::shared_ptr<ArrayType> array = std::static_pointer_cast<ArrayType>(indices);\n+    const typename ArrowType::c_type* data = array->raw_values();\n+    const int64_t size = sizeof(data) / sizeof(data[0]);\n+\n+    for (int64_t idx = 0; idx < size; ++idx) {\n+      if (!array->IsNull(idx)) {\n+        if (data[idx] < 0 || data[idx] >= range) {\n+\t  return false;\n+        }\n+      }\n+    }\n+    return true;\n+  }\n \n Review comment:\n   Not sure if we need a new member function; can put this in the compilation unit\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-01T20:53:05.485+0000",
                    "updated": "2018-02-01T20:53:05.485+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13113142/comment/16349258",
                    "id": "16349258",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on a change in pull request #1535: ARROW-1757: [C++] Add DictionaryArray::FromArrays alternate ctor that can check or sanitized \"untrusted\" indices\nURL: https://github.com/apache/arrow/pull/1535#discussion_r165484561\n \n \n\n ##########\n File path: cpp/src/arrow/array.cc\n ##########\n @@ -492,11 +492,52 @@ DictionaryArray::DictionaryArray(const std::shared_ptr<DataType>& type,\n   SetData(data);\n }\n \n+Status DictionaryArray::FromArrays(const std::shared_ptr<DataType>& type,\n+                                   const std::shared_ptr<Array>& indices,\n+                                   std::shared_ptr<Array>* out) {\n+  if (indices->length() == 0) {\n+    return Status::Invalid(\"Dictionary indices must have non-zero length\");\n+  }\n+\n+  DCHECK_EQ(type->id(), Type::DICTIONARY);\n+  std::shared_ptr<DictionaryType> dict = std::static_pointer_cast<DictionaryType>(type);\n+  DCHECK_EQ(indices->type_id(), dict->index_type()->id());\n+\n+  int64_t range = dict->dictionary()->length();\n+  bool is_valid = true;\n+\n+  switch (indices->type_id()) {\n+  case Type::INT8:\n+    is_valid = SanityCheck<Int8Type>(indices, range);\n+    break;\n+  case Type::INT16:\n+    is_valid = SanityCheck<Int16Type>(indices, range);\n+    break;\n+  case Type::INT32:\n+    is_valid = SanityCheck<Int32Type>(indices, range);\n+    break;\n+  case Type::INT64:\n+    is_valid = SanityCheck<Int64Type>(indices, range);\n+    break;\n+  default:\n+    std::stringstream ss;\n+    ss << \"Categorical index type not supported: \"\n+       << indices->type()->ToString();\n+    return Status::NotImplemented(ss.str());\n+  }\n+\n+  if (!is_valid) {\n+    return Status::Invalid(\"Invalid dictionary indices\");\n \n Review comment:\n   More specific error message here\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-01T20:55:03.330+0000",
                    "updated": "2018-02-01T20:55:03.330+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13113142/comment/16349259",
                    "id": "16349259",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on a change in pull request #1535: ARROW-1757: [C++] Add DictionaryArray::FromArrays alternate ctor that can check or sanitized \"untrusted\" indices\nURL: https://github.com/apache/arrow/pull/1535#discussion_r165484604\n \n \n\n ##########\n File path: cpp/src/arrow/array.cc\n ##########\n @@ -492,11 +492,52 @@ DictionaryArray::DictionaryArray(const std::shared_ptr<DataType>& type,\n   SetData(data);\n }\n \n+Status DictionaryArray::FromArrays(const std::shared_ptr<DataType>& type,\n+                                   const std::shared_ptr<Array>& indices,\n+                                   std::shared_ptr<Array>* out) {\n+  if (indices->length() == 0) {\n+    return Status::Invalid(\"Dictionary indices must have non-zero length\");\n+  }\n+\n+  DCHECK_EQ(type->id(), Type::DICTIONARY);\n+  std::shared_ptr<DictionaryType> dict = std::static_pointer_cast<DictionaryType>(type);\n+  DCHECK_EQ(indices->type_id(), dict->index_type()->id());\n+\n+  int64_t range = dict->dictionary()->length();\n+  bool is_valid = true;\n+\n+  switch (indices->type_id()) {\n+  case Type::INT8:\n \n Review comment:\n   Formatting off, clang-format will fix this\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-01T20:55:03.332+0000",
                    "updated": "2018-02-01T20:55:03.332+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13113142/comment/16349260",
                    "id": "16349260",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on a change in pull request #1535: ARROW-1757: [C++] Add DictionaryArray::FromArrays alternate ctor that can check or sanitized \"untrusted\" indices\nURL: https://github.com/apache/arrow/pull/1535#discussion_r165484453\n \n \n\n ##########\n File path: cpp/src/arrow/array.cc\n ##########\n @@ -492,11 +492,52 @@ DictionaryArray::DictionaryArray(const std::shared_ptr<DataType>& type,\n   SetData(data);\n }\n \n+Status DictionaryArray::FromArrays(const std::shared_ptr<DataType>& type,\n+                                   const std::shared_ptr<Array>& indices,\n+                                   std::shared_ptr<Array>* out) {\n+  if (indices->length() == 0) {\n+    return Status::Invalid(\"Dictionary indices must have non-zero length\");\n+  }\n+\n+  DCHECK_EQ(type->id(), Type::DICTIONARY);\n \n Review comment:\n   Since the function documentation says the type is validated, perhaps this should not be a DCHECK, but I'm not sure. @xhochy or @cpcloud have an opinion (same goes for the dcheck below)?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-01T20:55:03.332+0000",
                    "updated": "2018-02-01T20:55:03.332+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13113142/comment/16349272",
                    "id": "16349272",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1535: ARROW-1757: [C++] Add DictionaryArray::FromArrays alternate ctor that can check or sanitized \"untrusted\" indices\nURL: https://github.com/apache/arrow/pull/1535#discussion_r165487533\n \n \n\n ##########\n File path: cpp/src/arrow/array.cc\n ##########\n @@ -492,11 +492,52 @@ DictionaryArray::DictionaryArray(const std::shared_ptr<DataType>& type,\n   SetData(data);\n }\n \n+Status DictionaryArray::FromArrays(const std::shared_ptr<DataType>& type,\n+                                   const std::shared_ptr<Array>& indices,\n+                                   std::shared_ptr<Array>* out) {\n+  if (indices->length() == 0) {\n+    return Status::Invalid(\"Dictionary indices must have non-zero length\");\n+  }\n+\n+  DCHECK_EQ(type->id(), Type::DICTIONARY);\n+  std::shared_ptr<DictionaryType> dict = std::static_pointer_cast<DictionaryType>(type);\n \n Review comment:\n   Gah, I always forget about this particular detail of C++.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-01T21:06:49.462+0000",
                    "updated": "2018-02-01T21:06:49.462+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13113142/comment/16349279",
                    "id": "16349279",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1535: ARROW-1757: [C++] Add DictionaryArray::FromArrays alternate ctor that can check or sanitized \"untrusted\" indices\nURL: https://github.com/apache/arrow/pull/1535#discussion_r165488820\n \n \n\n ##########\n File path: cpp/src/arrow/array.h\n ##########\n @@ -734,6 +745,27 @@ class ARROW_EXPORT DictionaryArray : public Array {\n  private:\n   void SetData(const std::shared_ptr<ArrayData>& data);\n \n+  /// \\brief Check if all indices are within valid range\n+  ///\n+  /// \\param[in] indices dictionary indices\n+  /// \\param[in] range valid range of indices (0 <= index < range)\n+  template <typename ArrowType>\n+    static bool SanityCheck(const std::shared_ptr<Array>& indices, const int64_t range) {\n+    using ArrayType = typename TypeTraits<ArrowType>::ArrayType;\n+    std::shared_ptr<ArrayType> array = std::static_pointer_cast<ArrayType>(indices);\n+    const typename ArrowType::c_type* data = array->raw_values();\n+    const int64_t size = sizeof(data) / sizeof(data[0]);\n \n Review comment:\n   @xuepanchen Note that `sizeof` is a compile time construct, so it cannot reliably return the number of valid elements in a chunk of dynamically allocated memory. This trick only works on statically allocated C arrays because the number of bytes in them is known at compile time.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-01T21:12:09.472+0000",
                    "updated": "2018-02-01T21:12:09.472+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13113142/comment/16350674",
                    "id": "16350674",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on issue #1535: ARROW-1757: [C++] Add DictionaryArray::FromArrays alternate ctor that can check or sanitized \"untrusted\" indices\nURL: https://github.com/apache/arrow/pull/1535#issuecomment-362647777\n \n \n   Can you also add a faster branch when  `indices->null_count()` is 0? If there are no nulls, then the extra bit-checking is unnecessary\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-02T17:19:05.451+0000",
                    "updated": "2018-02-02T17:19:05.451+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13113142/comment/16351078",
                    "id": "16351078",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "xuepanchen commented on a change in pull request #1535: ARROW-1757: [C++] Add DictionaryArray::FromArrays alternate ctor that can check or sanitized \"untrusted\" indices\nURL: https://github.com/apache/arrow/pull/1535#discussion_r165789910\n \n \n\n ##########\n File path: cpp/src/arrow/array.h\n ##########\n @@ -734,6 +745,27 @@ class ARROW_EXPORT DictionaryArray : public Array {\n  private:\n   void SetData(const std::shared_ptr<ArrayData>& data);\n \n+  /// \\brief Check if all indices are within valid range\n+  ///\n+  /// \\param[in] indices dictionary indices\n+  /// \\param[in] range valid range of indices (0 <= index < range)\n+  template <typename ArrowType>\n+    static bool SanityCheck(const std::shared_ptr<Array>& indices, const int64_t range) {\n+    using ArrayType = typename TypeTraits<ArrowType>::ArrayType;\n+    std::shared_ptr<ArrayType> array = std::static_pointer_cast<ArrayType>(indices);\n+    const typename ArrowType::c_type* data = array->raw_values();\n+    const int64_t size = sizeof(data) / sizeof(data[0]);\n+\n+    for (int64_t idx = 0; idx < size; ++idx) {\n+      if (!array->IsNull(idx)) {\n+        if (data[idx] < 0 || data[idx] >= range) {\n+\t  return false;\n+        }\n+      }\n+    }\n+    return true;\n+  }\n \n Review comment:\n   Do you mean moving SanityCheck() out of DictionaryArray class and making it a standalone template function under arrow namespace?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-02T23:53:08.058+0000",
                    "updated": "2018-02-02T23:53:08.058+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13113142/comment/16351472",
                    "id": "16351472",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on a change in pull request #1535: ARROW-1757: [C++] Add DictionaryArray::FromArrays alternate ctor that can check or sanitized \"untrusted\" indices\nURL: https://github.com/apache/arrow/pull/1535#discussion_r165821301\n \n \n\n ##########\n File path: cpp/src/arrow/array.h\n ##########\n @@ -734,6 +745,27 @@ class ARROW_EXPORT DictionaryArray : public Array {\n  private:\n   void SetData(const std::shared_ptr<ArrayData>& data);\n \n+  /// \\brief Check if all indices are within valid range\n+  ///\n+  /// \\param[in] indices dictionary indices\n+  /// \\param[in] range valid range of indices (0 <= index < range)\n+  template <typename ArrowType>\n+    static bool SanityCheck(const std::shared_ptr<Array>& indices, const int64_t range) {\n+    using ArrayType = typename TypeTraits<ArrowType>::ArrayType;\n+    std::shared_ptr<ArrayType> array = std::static_pointer_cast<ArrayType>(indices);\n+    const typename ArrowType::c_type* data = array->raw_values();\n+    const int64_t size = sizeof(data) / sizeof(data[0]);\n+\n+    for (int64_t idx = 0; idx < size; ++idx) {\n+      if (!array->IsNull(idx)) {\n+        if (data[idx] < 0 || data[idx] >= range) {\n+\t  return false;\n+        }\n+      }\n+    }\n+    return true;\n+  }\n \n Review comment:\n   yes, or in an anonymous namespace would be fine\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-03T18:20:08.838+0000",
                    "updated": "2018-02-03T18:20:08.838+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13113142/comment/16352988",
                    "id": "16352988",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on a change in pull request #1535: ARROW-1757: [C++] Add DictionaryArray::FromArrays alternate ctor that can check or sanitized \"untrusted\" indices\nURL: https://github.com/apache/arrow/pull/1535#discussion_r166125700\n \n \n\n ##########\n File path: cpp/src/arrow/array.h\n ##########\n @@ -801,6 +782,38 @@ ARROW_EXTERN_TEMPLATE NumericArray<TimestampType>;\n ARROW_EXPORT\n Status ValidateArray(const Array& array);\n \n+/// \\brief Perform validation check to determine if all indices are within\n+/// valid range (0 <= index < upper_bound)\n+///\n+/// \\param[in] indices array of indices\n+/// \\param[in] upper_bound upper bound of valid range for indices\n+/// \\return Status\n+template <typename ArrowType>\n+Status ValidateArray(const std::shared_ptr<Array>& indices, const int64_t upper_bound) {\n \n Review comment:\n   Can you move this to `array.cc` and rename to `ValidateDictionaryIndices`? This template does not need to be visible in the public API\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-05T22:00:02.344+0000",
                    "updated": "2018-02-05T22:00:02.344+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13113142/comment/16353138",
                    "id": "16353138",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on issue #1535: ARROW-1757: [C++] Add DictionaryArray::FromArrays alternate ctor that can check or sanitized \"untrusted\" indices\nURL: https://github.com/apache/arrow/pull/1535#issuecomment-363266492\n \n \n   +1, thank you! Will merge on build passing. @xuepanchen would you mind enabling Appveyor on your fork so we can get faster builds sometimes (it will appear at https://ci.appveyor.com/project/xuepanchen/arrow)?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-06T00:19:38.446+0000",
                    "updated": "2018-02-06T00:19:38.446+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13113142/comment/16354086",
                    "id": "16354086",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 1535\n[https://github.com/apache/arrow/pull/1535]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-02-06T16:17:53.739+0000",
                    "updated": "2018-02-06T16:17:53.739+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13113142/comment/16354087",
                    "id": "16354087",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm closed pull request #1535: ARROW-1757: [C++] Add DictionaryArray::FromArrays alternate ctor that can check or sanitized \"untrusted\" indices\nURL: https://github.com/apache/arrow/pull/1535\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/cpp/src/arrow/array-test.cc b/cpp/src/arrow/array-test.cc\nindex c53da8591..fa64d467b 100644\n--- a/cpp/src/arrow/array-test.cc\n+++ b/cpp/src/arrow/array-test.cc\n@@ -2384,6 +2384,37 @@ TEST(TestDictionary, Validate) {\n   // ASSERT_OK(ValidateArray(*arr3));\n }\n \n+TEST(TestDictionary, FromArray) {\n+  std::shared_ptr<Array> dict;\n+  vector<string> dict_values = {\"foo\", \"bar\", \"baz\"};\n+  ArrayFromVector<StringType, string>(dict_values, &dict);\n+  std::shared_ptr<DataType> dict_type = dictionary(int16(), dict);\n+\n+  std::shared_ptr<Array> indices1;\n+  vector<int16_t> indices_values1 = {1, 2, 0, 0, 2, 0};\n+  ArrayFromVector<Int16Type, int16_t>(indices_values1, &indices1);\n+\n+  std::shared_ptr<Array> indices2;\n+  vector<int16_t> indices_values2 = {1, 2, 0, 3, 2, 0};\n+  ArrayFromVector<Int16Type, int16_t>(indices_values2, &indices2);\n+\n+  std::shared_ptr<Array> indices3;\n+  vector<bool> is_valid3 = {true, true, false, true, true, true};\n+  vector<int16_t> indices_values3 = {1, 2, -1, 0, 2, 0};\n+  ArrayFromVector<Int16Type, int16_t>(is_valid3, indices_values3, &indices3);\n+\n+  std::shared_ptr<Array> indices4;\n+  vector<bool> is_valid4 = {true, true, false, true, true, true};\n+  vector<int16_t> indices_values4 = {1, 2, 1, 3, 2, 0};\n+  ArrayFromVector<Int16Type, int16_t>(is_valid4, indices_values4, &indices4);\n+\n+  std::shared_ptr<Array> arr1, arr2, arr3, arr4;\n+  ASSERT_OK(DictionaryArray::FromArrays(dict_type, indices1, &arr1));\n+  ASSERT_RAISES(Invalid, DictionaryArray::FromArrays(dict_type, indices2, &arr2));\n+  ASSERT_OK(DictionaryArray::FromArrays(dict_type, indices3, &arr3));\n+  ASSERT_RAISES(Invalid, DictionaryArray::FromArrays(dict_type, indices4, &arr4));\n+}\n+\n // ----------------------------------------------------------------------\n // Struct tests\n \ndiff --git a/cpp/src/arrow/array.cc b/cpp/src/arrow/array.cc\nindex 3d72761ed..a8043d69b 100644\n--- a/cpp/src/arrow/array.cc\n+++ b/cpp/src/arrow/array.cc\n@@ -476,6 +476,39 @@ const Array* UnionArray::UnsafeChild(int i) const {\n // ----------------------------------------------------------------------\n // DictionaryArray\n \n+/// \\brief Perform validation check to determine if all dictionary indices\n+/// are within valid range (0 <= index < upper_bound)\n+///\n+/// \\param[in] indices array of dictionary indices\n+/// \\param[in] upper_bound upper bound of valid range for indices\n+/// \\return Status\n+template <typename ArrowType>\n+Status ValidateDictionaryIndices(const std::shared_ptr<Array>& indices,\n+                                 const int64_t upper_bound) {\n+  using ArrayType = typename TypeTraits<ArrowType>::ArrayType;\n+  const auto& array = static_cast<const ArrayType&>(*indices);\n+  const typename ArrowType::c_type* data = array.raw_values();\n+  const int64_t size = array.length();\n+\n+  if (array.null_count() == 0) {\n+    for (int64_t idx = 0; idx < size; ++idx) {\n+      if (data[idx] < 0 || data[idx] >= upper_bound) {\n+        return Status::Invalid(\"Dictionary has out-of-bound index [0, dict.length)\");\n+      }\n+    }\n+  } else {\n+    for (int64_t idx = 0; idx < size; ++idx) {\n+      if (!array.IsNull(idx)) {\n+        if (data[idx] < 0 || data[idx] >= upper_bound) {\n+          return Status::Invalid(\"Dictionary has out-of-bound index [0, dict.length)\");\n+        }\n+      }\n+    }\n+  }\n+\n+  return Status::OK();\n+}\n+\n DictionaryArray::DictionaryArray(const std::shared_ptr<ArrayData>& data)\n     : dict_type_(static_cast<const DictionaryType*>(data->type.get())) {\n   DCHECK_EQ(data->type->id(), Type::DICTIONARY);\n@@ -492,11 +525,51 @@ DictionaryArray::DictionaryArray(const std::shared_ptr<DataType>& type,\n   SetData(data);\n }\n \n+Status DictionaryArray::FromArrays(const std::shared_ptr<DataType>& type,\n+                                   const std::shared_ptr<Array>& indices,\n+                                   std::shared_ptr<Array>* out) {\n+  if (indices->length() == 0) {\n+    return Status::Invalid(\"Dictionary indices must have non-zero length\");\n+  }\n+\n+  DCHECK_EQ(type->id(), Type::DICTIONARY);\n+  const auto& dict = static_cast<const DictionaryType&>(*type);\n+  DCHECK_EQ(indices->type_id(), dict.index_type()->id());\n+\n+  int64_t upper_bound = dict.dictionary()->length();\n+  Status is_valid;\n+\n+  switch (indices->type_id()) {\n+    case Type::INT8:\n+      is_valid = ValidateDictionaryIndices<Int8Type>(indices, upper_bound);\n+      break;\n+    case Type::INT16:\n+      is_valid = ValidateDictionaryIndices<Int16Type>(indices, upper_bound);\n+      break;\n+    case Type::INT32:\n+      is_valid = ValidateDictionaryIndices<Int32Type>(indices, upper_bound);\n+      break;\n+    case Type::INT64:\n+      is_valid = ValidateDictionaryIndices<Int64Type>(indices, upper_bound);\n+      break;\n+    default:\n+      std::stringstream ss;\n+      ss << \"Categorical index type not supported: \" << indices->type()->ToString();\n+      return Status::NotImplemented(ss.str());\n+  }\n+\n+  if (!is_valid.ok()) {\n+    return is_valid;\n+  }\n+\n+  *out = std::make_shared<DictionaryArray>(type, indices);\n+  return is_valid;\n+}\n+\n void DictionaryArray::SetData(const std::shared_ptr<ArrayData>& data) {\n   this->Array::SetData(data);\n   auto indices_data = data_->Copy();\n   indices_data->type = dict_type_->index_type();\n-  std::shared_ptr<Array> result;\n   indices_ = MakeArray(indices_data);\n }\n \ndiff --git a/cpp/src/arrow/array.h b/cpp/src/arrow/array.h\nindex f0a786131..5b9ce9a01 100644\n--- a/cpp/src/arrow/array.h\n+++ b/cpp/src/arrow/array.h\n@@ -726,6 +726,19 @@ class ARROW_EXPORT DictionaryArray : public Array {\n   DictionaryArray(const std::shared_ptr<DataType>& type,\n                   const std::shared_ptr<Array>& indices);\n \n+  /// \\brief Construct DictionaryArray from dictonary data type and indices array\n+  ///\n+  /// This function does the validation of the indices and input type. It checks if\n+  /// all indices are non-negative and smaller than the size of the dictionary\n+  ///\n+  /// \\param[in] type a data type containing a dictionary\n+  /// \\param[in] indices an array of non-negative signed\n+  /// integers smaller than the size of the dictionary\n+  /// \\param[out] out the resulting DictionaryArray instance\n+  static Status FromArrays(const std::shared_ptr<DataType>& type,\n+                           const std::shared_ptr<Array>& indices,\n+                           std::shared_ptr<Array>* out);\n+\n   std::shared_ptr<Array> indices() const;\n   std::shared_ptr<Array> dictionary() const;\n \n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-06T16:17:57.551+0000",
                    "updated": "2018-02-06T16:17:57.551+0000"
                }
            ],
            "maxResults": 31,
            "total": 31,
            "startAt": 0
        },
        "customfield_12311820": "0|i3lvxb:",
        "customfield_12314139": null
    }
}