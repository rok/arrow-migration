{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13195624",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13195624",
    "key": "ARROW-3678",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351947",
                "id": "12351947",
                "description": "",
                "name": "10.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-10-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=zeroshade",
            "name": "zeroshade",
            "key": "zeroshade",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=zeroshade&avatarId=31230",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=zeroshade&avatarId=31230",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=zeroshade&avatarId=31230",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=zeroshade&avatarId=31230"
            },
            "displayName": "Matthew Topol",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333772",
                "id": "12333772",
                "name": "Go"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=sbinet",
            "name": "sbinet",
            "key": "sbinet",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=sbinet&avatarId=36072",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=sbinet&avatarId=36072",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=sbinet&avatarId=36072",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=sbinet&avatarId=36072"
            },
            "displayName": "Sebastien Binet",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=sbinet",
            "name": "sbinet",
            "key": "sbinet",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=sbinet&avatarId=36072",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=sbinet&avatarId=36072",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=sbinet&avatarId=36072",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=sbinet&avatarId=36072"
            },
            "displayName": "Sebastien Binet",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "aggregateprogress": {
            "progress": 19200,
            "total": 19200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 19200,
            "total": 19200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3678/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 32,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13195624/worklog/797001",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade opened a new pull request, #13768:\nURL: https://github.com/apache/arrow/pull/13768\n\n   Does not include enabling them in IPC yet, will do that in a subsequent change as this one is large enough already.\n\n\n",
                    "created": "2022-08-01T19:40:06.714+0000",
                    "updated": "2022-08-01T19:40:06.714+0000",
                    "started": "2022-08-01T19:40:06.714+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "797001",
                    "issueId": "13195624"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13195624/worklog/797002",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #13768:\nURL: https://github.com/apache/arrow/pull/13768#issuecomment-1201633310\n\n   https://issues.apache.org/jira/browse/ARROW-3678\n\n\n",
                    "created": "2022-08-01T19:40:29.767+0000",
                    "updated": "2022-08-01T19:40:29.767+0000",
                    "started": "2022-08-01T19:40:29.767+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "797002",
                    "issueId": "13195624"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13195624/worklog/797003",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #13768:\nURL: https://github.com/apache/arrow/pull/13768#issuecomment-1201633335\n\n   :warning: Ticket **has not been started in JIRA**, please click 'Start Progress'.\n\n\n",
                    "created": "2022-08-01T19:40:31.914+0000",
                    "updated": "2022-08-01T19:40:31.914+0000",
                    "started": "2022-08-01T19:40:31.914+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "797003",
                    "issueId": "13195624"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13195624/worklog/797622",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #13768:\nURL: https://github.com/apache/arrow/pull/13768#discussion_r936630672\n\n\n##########\ngo/arrow/bitutil/bitmaps.go:\n##########\n@@ -422,3 +423,81 @@ func CopyBitmap(src []byte, srcOffset, length int, dst []byte, dstOffset int) {\n \tdst[nbytes-1] &= ^trailMask\n \tdst[nbytes-1] |= lastData & trailMask\n }\n+\n+type bitOp struct {\n+\topWord func(uint64, uint64) uint64\n+\topByte func(byte, byte) byte\n+}\n+\n+var (\n+\tbitAndOp = bitOp{\n+\t\topWord: func(l, r uint64) uint64 { return l & r },\n+\t\topByte: func(l, r byte) byte { return l & r },\n+\t}\n+\tbitOrOp = bitOp{\n+\t\topWord: func(l, r uint64) uint64 { return l | r },\n+\t\topByte: func(l, r byte) byte { return l | r },\n+\t}\n+)\n+\n+func alignedBitmapOp(op bitOp, left, right []byte, lOffset, rOffset int64, out []byte, outOffset int64, length int64) {\n+\tdebug.Assert(lOffset%8 == rOffset%8, \"aligned bitmap op called with unaligned offsets\")\n+\tdebug.Assert(lOffset%8 == outOffset%8, \"aligned bitmap op called with unaligned output offset\")\n+\n+\tnbytes := BytesForBits(length + lOffset%8)\n+\tleft = left[lOffset/8:]\n+\tright = right[rOffset/8:]\n+\tout = out[outOffset/8:]\n+\tfor i := int64(0); i < nbytes; i++ {\n+\t\tout[i] = op.opByte(left[i], right[i])\n+\t}\n+}\n+\n+func unalignedBitmapOp(op bitOp, left, right []byte, lOffset, rOffset int64, out []byte, outOffset int64, length int64) {\n+\tleftRdr := NewBitmapWordReader(left, int(lOffset), int(length))\n+\trightRdr := NewBitmapWordReader(right, int(rOffset), int(length))\n+\twriter := NewBitmapWordWriter(out, int(outOffset), int(length))\n+\n+\tfor nwords := leftRdr.Words(); nwords > 0; nwords",
                    "created": "2022-08-03T13:59:14.077+0000",
                    "updated": "2022-08-03T13:59:14.077+0000",
                    "started": "2022-08-03T13:59:14.077+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "797622",
                    "issueId": "13195624"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13195624/worklog/797626",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on code in PR #13768:\nURL: https://github.com/apache/arrow/pull/13768#discussion_r936708588\n\n\n##########\ngo/arrow/array/fixedsize_binarybuilder.go:\n##########\n@@ -81,6 +83,12 @@ func (b *FixedSizeBinaryBuilder) AppendNull() {\n \tb.UnsafeAppendBoolToBitmap(false)\n }\n \n+func (b *FixedSizeBinaryBuilder) AppendEmptyValue() {\n+\tb.Reserve(1)\n+\tb.values.Advance(b.dtype.ByteWidth)\n\nReview Comment:\n   @pitrou There's no undefined values in Go, everything is defaulted to a `zero` value based on the type. For `byte` it's 0. So by just advancing the underlying buffer it automatically zeroes out the memory. Since this is for FixedSizeBinary, it needs to get advanced like this (the C++ version of this just explicitly zeroes out the memory which, as I said, isn't needed in Go)\n\n\n\n",
                    "created": "2022-08-03T14:05:16.608+0000",
                    "updated": "2022-08-03T14:05:16.608+0000",
                    "started": "2022-08-03T14:05:16.608+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "797626",
                    "issueId": "13195624"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13195624/worklog/797628",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on code in PR #13768:\nURL: https://github.com/apache/arrow/pull/13768#discussion_r936710364\n\n\n##########\ngo/arrow/bitutil/bitmaps.go:\n##########\n@@ -422,3 +423,81 @@ func CopyBitmap(src []byte, srcOffset, length int, dst []byte, dstOffset int) {\n \tdst[nbytes-1] &= ^trailMask\n \tdst[nbytes-1] |= lastData & trailMask\n }\n+\n+type bitOp struct {\n+\topWord func(uint64, uint64) uint64\n+\topByte func(byte, byte) byte\n+}\n+\n+var (\n+\tbitAndOp = bitOp{\n+\t\topWord: func(l, r uint64) uint64 { return l & r },\n+\t\topByte: func(l, r byte) byte { return l & r },\n+\t}\n+\tbitOrOp = bitOp{\n+\t\topWord: func(l, r uint64) uint64 { return l | r },\n+\t\topByte: func(l, r byte) byte { return l | r },\n+\t}\n+)\n+\n+func alignedBitmapOp(op bitOp, left, right []byte, lOffset, rOffset int64, out []byte, outOffset int64, length int64) {\n+\tdebug.Assert(lOffset%8 == rOffset%8, \"aligned bitmap op called with unaligned offsets\")\n+\tdebug.Assert(lOffset%8 == outOffset%8, \"aligned bitmap op called with unaligned output offset\")\n+\n+\tnbytes := BytesForBits(length + lOffset%8)\n+\tleft = left[lOffset/8:]\n+\tright = right[rOffset/8:]\n+\tout = out[outOffset/8:]\n+\tfor i := int64(0); i < nbytes; i++ {\n+\t\tout[i] = op.opByte(left[i], right[i])\n+\t}\n+}\n+\n+func unalignedBitmapOp(op bitOp, left, right []byte, lOffset, rOffset int64, out []byte, outOffset int64, length int64) {\n+\tleftRdr := NewBitmapWordReader(left, int(lOffset), int(length))\n+\trightRdr := NewBitmapWordReader(right, int(rOffset), int(length))\n+\twriter := NewBitmapWordWriter(out, int(outOffset), int(length))\n+\n+\tfor nwords := leftRdr.Words(); nwords > 0; nwords",
                    "created": "2022-08-03T14:06:46.823+0000",
                    "updated": "2022-08-03T14:06:46.823+0000",
                    "started": "2022-08-03T14:06:46.822+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "797628",
                    "issueId": "13195624"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13195624/worklog/797630",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on code in PR #13768:\nURL: https://github.com/apache/arrow/pull/13768#discussion_r936711343\n\n\n##########\ngo/arrow/datatype_nested.go:\n##########\n@@ -329,6 +333,208 @@ func (t *MapType) Layout() DataTypeLayout {\n \treturn t.value.Layout()\n }\n \n+type (\n+\tUnionTypeCode = int8\n+\tUnionMode     int8\n+)\n+\n+const (\n+\tMaxUnionTypeCode    UnionTypeCode = 127\n+\tInvalidUnionChildID int           = -1\n+\n+\tSparseMode UnionMode = iota\n+\tDenseMode\n+)\n+\n+type UnionType interface {\n+\tNestedType\n+\tMode() UnionMode\n+\tChildIDs() []int\n+\tTypeCodes() []UnionTypeCode\n\nReview Comment:\n   Thanks, I intended to do so and completely forgot as I got wrapped up in making the IPC stuff work for Unions (the next change after this). I'll go back and get these all documented\n\n\n\n",
                    "created": "2022-08-03T14:07:36.838+0000",
                    "updated": "2022-08-03T14:07:36.838+0000",
                    "started": "2022-08-03T14:07:36.837+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "797630",
                    "issueId": "13195624"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13195624/worklog/797631",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on code in PR #13768:\nURL: https://github.com/apache/arrow/pull/13768#discussion_r936711858\n\n\n##########\ngo/arrow/internal/arrdata/arrdata.go:\n##########\n@@ -49,6 +49,7 @@ func init() {\n \tRecords[\"decimal128\"] = makeDecimal128sRecords()\n \tRecords[\"maps\"] = makeMapsRecords()\n \tRecords[\"extension\"] = makeExtensionRecords()\n+\t// Records[\"union\"] = makeUnionRecords()\n\nReview Comment:\n   Yea, the subsequent change after this uncomments that after I add support for the JSON / IPC handling of unions.\n\n\n\n",
                    "created": "2022-08-03T14:08:01.872+0000",
                    "updated": "2022-08-03T14:08:01.872+0000",
                    "started": "2022-08-03T14:08:01.872+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "797631",
                    "issueId": "13195624"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13195624/worklog/797632",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on code in PR #13768:\nURL: https://github.com/apache/arrow/pull/13768#discussion_r936712776\n\n\n##########\ngo/arrow/datatype_nested.go:\n##########\n@@ -329,6 +333,208 @@ func (t *MapType) Layout() DataTypeLayout {\n \treturn t.value.Layout()\n }\n \n+type (\n+\tUnionTypeCode = int8\n+\tUnionMode     int8\n+)\n+\n+const (\n+\tMaxUnionTypeCode    UnionTypeCode = 127\n+\tInvalidUnionChildID int           = -1\n+\n+\tSparseMode UnionMode = iota\n+\tDenseMode\n+)\n+\n+type UnionType interface {\n+\tNestedType\n+\tMode() UnionMode\n+\tChildIDs() []int\n+\tTypeCodes() []UnionTypeCode\n+\tMaxTypeCode() UnionTypeCode\n+}\n+\n+func UnionOf(mode UnionMode, fields []Field, typeCodes []UnionTypeCode) UnionType {\n+\tswitch mode {\n+\tcase SparseMode:\n+\t\treturn SparseUnionOf(fields, typeCodes)\n+\tcase DenseMode:\n+\t\treturn DenseUnionOf(fields, typeCodes)\n+\tdefault:\n+\t\tpanic(\"arrow: invalid union mode\")\n+\t}\n+}\n+\n+type unionType struct {\n+\tchildren  []Field\n+\ttypeCodes []UnionTypeCode\n+\tchildIDs  [int(MaxUnionTypeCode) + 1]int\n+}\n+\n+func (t *unionType) init(fields []Field, typeCodes []UnionTypeCode) {\n+\t// initialize all child IDs to -1\n+\tt.childIDs[0] = InvalidUnionChildID\n+\tfor i := 1; i < len(t.childIDs); i *= 2 {\n+\t\tcopy(t.childIDs[i:], t.childIDs[:i])\n+\t}\n+\n+\tt.children = fields\n+\tt.typeCodes = typeCodes\n+\n+\tfor i, tc := range t.typeCodes {\n+\t\tt.childIDs[tc] = i\n+\t}\n+}\n+\n+func (t unionType) Fields() []Field            { return t.children }\n+func (t unionType) TypeCodes() []UnionTypeCode { return t.typeCodes }\n+func (t unionType) ChildIDs() []int            { return t.childIDs[:] }\n+\n+func (t *unionType) validate(fields []Field, typeCodes []UnionTypeCode, _ UnionMode) error {\n+\tif len(fields) != len(typeCodes) {\n+\t\treturn errors.New(\"arrow: union types should have the same number of fields as type codes\")\n+\t}\n+\n+\tfor _, c := range typeCodes {\n+\t\tif c < 0 || c > MaxUnionTypeCode {\n+\t\t\treturn errors.New(\"arrow: union type code out of bounds\")\n+\t\t}\n+\t}\n+\treturn nil\n+}\n+\n+func (t *unionType) MaxTypeCode() (max UnionTypeCode) {\n+\tif len(t.typeCodes) == 0 {\n+\t\treturn\n+\t}\n+\n+\tmax = t.typeCodes[0]\n+\tfor _, c := range t.typeCodes[1:] {\n+\t\tif c > max {\n+\t\t\tmax = c\n+\t\t}\n+\t}\n+\treturn\n+}\n+\n+func (t *unionType) String() string {\n+\tvar b strings.Builder\n+\tb.WriteByte('<')\n+\tfor i := range t.typeCodes {\n+\t\tif i != 0 {\n+\t\t\tb.WriteString(\", \")\n+\t\t}\n+\t\tfmt.Fprintf(&b, \"%s=%d\", t.children[i], t.typeCodes[i])\n+\t}\n+\tb.WriteByte('>')\n+\treturn b.String()\n+}\n+\n+func (t *unionType) fingerprint() string {\n+\tvar b strings.Builder\n+\tfor _, c := range t.typeCodes {\n+\t\tfmt.Fprintf(&b, \":%d\", c)\n+\t}\n+\tb.WriteString(\"]{\")\n+\tfor _, c := range t.children {\n+\t\tfingerprint := c.Fingerprint()\n+\t\tif len(fingerprint) == 0 {\n+\t\t\treturn \"\"\n+\t\t}\n+\t\tb.WriteString(fingerprint)\n+\t\tb.WriteByte(';')\n+\t}\n+\tb.WriteByte('}')\n+\treturn b.String()\n+}\n+\n+func fieldsFromArrays(arrays []Array, names ...string) (ret []Field) {\n+\tret = make([]Field, len(arrays))\n+\tif len(names) == 0 {\n+\t\tfor i, c := range arrays {\n+\t\t\tret[i] = Field{Name: strconv.Itoa(i), Type: c.DataType(), Nullable: true}\n+\t\t}\n+\t} else {\n+\t\tdebug.Assert(len(names) == len(arrays), \"mismatch of arrays and names\")\n+\t\tfor i, c := range arrays {\n+\t\t\tret[i] = Field{Name: names[i], Type: c.DataType(), Nullable: true}\n+\t\t}\n+\t}\n+\treturn\n+}\n+\n+type SparseUnionType struct {\n+\tunionType\n+}\n+\n+func SparseUnionFromArrays(children []Array, fields []string, codes []UnionTypeCode) *SparseUnionType {\n+\tif len(codes) == 0 {\n+\t\tcodes = make([]UnionTypeCode, len(children))\n+\t\tfor i := range children {\n+\t\t\tcodes[i] = UnionTypeCode(i)\n+\t\t}\n+\t}\n+\treturn SparseUnionOf(fieldsFromArrays(children, fields...), codes)\n+}\n+\n+func SparseUnionOf(fields []Field, typeCodes []UnionTypeCode) *SparseUnionType {\n+\tret := &SparseUnionType{}\n+\tif err := ret.validate(fields, typeCodes, ret.Mode()); err != nil {\n+\t\tpanic(err)\n+\t}\n+\tret.init(fields, typeCodes)\n+\treturn ret\n+}\n+\n+func (SparseUnionType) ID() Type        { return SPARSE_UNION }\n+func (SparseUnionType) Name() string    { return \"sparse_union\" }\n+func (SparseUnionType) Mode() UnionMode { return SparseMode }\n+func (t *SparseUnionType) Fingerprint() string {\n+\treturn typeFingerprint(t) + \"[s\" + t.fingerprint()\n+}\n+func (SparseUnionType) Layout() DataTypeLayout {\n+\treturn DataTypeLayout{Buffers: []BufferSpec{SpecAlwaysNull(), SpecFixedWidth(Uint8SizeBytes)}}\n\nReview Comment:\n   Yup yup.\n\n\n\n",
                    "created": "2022-08-03T14:08:47.367+0000",
                    "updated": "2022-08-03T14:08:47.367+0000",
                    "started": "2022-08-03T14:08:47.367+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "797632",
                    "issueId": "13195624"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13195624/worklog/797634",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on code in PR #13768:\nURL: https://github.com/apache/arrow/pull/13768#discussion_r936715424\n\n\n##########\ngo/arrow/array/union_test.go:\n##########\n@@ -0,0 +1,952 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package array_test\n+\n+import (\n+\t\"strings\"\n+\t\"testing\"\n+\n+\t\"github.com/apache/arrow/go/v9/arrow\"\n+\t\"github.com/apache/arrow/go/v9/arrow/array\"\n+\t\"github.com/apache/arrow/go/v9/arrow/memory\"\n+\t\"github.com/stretchr/testify/assert\"\n+\t\"github.com/stretchr/testify/suite\"\n+)\n+\n+func uint8ArrFromSlice(ids ...uint8) arrow.Array {\n+\tdata := array.NewData(arrow.PrimitiveTypes.Uint8, len(ids),\n+\t\t[]*memory.Buffer{nil, memory.NewBufferBytes(arrow.Uint8Traits.CastToBytes(ids))}, nil, 0, 0)\n+\tdefer data.Release()\n+\treturn array.MakeFromData(data)\n+}\n+\n+func int32ArrFromSlice(offsets ...int32) arrow.Array {\n+\tdata := array.NewData(arrow.PrimitiveTypes.Int32, len(offsets),\n+\t\t[]*memory.Buffer{nil, memory.NewBufferBytes(arrow.Int32Traits.CastToBytes(offsets))}, nil, 0, 0)\n+\tdefer data.Release()\n+\treturn array.MakeFromData(data)\n+}\n+\n+func TestUnionSliceEquals(t *testing.T) {\n+\tunionFields := []arrow.Field{\n+\t\t{Name: \"u0\", Type: arrow.PrimitiveTypes.Int32, Nullable: true},\n+\t\t{Name: \"u1\", Type: arrow.PrimitiveTypes.Uint8, Nullable: true},\n+\t}\n+\n+\ttypeCodes := []arrow.UnionTypeCode{5, 10}\n+\tsparseType := arrow.SparseUnionOf(unionFields, typeCodes)\n+\tdenseType := arrow.DenseUnionOf(unionFields, typeCodes)\n+\n+\tschema := arrow.NewSchema([]arrow.Field{\n+\t\t{Name: \"sparse\", Type: sparseType, Nullable: true},\n+\t\t{Name: \"dense\", Type: denseType, Nullable: true},\n+\t}, nil)\n+\n+\tsparseChildren := make([]arrow.Array, 2)\n+\tdenseChildren := make([]arrow.Array, 2)\n+\n+\tconst length = 7\n+\n+\ttypeIDsBuffer := memory.NewBufferBytes(arrow.Uint8Traits.CastToBytes([]uint8{5, 10, 5, 5, 10, 10, 5}))\n+\tsparseChildren[0] = int32ArrFromSlice(0, 1, 2, 3, 4, 5, 6)\n+\tdefer sparseChildren[0].Release()\n+\tsparseChildren[1] = uint8ArrFromSlice(10, 11, 12, 13, 14, 15, 16)\n+\tdefer sparseChildren[1].Release()\n+\n+\tdenseChildren[0] = int32ArrFromSlice(0, 2, 3, 7)\n+\tdefer denseChildren[0].Release()\n+\tdenseChildren[1] = uint8ArrFromSlice(11, 14, 15)\n+\tdefer denseChildren[1].Release()\n+\n+\toffsetsBuffer := memory.NewBufferBytes(arrow.Int32Traits.CastToBytes([]int32{0, 0, 1, 2, 1, 2, 3}))\n+\tsparse := array.NewSparseUnion(sparseType, length, sparseChildren, typeIDsBuffer, 0)\n+\tdense := array.NewDenseUnion(denseType, length, denseChildren, typeIDsBuffer, offsetsBuffer, 0)\n+\n+\tdefer sparse.Release()\n+\tdefer dense.Release()\n+\n+\tbatch := array.NewRecord(schema, []arrow.Array{sparse, dense}, -1)\n+\tdefer batch.Release()\n+\n+\tcheckUnion := func(arr arrow.Array) {\n+\t\tsize := arr.Len()\n+\t\tslice := array.NewSlice(arr, 2, int64(size))\n+\t\tdefer slice.Release()\n+\t\tassert.EqualValues(t, size-2, slice.Len())\n+\n+\t\tslice2 := array.NewSlice(arr, 2, int64(arr.Len()))\n+\t\tdefer slice2.Release()\n+\t\tassert.EqualValues(t, size-2, slice2.Len())\n+\n+\t\tassert.True(t, array.Equal(slice, slice2))\n\nReview Comment:\n   Yea, the tests in `compare_test.go` explicitly take two offset slices and verify they do not compare as equal. (see line 49 of `compare_test.go`)\n\n\n\n",
                    "created": "2022-08-03T14:11:07.282+0000",
                    "updated": "2022-08-03T14:11:07.282+0000",
                    "started": "2022-08-03T14:11:07.282+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "797634",
                    "issueId": "13195624"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13195624/worklog/797636",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on code in PR #13768:\nURL: https://github.com/apache/arrow/pull/13768#discussion_r936724316\n\n\n##########\ngo/arrow/array/fixed_size_list.go:\n##########\n@@ -196,6 +198,10 @@ func (b *FixedSizeListBuilder) AppendNull() {\n \tb.unsafeAppendBoolToBitmap(false)\n }\n \n+func (b *FixedSizeListBuilder) AppendEmptyValue() {\n+\tb.Append(true)\n\nReview Comment:\n   good catch! I missed that!\n\n\n\n",
                    "created": "2022-08-03T14:18:27.918+0000",
                    "updated": "2022-08-03T14:18:27.918+0000",
                    "started": "2022-08-03T14:18:27.918+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "797636",
                    "issueId": "13195624"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13195624/worklog/797659",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on code in PR #13768:\nURL: https://github.com/apache/arrow/pull/13768#discussion_r936765696\n\n\n##########\ngo/arrow/bitutil/bitmaps_test.go:\n##########\n@@ -356,3 +358,119 @@ func BenchmarkBitmapReader(b *testing.B) {\n \t\t}\n \t})\n }\n+\n+type bitmapOp struct {\n+\tnoAlloc func(left, right []byte, lOffset, rOffset int64, out []byte, outOffset, length int64)\n+\talloc   func(mem memory.Allocator, left, right []byte, lOffset, rOffset int64, length, outOffset int64) *memory.Buffer\n+}\n+\n+type BitmapOpSuite struct {\n+\tsuite.Suite\n+}\n+\n+func (s *BitmapOpSuite) testAligned(op bitmapOp, leftBits, rightBits []int, resultBits []bool) {\n+\tvar (\n+\t\tleft, right []byte\n+\t\tout         *memory.Buffer\n+\t\tlength      int64\n+\t)\n+\tfor _, lOffset := range []int64{0, 1, 3, 5, 7, 8, 13, 21, 38, 75, 120, 65536} {\n+\t\ts.Run(fmt.Sprintf(\"left offset %d\", lOffset), func() {\n+\t\t\tleft = bitmapFromSlice(leftBits, int(lOffset))\n+\t\t\tlength = int64(len(leftBits))\n+\t\t\tfor _, rOffset := range []int64{lOffset, lOffset + 8, lOffset + 40} {\n+\t\t\t\ts.Run(fmt.Sprintf(\"right offset %d\", rOffset), func() {\n+\t\t\t\t\tright = bitmapFromSlice(rightBits, int(rOffset))\n+\t\t\t\t\tfor _, outOffset := range []int64{lOffset, lOffset + 16, lOffset + 24} {\n+\t\t\t\t\t\ts.Run(fmt.Sprintf(\"out offset %d\", outOffset), func() {\n+\t\t\t\t\t\t\tout = op.alloc(memory.DefaultAllocator, left, right, lOffset, rOffset, length, outOffset)\n+\t\t\t\t\t\t\trdr := bitutil.NewBitmapReader(out.Bytes(), int(outOffset), int(length))\n+\t\t\t\t\t\t\tassertReaderVals(s.T(), rdr, resultBits)\n+\n+\t\t\t\t\t\t\tmemory.Set(out.Bytes(), 0x00)\n+\t\t\t\t\t\t\top.noAlloc(left, right, lOffset, rOffset, out.Bytes(), outOffset, length)\n+\t\t\t\t\t\t\trdr = bitutil.NewBitmapReader(out.Bytes(), int(outOffset), int(length))\n+\t\t\t\t\t\t\tassertReaderVals(s.T(), rdr, resultBits)\n+\t\t\t\t\t\t})\n+\t\t\t\t\t}\n+\t\t\t\t})\n+\t\t\t}\n+\t\t})\n+\t}\n+}\n+\n+func (s *BitmapOpSuite) testUnaligned(op bitmapOp, leftBits, rightBits []int, resultBits []bool) {\n+\tvar (\n+\t\tleft, right []byte\n+\t\tout         *memory.Buffer\n+\t\tlength      int64\n+\t\toffsets     = []int64{0, 1, 3, 5, 7, 8, 13, 21, 38, 75, 120, 65536}\n+\t)\n+\n+\tfor _, lOffset := range offsets {\n+\t\ts.Run(fmt.Sprintf(\"left offset %d\", lOffset), func() {\n+\t\t\tleft = bitmapFromSlice(leftBits, int(lOffset))\n+\t\t\tlength = int64(len(leftBits))\n+\t\t\tfor _, rOffset := range offsets {\n+\t\t\t\ts.Run(fmt.Sprintf(\"right offset %d\", rOffset), func() {\n+\t\t\t\t\tright = bitmapFromSlice(rightBits, int(rOffset))\n+\t\t\t\t\tfor _, outOffset := range offsets {\n+\t\t\t\t\t\ts.Run(fmt.Sprintf(\"out offset %d\", outOffset), func() {\n+\t\t\t\t\t\t\ts.Run(\"alloc\", func() {\n+\t\t\t\t\t\t\t\tout = op.alloc(memory.DefaultAllocator, left, right, lOffset, rOffset, length, outOffset)\n+\t\t\t\t\t\t\t\trdr := bitutil.NewBitmapReader(out.Bytes(), int(outOffset), int(length))\n+\t\t\t\t\t\t\t\tassertReaderVals(s.T(), rdr, resultBits)\n+\t\t\t\t\t\t\t})\n+\t\t\t\t\t\t\ts.Run(\"noalloc\", func() {\n+\t\t\t\t\t\t\t\tmemory.Set(out.Bytes(), 0x00)\n+\t\t\t\t\t\t\t\top.noAlloc(left, right, lOffset, rOffset, out.Bytes(), outOffset, length)\n+\t\t\t\t\t\t\t\trdr := bitutil.NewBitmapReader(out.Bytes(), int(outOffset), int(length))\n+\t\t\t\t\t\t\t\tassertReaderVals(s.T(), rdr, resultBits)\n+\t\t\t\t\t\t\t})\n+\t\t\t\t\t\t})\n+\t\t\t\t\t}\n+\t\t\t\t})\n+\t\t\t}\n+\t\t})\n+\t}\n+}\n+\n+func (s *BitmapOpSuite) TestBitmapAnd() {\n+\top := bitmapOp{\n+\t\tnoAlloc: bitutil.BitmapAnd,\n+\t\talloc:   bitutil.BitmapAndAlloc,\n+\t}\n+\n+\tleftBits := []int{0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1}\n+\trightBits := []int{0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0}\n+\tresultBits := []bool{false, false, true, false, false, false, false, false, false, true, false, false, false, false}\n\nReview Comment:\n   So, I've been looking at the C++ implementation for a bit which I sourced this from and it looks like there's a bug I've inherited (correct me if i'm wrong please).\r\n   \r\n   Basically, if the bitmaps passed in to `BitmapAnd` and `BitmapOr` (in util/bitmap_ops.h/cc) if the offsets are non-zero (but identical, so it goes to the aligned case) but the passed in length is 0, it's still going to perform the bit-wise operation on the first byte of the bitmaps because it counts the number of bytes to operate on as `BytesForBits(length + offset % 8)` which would be 1 for any non-byte-aligned offset even with length being 0. This also exposes an issue (intentional or not, either way it's not documented) that the in the Aligned case, the `BitmapAnd` and `BitmapOr` functions will clobber preceding / trailing bits in the first/last bytes for non-byte-aligned offsets. \r\n   \r\n   In the un-aligned case, by using the BitmapWordWriter, those preceding and trailing bits get maintained because the writer utilizes masks to protect them. I'm gonna address these issues in this implementation, but I figured I'd mention them in case there's something in the C++ implementation that I'm missing or it exhibits these problems. \n\n\n\n",
                    "created": "2022-08-03T14:53:20.544+0000",
                    "updated": "2022-08-03T14:53:20.544+0000",
                    "started": "2022-08-03T14:53:20.544+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "797659",
                    "issueId": "13195624"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13195624/worklog/797672",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on code in PR #13768:\nURL: https://github.com/apache/arrow/pull/13768#discussion_r936824869\n\n\n##########\ngo/arrow/bitutil/bitmaps.go:\n##########\n@@ -422,3 +423,81 @@ func CopyBitmap(src []byte, srcOffset, length int, dst []byte, dstOffset int) {\n \tdst[nbytes-1] &= ^trailMask\n \tdst[nbytes-1] |= lastData & trailMask\n }\n+\n+type bitOp struct {\n+\topWord func(uint64, uint64) uint64\n+\topByte func(byte, byte) byte\n+}\n+\n+var (\n+\tbitAndOp = bitOp{\n+\t\topWord: func(l, r uint64) uint64 { return l & r },\n+\t\topByte: func(l, r byte) byte { return l & r },\n+\t}\n+\tbitOrOp = bitOp{\n+\t\topWord: func(l, r uint64) uint64 { return l | r },\n+\t\topByte: func(l, r byte) byte { return l | r },\n+\t}\n+)\n+\n+func alignedBitmapOp(op bitOp, left, right []byte, lOffset, rOffset int64, out []byte, outOffset int64, length int64) {\n+\tdebug.Assert(lOffset%8 == rOffset%8, \"aligned bitmap op called with unaligned offsets\")\n+\tdebug.Assert(lOffset%8 == outOffset%8, \"aligned bitmap op called with unaligned output offset\")\n+\n+\tnbytes := BytesForBits(length + lOffset%8)\n+\tleft = left[lOffset/8:]\n+\tright = right[rOffset/8:]\n+\tout = out[outOffset/8:]\n+\tfor i := int64(0); i < nbytes; i++ {\n+\t\tout[i] = op.opByte(left[i], right[i])\n+\t}\n+}\n+\n+func unalignedBitmapOp(op bitOp, left, right []byte, lOffset, rOffset int64, out []byte, outOffset int64, length int64) {\n+\tleftRdr := NewBitmapWordReader(left, int(lOffset), int(length))\n+\trightRdr := NewBitmapWordReader(right, int(rOffset), int(length))\n+\twriter := NewBitmapWordWriter(out, int(outOffset), int(length))\n+\n+\tfor nwords := leftRdr.Words(); nwords > 0; nwords",
                    "created": "2022-08-03T15:46:39.751+0000",
                    "updated": "2022-08-03T15:46:39.751+0000",
                    "started": "2022-08-03T15:46:39.751+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "797672",
                    "issueId": "13195624"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13195624/worklog/797677",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on code in PR #13768:\nURL: https://github.com/apache/arrow/pull/13768#discussion_r936849193\n\n\n##########\ngo/arrow/bitutil/bitmaps.go:\n##########\n@@ -422,3 +423,81 @@ func CopyBitmap(src []byte, srcOffset, length int, dst []byte, dstOffset int) {\n \tdst[nbytes-1] &= ^trailMask\n \tdst[nbytes-1] |= lastData & trailMask\n }\n+\n+type bitOp struct {\n+\topWord func(uint64, uint64) uint64\n+\topByte func(byte, byte) byte\n+}\n+\n+var (\n+\tbitAndOp = bitOp{\n+\t\topWord: func(l, r uint64) uint64 { return l & r },\n+\t\topByte: func(l, r byte) byte { return l & r },\n+\t}\n+\tbitOrOp = bitOp{\n+\t\topWord: func(l, r uint64) uint64 { return l | r },\n+\t\topByte: func(l, r byte) byte { return l | r },\n+\t}\n+)\n+\n+func alignedBitmapOp(op bitOp, left, right []byte, lOffset, rOffset int64, out []byte, outOffset int64, length int64) {\n+\tdebug.Assert(lOffset%8 == rOffset%8, \"aligned bitmap op called with unaligned offsets\")\n+\tdebug.Assert(lOffset%8 == outOffset%8, \"aligned bitmap op called with unaligned output offset\")\n+\n+\tnbytes := BytesForBits(length + lOffset%8)\n+\tleft = left[lOffset/8:]\n+\tright = right[rOffset/8:]\n+\tout = out[outOffset/8:]\n+\tfor i := int64(0); i < nbytes; i++ {\n+\t\tout[i] = op.opByte(left[i], right[i])\n+\t}\n+}\n+\n+func unalignedBitmapOp(op bitOp, left, right []byte, lOffset, rOffset int64, out []byte, outOffset int64, length int64) {\n+\tleftRdr := NewBitmapWordReader(left, int(lOffset), int(length))\n+\trightRdr := NewBitmapWordReader(right, int(rOffset), int(length))\n+\twriter := NewBitmapWordWriter(out, int(outOffset), int(length))\n+\n+\tfor nwords := leftRdr.Words(); nwords > 0; nwords",
                    "created": "2022-08-03T16:05:31.274+0000",
                    "updated": "2022-08-03T16:05:31.274+0000",
                    "started": "2022-08-03T16:05:31.273+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "797677",
                    "issueId": "13195624"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13195624/worklog/797704",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #13768:\nURL: https://github.com/apache/arrow/pull/13768#discussion_r936950524\n\n\n##########\ngo/arrow/bitutil/bitmaps.go:\n##########\n@@ -422,3 +423,81 @@ func CopyBitmap(src []byte, srcOffset, length int, dst []byte, dstOffset int) {\n \tdst[nbytes-1] &= ^trailMask\n \tdst[nbytes-1] |= lastData & trailMask\n }\n+\n+type bitOp struct {\n+\topWord func(uint64, uint64) uint64\n+\topByte func(byte, byte) byte\n+}\n+\n+var (\n+\tbitAndOp = bitOp{\n+\t\topWord: func(l, r uint64) uint64 { return l & r },\n+\t\topByte: func(l, r byte) byte { return l & r },\n+\t}\n+\tbitOrOp = bitOp{\n+\t\topWord: func(l, r uint64) uint64 { return l | r },\n+\t\topByte: func(l, r byte) byte { return l | r },\n+\t}\n+)\n+\n+func alignedBitmapOp(op bitOp, left, right []byte, lOffset, rOffset int64, out []byte, outOffset int64, length int64) {\n+\tdebug.Assert(lOffset%8 == rOffset%8, \"aligned bitmap op called with unaligned offsets\")\n+\tdebug.Assert(lOffset%8 == outOffset%8, \"aligned bitmap op called with unaligned output offset\")\n+\n+\tnbytes := BytesForBits(length + lOffset%8)\n+\tleft = left[lOffset/8:]\n+\tright = right[rOffset/8:]\n+\tout = out[outOffset/8:]\n+\tfor i := int64(0); i < nbytes; i++ {\n+\t\tout[i] = op.opByte(left[i], right[i])\n+\t}\n+}\n+\n+func unalignedBitmapOp(op bitOp, left, right []byte, lOffset, rOffset int64, out []byte, outOffset int64, length int64) {\n+\tleftRdr := NewBitmapWordReader(left, int(lOffset), int(length))\n+\trightRdr := NewBitmapWordReader(right, int(rOffset), int(length))\n+\twriter := NewBitmapWordWriter(out, int(outOffset), int(length))\n+\n+\tfor nwords := leftRdr.Words(); nwords > 0; nwords",
                    "created": "2022-08-03T17:19:56.802+0000",
                    "updated": "2022-08-03T17:19:56.802+0000",
                    "started": "2022-08-03T17:19:56.802+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "797704",
                    "issueId": "13195624"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13195624/worklog/797719",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on code in PR #13768:\nURL: https://github.com/apache/arrow/pull/13768#discussion_r937000975\n\n\n##########\ngo/arrow/datatype_nested.go:\n##########\n@@ -329,6 +333,208 @@ func (t *MapType) Layout() DataTypeLayout {\n \treturn t.value.Layout()\n }\n \n+type (\n+\tUnionTypeCode = int8\n+\tUnionMode     int8\n+)\n+\n+const (\n+\tMaxUnionTypeCode    UnionTypeCode = 127\n+\tInvalidUnionChildID int           = -1\n+\n+\tSparseMode UnionMode = iota\n+\tDenseMode\n+)\n+\n+type UnionType interface {\n+\tNestedType\n+\tMode() UnionMode\n+\tChildIDs() []int\n+\tTypeCodes() []UnionTypeCode\n\nReview Comment:\n   Added comments along with an example\n\n\n\n",
                    "created": "2022-08-03T18:21:23.166+0000",
                    "updated": "2022-08-03T18:21:23.166+0000",
                    "started": "2022-08-03T18:21:23.166+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "797719",
                    "issueId": "13195624"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13195624/worklog/797721",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on code in PR #13768:\nURL: https://github.com/apache/arrow/pull/13768#discussion_r937002223\n\n\n##########\ngo/arrow/bitutil/bitmaps.go:\n##########\n@@ -422,3 +423,81 @@ func CopyBitmap(src []byte, srcOffset, length int, dst []byte, dstOffset int) {\n \tdst[nbytes-1] &= ^trailMask\n \tdst[nbytes-1] |= lastData & trailMask\n }\n+\n+type bitOp struct {\n+\topWord func(uint64, uint64) uint64\n+\topByte func(byte, byte) byte\n+}\n+\n+var (\n+\tbitAndOp = bitOp{\n+\t\topWord: func(l, r uint64) uint64 { return l & r },\n+\t\topByte: func(l, r byte) byte { return l & r },\n+\t}\n+\tbitOrOp = bitOp{\n+\t\topWord: func(l, r uint64) uint64 { return l | r },\n+\t\topByte: func(l, r byte) byte { return l | r },\n+\t}\n+)\n+\n+func alignedBitmapOp(op bitOp, left, right []byte, lOffset, rOffset int64, out []byte, outOffset int64, length int64) {\n+\tdebug.Assert(lOffset%8 == rOffset%8, \"aligned bitmap op called with unaligned offsets\")\n+\tdebug.Assert(lOffset%8 == outOffset%8, \"aligned bitmap op called with unaligned output offset\")\n+\n+\tnbytes := BytesForBits(length + lOffset%8)\n+\tleft = left[lOffset/8:]\n+\tright = right[rOffset/8:]\n+\tout = out[outOffset/8:]\n+\tfor i := int64(0); i < nbytes; i++ {\n+\t\tout[i] = op.opByte(left[i], right[i])\n+\t}\n+}\n+\n+func unalignedBitmapOp(op bitOp, left, right []byte, lOffset, rOffset int64, out []byte, outOffset int64, length int64) {\n+\tleftRdr := NewBitmapWordReader(left, int(lOffset), int(length))\n+\trightRdr := NewBitmapWordReader(right, int(rOffset), int(length))\n+\twriter := NewBitmapWordWriter(out, int(outOffset), int(length))\n+\n+\tfor nwords := leftRdr.Words(); nwords > 0; nwords",
                    "created": "2022-08-03T18:22:58.498+0000",
                    "updated": "2022-08-03T18:22:58.498+0000",
                    "started": "2022-08-03T18:22:58.497+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "797721",
                    "issueId": "13195624"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13195624/worklog/797736",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on code in PR #13768:\nURL: https://github.com/apache/arrow/pull/13768#discussion_r937040390\n\n\n##########\ngo/arrow/bitutil/bitmaps.go:\n##########\n@@ -422,3 +423,81 @@ func CopyBitmap(src []byte, srcOffset, length int, dst []byte, dstOffset int) {\n \tdst[nbytes-1] &= ^trailMask\n \tdst[nbytes-1] |= lastData & trailMask\n }\n+\n+type bitOp struct {\n+\topWord func(uint64, uint64) uint64\n+\topByte func(byte, byte) byte\n+}\n+\n+var (\n+\tbitAndOp = bitOp{\n+\t\topWord: func(l, r uint64) uint64 { return l & r },\n+\t\topByte: func(l, r byte) byte { return l & r },\n+\t}\n+\tbitOrOp = bitOp{\n+\t\topWord: func(l, r uint64) uint64 { return l | r },\n+\t\topByte: func(l, r byte) byte { return l | r },\n+\t}\n+)\n+\n+func alignedBitmapOp(op bitOp, left, right []byte, lOffset, rOffset int64, out []byte, outOffset int64, length int64) {\n+\tdebug.Assert(lOffset%8 == rOffset%8, \"aligned bitmap op called with unaligned offsets\")\n+\tdebug.Assert(lOffset%8 == outOffset%8, \"aligned bitmap op called with unaligned output offset\")\n+\n+\tnbytes := BytesForBits(length + lOffset%8)\n+\tleft = left[lOffset/8:]\n+\tright = right[rOffset/8:]\n+\tout = out[outOffset/8:]\n+\tfor i := int64(0); i < nbytes; i++ {\n+\t\tout[i] = op.opByte(left[i], right[i])\n+\t}\n+}\n+\n+func unalignedBitmapOp(op bitOp, left, right []byte, lOffset, rOffset int64, out []byte, outOffset int64, length int64) {\n+\tleftRdr := NewBitmapWordReader(left, int(lOffset), int(length))\n+\trightRdr := NewBitmapWordReader(right, int(rOffset), int(length))\n+\twriter := NewBitmapWordWriter(out, int(outOffset), int(length))\n+\n+\tfor nwords := leftRdr.Words(); nwords > 0; nwords",
                    "created": "2022-08-03T19:10:22.883+0000",
                    "updated": "2022-08-03T19:10:22.883+0000",
                    "started": "2022-08-03T19:10:22.882+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "797736",
                    "issueId": "13195624"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13195624/worklog/797908",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #13768:\nURL: https://github.com/apache/arrow/pull/13768#discussion_r937551293\n\n\n##########\ngo/arrow/bitutil/bitmaps.go:\n##########\n@@ -422,3 +423,81 @@ func CopyBitmap(src []byte, srcOffset, length int, dst []byte, dstOffset int) {\n \tdst[nbytes-1] &= ^trailMask\n \tdst[nbytes-1] |= lastData & trailMask\n }\n+\n+type bitOp struct {\n+\topWord func(uint64, uint64) uint64\n+\topByte func(byte, byte) byte\n+}\n+\n+var (\n+\tbitAndOp = bitOp{\n+\t\topWord: func(l, r uint64) uint64 { return l & r },\n+\t\topByte: func(l, r byte) byte { return l & r },\n+\t}\n+\tbitOrOp = bitOp{\n+\t\topWord: func(l, r uint64) uint64 { return l | r },\n+\t\topByte: func(l, r byte) byte { return l | r },\n+\t}\n+)\n+\n+func alignedBitmapOp(op bitOp, left, right []byte, lOffset, rOffset int64, out []byte, outOffset int64, length int64) {\n+\tdebug.Assert(lOffset%8 == rOffset%8, \"aligned bitmap op called with unaligned offsets\")\n+\tdebug.Assert(lOffset%8 == outOffset%8, \"aligned bitmap op called with unaligned output offset\")\n+\n+\tnbytes := BytesForBits(length + lOffset%8)\n+\tleft = left[lOffset/8:]\n+\tright = right[rOffset/8:]\n+\tout = out[outOffset/8:]\n+\tfor i := int64(0); i < nbytes; i++ {\n+\t\tout[i] = op.opByte(left[i], right[i])\n+\t}\n+}\n+\n+func unalignedBitmapOp(op bitOp, left, right []byte, lOffset, rOffset int64, out []byte, outOffset int64, length int64) {\n+\tleftRdr := NewBitmapWordReader(left, int(lOffset), int(length))\n+\trightRdr := NewBitmapWordReader(right, int(rOffset), int(length))\n+\twriter := NewBitmapWordWriter(out, int(outOffset), int(length))\n+\n+\tfor nwords := leftRdr.Words(); nwords > 0; nwords",
                    "created": "2022-08-04T09:19:53.603+0000",
                    "updated": "2022-08-04T09:19:53.603+0000",
                    "started": "2022-08-04T09:19:53.602+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "797908",
                    "issueId": "13195624"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13195624/worklog/797918",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on PR #13768:\nURL: https://github.com/apache/arrow/pull/13768#issuecomment-1205002657\n\n   Uh, it looks like AppVeyor is complaining for an unrelated issue.\n\n\n",
                    "created": "2022-08-04T09:29:56.816+0000",
                    "updated": "2022-08-04T09:29:56.816+0000",
                    "started": "2022-08-04T09:29:56.816+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "797918",
                    "issueId": "13195624"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 19200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@58a0ea90[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@18b73c3a[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@388eb076[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@19791db1[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3b499f43[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@75b1ccb0[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3871cf70[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@6934d95a[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1ef0e0b8[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@65df7b9a[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@53e3221e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@1cd2cf31[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 19200,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Aug 04 21:15:18 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-08-04T21:15:18.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3678/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2018-11-01T10:42:39.000+0000",
        "updated": "2022-08-04T23:32:06.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "5h 20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 19200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Go] implement Union array",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13195624/comment/17575454",
                    "id": "17575454",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=zeroshade",
                        "name": "zeroshade",
                        "key": "zeroshade",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=zeroshade&avatarId=31230",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=zeroshade&avatarId=31230",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=zeroshade&avatarId=31230",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=zeroshade&avatarId=31230"
                        },
                        "displayName": "Matthew Topol",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 13768\n[https://github.com/apache/arrow/pull/13768]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=zeroshade",
                        "name": "zeroshade",
                        "key": "zeroshade",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=zeroshade&avatarId=31230",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=zeroshade&avatarId=31230",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=zeroshade&avatarId=31230",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=zeroshade&avatarId=31230"
                        },
                        "displayName": "Matthew Topol",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2022-08-04T21:15:18.951+0000",
                    "updated": "2022-08-04T21:15:18.951+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|s000pc:",
        "customfield_12314139": null
    }
}