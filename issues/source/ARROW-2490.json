{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13154242",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13154242",
    "key": "ARROW-2490",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12345978",
                "id": "12345978",
                "description": "",
                "name": "0.15.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-10-05"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12341707",
                "id": "12341707",
                "description": "",
                "name": "0.9.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-03-19"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "aggregateprogress": {
            "progress": 22800,
            "total": 22800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 22800,
            "total": 22800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2490/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 45,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13154242/worklog/310781",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5358: [EXP] ARROW-2490: [C++] Normalize input stream concurrency\nURL: https://github.com/apache/arrow/pull/5358\n \n \n   Add a debug mode concurrency wrapper that checks proper concurrent use of\r\n   input stream / file methods.\r\n   \r\n   Remove explicit locking from stream implementations.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-11T16:26:16.819+0000",
                    "updated": "2019-09-11T16:26:16.819+0000",
                    "started": "2019-09-11T16:26:16.819+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "310781",
                    "issueId": "13154242"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13154242/worklog/310863",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #5358: [EXP] ARROW-2490: [C++] Normalize input stream concurrency\nURL: https://github.com/apache/arrow/pull/5358#issuecomment-530479687\n \n \n   @fsaintjacques @emkornfield @xhochy \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-11T17:22:15.684+0000",
                    "updated": "2019-09-11T17:22:15.684+0000",
                    "started": "2019-09-11T17:22:15.683+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "310863",
                    "issueId": "13154242"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13154242/worklog/311634",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5358: [EXP] ARROW-2490: [C++] Normalize input stream concurrency\nURL: https://github.com/apache/arrow/pull/5358#discussion_r323899792\n \n \n\n ##########\n File path: cpp/src/arrow/io/concurrency.h\n ##########\n @@ -0,0 +1,186 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+\n+#include \"arrow/io/interfaces.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/util/checked_cast.h\"\n+#include \"arrow/util/macros.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+namespace io {\n+namespace internal {\n+\n+template <class LockType>\n+class SharedLockGuard {\n+ public:\n+  explicit SharedLockGuard(LockType* lock) : lock_(lock) { lock_->LockShared(); }\n+\n+  ~SharedLockGuard() { lock_->UnlockShared(); }\n+\n+ protected:\n+  LockType* lock_;\n+};\n+\n+template <class LockType>\n+class ExclusiveLockGuard {\n+ public:\n+  explicit ExclusiveLockGuard(LockType* lock) : lock_(lock) { lock_->LockExclusive(); }\n+\n+  ~ExclusiveLockGuard() { lock_->UnlockExclusive(); }\n+\n+ protected:\n+  LockType* lock_;\n+};\n+\n+// Debug concurrency checker that marks \"shared\" and \"exclusive\" code sections,\n+// aborting if the concurrency rules get violated.  Does nothing in release mode.\n+// Note that we intentionally use the same class declaration in debug and\n+// release builds in order to avoid runtime failures when e.g. loading a\n+// release-built DLL with a debug-built application, or the reverse.\n+\n+class ARROW_EXPORT SELockChecker {\n \n Review comment:\n   Maybe to SharedExclusiveChecker?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-12T19:28:57.681+0000",
                    "updated": "2019-09-12T19:28:57.681+0000",
                    "started": "2019-09-12T19:28:57.681+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "311634",
                    "issueId": "13154242"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13154242/worklog/311635",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5358: [EXP] ARROW-2490: [C++] Normalize input stream concurrency\nURL: https://github.com/apache/arrow/pull/5358#discussion_r323902327\n \n \n\n ##########\n File path: cpp/src/arrow/io/concurrency.h\n ##########\n @@ -0,0 +1,186 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+\n+#include \"arrow/io/interfaces.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/util/checked_cast.h\"\n+#include \"arrow/util/macros.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+namespace io {\n+namespace internal {\n+\n+template <class LockType>\n+class SharedLockGuard {\n+ public:\n+  explicit SharedLockGuard(LockType* lock) : lock_(lock) { lock_->LockShared(); }\n+\n+  ~SharedLockGuard() { lock_->UnlockShared(); }\n+\n+ protected:\n+  LockType* lock_;\n+};\n+\n+template <class LockType>\n+class ExclusiveLockGuard {\n+ public:\n+  explicit ExclusiveLockGuard(LockType* lock) : lock_(lock) { lock_->LockExclusive(); }\n+\n+  ~ExclusiveLockGuard() { lock_->UnlockExclusive(); }\n+\n+ protected:\n+  LockType* lock_;\n+};\n+\n+// Debug concurrency checker that marks \"shared\" and \"exclusive\" code sections,\n+// aborting if the concurrency rules get violated.  Does nothing in release mode.\n+// Note that we intentionally use the same class declaration in debug and\n+// release builds in order to avoid runtime failures when e.g. loading a\n+// release-built DLL with a debug-built application, or the reverse.\n+\n+class ARROW_EXPORT SELockChecker {\n+ public:\n+  SELockChecker();\n+  void LockShared();\n+  void UnlockShared();\n+  void LockExclusive();\n+  void UnlockExclusive();\n+\n+  SharedLockGuard<SELockChecker> shared_guard() {\n+    return SharedLockGuard<SELockChecker>(this);\n+  }\n+\n+  ExclusiveLockGuard<SELockChecker> exclusive_guard() {\n+    return ExclusiveLockGuard<SELockChecker>(this);\n+  }\n+\n+ protected:\n+  struct Impl;\n+  std::shared_ptr<Impl> impl_;\n+};\n+\n+// Concurrency wrappers for IO classes that check the correctness of\n+// concurrent calls to various methods.  It is not necessary to wrap all\n+// IO classes with these, only a few core classes that get used in tests.\n+\n+template <class Derived>\n+class ARROW_EXPORT InputStreamConcurrencyWrapper : public InputStream {\n+ public:\n+  // TODO Close, Abort?\n+  // XXX Peek() has a default implementation in InputStream\n+\n+  Status Tell(int64_t* position) const final {\n+    auto guard = lock_.exclusive_guard();\n+    return derived()->DoTell(position);\n+  }\n+\n+  Status Read(int64_t nbytes, int64_t* bytes_read, void* out) final {\n+    auto guard = lock_.exclusive_guard();\n+    return derived()->DoRead(nbytes, bytes_read, out);\n+  }\n+\n+  Status Read(int64_t nbytes, std::shared_ptr<Buffer>* out) final {\n+    auto guard = lock_.exclusive_guard();\n+    return derived()->DoRead(nbytes, out);\n+  }\n+\n+  /*\n+  Methods to implement in derived class:\n+\n+  Status DoTell(int64_t* position) const;\n+  Status DoRead(int64_t nbytes, int64_t* bytes_read, void* out);\n+  Status DoRead(int64_t nbytes, std::shared_ptr<Buffer>* out);\n+  */\n+\n+ protected:\n+  Derived* derived() { return ::arrow::internal::checked_cast<Derived*>(this); }\n+\n+  const Derived* derived() const {\n+    return ::arrow::internal::checked_cast<const Derived*>(this);\n+  }\n+\n+  mutable SELockChecker lock_;\n+};\n+\n+template <class Derived>\n+class ARROW_EXPORT RandomAccessFileConcurrencyWrapper : public RandomAccessFile {\n+ public:\n+  Status Tell(int64_t* position) const final {\n+    auto guard = lock_.exclusive_guard();\n+    return derived()->DoTell(position);\n+  }\n+\n+  Status Read(int64_t nbytes, int64_t* bytes_read, void* out) final {\n+    auto guard = lock_.exclusive_guard();\n+    return derived()->DoRead(nbytes, bytes_read, out);\n+  }\n+\n+  Status Read(int64_t nbytes, std::shared_ptr<Buffer>* out) final {\n+    auto guard = lock_.exclusive_guard();\n+    return derived()->DoRead(nbytes, out);\n+  }\n+\n+  Status Seek(int64_t position) final {\n+    auto guard = lock_.exclusive_guard();\n+    return derived()->DoSeek(position);\n+  }\n+\n+  Status GetSize(int64_t* size) final {\n+    auto guard = lock_.exclusive_guard();\n+    return derived()->DoGetSize(size);\n+  }\n+\n+  Status ReadAt(int64_t position, int64_t nbytes, int64_t* bytes_read, void* out) final {\n+    auto guard = lock_.shared_guard();\n+    return derived()->DoReadAt(position, nbytes, bytes_read, out);\n+  }\n+\n+  Status ReadAt(int64_t position, int64_t nbytes, std::shared_ptr<Buffer>* out) final {\n+    auto guard = lock_.shared_guard();\n+    return derived()->DoReadAt(position, nbytes, out);\n+  }\n+\n+  /*\n+  Methods to implement in derived class:\n+\n+  Status DoTell(int64_t* position) const;\n+  Status DoRead(int64_t nbytes, int64_t* bytes_read, void* out);\n+  Status DoRead(int64_t nbytes, std::shared_ptr<Buffer>* out);\n+  Status DoSeek(int64_t position);\n+  Status DoGetSize(int64_t* size);\n+  Status DoReadAt(int64_t position, int64_t nbytes, int64_t* bytes_read, void* out);\n+  Status DoReadAt(int64_t position, int64_t nbytes, std::shared_ptr<Buffer>* out);\n \n Review comment:\n   ```suggestion\r\n     Status DoReadAt(int64_t nbytes, std::shared_ptr<Buffer>* out);\r\n     \r\n     \r\n     These methods should be protected in the derived class and RandomAccessFileConcurrencyWrapper\r\n     declared as a friend with\r\n     \r\n     friend class RandomAccessFileConcurrencyWrapper<derived>;\r\n     \r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-12T19:28:57.681+0000",
                    "updated": "2019-09-12T19:28:57.681+0000",
                    "started": "2019-09-12T19:28:57.681+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "311635",
                    "issueId": "13154242"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13154242/worklog/311636",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5358: [EXP] ARROW-2490: [C++] Normalize input stream concurrency\nURL: https://github.com/apache/arrow/pull/5358#discussion_r323892854\n \n \n\n ##########\n File path: cpp/src/arrow/io/concurrency.h\n ##########\n @@ -0,0 +1,186 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+\n+#include \"arrow/io/interfaces.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/util/checked_cast.h\"\n+#include \"arrow/util/macros.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+namespace io {\n+namespace internal {\n+\n+template <class LockType>\n+class SharedLockGuard {\n+ public:\n+  explicit SharedLockGuard(LockType* lock) : lock_(lock) { lock_->LockShared(); }\n+\n+  ~SharedLockGuard() { lock_->UnlockShared(); }\n+\n+ protected:\n+  LockType* lock_;\n+};\n+\n+template <class LockType>\n+class ExclusiveLockGuard {\n+ public:\n+  explicit ExclusiveLockGuard(LockType* lock) : lock_(lock) { lock_->LockExclusive(); }\n+\n+  ~ExclusiveLockGuard() { lock_->UnlockExclusive(); }\n+\n+ protected:\n+  LockType* lock_;\n+};\n+\n+// Debug concurrency checker that marks \"shared\" and \"exclusive\" code sections,\n+// aborting if the concurrency rules get violated.  Does nothing in release mode.\n+// Note that we intentionally use the same class declaration in debug and\n+// release builds in order to avoid runtime failures when e.g. loading a\n+// release-built DLL with a debug-built application, or the reverse.\n+\n+class ARROW_EXPORT SELockChecker {\n \n Review comment:\n   the acronym `SE` in the name makes this typename confusing without looking at the comment, could you rename this? \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-12T19:28:57.706+0000",
                    "updated": "2019-09-12T19:28:57.706+0000",
                    "started": "2019-09-12T19:28:57.705+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "311636",
                    "issueId": "13154242"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13154242/worklog/311637",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5358: [EXP] ARROW-2490: [C++] Normalize input stream concurrency\nURL: https://github.com/apache/arrow/pull/5358#discussion_r323872168\n \n \n\n ##########\n File path: cpp/src/arrow/io/concurrency.h\n ##########\n @@ -0,0 +1,186 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+\n+#include \"arrow/io/interfaces.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/util/checked_cast.h\"\n+#include \"arrow/util/macros.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+namespace io {\n+namespace internal {\n+\n+template <class LockType>\n+class SharedLockGuard {\n+ public:\n+  explicit SharedLockGuard(LockType* lock) : lock_(lock) { lock_->LockShared(); }\n+\n+  ~SharedLockGuard() { lock_->UnlockShared(); }\n+\n+ protected:\n+  LockType* lock_;\n+};\n+\n+template <class LockType>\n+class ExclusiveLockGuard {\n+ public:\n+  explicit ExclusiveLockGuard(LockType* lock) : lock_(lock) { lock_->LockExclusive(); }\n+\n+  ~ExclusiveLockGuard() { lock_->UnlockExclusive(); }\n+\n+ protected:\n+  LockType* lock_;\n+};\n+\n+// Debug concurrency checker that marks \"shared\" and \"exclusive\" code sections,\n+// aborting if the concurrency rules get violated.  Does nothing in release mode.\n+// Note that we intentionally use the same class declaration in debug and\n+// release builds in order to avoid runtime failures when e.g. loading a\n+// release-built DLL with a debug-built application, or the reverse.\n+\n+class ARROW_EXPORT SELockChecker {\n+ public:\n+  SELockChecker();\n+  void LockShared();\n+  void UnlockShared();\n+  void LockExclusive();\n+  void UnlockExclusive();\n+\n+  SharedLockGuard<SELockChecker> shared_guard() {\n+    return SharedLockGuard<SELockChecker>(this);\n+  }\n+\n+  ExclusiveLockGuard<SELockChecker> exclusive_guard() {\n+    return ExclusiveLockGuard<SELockChecker>(this);\n+  }\n+\n+ protected:\n+  struct Impl;\n+  std::shared_ptr<Impl> impl_;\n+};\n+\n+// Concurrency wrappers for IO classes that check the correctness of\n+// concurrent calls to various methods.  It is not necessary to wrap all\n+// IO classes with these, only a few core classes that get used in tests.\n+\n+template <class Derived>\n+class ARROW_EXPORT InputStreamConcurrencyWrapper : public InputStream {\n+ public:\n+  // TODO Close, Abort?\n+  // XXX Peek() has a default implementation in InputStream\n+\n+  Status Tell(int64_t* position) const final {\n+    auto guard = lock_.exclusive_guard();\n+    return derived()->DoTell(position);\n+  }\n+\n+  Status Read(int64_t nbytes, int64_t* bytes_read, void* out) final {\n+    auto guard = lock_.exclusive_guard();\n+    return derived()->DoRead(nbytes, bytes_read, out);\n+  }\n+\n+  Status Read(int64_t nbytes, std::shared_ptr<Buffer>* out) final {\n+    auto guard = lock_.exclusive_guard();\n+    return derived()->DoRead(nbytes, out);\n+  }\n+\n+  /*\n+  Methods to implement in derived class:\n+\n+  Status DoTell(int64_t* position) const;\n+  Status DoRead(int64_t nbytes, int64_t* bytes_read, void* out);\n+  Status DoRead(int64_t nbytes, std::shared_ptr<Buffer>* out);\n \n Review comment:\n   ```suggestion\r\n     Status DoRead(int64_t nbytes, std::shared_ptr<Buffer>* out);\r\n     \r\n     \r\n     These methods should be protected in the derived class and InputStreamConcurrencyWrapper\r\n     declared as a friend with\r\n     \r\n     friend class InputStreamConcurrencyWrapper<derived>;\r\n     \r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-12T19:28:57.709+0000",
                    "updated": "2019-09-12T19:28:57.709+0000",
                    "started": "2019-09-12T19:28:57.708+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "311637",
                    "issueId": "13154242"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13154242/worklog/311638",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5358: [EXP] ARROW-2490: [C++] Normalize input stream concurrency\nURL: https://github.com/apache/arrow/pull/5358#discussion_r323911552\n \n \n\n ##########\n File path: cpp/src/arrow/io/concurrency.h\n ##########\n @@ -0,0 +1,186 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+\n+#include \"arrow/io/interfaces.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/util/checked_cast.h\"\n+#include \"arrow/util/macros.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+namespace io {\n+namespace internal {\n+\n+template <class LockType>\n+class SharedLockGuard {\n+ public:\n+  explicit SharedLockGuard(LockType* lock) : lock_(lock) { lock_->LockShared(); }\n+\n+  ~SharedLockGuard() { lock_->UnlockShared(); }\n+\n+ protected:\n+  LockType* lock_;\n+};\n+\n+template <class LockType>\n+class ExclusiveLockGuard {\n+ public:\n+  explicit ExclusiveLockGuard(LockType* lock) : lock_(lock) { lock_->LockExclusive(); }\n+\n+  ~ExclusiveLockGuard() { lock_->UnlockExclusive(); }\n+\n+ protected:\n+  LockType* lock_;\n+};\n+\n+// Debug concurrency checker that marks \"shared\" and \"exclusive\" code sections,\n+// aborting if the concurrency rules get violated.  Does nothing in release mode.\n+// Note that we intentionally use the same class declaration in debug and\n+// release builds in order to avoid runtime failures when e.g. loading a\n+// release-built DLL with a debug-built application, or the reverse.\n+\n+class ARROW_EXPORT SELockChecker {\n+ public:\n+  SELockChecker();\n+  void LockShared();\n+  void UnlockShared();\n+  void LockExclusive();\n+  void UnlockExclusive();\n+\n+  SharedLockGuard<SELockChecker> shared_guard() {\n+    return SharedLockGuard<SELockChecker>(this);\n+  }\n+\n+  ExclusiveLockGuard<SELockChecker> exclusive_guard() {\n+    return ExclusiveLockGuard<SELockChecker>(this);\n+  }\n+\n+ protected:\n+  struct Impl;\n+  std::shared_ptr<Impl> impl_;\n+};\n+\n+// Concurrency wrappers for IO classes that check the correctness of\n+// concurrent calls to various methods.  It is not necessary to wrap all\n+// IO classes with these, only a few core classes that get used in tests.\n+\n+template <class Derived>\n+class ARROW_EXPORT InputStreamConcurrencyWrapper : public InputStream {\n+ public:\n+  // TODO Close, Abort?\n+  // XXX Peek() has a default implementation in InputStream\n \n Review comment:\n   Would need to be added to RandomAccessFileConcurrencyWrapper as well. I don't think you can factor it into a shared mixin without making the inheritance of InputStream virtual\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-12T19:28:57.717+0000",
                    "updated": "2019-09-12T19:28:57.717+0000",
                    "started": "2019-09-12T19:28:57.716+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "311638",
                    "issueId": "13154242"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13154242/worklog/311639",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5358: [EXP] ARROW-2490: [C++] Normalize input stream concurrency\nURL: https://github.com/apache/arrow/pull/5358#discussion_r323910739\n \n \n\n ##########\n File path: cpp/src/arrow/io/concurrency.h\n ##########\n @@ -0,0 +1,186 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+\n+#include \"arrow/io/interfaces.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/util/checked_cast.h\"\n+#include \"arrow/util/macros.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+namespace io {\n+namespace internal {\n+\n+template <class LockType>\n+class SharedLockGuard {\n+ public:\n+  explicit SharedLockGuard(LockType* lock) : lock_(lock) { lock_->LockShared(); }\n+\n+  ~SharedLockGuard() { lock_->UnlockShared(); }\n+\n+ protected:\n+  LockType* lock_;\n+};\n+\n+template <class LockType>\n+class ExclusiveLockGuard {\n+ public:\n+  explicit ExclusiveLockGuard(LockType* lock) : lock_(lock) { lock_->LockExclusive(); }\n+\n+  ~ExclusiveLockGuard() { lock_->UnlockExclusive(); }\n+\n+ protected:\n+  LockType* lock_;\n+};\n+\n+// Debug concurrency checker that marks \"shared\" and \"exclusive\" code sections,\n+// aborting if the concurrency rules get violated.  Does nothing in release mode.\n+// Note that we intentionally use the same class declaration in debug and\n+// release builds in order to avoid runtime failures when e.g. loading a\n+// release-built DLL with a debug-built application, or the reverse.\n+\n+class ARROW_EXPORT SELockChecker {\n+ public:\n+  SELockChecker();\n+  void LockShared();\n+  void UnlockShared();\n+  void LockExclusive();\n+  void UnlockExclusive();\n+\n+  SharedLockGuard<SELockChecker> shared_guard() {\n+    return SharedLockGuard<SELockChecker>(this);\n+  }\n+\n+  ExclusiveLockGuard<SELockChecker> exclusive_guard() {\n+    return ExclusiveLockGuard<SELockChecker>(this);\n+  }\n+\n+ protected:\n+  struct Impl;\n+  std::shared_ptr<Impl> impl_;\n+};\n+\n+// Concurrency wrappers for IO classes that check the correctness of\n+// concurrent calls to various methods.  It is not necessary to wrap all\n+// IO classes with these, only a few core classes that get used in tests.\n+\n+template <class Derived>\n+class ARROW_EXPORT InputStreamConcurrencyWrapper : public InputStream {\n+ public:\n+  // TODO Close, Abort?\n+  // XXX Peek() has a default implementation in InputStream\n \n Review comment:\n   ```suggestion\r\n     Status DoPeek(int64_t ARROW_ARG_UNUSED(nbytes),\r\n                              util::string_view* ARROW_ARG_UNUSED(out)) {\r\n       return Status::NotImplemented(\"Peek not implemented\");\r\n     }\r\n     \r\n     Status Peek(int64_t nbytes, util::string_view* out) final {\r\n       auto guard = lock_.exclusive_guard();\r\n       return derived()->DoPeek(nbytes, out);\r\n     }\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-12T19:28:57.760+0000",
                    "updated": "2019-09-12T19:28:57.760+0000",
                    "started": "2019-09-12T19:28:57.760+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "311639",
                    "issueId": "13154242"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13154242/worklog/311640",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5358: [EXP] ARROW-2490: [C++] Normalize input stream concurrency\nURL: https://github.com/apache/arrow/pull/5358#discussion_r323908635\n \n \n\n ##########\n File path: cpp/src/arrow/io/concurrency.h\n ##########\n @@ -0,0 +1,186 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+\n+#include \"arrow/io/interfaces.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/util/checked_cast.h\"\n+#include \"arrow/util/macros.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+namespace io {\n+namespace internal {\n+\n+template <class LockType>\n+class SharedLockGuard {\n+ public:\n+  explicit SharedLockGuard(LockType* lock) : lock_(lock) { lock_->LockShared(); }\n+\n+  ~SharedLockGuard() { lock_->UnlockShared(); }\n+\n+ protected:\n+  LockType* lock_;\n+};\n+\n+template <class LockType>\n+class ExclusiveLockGuard {\n+ public:\n+  explicit ExclusiveLockGuard(LockType* lock) : lock_(lock) { lock_->LockExclusive(); }\n+\n+  ~ExclusiveLockGuard() { lock_->UnlockExclusive(); }\n+\n+ protected:\n+  LockType* lock_;\n+};\n+\n+// Debug concurrency checker that marks \"shared\" and \"exclusive\" code sections,\n+// aborting if the concurrency rules get violated.  Does nothing in release mode.\n+// Note that we intentionally use the same class declaration in debug and\n+// release builds in order to avoid runtime failures when e.g. loading a\n+// release-built DLL with a debug-built application, or the reverse.\n+\n+class ARROW_EXPORT SELockChecker {\n+ public:\n+  SELockChecker();\n+  void LockShared();\n+  void UnlockShared();\n+  void LockExclusive();\n+  void UnlockExclusive();\n+\n+  SharedLockGuard<SELockChecker> shared_guard() {\n+    return SharedLockGuard<SELockChecker>(this);\n+  }\n+\n+  ExclusiveLockGuard<SELockChecker> exclusive_guard() {\n+    return ExclusiveLockGuard<SELockChecker>(this);\n+  }\n+\n+ protected:\n+  struct Impl;\n+  std::shared_ptr<Impl> impl_;\n+};\n+\n+// Concurrency wrappers for IO classes that check the correctness of\n+// concurrent calls to various methods.  It is not necessary to wrap all\n+// IO classes with these, only a few core classes that get used in tests.\n+\n+template <class Derived>\n+class ARROW_EXPORT InputStreamConcurrencyWrapper : public InputStream {\n+ public:\n+  // TODO Close, Abort?\n \n Review comment:\n   It's definitely an error to close the stream if (for example) another thread is `ReadAt`ing. I think a similar argument holds for abort; even if the stream does not flush buffers we should never be reading a buffer while its file is being aborted.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-12T19:28:57.823+0000",
                    "updated": "2019-09-12T19:28:57.823+0000",
                    "started": "2019-09-12T19:28:57.822+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "311640",
                    "issueId": "13154242"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13154242/worklog/311641",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5358: [EXP] ARROW-2490: [C++] Normalize input stream concurrency\nURL: https://github.com/apache/arrow/pull/5358#discussion_r323909230\n \n \n\n ##########\n File path: cpp/src/arrow/io/concurrency.h\n ##########\n @@ -0,0 +1,186 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+\n+#include \"arrow/io/interfaces.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/util/checked_cast.h\"\n+#include \"arrow/util/macros.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+namespace io {\n+namespace internal {\n+\n+template <class LockType>\n+class SharedLockGuard {\n+ public:\n+  explicit SharedLockGuard(LockType* lock) : lock_(lock) { lock_->LockShared(); }\n+\n+  ~SharedLockGuard() { lock_->UnlockShared(); }\n+\n+ protected:\n+  LockType* lock_;\n+};\n+\n+template <class LockType>\n+class ExclusiveLockGuard {\n+ public:\n+  explicit ExclusiveLockGuard(LockType* lock) : lock_(lock) { lock_->LockExclusive(); }\n+\n+  ~ExclusiveLockGuard() { lock_->UnlockExclusive(); }\n+\n+ protected:\n+  LockType* lock_;\n+};\n+\n+// Debug concurrency checker that marks \"shared\" and \"exclusive\" code sections,\n+// aborting if the concurrency rules get violated.  Does nothing in release mode.\n+// Note that we intentionally use the same class declaration in debug and\n+// release builds in order to avoid runtime failures when e.g. loading a\n+// release-built DLL with a debug-built application, or the reverse.\n+\n+class ARROW_EXPORT SELockChecker {\n+ public:\n+  SELockChecker();\n+  void LockShared();\n+  void UnlockShared();\n+  void LockExclusive();\n+  void UnlockExclusive();\n+\n+  SharedLockGuard<SELockChecker> shared_guard() {\n+    return SharedLockGuard<SELockChecker>(this);\n+  }\n+\n+  ExclusiveLockGuard<SELockChecker> exclusive_guard() {\n+    return ExclusiveLockGuard<SELockChecker>(this);\n+  }\n+\n+ protected:\n+  struct Impl;\n+  std::shared_ptr<Impl> impl_;\n+};\n+\n+// Concurrency wrappers for IO classes that check the correctness of\n+// concurrent calls to various methods.  It is not necessary to wrap all\n+// IO classes with these, only a few core classes that get used in tests.\n+\n+template <class Derived>\n+class ARROW_EXPORT InputStreamConcurrencyWrapper : public InputStream {\n+ public:\n+  // TODO Close, Abort?\n+  // XXX Peek() has a default implementation in InputStream\n \n Review comment:\n   move the default implementation from InputStream to here (as `DoPeek`, I suppose)?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-12T19:28:57.826+0000",
                    "updated": "2019-09-12T19:28:57.826+0000",
                    "started": "2019-09-12T19:28:57.825+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "311641",
                    "issueId": "13154242"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13154242/worklog/311642",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5358: [EXP] ARROW-2490: [C++] Normalize input stream concurrency\nURL: https://github.com/apache/arrow/pull/5358#discussion_r323874415\n \n \n\n ##########\n File path: cpp/src/arrow/gpu/cuda_memory.h\n ##########\n @@ -151,25 +151,25 @@ class ARROW_EXPORT CudaIpcMemHandle {\n /// \\class CudaBufferReader\n /// \\brief File interface for zero-copy read from CUDA buffers\n ///\n-/// Note: Reads return pointers to device memory. This means you must be\n-/// careful using this interface with any Arrow code which may expect to be\n-/// able to do anything other than pointer arithmetic on the returned buffers\n+/// CAUTION: reading to a Buffer returns a Buffer pointing to device memory.\n+/// It will generally not be compatible with Arrow code expecting an usual\n \n Review comment:\n   ```suggestion\r\n   /// It will generally not be compatible with Arrow code expecting the usual case of a\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-12T19:28:57.833+0000",
                    "updated": "2019-09-12T19:28:57.833+0000",
                    "started": "2019-09-12T19:28:57.833+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "311642",
                    "issueId": "13154242"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13154242/worklog/313007",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5358: [EXP] ARROW-2490: [C++] Normalize input stream concurrency\nURL: https://github.com/apache/arrow/pull/5358#discussion_r324697195\n \n \n\n ##########\n File path: cpp/src/arrow/gpu/cuda_memory.h\n ##########\n @@ -151,25 +151,25 @@ class ARROW_EXPORT CudaIpcMemHandle {\n /// \\class CudaBufferReader\n /// \\brief File interface for zero-copy read from CUDA buffers\n ///\n-/// Note: Reads return pointers to device memory. This means you must be\n-/// careful using this interface with any Arrow code which may expect to be\n-/// able to do anything other than pointer arithmetic on the returned buffers\n+/// CAUTION: reading to a Buffer returns a Buffer pointing to device memory.\n+/// It will generally not be compatible with Arrow code expecting an usual\n \n Review comment:\n   Hmm, I must admit I don't understand the suggestion, but perhaps it's because I'm not a native English speaker. Would \"the usual CPU buffer\" be some kind of idiomatic expression?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-16T14:11:32.108+0000",
                    "updated": "2019-09-16T14:11:32.108+0000",
                    "started": "2019-09-16T14:11:32.107+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "313007",
                    "issueId": "13154242"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13154242/worklog/313009",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5358: [EXP] ARROW-2490: [C++] Normalize input stream concurrency\nURL: https://github.com/apache/arrow/pull/5358#discussion_r324698523\n \n \n\n ##########\n File path: cpp/src/arrow/io/concurrency.h\n ##########\n @@ -0,0 +1,186 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+\n+#include \"arrow/io/interfaces.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/util/checked_cast.h\"\n+#include \"arrow/util/macros.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+namespace io {\n+namespace internal {\n+\n+template <class LockType>\n+class SharedLockGuard {\n+ public:\n+  explicit SharedLockGuard(LockType* lock) : lock_(lock) { lock_->LockShared(); }\n+\n+  ~SharedLockGuard() { lock_->UnlockShared(); }\n+\n+ protected:\n+  LockType* lock_;\n+};\n+\n+template <class LockType>\n+class ExclusiveLockGuard {\n+ public:\n+  explicit ExclusiveLockGuard(LockType* lock) : lock_(lock) { lock_->LockExclusive(); }\n+\n+  ~ExclusiveLockGuard() { lock_->UnlockExclusive(); }\n+\n+ protected:\n+  LockType* lock_;\n+};\n+\n+// Debug concurrency checker that marks \"shared\" and \"exclusive\" code sections,\n+// aborting if the concurrency rules get violated.  Does nothing in release mode.\n+// Note that we intentionally use the same class declaration in debug and\n+// release builds in order to avoid runtime failures when e.g. loading a\n+// release-built DLL with a debug-built application, or the reverse.\n+\n+class ARROW_EXPORT SELockChecker {\n+ public:\n+  SELockChecker();\n+  void LockShared();\n+  void UnlockShared();\n+  void LockExclusive();\n+  void UnlockExclusive();\n+\n+  SharedLockGuard<SELockChecker> shared_guard() {\n+    return SharedLockGuard<SELockChecker>(this);\n+  }\n+\n+  ExclusiveLockGuard<SELockChecker> exclusive_guard() {\n+    return ExclusiveLockGuard<SELockChecker>(this);\n+  }\n+\n+ protected:\n+  struct Impl;\n+  std::shared_ptr<Impl> impl_;\n+};\n+\n+// Concurrency wrappers for IO classes that check the correctness of\n+// concurrent calls to various methods.  It is not necessary to wrap all\n+// IO classes with these, only a few core classes that get used in tests.\n+\n+template <class Derived>\n+class ARROW_EXPORT InputStreamConcurrencyWrapper : public InputStream {\n+ public:\n+  // TODO Close, Abort?\n+  // XXX Peek() has a default implementation in InputStream\n+\n+  Status Tell(int64_t* position) const final {\n+    auto guard = lock_.exclusive_guard();\n+    return derived()->DoTell(position);\n+  }\n+\n+  Status Read(int64_t nbytes, int64_t* bytes_read, void* out) final {\n+    auto guard = lock_.exclusive_guard();\n+    return derived()->DoRead(nbytes, bytes_read, out);\n+  }\n+\n+  Status Read(int64_t nbytes, std::shared_ptr<Buffer>* out) final {\n+    auto guard = lock_.exclusive_guard();\n+    return derived()->DoRead(nbytes, out);\n+  }\n+\n+  /*\n+  Methods to implement in derived class:\n+\n+  Status DoTell(int64_t* position) const;\n+  Status DoRead(int64_t nbytes, int64_t* bytes_read, void* out);\n+  Status DoRead(int64_t nbytes, std::shared_ptr<Buffer>* out);\n \n Review comment:\n   Will do, thanks.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-16T14:13:54.307+0000",
                    "updated": "2019-09-16T14:13:54.307+0000",
                    "started": "2019-09-16T14:13:54.306+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "313009",
                    "issueId": "13154242"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13154242/worklog/313010",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5358: [EXP] ARROW-2490: [C++] Normalize input stream concurrency\nURL: https://github.com/apache/arrow/pull/5358#discussion_r324698650\n \n \n\n ##########\n File path: cpp/src/arrow/io/concurrency.h\n ##########\n @@ -0,0 +1,186 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+\n+#include \"arrow/io/interfaces.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/util/checked_cast.h\"\n+#include \"arrow/util/macros.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+namespace io {\n+namespace internal {\n+\n+template <class LockType>\n+class SharedLockGuard {\n+ public:\n+  explicit SharedLockGuard(LockType* lock) : lock_(lock) { lock_->LockShared(); }\n+\n+  ~SharedLockGuard() { lock_->UnlockShared(); }\n+\n+ protected:\n+  LockType* lock_;\n+};\n+\n+template <class LockType>\n+class ExclusiveLockGuard {\n+ public:\n+  explicit ExclusiveLockGuard(LockType* lock) : lock_(lock) { lock_->LockExclusive(); }\n+\n+  ~ExclusiveLockGuard() { lock_->UnlockExclusive(); }\n+\n+ protected:\n+  LockType* lock_;\n+};\n+\n+// Debug concurrency checker that marks \"shared\" and \"exclusive\" code sections,\n+// aborting if the concurrency rules get violated.  Does nothing in release mode.\n+// Note that we intentionally use the same class declaration in debug and\n+// release builds in order to avoid runtime failures when e.g. loading a\n+// release-built DLL with a debug-built application, or the reverse.\n+\n+class ARROW_EXPORT SELockChecker {\n \n Review comment:\n   Yes, that sounds better.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-16T14:14:07.586+0000",
                    "updated": "2019-09-16T14:14:07.586+0000",
                    "started": "2019-09-16T14:14:07.586+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "313010",
                    "issueId": "13154242"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13154242/worklog/313017",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5358: [EXP] ARROW-2490: [C++] Normalize input stream concurrency\nURL: https://github.com/apache/arrow/pull/5358#discussion_r324707995\n \n \n\n ##########\n File path: cpp/src/arrow/io/concurrency.h\n ##########\n @@ -0,0 +1,186 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+\n+#include \"arrow/io/interfaces.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/util/checked_cast.h\"\n+#include \"arrow/util/macros.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+namespace io {\n+namespace internal {\n+\n+template <class LockType>\n+class SharedLockGuard {\n+ public:\n+  explicit SharedLockGuard(LockType* lock) : lock_(lock) { lock_->LockShared(); }\n+\n+  ~SharedLockGuard() { lock_->UnlockShared(); }\n+\n+ protected:\n+  LockType* lock_;\n+};\n+\n+template <class LockType>\n+class ExclusiveLockGuard {\n+ public:\n+  explicit ExclusiveLockGuard(LockType* lock) : lock_(lock) { lock_->LockExclusive(); }\n+\n+  ~ExclusiveLockGuard() { lock_->UnlockExclusive(); }\n+\n+ protected:\n+  LockType* lock_;\n+};\n+\n+// Debug concurrency checker that marks \"shared\" and \"exclusive\" code sections,\n+// aborting if the concurrency rules get violated.  Does nothing in release mode.\n+// Note that we intentionally use the same class declaration in debug and\n+// release builds in order to avoid runtime failures when e.g. loading a\n+// release-built DLL with a debug-built application, or the reverse.\n+\n+class ARROW_EXPORT SELockChecker {\n+ public:\n+  SELockChecker();\n+  void LockShared();\n+  void UnlockShared();\n+  void LockExclusive();\n+  void UnlockExclusive();\n+\n+  SharedLockGuard<SELockChecker> shared_guard() {\n+    return SharedLockGuard<SELockChecker>(this);\n+  }\n+\n+  ExclusiveLockGuard<SELockChecker> exclusive_guard() {\n+    return ExclusiveLockGuard<SELockChecker>(this);\n+  }\n+\n+ protected:\n+  struct Impl;\n+  std::shared_ptr<Impl> impl_;\n+};\n+\n+// Concurrency wrappers for IO classes that check the correctness of\n+// concurrent calls to various methods.  It is not necessary to wrap all\n+// IO classes with these, only a few core classes that get used in tests.\n+\n+template <class Derived>\n+class ARROW_EXPORT InputStreamConcurrencyWrapper : public InputStream {\n+ public:\n+  // TODO Close, Abort?\n+  // XXX Peek() has a default implementation in InputStream\n \n Review comment:\n   Do you think there's any downside to making the inheritance virtual?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-16T14:30:53.231+0000",
                    "updated": "2019-09-16T14:30:53.231+0000",
                    "started": "2019-09-16T14:30:53.231+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "313017",
                    "issueId": "13154242"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13154242/worklog/313019",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5358: [EXP] ARROW-2490: [C++] Normalize input stream concurrency\nURL: https://github.com/apache/arrow/pull/5358#discussion_r324711696\n \n \n\n ##########\n File path: cpp/src/arrow/gpu/cuda_memory.h\n ##########\n @@ -151,25 +151,25 @@ class ARROW_EXPORT CudaIpcMemHandle {\n /// \\class CudaBufferReader\n /// \\brief File interface for zero-copy read from CUDA buffers\n ///\n-/// Note: Reads return pointers to device memory. This means you must be\n-/// careful using this interface with any Arrow code which may expect to be\n-/// able to do anything other than pointer arithmetic on the returned buffers\n+/// CAUTION: reading to a Buffer returns a Buffer pointing to device memory.\n+/// It will generally not be compatible with Arrow code expecting an usual\n \n Review comment:\n   That is idiomatic, but has the connotation of a specific CPU buffer (like there's some singleton to which you are returning a reference).\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-16T14:37:21.531+0000",
                    "updated": "2019-09-16T14:37:21.531+0000",
                    "started": "2019-09-16T14:37:21.530+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "313019",
                    "issueId": "13154242"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13154242/worklog/313020",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5358: [EXP] ARROW-2490: [C++] Normalize input stream concurrency\nURL: https://github.com/apache/arrow/pull/5358#discussion_r324712392\n \n \n\n ##########\n File path: cpp/src/arrow/gpu/cuda_memory.h\n ##########\n @@ -151,25 +151,25 @@ class ARROW_EXPORT CudaIpcMemHandle {\n /// \\class CudaBufferReader\n /// \\brief File interface for zero-copy read from CUDA buffers\n ///\n-/// Note: Reads return pointers to device memory. This means you must be\n-/// careful using this interface with any Arrow code which may expect to be\n-/// able to do anything other than pointer arithmetic on the returned buffers\n+/// CAUTION: reading to a Buffer returns a Buffer pointing to device memory.\n+/// It will generally not be compatible with Arrow code expecting an usual\n \n Review comment:\n   Ah, well, I'm not talking about a specific CPU buffer here.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-16T14:38:33.844+0000",
                    "updated": "2019-09-16T14:38:33.844+0000",
                    "started": "2019-09-16T14:38:33.843+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "313020",
                    "issueId": "13154242"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13154242/worklog/313038",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5358: [EXP] ARROW-2490: [C++] Normalize input stream concurrency\nURL: https://github.com/apache/arrow/pull/5358#discussion_r324725892\n \n \n\n ##########\n File path: cpp/src/arrow/io/concurrency.h\n ##########\n @@ -0,0 +1,186 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+\n+#include \"arrow/io/interfaces.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/util/checked_cast.h\"\n+#include \"arrow/util/macros.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+namespace io {\n+namespace internal {\n+\n+template <class LockType>\n+class SharedLockGuard {\n+ public:\n+  explicit SharedLockGuard(LockType* lock) : lock_(lock) { lock_->LockShared(); }\n+\n+  ~SharedLockGuard() { lock_->UnlockShared(); }\n+\n+ protected:\n+  LockType* lock_;\n+};\n+\n+template <class LockType>\n+class ExclusiveLockGuard {\n+ public:\n+  explicit ExclusiveLockGuard(LockType* lock) : lock_(lock) { lock_->LockExclusive(); }\n+\n+  ~ExclusiveLockGuard() { lock_->UnlockExclusive(); }\n+\n+ protected:\n+  LockType* lock_;\n+};\n+\n+// Debug concurrency checker that marks \"shared\" and \"exclusive\" code sections,\n+// aborting if the concurrency rules get violated.  Does nothing in release mode.\n+// Note that we intentionally use the same class declaration in debug and\n+// release builds in order to avoid runtime failures when e.g. loading a\n+// release-built DLL with a debug-built application, or the reverse.\n+\n+class ARROW_EXPORT SELockChecker {\n+ public:\n+  SELockChecker();\n+  void LockShared();\n+  void UnlockShared();\n+  void LockExclusive();\n+  void UnlockExclusive();\n+\n+  SharedLockGuard<SELockChecker> shared_guard() {\n+    return SharedLockGuard<SELockChecker>(this);\n+  }\n+\n+  ExclusiveLockGuard<SELockChecker> exclusive_guard() {\n+    return ExclusiveLockGuard<SELockChecker>(this);\n+  }\n+\n+ protected:\n+  struct Impl;\n+  std::shared_ptr<Impl> impl_;\n+};\n+\n+// Concurrency wrappers for IO classes that check the correctness of\n+// concurrent calls to various methods.  It is not necessary to wrap all\n+// IO classes with these, only a few core classes that get used in tests.\n+\n+template <class Derived>\n+class ARROW_EXPORT InputStreamConcurrencyWrapper : public InputStream {\n+ public:\n+  // TODO Close, Abort?\n+  // XXX Peek() has a default implementation in InputStream\n \n Review comment:\n   I don't think we'd see a performance dip but `virtual` bases have poorly understood semantic overhead which we'd be passing on to implementers and users of these interfaces. In particular a reference/pointer to a virtual base must be cast using `dynamic_cast`, so anyone who writes `checked_cast<const RandomAccessFile&>(file_interface_ref)` will get errors but only when building release.\r\n   \r\n   In short since this is a debug helper I'd say it's not worth introducing the complexity of a virtual base: just duplicate the implementations, they're not large.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-16T15:01:36.424+0000",
                    "updated": "2019-09-16T15:01:36.424+0000",
                    "started": "2019-09-16T15:01:36.423+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "313038",
                    "issueId": "13154242"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13154242/worklog/313041",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5358: [EXP] ARROW-2490: [C++] Normalize input stream concurrency\nURL: https://github.com/apache/arrow/pull/5358#discussion_r324729288\n \n \n\n ##########\n File path: cpp/src/arrow/io/concurrency.h\n ##########\n @@ -0,0 +1,186 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+\n+#include \"arrow/io/interfaces.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/util/checked_cast.h\"\n+#include \"arrow/util/macros.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+namespace io {\n+namespace internal {\n+\n+template <class LockType>\n+class SharedLockGuard {\n+ public:\n+  explicit SharedLockGuard(LockType* lock) : lock_(lock) { lock_->LockShared(); }\n+\n+  ~SharedLockGuard() { lock_->UnlockShared(); }\n+\n+ protected:\n+  LockType* lock_;\n+};\n+\n+template <class LockType>\n+class ExclusiveLockGuard {\n+ public:\n+  explicit ExclusiveLockGuard(LockType* lock) : lock_(lock) { lock_->LockExclusive(); }\n+\n+  ~ExclusiveLockGuard() { lock_->UnlockExclusive(); }\n+\n+ protected:\n+  LockType* lock_;\n+};\n+\n+// Debug concurrency checker that marks \"shared\" and \"exclusive\" code sections,\n+// aborting if the concurrency rules get violated.  Does nothing in release mode.\n+// Note that we intentionally use the same class declaration in debug and\n+// release builds in order to avoid runtime failures when e.g. loading a\n+// release-built DLL with a debug-built application, or the reverse.\n+\n+class ARROW_EXPORT SELockChecker {\n+ public:\n+  SELockChecker();\n+  void LockShared();\n+  void UnlockShared();\n+  void LockExclusive();\n+  void UnlockExclusive();\n+\n+  SharedLockGuard<SELockChecker> shared_guard() {\n+    return SharedLockGuard<SELockChecker>(this);\n+  }\n+\n+  ExclusiveLockGuard<SELockChecker> exclusive_guard() {\n+    return ExclusiveLockGuard<SELockChecker>(this);\n+  }\n+\n+ protected:\n+  struct Impl;\n+  std::shared_ptr<Impl> impl_;\n+};\n+\n+// Concurrency wrappers for IO classes that check the correctness of\n+// concurrent calls to various methods.  It is not necessary to wrap all\n+// IO classes with these, only a few core classes that get used in tests.\n+\n+template <class Derived>\n+class ARROW_EXPORT InputStreamConcurrencyWrapper : public InputStream {\n+ public:\n+  // TODO Close, Abort?\n+  // XXX Peek() has a default implementation in InputStream\n \n Review comment:\n   For reference, the only instance of public inheritance currently in our codebase is in parquet/types.cc (where it is a implementation detail internal to that translation unit).\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-16T15:07:48.139+0000",
                    "updated": "2019-09-16T15:07:48.139+0000",
                    "started": "2019-09-16T15:07:48.139+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "313041",
                    "issueId": "13154242"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13154242/worklog/313043",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5358: [EXP] ARROW-2490: [C++] Normalize input stream concurrency\nURL: https://github.com/apache/arrow/pull/5358#discussion_r324730599\n \n \n\n ##########\n File path: cpp/src/arrow/io/concurrency.h\n ##########\n @@ -0,0 +1,186 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+\n+#include \"arrow/io/interfaces.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/util/checked_cast.h\"\n+#include \"arrow/util/macros.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+namespace io {\n+namespace internal {\n+\n+template <class LockType>\n+class SharedLockGuard {\n+ public:\n+  explicit SharedLockGuard(LockType* lock) : lock_(lock) { lock_->LockShared(); }\n+\n+  ~SharedLockGuard() { lock_->UnlockShared(); }\n+\n+ protected:\n+  LockType* lock_;\n+};\n+\n+template <class LockType>\n+class ExclusiveLockGuard {\n+ public:\n+  explicit ExclusiveLockGuard(LockType* lock) : lock_(lock) { lock_->LockExclusive(); }\n+\n+  ~ExclusiveLockGuard() { lock_->UnlockExclusive(); }\n+\n+ protected:\n+  LockType* lock_;\n+};\n+\n+// Debug concurrency checker that marks \"shared\" and \"exclusive\" code sections,\n+// aborting if the concurrency rules get violated.  Does nothing in release mode.\n+// Note that we intentionally use the same class declaration in debug and\n+// release builds in order to avoid runtime failures when e.g. loading a\n+// release-built DLL with a debug-built application, or the reverse.\n+\n+class ARROW_EXPORT SELockChecker {\n+ public:\n+  SELockChecker();\n+  void LockShared();\n+  void UnlockShared();\n+  void LockExclusive();\n+  void UnlockExclusive();\n+\n+  SharedLockGuard<SELockChecker> shared_guard() {\n+    return SharedLockGuard<SELockChecker>(this);\n+  }\n+\n+  ExclusiveLockGuard<SELockChecker> exclusive_guard() {\n+    return ExclusiveLockGuard<SELockChecker>(this);\n+  }\n+\n+ protected:\n+  struct Impl;\n+  std::shared_ptr<Impl> impl_;\n+};\n+\n+// Concurrency wrappers for IO classes that check the correctness of\n+// concurrent calls to various methods.  It is not necessary to wrap all\n+// IO classes with these, only a few core classes that get used in tests.\n+\n+template <class Derived>\n+class ARROW_EXPORT InputStreamConcurrencyWrapper : public InputStream {\n+ public:\n+  // TODO Close, Abort?\n+  // XXX Peek() has a default implementation in InputStream\n \n Review comment:\n   You mean virtual inheritance? This is false, there's actually virtual inheritance in `io/interfaces.h`, e.g.\r\n   ```cpp\r\n   class ARROW_EXPORT InputStream : virtual public FileInterface, virtual public Readable {\r\n   // snip\r\n   ```\r\n   \r\n   But those two bases (`FileInterface`, `Readable`) are hardly ever used directly, contrary to `InputStream`.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-16T15:10:22.920+0000",
                    "updated": "2019-09-16T15:10:22.920+0000",
                    "started": "2019-09-16T15:10:22.919+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "313043",
                    "issueId": "13154242"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
            "id": "1",
            "description": "A problem which impairs or prevents the functions of the product.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
            "name": "Bug",
            "subtask": false,
            "avatarId": 21133
        },
        "timespent": 22800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@c2e0a7[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@cc894ab[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@93134a3[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@411494e2[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4a021236[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@5db4925e[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5da02167[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@38f60db5[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@623f3b3f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@1be07344[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4797d246[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@4f84e4a4[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 22800,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Sep 17 14:34:09 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-09-17T08:55:02.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2490/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2018-04-21T17:18:42.000+0000",
        "updated": "2019-09-17T14:34:09.000+0000",
        "timeoriginalestimate": null,
        "description": "Reading from the current file pointer is inherently thread-unsafe, since the file pointer may be updated by another thread (either before or during the operation). However, currently, we have:\r\n* {{ReadableFile::Read}} takes a lock\r\n* {{MemoryMappedFile::Read}} doesn't take a lock\r\n* {{BufferReader::Read}} doesn't take a lock\r\n\r\nWe could always take a lock in {{Read}}. But I don't think there's a pattern where it's useful to call {{Read}} from multiple threads at once (since you're not sure where the file pointer will be exactly when the read starts). So we could as well specify that {{Read}} isn't thread-safe and let people make sure they don't call it from multiple threads.\r\n",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "6h 20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 22800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] input stream locking inconsistent",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13154242/comment/16931205",
                    "id": "16931205",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 5358\n[https://github.com/apache/arrow/pull/5358]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2019-09-17T08:55:02.936+0000",
                    "updated": "2019-09-17T08:55:02.936+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13154242/comment/16931494",
                    "id": "16931494",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
                        "name": "bkietz",
                        "key": "bkietz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
                        },
                        "displayName": "Ben Kietzman",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "[~pitrou] should a similar concurrency checker be added to output streams?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
                        "name": "bkietz",
                        "key": "bkietz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
                        },
                        "displayName": "Ben Kietzman",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-09-17T14:05:53.021+0000",
                    "updated": "2019-09-17T14:05:53.021+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13154242/comment/16931523",
                    "id": "16931523",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "I'm not sure it's useful. There's no incentive to use output streams in parallel since writes are generally asynchronous.\r\n\r\nWe do have a {{WritableFile}} interface with a {{WriteAt}} method, but it's only used once in Plasma.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2019-09-17T14:34:09.167+0000",
                    "updated": "2019-09-17T14:34:09.167+0000"
                }
            ],
            "maxResults": 3,
            "total": 3,
            "startAt": 0
        },
        "customfield_12311820": "0|i3suvz:",
        "customfield_12314139": null
    }
}