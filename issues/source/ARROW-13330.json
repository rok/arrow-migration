{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13389481",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13389481",
    "key": "ARROW-13330",
    "fields": {
        "parent": {
            "id": "13286806",
            "key": "ARROW-7905",
            "self": "https://issues.apache.org/jira/rest/api/2/issue/13286806",
            "fields": {
                "summary": "[Go][Parquet] Port the C++ Parquet implementation to Go",
                "status": {
                    "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                    "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                    "name": "Resolved",
                    "id": "5",
                    "statusCategory": {
                        "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                        "id": 3,
                        "key": "done",
                        "colorName": "green",
                        "name": "Done"
                    }
                },
                "priority": {
                    "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
                    "name": "Minor",
                    "id": "4"
                },
                "issuetype": {
                    "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                    "id": "2",
                    "description": "A new feature of the product, which has yet to be developed.",
                    "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                    "name": "New Feature",
                    "subtask": false,
                    "avatarId": 21141
                }
            }
        },
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12350323",
                "id": "12350323",
                "description": "",
                "name": "6.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-10-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12619237",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12619237",
                "type": {
                    "id": "10020",
                    "name": "Cloners",
                    "inward": "is cloned by",
                    "outward": "is a clone of",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10020"
                },
                "outwardIssue": {
                    "id": "13379940",
                    "key": "ARROW-12851",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13379940",
                    "fields": {
                        "summary": "[Go][Parquet] Add Encoding Package Part 1",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
                            "id": "7",
                            "description": "The sub-task of the issue",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
                            "name": "Sub-task",
                            "subtask": true,
                            "avatarId": 21146
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=zeroshade",
            "name": "zeroshade",
            "key": "zeroshade",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=zeroshade&avatarId=31230",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=zeroshade&avatarId=31230",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=zeroshade&avatarId=31230",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=zeroshade&avatarId=31230"
            },
            "displayName": "Matthew Topol",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333772",
                "id": "12333772",
                "name": "Go"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12337837",
                "id": "12337837",
                "name": "Parquet"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=zeroshade",
            "name": "zeroshade",
            "key": "zeroshade",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=zeroshade&avatarId=31230",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=zeroshade&avatarId=31230",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=zeroshade&avatarId=31230",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=zeroshade&avatarId=31230"
            },
            "displayName": "Matthew Topol",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=zeroshade",
            "name": "zeroshade",
            "key": "zeroshade",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=zeroshade&avatarId=31230",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=zeroshade&avatarId=31230",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=zeroshade&avatarId=31230",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=zeroshade&avatarId=31230"
            },
            "displayName": "Matthew Topol",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 21000,
            "total": 21000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 21000,
            "total": 21000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-13330/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 35,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13389481/worklog/622264",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade opened a new pull request #10716:\nURL: https://github.com/apache/arrow/pull/10716\n\n\n   @emkornfield Thanks for merging the previous PR #10379 \r\n   \r\n   Here's the remaining files that we pulled out of that PR to shrink it down, including all the unit tests for the Encoding package.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-13T22:05:45.877+0000",
                    "updated": "2021-07-13T22:05:45.877+0000",
                    "started": "2021-07-13T22:05:45.876+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "622264",
                    "issueId": "13389481"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13389481/worklog/622265",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #10716:\nURL: https://github.com/apache/arrow/pull/10716#issuecomment-879433836\n\n\n   https://issues.apache.org/jira/browse/ARROW-13330\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-13T22:06:09.239+0000",
                    "updated": "2021-07-13T22:06:09.239+0000",
                    "started": "2021-07-13T22:06:09.238+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "622265",
                    "issueId": "13389481"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13389481/worklog/625633",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on pull request #10716:\nURL: https://github.com/apache/arrow/pull/10716#issuecomment-883459361\n\n\n   @emkornfield @sbinet  Bump for visibility to get reviews\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-20T14:54:48.557+0000",
                    "updated": "2021-07-20T14:54:48.557+0000",
                    "started": "2021-07-20T14:54:48.557+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "625633",
                    "issueId": "13389481"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13389481/worklog/625646",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #10716:\nURL: https://github.com/apache/arrow/pull/10716#issuecomment-883490956\n\n\n   Sorry busy week this week, will try to get to it EOW or sometime next week.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-20T15:35:40.847+0000",
                    "updated": "2021-07-20T15:35:40.847+0000",
                    "started": "2021-07-20T15:35:40.846+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "625646",
                    "issueId": "13389481"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13389481/worklog/630560",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on pull request #10716:\nURL: https://github.com/apache/arrow/pull/10716#issuecomment-888359609\n\n\n   @emkornfield bump\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-28T14:33:50.435+0000",
                    "updated": "2021-07-28T14:33:50.435+0000",
                    "started": "2021-07-28T14:33:50.434+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "630560",
                    "issueId": "13389481"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13389481/worklog/631723",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #10716:\nURL: https://github.com/apache/arrow/pull/10716#issuecomment-889976220\n\n\n   sorry I have had less time then I would have liked recently for Arrow reviews, will try to get to this soon.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-30T15:39:40.538+0000",
                    "updated": "2021-07-30T15:39:40.538+0000",
                    "started": "2021-07-30T15:39:40.538+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "631723",
                    "issueId": "13389481"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13389481/worklog/631726",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #10716:\nURL: https://github.com/apache/arrow/pull/10716#discussion_r680022978\n\n\n\n##########\nFile path: go/parquet/internal/encoding/encoding_benchmarks_test.go\n##########\n@@ -0,0 +1,461 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package encoding_test\n+\n+import (\n+\t\"fmt\"\n+\t\"math\"\n+\t\"testing\"\n+\n+\t\"github.com/apache/arrow/go/arrow\"\n+\t\"github.com/apache/arrow/go/arrow/array\"\n+\t\"github.com/apache/arrow/go/arrow/memory\"\n+\t\"github.com/apache/arrow/go/parquet\"\n+\t\"github.com/apache/arrow/go/parquet/internal/encoding\"\n+\t\"github.com/apache/arrow/go/parquet/internal/hashing\"\n+\t\"github.com/apache/arrow/go/parquet/internal/testutils\"\n+\t\"github.com/apache/arrow/go/parquet/schema\"\n+)\n+\n+const (\n+\tMINSIZE = 1024\n+\tMAXSIZE = 65536\n+)\n+\n+func BenchmarkPlainEncodingBoolean(b *testing.B) {\n+\tfor sz := MINSIZE; sz < MAXSIZE+1; sz *= 2 {\n\nReview comment:\n       there isn't a built in construct in GO benchmarks for adjusting batch size?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-30T15:40:30.293+0000",
                    "updated": "2021-07-30T15:40:30.293+0000",
                    "started": "2021-07-30T15:40:30.293+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "631726",
                    "issueId": "13389481"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13389481/worklog/631728",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #10716:\nURL: https://github.com/apache/arrow/pull/10716#discussion_r680026208\n\n\n\n##########\nFile path: go/parquet/internal/encoding/levels.go\n##########\n@@ -0,0 +1,284 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package encoding\n+\n+import (\n+\t\"bytes\"\n+\t\"encoding/binary\"\n+\t\"io\"\n+\t\"math/bits\"\n+\n+\t\"github.com/JohnCGriffin/overflow\"\n+\t\"github.com/apache/arrow/go/arrow/bitutil\"\n+\t\"github.com/apache/arrow/go/parquet\"\n+\tformat \"github.com/apache/arrow/go/parquet/internal/gen-go/parquet\"\n+\t\"github.com/apache/arrow/go/parquet/internal/utils\"\n+)\n+\n+// LevelEncoder is for handling the encoding of Definition and Repetition levels\n+// to parquet files.\n+type LevelEncoder struct {\n+\tbitWidth int\n+\trleLen   int\n+\tencoding format.Encoding\n+\trle      *utils.RleEncoder\n+\tbit      *utils.BitWriter\n+}\n+\n+// LevelEncodingMaxBufferSize estimates the max number of bytes needed to encode data with the\n+// specified encoding given the max level and number of buffered values provided.\n+func LevelEncodingMaxBufferSize(encoding parquet.Encoding, maxLvl int16, nbuffered int) int {\n+\tbitWidth := bits.Len64(uint64(maxLvl))\n+\tnbytes := 0\n+\tswitch encoding {\n+\tcase parquet.Encodings.RLE:\n+\t\tnbytes = utils.MaxBufferSize(bitWidth, nbuffered) + utils.MinBufferSize(bitWidth)\n+\tcase parquet.Encodings.BitPacked:\n+\t\tnbytes = int(bitutil.BytesForBits(int64(nbuffered * bitWidth)))\n+\tdefault:\n+\t\tpanic(\"parquet: unknown encoding type for levels\")\n+\t}\n+\treturn nbytes\n+}\n+\n+// Reset resets the encoder allowing it to be reused and updating the maxlevel to the new\n+// specified value.\n+func (l *LevelEncoder) Reset(maxLvl int16) {\n+\tl.bitWidth = bits.Len64(uint64(maxLvl))\n+\tswitch l.encoding {\n+\tcase format.Encoding_RLE:\n+\t\tl.rle.Clear()\n+\t\tl.rle.BitWidth = l.bitWidth\n+\tcase format.Encoding_BIT_PACKED:\n+\t\tl.bit.Clear()\n+\tdefault:\n+\t\tpanic(\"parquet: unknown encoding type\")\n+\t}\n+}\n+\n+// Init is called to set up the desired encoding type, max level and underlying writer for a\n+// level encoder to control where the resulting encoded buffer will end up.\n+func (l *LevelEncoder) Init(encoding parquet.Encoding, maxLvl int16, w io.WriterAt) {\n+\tl.bitWidth = bits.Len64(uint64(maxLvl))\n+\tl.encoding = format.Encoding(encoding)\n+\tswitch l.encoding {\n+\tcase format.Encoding_RLE:\n+\t\tl.rle = utils.NewRleEncoder(w, l.bitWidth)\n+\tcase format.Encoding_BIT_PACKED:\n+\t\tl.bit = utils.NewBitWriter(w)\n+\tdefault:\n+\t\tpanic(\"parquet: unknown encoding type for levels\")\n+\t}\n+}\n+\n+// EncodeNoFlush encodes the provided levels in the encoder, but doesn't flush\n+// the buffer and return it yet, appending these encoded values. Returns the number\n\nReview comment:\n       does it ever return less than the values provided in lvls?  If so please document it (if not maybe still note that this is simply for the API consumer's convenience?)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-30T15:45:07.122+0000",
                    "updated": "2021-07-30T15:45:07.122+0000",
                    "started": "2021-07-30T15:45:07.122+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "631728",
                    "issueId": "13389481"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13389481/worklog/631729",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #10716:\nURL: https://github.com/apache/arrow/pull/10716#discussion_r680027195\n\n\n\n##########\nFile path: go/parquet/internal/encoding/levels.go\n##########\n@@ -0,0 +1,284 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package encoding\n+\n+import (\n+\t\"bytes\"\n+\t\"encoding/binary\"\n+\t\"io\"\n+\t\"math/bits\"\n+\n+\t\"github.com/JohnCGriffin/overflow\"\n+\t\"github.com/apache/arrow/go/arrow/bitutil\"\n+\t\"github.com/apache/arrow/go/parquet\"\n+\tformat \"github.com/apache/arrow/go/parquet/internal/gen-go/parquet\"\n+\t\"github.com/apache/arrow/go/parquet/internal/utils\"\n+)\n+\n+// LevelEncoder is for handling the encoding of Definition and Repetition levels\n+// to parquet files.\n+type LevelEncoder struct {\n+\tbitWidth int\n+\trleLen   int\n+\tencoding format.Encoding\n+\trle      *utils.RleEncoder\n+\tbit      *utils.BitWriter\n+}\n+\n+// LevelEncodingMaxBufferSize estimates the max number of bytes needed to encode data with the\n+// specified encoding given the max level and number of buffered values provided.\n+func LevelEncodingMaxBufferSize(encoding parquet.Encoding, maxLvl int16, nbuffered int) int {\n+\tbitWidth := bits.Len64(uint64(maxLvl))\n+\tnbytes := 0\n+\tswitch encoding {\n+\tcase parquet.Encodings.RLE:\n+\t\tnbytes = utils.MaxBufferSize(bitWidth, nbuffered) + utils.MinBufferSize(bitWidth)\n+\tcase parquet.Encodings.BitPacked:\n+\t\tnbytes = int(bitutil.BytesForBits(int64(nbuffered * bitWidth)))\n+\tdefault:\n+\t\tpanic(\"parquet: unknown encoding type for levels\")\n+\t}\n+\treturn nbytes\n+}\n+\n+// Reset resets the encoder allowing it to be reused and updating the maxlevel to the new\n+// specified value.\n+func (l *LevelEncoder) Reset(maxLvl int16) {\n+\tl.bitWidth = bits.Len64(uint64(maxLvl))\n+\tswitch l.encoding {\n+\tcase format.Encoding_RLE:\n+\t\tl.rle.Clear()\n+\t\tl.rle.BitWidth = l.bitWidth\n+\tcase format.Encoding_BIT_PACKED:\n+\t\tl.bit.Clear()\n+\tdefault:\n+\t\tpanic(\"parquet: unknown encoding type\")\n+\t}\n+}\n+\n+// Init is called to set up the desired encoding type, max level and underlying writer for a\n+// level encoder to control where the resulting encoded buffer will end up.\n+func (l *LevelEncoder) Init(encoding parquet.Encoding, maxLvl int16, w io.WriterAt) {\n+\tl.bitWidth = bits.Len64(uint64(maxLvl))\n+\tl.encoding = format.Encoding(encoding)\n+\tswitch l.encoding {\n+\tcase format.Encoding_RLE:\n+\t\tl.rle = utils.NewRleEncoder(w, l.bitWidth)\n+\tcase format.Encoding_BIT_PACKED:\n+\t\tl.bit = utils.NewBitWriter(w)\n+\tdefault:\n+\t\tpanic(\"parquet: unknown encoding type for levels\")\n+\t}\n+}\n+\n+// EncodeNoFlush encodes the provided levels in the encoder, but doesn't flush\n+// the buffer and return it yet, appending these encoded values. Returns the number\n+// of values encoded.\n+func (l *LevelEncoder) EncodeNoFlush(lvls []int16) int {\n+\tnencoded := 0\n+\tif l.rle == nil && l.bit == nil {\n+\t\tpanic(\"parquet: level encoders are not initialized\")\n+\t}\n+\n+\tswitch l.encoding {\n+\tcase format.Encoding_RLE:\n+\t\tfor _, level := range lvls {\n+\t\t\tif !l.rle.Put(uint64(level)) {\n+\t\t\t\tbreak\n+\t\t\t}\n+\t\t\tnencoded++\n+\t\t}\n+\tdefault:\n+\t\tfor _, level := range lvls {\n+\t\t\tif l.bit.WriteValue(uint64(level), uint(l.bitWidth)) != nil {\n+\t\t\t\tbreak\n+\t\t\t}\n+\t\t\tnencoded++\n+\t\t}\n+\t}\n+\treturn nencoded\n+}\n+\n+// Flush flushes out any encoded data to the underlying writer.\n+func (l *LevelEncoder) Flush() {\n+\tif l.rle == nil && l.bit == nil {\n+\t\tpanic(\"parquet: level encoders are not initialized\")\n+\t}\n+\n+\tswitch l.encoding {\n+\tcase format.Encoding_RLE:\n+\t\tl.rleLen = l.rle.Flush()\n+\tdefault:\n+\t\tl.bit.Flush(false)\n+\t}\n+}\n+\n+// Encode encodes the slice of definition or repetition levels based on\n+// the currently configured encoding type and returns the number of\n+// values that were encoded.\n+func (l *LevelEncoder) Encode(lvls []int16) int {\n+\tnencoded := 0\n+\tif l.rle == nil && l.bit == nil {\n+\t\tpanic(\"parquet: level encoders are not initialized\")\n+\t}\n+\n+\tswitch l.encoding {\n+\tcase format.Encoding_RLE:\n+\t\tfor _, level := range lvls {\n+\t\t\tif !l.rle.Put(uint64(level)) {\n+\t\t\t\tbreak\n+\t\t\t}\n+\t\t\tnencoded++\n+\t\t}\n+\t\tl.rleLen = l.rle.Flush()\n+\tdefault:\n+\t\tfor _, level := range lvls {\n+\t\t\tif l.bit.WriteValue(uint64(level), uint(l.bitWidth)) != nil {\n+\t\t\t\tbreak\n+\t\t\t}\n+\t\t\tnencoded++\n+\t\t}\n+\t\tl.bit.Flush(false)\n+\t}\n+\treturn nencoded\n+}\n+\n+// Len returns the number of bytes that were written as Run Length encoded\n+// levels, this is only valid for run length encoding and will panic if using\n+// deprecated bit packed encoding.\n+func (l *LevelEncoder) Len() int {\n+\tif l.encoding != format.Encoding_RLE {\n+\t\tpanic(\"parquet: level encoder, only implemented for RLE\")\n+\t}\n+\treturn l.rleLen\n+}\n+\n+// LevelDecoder handles the decoding of repetition and definition levels from a\n+// parquet file supporting bit packed and run length encoded values.\n+type LevelDecoder struct {\n+\tbitWidth  int\n+\tremaining int\n+\tmaxLvl    int16\n+\tencoding  format.Encoding\n+\trle       *utils.RleDecoder\n\nReview comment:\n       maybe comment that exactly one of rle and bit is expected to be set?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-30T15:46:42.743+0000",
                    "updated": "2021-07-30T15:46:42.743+0000",
                    "started": "2021-07-30T15:46:42.742+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "631729",
                    "issueId": "13389481"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13389481/worklog/631730",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #10716:\nURL: https://github.com/apache/arrow/pull/10716#discussion_r680027388\n\n\n\n##########\nFile path: go/parquet/internal/encoding/levels.go\n##########\n@@ -0,0 +1,284 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package encoding\n+\n+import (\n+\t\"bytes\"\n+\t\"encoding/binary\"\n+\t\"io\"\n+\t\"math/bits\"\n+\n+\t\"github.com/JohnCGriffin/overflow\"\n+\t\"github.com/apache/arrow/go/arrow/bitutil\"\n+\t\"github.com/apache/arrow/go/parquet\"\n+\tformat \"github.com/apache/arrow/go/parquet/internal/gen-go/parquet\"\n+\t\"github.com/apache/arrow/go/parquet/internal/utils\"\n+)\n+\n+// LevelEncoder is for handling the encoding of Definition and Repetition levels\n+// to parquet files.\n+type LevelEncoder struct {\n+\tbitWidth int\n+\trleLen   int\n+\tencoding format.Encoding\n+\trle      *utils.RleEncoder\n+\tbit      *utils.BitWriter\n+}\n+\n+// LevelEncodingMaxBufferSize estimates the max number of bytes needed to encode data with the\n+// specified encoding given the max level and number of buffered values provided.\n+func LevelEncodingMaxBufferSize(encoding parquet.Encoding, maxLvl int16, nbuffered int) int {\n+\tbitWidth := bits.Len64(uint64(maxLvl))\n+\tnbytes := 0\n+\tswitch encoding {\n+\tcase parquet.Encodings.RLE:\n+\t\tnbytes = utils.MaxBufferSize(bitWidth, nbuffered) + utils.MinBufferSize(bitWidth)\n+\tcase parquet.Encodings.BitPacked:\n+\t\tnbytes = int(bitutil.BytesForBits(int64(nbuffered * bitWidth)))\n+\tdefault:\n+\t\tpanic(\"parquet: unknown encoding type for levels\")\n+\t}\n+\treturn nbytes\n+}\n+\n+// Reset resets the encoder allowing it to be reused and updating the maxlevel to the new\n+// specified value.\n+func (l *LevelEncoder) Reset(maxLvl int16) {\n+\tl.bitWidth = bits.Len64(uint64(maxLvl))\n+\tswitch l.encoding {\n+\tcase format.Encoding_RLE:\n+\t\tl.rle.Clear()\n+\t\tl.rle.BitWidth = l.bitWidth\n+\tcase format.Encoding_BIT_PACKED:\n+\t\tl.bit.Clear()\n+\tdefault:\n+\t\tpanic(\"parquet: unknown encoding type\")\n+\t}\n+}\n+\n+// Init is called to set up the desired encoding type, max level and underlying writer for a\n+// level encoder to control where the resulting encoded buffer will end up.\n+func (l *LevelEncoder) Init(encoding parquet.Encoding, maxLvl int16, w io.WriterAt) {\n+\tl.bitWidth = bits.Len64(uint64(maxLvl))\n+\tl.encoding = format.Encoding(encoding)\n+\tswitch l.encoding {\n+\tcase format.Encoding_RLE:\n+\t\tl.rle = utils.NewRleEncoder(w, l.bitWidth)\n+\tcase format.Encoding_BIT_PACKED:\n+\t\tl.bit = utils.NewBitWriter(w)\n+\tdefault:\n+\t\tpanic(\"parquet: unknown encoding type for levels\")\n+\t}\n+}\n+\n+// EncodeNoFlush encodes the provided levels in the encoder, but doesn't flush\n+// the buffer and return it yet, appending these encoded values. Returns the number\n+// of values encoded.\n+func (l *LevelEncoder) EncodeNoFlush(lvls []int16) int {\n+\tnencoded := 0\n+\tif l.rle == nil && l.bit == nil {\n+\t\tpanic(\"parquet: level encoders are not initialized\")\n+\t}\n+\n+\tswitch l.encoding {\n+\tcase format.Encoding_RLE:\n+\t\tfor _, level := range lvls {\n+\t\t\tif !l.rle.Put(uint64(level)) {\n+\t\t\t\tbreak\n+\t\t\t}\n+\t\t\tnencoded++\n+\t\t}\n+\tdefault:\n+\t\tfor _, level := range lvls {\n+\t\t\tif l.bit.WriteValue(uint64(level), uint(l.bitWidth)) != nil {\n+\t\t\t\tbreak\n+\t\t\t}\n+\t\t\tnencoded++\n+\t\t}\n+\t}\n+\treturn nencoded\n+}\n+\n+// Flush flushes out any encoded data to the underlying writer.\n+func (l *LevelEncoder) Flush() {\n+\tif l.rle == nil && l.bit == nil {\n+\t\tpanic(\"parquet: level encoders are not initialized\")\n+\t}\n+\n+\tswitch l.encoding {\n+\tcase format.Encoding_RLE:\n+\t\tl.rleLen = l.rle.Flush()\n+\tdefault:\n+\t\tl.bit.Flush(false)\n+\t}\n+}\n+\n+// Encode encodes the slice of definition or repetition levels based on\n+// the currently configured encoding type and returns the number of\n+// values that were encoded.\n+func (l *LevelEncoder) Encode(lvls []int16) int {\n+\tnencoded := 0\n+\tif l.rle == nil && l.bit == nil {\n+\t\tpanic(\"parquet: level encoders are not initialized\")\n+\t}\n+\n+\tswitch l.encoding {\n+\tcase format.Encoding_RLE:\n+\t\tfor _, level := range lvls {\n+\t\t\tif !l.rle.Put(uint64(level)) {\n+\t\t\t\tbreak\n+\t\t\t}\n+\t\t\tnencoded++\n+\t\t}\n+\t\tl.rleLen = l.rle.Flush()\n+\tdefault:\n+\t\tfor _, level := range lvls {\n+\t\t\tif l.bit.WriteValue(uint64(level), uint(l.bitWidth)) != nil {\n+\t\t\t\tbreak\n+\t\t\t}\n+\t\t\tnencoded++\n+\t\t}\n+\t\tl.bit.Flush(false)\n+\t}\n+\treturn nencoded\n+}\n+\n+// Len returns the number of bytes that were written as Run Length encoded\n+// levels, this is only valid for run length encoding and will panic if using\n+// deprecated bit packed encoding.\n+func (l *LevelEncoder) Len() int {\n+\tif l.encoding != format.Encoding_RLE {\n+\t\tpanic(\"parquet: level encoder, only implemented for RLE\")\n+\t}\n+\treturn l.rleLen\n+}\n+\n+// LevelDecoder handles the decoding of repetition and definition levels from a\n+// parquet file supporting bit packed and run length encoded values.\n+type LevelDecoder struct {\n+\tbitWidth  int\n+\tremaining int\n\nReview comment:\n       a comment on what remaining is might be useful.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-30T15:46:56.065+0000",
                    "updated": "2021-07-30T15:46:56.065+0000",
                    "started": "2021-07-30T15:46:56.065+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "631730",
                    "issueId": "13389481"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13389481/worklog/631734",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on a change in pull request #10716:\nURL: https://github.com/apache/arrow/pull/10716#discussion_r680028297\n\n\n\n##########\nFile path: go/parquet/internal/encoding/encoding_benchmarks_test.go\n##########\n@@ -0,0 +1,461 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package encoding_test\n+\n+import (\n+\t\"fmt\"\n+\t\"math\"\n+\t\"testing\"\n+\n+\t\"github.com/apache/arrow/go/arrow\"\n+\t\"github.com/apache/arrow/go/arrow/array\"\n+\t\"github.com/apache/arrow/go/arrow/memory\"\n+\t\"github.com/apache/arrow/go/parquet\"\n+\t\"github.com/apache/arrow/go/parquet/internal/encoding\"\n+\t\"github.com/apache/arrow/go/parquet/internal/hashing\"\n+\t\"github.com/apache/arrow/go/parquet/internal/testutils\"\n+\t\"github.com/apache/arrow/go/parquet/schema\"\n+)\n+\n+const (\n+\tMINSIZE = 1024\n+\tMAXSIZE = 65536\n+)\n+\n+func BenchmarkPlainEncodingBoolean(b *testing.B) {\n+\tfor sz := MINSIZE; sz < MAXSIZE+1; sz *= 2 {\n\nReview comment:\n       nope. `b.N` is the number of iterations to run under the benchmarking timer, so by doing this little loop it creates a separate benchmark for each of the batch sizes\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-30T15:48:18.341+0000",
                    "updated": "2021-07-30T15:48:18.341+0000",
                    "started": "2021-07-30T15:48:18.341+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "631734",
                    "issueId": "13389481"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13389481/worklog/631735",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #10716:\nURL: https://github.com/apache/arrow/pull/10716#discussion_r680028272\n\n\n\n##########\nFile path: go/parquet/internal/encoding/levels.go\n##########\n@@ -0,0 +1,284 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package encoding\n+\n+import (\n+\t\"bytes\"\n+\t\"encoding/binary\"\n+\t\"io\"\n+\t\"math/bits\"\n+\n+\t\"github.com/JohnCGriffin/overflow\"\n+\t\"github.com/apache/arrow/go/arrow/bitutil\"\n+\t\"github.com/apache/arrow/go/parquet\"\n+\tformat \"github.com/apache/arrow/go/parquet/internal/gen-go/parquet\"\n+\t\"github.com/apache/arrow/go/parquet/internal/utils\"\n+)\n+\n+// LevelEncoder is for handling the encoding of Definition and Repetition levels\n+// to parquet files.\n+type LevelEncoder struct {\n+\tbitWidth int\n+\trleLen   int\n+\tencoding format.Encoding\n+\trle      *utils.RleEncoder\n+\tbit      *utils.BitWriter\n+}\n+\n+// LevelEncodingMaxBufferSize estimates the max number of bytes needed to encode data with the\n+// specified encoding given the max level and number of buffered values provided.\n+func LevelEncodingMaxBufferSize(encoding parquet.Encoding, maxLvl int16, nbuffered int) int {\n+\tbitWidth := bits.Len64(uint64(maxLvl))\n+\tnbytes := 0\n+\tswitch encoding {\n+\tcase parquet.Encodings.RLE:\n+\t\tnbytes = utils.MaxBufferSize(bitWidth, nbuffered) + utils.MinBufferSize(bitWidth)\n+\tcase parquet.Encodings.BitPacked:\n+\t\tnbytes = int(bitutil.BytesForBits(int64(nbuffered * bitWidth)))\n+\tdefault:\n+\t\tpanic(\"parquet: unknown encoding type for levels\")\n+\t}\n+\treturn nbytes\n+}\n+\n+// Reset resets the encoder allowing it to be reused and updating the maxlevel to the new\n+// specified value.\n+func (l *LevelEncoder) Reset(maxLvl int16) {\n+\tl.bitWidth = bits.Len64(uint64(maxLvl))\n+\tswitch l.encoding {\n+\tcase format.Encoding_RLE:\n+\t\tl.rle.Clear()\n+\t\tl.rle.BitWidth = l.bitWidth\n+\tcase format.Encoding_BIT_PACKED:\n+\t\tl.bit.Clear()\n+\tdefault:\n+\t\tpanic(\"parquet: unknown encoding type\")\n+\t}\n+}\n+\n+// Init is called to set up the desired encoding type, max level and underlying writer for a\n+// level encoder to control where the resulting encoded buffer will end up.\n+func (l *LevelEncoder) Init(encoding parquet.Encoding, maxLvl int16, w io.WriterAt) {\n+\tl.bitWidth = bits.Len64(uint64(maxLvl))\n+\tl.encoding = format.Encoding(encoding)\n+\tswitch l.encoding {\n+\tcase format.Encoding_RLE:\n+\t\tl.rle = utils.NewRleEncoder(w, l.bitWidth)\n+\tcase format.Encoding_BIT_PACKED:\n+\t\tl.bit = utils.NewBitWriter(w)\n+\tdefault:\n+\t\tpanic(\"parquet: unknown encoding type for levels\")\n+\t}\n+}\n+\n+// EncodeNoFlush encodes the provided levels in the encoder, but doesn't flush\n+// the buffer and return it yet, appending these encoded values. Returns the number\n+// of values encoded.\n+func (l *LevelEncoder) EncodeNoFlush(lvls []int16) int {\n+\tnencoded := 0\n+\tif l.rle == nil && l.bit == nil {\n+\t\tpanic(\"parquet: level encoders are not initialized\")\n+\t}\n+\n+\tswitch l.encoding {\n+\tcase format.Encoding_RLE:\n+\t\tfor _, level := range lvls {\n+\t\t\tif !l.rle.Put(uint64(level)) {\n+\t\t\t\tbreak\n+\t\t\t}\n+\t\t\tnencoded++\n+\t\t}\n+\tdefault:\n+\t\tfor _, level := range lvls {\n+\t\t\tif l.bit.WriteValue(uint64(level), uint(l.bitWidth)) != nil {\n+\t\t\t\tbreak\n+\t\t\t}\n+\t\t\tnencoded++\n+\t\t}\n+\t}\n+\treturn nencoded\n+}\n+\n+// Flush flushes out any encoded data to the underlying writer.\n+func (l *LevelEncoder) Flush() {\n+\tif l.rle == nil && l.bit == nil {\n+\t\tpanic(\"parquet: level encoders are not initialized\")\n+\t}\n+\n+\tswitch l.encoding {\n+\tcase format.Encoding_RLE:\n+\t\tl.rleLen = l.rle.Flush()\n+\tdefault:\n+\t\tl.bit.Flush(false)\n+\t}\n+}\n+\n+// Encode encodes the slice of definition or repetition levels based on\n+// the currently configured encoding type and returns the number of\n+// values that were encoded.\n+func (l *LevelEncoder) Encode(lvls []int16) int {\n+\tnencoded := 0\n+\tif l.rle == nil && l.bit == nil {\n+\t\tpanic(\"parquet: level encoders are not initialized\")\n+\t}\n+\n+\tswitch l.encoding {\n+\tcase format.Encoding_RLE:\n+\t\tfor _, level := range lvls {\n+\t\t\tif !l.rle.Put(uint64(level)) {\n+\t\t\t\tbreak\n+\t\t\t}\n+\t\t\tnencoded++\n+\t\t}\n+\t\tl.rleLen = l.rle.Flush()\n+\tdefault:\n+\t\tfor _, level := range lvls {\n+\t\t\tif l.bit.WriteValue(uint64(level), uint(l.bitWidth)) != nil {\n+\t\t\t\tbreak\n+\t\t\t}\n+\t\t\tnencoded++\n+\t\t}\n+\t\tl.bit.Flush(false)\n+\t}\n+\treturn nencoded\n+}\n+\n+// Len returns the number of bytes that were written as Run Length encoded\n+// levels, this is only valid for run length encoding and will panic if using\n+// deprecated bit packed encoding.\n+func (l *LevelEncoder) Len() int {\n+\tif l.encoding != format.Encoding_RLE {\n+\t\tpanic(\"parquet: level encoder, only implemented for RLE\")\n+\t}\n+\treturn l.rleLen\n+}\n+\n+// LevelDecoder handles the decoding of repetition and definition levels from a\n+// parquet file supporting bit packed and run length encoded values.\n+type LevelDecoder struct {\n+\tbitWidth  int\n+\tremaining int\n+\tmaxLvl    int16\n+\tencoding  format.Encoding\n+\trle       *utils.RleDecoder\n+\tbit       *utils.BitReader\n+}\n+\n+// SetData sets in the data to be decoded by subsequent calls by specifying the encoding type\n+// the maximum level (which is what determines the bit width), the number of values expected\n+// and the raw bytes to decode. Returns the number of bytes expected to be decoded.\n+func (l *LevelDecoder) SetData(encoding parquet.Encoding, maxLvl int16, nbuffered int, data []byte) int {\n+\tl.maxLvl = maxLvl\n+\tl.encoding = format.Encoding(encoding)\n+\tl.remaining = nbuffered\n+\tl.bitWidth = bits.Len64(uint64(maxLvl))\n+\n+\tswitch encoding {\n+\tcase parquet.Encodings.RLE:\n+\t\tif len(data) < 4 {\n+\t\t\tpanic(\"parquet: received invalid levels (corrupt data page?)\")\n\nReview comment:\n       i forget where we landed on this in past reviews, but unless we are checking at a higher level, I think a malformed parquet file could hit this spot (i.e. it might be better return an error).  I think the same potentially applies to the panics below in this method.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-30T15:48:21.569+0000",
                    "updated": "2021-07-30T15:48:21.569+0000",
                    "started": "2021-07-30T15:48:21.569+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "631735",
                    "issueId": "13389481"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13389481/worklog/631738",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on a change in pull request #10716:\nURL: https://github.com/apache/arrow/pull/10716#discussion_r680029295\n\n\n\n##########\nFile path: go/parquet/internal/encoding/levels.go\n##########\n@@ -0,0 +1,284 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package encoding\n+\n+import (\n+\t\"bytes\"\n+\t\"encoding/binary\"\n+\t\"io\"\n+\t\"math/bits\"\n+\n+\t\"github.com/JohnCGriffin/overflow\"\n+\t\"github.com/apache/arrow/go/arrow/bitutil\"\n+\t\"github.com/apache/arrow/go/parquet\"\n+\tformat \"github.com/apache/arrow/go/parquet/internal/gen-go/parquet\"\n+\t\"github.com/apache/arrow/go/parquet/internal/utils\"\n+)\n+\n+// LevelEncoder is for handling the encoding of Definition and Repetition levels\n+// to parquet files.\n+type LevelEncoder struct {\n+\tbitWidth int\n+\trleLen   int\n+\tencoding format.Encoding\n+\trle      *utils.RleEncoder\n+\tbit      *utils.BitWriter\n+}\n+\n+// LevelEncodingMaxBufferSize estimates the max number of bytes needed to encode data with the\n+// specified encoding given the max level and number of buffered values provided.\n+func LevelEncodingMaxBufferSize(encoding parquet.Encoding, maxLvl int16, nbuffered int) int {\n+\tbitWidth := bits.Len64(uint64(maxLvl))\n+\tnbytes := 0\n+\tswitch encoding {\n+\tcase parquet.Encodings.RLE:\n+\t\tnbytes = utils.MaxBufferSize(bitWidth, nbuffered) + utils.MinBufferSize(bitWidth)\n+\tcase parquet.Encodings.BitPacked:\n+\t\tnbytes = int(bitutil.BytesForBits(int64(nbuffered * bitWidth)))\n+\tdefault:\n+\t\tpanic(\"parquet: unknown encoding type for levels\")\n+\t}\n+\treturn nbytes\n+}\n+\n+// Reset resets the encoder allowing it to be reused and updating the maxlevel to the new\n+// specified value.\n+func (l *LevelEncoder) Reset(maxLvl int16) {\n+\tl.bitWidth = bits.Len64(uint64(maxLvl))\n+\tswitch l.encoding {\n+\tcase format.Encoding_RLE:\n+\t\tl.rle.Clear()\n+\t\tl.rle.BitWidth = l.bitWidth\n+\tcase format.Encoding_BIT_PACKED:\n+\t\tl.bit.Clear()\n+\tdefault:\n+\t\tpanic(\"parquet: unknown encoding type\")\n+\t}\n+}\n+\n+// Init is called to set up the desired encoding type, max level and underlying writer for a\n+// level encoder to control where the resulting encoded buffer will end up.\n+func (l *LevelEncoder) Init(encoding parquet.Encoding, maxLvl int16, w io.WriterAt) {\n+\tl.bitWidth = bits.Len64(uint64(maxLvl))\n+\tl.encoding = format.Encoding(encoding)\n+\tswitch l.encoding {\n+\tcase format.Encoding_RLE:\n+\t\tl.rle = utils.NewRleEncoder(w, l.bitWidth)\n+\tcase format.Encoding_BIT_PACKED:\n+\t\tl.bit = utils.NewBitWriter(w)\n+\tdefault:\n+\t\tpanic(\"parquet: unknown encoding type for levels\")\n+\t}\n+}\n+\n+// EncodeNoFlush encodes the provided levels in the encoder, but doesn't flush\n+// the buffer and return it yet, appending these encoded values. Returns the number\n\nReview comment:\n       it *should* always return `len(lvls)`, if it returns less that means it encountered an error/issue while encoding. I'll add that to the comment.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-30T15:49:45.478+0000",
                    "updated": "2021-07-30T15:49:45.478+0000",
                    "started": "2021-07-30T15:49:45.478+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "631738",
                    "issueId": "13389481"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13389481/worklog/631747",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #10716:\nURL: https://github.com/apache/arrow/pull/10716#discussion_r680034150\n\n\n\n##########\nFile path: go/parquet/internal/encoding/levels.go\n##########\n@@ -0,0 +1,284 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package encoding\n+\n+import (\n+\t\"bytes\"\n+\t\"encoding/binary\"\n+\t\"io\"\n+\t\"math/bits\"\n+\n+\t\"github.com/JohnCGriffin/overflow\"\n+\t\"github.com/apache/arrow/go/arrow/bitutil\"\n+\t\"github.com/apache/arrow/go/parquet\"\n+\tformat \"github.com/apache/arrow/go/parquet/internal/gen-go/parquet\"\n+\t\"github.com/apache/arrow/go/parquet/internal/utils\"\n+)\n+\n+// LevelEncoder is for handling the encoding of Definition and Repetition levels\n+// to parquet files.\n+type LevelEncoder struct {\n+\tbitWidth int\n+\trleLen   int\n+\tencoding format.Encoding\n+\trle      *utils.RleEncoder\n+\tbit      *utils.BitWriter\n+}\n+\n+// LevelEncodingMaxBufferSize estimates the max number of bytes needed to encode data with the\n+// specified encoding given the max level and number of buffered values provided.\n+func LevelEncodingMaxBufferSize(encoding parquet.Encoding, maxLvl int16, nbuffered int) int {\n+\tbitWidth := bits.Len64(uint64(maxLvl))\n+\tnbytes := 0\n+\tswitch encoding {\n+\tcase parquet.Encodings.RLE:\n+\t\tnbytes = utils.MaxBufferSize(bitWidth, nbuffered) + utils.MinBufferSize(bitWidth)\n+\tcase parquet.Encodings.BitPacked:\n+\t\tnbytes = int(bitutil.BytesForBits(int64(nbuffered * bitWidth)))\n+\tdefault:\n+\t\tpanic(\"parquet: unknown encoding type for levels\")\n+\t}\n+\treturn nbytes\n+}\n+\n+// Reset resets the encoder allowing it to be reused and updating the maxlevel to the new\n+// specified value.\n+func (l *LevelEncoder) Reset(maxLvl int16) {\n+\tl.bitWidth = bits.Len64(uint64(maxLvl))\n+\tswitch l.encoding {\n+\tcase format.Encoding_RLE:\n+\t\tl.rle.Clear()\n+\t\tl.rle.BitWidth = l.bitWidth\n+\tcase format.Encoding_BIT_PACKED:\n+\t\tl.bit.Clear()\n+\tdefault:\n+\t\tpanic(\"parquet: unknown encoding type\")\n+\t}\n+}\n+\n+// Init is called to set up the desired encoding type, max level and underlying writer for a\n+// level encoder to control where the resulting encoded buffer will end up.\n+func (l *LevelEncoder) Init(encoding parquet.Encoding, maxLvl int16, w io.WriterAt) {\n+\tl.bitWidth = bits.Len64(uint64(maxLvl))\n+\tl.encoding = format.Encoding(encoding)\n+\tswitch l.encoding {\n+\tcase format.Encoding_RLE:\n+\t\tl.rle = utils.NewRleEncoder(w, l.bitWidth)\n+\tcase format.Encoding_BIT_PACKED:\n+\t\tl.bit = utils.NewBitWriter(w)\n+\tdefault:\n+\t\tpanic(\"parquet: unknown encoding type for levels\")\n+\t}\n+}\n+\n+// EncodeNoFlush encodes the provided levels in the encoder, but doesn't flush\n+// the buffer and return it yet, appending these encoded values. Returns the number\n\nReview comment:\n       so it is up to users to check that?  should it propogate an error instead?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-30T15:57:05.583+0000",
                    "updated": "2021-07-30T15:57:05.583+0000",
                    "started": "2021-07-30T15:57:05.583+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "631747",
                    "issueId": "13389481"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13389481/worklog/631749",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on a change in pull request #10716:\nURL: https://github.com/apache/arrow/pull/10716#discussion_r680037198\n\n\n\n##########\nFile path: go/parquet/internal/encoding/levels.go\n##########\n@@ -0,0 +1,284 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package encoding\n+\n+import (\n+\t\"bytes\"\n+\t\"encoding/binary\"\n+\t\"io\"\n+\t\"math/bits\"\n+\n+\t\"github.com/JohnCGriffin/overflow\"\n+\t\"github.com/apache/arrow/go/arrow/bitutil\"\n+\t\"github.com/apache/arrow/go/parquet\"\n+\tformat \"github.com/apache/arrow/go/parquet/internal/gen-go/parquet\"\n+\t\"github.com/apache/arrow/go/parquet/internal/utils\"\n+)\n+\n+// LevelEncoder is for handling the encoding of Definition and Repetition levels\n+// to parquet files.\n+type LevelEncoder struct {\n+\tbitWidth int\n+\trleLen   int\n+\tencoding format.Encoding\n+\trle      *utils.RleEncoder\n+\tbit      *utils.BitWriter\n+}\n+\n+// LevelEncodingMaxBufferSize estimates the max number of bytes needed to encode data with the\n+// specified encoding given the max level and number of buffered values provided.\n+func LevelEncodingMaxBufferSize(encoding parquet.Encoding, maxLvl int16, nbuffered int) int {\n+\tbitWidth := bits.Len64(uint64(maxLvl))\n+\tnbytes := 0\n+\tswitch encoding {\n+\tcase parquet.Encodings.RLE:\n+\t\tnbytes = utils.MaxBufferSize(bitWidth, nbuffered) + utils.MinBufferSize(bitWidth)\n+\tcase parquet.Encodings.BitPacked:\n+\t\tnbytes = int(bitutil.BytesForBits(int64(nbuffered * bitWidth)))\n+\tdefault:\n+\t\tpanic(\"parquet: unknown encoding type for levels\")\n+\t}\n+\treturn nbytes\n+}\n+\n+// Reset resets the encoder allowing it to be reused and updating the maxlevel to the new\n+// specified value.\n+func (l *LevelEncoder) Reset(maxLvl int16) {\n+\tl.bitWidth = bits.Len64(uint64(maxLvl))\n+\tswitch l.encoding {\n+\tcase format.Encoding_RLE:\n+\t\tl.rle.Clear()\n+\t\tl.rle.BitWidth = l.bitWidth\n+\tcase format.Encoding_BIT_PACKED:\n+\t\tl.bit.Clear()\n+\tdefault:\n+\t\tpanic(\"parquet: unknown encoding type\")\n+\t}\n+}\n+\n+// Init is called to set up the desired encoding type, max level and underlying writer for a\n+// level encoder to control where the resulting encoded buffer will end up.\n+func (l *LevelEncoder) Init(encoding parquet.Encoding, maxLvl int16, w io.WriterAt) {\n+\tl.bitWidth = bits.Len64(uint64(maxLvl))\n+\tl.encoding = format.Encoding(encoding)\n+\tswitch l.encoding {\n+\tcase format.Encoding_RLE:\n+\t\tl.rle = utils.NewRleEncoder(w, l.bitWidth)\n+\tcase format.Encoding_BIT_PACKED:\n+\t\tl.bit = utils.NewBitWriter(w)\n+\tdefault:\n+\t\tpanic(\"parquet: unknown encoding type for levels\")\n+\t}\n+}\n+\n+// EncodeNoFlush encodes the provided levels in the encoder, but doesn't flush\n+// the buffer and return it yet, appending these encoded values. Returns the number\n\nReview comment:\n       currently this is an internal only package so it is not exposed for non-internal consumers to call this and the column writers check the return and propagate an error if it doesn't match. Alternately, I could modify the underlying encoders to have Put return an error instead of just a bool and then propagate an error. I believe currently it just returns true/false for success/failure out of convenience and I never got around to having it return a proper error. \r\n   \r\n   I'll take a look at how big such a change would be.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-30T16:01:35.382+0000",
                    "updated": "2021-07-30T16:01:35.382+0000",
                    "started": "2021-07-30T16:01:35.382+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "631749",
                    "issueId": "13389481"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13389481/worklog/631769",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on a change in pull request #10716:\nURL: https://github.com/apache/arrow/pull/10716#discussion_r680074956\n\n\n\n##########\nFile path: go/parquet/internal/encoding/levels.go\n##########\n@@ -0,0 +1,284 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package encoding\n+\n+import (\n+\t\"bytes\"\n+\t\"encoding/binary\"\n+\t\"io\"\n+\t\"math/bits\"\n+\n+\t\"github.com/JohnCGriffin/overflow\"\n+\t\"github.com/apache/arrow/go/arrow/bitutil\"\n+\t\"github.com/apache/arrow/go/parquet\"\n+\tformat \"github.com/apache/arrow/go/parquet/internal/gen-go/parquet\"\n+\t\"github.com/apache/arrow/go/parquet/internal/utils\"\n+)\n+\n+// LevelEncoder is for handling the encoding of Definition and Repetition levels\n+// to parquet files.\n+type LevelEncoder struct {\n+\tbitWidth int\n+\trleLen   int\n+\tencoding format.Encoding\n+\trle      *utils.RleEncoder\n+\tbit      *utils.BitWriter\n+}\n+\n+// LevelEncodingMaxBufferSize estimates the max number of bytes needed to encode data with the\n+// specified encoding given the max level and number of buffered values provided.\n+func LevelEncodingMaxBufferSize(encoding parquet.Encoding, maxLvl int16, nbuffered int) int {\n+\tbitWidth := bits.Len64(uint64(maxLvl))\n+\tnbytes := 0\n+\tswitch encoding {\n+\tcase parquet.Encodings.RLE:\n+\t\tnbytes = utils.MaxBufferSize(bitWidth, nbuffered) + utils.MinBufferSize(bitWidth)\n+\tcase parquet.Encodings.BitPacked:\n+\t\tnbytes = int(bitutil.BytesForBits(int64(nbuffered * bitWidth)))\n+\tdefault:\n+\t\tpanic(\"parquet: unknown encoding type for levels\")\n+\t}\n+\treturn nbytes\n+}\n+\n+// Reset resets the encoder allowing it to be reused and updating the maxlevel to the new\n+// specified value.\n+func (l *LevelEncoder) Reset(maxLvl int16) {\n+\tl.bitWidth = bits.Len64(uint64(maxLvl))\n+\tswitch l.encoding {\n+\tcase format.Encoding_RLE:\n+\t\tl.rle.Clear()\n+\t\tl.rle.BitWidth = l.bitWidth\n+\tcase format.Encoding_BIT_PACKED:\n+\t\tl.bit.Clear()\n+\tdefault:\n+\t\tpanic(\"parquet: unknown encoding type\")\n+\t}\n+}\n+\n+// Init is called to set up the desired encoding type, max level and underlying writer for a\n+// level encoder to control where the resulting encoded buffer will end up.\n+func (l *LevelEncoder) Init(encoding parquet.Encoding, maxLvl int16, w io.WriterAt) {\n+\tl.bitWidth = bits.Len64(uint64(maxLvl))\n+\tl.encoding = format.Encoding(encoding)\n+\tswitch l.encoding {\n+\tcase format.Encoding_RLE:\n+\t\tl.rle = utils.NewRleEncoder(w, l.bitWidth)\n+\tcase format.Encoding_BIT_PACKED:\n+\t\tl.bit = utils.NewBitWriter(w)\n+\tdefault:\n+\t\tpanic(\"parquet: unknown encoding type for levels\")\n+\t}\n+}\n+\n+// EncodeNoFlush encodes the provided levels in the encoder, but doesn't flush\n+// the buffer and return it yet, appending these encoded values. Returns the number\n\nReview comment:\n       updated this change to add error propagation to all the necessary spots (and all the subsequent calls and dependencies) so that consumers no longer have to rely on checking the number of values returned but can see easily if an error was returned by the encoders.\n\n##########\nFile path: go/parquet/internal/encoding/levels.go\n##########\n@@ -0,0 +1,284 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package encoding\n+\n+import (\n+\t\"bytes\"\n+\t\"encoding/binary\"\n+\t\"io\"\n+\t\"math/bits\"\n+\n+\t\"github.com/JohnCGriffin/overflow\"\n+\t\"github.com/apache/arrow/go/arrow/bitutil\"\n+\t\"github.com/apache/arrow/go/parquet\"\n+\tformat \"github.com/apache/arrow/go/parquet/internal/gen-go/parquet\"\n+\t\"github.com/apache/arrow/go/parquet/internal/utils\"\n+)\n+\n+// LevelEncoder is for handling the encoding of Definition and Repetition levels\n+// to parquet files.\n+type LevelEncoder struct {\n+\tbitWidth int\n+\trleLen   int\n+\tencoding format.Encoding\n+\trle      *utils.RleEncoder\n+\tbit      *utils.BitWriter\n+}\n+\n+// LevelEncodingMaxBufferSize estimates the max number of bytes needed to encode data with the\n+// specified encoding given the max level and number of buffered values provided.\n+func LevelEncodingMaxBufferSize(encoding parquet.Encoding, maxLvl int16, nbuffered int) int {\n+\tbitWidth := bits.Len64(uint64(maxLvl))\n+\tnbytes := 0\n+\tswitch encoding {\n+\tcase parquet.Encodings.RLE:\n+\t\tnbytes = utils.MaxBufferSize(bitWidth, nbuffered) + utils.MinBufferSize(bitWidth)\n+\tcase parquet.Encodings.BitPacked:\n+\t\tnbytes = int(bitutil.BytesForBits(int64(nbuffered * bitWidth)))\n+\tdefault:\n+\t\tpanic(\"parquet: unknown encoding type for levels\")\n+\t}\n+\treturn nbytes\n+}\n+\n+// Reset resets the encoder allowing it to be reused and updating the maxlevel to the new\n+// specified value.\n+func (l *LevelEncoder) Reset(maxLvl int16) {\n+\tl.bitWidth = bits.Len64(uint64(maxLvl))\n+\tswitch l.encoding {\n+\tcase format.Encoding_RLE:\n+\t\tl.rle.Clear()\n+\t\tl.rle.BitWidth = l.bitWidth\n+\tcase format.Encoding_BIT_PACKED:\n+\t\tl.bit.Clear()\n+\tdefault:\n+\t\tpanic(\"parquet: unknown encoding type\")\n+\t}\n+}\n+\n+// Init is called to set up the desired encoding type, max level and underlying writer for a\n+// level encoder to control where the resulting encoded buffer will end up.\n+func (l *LevelEncoder) Init(encoding parquet.Encoding, maxLvl int16, w io.WriterAt) {\n+\tl.bitWidth = bits.Len64(uint64(maxLvl))\n+\tl.encoding = format.Encoding(encoding)\n+\tswitch l.encoding {\n+\tcase format.Encoding_RLE:\n+\t\tl.rle = utils.NewRleEncoder(w, l.bitWidth)\n+\tcase format.Encoding_BIT_PACKED:\n+\t\tl.bit = utils.NewBitWriter(w)\n+\tdefault:\n+\t\tpanic(\"parquet: unknown encoding type for levels\")\n+\t}\n+}\n+\n+// EncodeNoFlush encodes the provided levels in the encoder, but doesn't flush\n+// the buffer and return it yet, appending these encoded values. Returns the number\n+// of values encoded.\n+func (l *LevelEncoder) EncodeNoFlush(lvls []int16) int {\n+\tnencoded := 0\n+\tif l.rle == nil && l.bit == nil {\n+\t\tpanic(\"parquet: level encoders are not initialized\")\n+\t}\n+\n+\tswitch l.encoding {\n+\tcase format.Encoding_RLE:\n+\t\tfor _, level := range lvls {\n+\t\t\tif !l.rle.Put(uint64(level)) {\n+\t\t\t\tbreak\n+\t\t\t}\n+\t\t\tnencoded++\n+\t\t}\n+\tdefault:\n+\t\tfor _, level := range lvls {\n+\t\t\tif l.bit.WriteValue(uint64(level), uint(l.bitWidth)) != nil {\n+\t\t\t\tbreak\n+\t\t\t}\n+\t\t\tnencoded++\n+\t\t}\n+\t}\n+\treturn nencoded\n+}\n+\n+// Flush flushes out any encoded data to the underlying writer.\n+func (l *LevelEncoder) Flush() {\n+\tif l.rle == nil && l.bit == nil {\n+\t\tpanic(\"parquet: level encoders are not initialized\")\n+\t}\n+\n+\tswitch l.encoding {\n+\tcase format.Encoding_RLE:\n+\t\tl.rleLen = l.rle.Flush()\n+\tdefault:\n+\t\tl.bit.Flush(false)\n+\t}\n+}\n+\n+// Encode encodes the slice of definition or repetition levels based on\n+// the currently configured encoding type and returns the number of\n+// values that were encoded.\n+func (l *LevelEncoder) Encode(lvls []int16) int {\n+\tnencoded := 0\n+\tif l.rle == nil && l.bit == nil {\n+\t\tpanic(\"parquet: level encoders are not initialized\")\n+\t}\n+\n+\tswitch l.encoding {\n+\tcase format.Encoding_RLE:\n+\t\tfor _, level := range lvls {\n+\t\t\tif !l.rle.Put(uint64(level)) {\n+\t\t\t\tbreak\n+\t\t\t}\n+\t\t\tnencoded++\n+\t\t}\n+\t\tl.rleLen = l.rle.Flush()\n+\tdefault:\n+\t\tfor _, level := range lvls {\n+\t\t\tif l.bit.WriteValue(uint64(level), uint(l.bitWidth)) != nil {\n+\t\t\t\tbreak\n+\t\t\t}\n+\t\t\tnencoded++\n+\t\t}\n+\t\tl.bit.Flush(false)\n+\t}\n+\treturn nencoded\n+}\n+\n+// Len returns the number of bytes that were written as Run Length encoded\n+// levels, this is only valid for run length encoding and will panic if using\n+// deprecated bit packed encoding.\n+func (l *LevelEncoder) Len() int {\n+\tif l.encoding != format.Encoding_RLE {\n+\t\tpanic(\"parquet: level encoder, only implemented for RLE\")\n+\t}\n+\treturn l.rleLen\n+}\n+\n+// LevelDecoder handles the decoding of repetition and definition levels from a\n+// parquet file supporting bit packed and run length encoded values.\n+type LevelDecoder struct {\n+\tbitWidth  int\n+\tremaining int\n+\tmaxLvl    int16\n+\tencoding  format.Encoding\n+\trle       *utils.RleDecoder\n\nReview comment:\n       done\n\n##########\nFile path: go/parquet/internal/encoding/levels.go\n##########\n@@ -0,0 +1,284 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package encoding\n+\n+import (\n+\t\"bytes\"\n+\t\"encoding/binary\"\n+\t\"io\"\n+\t\"math/bits\"\n+\n+\t\"github.com/JohnCGriffin/overflow\"\n+\t\"github.com/apache/arrow/go/arrow/bitutil\"\n+\t\"github.com/apache/arrow/go/parquet\"\n+\tformat \"github.com/apache/arrow/go/parquet/internal/gen-go/parquet\"\n+\t\"github.com/apache/arrow/go/parquet/internal/utils\"\n+)\n+\n+// LevelEncoder is for handling the encoding of Definition and Repetition levels\n+// to parquet files.\n+type LevelEncoder struct {\n+\tbitWidth int\n+\trleLen   int\n+\tencoding format.Encoding\n+\trle      *utils.RleEncoder\n+\tbit      *utils.BitWriter\n+}\n+\n+// LevelEncodingMaxBufferSize estimates the max number of bytes needed to encode data with the\n+// specified encoding given the max level and number of buffered values provided.\n+func LevelEncodingMaxBufferSize(encoding parquet.Encoding, maxLvl int16, nbuffered int) int {\n+\tbitWidth := bits.Len64(uint64(maxLvl))\n+\tnbytes := 0\n+\tswitch encoding {\n+\tcase parquet.Encodings.RLE:\n+\t\tnbytes = utils.MaxBufferSize(bitWidth, nbuffered) + utils.MinBufferSize(bitWidth)\n+\tcase parquet.Encodings.BitPacked:\n+\t\tnbytes = int(bitutil.BytesForBits(int64(nbuffered * bitWidth)))\n+\tdefault:\n+\t\tpanic(\"parquet: unknown encoding type for levels\")\n+\t}\n+\treturn nbytes\n+}\n+\n+// Reset resets the encoder allowing it to be reused and updating the maxlevel to the new\n+// specified value.\n+func (l *LevelEncoder) Reset(maxLvl int16) {\n+\tl.bitWidth = bits.Len64(uint64(maxLvl))\n+\tswitch l.encoding {\n+\tcase format.Encoding_RLE:\n+\t\tl.rle.Clear()\n+\t\tl.rle.BitWidth = l.bitWidth\n+\tcase format.Encoding_BIT_PACKED:\n+\t\tl.bit.Clear()\n+\tdefault:\n+\t\tpanic(\"parquet: unknown encoding type\")\n+\t}\n+}\n+\n+// Init is called to set up the desired encoding type, max level and underlying writer for a\n+// level encoder to control where the resulting encoded buffer will end up.\n+func (l *LevelEncoder) Init(encoding parquet.Encoding, maxLvl int16, w io.WriterAt) {\n+\tl.bitWidth = bits.Len64(uint64(maxLvl))\n+\tl.encoding = format.Encoding(encoding)\n+\tswitch l.encoding {\n+\tcase format.Encoding_RLE:\n+\t\tl.rle = utils.NewRleEncoder(w, l.bitWidth)\n+\tcase format.Encoding_BIT_PACKED:\n+\t\tl.bit = utils.NewBitWriter(w)\n+\tdefault:\n+\t\tpanic(\"parquet: unknown encoding type for levels\")\n+\t}\n+}\n+\n+// EncodeNoFlush encodes the provided levels in the encoder, but doesn't flush\n+// the buffer and return it yet, appending these encoded values. Returns the number\n+// of values encoded.\n+func (l *LevelEncoder) EncodeNoFlush(lvls []int16) int {\n+\tnencoded := 0\n+\tif l.rle == nil && l.bit == nil {\n+\t\tpanic(\"parquet: level encoders are not initialized\")\n+\t}\n+\n+\tswitch l.encoding {\n+\tcase format.Encoding_RLE:\n+\t\tfor _, level := range lvls {\n+\t\t\tif !l.rle.Put(uint64(level)) {\n+\t\t\t\tbreak\n+\t\t\t}\n+\t\t\tnencoded++\n+\t\t}\n+\tdefault:\n+\t\tfor _, level := range lvls {\n+\t\t\tif l.bit.WriteValue(uint64(level), uint(l.bitWidth)) != nil {\n+\t\t\t\tbreak\n+\t\t\t}\n+\t\t\tnencoded++\n+\t\t}\n+\t}\n+\treturn nencoded\n+}\n+\n+// Flush flushes out any encoded data to the underlying writer.\n+func (l *LevelEncoder) Flush() {\n+\tif l.rle == nil && l.bit == nil {\n+\t\tpanic(\"parquet: level encoders are not initialized\")\n+\t}\n+\n+\tswitch l.encoding {\n+\tcase format.Encoding_RLE:\n+\t\tl.rleLen = l.rle.Flush()\n+\tdefault:\n+\t\tl.bit.Flush(false)\n+\t}\n+}\n+\n+// Encode encodes the slice of definition or repetition levels based on\n+// the currently configured encoding type and returns the number of\n+// values that were encoded.\n+func (l *LevelEncoder) Encode(lvls []int16) int {\n+\tnencoded := 0\n+\tif l.rle == nil && l.bit == nil {\n+\t\tpanic(\"parquet: level encoders are not initialized\")\n+\t}\n+\n+\tswitch l.encoding {\n+\tcase format.Encoding_RLE:\n+\t\tfor _, level := range lvls {\n+\t\t\tif !l.rle.Put(uint64(level)) {\n+\t\t\t\tbreak\n+\t\t\t}\n+\t\t\tnencoded++\n+\t\t}\n+\t\tl.rleLen = l.rle.Flush()\n+\tdefault:\n+\t\tfor _, level := range lvls {\n+\t\t\tif l.bit.WriteValue(uint64(level), uint(l.bitWidth)) != nil {\n+\t\t\t\tbreak\n+\t\t\t}\n+\t\t\tnencoded++\n+\t\t}\n+\t\tl.bit.Flush(false)\n+\t}\n+\treturn nencoded\n+}\n+\n+// Len returns the number of bytes that were written as Run Length encoded\n+// levels, this is only valid for run length encoding and will panic if using\n+// deprecated bit packed encoding.\n+func (l *LevelEncoder) Len() int {\n+\tif l.encoding != format.Encoding_RLE {\n+\t\tpanic(\"parquet: level encoder, only implemented for RLE\")\n+\t}\n+\treturn l.rleLen\n+}\n+\n+// LevelDecoder handles the decoding of repetition and definition levels from a\n+// parquet file supporting bit packed and run length encoded values.\n+type LevelDecoder struct {\n+\tbitWidth  int\n+\tremaining int\n\nReview comment:\n       done.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-30T16:37:48.350+0000",
                    "updated": "2021-07-30T16:37:48.350+0000",
                    "started": "2021-07-30T16:37:48.349+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "631769",
                    "issueId": "13389481"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13389481/worklog/631770",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on a change in pull request #10716:\nURL: https://github.com/apache/arrow/pull/10716#discussion_r680075490\n\n\n\n##########\nFile path: go/parquet/internal/encoding/levels.go\n##########\n@@ -0,0 +1,284 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package encoding\n+\n+import (\n+\t\"bytes\"\n+\t\"encoding/binary\"\n+\t\"io\"\n+\t\"math/bits\"\n+\n+\t\"github.com/JohnCGriffin/overflow\"\n+\t\"github.com/apache/arrow/go/arrow/bitutil\"\n+\t\"github.com/apache/arrow/go/parquet\"\n+\tformat \"github.com/apache/arrow/go/parquet/internal/gen-go/parquet\"\n+\t\"github.com/apache/arrow/go/parquet/internal/utils\"\n+)\n+\n+// LevelEncoder is for handling the encoding of Definition and Repetition levels\n+// to parquet files.\n+type LevelEncoder struct {\n+\tbitWidth int\n+\trleLen   int\n+\tencoding format.Encoding\n+\trle      *utils.RleEncoder\n+\tbit      *utils.BitWriter\n+}\n+\n+// LevelEncodingMaxBufferSize estimates the max number of bytes needed to encode data with the\n+// specified encoding given the max level and number of buffered values provided.\n+func LevelEncodingMaxBufferSize(encoding parquet.Encoding, maxLvl int16, nbuffered int) int {\n+\tbitWidth := bits.Len64(uint64(maxLvl))\n+\tnbytes := 0\n+\tswitch encoding {\n+\tcase parquet.Encodings.RLE:\n+\t\tnbytes = utils.MaxBufferSize(bitWidth, nbuffered) + utils.MinBufferSize(bitWidth)\n+\tcase parquet.Encodings.BitPacked:\n+\t\tnbytes = int(bitutil.BytesForBits(int64(nbuffered * bitWidth)))\n+\tdefault:\n+\t\tpanic(\"parquet: unknown encoding type for levels\")\n+\t}\n+\treturn nbytes\n+}\n+\n+// Reset resets the encoder allowing it to be reused and updating the maxlevel to the new\n+// specified value.\n+func (l *LevelEncoder) Reset(maxLvl int16) {\n+\tl.bitWidth = bits.Len64(uint64(maxLvl))\n+\tswitch l.encoding {\n+\tcase format.Encoding_RLE:\n+\t\tl.rle.Clear()\n+\t\tl.rle.BitWidth = l.bitWidth\n+\tcase format.Encoding_BIT_PACKED:\n+\t\tl.bit.Clear()\n+\tdefault:\n+\t\tpanic(\"parquet: unknown encoding type\")\n+\t}\n+}\n+\n+// Init is called to set up the desired encoding type, max level and underlying writer for a\n+// level encoder to control where the resulting encoded buffer will end up.\n+func (l *LevelEncoder) Init(encoding parquet.Encoding, maxLvl int16, w io.WriterAt) {\n+\tl.bitWidth = bits.Len64(uint64(maxLvl))\n+\tl.encoding = format.Encoding(encoding)\n+\tswitch l.encoding {\n+\tcase format.Encoding_RLE:\n+\t\tl.rle = utils.NewRleEncoder(w, l.bitWidth)\n+\tcase format.Encoding_BIT_PACKED:\n+\t\tl.bit = utils.NewBitWriter(w)\n+\tdefault:\n+\t\tpanic(\"parquet: unknown encoding type for levels\")\n+\t}\n+}\n+\n+// EncodeNoFlush encodes the provided levels in the encoder, but doesn't flush\n+// the buffer and return it yet, appending these encoded values. Returns the number\n+// of values encoded.\n+func (l *LevelEncoder) EncodeNoFlush(lvls []int16) int {\n+\tnencoded := 0\n+\tif l.rle == nil && l.bit == nil {\n+\t\tpanic(\"parquet: level encoders are not initialized\")\n+\t}\n+\n+\tswitch l.encoding {\n+\tcase format.Encoding_RLE:\n+\t\tfor _, level := range lvls {\n+\t\t\tif !l.rle.Put(uint64(level)) {\n+\t\t\t\tbreak\n+\t\t\t}\n+\t\t\tnencoded++\n+\t\t}\n+\tdefault:\n+\t\tfor _, level := range lvls {\n+\t\t\tif l.bit.WriteValue(uint64(level), uint(l.bitWidth)) != nil {\n+\t\t\t\tbreak\n+\t\t\t}\n+\t\t\tnencoded++\n+\t\t}\n+\t}\n+\treturn nencoded\n+}\n+\n+// Flush flushes out any encoded data to the underlying writer.\n+func (l *LevelEncoder) Flush() {\n+\tif l.rle == nil && l.bit == nil {\n+\t\tpanic(\"parquet: level encoders are not initialized\")\n+\t}\n+\n+\tswitch l.encoding {\n+\tcase format.Encoding_RLE:\n+\t\tl.rleLen = l.rle.Flush()\n+\tdefault:\n+\t\tl.bit.Flush(false)\n+\t}\n+}\n+\n+// Encode encodes the slice of definition or repetition levels based on\n+// the currently configured encoding type and returns the number of\n+// values that were encoded.\n+func (l *LevelEncoder) Encode(lvls []int16) int {\n+\tnencoded := 0\n+\tif l.rle == nil && l.bit == nil {\n+\t\tpanic(\"parquet: level encoders are not initialized\")\n+\t}\n+\n+\tswitch l.encoding {\n+\tcase format.Encoding_RLE:\n+\t\tfor _, level := range lvls {\n+\t\t\tif !l.rle.Put(uint64(level)) {\n+\t\t\t\tbreak\n+\t\t\t}\n+\t\t\tnencoded++\n+\t\t}\n+\t\tl.rleLen = l.rle.Flush()\n+\tdefault:\n+\t\tfor _, level := range lvls {\n+\t\t\tif l.bit.WriteValue(uint64(level), uint(l.bitWidth)) != nil {\n+\t\t\t\tbreak\n+\t\t\t}\n+\t\t\tnencoded++\n+\t\t}\n+\t\tl.bit.Flush(false)\n+\t}\n+\treturn nencoded\n+}\n+\n+// Len returns the number of bytes that were written as Run Length encoded\n+// levels, this is only valid for run length encoding and will panic if using\n+// deprecated bit packed encoding.\n+func (l *LevelEncoder) Len() int {\n+\tif l.encoding != format.Encoding_RLE {\n+\t\tpanic(\"parquet: level encoder, only implemented for RLE\")\n+\t}\n+\treturn l.rleLen\n+}\n+\n+// LevelDecoder handles the decoding of repetition and definition levels from a\n+// parquet file supporting bit packed and run length encoded values.\n+type LevelDecoder struct {\n+\tbitWidth  int\n+\tremaining int\n+\tmaxLvl    int16\n+\tencoding  format.Encoding\n+\trle       *utils.RleDecoder\n+\tbit       *utils.BitReader\n+}\n+\n+// SetData sets in the data to be decoded by subsequent calls by specifying the encoding type\n+// the maximum level (which is what determines the bit width), the number of values expected\n+// and the raw bytes to decode. Returns the number of bytes expected to be decoded.\n+func (l *LevelDecoder) SetData(encoding parquet.Encoding, maxLvl int16, nbuffered int, data []byte) int {\n+\tl.maxLvl = maxLvl\n+\tl.encoding = format.Encoding(encoding)\n+\tl.remaining = nbuffered\n+\tl.bitWidth = bits.Len64(uint64(maxLvl))\n+\n+\tswitch encoding {\n+\tcase parquet.Encodings.RLE:\n+\t\tif len(data) < 4 {\n+\t\t\tpanic(\"parquet: received invalid levels (corrupt data page?)\")\n\nReview comment:\n       modified to propagate error instead of panic\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-30T16:38:01.742+0000",
                    "updated": "2021-07-30T16:38:01.742+0000",
                    "started": "2021-07-30T16:38:01.741+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "631770",
                    "issueId": "13389481"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13389481/worklog/634626",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on pull request #10716:\nURL: https://github.com/apache/arrow/pull/10716#issuecomment-893563947\n\n\n   @emkornfield bump. i've responded to and/or addressed all of the comments so far. :smile:\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-05T15:45:02.635+0000",
                    "updated": "2021-08-05T15:45:02.635+0000",
                    "started": "2021-08-05T15:45:02.635+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "634626",
                    "issueId": "13389481"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13389481/worklog/636734",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #10716:\nURL: https://github.com/apache/arrow/pull/10716#discussion_r686487321\n\n\n\n##########\nFile path: go/parquet/internal/encoding/encoding_test.go\n##########\n@@ -0,0 +1,684 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package encoding_test\n+\n+import (\n+\t\"fmt\"\n+\t\"reflect\"\n+\t\"testing\"\n+\t\"unsafe\"\n+\n+\t\"github.com/apache/arrow/go/arrow\"\n+\t\"github.com/apache/arrow/go/arrow/bitutil\"\n+\t\"github.com/apache/arrow/go/arrow/memory\"\n+\t\"github.com/apache/arrow/go/parquet\"\n+\t\"github.com/apache/arrow/go/parquet/internal/encoding\"\n+\t\"github.com/apache/arrow/go/parquet/internal/testutils\"\n+\t\"github.com/apache/arrow/go/parquet/schema\"\n+\t\"github.com/stretchr/testify/assert\"\n+\t\"github.com/stretchr/testify/suite\"\n+)\n+\n+type nodeFactory func(string, parquet.Repetition, int32) *schema.PrimitiveNode\n+\n+func createNodeFactory(t reflect.Type) nodeFactory {\n+\tswitch t {\n+\tcase reflect.TypeOf(true):\n+\t\treturn schema.NewBooleanNode\n+\tcase reflect.TypeOf(int32(0)):\n+\t\treturn schema.NewInt32Node\n+\tcase reflect.TypeOf(int64(0)):\n+\t\treturn schema.NewInt64Node\n+\tcase reflect.TypeOf(parquet.Int96{}):\n+\t\treturn schema.NewInt96Node\n+\tcase reflect.TypeOf(float32(0)):\n+\t\treturn schema.NewFloat32Node\n+\tcase reflect.TypeOf(float64(0)):\n+\t\treturn schema.NewFloat64Node\n+\tcase reflect.TypeOf(parquet.ByteArray{}):\n+\t\treturn schema.NewByteArrayNode\n+\tcase reflect.TypeOf(parquet.FixedLenByteArray{}):\n+\t\treturn func(name string, rep parquet.Repetition, field int32) *schema.PrimitiveNode {\n+\t\t\treturn schema.NewFixedLenByteArrayNode(name, rep, 12, field)\n+\t\t}\n+\t}\n+\treturn nil\n\nReview comment:\n       is it a common pattern to return nil for unhandled enum cases in go (and not have an error or compiler detect unhandled cases?)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-11T04:45:13.701+0000",
                    "updated": "2021-08-11T04:45:13.701+0000",
                    "started": "2021-08-11T04:45:13.701+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "636734",
                    "issueId": "13389481"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13389481/worklog/636735",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #10716:\nURL: https://github.com/apache/arrow/pull/10716#discussion_r686487476\n\n\n\n##########\nFile path: go/parquet/internal/encoding/encoding_test.go\n##########\n@@ -0,0 +1,684 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package encoding_test\n+\n+import (\n+\t\"fmt\"\n+\t\"reflect\"\n+\t\"testing\"\n+\t\"unsafe\"\n+\n+\t\"github.com/apache/arrow/go/arrow\"\n+\t\"github.com/apache/arrow/go/arrow/bitutil\"\n+\t\"github.com/apache/arrow/go/arrow/memory\"\n+\t\"github.com/apache/arrow/go/parquet\"\n+\t\"github.com/apache/arrow/go/parquet/internal/encoding\"\n+\t\"github.com/apache/arrow/go/parquet/internal/testutils\"\n+\t\"github.com/apache/arrow/go/parquet/schema\"\n+\t\"github.com/stretchr/testify/assert\"\n+\t\"github.com/stretchr/testify/suite\"\n+)\n+\n+type nodeFactory func(string, parquet.Repetition, int32) *schema.PrimitiveNode\n+\n+func createNodeFactory(t reflect.Type) nodeFactory {\n+\tswitch t {\n+\tcase reflect.TypeOf(true):\n+\t\treturn schema.NewBooleanNode\n+\tcase reflect.TypeOf(int32(0)):\n+\t\treturn schema.NewInt32Node\n+\tcase reflect.TypeOf(int64(0)):\n+\t\treturn schema.NewInt64Node\n+\tcase reflect.TypeOf(parquet.Int96{}):\n+\t\treturn schema.NewInt96Node\n+\tcase reflect.TypeOf(float32(0)):\n+\t\treturn schema.NewFloat32Node\n+\tcase reflect.TypeOf(float64(0)):\n+\t\treturn schema.NewFloat64Node\n+\tcase reflect.TypeOf(parquet.ByteArray{}):\n+\t\treturn schema.NewByteArrayNode\n+\tcase reflect.TypeOf(parquet.FixedLenByteArray{}):\n+\t\treturn func(name string, rep parquet.Repetition, field int32) *schema.PrimitiveNode {\n+\t\t\treturn schema.NewFixedLenByteArrayNode(name, rep, 12, field)\n+\t\t}\n+\t}\n+\treturn nil\n\nReview comment:\n       NM, this is testing code should be fine.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-11T04:45:37.293+0000",
                    "updated": "2021-08-11T04:45:37.293+0000",
                    "started": "2021-08-11T04:45:37.293+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "636735",
                    "issueId": "13389481"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
            "id": "7",
            "description": "The sub-task of the issue",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
            "name": "Sub-task",
            "subtask": true,
            "avatarId": 21146
        },
        "timespent": 21000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@23de47f3[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@22ee501f[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5ec12920[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@effe44f[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7760378d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@7021f985[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@27fe4688[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@56d213a4[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@20789aac[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@5f6aa2f7[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@af57594[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@4c7c185d[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 21000,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Aug 17 03:26:30 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-08-17T03:26:30.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-13330/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2021-07-13T22:03:52.000+0000",
        "updated": "2021-08-17T03:26:36.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "5h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 21000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Go][Parquet] Add Encoding Package Part 2",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13389481/comment/17384069",
                    "id": "17384069",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kszucs",
                        "name": "kszucs",
                        "key": "kszucs",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Krisztian Szucs",
                        "active": true,
                        "timeZone": "Europe/Budapest"
                    },
                    "body": "Postponing it to 6.0 since the PR hasn't received any reviews yet. ",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kszucs",
                        "name": "kszucs",
                        "key": "kszucs",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Krisztian Szucs",
                        "active": true,
                        "timeZone": "Europe/Budapest"
                    },
                    "created": "2021-07-20T10:56:19.046+0000",
                    "updated": "2021-07-20T10:56:19.046+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13389481/comment/17400106",
                    "id": "17400106",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield",
                        "name": "emkornfield",
                        "key": "emkornfield",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Micah Kornfield",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Issue resolved by pull request 10716\n[https://github.com/apache/arrow/pull/10716]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield",
                        "name": "emkornfield",
                        "key": "emkornfield",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Micah Kornfield",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2021-08-17T03:26:30.990+0000",
                    "updated": "2021-08-17T03:26:30.990+0000"
                }
            ],
            "maxResults": 2,
            "total": 2,
            "startAt": 0
        },
        "customfield_12311820": "0|z0sx4g:",
        "customfield_12314139": null
    }
}