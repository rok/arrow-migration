{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13329629",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329629",
    "key": "ARROW-10109",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12348823",
                "id": "12348823",
                "description": "",
                "name": "3.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-01-25"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12599462",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12599462",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "outwardIssue": {
                    "id": "13329630",
                    "key": "ARROW-10110",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329630",
                    "fields": {
                        "summary": "[Rust] Add support to consume C Data Interface",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorgecarleitao",
            "name": "jorgecarleitao",
            "key": "jorgecarleitao",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=jorgecarleitao&avatarId=43827",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jorgecarleitao&avatarId=43827",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jorgecarleitao&avatarId=43827",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jorgecarleitao&avatarId=43827"
            },
            "displayName": "Jorge Leit\u00e3o",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333773",
                "id": "12333773",
                "name": "Rust"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorgecarleitao",
            "name": "jorgecarleitao",
            "key": "jorgecarleitao",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=jorgecarleitao&avatarId=43827",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jorgecarleitao&avatarId=43827",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jorgecarleitao&avatarId=43827",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jorgecarleitao&avatarId=43827"
            },
            "displayName": "Jorge Leit\u00e3o",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorgecarleitao",
            "name": "jorgecarleitao",
            "key": "jorgecarleitao",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=jorgecarleitao&avatarId=43827",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jorgecarleitao&avatarId=43827",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jorgecarleitao&avatarId=43827",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jorgecarleitao&avatarId=43827"
            },
            "displayName": "Jorge Leit\u00e3o",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 32400,
            "total": 32400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 32400,
            "total": 32400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10109/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 54,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329629/worklog/497429",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao opened a new pull request #8401:\nURL: https://github.com/apache/arrow/pull/8401\n\n\n   This PR is a proposal to add support to the [C data interface](https://arrow.apache.org/docs/format/CDataInterface.html) by implementing the necessary functionality to both consume and produce structs with its ABI and lifetime rules.\r\n   \r\n   This is for now limited to primitive types, but it is easily generalized for all types whose data is encapsulated in `ArrayData` (things with buffers and child data). For types where this does not happen (such as `StructArray`, `DictionaryArray` and `ListArray`, where data also resides on their specific struct implementations instead of `ArrayData`), I believe that more work is needed. IMO we should strive to have all data in `ArrayData`, as it makes it significantly easier to export it via the C Data Interface, as well as understanding what they physically contain.\r\n   \r\n   Some design choices:\r\n   \r\n   * import and export does not care about the type of the data that is in memory (previously `BufferData`, now `Bytes`) - it only cares about how they should be converted from and to `ArrayData` to the C data interface.\r\n   * import wraps incoming pointers on a struct behind an `Arc`, so that we thread-safely refcount them and can share them between buffers, arrays, etc.\r\n   * `export` places `Buffer`s in `private_data` for bookkeeping and release them when the consumer releases it via `release`.\r\n   \r\n   I do not expect this PR to be easy to review, as it is touching sensitive (aka `unsafe`) code. However, based on the tests I did so far, I am sufficiently happy to PR it. I tried to comment as much as possible, which I will continue to do so in the following commits.\r\n   \r\n   This PR has three main parts:\r\n   \r\n   1. Addition of an `ffi` module that contains the import and export functionality\r\n   2. Add some helpers to import and export an Array from C Data Interface\r\n   3. A crate to test this against Python/C++'s API\r\n   \r\n   It also does a small refactor of `BufferData`, renaming it to `Bytes` (motivated by the popular `bytes` crate), and moving it to a separate file.\r\n   \r\n   What is tested:\r\n   \r\n   * round-trip `Python -> Rust -> Python` (new separate crate, `arrow-c-integration`)\r\n   * round-trip `Rust -> Rust -> Rust`\r\n   \r\n   What is not tested yet:\r\n   \r\n   * round-trip `Rust -> Python -> Rust`\r\n   * memory allocation (I am still trying to find a way of doing this in Rust)\r\n   \r\n   Things to do:\r\n   \r\n   * [ ] CI for the Python tests: it requires different compilation flags, which requires compiling the whole thing. I `excluded` it from the workspace as it does not behave well with rust-analyzer, but we need to add it to the CI nevertheless.\r\n   * [ ] Add more comments\r\n   * [ ] Add more tests\r\n   * [ ] Extend for all types that only use buffers\r\n   * [ ] Error on types that are not supported\r\n   \r\n   Finally, this PR has a large contribution of @pitrou , that took _a lot_ of his time to explain to me how the C++ was doing it and the main things that I had to worry about here.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-08T16:12:17.475+0000",
                    "updated": "2020-10-08T16:12:17.475+0000",
                    "started": "2020-10-08T16:12:17.475+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "497429",
                    "issueId": "13329629"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329629/worklog/497437",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #8401:\nURL: https://github.com/apache/arrow/pull/8401#issuecomment-705685197\n\n\n   https://issues.apache.org/jira/browse/ARROW-10109\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-08T16:32:00.454+0000",
                    "updated": "2020-10-08T16:32:00.454+0000",
                    "started": "2020-10-08T16:32:00.453+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "497437",
                    "issueId": "13329629"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329629/worklog/498303",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao opened a new pull request #8401:\nURL: https://github.com/apache/arrow/pull/8401\n\n\n   This PR is a proposal to add support to the [C data interface](https://arrow.apache.org/docs/format/CDataInterface.html) by implementing the necessary functionality to both consume and produce structs with its ABI and lifetime rules.\r\n   \r\n   This is for now limited to primitive types, but it is easily generalized for all types whose data is encapsulated in `ArrayData` (things with buffers and child data). For types where this does not happen (such as `StructArray`, `DictionaryArray` and `ListArray`, where data also resides on their specific struct implementations instead of `ArrayData`), I believe that more work is needed. IMO we should strive to have all data in `ArrayData`, as it makes it significantly easier to export it via the C Data Interface, as well as understanding what they physically contain.\r\n   \r\n   Some design choices:\r\n   \r\n   * import and export does not care about the type of the data that is in memory (previously `BufferData`, now `Bytes`) - it only cares about how they should be converted from and to `ArrayData` to the C data interface.\r\n   * import wraps incoming pointers on a struct behind an `Arc`, so that we thread-safely refcount them and can share them between buffers, arrays, etc.\r\n   * `export` places `Buffer`s in `private_data` for bookkeeping and release them when the consumer releases it via `release`.\r\n   \r\n   I do not expect this PR to be easy to review, as it is touching sensitive (aka `unsafe`) code. However, based on the tests I did so far, I am sufficiently happy to PR it. I tried to comment as much as possible, which I will continue to do so in the following commits.\r\n   \r\n   This PR has three main parts:\r\n   \r\n   1. Addition of an `ffi` module that contains the import and export functionality\r\n   2. Add some helpers to import and export an Array from C Data Interface\r\n   3. A crate to test this against Python/C++'s API\r\n   \r\n   It also does a small refactor of `BufferData`, renaming it to `Bytes` (motivated by the popular `bytes` crate), and moving it to a separate file.\r\n   \r\n   What is tested:\r\n   \r\n   * round-trip `Python -> Rust -> Python` (new separate crate, `arrow-c-integration`)\r\n   * round-trip `Rust -> Rust -> Rust`\r\n   \r\n   What is not tested yet:\r\n   \r\n   * round-trip `Rust -> Python -> Rust`\r\n   * memory allocation (I am still trying to find a way of doing this in Rust)\r\n   \r\n   Things to do:\r\n   \r\n   * [ ] CI for the Python tests: it requires different compilation flags, which requires compiling the whole thing. I `excluded` it from the workspace as it does not behave well with rust-analyzer, but we need to add it to the CI nevertheless.\r\n   * [ ] Add more comments\r\n   * [ ] Add more tests\r\n   * [ ] Extend for all types that only use buffers\r\n   * [ ] Error on types that are not supported\r\n   \r\n   Finally, this PR has a large contribution of @pitrou , that took _a lot_ of his time to explain to me how the C++ was doing it and the main things that I had to worry about here.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-09T13:56:26.137+0000",
                    "updated": "2020-10-09T13:56:26.137+0000",
                    "started": "2020-10-09T13:56:26.137+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "498303",
                    "issueId": "13329629"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329629/worklog/498375",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #8401:\nURL: https://github.com/apache/arrow/pull/8401#issuecomment-705685197\n\n\n   https://issues.apache.org/jira/browse/ARROW-10109\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-09T14:01:56.954+0000",
                    "updated": "2020-10-09T14:01:56.954+0000",
                    "started": "2020-10-09T14:01:56.954+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "498375",
                    "issueId": "13329629"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329629/worklog/498984",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #8401:\nURL: https://github.com/apache/arrow/pull/8401#issuecomment-706599835\n\n\n   Thanks @jorgecarleitao this is really interesting. I've had a first pass through to get familiar with this and I will try building locally sometime this weekend hopefully.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-10T19:28:35.210+0000",
                    "updated": "2020-10-10T19:28:35.210+0000",
                    "started": "2020-10-10T19:28:35.210+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "498984",
                    "issueId": "13329629"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329629/worklog/499271",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #8401:\nURL: https://github.com/apache/arrow/pull/8401#issuecomment-706978167\n\n\n   > memory allocation counts (I am still trying to find a way of doing this in Rust)\r\n   \r\n   Just FTR, in C++ we have a global function that returns the number of currently Arrow-allocated bytes. This helps us write crude resource allocation tests (here through the Python wrapper `pyarrow.get_total_allocated_bytes`):\r\n   https://github.com/apache/arrow/blob/master/python/pyarrow/tests/test_cffi.py#L116-L131\r\n   \r\n   Another possibility would be to use the callback facility on your `Bytes` object to check that the destructor was called at some point.\r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-12T08:49:01.232+0000",
                    "updated": "2020-10-12T08:49:01.232+0000",
                    "started": "2020-10-12T08:49:01.232+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "499271",
                    "issueId": "13329629"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329629/worklog/501830",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on a change in pull request #8401:\nURL: https://github.com/apache/arrow/pull/8401#discussion_r506980094\n\n\n\n##########\nFile path: rust/arrow-c-integration/src/lib.rs\n##########\n@@ -0,0 +1,162 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! This library demonstrates a minimal usage of Rust's C data interface to pass\n+//! arrays from and to Python.\n+\n+use std::error;\n+use std::fmt;\n+use std::sync::Arc;\n+\n+use pyo3::exceptions::PyOSError;\n+use pyo3::wrap_pyfunction;\n+use pyo3::{libc::uintptr_t, prelude::*};\n+\n+use arrow::array::{make_array_from_raw, ArrayRef, Int64Array};\n+use arrow::compute::kernels;\n+use arrow::error::ArrowError;\n+use arrow::ffi;\n+\n+/// an error that bridges ArrowError with a Python error\n+#[derive(Debug)]\n+enum PyO3ArrowError {\n+    ArrowError(ArrowError),\n+}\n+\n+impl fmt::Display for PyO3ArrowError {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        match *self {\n+            PyO3ArrowError::ArrowError(ref e) => e.fmt(f),\n+        }\n+    }\n+}\n+\n+impl error::Error for PyO3ArrowError {\n+    fn source(&self) -> Option<&(dyn error::Error + 'static)> {\n+        match *self {\n+            // The cause is the underlying implementation error type. Is implicitly\n+            // cast to the trait object `&error::Error`. This works because the\n+            // underlying type already implements the `Error` trait.\n+            PyO3ArrowError::ArrowError(ref e) => Some(e),\n+        }\n+    }\n+}\n+\n+impl From<ArrowError> for PyO3ArrowError {\n+    fn from(err: ArrowError) -> PyO3ArrowError {\n+        PyO3ArrowError::ArrowError(err)\n+    }\n+}\n+\n+impl From<PyO3ArrowError> for PyErr {\n+    fn from(err: PyO3ArrowError) -> PyErr {\n+        PyOSError::new_err(err.to_string())\n+    }\n+}\n+\n+fn to_rust(ob: PyObject, py: Python) -> PyResult<ArrayRef> {\n+    // prepare a pointer to receive the Array struct\n+    let (array_pointer, schema_pointer) =\n+        ffi::ArrowArray::into_raw(unsafe { ffi::ArrowArray::empty() });\n+\n+    // make the conversion through PyArrow's private API\n\nReview comment:\n       Do we run the risk of a private API being changed breaking this?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-17T20:18:50.224+0000",
                    "updated": "2020-10-17T20:18:50.224+0000",
                    "started": "2020-10-17T20:18:50.223+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "501830",
                    "issueId": "13329629"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329629/worklog/502164",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #8401:\nURL: https://github.com/apache/arrow/pull/8401#discussion_r507718118\n\n\n\n##########\nFile path: rust/arrow-c-integration/src/lib.rs\n##########\n@@ -0,0 +1,162 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! This library demonstrates a minimal usage of Rust's C data interface to pass\n+//! arrays from and to Python.\n+\n+use std::error;\n+use std::fmt;\n+use std::sync::Arc;\n+\n+use pyo3::exceptions::PyOSError;\n+use pyo3::wrap_pyfunction;\n+use pyo3::{libc::uintptr_t, prelude::*};\n+\n+use arrow::array::{make_array_from_raw, ArrayRef, Int64Array};\n+use arrow::compute::kernels;\n+use arrow::error::ArrowError;\n+use arrow::ffi;\n+\n+/// an error that bridges ArrowError with a Python error\n+#[derive(Debug)]\n+enum PyO3ArrowError {\n+    ArrowError(ArrowError),\n+}\n+\n+impl fmt::Display for PyO3ArrowError {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        match *self {\n+            PyO3ArrowError::ArrowError(ref e) => e.fmt(f),\n+        }\n+    }\n+}\n+\n+impl error::Error for PyO3ArrowError {\n+    fn source(&self) -> Option<&(dyn error::Error + 'static)> {\n+        match *self {\n+            // The cause is the underlying implementation error type. Is implicitly\n+            // cast to the trait object `&error::Error`. This works because the\n+            // underlying type already implements the `Error` trait.\n+            PyO3ArrowError::ArrowError(ref e) => Some(e),\n+        }\n+    }\n+}\n+\n+impl From<ArrowError> for PyO3ArrowError {\n+    fn from(err: ArrowError) -> PyO3ArrowError {\n+        PyO3ArrowError::ArrowError(err)\n+    }\n+}\n+\n+impl From<PyO3ArrowError> for PyErr {\n+    fn from(err: PyO3ArrowError) -> PyErr {\n+        PyOSError::new_err(err.to_string())\n+    }\n+}\n+\n+fn to_rust(ob: PyObject, py: Python) -> PyResult<ArrayRef> {\n+    // prepare a pointer to receive the Array struct\n+    let (array_pointer, schema_pointer) =\n+        ffi::ArrowArray::into_raw(unsafe { ffi::ArrowArray::empty() });\n+\n+    // make the conversion through PyArrow's private API\n\nReview comment:\n       That API is already used for R<->Python communication. It's private mostly because it's for expert use.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-19T12:48:29.351+0000",
                    "updated": "2020-10-19T12:48:29.351+0000",
                    "started": "2020-10-19T12:48:29.351+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "502164",
                    "issueId": "13329629"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329629/worklog/502168",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #8401:\nURL: https://github.com/apache/arrow/pull/8401#discussion_r507719587\n\n\n\n##########\nFile path: rust/arrow-c-integration/tests/test_sql.py\n##########\n@@ -0,0 +1,51 @@\n+# -*- coding: utf-8 -*-\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+import unittest\n+\n+import pyarrow\n\nReview comment:\n       Just FTR, it's customary to use `import pyarrow as pa`\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-19T12:50:45.341+0000",
                    "updated": "2020-10-19T12:50:45.341+0000",
                    "started": "2020-10-19T12:50:45.341+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "502168",
                    "issueId": "13329629"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329629/worklog/502171",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #8401:\nURL: https://github.com/apache/arrow/pull/8401#discussion_r507720929\n\n\n\n##########\nFile path: rust/arrow-c-integration/tests/test_sql.py\n##########\n@@ -0,0 +1,51 @@\n+# -*- coding: utf-8 -*-\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+import unittest\n+\n+import pyarrow\n+import arrow_c_integration\n+\n+\n+class TestCase(unittest.TestCase):\n+    def test_primitive_python(self):\n+        \"\"\"\n+        Python -> Rust -> Python\n+        \"\"\"\n+        a = pyarrow.array([1, 2, 3])\n+        b = arrow_c_integration.double(a)\n+        self.assertEqual(b, pyarrow.array([2, 4, 6]))\n+\n\nReview comment:\n       Suggestion (untested):\r\n   ```python\r\n           old_allocated = pa.total_allocated_bytes()\r\n           a = pyarrow.array([1, 2, 3])\r\n           b = arrow_c_integration.double(a)\r\n           self.assertEqual(b, pyarrow.array([2, 4, 6]))\r\n           del a\r\n           # No leak of C++ memory\r\n           self.assertEqual(old_allocated, pa.total_allocated_bytes())\r\n   ```\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-19T12:52:49.131+0000",
                    "updated": "2020-10-19T12:52:49.131+0000",
                    "started": "2020-10-19T12:52:49.131+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "502171",
                    "issueId": "13329629"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329629/worklog/502508",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #8401:\nURL: https://github.com/apache/arrow/pull/8401#discussion_r508213973\n\n\n\n##########\nFile path: rust/arrow-c-integration/tests/test_sql.py\n##########\n@@ -0,0 +1,51 @@\n+# -*- coding: utf-8 -*-\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+import unittest\n+\n+import pyarrow\n+import arrow_c_integration\n+\n+\n+class TestCase(unittest.TestCase):\n+    def test_primitive_python(self):\n+        \"\"\"\n+        Python -> Rust -> Python\n+        \"\"\"\n+        a = pyarrow.array([1, 2, 3])\n+        b = arrow_c_integration.double(a)\n+        self.assertEqual(b, pyarrow.array([2, 4, 6]))\n+\n\nReview comment:\n       good one; done.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-20T05:14:29.180+0000",
                    "updated": "2020-10-20T05:14:29.180+0000",
                    "started": "2020-10-20T05:14:29.180+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "502508",
                    "issueId": "13329629"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329629/worklog/502517",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on pull request #8401:\nURL: https://github.com/apache/arrow/pull/8401#issuecomment-712601468\n\n\n   Some changes since last time:\r\n   \r\n   1. added a small tool to verify memory allocations and verified no leaks\r\n   2. added the test that @pitrou suggested to verify that we call the c++'s release.\r\n   \r\n   The tool counts all memory allocations and deallocations, like in C++. It is used as a test at the end of all tests, as a final validation that the test suite does not leak.\r\n   \r\n   I've placed it behind a feature gate as it current only works in single-threaded programs. Suggestions are welcomed to improve it further.\r\n   \r\n   I think that this is now ready to review.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-20T05:32:06.604+0000",
                    "updated": "2020-10-20T05:32:06.604+0000",
                    "started": "2020-10-20T05:32:06.603+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "502517",
                    "issueId": "13329629"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329629/worklog/503263",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #8401:\nURL: https://github.com/apache/arrow/pull/8401#discussion_r509392394\n\n\n\n##########\nFile path: rust/arrow-c-integration/Cargo.toml\n##########\n@@ -0,0 +1,38 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+[package]\n+name = \"arrow-c-integration\"\n+description = \"\"\n+version = \"3.0.0-SNAPSHOT\"\n+homepage = \"https://github.com/apache/arrow\"\n+repository = \"https://github.com/apache/arrow\"\n+authors = [\"Apache Arrow <dev@arrow.apache.org>\"]\n+license = \"Apache-2.0\"\n+keywords = [ \"arrow\" ]\n+edition = \"2018\"\n+\n+[lib]\n+name = \"arrow_c_integration\"\n+crate-type = [\"cdylib\"]\n+\n+[dependencies]\n+arrow = { path = \"../arrow\", version = \"3.0.0-SNAPSHOT\" }\n+pyo3 = { version = \"0.12.1\", features = [\"extension-module\"] }\n+\n+[package.metadata.maturin]\n+requires-dist = [\"pyarrow>=1,<2\"]\n\nReview comment:\n       Ideally the `pyarrow` version doesn't matter, since the C data interface is a stable ABI.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-21T15:36:58.954+0000",
                    "updated": "2020-10-21T15:36:58.954+0000",
                    "started": "2020-10-21T15:36:58.954+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "503263",
                    "issueId": "13329629"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329629/worklog/503267",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #8401:\nURL: https://github.com/apache/arrow/pull/8401#discussion_r509396279\n\n\n\n##########\nFile path: rust/arrow/src/memory.rs\n##########\n@@ -135,6 +135,10 @@ const FALLBACK_ALIGNMENT: usize = 1 << 6;\n /// If you use allocation methods shown here you won't have any problems.\n const BYPASS_PTR: NonNull<u8> = unsafe { NonNull::new_unchecked(ALIGNMENT as *mut u8) };\n \n+#[cfg(feature = \"memory-check\")]\n+// If this number is not zero after all objects have been `drop`, there is a memory leak\n+pub static mut ALLOCATIONS: i32 = 0;\n\nReview comment:\n       Just FTR, perhaps you can use a `AtomicUsize` to make this multi-thread-safe?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-21T15:41:57.143+0000",
                    "updated": "2020-10-21T15:41:57.143+0000",
                    "started": "2020-10-21T15:41:57.143+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "503267",
                    "issueId": "13329629"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329629/worklog/503356",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #8401:\nURL: https://github.com/apache/arrow/pull/8401#discussion_r509588774\n\n\n\n##########\nFile path: rust/arrow/src/memory.rs\n##########\n@@ -135,6 +135,10 @@ const FALLBACK_ALIGNMENT: usize = 1 << 6;\n /// If you use allocation methods shown here you won't have any problems.\n const BYPASS_PTR: NonNull<u8> = unsafe { NonNull::new_unchecked(ALIGNMENT as *mut u8) };\n \n+#[cfg(feature = \"memory-check\")]\n+// If this number is not zero after all objects have been `drop`, there is a memory leak\n+pub static mut ALLOCATIONS: i32 = 0;\n\nReview comment:\n       I think so: I was just not very confident with the note\r\n   \r\n   > Note: This type is only available on platforms that support atomic loads and stores of usize.\r\n   \r\n   which I do not know how many / which platforms we would risk with this.\r\n   \r\n   I am also not sure if we should just remove the feature gate and use it. It certainly makes the CI easier, as we do not have to compile it again. Any thoughts @nevi-me @paddyhoran ?\r\n   \r\n    @pitrou did you ever profiled the C++ code with and without the allocation counter (is it atomic there?)?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-21T19:00:16.492+0000",
                    "updated": "2020-10-21T19:00:16.492+0000",
                    "started": "2020-10-21T19:00:16.492+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "503356",
                    "issueId": "13329629"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329629/worklog/503359",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #8401:\nURL: https://github.com/apache/arrow/pull/8401#discussion_r509592855\n\n\n\n##########\nFile path: rust/arrow/src/memory.rs\n##########\n@@ -135,6 +135,10 @@ const FALLBACK_ALIGNMENT: usize = 1 << 6;\n /// If you use allocation methods shown here you won't have any problems.\n const BYPASS_PTR: NonNull<u8> = unsafe { NonNull::new_unchecked(ALIGNMENT as *mut u8) };\n \n+#[cfg(feature = \"memory-check\")]\n+// If this number is not zero after all objects have been `drop`, there is a memory leak\n+pub static mut ALLOCATIONS: i32 = 0;\n\nReview comment:\n       It's atomic in C++. It's always compiled in, and I don't think we've profiled without it. My general intuition is that an atomic increment will be faster than the allocation itself (an uncontended atomic increment will be a couple nanoseconds at worse?). Also, it sounds unlikely that an application would do many buffer allocations per second.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-21T19:04:22.972+0000",
                    "updated": "2020-10-21T19:04:22.972+0000",
                    "started": "2020-10-21T19:04:22.972+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "503359",
                    "issueId": "13329629"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329629/worklog/504399",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on a change in pull request #8401:\nURL: https://github.com/apache/arrow/pull/8401#discussion_r511263089\n\n\n\n##########\nFile path: rust/arrow-c-integration/Cargo.toml\n##########\n@@ -0,0 +1,38 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+[package]\n+name = \"arrow-c-integration\"\n+description = \"\"\n+version = \"3.0.0-SNAPSHOT\"\n+homepage = \"https://github.com/apache/arrow\"\n+repository = \"https://github.com/apache/arrow\"\n+authors = [\"Apache Arrow <dev@arrow.apache.org>\"]\n+license = \"Apache-2.0\"\n+keywords = [ \"arrow\" ]\n+edition = \"2018\"\n+\n+[lib]\n+name = \"arrow_c_integration\"\n+crate-type = [\"cdylib\"]\n+\n+[dependencies]\n+arrow = { path = \"../arrow\", version = \"3.0.0-SNAPSHOT\" }\n+pyo3 = { version = \"0.12.1\", features = [\"extension-module\"] }\n+\n+[package.metadata.maturin]\n+requires-dist = [\"pyarrow>=1,<2\"]\n\nReview comment:\n       Is the only way of consuming the C data interface, through `pyarrow`, or would it be possible for us to use the C headers? I presume that there would be some future users of this `arrow-c-integration` who might not need to use pyarrow.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-24T02:26:43.866+0000",
                    "updated": "2020-10-24T02:26:43.866+0000",
                    "started": "2020-10-24T02:26:43.866+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "504399",
                    "issueId": "13329629"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329629/worklog/504831",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #8401:\nURL: https://github.com/apache/arrow/pull/8401#discussion_r512156316\n\n\n\n##########\nFile path: rust/arrow-c-integration/Cargo.toml\n##########\n@@ -0,0 +1,38 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+[package]\n+name = \"arrow-c-integration\"\n+description = \"\"\n+version = \"3.0.0-SNAPSHOT\"\n+homepage = \"https://github.com/apache/arrow\"\n+repository = \"https://github.com/apache/arrow\"\n+authors = [\"Apache Arrow <dev@arrow.apache.org>\"]\n+license = \"Apache-2.0\"\n+keywords = [ \"arrow\" ]\n+edition = \"2018\"\n+\n+[lib]\n+name = \"arrow_c_integration\"\n+crate-type = [\"cdylib\"]\n+\n+[dependencies]\n+arrow = { path = \"../arrow\", version = \"3.0.0-SNAPSHOT\" }\n+pyo3 = { version = \"0.12.1\", features = [\"extension-module\"] }\n+\n+[package.metadata.maturin]\n+requires-dist = [\"pyarrow>=1,<2\"]\n\nReview comment:\n       I guess we could use the c++ library and call it from rust. FYI the main reason for using `pyarrow` is because I am used to call python from arrow - it is not a technical reason.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-26T17:50:37.651+0000",
                    "updated": "2020-10-26T17:50:37.651+0000",
                    "started": "2020-10-26T17:50:37.651+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "504831",
                    "issueId": "13329629"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329629/worklog/505801",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #8401:\nURL: https://github.com/apache/arrow/pull/8401#discussion_r513593830\n\n\n\n##########\nFile path: rust/arrow/src/memory.rs\n##########\n@@ -135,6 +135,10 @@ const FALLBACK_ALIGNMENT: usize = 1 << 6;\n /// If you use allocation methods shown here you won't have any problems.\n const BYPASS_PTR: NonNull<u8> = unsafe { NonNull::new_unchecked(ALIGNMENT as *mut u8) };\n \n+#[cfg(feature = \"memory-check\")]\n+// If this number is not zero after all objects have been `drop`, there is a memory leak\n+pub static mut ALLOCATIONS: i32 = 0;\n\nReview comment:\n       Oh, and by the way, this is a very interested read:\r\n   https://travisdowns.github.io/blog/2020/07/06/concurrency-costs.html\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-28T16:38:08.842+0000",
                    "updated": "2020-10-28T16:38:08.842+0000",
                    "started": "2020-10-28T16:38:08.842+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "505801",
                    "issueId": "13329629"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329629/worklog/510130",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on pull request #8401:\nURL: https://github.com/apache/arrow/pull/8401#issuecomment-725242639\n\n\n   @nevi-me , @andygrove @pitrou @alamb , I have rebased this PR. \r\n   \r\n   I need your guidance here:\r\n   \r\n   * is this something that we still want to pursue, or should we close this? If open:\r\n   * Currently the memory track is done with a feature gate. This is faster, but requires a new compilation to run the tests with that feature gate.\r\n   * Currently it tests memory leaks via a test at the end of all tests (and under the feature gate). This covers all tests implicitely, but tests that panic are intrinsically leaky and thus there is a non-trivial interaction between tests and the memory check test.\r\n   * The integration test with Python/C++ requires another compilation, with other compiler flags, which is an extra CI burden.\r\n   \r\n   Some ideas:\r\n   \r\n   * Refactor the memory test check to be on a per-test basis, so that we do not have interactions between tests. The positive is that we won't get tests interactions. The downside is that we need to be explicit in performing the memory check on each test we want.\r\n   * Make the allocation/deallocation outside the feature gate. This may make the code slower (I need to profile) as we need to handle an thread-atomic lock of a counter, but it significantly reduces the complexity around CI (no need to re-compile with a different feature gate).\r\n   * Make the Python/C++ tests use C++ libs and headers instead of running against pyarrow. This is something that I do not know how to do, so it will take me some time.\r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-11T07:01:02.802+0000",
                    "updated": "2020-11-11T07:01:02.802+0000",
                    "started": "2020-11-11T07:01:02.802+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "510130",
                    "issueId": "13329629"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 32400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@5e6c288e[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@8ffbd9e[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@50e19853[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@2587dc9c[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@77b6c095[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@2f332eb5[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@73cc1800[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@683449d9[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@29478e22[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@1f374b39[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@c285cc7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@4618a61a[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 32400,
        "customfield_12312520": null,
        "customfield_12312521": "Sat Dec 05 08:05:15 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-12-05T08:05:15.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10109/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2020-09-27T14:26:06.000+0000",
        "updated": "2020-12-06T03:59:21.000+0000",
        "timeoriginalestimate": null,
        "description": "The goal of this issue is to support producing C Data arrays of Rust.\r\n\r\nThe use-case that motivated this issue was the possibility of running DataFusion from Python and support moving arrays from DataFusion to Python/Pyarray and vice-versa.\r\n\r\nIn particular, so that users can write Python UDFs that expect arrow arrays and return arrow arrays, in the same spirit as pandas-udfs in Spark work for Pandas.\r\n\r\nThe brute-force way of writing these arrays is by converting element by element from and to native types. The efficient way of doing it to pass the memory address from and to each implementation, which is zero-copy.\r\n\r\nTo support the latter, we need an FFI implementation in Rust that produces and consumes [C's Data interface|https://arrow.apache.org/docs/format/CDataInterface.html]",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "9h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 32400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Rust] Add support to produce a C Data interface",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329629/comment/17244435",
                    "id": "17244435",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorgecarleitao",
                        "name": "jorgecarleitao",
                        "key": "jorgecarleitao",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=jorgecarleitao&avatarId=43827",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jorgecarleitao&avatarId=43827",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jorgecarleitao&avatarId=43827",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jorgecarleitao&avatarId=43827"
                        },
                        "displayName": "Jorge Leit\u00e3o",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Issue resolved by pull request 8401\n[https://github.com/apache/arrow/pull/8401]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorgecarleitao",
                        "name": "jorgecarleitao",
                        "key": "jorgecarleitao",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=jorgecarleitao&avatarId=43827",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jorgecarleitao&avatarId=43827",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jorgecarleitao&avatarId=43827",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jorgecarleitao&avatarId=43827"
                        },
                        "displayName": "Jorge Leit\u00e3o",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2020-12-05T08:05:15.482+0000",
                    "updated": "2020-12-05T08:05:15.482+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0iyew:",
        "customfield_12314139": null
    }
}