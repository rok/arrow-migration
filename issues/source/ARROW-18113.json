{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13487311",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13487311",
    "key": "ARROW-18113",
    "fields": {
        "fixVersions": [],
        "resolution": null,
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": null,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12649921",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12649921",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "outwardIssue": {
                    "id": "13484191",
                    "key": "ARROW-17913",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13484191",
                    "fields": {
                        "summary": "feather.read_table 150x slower when reading columns in newer versions",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
                            "id": "1",
                            "description": "A problem which impairs or prevents the functions of the product.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
                            "name": "Bug",
                            "subtask": false,
                            "avatarId": 21133
                        }
                    }
                }
            },
            {
                "id": "12649922",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12649922",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "outwardIssue": {
                    "id": "13479763",
                    "key": "ARROW-17599",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13479763",
                    "fields": {
                        "summary": "[C++] ReadRangeCache should not retain data after read",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/3",
                            "description": "This issue is being actively worked on at the moment by the assignee.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/inprogress.png",
                            "name": "In Progress",
                            "id": "3",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/4",
                                "id": 4,
                                "key": "indeterminate",
                                "colorName": "yellow",
                                "name": "In Progress"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            },
            {
                "id": "12649920",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12649920",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "outwardIssue": {
                    "id": "13484297",
                    "key": "ARROW-17917",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13484297",
                    "fields": {
                        "summary": "[C++] Add opaque device id identification to InputStream",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/5",
                            "id": "5",
                            "description": "General wishlist item.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Wish",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=aucahuasi",
            "name": "aucahuasi",
            "key": "aucahuasi",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=aucahuasi&avatarId=47450",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=aucahuasi&avatarId=47450",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=aucahuasi&avatarId=47450",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=aucahuasi&avatarId=47450"
            },
            "displayName": "Percy Camilo Trive\u00f1o Aucahuasi",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
            "description": "The issue is open and ready for the assignee to start work on it.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
            "name": "Open",
            "id": "1",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                "id": 2,
                "key": "new",
                "colorName": "blue-gray",
                "name": "To Do"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": null,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=aucahuasi",
            "name": "aucahuasi",
            "key": "aucahuasi",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=aucahuasi&avatarId=47450",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=aucahuasi&avatarId=47450",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=aucahuasi&avatarId=47450",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=aucahuasi&avatarId=47450"
            },
            "displayName": "Percy Camilo Trive\u00f1o Aucahuasi",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=aucahuasi",
            "name": "aucahuasi",
            "key": "aucahuasi",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=aucahuasi&avatarId=47450",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=aucahuasi&avatarId=47450",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=aucahuasi&avatarId=47450",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=aucahuasi&avatarId=47450"
            },
            "displayName": "Percy Camilo Trive\u00f1o Aucahuasi",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-18113/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 0,
            "worklogs": []
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": null,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@21181da3[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@60b73660[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@20d5f433[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@7908d27f[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@35558cd1[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@7cb84ab2[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@73c35d7a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@4c67e257[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@55cddc0e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@6b9ef1df[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2df595b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@71d9760d[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": null,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Nov 16 16:18:29 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": null,
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-18113/watchers",
            "watchCount": 5,
            "isWatching": false
        },
        "created": "2022-10-20T18:14:58.000+0000",
        "updated": "2022-11-16T16:18:29.000+0000",
        "timeoriginalestimate": null,
        "description": "The current [ReadRangeCache|https://github.com/apache/arrow/blob/e06e98db356e602212019cfbae83fd3d5347292d/cpp/src/arrow/io/caching.h#L100] is mixing caching with coalescing and making difficult to implement readers capable to really perform concurrent reads on coalesced data (see this [github comment|https://github.com/apache/arrow/pull/14226#discussion_r999334979] for additional context); for instance, right now the prebuffering feature of those readers cannot handle concurrent invocations.\r\n\r\nThe goal for this ticket is to implement a similar component to ReadRangeCache for performing non-cache reads (doing only the coalescing part instead).\u00a0 So, once we have that new capability, we can port the parquet and IPC readers to this new component and keep improving the reading process (that would be part of other set of follow-up tickets).\u00a0 Similar ideas were mentioned here https://issues.apache.org/jira/browse/ARROW-17599\r\n\r\nMaybe a good place to implement this new capability is inside the file system abstraction (as part of a dedicated method to read coalesced data) and where the abstract file system can provide a default implementation.",
        "customfield_10010": null,
        "timetracking": {},
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "Implement a read range process without caching",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13487311/comment/17621308",
                    "id": "17621308",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "I'd like to raise my comments in ARROW-17913 and ARROW-17917 as well, especially https://issues.apache.org/jira/browse/ARROW-17913?focusedCommentId=17614155&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-17614155\u00a0. Note Weston offers suggestions there too about how we might handle this.\r\n\r\nThe API would probably be an extension of RandomAccessFile::ReadAsync. The file system would come into play by returning a subclass of RAF that overrides the new method and does coalescing appropriate to the underlying device",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2022-10-20T18:26:05.980+0000",
                    "updated": "2022-10-20T18:26:05.980+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13487311/comment/17621309",
                    "id": "17621309",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "(Of course, that's only if you choose to go with an explicit API, vs Weston's suggestion of possibly doing it 'automagically')",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2022-10-20T18:27:12.085+0000",
                    "updated": "2022-10-20T18:27:12.085+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13487311/comment/17621398",
                    "id": "17621398",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "On reflection, I don't really prefer my automagic suggestion.  I think an explicit multi-read API added to the filesystem would be a good way to go.  I don't see it as an extension of ReadAsync though.  Something like:\r\n\r\n{noformat}\r\n  /// \\brief Request multiple reads at once\r\n  ///\r\n  /// The underlying filesystem may optimize these reads by coalescing small reads into\r\n  /// large reads or by breaking up large reads into multiple parallel smaller reads.  The\r\n  /// reads should be issued in parallel if it makes sense for the filesystem.\r\n  ///\r\n  /// One future will be returned for each input read range.  Multiple returned futures\r\n  /// may correspond to a single read.  Or, a single returned future may be a combined\r\n  /// result of several individual reads.\r\n  ///\r\n  /// \\param[in] ranges The ranges to read\r\n  /// \\return A future that will complete with the data from the requested range is\r\n  /// available\r\n  virtual std::vector<Future<std::shared_ptr<Buffer>>> ReadManyAsync(\r\n      const IOContext&, const std::vector<ReadRange>& ranges);\r\n{noformat}\r\n\r\nThere could be a default implementation (perhaps relying on configurable protected min_hole_size_ and max_contiguous_read_size_ variables) so that filesystems would only need to provide a specialized alternative where it made sense.  In the future it would be interesting to benchmark and see if [preadv|https://linux.die.net/man/2/preadv] can be used to provide a more optimized version for the local filesystem.\r\n\r\nI'd also be curious to know how an API like this could be adapted (or whether my proposal fits) for something like io_uring [~sakras]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2022-10-20T22:53:23.455+0000",
                    "updated": "2022-10-20T22:53:23.455+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13487311/comment/17621401",
                    "id": "17621401",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Just to be clear: to the filesystem, or on the reader itself?\r\n\r\nAlso, I'm not clear on: \"Multiple returned futures may correspond to a single read.  Or, a single returned future may be a combined result of several individual reads.\" Isn't this saying the same thing twice?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2022-10-20T23:02:02.940+0000",
                    "updated": "2022-10-20T23:02:02.940+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13487311/comment/17621427",
                    "id": "17621427",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "> Just to be clear: to the filesystem, or on the reader itself?\r\n\r\nOops, I mean on {{RandomAccessFile}}.\r\n\r\n> Also, I'm not clear on: \"Multiple returned futures may correspond to a single read. Or, a single returned future may be a combined result of several individual reads.\" Isn't this saying the same thing twice?\r\n\r\nI might call\r\n\r\n{noformat}\r\nfile->ReadMany({0, 3}, {3, 8}, {1024, 16Mi})\r\n{noformat}.\r\n\r\nThe filesystem could then implement this as:\r\n\r\n{noformat}\r\nstd::vector<Future> futures;\r\n# The first two futures correspond to the same read\r\nFuture<Buffer> coalesced_read = ReadAsync(0, 8);\r\nfutures.push_back(coalesced_read.Then(buf => buf.Split(0, 3)));\r\nfutures.push_back(coalesced_read.Then(buf => buf.Split(3, 5)));\r\n\r\n# The third future corresponds to two reads\r\nFuture<Buffer> part_one = ReadAsync(1024, 8Mi);\r\nFuture<Buffer> part_two = ReadAsync(1024+8Mi, 8Mi-1024);\r\nfutures.push_back(AllComplete({part_one, part_two}).Then(bufs => Concatenate(bufs));\r\n{noformat}",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2022-10-21T00:42:49.332+0000",
                    "updated": "2022-10-21T00:43:16.343+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13487311/comment/17621428",
                    "id": "17621428",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Ah ok I was forgetting that we could theoretically split up reads. Thanks!",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2022-10-21T00:45:10.778+0000",
                    "updated": "2022-10-21T00:45:10.778+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13487311/comment/17622565",
                    "id": "17622565",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=sakras",
                        "name": "sakras",
                        "key": "sakras",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Sasha Krassovsky",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Linking io_uring to the Future API could be a bit challenging because Linux doesn't have a builtin thread pool API, so you still end up having to poll the completion queue. I was thinking this could probably be integrated into the Executor implementation we have. In between tasks it would poll the completion queue and schedule the individual continuation futures that get finished. Using preadv would map pretty well but it would only ever return _one_ future, I guess something like `Future<std::vector<Buffer>>`. \r\n\r\n\u00a0\r\n\r\n\u00a0",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=sakras",
                        "name": "sakras",
                        "key": "sakras",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Sasha Krassovsky",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2022-10-22T06:57:00.801+0000",
                    "updated": "2022-10-22T06:57:00.801+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13487311/comment/17623386",
                    "id": "17623386",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "{quote}\r\nLinking io_uring to the Future API could be a bit challenging because Linux doesn't have a builtin thread pool API, so you still end up having to poll the completion queue. I was thinking this could probably be integrated into the Executor implementation we have. In between tasks it would poll the completion queue and schedule the individual continuation futures that get finished. \r\n{quote}\r\n\r\nDoes io_uring have any kind of select-style API method like \"wait until at least one pending read has finished\"\r\n\r\n{quote}\r\nUsing preadv would map pretty well but it would only ever return one future, I guess something like `Future<std::vector<Buffer>>`. \r\n{quote}\r\n\r\nMaybe this would be a better interface.  I suppose it would boil down on whether or not the code can proceed with partial results.  I think there might be cases where this is true but I'd really have to dive into the readers to recall exactly.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2022-10-24T20:49:15.510+0000",
                    "updated": "2022-10-24T20:49:15.510+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13487311/comment/17623416",
                    "id": "17623416",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "For Parquet, the reader can submit reads for all ColumnChunks at once, and then decode them as they come back. So a single Future may not be great here? (Especially if the chunks are very large and don't get coalesced.)",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2022-10-24T20:58:23.375+0000",
                    "updated": "2022-10-24T20:58:23.375+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13487311/comment/17623419",
                    "id": "17623419",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=sakras",
                        "name": "sakras",
                        "key": "sakras",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Sasha Krassovsky",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Yes, io_uring has `io_uring_wait_cqe` which will wait until at least one response has finished. You can also do `io_uring_wait_cqe_nr` I think which will wait until a specific number of tasks have finished.\u00a0\r\n\r\n\u00a0\r\n\r\nWe could still use io_uring without `preadv`. We'd just have to ensure that the ring is big enough to handle as many requests as we need.\u00a0",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=sakras",
                        "name": "sakras",
                        "key": "sakras",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Sasha Krassovsky",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2022-10-24T21:02:18.099+0000",
                    "updated": "2022-10-24T21:02:18.099+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13487311/comment/17634076",
                    "id": "17634076",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=aucahuasi",
                        "name": "aucahuasi",
                        "key": "aucahuasi",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=aucahuasi&avatarId=47450",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=aucahuasi&avatarId=47450",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=aucahuasi&avatarId=47450",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=aucahuasi&avatarId=47450"
                        },
                        "displayName": "Percy Camilo Trive\u00f1o Aucahuasi",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Thanks for all the feedback!\r\n\r\nQuick question: I see we have {_}arrow::io::CacheOptions{_}, but it seems that most of its contents are related to coalescing (except perhaps {_}arrow::io::CacheOptions::lazy{_}); does it sounds a good idea to rename it to _arrow::io::CoalesceOptions_ and move it into {_}interfaces.h{_}?\r\n\r\nThe reason why I think we may need to move it into _interfaces.h_ is that _ReadManyAsync_ would be part of _RandomAccessFile_ and we may need some of the attributes we have in _arrow::io::CacheOptions_ (like _hole_size_limit_ and {_}range_size_limit{_}) ... mostly becouse for the the implementation of _ReadManyAsync_ we may need to use _arrow::io::internal::CoalesceReadRanges_ and this function needs _hole_size_limit_ and {_}range_size_limit{_}.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=aucahuasi",
                        "name": "aucahuasi",
                        "key": "aucahuasi",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=aucahuasi&avatarId=47450",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=aucahuasi&avatarId=47450",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=aucahuasi&avatarId=47450",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=aucahuasi&avatarId=47450"
                        },
                        "displayName": "Percy Camilo Trive\u00f1o Aucahuasi",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2022-11-14T23:18:12.673+0000",
                    "updated": "2022-11-14T23:18:12.673+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13487311/comment/17634082",
                    "id": "17634082",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Sounds reasonable to me, at first glance. Maybe leave behind a {{using CacheOptions = CoalesceOptions}} for compatibility (can you deprecate a {{using}} declaration?)",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2022-11-14T23:48:40.260+0000",
                    "updated": "2022-11-14T23:48:40.260+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13487311/comment/17634111",
                    "id": "17634111",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "I would think that coalescing would be an implementation detail specific to individual filesystems.  For example, a local filesystem might not bother with it (the OS already does coalescing).  However, an S3 filesystem would definitely want to coalesce.  So if we add a _ReadManyAsync_ then I think it should not have a cache options parameter.  Instead that should be a property of the filesystem if it needs to be configurable.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2022-11-15T02:06:17.061+0000",
                    "updated": "2022-11-15T02:06:17.061+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13487311/comment/17634647",
                    "id": "17634647",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=aucahuasi",
                        "name": "aucahuasi",
                        "key": "aucahuasi",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=aucahuasi&avatarId=47450",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=aucahuasi&avatarId=47450",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=aucahuasi&avatarId=47450",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=aucahuasi&avatarId=47450"
                        },
                        "displayName": "Percy Camilo Trive\u00f1o Aucahuasi",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "{quote}Sounds reasonable to me, at first glance. Maybe leave behind a using CacheOptions = CoalesceOptions for compatibility (can you deprecate a using declaration?)\u00a0\r\n{quote}\r\nDavid, I think we can deprecate it (in case we choose to rename&move it).\r\n{quote}So if we add a\u00a0ReadManyAsync\u00a0then I think it should not have a cache options parameter. Instead that should be a property of the filesystem if it needs to be configurable.\r\n{quote}\r\nWeston, yes initially I thought that _CoalesceOptions_ would be part of _arrow::io::IOContext_ (as an attribute) and _ReadManyAsync_ could use/pass the _CoalesceOptions_ to the filesystem.\u00a0 But it make sense to let the filesystem handle all of that, so in that case:\r\n # we still may choose to rename _arrow::io::CacheOptions_ to {_}arrow::io::{_}{_}CoalesceOptions{_} and move it into {_}interfaces.h{_}, so each filesystem's ctor will require {_}arrow::io::CoalesceOptions{_}.\r\n # or we just can include _caching.h_ in every filesystem declaration without changing/renaming _arrow::io::CacheOptions_ (so each filesystem's ctor will require {_}arrow::io::{_}{_}CacheOptions{_})\r\n\r\nLet me know which one sounds better to you, thanks.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=aucahuasi",
                        "name": "aucahuasi",
                        "key": "aucahuasi",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=aucahuasi&avatarId=47450",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=aucahuasi&avatarId=47450",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=aucahuasi&avatarId=47450",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=aucahuasi&avatarId=47450"
                        },
                        "displayName": "Percy Camilo Trive\u00f1o Aucahuasi",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2022-11-16T05:09:28.722+0000",
                    "updated": "2022-11-16T05:12:27.517+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13487311/comment/17634819",
                    "id": "17634819",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Ah sorry, ignore what I said - Weston is right. Though if you still want to rename it that sounds OK as long as we can have some sort of alias for compatibility.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2022-11-16T12:36:20.639+0000",
                    "updated": "2022-11-16T12:36:20.639+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13487311/comment/17634916",
                    "id": "17634916",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "{quote}\r\nor we just can include caching.h in every filesystem declaration without changing/renaming arrow::io::CacheOptions (so each filesystem's ctor will require arrow::io::CacheOptions)\r\n{quote}\r\n\r\nI prefer this, with the caveat that it should only be included in the constructors for filesystems that need it.  So, for example, it should be included in {{S3FileSystem}} but not {{LocalFileSystem}}.  Unless we find some benefit to coalescing in {{LocalFileSystem}}",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2022-11-16T16:18:29.383+0000",
                    "updated": "2022-11-16T16:18:29.383+0000"
                }
            ],
            "maxResults": 16,
            "total": 16,
            "startAt": 0
        },
        "customfield_12311820": "0|z19jgg:",
        "customfield_12314139": null
    }
}